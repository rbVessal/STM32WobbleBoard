
STM32WobbleBoardNucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aa08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0801ab98  0801ab98  0002ab98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b114  0801b114  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801b114  0801b114  0002b114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b11c  0801b11c  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b11c  0801b11c  0002b11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b120  0801b120  0002b120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801b124  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001db4  200001f8  0801b318  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00008204  20001fac  0801b318  00031fac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f974  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000625f  00000000  00000000  0007fb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000031a8  00000000  00000000  00085df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002f50  00000000  00000000  00088fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cccc  00000000  00000000  0008bef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cb78  00000000  00000000  000b8bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d09b  00000000  00000000  000e5734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f27cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000df74  00000000  00000000  001f2824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ab80 	.word	0x0801ab80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0801ab80 	.word	0x0801ab80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f006 f886 	bl	8006ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f80d 	bl	8000f06 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f000 f948 	bl	8001180 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef0:	f000 f928 	bl	8001144 <MX_DMA_Init>
  MX_CRC_Init();
 8000ef4:	f000 f85a 	bl	8000fac <MX_CRC_Init>
  MX_RTC_Init();
 8000ef8:	f000 f87a 	bl	8000ff0 <MX_RTC_Init>
  MX_MEMS_Init();
 8000efc:	f00b f95b 	bl	800c1b6 <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8000f00:	f00b f95f 	bl	800c1c2 <MX_MEMS_Process>
 8000f04:	e7fc      	b.n	8000f00 <main+0x20>

08000f06 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b096      	sub	sp, #88	; 0x58
 8000f0a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2244      	movs	r2, #68	; 0x44
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f019 f9f7 	bl	801a308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f2c:	f007 fe88 	bl	8008c40 <HAL_PWREx_ControlVoltageScaling>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f36:	f000 f965 	bl	8001204 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f44:	2310      	movs	r3, #16
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f50:	2302      	movs	r3, #2
 8000f52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f58:	230a      	movs	r3, #10
 8000f5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f007 febd 	bl	8008cec <HAL_RCC_OscConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000f78:	f000 f944 	bl	8001204 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f80:	2303      	movs	r3, #3
 8000f82:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f90:	463b      	mov	r3, r7
 8000f92:	2104      	movs	r1, #4
 8000f94:	4618      	mov	r0, r3
 8000f96:	f008 fa8f 	bl	80094b8 <HAL_RCC_ClockConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fa0:	f000 f930 	bl	8001204 <Error_Handler>
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	3758      	adds	r7, #88	; 0x58
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <MX_CRC_Init+0x3c>)
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <MX_CRC_Init+0x40>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_CRC_Init+0x3c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <MX_CRC_Init+0x3c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_CRC_Init+0x3c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <MX_CRC_Init+0x3c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_CRC_Init+0x3c>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <MX_CRC_Init+0x3c>)
 8000fd6:	f006 f9bf 	bl	8007358 <HAL_CRC_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000fe0:	f000 f910 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200015e0 	.word	0x200015e0
 8000fec:	40023000 	.word	0x40023000

08000ff0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001004:	2300      	movs	r3, #0
 8001006:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <MX_RTC_Init+0xb0>)
 800100a:	4a26      	ldr	r2, [pc, #152]	; (80010a4 <MX_RTC_Init+0xb4>)
 800100c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800100e:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <MX_RTC_Init+0xb0>)
 8001010:	2200      	movs	r2, #0
 8001012:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <MX_RTC_Init+0xb0>)
 8001016:	227f      	movs	r2, #127	; 0x7f
 8001018:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_RTC_Init+0xb0>)
 800101c:	22ff      	movs	r2, #255	; 0xff
 800101e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <MX_RTC_Init+0xb0>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001026:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <MX_RTC_Init+0xb0>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <MX_RTC_Init+0xb0>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_RTC_Init+0xb0>)
 8001034:	2200      	movs	r2, #0
 8001036:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001038:	4819      	ldr	r0, [pc, #100]	; (80010a0 <MX_RTC_Init+0xb0>)
 800103a:	f009 f8ff 	bl	800a23c <HAL_RTC_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001044:	f000 f8de 	bl	8001204 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001048:	2300      	movs	r3, #0
 800104a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800104c:	2300      	movs	r3, #0
 800104e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001050:	2300      	movs	r3, #0
 8001052:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2201      	movs	r2, #1
 8001060:	4619      	mov	r1, r3
 8001062:	480f      	ldr	r0, [pc, #60]	; (80010a0 <MX_RTC_Init+0xb0>)
 8001064:	f009 f965 	bl	800a332 <HAL_RTC_SetTime>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800106e:	f000 f8c9 	bl	8001204 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001072:	2301      	movs	r3, #1
 8001074:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001076:	2301      	movs	r3, #1
 8001078:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800107a:	2301      	movs	r3, #1
 800107c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800107e:	2300      	movs	r3, #0
 8001080:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001082:	463b      	mov	r3, r7
 8001084:	2201      	movs	r2, #1
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_RTC_Init+0xb0>)
 800108a:	f009 fa4b 	bl	800a524 <HAL_RTC_SetDate>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001094:	f000 f8b6 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20001650 	.word	0x20001650
 80010a4:	40002800 	.word	0x40002800

080010a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <MX_TIM3_Init+0x94>)
 80010c8:	4a1d      	ldr	r2, [pc, #116]	; (8001140 <MX_TIM3_Init+0x98>)
 80010ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <MX_TIM3_Init+0x94>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_TIM3_Init+0x94>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <MX_TIM3_Init+0x94>)
 80010da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_TIM3_Init+0x94>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <MX_TIM3_Init+0x94>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010ec:	4813      	ldr	r0, [pc, #76]	; (800113c <MX_TIM3_Init+0x94>)
 80010ee:	f009 fbbf 	bl	800a870 <HAL_TIM_Base_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80010f8:	f000 f884 	bl	8001204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001100:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	4619      	mov	r1, r3
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <MX_TIM3_Init+0x94>)
 800110a:	f009 fdc7 	bl	800ac9c <HAL_TIM_ConfigClockSource>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001114:	f000 f876 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_TIM3_Init+0x94>)
 8001126:	f009 ffdf 	bl	800b0e8 <HAL_TIMEx_MasterConfigSynchronization>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001130:	f000 f868 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20001604 	.word	0x20001604
 8001140:	40000400 	.word	0x40000400

08001144 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_DMA_Init+0x38>)
 800114c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <MX_DMA_Init+0x38>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6493      	str	r3, [r2, #72]	; 0x48
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_DMA_Init+0x38>)
 8001158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	2010      	movs	r0, #16
 8001168:	f006 f8bf 	bl	80072ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800116c:	2010      	movs	r0, #16
 800116e:	f006 f8d8 	bl	8007322 <HAL_NVIC_EnableIRQ>

}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000

08001180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <MX_GPIO_Init+0x80>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <MX_GPIO_Init+0x80>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <MX_GPIO_Init+0x80>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_GPIO_Init+0x80>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	4a17      	ldr	r2, [pc, #92]	; (8001200 <MX_GPIO_Init+0x80>)
 80011a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_GPIO_Init+0x80>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_GPIO_Init+0x80>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a11      	ldr	r2, [pc, #68]	; (8001200 <MX_GPIO_Init+0x80>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_GPIO_Init+0x80>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_GPIO_Init+0x80>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <MX_GPIO_Init+0x80>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_GPIO_Init+0x80>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2028      	movs	r0, #40	; 0x28
 80011ec:	f006 f87d 	bl	80072ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011f0:	2028      	movs	r0, #40	; 0x28
 80011f2:	f006 f896 	bl	8007322 <HAL_NVIC_EnableIRQ>

}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	e7fe      	b.n	800120c <Error_Handler+0x8>
	...

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_MspInit+0x44>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_MspInit+0x44>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6613      	str	r3, [r2, #96]	; 0x60
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_MspInit+0x44>)
 8001224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_MspInit+0x44>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <HAL_MspInit+0x44>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	6593      	str	r3, [r2, #88]	; 0x58
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_MspInit+0x44>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000

08001258 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_CRC_MspInit+0x38>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10b      	bne.n	8001282 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_CRC_MspInit+0x3c>)
 800126c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <HAL_CRC_MspInit+0x3c>)
 8001270:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001274:	6493      	str	r3, [r2, #72]	; 0x48
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <HAL_CRC_MspInit+0x3c>)
 8001278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40023000 	.word	0x40023000
 8001294:	40021000 	.word	0x40021000

08001298 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0a4      	sub	sp, #144	; 0x90
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	2288      	movs	r2, #136	; 0x88
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f019 f82d 	bl	801a308 <memset>
  if(hrtc->Instance==RTC)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <HAL_RTC_MspInit+0x5c>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d118      	bne.n	80012ea <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	4618      	mov	r0, r3
 80012cc:	f008 fafa 	bl	80098c4 <HAL_RCCEx_PeriphCLKConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80012d6:	f7ff ff95 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <HAL_RTC_MspInit+0x60>)
 80012dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e0:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <HAL_RTC_MspInit+0x60>)
 80012e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012ea:	bf00      	nop
 80012ec:	3790      	adds	r7, #144	; 0x90
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40002800 	.word	0x40002800
 80012f8:	40021000 	.word	0x40021000

080012fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <HAL_TIM_Base_MspInit+0x44>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d113      	bne.n	8001336 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_TIM_Base_MspInit+0x48>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <HAL_TIM_Base_MspInit+0x48>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	6593      	str	r3, [r2, #88]	; 0x58
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_TIM_Base_MspInit+0x48>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	201d      	movs	r0, #29
 800132c:	f005 ffdd 	bl	80072ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001330:	201d      	movs	r0, #29
 8001332:	f005 fff6 	bl	8007322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40000400 	.word	0x40000400
 8001344:	40021000 	.word	0x40021000

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800134c:	e7fe      	b.n	800134c <NMI_Handler+0x4>

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001394:	f005 fe8a 	bl	80070ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <DMA1_Channel6_IRQHandler+0x10>)
 80013a2:	f006 f9db 	bl	800775c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200016d4 	.word	0x200016d4

080013b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <TIM3_IRQHandler+0x10>)
 80013b6:	f009 fb52 	bl	800aa5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20001604 	.word	0x20001604

080013c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <EXTI15_10_IRQHandler+0x10>)
 80013ca:	f006 fad5 	bl	8007978 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000168 	.word	0x20000168

080013d8 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <BSP_I2C1_Init+0x70>)
 80013e4:	4a19      	ldr	r2, [pc, #100]	; (800144c <BSP_I2C1_Init+0x74>)
 80013e6:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <BSP_I2C1_Init+0x78>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	4918      	ldr	r1, [pc, #96]	; (8001450 <BSP_I2C1_Init+0x78>)
 80013f0:	600a      	str	r2, [r1, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d122      	bne.n	800143c <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80013f6:	4814      	ldr	r0, [pc, #80]	; (8001448 <BSP_I2C1_Init+0x70>)
 80013f8:	f007 f8bc 	bl	8008574 <HAL_I2C_GetState>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d11c      	bne.n	800143c <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001402:	4811      	ldr	r0, [pc, #68]	; (8001448 <BSP_I2C1_Init+0x70>)
 8001404:	f000 f8fe 	bl	8001604 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d116      	bne.n	800143c <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800140e:	480e      	ldr	r0, [pc, #56]	; (8001448 <BSP_I2C1_Init+0x70>)
 8001410:	f000 f8b4 	bl	800157c <MX_I2C1_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800141a:	f06f 0307 	mvn.w	r3, #7
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	e00c      	b.n	800143c <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001422:	2100      	movs	r1, #0
 8001424:	4808      	ldr	r0, [pc, #32]	; (8001448 <BSP_I2C1_Init+0x70>)
 8001426:	f007 fb65 	bl	8008af4 <HAL_I2CEx_ConfigAnalogFilter>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001430:	f06f 0307 	mvn.w	r3, #7
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	e001      	b.n	800143c <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800143c:	687b      	ldr	r3, [r7, #4]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20001674 	.word	0x20001674
 800144c:	40005400 	.word	0x40005400
 8001450:	20000664 	.word	0x20000664

08001454 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <BSP_I2C1_DeInit+0x48>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d014      	beq.n	8001490 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <BSP_I2C1_DeInit+0x48>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3b01      	subs	r3, #1
 800146c:	4a0b      	ldr	r2, [pc, #44]	; (800149c <BSP_I2C1_DeInit+0x48>)
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <BSP_I2C1_DeInit+0x48>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10b      	bne.n	8001490 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001478:	4809      	ldr	r0, [pc, #36]	; (80014a0 <BSP_I2C1_DeInit+0x4c>)
 800147a:	f000 f909 	bl	8001690 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800147e:	4808      	ldr	r0, [pc, #32]	; (80014a0 <BSP_I2C1_DeInit+0x4c>)
 8001480:	f006 fe07 	bl	8008092 <HAL_I2C_DeInit>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800148a:	f06f 0307 	mvn.w	r3, #7
 800148e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001490:	687b      	ldr	r3, [r7, #4]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000664 	.word	0x20000664
 80014a0:	20001674 	.word	0x20001674

080014a4 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af04      	add	r7, sp, #16
 80014aa:	60ba      	str	r2, [r7, #8]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4603      	mov	r3, r0
 80014b0:	81fb      	strh	r3, [r7, #14]
 80014b2:	460b      	mov	r3, r1
 80014b4:	81bb      	strh	r3, [r7, #12]
 80014b6:	4613      	mov	r3, r2
 80014b8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80014be:	89ba      	ldrh	r2, [r7, #12]
 80014c0:	89f9      	ldrh	r1, [r7, #14]
 80014c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2301      	movs	r3, #1
 80014d2:	480c      	ldr	r0, [pc, #48]	; (8001504 <BSP_I2C1_WriteReg+0x60>)
 80014d4:	f006 fe20 	bl	8008118 <HAL_I2C_Mem_Write>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00c      	beq.n	80014f8 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80014de:	4809      	ldr	r0, [pc, #36]	; (8001504 <BSP_I2C1_WriteReg+0x60>)
 80014e0:	f007 f856 	bl	8008590 <HAL_I2C_GetError>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d103      	bne.n	80014f2 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80014ea:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	e002      	b.n	80014f8 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80014f2:	f06f 0303 	mvn.w	r3, #3
 80014f6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80014f8:	697b      	ldr	r3, [r7, #20]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20001674 	.word	0x20001674

08001508 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af04      	add	r7, sp, #16
 800150e:	60ba      	str	r2, [r7, #8]
 8001510:	461a      	mov	r2, r3
 8001512:	4603      	mov	r3, r0
 8001514:	81fb      	strh	r3, [r7, #14]
 8001516:	460b      	mov	r3, r1
 8001518:	81bb      	strh	r3, [r7, #12]
 800151a:	4613      	mov	r3, r2
 800151c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001522:	89ba      	ldrh	r2, [r7, #12]
 8001524:	89f9      	ldrh	r1, [r7, #14]
 8001526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	480c      	ldr	r0, [pc, #48]	; (8001568 <BSP_I2C1_ReadReg+0x60>)
 8001538:	f006 ff02 	bl	8008340 <HAL_I2C_Mem_Read>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00c      	beq.n	800155c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001542:	4809      	ldr	r0, [pc, #36]	; (8001568 <BSP_I2C1_ReadReg+0x60>)
 8001544:	f007 f824 	bl	8008590 <HAL_I2C_GetError>
 8001548:	4603      	mov	r3, r0
 800154a:	2b04      	cmp	r3, #4
 800154c:	d103      	bne.n	8001556 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800154e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	e002      	b.n	800155c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001556:	f06f 0303 	mvn.w	r3, #3
 800155a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800155c:	697b      	ldr	r3, [r7, #20]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20001674 	.word	0x20001674

0800156c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001570:	f005 fdb0 	bl	80070d4 <HAL_GetTick>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a1c      	ldr	r2, [pc, #112]	; (80015fc <MX_I2C1_Init+0x80>)
 800158c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <MX_I2C1_Init+0x84>)
 8001592:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f006 fcd8 	bl	8007f74 <HAL_I2C_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ce:	2100      	movs	r1, #0
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f007 fa8f 	bl	8008af4 <HAL_I2CEx_ConfigAnalogFilter>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80015e0:	2100      	movs	r1, #0
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f007 fad1 	bl	8008b8a <HAL_I2CEx_ConfigDigitalFilter>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40005400 	.word	0x40005400
 8001600:	10909cec 	.word	0x10909cec

08001604 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <I2C1_MspInit+0x84>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <I2C1_MspInit+0x84>)
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <I2C1_MspInit+0x84>)
 800161a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162a:	2312      	movs	r3, #18
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001636:	2304      	movs	r3, #4
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4812      	ldr	r0, [pc, #72]	; (800168c <I2C1_MspInit+0x88>)
 8001642:	f006 f9c9 	bl	80079d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164c:	2312      	movs	r3, #18
 800164e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001658:	2304      	movs	r3, #4
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	480a      	ldr	r0, [pc, #40]	; (800168c <I2C1_MspInit+0x88>)
 8001664:	f006 f9b8 	bl	80079d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <I2C1_MspInit+0x84>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	4a06      	ldr	r2, [pc, #24]	; (8001688 <I2C1_MspInit+0x84>)
 800166e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001672:	6593      	str	r3, [r2, #88]	; 0x58
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <I2C1_MspInit+0x84>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	; 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40021000 	.word	0x40021000
 800168c:	48000400 	.word	0x48000400

08001690 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <I2C1_MspDeInit+0x30>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <I2C1_MspDeInit+0x30>)
 800169e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016a2:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80016a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <I2C1_MspDeInit+0x34>)
 80016aa:	f006 fb3f 	bl	8007d2c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80016ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b2:	4804      	ldr	r0, [pc, #16]	; (80016c4 <I2C1_MspDeInit+0x34>)
 80016b4:	f006 fb3a 	bl	8007d2c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000
 80016c4:	48000400 	.word	0x48000400

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f018 fdce 	bl	801a298 <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	220c      	movs	r2, #12
 8001700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20018000 	.word	0x20018000
 8001728:	00008000 	.word	0x00008000
 800172c:	20000668 	.word	0x20000668
 8001730:	20001fb0 	.word	0x20001fb0

08001734 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <SystemInit+0x20>)
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <SystemInit+0x20>)
 8001740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001790 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800175c:	f7ff ffea 	bl	8001734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001760:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001762:	e003      	b.n	800176c <LoopCopyDataInit>

08001764 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001766:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001768:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800176a:	3104      	adds	r1, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800176c:	480a      	ldr	r0, [pc, #40]	; (8001798 <LoopForever+0xa>)
	ldr	r3, =_edata
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001770:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001772:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001774:	d3f6      	bcc.n	8001764 <CopyDataInit>
	ldr	r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001778:	e002      	b.n	8001780 <LoopFillZerobss>

0800177a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800177a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800177c:	f842 3b04 	str.w	r3, [r2], #4

08001780 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <LoopForever+0x16>)
	cmp	r2, r3
 8001782:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001784:	d3f9      	bcc.n	800177a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001786:	f018 fd8d 	bl	801a2a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800178a:	f7ff fba9 	bl	8000ee0 <main>

0800178e <LoopForever>:

LoopForever:
    b LoopForever
 800178e:	e7fe      	b.n	800178e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001790:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001794:	0801b124 	.word	0x0801b124
	ldr	r0, =_sdata
 8001798:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800179c:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 80017a0:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 80017a4:	20001fac 	.word	0x20001fac

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>
	...

080017ac <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d103      	bne.n	80017c4 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	e030      	b.n	8001826 <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	7b1a      	ldrb	r2, [r3, #12]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	695a      	ldr	r2, [r3, #20]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	699a      	ldr	r2, [r3, #24]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <HTS221_RegisterBusIO+0x84>)
 8001800:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <HTS221_RegisterBusIO+0x88>)
 8001806:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d004      	beq.n	8001820 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4798      	blx	r3
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	e002      	b.n	8001826 <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	08001e63 	.word	0x08001e63
 8001834:	08001ec5 	.word	0x08001ec5

08001838 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001846:	2b00      	cmp	r3, #0
 8001848:	d108      	bne.n	800185c <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 faa4 	bl	8001d98 <HTS221_Initialize>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e004      	b.n	8001866 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800187c:	2b01      	cmp	r3, #1
 800187e:	d111      	bne.n	80018a4 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f878 	bl	8001976 <HTS221_HUM_Disable>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
 8001890:	e00d      	b.n	80018ae <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f95f 	bl	8001b56 <HTS221_TEMP_Disable>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	e004      	b.n	80018ae <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	331c      	adds	r3, #28
 80018c4:	6839      	ldr	r1, [r7, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fc28 	bl	800211c <hts221_device_id_get>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	e000      	b.n	80018da <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2200      	movs	r2, #0
 80018f8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	4a07      	ldr	r2, [pc, #28]	; (8001928 <HTS221_GetCapabilities+0x44>)
 800190a:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	4a06      	ldr	r2, [pc, #24]	; (8001928 <HTS221_GetCapabilities+0x44>)
 8001910:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	41480000 	.word	0x41480000

0800192c <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	e015      	b.n	800196e <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10b      	bne.n	8001964 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	331c      	adds	r3, #28
 8001950:	2101      	movs	r1, #1
 8001952:	4618      	mov	r0, r3
 8001954:	f000 fbf3 	bl	800213e <hts221_power_on_set>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	e004      	b.n	800196e <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	e015      	b.n	80019b8 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10b      	bne.n	80019ae <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	331c      	adds	r3, #28
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fbce 	bl	800213e <hts221_power_on_set>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ac:	e004      	b.n	80019b8 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80019ca:	6839      	ldr	r1, [r7, #0]
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f96f 	bl	8001cb0 <HTS221_GetOutputDataRate>
 80019d2:	4603      	mov	r3, r0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80019e8:	ed97 0a00 	vldr	s0, [r7]
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f9a3 	bl	8001d38 <HTS221_SetOutputDataRate>
 80019f2:	4603      	mov	r3, r0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	331c      	adds	r3, #28
 8001a0a:	f107 020c 	add.w	r2, r7, #12
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fc58 	bl	80022c6 <hts221_hum_adc_point_0_get>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	e06b      	b.n	8001afa <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f103 021c 	add.w	r2, r3, #28
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4610      	mov	r0, r2
 8001a32:	f000 fbaa 	bl	800218a <hts221_hum_rh_point_0_get>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a40:	e05b      	b.n	8001afa <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f103 021c 	add.w	r2, r3, #28
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	3308      	adds	r3, #8
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4610      	mov	r0, r2
 8001a52:	f000 fc5c 	bl	800230e <hts221_hum_adc_point_1_get>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a60:	e04b      	b.n	8001afa <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f103 021c 	add.w	r2, r3, #28
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	330c      	adds	r3, #12
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4610      	mov	r0, r2
 8001a72:	f000 fba8 	bl	80021c6 <hts221_hum_rh_point_1_get>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8001a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a80:	e03b      	b.n	8001afa <HTS221_HUM_GetHumidity+0xfe>
 8001a82:	2300      	movs	r3, #0
 8001a84:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	331c      	adds	r3, #28
 8001a8a:	f107 021c 	add.w	r2, r7, #28
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fafd 	bl	8002090 <hts221_humidity_raw_get>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa0:	e02b      	b.n	8001afa <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001aa2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f99a 	bl	8001df0 <Linear_Interpolation>
 8001abc:	eef0 7a40 	vmov.f32	s15, s0
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad4:	d503      	bpl.n	8001ade <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001b04 <HTS221_HUM_GetHumidity+0x108>
 8001ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af0:	dd02      	ble.n	8001af8 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <HTS221_HUM_GetHumidity+0x10c>)
 8001af6:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	42c80000 	.word	0x42c80000
 8001b08:	42c80000 	.word	0x42c80000

08001b0c <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e015      	b.n	8001b4e <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10b      	bne.n	8001b44 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	331c      	adds	r3, #28
 8001b30:	2101      	movs	r1, #1
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 fb03 	bl	800213e <hts221_power_on_set>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e004      	b.n	8001b4e <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e015      	b.n	8001b98 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10b      	bne.n	8001b8e <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	331c      	adds	r3, #28
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 fade 	bl	800213e <hts221_power_on_set>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8c:	e004      	b.n	8001b98 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001baa:	6839      	ldr	r1, [r7, #0]
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f87f 	bl	8001cb0 <HTS221_GetOutputDataRate>
 8001bb2:	4603      	mov	r3, r0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001bc8:	ed97 0a00 	vldr	s0, [r7]
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f8b3 	bl	8001d38 <HTS221_SetOutputDataRate>
 8001bd2:	4603      	mov	r3, r0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	331c      	adds	r3, #28
 8001bea:	f107 020c 	add.w	r2, r7, #12
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 fbb0 	bl	8002356 <hts221_temp_adc_point_0_get>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001c00:	e052      	b.n	8001ca8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f103 021c 	add.w	r2, r3, #28
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4610      	mov	r0, r2
 8001c12:	f000 faf6 	bl	8002202 <hts221_temp_deg_point_0_get>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c20:	e042      	b.n	8001ca8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f103 021c 	add.w	r2, r3, #28
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	3308      	adds	r3, #8
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4610      	mov	r0, r2
 8001c32:	f000 fbb4 	bl	800239e <hts221_temp_adc_point_1_get>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c40:	e032      	b.n	8001ca8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f103 021c 	add.w	r2, r3, #28
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	330c      	adds	r3, #12
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4610      	mov	r0, r2
 8001c52:	f000 fb07 	bl	8002264 <hts221_temp_deg_point_1_get>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c60:	e022      	b.n	8001ca8 <HTS221_TEMP_GetTemperature+0xcc>
 8001c62:	2300      	movs	r3, #0
 8001c64:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	331c      	adds	r3, #28
 8001c6a:	f107 021c 	add.w	r2, r7, #28
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 fa30 	bl	80020d6 <hts221_temperature_raw_get>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c80:	e012      	b.n	8001ca8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001c82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	eeb0 0a67 	vmov.f32	s0, s15
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f8aa 	bl	8001df0 <Linear_Interpolation>
 8001c9c:	eef0 7a40 	vmov.f32	s15, s0
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	331c      	adds	r3, #28
 8001cc2:	f107 020b 	add.w	r2, r7, #11
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 f983 	bl	8001fd4 <hts221_data_rate_get>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd8:	e025      	b.n	8001d26 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8001cda:	7afb      	ldrb	r3, [r7, #11]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d81d      	bhi.n	8001d1c <HTS221_GetOutputDataRate+0x6c>
 8001ce0:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <HTS221_GetOutputDataRate+0x38>)
 8001ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce6:	bf00      	nop
 8001ce8:	08001cf9 	.word	0x08001cf9
 8001cec:	08001d03 	.word	0x08001d03
 8001cf0:	08001d0d 	.word	0x08001d0d
 8001cf4:	08001d15 	.word	0x08001d15
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
      break;
 8001d00:	e010      	b.n	8001d24 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d08:	601a      	str	r2, [r3, #0]
      break;
 8001d0a:	e00b      	b.n	8001d24 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HTS221_GetOutputDataRate+0x80>)
 8001d10:	601a      	str	r2, [r3, #0]
      break;
 8001d12:	e007      	b.n	8001d24 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <HTS221_GetOutputDataRate+0x84>)
 8001d18:	601a      	str	r2, [r3, #0]
      break;
 8001d1a:	e003      	b.n	8001d24 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d20:	60fb      	str	r3, [r7, #12]
      break;
 8001d22:	bf00      	nop
  }

  return ret;
 8001d24:	68fb      	ldr	r3, [r7, #12]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40e00000 	.word	0x40e00000
 8001d34:	41480000 	.word	0x41480000

08001d38 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001d44:	edd7 7a00 	vldr	s15, [r7]
 8001d48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d54:	d801      	bhi.n	8001d5a <HTS221_SetOutputDataRate+0x22>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00b      	b.n	8001d72 <HTS221_SetOutputDataRate+0x3a>
 8001d5a:	edd7 7a00 	vldr	s15, [r7]
 8001d5e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	d801      	bhi.n	8001d70 <HTS221_SetOutputDataRate+0x38>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e000      	b.n	8001d72 <HTS221_SetOutputDataRate+0x3a>
 8001d70:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8001d72:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	331c      	adds	r3, #28
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 f902 	bl	8001f86 <hts221_data_rate_set>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8c:	e000      	b.n	8001d90 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	331c      	adds	r3, #28
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f9c9 	bl	800213e <hts221_power_on_set>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e017      	b.n	8001de8 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	331c      	adds	r3, #28
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f940 	bl	8002044 <hts221_block_data_update_set>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e00b      	b.n	8001de8 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8001dd0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ffaf 	bl	8001d38 <HTS221_SetOutputDataRate>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
 8001de4:	e000      	b.n	8001de8 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e0c:	edd7 7a00 	vldr	s15, [r7]
 8001e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	ed93 6a00 	vldr	s12, [r3]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e30:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	edd3 7a00 	vldr	s15, [r3]
 8001e48:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e50:	eef0 7a66 	vmov.f32	s15, s13
}
 8001e54:	eeb0 0a67 	vmov.f32	s0, s15
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001e62:	b590      	push	{r4, r7, lr}
 8001e64:	b087      	sub	sp, #28
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	460b      	mov	r3, r1
 8001e70:	72fb      	strb	r3, [r7, #11]
 8001e72:	4613      	mov	r3, r2
 8001e74:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10e      	bne.n	8001ea0 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	695c      	ldr	r4, [r3, #20]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	7b1b      	ldrb	r3, [r3, #12]
 8001e8a:	b298      	uxth	r0, r3
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
 8001e8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	b299      	uxth	r1, r3
 8001e96:	893b      	ldrh	r3, [r7, #8]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	47a0      	blx	r4
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	e00d      	b.n	8001ebc <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	695c      	ldr	r4, [r3, #20]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	7b1b      	ldrb	r3, [r3, #12]
 8001ea8:	b298      	uxth	r0, r3
 8001eaa:	7afb      	ldrb	r3, [r7, #11]
 8001eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	b299      	uxth	r1, r3
 8001eb4:	893b      	ldrh	r3, [r7, #8]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	47a0      	blx	r4
 8001eba:	4603      	mov	r3, r0
  }
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd90      	pop	{r4, r7, pc}

08001ec4 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	72fb      	strb	r3, [r7, #11]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10e      	bne.n	8001f02 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	691c      	ldr	r4, [r3, #16]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	7b1b      	ldrb	r3, [r3, #12]
 8001eec:	b298      	uxth	r0, r3
 8001eee:	7afb      	ldrb	r3, [r7, #11]
 8001ef0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	b299      	uxth	r1, r3
 8001ef8:	893b      	ldrh	r3, [r7, #8]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	47a0      	blx	r4
 8001efe:	4603      	mov	r3, r0
 8001f00:	e00d      	b.n	8001f1e <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	691c      	ldr	r4, [r3, #16]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	7b1b      	ldrb	r3, [r3, #12]
 8001f0a:	b298      	uxth	r0, r3
 8001f0c:	7afb      	ldrb	r3, [r7, #11]
 8001f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	b299      	uxth	r1, r3
 8001f16:	893b      	ldrh	r3, [r7, #8]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	47a0      	blx	r4
 8001f1c:	4603      	mov	r3, r0
  }
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	371c      	adds	r7, #28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd90      	pop	{r4, r7, pc}

08001f26 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 8001f26:	b590      	push	{r4, r7, lr}
 8001f28:	b087      	sub	sp, #28
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	461a      	mov	r2, r3
 8001f32:	460b      	mov	r3, r1
 8001f34:	72fb      	strb	r3, [r7, #11]
 8001f36:	4613      	mov	r3, r2
 8001f38:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	685c      	ldr	r4, [r3, #4]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6898      	ldr	r0, [r3, #8]
 8001f42:	893b      	ldrh	r3, [r7, #8]
 8001f44:	7af9      	ldrb	r1, [r7, #11]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	47a0      	blx	r4
 8001f4a:	6178      	str	r0, [r7, #20]
  return ret;
 8001f4c:	697b      	ldr	r3, [r7, #20]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd90      	pop	{r4, r7, pc}

08001f56 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001f56:	b590      	push	{r4, r7, lr}
 8001f58:	b087      	sub	sp, #28
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	461a      	mov	r2, r3
 8001f62:	460b      	mov	r3, r1
 8001f64:	72fb      	strb	r3, [r7, #11]
 8001f66:	4613      	mov	r3, r2
 8001f68:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681c      	ldr	r4, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6898      	ldr	r0, [r3, #8]
 8001f72:	893b      	ldrh	r3, [r7, #8]
 8001f74:	7af9      	ldrb	r1, [r7, #11]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	47a0      	blx	r4
 8001f7a:	6178      	str	r0, [r7, #20]
  return ret;
 8001f7c:	697b      	ldr	r3, [r7, #20]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	371c      	adds	r7, #28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}

08001f86 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001f92:	f107 0208 	add.w	r2, r7, #8
 8001f96:	2301      	movs	r3, #1
 8001f98:	2120      	movs	r1, #32
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffc3 	bl	8001f26 <hts221_read_reg>
 8001fa0:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10f      	bne.n	8001fc8 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	7a3b      	ldrb	r3, [r7, #8]
 8001fb2:	f362 0301 	bfi	r3, r2, #0, #2
 8001fb6:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001fb8:	f107 0208 	add.w	r2, r7, #8
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	2120      	movs	r1, #32
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ffc8 	bl	8001f56 <hts221_write_reg>
 8001fc6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001fde:	f107 0208 	add.w	r2, r7, #8
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	2120      	movs	r1, #32
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ff9d 	bl	8001f26 <hts221_read_reg>
 8001fec:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8001fee:	7a3b      	ldrb	r3, [r7, #8]
 8001ff0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d81a      	bhi.n	8002030 <hts221_data_rate_get+0x5c>
 8001ffa:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <hts221_data_rate_get+0x2c>)
 8001ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002000:	08002011 	.word	0x08002011
 8002004:	08002019 	.word	0x08002019
 8002008:	08002021 	.word	0x08002021
 800200c:	08002029 	.word	0x08002029
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
      break;
 8002016:	e00f      	b.n	8002038 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
      break;
 800201e:	e00b      	b.n	8002038 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	2202      	movs	r2, #2
 8002024:	701a      	strb	r2, [r3, #0]
      break;
 8002026:	e007      	b.n	8002038 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2203      	movs	r2, #3
 800202c:	701a      	strb	r2, [r3, #0]
      break;
 800202e:	e003      	b.n	8002038 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2204      	movs	r2, #4
 8002034:	701a      	strb	r2, [r3, #0]
      break;
 8002036:	bf00      	nop
  }

  return ret;
 8002038:	68fb      	ldr	r3, [r7, #12]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop

08002044 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002050:	f107 0208 	add.w	r2, r7, #8
 8002054:	2301      	movs	r3, #1
 8002056:	2120      	movs	r1, #32
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff64 	bl	8001f26 <hts221_read_reg>
 800205e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10f      	bne.n	8002086 <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	b2da      	uxtb	r2, r3
 800206e:	7a3b      	ldrb	r3, [r7, #8]
 8002070:	f362 0382 	bfi	r3, r2, #2, #1
 8002074:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002076:	f107 0208 	add.w	r2, r7, #8
 800207a:	2301      	movs	r3, #1
 800207c:	2120      	movs	r1, #32
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ff69 	bl	8001f56 <hts221_write_reg>
 8002084:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002086:	68fb      	ldr	r3, [r7, #12]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800209a:	f107 0208 	add.w	r2, r7, #8
 800209e:	2302      	movs	r3, #2
 80020a0:	2128      	movs	r1, #40	; 0x28
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ff3f 	bl	8001f26 <hts221_read_reg>
 80020a8:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80020aa:	7a7b      	ldrb	r3, [r7, #9]
 80020ac:	b21a      	sxth	r2, r3
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	b29a      	uxth	r2, r3
 80020be:	7a3b      	ldrb	r3, [r7, #8]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	b21a      	sxth	r2, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	801a      	strh	r2, [r3, #0]
  return ret;
 80020cc:	68fb      	ldr	r3, [r7, #12]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80020e0:	f107 0208 	add.w	r2, r7, #8
 80020e4:	2302      	movs	r3, #2
 80020e6:	212a      	movs	r1, #42	; 0x2a
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff1c 	bl	8001f26 <hts221_read_reg>
 80020ee:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80020f0:	7a7b      	ldrb	r3, [r7, #9]
 80020f2:	b21a      	sxth	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	b29a      	uxth	r2, r3
 8002104:	7a3b      	ldrb	r3, [r7, #8]
 8002106:	b29b      	uxth	r3, r3
 8002108:	4413      	add	r3, r2
 800210a:	b29b      	uxth	r3, r3
 800210c:	b21a      	sxth	r2, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	801a      	strh	r2, [r3, #0]
  return ret;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8002126:	2301      	movs	r3, #1
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	210f      	movs	r1, #15
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff fefa 	bl	8001f26 <hts221_read_reg>
 8002132:	60f8      	str	r0, [r7, #12]
  return ret;
 8002134:	68fb      	ldr	r3, [r7, #12]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800214a:	f107 0208 	add.w	r2, r7, #8
 800214e:	2301      	movs	r3, #1
 8002150:	2120      	movs	r1, #32
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff fee7 	bl	8001f26 <hts221_read_reg>
 8002158:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10f      	bne.n	8002180 <hts221_power_on_set+0x42>
    reg.pd = val;
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	b2da      	uxtb	r2, r3
 8002168:	7a3b      	ldrb	r3, [r7, #8]
 800216a:	f362 13c7 	bfi	r3, r2, #7, #1
 800216e:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002170:	f107 0208 	add.w	r2, r7, #8
 8002174:	2301      	movs	r3, #1
 8002176:	2120      	movs	r1, #32
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff feec 	bl	8001f56 <hts221_write_reg>
 800217e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002180:	68fb      	ldr	r3, [r7, #12]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8002194:	f107 020b 	add.w	r2, r7, #11
 8002198:	2301      	movs	r3, #1
 800219a:	2130      	movs	r1, #48	; 0x30
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff fec2 	bl	8001f26 <hts221_read_reg>
 80021a2:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80021a4:	7afb      	ldrb	r3, [r7, #11]
 80021a6:	ee07 3a90 	vmov	s15, r3
 80021aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80021bc:	68fb      	ldr	r3, [r7, #12]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80021d0:	f107 020b 	add.w	r2, r7, #11
 80021d4:	2301      	movs	r3, #1
 80021d6:	2131      	movs	r1, #49	; 0x31
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff fea4 	bl	8001f26 <hts221_read_reg>
 80021de:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80021e0:	7afb      	ldrb	r3, [r7, #11]
 80021e2:	ee07 3a90 	vmov	s15, r3
 80021e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80021f8:	68fb      	ldr	r3, [r7, #12]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800220c:	f107 020f 	add.w	r2, r7, #15
 8002210:	2301      	movs	r3, #1
 8002212:	2132      	movs	r1, #50	; 0x32
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff fe86 	bl	8001f26 <hts221_read_reg>
 800221a:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d11b      	bne.n	800225a <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002222:	f107 0210 	add.w	r2, r7, #16
 8002226:	2301      	movs	r3, #1
 8002228:	2135      	movs	r1, #53	; 0x35
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff fe7b 	bl	8001f26 <hts221_read_reg>
 8002230:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8002232:	7c3b      	ldrb	r3, [r7, #16]
 8002234:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002238:	b2db      	uxtb	r3, r3
 800223a:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	4413      	add	r3, r2
 8002244:	ee07 3a90 	vmov	s15, r3
 8002248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800224c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002250:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 800225a:	697b      	ldr	r3, [r7, #20]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800226e:	f107 020f 	add.w	r2, r7, #15
 8002272:	2301      	movs	r3, #1
 8002274:	2133      	movs	r1, #51	; 0x33
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fe55 	bl	8001f26 <hts221_read_reg>
 800227c:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d11b      	bne.n	80022bc <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002284:	f107 0210 	add.w	r2, r7, #16
 8002288:	2301      	movs	r3, #1
 800228a:	2135      	movs	r1, #53	; 0x35
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff fe4a 	bl	8001f26 <hts221_read_reg>
 8002292:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8002294:	7c3b      	ldrb	r3, [r7, #16]
 8002296:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800229a:	b2db      	uxtb	r3, r3
 800229c:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	4413      	add	r3, r2
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ae:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80022b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80022bc:	697b      	ldr	r3, [r7, #20]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80022d0:	f107 0208 	add.w	r2, r7, #8
 80022d4:	2302      	movs	r3, #2
 80022d6:	2136      	movs	r1, #54	; 0x36
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff fe24 	bl	8001f26 <hts221_read_reg>
 80022de:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80022e0:	7a7b      	ldrb	r3, [r7, #9]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	7a3b      	ldrb	r3, [r7, #8]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80022f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80022f6:	ee07 3a90 	vmov	s15, r3
 80022fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8002304:	68fb      	ldr	r3, [r7, #12]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8002318:	f107 0208 	add.w	r2, r7, #8
 800231c:	2302      	movs	r3, #2
 800231e:	213a      	movs	r1, #58	; 0x3a
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff fe00 	bl	8001f26 <hts221_read_reg>
 8002326:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002328:	7a7b      	ldrb	r3, [r7, #9]
 800232a:	b29b      	uxth	r3, r3
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	b29a      	uxth	r2, r3
 8002330:	7a3b      	ldrb	r3, [r7, #8]
 8002332:	b29b      	uxth	r3, r3
 8002334:	4413      	add	r3, r2
 8002336:	b29b      	uxth	r3, r3
 8002338:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800233a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800233e:	ee07 3a90 	vmov	s15, r3
 8002342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 800234c:	68fb      	ldr	r3, [r7, #12]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8002360:	f107 0208 	add.w	r2, r7, #8
 8002364:	2302      	movs	r3, #2
 8002366:	213c      	movs	r1, #60	; 0x3c
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff fddc 	bl	8001f26 <hts221_read_reg>
 800236e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002370:	7a7b      	ldrb	r3, [r7, #9]
 8002372:	b29b      	uxth	r3, r3
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	b29a      	uxth	r2, r3
 8002378:	7a3b      	ldrb	r3, [r7, #8]
 800237a:	b29b      	uxth	r3, r3
 800237c:	4413      	add	r3, r2
 800237e:	b29b      	uxth	r3, r3
 8002380:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002382:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8002394:	68fb      	ldr	r3, [r7, #12]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80023a8:	f107 0208 	add.w	r2, r7, #8
 80023ac:	2302      	movs	r3, #2
 80023ae:	213e      	movs	r1, #62	; 0x3e
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff fdb8 	bl	8001f26 <hts221_read_reg>
 80023b6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80023b8:	7a7b      	ldrb	r3, [r7, #9]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	b29a      	uxth	r2, r3
 80023c0:	7a3b      	ldrb	r3, [r7, #8]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80023ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023ce:	ee07 3a90 	vmov	s15, r3
 80023d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80023dc:	68fb      	ldr	r3, [r7, #12]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d103      	bne.n	8002404 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	e04d      	b.n	80024a0 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	7b1a      	ldrb	r2, [r3, #12]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	699a      	ldr	r2, [r3, #24]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a1b      	ldr	r2, [pc, #108]	; (80024ac <LPS22HB_RegisterBusIO+0xc4>)
 8002440:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a1a      	ldr	r2, [pc, #104]	; (80024b0 <LPS22HB_RegisterBusIO+0xc8>)
 8002446:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d103      	bne.n	800245e <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	e020      	b.n	80024a0 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4798      	blx	r3
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	e016      	b.n	80024a0 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d112      	bne.n	80024a0 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10d      	bne.n	80024a0 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002484:	2301      	movs	r3, #1
 8002486:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8002488:	7afb      	ldrb	r3, [r7, #11]
 800248a:	461a      	mov	r2, r3
 800248c:	2110      	movs	r1, #16
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f9df 	bl	8002852 <LPS22HB_Write_Reg>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
 800249e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80024a0:	68fb      	ldr	r3, [r7, #12]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	08002b13 	.word	0x08002b13
 80024b0:	08002b99 	.word	0x08002b99

080024b4 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d108      	bne.n	80024d8 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 faca 	bl	8002a60 <LPS22HB_Initialize>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	e004      	b.n	80024e2 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d111      	bne.n	8002520 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f877 	bl	80025f0 <LPS22HB_PRESS_Disable>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8002508:	f04f 33ff 	mov.w	r3, #4294967295
 800250c:	e00d      	b.n	800252a <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f918 	bl	8002744 <LPS22HB_TEMP_Disable>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
 800251e:	e004      	b.n	800252a <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	331c      	adds	r3, #28
 8002540:	6839      	ldr	r1, [r7, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fcd0 	bl	8002ee8 <lps22hb_device_id_get>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
 8002552:	e000      	b.n	8002556 <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2200      	movs	r2, #0
 800256e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2201      	movs	r2, #1
 8002574:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2200      	movs	r2, #0
 8002580:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <LPS22HB_GetCapabilities+0x44>)
 800258e:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <LPS22HB_GetCapabilities+0x44>)
 8002594:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	42960000 	.word	0x42960000

080025a8 <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e014      	b.n	80025e8 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f103 021c 	add.w	r2, r3, #28
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80025ca:	4619      	mov	r1, r3
 80025cc:	4610      	mov	r0, r2
 80025ce:	f000 fbd5 	bl	8002d7c <lps22hb_data_rate_set>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 80025d8:	f04f 33ff 	mov.w	r3, #4294967295
 80025dc:	e004      	b.n	80025e8 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e024      	b.n	8002650 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800260c:	2b00      	cmp	r3, #0
 800260e:	d11a      	bne.n	8002646 <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f103 021c 	add.w	r2, r3, #28
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	332b      	adds	r3, #43	; 0x2b
 800261a:	4619      	mov	r1, r3
 800261c:	4610      	mov	r0, r2
 800261e:	f000 fbd3 	bl	8002dc8 <lps22hb_data_rate_get>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
 800262c:	e010      	b.n	8002650 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	331c      	adds	r3, #28
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fba1 	bl	8002d7c <lps22hb_data_rate_set>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8002640:	f04f 33ff 	mov.w	r3, #4294967295
 8002644:	e004      	b.n	8002650 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8002662:	6839      	ldr	r1, [r7, #0]
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f90f 	bl	8002888 <LPS22HB_GetOutputDataRate>
 800266a:	4603      	mov	r3, r0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002686:	2b01      	cmp	r3, #1
 8002688:	d106      	bne.n	8002698 <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 800268a:	ed97 0a00 	vldr	s0, [r7]
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f94e 	bl	8002930 <LPS22HB_SetOutputDataRate_When_Enabled>
 8002694:	4603      	mov	r3, r0
 8002696:	e005      	b.n	80026a4 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002698:	ed97 0a00 	vldr	s0, [r7]
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f99f 	bl	80029e0 <LPS22HB_SetOutputDataRate_When_Disabled>
 80026a2:	4603      	mov	r3, r0
  }
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	2204      	movs	r2, #4
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f017 fe22 	bl	801a308 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	331c      	adds	r3, #28
 80026c8:	f107 020c 	add.w	r2, r7, #12
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fbbe 	bl	8002e50 <lps22hb_pressure_raw_get>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	e009      	b.n	80026f4 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 facc 	bl	8002c80 <lps22hb_from_lsb_to_hpa>
 80026e8:	eef0 7a40 	vmov.f32	s15, s0
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e014      	b.n	800273c <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f103 021c 	add.w	r2, r3, #28
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800271e:	4619      	mov	r1, r3
 8002720:	4610      	mov	r0, r2
 8002722:	f000 fb2b 	bl	8002d7c <lps22hb_data_rate_set>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 800272c:	f04f 33ff 	mov.w	r3, #4294967295
 8002730:	e004      	b.n	800273c <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e024      	b.n	80027a4 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002760:	2b00      	cmp	r3, #0
 8002762:	d11a      	bne.n	800279a <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f103 021c 	add.w	r2, r3, #28
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	332b      	adds	r3, #43	; 0x2b
 800276e:	4619      	mov	r1, r3
 8002770:	4610      	mov	r0, r2
 8002772:	f000 fb29 	bl	8002dc8 <lps22hb_data_rate_get>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
 8002780:	e010      	b.n	80027a4 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	331c      	adds	r3, #28
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 faf7 	bl	8002d7c <lps22hb_data_rate_set>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8002794:	f04f 33ff 	mov.w	r3, #4294967295
 8002798:	e004      	b.n	80027a4 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 80027b6:	6839      	ldr	r1, [r7, #0]
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f865 	bl	8002888 <LPS22HB_GetOutputDataRate>
 80027be:	4603      	mov	r3, r0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d106      	bne.n	80027ec <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 80027de:	ed97 0a00 	vldr	s0, [r7]
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f8a4 	bl	8002930 <LPS22HB_SetOutputDataRate_When_Enabled>
 80027e8:	4603      	mov	r3, r0
 80027ea:	e005      	b.n	80027f8 <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 80027ec:	ed97 0a00 	vldr	s0, [r7]
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f8f5 	bl	80029e0 <LPS22HB_SetOutputDataRate_When_Disabled>
 80027f6:	4603      	mov	r3, r0
  }
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800280a:	f107 030c 	add.w	r3, r7, #12
 800280e:	2202      	movs	r2, #2
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f017 fd78 	bl	801a308 <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	331c      	adds	r3, #28
 800281c:	f107 020c 	add.w	r2, r7, #12
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fb3d 	bl	8002ea2 <lps22hb_temperature_raw_get>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	e00a      	b.n	800284a <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8002834:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fa39 	bl	8002cb0 <lps22hb_from_lsb_to_degc>
 800283e:	eef0 7a40 	vmov.f32	s15, s0
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	70fb      	strb	r3, [r7, #3]
 800285e:	4613      	mov	r3, r2
 8002860:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f103 001c 	add.w	r0, r3, #28
 8002868:	1cba      	adds	r2, r7, #2
 800286a:	78f9      	ldrb	r1, [r7, #3]
 800286c:	2301      	movs	r3, #1
 800286e:	f000 f9ee 	bl	8002c4e <lps22hb_write_reg>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8002878:	f04f 33ff 	mov.w	r3, #4294967295
 800287c:	e000      	b.n	8002880 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	331c      	adds	r3, #28
 800289a:	f107 020b 	add.w	r2, r7, #11
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fa91 	bl	8002dc8 <lps22hb_data_rate_get>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 80028ac:	f04f 33ff 	mov.w	r3, #4294967295
 80028b0:	e031      	b.n	8002916 <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 80028b2:	7afb      	ldrb	r3, [r7, #11]
 80028b4:	2b05      	cmp	r3, #5
 80028b6:	d829      	bhi.n	800290c <LPS22HB_GetOutputDataRate+0x84>
 80028b8:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <LPS22HB_GetOutputDataRate+0x38>)
 80028ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028be:	bf00      	nop
 80028c0:	080028d9 	.word	0x080028d9
 80028c4:	080028e3 	.word	0x080028e3
 80028c8:	080028ed 	.word	0x080028ed
 80028cc:	080028f5 	.word	0x080028f5
 80028d0:	080028fd 	.word	0x080028fd
 80028d4:	08002905 	.word	0x08002905
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
      break;
 80028e0:	e018      	b.n	8002914 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028e8:	601a      	str	r2, [r3, #0]
      break;
 80028ea:	e013      	b.n	8002914 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	4a0c      	ldr	r2, [pc, #48]	; (8002920 <LPS22HB_GetOutputDataRate+0x98>)
 80028f0:	601a      	str	r2, [r3, #0]
      break;
 80028f2:	e00f      	b.n	8002914 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	4a0b      	ldr	r2, [pc, #44]	; (8002924 <LPS22HB_GetOutputDataRate+0x9c>)
 80028f8:	601a      	str	r2, [r3, #0]
      break;
 80028fa:	e00b      	b.n	8002914 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <LPS22HB_GetOutputDataRate+0xa0>)
 8002900:	601a      	str	r2, [r3, #0]
      break;
 8002902:	e007      	b.n	8002914 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	4a09      	ldr	r2, [pc, #36]	; (800292c <LPS22HB_GetOutputDataRate+0xa4>)
 8002908:	601a      	str	r2, [r3, #0]
      break;
 800290a:	e003      	b.n	8002914 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 800290c:	f04f 33ff 	mov.w	r3, #4294967295
 8002910:	60fb      	str	r3, [r7, #12]
      break;
 8002912:	bf00      	nop
  }

  return ret;
 8002914:	68fb      	ldr	r3, [r7, #12]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	41200000 	.word	0x41200000
 8002924:	41c80000 	.word	0x41c80000
 8002928:	42480000 	.word	0x42480000
 800292c:	42960000 	.word	0x42960000

08002930 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 800293c:	edd7 7a00 	vldr	s15, [r7]
 8002940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294c:	d801      	bhi.n	8002952 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 800294e:	2301      	movs	r3, #1
 8002950:	e021      	b.n	8002996 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8002952:	edd7 7a00 	vldr	s15, [r7]
 8002956:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800295a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800295e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002962:	d801      	bhi.n	8002968 <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 8002964:	2302      	movs	r3, #2
 8002966:	e016      	b.n	8002996 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8002968:	edd7 7a00 	vldr	s15, [r7]
 800296c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002978:	d801      	bhi.n	800297e <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 800297a:	2303      	movs	r3, #3
 800297c:	e00b      	b.n	8002996 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 800297e:	edd7 7a00 	vldr	s15, [r7]
 8002982:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80029dc <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 8002986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800298a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298e:	d801      	bhi.n	8002994 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8002990:	2304      	movs	r3, #4
 8002992:	e000      	b.n	8002996 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8002994:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8002996:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	331c      	adds	r3, #28
 800299c:	7bfa      	ldrb	r2, [r7, #15]
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 f9eb 	bl	8002d7c <lps22hb_data_rate_set>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
 80029b0:	e00f      	b.n	80029d2 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f103 021c 	add.w	r2, r3, #28
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	332b      	adds	r3, #43	; 0x2b
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f000 fa02 	bl	8002dc8 <lps22hb_data_rate_get>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
 80029ce:	e000      	b.n	80029d2 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	42480000 	.word	0x42480000

080029e0 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 80029ec:	edd7 7a00 	vldr	s15, [r7]
 80029f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fc:	d801      	bhi.n	8002a02 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e021      	b.n	8002a46 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8002a02:	edd7 7a00 	vldr	s15, [r7]
 8002a06:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a12:	d801      	bhi.n	8002a18 <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e016      	b.n	8002a46 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8002a18:	edd7 7a00 	vldr	s15, [r7]
 8002a1c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a28:	d801      	bhi.n	8002a2e <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e00b      	b.n	8002a46 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8002a2e:	edd7 7a00 	vldr	s15, [r7]
 8002a32:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002a5c <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 8002a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	d801      	bhi.n	8002a44 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8002a40:	2304      	movs	r3, #4
 8002a42:	e000      	b.n	8002a46 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8002a44:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	42480000 	.word	0x42480000

08002a60 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	331c      	adds	r3, #28
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fa4b 	bl	8002f0a <lps22hb_low_power_set>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	e044      	b.n	8002b0a <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	331c      	adds	r3, #28
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f978 	bl	8002d7c <lps22hb_data_rate_set>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	e038      	b.n	8002b0a <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	331c      	adds	r3, #28
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f946 	bl	8002d30 <lps22hb_low_pass_filter_mode_set>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	e02c      	b.n	8002b0a <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	331c      	adds	r3, #28
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f914 	bl	8002ce4 <lps22hb_block_data_update_set>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac6:	e020      	b.n	8002b0a <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10b      	bne.n	8002ae8 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	331c      	adds	r3, #28
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fa3d 	bl	8002f56 <lps22hb_auto_add_inc_set>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00e      	beq.n	8002b00 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8002ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae6:	e010      	b.n	8002b0a <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	331c      	adds	r3, #28
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fa31 	bl	8002f56 <lps22hb_auto_add_inc_set>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295
 8002afe:	e004      	b.n	8002b0a <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2203      	movs	r2, #3
 8002b04:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b12:	b590      	push	{r4, r7, lr}
 8002b14:	b089      	sub	sp, #36	; 0x24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	460b      	mov	r3, r1
 8002b20:	72fb      	strb	r3, [r7, #11]
 8002b22:	4613      	mov	r3, r2
 8002b24:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d121      	bne.n	8002b7a <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	83fb      	strh	r3, [r7, #30]
 8002b3a:	e018      	b.n	8002b6e <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	695c      	ldr	r4, [r3, #20]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	7b1b      	ldrb	r3, [r3, #12]
 8002b44:	b298      	uxth	r0, r3
 8002b46:	7afb      	ldrb	r3, [r7, #11]
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	8bfb      	ldrh	r3, [r7, #30]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	b299      	uxth	r1, r3
 8002b50:	8bfb      	ldrh	r3, [r7, #30]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	441a      	add	r2, r3
 8002b56:	2301      	movs	r3, #1
 8002b58:	47a0      	blx	r4
 8002b5a:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	e013      	b.n	8002b90 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8002b68:	8bfb      	ldrh	r3, [r7, #30]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	83fb      	strh	r3, [r7, #30]
 8002b6e:	8bfa      	ldrh	r2, [r7, #30]
 8002b70:	893b      	ldrh	r3, [r7, #8]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d3e2      	bcc.n	8002b3c <ReadRegWrap+0x2a>
      }
    }

    return ret;
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	e00a      	b.n	8002b90 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	695c      	ldr	r4, [r3, #20]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	7b1b      	ldrb	r3, [r3, #12]
 8002b82:	b298      	uxth	r0, r3
 8002b84:	7afb      	ldrb	r3, [r7, #11]
 8002b86:	b299      	uxth	r1, r3
 8002b88:	893b      	ldrh	r3, [r7, #8]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	47a0      	blx	r4
 8002b8e:	4603      	mov	r3, r0
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3724      	adds	r7, #36	; 0x24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd90      	pop	{r4, r7, pc}

08002b98 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	72fb      	strb	r3, [r7, #11]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d121      	bne.n	8002c00 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	83fb      	strh	r3, [r7, #30]
 8002bc0:	e018      	b.n	8002bf4 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	691c      	ldr	r4, [r3, #16]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	7b1b      	ldrb	r3, [r3, #12]
 8002bca:	b298      	uxth	r0, r3
 8002bcc:	7afb      	ldrb	r3, [r7, #11]
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	8bfb      	ldrh	r3, [r7, #30]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	b299      	uxth	r1, r3
 8002bd6:	8bfb      	ldrh	r3, [r7, #30]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	441a      	add	r2, r3
 8002bdc:	2301      	movs	r3, #1
 8002bde:	47a0      	blx	r4
 8002be0:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bec:	e013      	b.n	8002c16 <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8002bee:	8bfb      	ldrh	r3, [r7, #30]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	83fb      	strh	r3, [r7, #30]
 8002bf4:	8bfa      	ldrh	r2, [r7, #30]
 8002bf6:	893b      	ldrh	r3, [r7, #8]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d3e2      	bcc.n	8002bc2 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	e00a      	b.n	8002c16 <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	691c      	ldr	r4, [r3, #16]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	7b1b      	ldrb	r3, [r3, #12]
 8002c08:	b298      	uxth	r0, r3
 8002c0a:	7afb      	ldrb	r3, [r7, #11]
 8002c0c:	b299      	uxth	r1, r3
 8002c0e:	893b      	ldrh	r3, [r7, #8]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	47a0      	blx	r4
 8002c14:	4603      	mov	r3, r0
  }
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3724      	adds	r7, #36	; 0x24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd90      	pop	{r4, r7, pc}

08002c1e <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002c1e:	b590      	push	{r4, r7, lr}
 8002c20:	b087      	sub	sp, #28
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	72fb      	strb	r3, [r7, #11]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	685c      	ldr	r4, [r3, #4]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6898      	ldr	r0, [r3, #8]
 8002c3a:	893b      	ldrh	r3, [r7, #8]
 8002c3c:	7af9      	ldrb	r1, [r7, #11]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	47a0      	blx	r4
 8002c42:	6178      	str	r0, [r7, #20]
  return ret;
 8002c44:	697b      	ldr	r3, [r7, #20]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd90      	pop	{r4, r7, pc}

08002c4e <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002c4e:	b590      	push	{r4, r7, lr}
 8002c50:	b087      	sub	sp, #28
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	72fb      	strb	r3, [r7, #11]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681c      	ldr	r4, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6898      	ldr	r0, [r3, #8]
 8002c6a:	893b      	ldrh	r3, [r7, #8]
 8002c6c:	7af9      	ldrb	r1, [r7, #11]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	47a0      	blx	r4
 8002c72:	6178      	str	r0, [r7, #20]
  return ret;
 8002c74:	697b      	ldr	r3, [r7, #20]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd90      	pop	{r4, r7, pc}
	...

08002c80 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 1048576.0f );
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c92:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002cac <lps22hb_from_lsb_to_hpa+0x2c>
 8002c96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c9a:	eef0 7a66 	vmov.f32	s15, s13
}
 8002c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	49800000 	.word	0x49800000

08002cb0 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 8002cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cc6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002ce0 <lps22hb_from_lsb_to_degc+0x30>
 8002cca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002cce:	eef0 7a66 	vmov.f32	s15, s13
}
 8002cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	42c80000 	.word	0x42c80000

08002ce4 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002cf0:	f107 0208 	add.w	r2, r7, #8
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	2110      	movs	r1, #16
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ff90 	bl	8002c1e <lps22hb_read_reg>
 8002cfe:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10f      	bne.n	8002d26 <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	7a3b      	ldrb	r3, [r7, #8]
 8002d10:	f362 0341 	bfi	r3, r2, #1, #1
 8002d14:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002d16:	f107 0208 	add.w	r2, r7, #8
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	2110      	movs	r1, #16
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ff95 	bl	8002c4e <lps22hb_write_reg>
 8002d24:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002d26:	68fb      	ldr	r3, [r7, #12]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002d3c:	f107 0208 	add.w	r2, r7, #8
 8002d40:	2301      	movs	r3, #1
 8002d42:	2110      	movs	r1, #16
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff ff6a 	bl	8002c1e <lps22hb_read_reg>
 8002d4a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10f      	bne.n	8002d72 <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	7a3b      	ldrb	r3, [r7, #8]
 8002d5c:	f362 0383 	bfi	r3, r2, #2, #2
 8002d60:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002d62:	f107 0208 	add.w	r2, r7, #8
 8002d66:	2301      	movs	r3, #1
 8002d68:	2110      	movs	r1, #16
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff ff6f 	bl	8002c4e <lps22hb_write_reg>
 8002d70:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002d88:	f107 0208 	add.w	r2, r7, #8
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	2110      	movs	r1, #16
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ff44 	bl	8002c1e <lps22hb_read_reg>
 8002d96:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10f      	bne.n	8002dbe <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	7a3b      	ldrb	r3, [r7, #8]
 8002da8:	f362 1306 	bfi	r3, r2, #4, #3
 8002dac:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002dae:	f107 0208 	add.w	r2, r7, #8
 8002db2:	2301      	movs	r3, #1
 8002db4:	2110      	movs	r1, #16
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ff49 	bl	8002c4e <lps22hb_write_reg>
 8002dbc:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002dd2:	f107 0208 	add.w	r2, r7, #8
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	2110      	movs	r1, #16
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff ff1f 	bl	8002c1e <lps22hb_read_reg>
 8002de0:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl_reg1.odr) {
 8002de2:	7a3b      	ldrb	r3, [r7, #8]
 8002de4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d826      	bhi.n	8002e3c <lps22hb_data_rate_get+0x74>
 8002dee:	a201      	add	r2, pc, #4	; (adr r2, 8002df4 <lps22hb_data_rate_get+0x2c>)
 8002df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df4:	08002e0d 	.word	0x08002e0d
 8002df8:	08002e15 	.word	0x08002e15
 8002dfc:	08002e1d 	.word	0x08002e1d
 8002e00:	08002e25 	.word	0x08002e25
 8002e04:	08002e2d 	.word	0x08002e2d
 8002e08:	08002e35 	.word	0x08002e35
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
      break;
 8002e12:	e017      	b.n	8002e44 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
      break;
 8002e1a:	e013      	b.n	8002e44 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	701a      	strb	r2, [r3, #0]
      break;
 8002e22:	e00f      	b.n	8002e44 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2203      	movs	r2, #3
 8002e28:	701a      	strb	r2, [r3, #0]
      break;
 8002e2a:	e00b      	b.n	8002e44 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2204      	movs	r2, #4
 8002e30:	701a      	strb	r2, [r3, #0]
      break;
 8002e32:	e007      	b.n	8002e44 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2205      	movs	r2, #5
 8002e38:	701a      	strb	r2, [r3, #0]
      break;
 8002e3a:	e003      	b.n	8002e44 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
      break;
 8002e42:	bf00      	nop
  }

  return ret;
 8002e44:	68fb      	ldr	r3, [r7, #12]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop

08002e50 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8002e5a:	f107 0208 	add.w	r2, r7, #8
 8002e5e:	2303      	movs	r3, #3
 8002e60:	2128      	movs	r1, #40	; 0x28
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff fedb 	bl	8002c1e <lps22hb_read_reg>
 8002e68:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8002e6a:	7abb      	ldrb	r3, [r7, #10]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	021b      	lsls	r3, r3, #8
 8002e78:	7a7a      	ldrb	r2, [r7, #9]
 8002e7a:	441a      	add	r2, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	7a3a      	ldrb	r2, [r7, #8]
 8002e88:	441a      	add	r2, r3
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	021a      	lsls	r2, r3, #8
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	601a      	str	r2, [r3, #0]
  return ret;
 8002e98:	68fb      	ldr	r3, [r7, #12]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 8002eac:	f107 0208 	add.w	r2, r7, #8
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	212b      	movs	r1, #43	; 0x2b
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff feb2 	bl	8002c1e <lps22hb_read_reg>
 8002eba:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8002ebc:	7a7b      	ldrb	r3, [r7, #9]
 8002ebe:	b21a      	sxth	r2, r3
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	7a3b      	ldrb	r3, [r7, #8]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	b21a      	sxth	r2, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	801a      	strh	r2, [r3, #0]
  return ret;
 8002ede:	68fb      	ldr	r3, [r7, #12]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	210f      	movs	r1, #15
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff fe90 	bl	8002c1e <lps22hb_read_reg>
 8002efe:	60f8      	str	r0, [r7, #12]
  return ret;
 8002f00:	68fb      	ldr	r3, [r7, #12]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	460b      	mov	r3, r1
 8002f14:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8002f16:	f107 0208 	add.w	r2, r7, #8
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	211a      	movs	r1, #26
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff fe7d 	bl	8002c1e <lps22hb_read_reg>
 8002f24:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10f      	bne.n	8002f4c <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	7a3b      	ldrb	r3, [r7, #8]
 8002f36:	f362 0300 	bfi	r3, r2, #0, #1
 8002f3a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8002f3c:	f107 0208 	add.w	r2, r7, #8
 8002f40:	2301      	movs	r3, #1
 8002f42:	211a      	movs	r1, #26
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff fe82 	bl	8002c4e <lps22hb_write_reg>
 8002f4a:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8002f62:	f107 0208 	add.w	r2, r7, #8
 8002f66:	2301      	movs	r3, #1
 8002f68:	2111      	movs	r1, #17
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff fe57 	bl	8002c1e <lps22hb_read_reg>
 8002f70:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10f      	bne.n	8002f98 <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	7a3b      	ldrb	r3, [r7, #8]
 8002f82:	f362 1304 	bfi	r3, r2, #4, #1
 8002f86:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8002f88:	f107 0208 	add.w	r2, r7, #8
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	2111      	movs	r1, #17
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff fe5c 	bl	8002c4e <lps22hb_write_reg>
 8002f96:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002f98:	68fb      	ldr	r3, [r7, #12]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d103      	bne.n	8002fc0 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	e04d      	b.n	800305c <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	7b1a      	ldrb	r2, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	699a      	ldr	r2, [r3, #24]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8002ffc:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a1a      	ldr	r2, [pc, #104]	; (800306c <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8003002:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d103      	bne.n	800301a <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8003012:	f04f 33ff 	mov.w	r3, #4294967295
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	e020      	b.n	800305c <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4798      	blx	r3
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8003026:	f04f 33ff 	mov.w	r3, #4294967295
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e016      	b.n	800305c <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d112      	bne.n	800305c <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10d      	bne.n	800305c <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8003040:	2301      	movs	r3, #1
 8003042:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8003044:	7afb      	ldrb	r3, [r7, #11]
 8003046:	461a      	mov	r2, r3
 8003048:	2123      	movs	r1, #35	; 0x23
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fb55 	bl	80036fa <LSM303AGR_ACC_Write_Reg>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	e000      	b.n	800305e <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 800305c:	68fb      	ldr	r3, [r7, #12]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	08003f09 	.word	0x08003f09
 800306c:	08003f6b 	.word	0x08003f6b

08003070 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	331c      	adds	r3, #28
 800307c:	2101      	movs	r1, #1
 800307e:	4618      	mov	r0, r3
 8003080:	f001 f94a 	bl	8004318 <lsm303agr_xl_block_data_update_set>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295
 800308e:	e02c      	b.n	80030ea <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	331c      	adds	r3, #28
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f001 faed 	bl	8004676 <lsm303agr_xl_fifo_mode_set>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80030a2:	f04f 33ff 	mov.w	r3, #4294967295
 80030a6:	e020      	b.n	80030ea <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2205      	movs	r2, #5
 80030ac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	331c      	adds	r3, #28
 80030b4:	2100      	movs	r1, #0
 80030b6:	4618      	mov	r0, r3
 80030b8:	f001 f84e 	bl	8004158 <lsm303agr_xl_data_rate_set>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295
 80030c6:	e010      	b.n	80030ea <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	331c      	adds	r3, #28
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 f8c4 	bl	800425c <lsm303agr_xl_full_scale_set>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 80030da:	f04f 33ff 	mov.w	r3, #4294967295
 80030de:	e004      	b.n	80030ea <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f87c 	bl	80031f8 <LSM303AGR_ACC_Disable>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8003106:	f04f 33ff 	mov.w	r3, #4294967295
 800310a:	e008      	b.n	800311e <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	331c      	adds	r3, #28
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f001 fa55 	bl	80045e6 <lsm303agr_xl_device_id_get>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	e000      	b.n	800314a <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2200      	movs	r2, #0
 800316e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2200      	movs	r2, #0
 8003174:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2200      	movs	r2, #0
 800317a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2210      	movs	r2, #16
 8003180:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2200      	movs	r2, #0
 8003186:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	4a06      	ldr	r2, [pc, #24]	; (80031ac <LSM303AGR_ACC_GetCapabilities+0x58>)
 8003194:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	43c80000 	.word	0x43c80000

080031b0 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e014      	b.n	80031f0 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f103 021c 	add.w	r2, r3, #28
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80031d2:	4619      	mov	r1, r3
 80031d4:	4610      	mov	r0, r2
 80031d6:	f000 ffbf 	bl	8004158 <lsm303agr_xl_data_rate_set>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 80031e0:	f04f 33ff 	mov.w	r3, #4294967295
 80031e4:	e004      	b.n	80031f0 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e01f      	b.n	800324e <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f103 021c 	add.w	r2, r3, #28
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	332a      	adds	r3, #42	; 0x2a
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f000 ffc2 	bl	80041a4 <lsm303agr_xl_data_rate_get>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8003226:	f04f 33ff 	mov.w	r3, #4294967295
 800322a:	e010      	b.n	800324e <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	331c      	adds	r3, #28
 8003230:	2100      	movs	r1, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f000 ff90 	bl	8004158 <lsm303agr_xl_data_rate_set>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 800323e:	f04f 33ff 	mov.w	r3, #4294967295
 8003242:	e004      	b.n	800324e <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	331c      	adds	r3, #28
 8003268:	f107 020b 	add.w	r2, r7, #11
 800326c:	4611      	mov	r1, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f000 ff3e 	bl	80040f0 <lsm303agr_xl_operating_mode_get>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 800327a:	f04f 33ff 	mov.w	r3, #4294967295
 800327e:	e031      	b.n	80032e4 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8003280:	7afb      	ldrb	r3, [r7, #11]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d01a      	beq.n	80032bc <LSM303AGR_ACC_GetSensitivity+0x66>
 8003286:	2b02      	cmp	r3, #2
 8003288:	dc22      	bgt.n	80032d0 <LSM303AGR_ACC_GetSensitivity+0x7a>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <LSM303AGR_ACC_GetSensitivity+0x3e>
 800328e:	2b01      	cmp	r3, #1
 8003290:	d00a      	beq.n	80032a8 <LSM303AGR_ACC_GetSensitivity+0x52>
 8003292:	e01d      	b.n	80032d0 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8003294:	6839      	ldr	r1, [r7, #0]
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fca8 	bl	8003bec <LSM303AGR_ACC_GetSensitivityHR>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01a      	beq.n	80032d8 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295
 80032a6:	e01d      	b.n	80032e4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 80032a8:	6839      	ldr	r1, [r7, #0]
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fce4 	bl	8003c78 <LSM303AGR_ACC_GetSensitivityNM>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d012      	beq.n	80032dc <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ba:	e013      	b.n	80032e4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 80032bc:	6839      	ldr	r1, [r7, #0]
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fd20 	bl	8003d04 <LSM303AGR_ACC_GetSensitivityLP>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 80032ca:	f04f 33ff 	mov.w	r3, #4294967295
 80032ce:	e009      	b.n	80032e4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295
 80032d4:	60fb      	str	r3, [r7, #12]
      break;
 80032d6:	e004      	b.n	80032e2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80032d8:	bf00      	nop
 80032da:	e002      	b.n	80032e2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80032dc:	bf00      	nop
 80032de:	e000      	b.n	80032e2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80032e0:	bf00      	nop
  }

  return ret;
 80032e2:	68fb      	ldr	r3, [r7, #12]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	331c      	adds	r3, #28
 80032fe:	f107 020b 	add.w	r2, r7, #11
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fef3 	bl	80040f0 <lsm303agr_xl_operating_mode_get>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8003310:	f04f 33ff 	mov.w	r3, #4294967295
 8003314:	e09d      	b.n	8003452 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	331c      	adds	r3, #28
 800331a:	f107 020a 	add.w	r2, r7, #10
 800331e:	4611      	mov	r1, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f000 ff3f 	bl	80041a4 <lsm303agr_xl_data_rate_get>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 800332c:	f04f 33ff 	mov.w	r3, #4294967295
 8003330:	e08f      	b.n	8003452 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8003332:	7afb      	ldrb	r3, [r7, #11]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d147      	bne.n	80033c8 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8003338:	7abb      	ldrb	r3, [r7, #10]
 800333a:	2b09      	cmp	r3, #9
 800333c:	d840      	bhi.n	80033c0 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 800333e:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8003340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003344:	0800336d 	.word	0x0800336d
 8003348:	08003377 	.word	0x08003377
 800334c:	08003381 	.word	0x08003381
 8003350:	08003389 	.word	0x08003389
 8003354:	08003391 	.word	0x08003391
 8003358:	08003399 	.word	0x08003399
 800335c:	080033a1 	.word	0x080033a1
 8003360:	080033a9 	.word	0x080033a9
 8003364:	080033b1 	.word	0x080033b1
 8003368:	080033b9 	.word	0x080033b9
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
        break;
 8003374:	e06c      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800337c:	601a      	str	r2, [r3, #0]
        break;
 800337e:	e067      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4a36      	ldr	r2, [pc, #216]	; (800345c <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8003384:	601a      	str	r2, [r3, #0]
        break;
 8003386:	e063      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	4a35      	ldr	r2, [pc, #212]	; (8003460 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 800338c:	601a      	str	r2, [r3, #0]
        break;
 800338e:	e05f      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	4a34      	ldr	r2, [pc, #208]	; (8003464 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8003394:	601a      	str	r2, [r3, #0]
        break;
 8003396:	e05b      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	4a33      	ldr	r2, [pc, #204]	; (8003468 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 800339c:	601a      	str	r2, [r3, #0]
        break;
 800339e:	e057      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4a32      	ldr	r2, [pc, #200]	; (800346c <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80033a4:	601a      	str	r2, [r3, #0]
        break;
 80033a6:	e053      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	4a31      	ldr	r2, [pc, #196]	; (8003470 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80033ac:	601a      	str	r2, [r3, #0]
        break;
 80033ae:	e04f      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	4a30      	ldr	r2, [pc, #192]	; (8003474 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 80033b4:	601a      	str	r2, [r3, #0]
        break;
 80033b6:	e04b      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4a2f      	ldr	r2, [pc, #188]	; (8003478 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 80033bc:	601a      	str	r2, [r3, #0]
        break;
 80033be:	e047      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 80033c0:	f04f 33ff 	mov.w	r3, #4294967295
 80033c4:	60fb      	str	r3, [r7, #12]
        break;
 80033c6:	e043      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 80033c8:	7abb      	ldrb	r3, [r7, #10]
 80033ca:	2b09      	cmp	r3, #9
 80033cc:	d83c      	bhi.n	8003448 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 80033ce:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	080033fd 	.word	0x080033fd
 80033d8:	08003407 	.word	0x08003407
 80033dc:	08003411 	.word	0x08003411
 80033e0:	08003419 	.word	0x08003419
 80033e4:	08003421 	.word	0x08003421
 80033e8:	08003429 	.word	0x08003429
 80033ec:	08003431 	.word	0x08003431
 80033f0:	08003439 	.word	0x08003439
 80033f4:	08003449 	.word	0x08003449
 80033f8:	08003441 	.word	0x08003441
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
        break;
 8003404:	e024      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800340c:	601a      	str	r2, [r3, #0]
        break;
 800340e:	e01f      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4a12      	ldr	r2, [pc, #72]	; (800345c <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8003414:	601a      	str	r2, [r3, #0]
        break;
 8003416:	e01b      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	4a11      	ldr	r2, [pc, #68]	; (8003460 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 800341c:	601a      	str	r2, [r3, #0]
        break;
 800341e:	e017      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4a10      	ldr	r2, [pc, #64]	; (8003464 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8003424:	601a      	str	r2, [r3, #0]
        break;
 8003426:	e013      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4a0f      	ldr	r2, [pc, #60]	; (8003468 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 800342c:	601a      	str	r2, [r3, #0]
        break;
 800342e:	e00f      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	4a0e      	ldr	r2, [pc, #56]	; (800346c <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8003434:	601a      	str	r2, [r3, #0]
        break;
 8003436:	e00b      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 800343c:	601a      	str	r2, [r3, #0]
        break;
 800343e:	e007      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4a0e      	ldr	r2, [pc, #56]	; (800347c <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8003444:	601a      	str	r2, [r3, #0]
        break;
 8003446:	e003      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8003448:	f04f 33ff 	mov.w	r3, #4294967295
 800344c:	60fb      	str	r3, [r7, #12]
        break;
 800344e:	bf00      	nop
    }
  }

  return ret;
 8003450:	68fb      	ldr	r3, [r7, #12]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	41200000 	.word	0x41200000
 8003460:	41c80000 	.word	0x41c80000
 8003464:	42480000 	.word	0x42480000
 8003468:	42c80000 	.word	0x42c80000
 800346c:	43480000 	.word	0x43480000
 8003470:	43c80000 	.word	0x43c80000
 8003474:	44ca8000 	.word	0x44ca8000
 8003478:	45a80000 	.word	0x45a80000
 800347c:	44a80000 	.word	0x44a80000

08003480 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003492:	2b01      	cmp	r3, #1
 8003494:	d106      	bne.n	80034a4 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003496:	ed97 0a00 	vldr	s0, [r7]
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fc78 	bl	8003d90 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 80034a0:	4603      	mov	r3, r0
 80034a2:	e005      	b.n	80034b0 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80034a4:	ed97 0a00 	vldr	s0, [r7]
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 fcd3 	bl	8003e54 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 80034ae:	4603      	mov	r3, r0
  }
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	331c      	adds	r3, #28
 80034ca:	f107 020b 	add.w	r2, r7, #11
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fee9 	bl	80042a8 <lsm303agr_xl_full_scale_get>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
 80034e0:	e023      	b.n	800352a <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80034e2:	7afb      	ldrb	r3, [r7, #11]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d81b      	bhi.n	8003520 <LSM303AGR_ACC_GetFullScale+0x68>
 80034e8:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <LSM303AGR_ACC_GetFullScale+0x38>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003501 	.word	0x08003501
 80034f4:	08003509 	.word	0x08003509
 80034f8:	08003511 	.word	0x08003511
 80034fc:	08003519 	.word	0x08003519
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2202      	movs	r2, #2
 8003504:	601a      	str	r2, [r3, #0]
      break;
 8003506:	e00f      	b.n	8003528 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2204      	movs	r2, #4
 800350c:	601a      	str	r2, [r3, #0]
      break;
 800350e:	e00b      	b.n	8003528 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2208      	movs	r2, #8
 8003514:	601a      	str	r2, [r3, #0]
      break;
 8003516:	e007      	b.n	8003528 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2210      	movs	r2, #16
 800351c:	601a      	str	r2, [r3, #0]
      break;
 800351e:	e003      	b.n	8003528 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003520:	f04f 33ff 	mov.w	r3, #4294967295
 8003524:	60fb      	str	r3, [r7, #12]
      break;
 8003526:	bf00      	nop
  }

  return ret;
 8003528:	68fb      	ldr	r3, [r7, #12]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop

08003534 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b02      	cmp	r3, #2
 8003542:	dd0b      	ble.n	800355c <LSM303AGR_ACC_SetFullScale+0x28>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b04      	cmp	r3, #4
 8003548:	dd06      	ble.n	8003558 <LSM303AGR_ACC_SetFullScale+0x24>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b08      	cmp	r3, #8
 800354e:	dc01      	bgt.n	8003554 <LSM303AGR_ACC_SetFullScale+0x20>
 8003550:	2302      	movs	r3, #2
 8003552:	e004      	b.n	800355e <LSM303AGR_ACC_SetFullScale+0x2a>
 8003554:	2303      	movs	r3, #3
 8003556:	e002      	b.n	800355e <LSM303AGR_ACC_SetFullScale+0x2a>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <LSM303AGR_ACC_SetFullScale+0x2a>
 800355c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 800355e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	331c      	adds	r3, #28
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	4611      	mov	r1, r2
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fe77 	bl	800425c <lsm303agr_xl_full_scale_set>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8003574:	f04f 33ff 	mov.w	r3, #4294967295
 8003578:	e000      	b.n	800357c <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 800358e:	2301      	movs	r3, #1
 8003590:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	331c      	adds	r3, #28
 800359a:	f107 020f 	add.w	r2, r7, #15
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fda5 	bl	80040f0 <lsm303agr_xl_operating_mode_get>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 80035ac:	f04f 33ff 	mov.w	r3, #4294967295
 80035b0:	e04a      	b.n	8003648 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d00c      	beq.n	80035d2 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	dc0e      	bgt.n	80035da <LSM303AGR_ACC_GetAxesRaw+0x56>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <LSM303AGR_ACC_GetAxesRaw+0x42>
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d003      	beq.n	80035cc <LSM303AGR_ACC_GetAxesRaw+0x48>
 80035c4:	e009      	b.n	80035da <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 80035c6:	2310      	movs	r3, #16
 80035c8:	83fb      	strh	r3, [r7, #30]
      break;
 80035ca:	e00a      	b.n	80035e2 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 80035cc:	2340      	movs	r3, #64	; 0x40
 80035ce:	83fb      	strh	r3, [r7, #30]
      break;
 80035d0:	e007      	b.n	80035e2 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 80035d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d6:	83fb      	strh	r3, [r7, #30]
      break;
 80035d8:	e003      	b.n	80035e2 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
 80035de:	61bb      	str	r3, [r7, #24]
      break;
 80035e0:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d101      	bne.n	80035ee <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	e02c      	b.n	8003648 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	331c      	adds	r3, #28
 80035f2:	f107 0210 	add.w	r2, r7, #16
 80035f6:	4611      	mov	r1, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 feb3 	bl	8004364 <lsm303agr_acceleration_raw_get>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8003604:	f04f 33ff 	mov.w	r3, #4294967295
 8003608:	e01e      	b.n	8003648 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 800360a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800360e:	461a      	mov	r2, r3
 8003610:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003614:	fb92 f3f3 	sdiv	r3, r2, r3
 8003618:	b21a      	sxth	r2, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 800361e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003622:	461a      	mov	r2, r3
 8003624:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003628:	fb92 f3f3 	sdiv	r3, r2, r3
 800362c:	b21a      	sxth	r2, r3
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8003632:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003636:	461a      	mov	r2, r3
 8003638:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800363c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003640:	b21a      	sxth	r2, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	809a      	strh	r2, [r3, #4]

  return ret;
 8003646:	69bb      	ldr	r3, [r7, #24]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3720      	adds	r7, #32
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8003660:	f107 0310 	add.w	r3, r7, #16
 8003664:	4619      	mov	r1, r3
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ff8c 	bl	8003584 <LSM303AGR_ACC_GetAxesRaw>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8003672:	f04f 33ff 	mov.w	r3, #4294967295
 8003676:	e03c      	b.n	80036f2 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8003678:	f107 030c 	add.w	r3, r7, #12
 800367c:	4619      	mov	r1, r3
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff fde9 	bl	8003256 <LSM303AGR_ACC_GetSensitivity>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 800368a:	f04f 33ff 	mov.w	r3, #4294967295
 800368e:	e030      	b.n	80036f2 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8003690:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003694:	ee07 3a90 	vmov	s15, r3
 8003698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800369c:	edd7 7a03 	vldr	s15, [r7, #12]
 80036a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036a8:	ee17 2a90 	vmov	r2, s15
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80036b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80036b4:	ee07 3a90 	vmov	s15, r3
 80036b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80036c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036c8:	ee17 2a90 	vmov	r2, s15
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80036d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036d4:	ee07 3a90 	vmov	s15, r3
 80036d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80036e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e8:	ee17 2a90 	vmov	r2, s15
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	460b      	mov	r3, r1
 8003704:	70fb      	strb	r3, [r7, #3]
 8003706:	4613      	mov	r3, r2
 8003708:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f103 001c 	add.w	r0, r3, #28
 8003710:	1cba      	adds	r2, r7, #2
 8003712:	78f9      	ldrb	r1, [r7, #3]
 8003714:	2301      	movs	r3, #1
 8003716:	f000 fcd3 	bl	80040c0 <lsm303agr_write_reg>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8003720:	f04f 33ff 	mov.w	r3, #4294967295
 8003724:	e000      	b.n	8003728 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d103      	bne.n	800374c <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8003744:	f04f 33ff 	mov.w	r3, #4294967295
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	e04b      	b.n	80037e4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	7b1a      	ldrb	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a1a      	ldr	r2, [pc, #104]	; (80037f0 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8003788:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a19      	ldr	r2, [pc, #100]	; (80037f4 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 800378e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d103      	bne.n	80037a6 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800379e:	f04f 33ff 	mov.w	r3, #4294967295
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	e01e      	b.n	80037e4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4798      	blx	r3
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 80037b2:	f04f 33ff 	mov.w	r3, #4294967295
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	e014      	b.n	80037e4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d010      	beq.n	80037e4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	331c      	adds	r3, #28
 80037d0:	2101      	movs	r1, #1
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 ff75 	bl	80046c2 <lsm303agr_mag_i2c_interface_set>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 80037de:	f04f 33ff 	mov.w	r3, #4294967295
 80037e2:	e000      	b.n	80037e6 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 80037e4:	68fb      	ldr	r3, [r7, #12]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	08003fcd 	.word	0x08003fcd
 80037f4:	0800402f 	.word	0x0800402f

080037f8 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	331c      	adds	r3, #28
 8003804:	2101      	movs	r1, #1
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fe7c 	bl	8004504 <lsm303agr_mag_block_data_update_set>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8003812:	f04f 33ff 	mov.w	r3, #4294967295
 8003816:	e028      	b.n	800386a <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	331c      	adds	r3, #28
 800381c:	2102      	movs	r1, #2
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fdeb 	bl	80043fa <lsm303agr_mag_operating_mode_set>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800382a:	f04f 33ff 	mov.w	r3, #4294967295
 800382e:	e01c      	b.n	800386a <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	331c      	adds	r3, #28
 8003834:	2103      	movs	r1, #3
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fe05 	bl	8004446 <lsm303agr_mag_data_rate_set>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295
 8003846:	e010      	b.n	800386a <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	331c      	adds	r3, #28
 800384c:	2100      	movs	r1, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f000 feeb 	bl	800462a <lsm303agr_mag_self_test_set>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 800385a:	f04f 33ff 	mov.w	r3, #4294967295
 800385e:	e004      	b.n	800386a <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f874 	bl	8003968 <LSM303AGR_MAG_Disable>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8003886:	f04f 33ff 	mov.w	r3, #4294967295
 800388a:	e004      	b.n	8003896 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	331c      	adds	r3, #28
 80038ac:	6839      	ldr	r1, [r7, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 feaa 	bl	8004608 <lsm303agr_mag_device_id_get>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80038ba:	f04f 33ff 	mov.w	r3, #4294967295
 80038be:	e000      	b.n	80038c2 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2200      	movs	r2, #0
 80038e0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2201      	movs	r2, #1
 80038e6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2200      	movs	r2, #0
 80038ec:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2200      	movs	r2, #0
 80038f2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2232      	movs	r2, #50	; 0x32
 80038fe:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4a04      	ldr	r2, [pc, #16]	; (8003924 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8003914:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	42c80000 	.word	0x42c80000

08003928 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e010      	b.n	8003960 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	331c      	adds	r3, #28
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fd58 	bl	80043fa <lsm303agr_mag_operating_mode_set>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
 8003954:	e004      	b.n	8003960 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e010      	b.n	80039a0 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	331c      	adds	r3, #28
 8003982:	2102      	movs	r1, #2
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fd38 	bl	80043fa <lsm303agr_mag_operating_mode_set>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003990:	f04f 33ff 	mov.w	r3, #4294967295
 8003994:	e004      	b.n	80039a0 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80039b8:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	331c      	adds	r3, #28
 80039da:	f107 020b 	add.w	r2, r7, #11
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fd57 	bl	8004494 <lsm303agr_mag_data_rate_get>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80039ec:	f04f 33ff 	mov.w	r3, #4294967295
 80039f0:	e023      	b.n	8003a3a <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80039f2:	7afb      	ldrb	r3, [r7, #11]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d81b      	bhi.n	8003a30 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 80039f8:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a11 	.word	0x08003a11
 8003a04:	08003a19 	.word	0x08003a19
 8003a08:	08003a21 	.word	0x08003a21
 8003a0c:	08003a29 	.word	0x08003a29
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	4a0c      	ldr	r2, [pc, #48]	; (8003a44 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8003a14:	601a      	str	r2, [r3, #0]
      break;
 8003a16:	e00f      	b.n	8003a38 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	4a0b      	ldr	r2, [pc, #44]	; (8003a48 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8003a1c:	601a      	str	r2, [r3, #0]
      break;
 8003a1e:	e00b      	b.n	8003a38 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8003a24:	601a      	str	r2, [r3, #0]
      break;
 8003a26:	e007      	b.n	8003a38 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	4a09      	ldr	r2, [pc, #36]	; (8003a50 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8003a2c:	601a      	str	r2, [r3, #0]
      break;
 8003a2e:	e003      	b.n	8003a38 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003a30:	f04f 33ff 	mov.w	r3, #4294967295
 8003a34:	60fb      	str	r3, [r7, #12]
      break;
 8003a36:	bf00      	nop
  }

  return ret;
 8003a38:	68fb      	ldr	r3, [r7, #12]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	41200000 	.word	0x41200000
 8003a48:	41a00000 	.word	0x41a00000
 8003a4c:	42480000 	.word	0x42480000
 8003a50:	42c80000 	.word	0x42c80000

08003a54 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8003a60:	edd7 7a00 	vldr	s15, [r7]
 8003a64:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a70:	d801      	bhi.n	8003a76 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8003a72:	2300      	movs	r3, #0
 8003a74:	e016      	b.n	8003aa4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003a76:	edd7 7a00 	vldr	s15, [r7]
 8003a7a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003a7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a86:	d801      	bhi.n	8003a8c <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e00b      	b.n	8003aa4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003a8c:	edd7 7a00 	vldr	s15, [r7]
 8003a90:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003acc <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8003a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9c:	d801      	bhi.n	8003aa2 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e000      	b.n	8003aa4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003aa2:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8003aa4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	331c      	adds	r3, #28
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	4611      	mov	r1, r2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fcc9 	bl	8004446 <lsm303agr_mag_data_rate_set>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	e000      	b.n	8003ac2 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	42480000 	.word	0x42480000

08003ad0 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2232      	movs	r2, #50	; 0x32
 8003ade:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	331c      	adds	r3, #28
 8003b14:	f107 0208 	add.w	r2, r7, #8
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fd18 	bl	8004550 <lsm303agr_magnetic_raw_get>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	e00c      	b.n	8003b46 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003b2c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003b34:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003b3c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b086      	sub	sp, #24
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	331c      	adds	r3, #28
 8003b5c:	f107 0210 	add.w	r2, r7, #16
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fcf4 	bl	8004550 <lsm303agr_magnetic_raw_get>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b72:	e036      	b.n	8003be2 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	4619      	mov	r1, r3
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff ff14 	bl	80039a8 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003b80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b84:	ee07 3a90 	vmov	s15, r3
 8003b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b98:	ee17 2a90 	vmov	r2, s15
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003ba0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ba4:	ee07 3a90 	vmov	s15, r3
 8003ba8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bac:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bb8:	ee17 2a90 	vmov	r2, s15
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003bc0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003bc4:	ee07 3a90 	vmov	s15, r3
 8003bc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bd8:	ee17 2a90 	vmov	r2, s15
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	331c      	adds	r3, #28
 8003bfe:	f107 020b 	add.w	r2, r7, #11
 8003c02:	4611      	mov	r1, r2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fb4f 	bl	80042a8 <lsm303agr_xl_full_scale_get>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295
 8003c14:	e023      	b.n	8003c5e <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003c16:	7afb      	ldrb	r3, [r7, #11]
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d81b      	bhi.n	8003c54 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8003c1c:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8003c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c22:	bf00      	nop
 8003c24:	08003c35 	.word	0x08003c35
 8003c28:	08003c3d 	.word	0x08003c3d
 8003c2c:	08003c45 	.word	0x08003c45
 8003c30:	08003c4d 	.word	0x08003c4d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8003c38:	601a      	str	r2, [r3, #0]
      break;
 8003c3a:	e00f      	b.n	8003c5c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	4a0b      	ldr	r2, [pc, #44]	; (8003c6c <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8003c40:	601a      	str	r2, [r3, #0]
      break;
 8003c42:	e00b      	b.n	8003c5c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8003c48:	601a      	str	r2, [r3, #0]
      break;
 8003c4a:	e007      	b.n	8003c5c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8003c50:	601a      	str	r2, [r3, #0]
      break;
 8003c52:	e003      	b.n	8003c5c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003c54:	f04f 33ff 	mov.w	r3, #4294967295
 8003c58:	60fb      	str	r3, [r7, #12]
      break;
 8003c5a:	bf00      	nop
  }

  return ret;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	3f7ae148 	.word	0x3f7ae148
 8003c6c:	3ff9999a 	.word	0x3ff9999a
 8003c70:	4079999a 	.word	0x4079999a
 8003c74:	413b851f 	.word	0x413b851f

08003c78 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	331c      	adds	r3, #28
 8003c8a:	f107 020b 	add.w	r2, r7, #11
 8003c8e:	4611      	mov	r1, r2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fb09 	bl	80042a8 <lsm303agr_xl_full_scale_get>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8003c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca0:	e023      	b.n	8003cea <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003ca2:	7afb      	ldrb	r3, [r7, #11]
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d81b      	bhi.n	8003ce0 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8003ca8:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003cc1 	.word	0x08003cc1
 8003cb4:	08003cc9 	.word	0x08003cc9
 8003cb8:	08003cd1 	.word	0x08003cd1
 8003cbc:	08003cd9 	.word	0x08003cd9
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	4a0c      	ldr	r2, [pc, #48]	; (8003cf4 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8003cc4:	601a      	str	r2, [r3, #0]
      break;
 8003cc6:	e00f      	b.n	8003ce8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8003ccc:	601a      	str	r2, [r3, #0]
      break;
 8003cce:	e00b      	b.n	8003ce8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8003cd4:	601a      	str	r2, [r3, #0]
      break;
 8003cd6:	e007      	b.n	8003ce8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	4a09      	ldr	r2, [pc, #36]	; (8003d00 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8003cdc:	601a      	str	r2, [r3, #0]
      break;
 8003cde:	e003      	b.n	8003ce8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce4:	60fb      	str	r3, [r7, #12]
      break;
 8003ce6:	bf00      	nop
  }

  return ret;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	4079999a 	.word	0x4079999a
 8003cf8:	40fa3d71 	.word	0x40fa3d71
 8003cfc:	417a147b 	.word	0x417a147b
 8003d00:	423b999a 	.word	0x423b999a

08003d04 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	331c      	adds	r3, #28
 8003d16:	f107 020b 	add.w	r2, r7, #11
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fac3 	bl	80042a8 <lsm303agr_xl_full_scale_get>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8003d28:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2c:	e023      	b.n	8003d76 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003d2e:	7afb      	ldrb	r3, [r7, #11]
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d81b      	bhi.n	8003d6c <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8003d34:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003d4d 	.word	0x08003d4d
 8003d40:	08003d55 	.word	0x08003d55
 8003d44:	08003d5d 	.word	0x08003d5d
 8003d48:	08003d65 	.word	0x08003d65
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	4a0c      	ldr	r2, [pc, #48]	; (8003d80 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003d50:	601a      	str	r2, [r3, #0]
      break;
 8003d52:	e00f      	b.n	8003d74 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	4a0b      	ldr	r2, [pc, #44]	; (8003d84 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8003d58:	601a      	str	r2, [r3, #0]
      break;
 8003d5a:	e00b      	b.n	8003d74 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8003d60:	601a      	str	r2, [r3, #0]
      break;
 8003d62:	e007      	b.n	8003d74 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8003d68:	601a      	str	r2, [r3, #0]
      break;
 8003d6a:	e003      	b.n	8003d74 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d70:	60fb      	str	r3, [r7, #12]
      break;
 8003d72:	bf00      	nop
  }

  return ret;
 8003d74:	68fb      	ldr	r3, [r7, #12]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	417a147b 	.word	0x417a147b
 8003d84:	41fa147b 	.word	0x41fa147b
 8003d88:	427a147b 	.word	0x427a147b
 8003d8c:	433b947b 	.word	0x433b947b

08003d90 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003d9c:	edd7 7a00 	vldr	s15, [r7]
 8003da0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dac:	d801      	bhi.n	8003db2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e037      	b.n	8003e22 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003db2:	edd7 7a00 	vldr	s15, [r7]
 8003db6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc2:	d801      	bhi.n	8003dc8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e02c      	b.n	8003e22 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003dc8:	edd7 7a00 	vldr	s15, [r7]
 8003dcc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd8:	d801      	bhi.n	8003dde <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e021      	b.n	8003e22 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003dde:	edd7 7a00 	vldr	s15, [r7]
 8003de2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003e48 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8003de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dee:	d801      	bhi.n	8003df4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003df0:	2304      	movs	r3, #4
 8003df2:	e016      	b.n	8003e22 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003df4:	edd7 7a00 	vldr	s15, [r7]
 8003df8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003e4c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e04:	d801      	bhi.n	8003e0a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003e06:	2305      	movs	r3, #5
 8003e08:	e00b      	b.n	8003e22 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003e0a:	edd7 7a00 	vldr	s15, [r7]
 8003e0e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003e50 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1a:	d801      	bhi.n	8003e20 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003e1c:	2306      	movs	r3, #6
 8003e1e:	e000      	b.n	8003e22 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003e20:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003e22:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	331c      	adds	r3, #28
 8003e28:	7bfa      	ldrb	r2, [r7, #15]
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 f993 	bl	8004158 <lsm303agr_xl_data_rate_set>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8003e38:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3c:	e000      	b.n	8003e40 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	42480000 	.word	0x42480000
 8003e4c:	42c80000 	.word	0x42c80000
 8003e50:	43480000 	.word	0x43480000

08003e54 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003e60:	edd7 7a00 	vldr	s15, [r7]
 8003e64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e70:	d801      	bhi.n	8003e76 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e037      	b.n	8003ee6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003e76:	edd7 7a00 	vldr	s15, [r7]
 8003e7a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e86:	d801      	bhi.n	8003e8c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e02c      	b.n	8003ee6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003e8c:	edd7 7a00 	vldr	s15, [r7]
 8003e90:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9c:	d801      	bhi.n	8003ea2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e021      	b.n	8003ee6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003ea2:	edd7 7a00 	vldr	s15, [r7]
 8003ea6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003efc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb2:	d801      	bhi.n	8003eb8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	e016      	b.n	8003ee6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003eb8:	edd7 7a00 	vldr	s15, [r7]
 8003ebc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003f00 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec8:	d801      	bhi.n	8003ece <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003eca:	2305      	movs	r3, #5
 8003ecc:	e00b      	b.n	8003ee6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003ece:	edd7 7a00 	vldr	s15, [r7]
 8003ed2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003f04 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ede:	d801      	bhi.n	8003ee4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003ee0:	2306      	movs	r3, #6
 8003ee2:	e000      	b.n	8003ee6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003ee4:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	42480000 	.word	0x42480000
 8003f00:	42c80000 	.word	0x42c80000
 8003f04:	43480000 	.word	0x43480000

08003f08 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	461a      	mov	r2, r3
 8003f14:	460b      	mov	r3, r1
 8003f16:	72fb      	strb	r3, [r7, #11]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10e      	bne.n	8003f46 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	695c      	ldr	r4, [r3, #20]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	7b1b      	ldrb	r3, [r3, #12]
 8003f30:	b298      	uxth	r0, r3
 8003f32:	7afb      	ldrb	r3, [r7, #11]
 8003f34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	b299      	uxth	r1, r3
 8003f3c:	893b      	ldrh	r3, [r7, #8]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	47a0      	blx	r4
 8003f42:	4603      	mov	r3, r0
 8003f44:	e00d      	b.n	8003f62 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	695c      	ldr	r4, [r3, #20]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	7b1b      	ldrb	r3, [r3, #12]
 8003f4e:	b298      	uxth	r0, r3
 8003f50:	7afb      	ldrb	r3, [r7, #11]
 8003f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	b299      	uxth	r1, r3
 8003f5a:	893b      	ldrh	r3, [r7, #8]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	47a0      	blx	r4
 8003f60:	4603      	mov	r3, r0
  }
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd90      	pop	{r4, r7, pc}

08003f6a <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003f6a:	b590      	push	{r4, r7, lr}
 8003f6c:	b087      	sub	sp, #28
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	461a      	mov	r2, r3
 8003f76:	460b      	mov	r3, r1
 8003f78:	72fb      	strb	r3, [r7, #11]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10e      	bne.n	8003fa8 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	691c      	ldr	r4, [r3, #16]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	7b1b      	ldrb	r3, [r3, #12]
 8003f92:	b298      	uxth	r0, r3
 8003f94:	7afb      	ldrb	r3, [r7, #11]
 8003f96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	b299      	uxth	r1, r3
 8003f9e:	893b      	ldrh	r3, [r7, #8]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	47a0      	blx	r4
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	e00d      	b.n	8003fc4 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	691c      	ldr	r4, [r3, #16]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	7b1b      	ldrb	r3, [r3, #12]
 8003fb0:	b298      	uxth	r0, r3
 8003fb2:	7afb      	ldrb	r3, [r7, #11]
 8003fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	b299      	uxth	r1, r3
 8003fbc:	893b      	ldrh	r3, [r7, #8]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	47a0      	blx	r4
 8003fc2:	4603      	mov	r3, r0
  }
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	371c      	adds	r7, #28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd90      	pop	{r4, r7, pc}

08003fcc <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003fcc:	b590      	push	{r4, r7, lr}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	607a      	str	r2, [r7, #4]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	460b      	mov	r3, r1
 8003fda:	72fb      	strb	r3, [r7, #11]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10e      	bne.n	800400a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	695c      	ldr	r4, [r3, #20]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	7b1b      	ldrb	r3, [r3, #12]
 8003ff4:	b298      	uxth	r0, r3
 8003ff6:	7afb      	ldrb	r3, [r7, #11]
 8003ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	b299      	uxth	r1, r3
 8004000:	893b      	ldrh	r3, [r7, #8]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	47a0      	blx	r4
 8004006:	4603      	mov	r3, r0
 8004008:	e00d      	b.n	8004026 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	695c      	ldr	r4, [r3, #20]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	7b1b      	ldrb	r3, [r3, #12]
 8004012:	b298      	uxth	r0, r3
 8004014:	7afb      	ldrb	r3, [r7, #11]
 8004016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800401a:	b2db      	uxtb	r3, r3
 800401c:	b299      	uxth	r1, r3
 800401e:	893b      	ldrh	r3, [r7, #8]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	47a0      	blx	r4
 8004024:	4603      	mov	r3, r0
  }
}
 8004026:	4618      	mov	r0, r3
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	bd90      	pop	{r4, r7, pc}

0800402e <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800402e:	b590      	push	{r4, r7, lr}
 8004030:	b087      	sub	sp, #28
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	461a      	mov	r2, r3
 800403a:	460b      	mov	r3, r1
 800403c:	72fb      	strb	r3, [r7, #11]
 800403e:	4613      	mov	r3, r2
 8004040:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10e      	bne.n	800406c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	691c      	ldr	r4, [r3, #16]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	7b1b      	ldrb	r3, [r3, #12]
 8004056:	b298      	uxth	r0, r3
 8004058:	7afb      	ldrb	r3, [r7, #11]
 800405a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800405e:	b2db      	uxtb	r3, r3
 8004060:	b299      	uxth	r1, r3
 8004062:	893b      	ldrh	r3, [r7, #8]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	47a0      	blx	r4
 8004068:	4603      	mov	r3, r0
 800406a:	e00d      	b.n	8004088 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	691c      	ldr	r4, [r3, #16]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	7b1b      	ldrb	r3, [r3, #12]
 8004074:	b298      	uxth	r0, r3
 8004076:	7afb      	ldrb	r3, [r7, #11]
 8004078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800407c:	b2db      	uxtb	r3, r3
 800407e:	b299      	uxth	r1, r3
 8004080:	893b      	ldrh	r3, [r7, #8]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	47a0      	blx	r4
 8004086:	4603      	mov	r3, r0
  }
}
 8004088:	4618      	mov	r0, r3
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	bd90      	pop	{r4, r7, pc}

08004090 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8004090:	b590      	push	{r4, r7, lr}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	461a      	mov	r2, r3
 800409c:	460b      	mov	r3, r1
 800409e:	72fb      	strb	r3, [r7, #11]
 80040a0:	4613      	mov	r3, r2
 80040a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685c      	ldr	r4, [r3, #4]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6898      	ldr	r0, [r3, #8]
 80040ac:	893b      	ldrh	r3, [r7, #8]
 80040ae:	7af9      	ldrb	r1, [r7, #11]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	47a0      	blx	r4
 80040b4:	6178      	str	r0, [r7, #20]
  return ret;
 80040b6:	697b      	ldr	r3, [r7, #20]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd90      	pop	{r4, r7, pc}

080040c0 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	607a      	str	r2, [r7, #4]
 80040ca:	461a      	mov	r2, r3
 80040cc:	460b      	mov	r3, r1
 80040ce:	72fb      	strb	r3, [r7, #11]
 80040d0:	4613      	mov	r3, r2
 80040d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681c      	ldr	r4, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6898      	ldr	r0, [r3, #8]
 80040dc:	893b      	ldrh	r3, [r7, #8]
 80040de:	7af9      	ldrb	r1, [r7, #11]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	47a0      	blx	r4
 80040e4:	6178      	str	r0, [r7, #20]
  return ret;
 80040e6:	697b      	ldr	r3, [r7, #20]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd90      	pop	{r4, r7, pc}

080040f0 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80040fa:	f107 020c 	add.w	r2, r7, #12
 80040fe:	2301      	movs	r3, #1
 8004100:	2120      	movs	r1, #32
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff ffc4 	bl	8004090 <lsm303agr_read_reg>
 8004108:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d107      	bne.n	8004120 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004110:	f107 0210 	add.w	r2, r7, #16
 8004114:	2301      	movs	r3, #1
 8004116:	2123      	movs	r1, #35	; 0x23
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff ffb9 	bl	8004090 <lsm303agr_read_reg>
 800411e:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8004120:	7b3b      	ldrb	r3, [r7, #12]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2202      	movs	r2, #2
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	e00c      	b.n	800414e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8004134:	7c3b      	ldrb	r3, [r7, #16]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2200      	movs	r2, #0
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	e002      	b.n	800414e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2201      	movs	r2, #1
 800414c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800414e:	697b      	ldr	r3, [r7, #20]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8004164:	f107 0208 	add.w	r2, r7, #8
 8004168:	2301      	movs	r3, #1
 800416a:	2120      	movs	r1, #32
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff ff8f 	bl	8004090 <lsm303agr_read_reg>
 8004172:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	b2da      	uxtb	r2, r3
 8004182:	7a3b      	ldrb	r3, [r7, #8]
 8004184:	f362 1307 	bfi	r3, r2, #4, #4
 8004188:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800418a:	f107 0208 	add.w	r2, r7, #8
 800418e:	2301      	movs	r3, #1
 8004190:	2120      	movs	r1, #32
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff ff94 	bl	80040c0 <lsm303agr_write_reg>
 8004198:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 800419a:	68fb      	ldr	r3, [r7, #12]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80041ae:	f107 0208 	add.w	r2, r7, #8
 80041b2:	2301      	movs	r3, #1
 80041b4:	2120      	movs	r1, #32
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff ff6a 	bl	8004090 <lsm303agr_read_reg>
 80041bc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 80041be:	7a3b      	ldrb	r3, [r7, #8]
 80041c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b09      	cmp	r3, #9
 80041c8:	d83e      	bhi.n	8004248 <lsm303agr_xl_data_rate_get+0xa4>
 80041ca:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <lsm303agr_xl_data_rate_get+0x2c>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	080041f9 	.word	0x080041f9
 80041d4:	08004201 	.word	0x08004201
 80041d8:	08004209 	.word	0x08004209
 80041dc:	08004211 	.word	0x08004211
 80041e0:	08004219 	.word	0x08004219
 80041e4:	08004221 	.word	0x08004221
 80041e8:	08004229 	.word	0x08004229
 80041ec:	08004231 	.word	0x08004231
 80041f0:	08004239 	.word	0x08004239
 80041f4:	08004241 	.word	0x08004241
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]
      break;
 80041fe:	e027      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2201      	movs	r2, #1
 8004204:	701a      	strb	r2, [r3, #0]
      break;
 8004206:	e023      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2202      	movs	r2, #2
 800420c:	701a      	strb	r2, [r3, #0]
      break;
 800420e:	e01f      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2203      	movs	r2, #3
 8004214:	701a      	strb	r2, [r3, #0]
      break;
 8004216:	e01b      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2204      	movs	r2, #4
 800421c:	701a      	strb	r2, [r3, #0]
      break;
 800421e:	e017      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2205      	movs	r2, #5
 8004224:	701a      	strb	r2, [r3, #0]
      break;
 8004226:	e013      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2206      	movs	r2, #6
 800422c:	701a      	strb	r2, [r3, #0]
      break;
 800422e:	e00f      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2207      	movs	r2, #7
 8004234:	701a      	strb	r2, [r3, #0]
      break;
 8004236:	e00b      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2208      	movs	r2, #8
 800423c:	701a      	strb	r2, [r3, #0]
      break;
 800423e:	e007      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2209      	movs	r2, #9
 8004244:	701a      	strb	r2, [r3, #0]
      break;
 8004246:	e003      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]
      break;
 800424e:	bf00      	nop
  }

  return ret;
 8004250:	68fb      	ldr	r3, [r7, #12]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop

0800425c <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004268:	f107 0208 	add.w	r2, r7, #8
 800426c:	2301      	movs	r3, #1
 800426e:	2123      	movs	r1, #35	; 0x23
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff0d 	bl	8004090 <lsm303agr_read_reg>
 8004276:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10f      	bne.n	800429e <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 800427e:	78fb      	ldrb	r3, [r7, #3]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	b2da      	uxtb	r2, r3
 8004286:	7a3b      	ldrb	r3, [r7, #8]
 8004288:	f362 1305 	bfi	r3, r2, #4, #2
 800428c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800428e:	f107 0208 	add.w	r2, r7, #8
 8004292:	2301      	movs	r3, #1
 8004294:	2123      	movs	r1, #35	; 0x23
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff ff12 	bl	80040c0 <lsm303agr_write_reg>
 800429c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 800429e:	68fb      	ldr	r3, [r7, #12]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80042b2:	f107 0208 	add.w	r2, r7, #8
 80042b6:	2301      	movs	r3, #1
 80042b8:	2123      	movs	r1, #35	; 0x23
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff fee8 	bl	8004090 <lsm303agr_read_reg>
 80042c0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 80042c2:	7a3b      	ldrb	r3, [r7, #8]
 80042c4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d81a      	bhi.n	8004304 <lsm303agr_xl_full_scale_get+0x5c>
 80042ce:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <lsm303agr_xl_full_scale_get+0x2c>)
 80042d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d4:	080042e5 	.word	0x080042e5
 80042d8:	080042ed 	.word	0x080042ed
 80042dc:	080042f5 	.word	0x080042f5
 80042e0:	080042fd 	.word	0x080042fd
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
      break;
 80042ea:	e00f      	b.n	800430c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2201      	movs	r2, #1
 80042f0:	701a      	strb	r2, [r3, #0]
      break;
 80042f2:	e00b      	b.n	800430c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2202      	movs	r2, #2
 80042f8:	701a      	strb	r2, [r3, #0]
      break;
 80042fa:	e007      	b.n	800430c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2203      	movs	r2, #3
 8004300:	701a      	strb	r2, [r3, #0]
      break;
 8004302:	e003      	b.n	800430c <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
      break;
 800430a:	bf00      	nop
  }

  return ret;
 800430c:	68fb      	ldr	r3, [r7, #12]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop

08004318 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004324:	f107 0208 	add.w	r2, r7, #8
 8004328:	2301      	movs	r3, #1
 800432a:	2123      	movs	r1, #35	; 0x23
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff feaf 	bl	8004090 <lsm303agr_read_reg>
 8004332:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10f      	bne.n	800435a <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	b2da      	uxtb	r2, r3
 8004342:	7a3b      	ldrb	r3, [r7, #8]
 8004344:	f362 13c7 	bfi	r3, r2, #7, #1
 8004348:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800434a:	f107 0208 	add.w	r2, r7, #8
 800434e:	2301      	movs	r3, #1
 8004350:	2123      	movs	r1, #35	; 0x23
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff feb4 	bl	80040c0 <lsm303agr_write_reg>
 8004358:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 800435a:	68fb      	ldr	r3, [r7, #12]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 800436e:	f107 020c 	add.w	r2, r7, #12
 8004372:	2306      	movs	r3, #6
 8004374:	2128      	movs	r1, #40	; 0x28
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff fe8a 	bl	8004090 <lsm303agr_read_reg>
 800437c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800437e:	7b7b      	ldrb	r3, [r7, #13]
 8004380:	b21a      	sxth	r2, r3
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800438c:	b29b      	uxth	r3, r3
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	b29a      	uxth	r2, r3
 8004392:	7b3b      	ldrb	r3, [r7, #12]
 8004394:	b29b      	uxth	r3, r3
 8004396:	4413      	add	r3, r2
 8004398:	b29b      	uxth	r3, r3
 800439a:	b21a      	sxth	r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80043a0:	7bfa      	ldrb	r2, [r7, #15]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	3302      	adds	r3, #2
 80043a6:	b212      	sxth	r2, r2
 80043a8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	3302      	adds	r3, #2
 80043ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	7bbb      	ldrb	r3, [r7, #14]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	4413      	add	r3, r2
 80043be:	b29a      	uxth	r2, r3
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	3302      	adds	r3, #2
 80043c4:	b212      	sxth	r2, r2
 80043c6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80043c8:	7c7a      	ldrb	r2, [r7, #17]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	3304      	adds	r3, #4
 80043ce:	b212      	sxth	r2, r2
 80043d0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	3304      	adds	r3, #4
 80043d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	b29a      	uxth	r2, r3
 80043e0:	7c3b      	ldrb	r3, [r7, #16]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	4413      	add	r3, r2
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	3304      	adds	r3, #4
 80043ec:	b212      	sxth	r2, r2
 80043ee:	801a      	strh	r2, [r3, #0]
  return ret;
 80043f0:	697b      	ldr	r3, [r7, #20]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	460b      	mov	r3, r1
 8004404:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004406:	f107 0208 	add.w	r2, r7, #8
 800440a:	2301      	movs	r3, #1
 800440c:	2160      	movs	r1, #96	; 0x60
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fe3e 	bl	8004090 <lsm303agr_read_reg>
 8004414:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10f      	bne.n	800443c <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	b2da      	uxtb	r2, r3
 8004424:	7a3b      	ldrb	r3, [r7, #8]
 8004426:	f362 0301 	bfi	r3, r2, #0, #2
 800442a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800442c:	f107 0208 	add.w	r2, r7, #8
 8004430:	2301      	movs	r3, #1
 8004432:	2160      	movs	r1, #96	; 0x60
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fe43 	bl	80040c0 <lsm303agr_write_reg>
 800443a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 800443c:	68fb      	ldr	r3, [r7, #12]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004452:	f107 0208 	add.w	r2, r7, #8
 8004456:	2301      	movs	r3, #1
 8004458:	2160      	movs	r1, #96	; 0x60
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff fe18 	bl	8004090 <lsm303agr_read_reg>
 8004460:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10f      	bne.n	8004488 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	b2da      	uxtb	r2, r3
 8004470:	7a3b      	ldrb	r3, [r7, #8]
 8004472:	f362 0383 	bfi	r3, r2, #2, #2
 8004476:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004478:	f107 0208 	add.w	r2, r7, #8
 800447c:	2301      	movs	r3, #1
 800447e:	2160      	movs	r1, #96	; 0x60
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff fe1d 	bl	80040c0 <lsm303agr_write_reg>
 8004486:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004488:	68fb      	ldr	r3, [r7, #12]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800449e:	f107 0208 	add.w	r2, r7, #8
 80044a2:	2301      	movs	r3, #1
 80044a4:	2160      	movs	r1, #96	; 0x60
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff fdf2 	bl	8004090 <lsm303agr_read_reg>
 80044ac:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 80044ae:	7a3b      	ldrb	r3, [r7, #8]
 80044b0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d81a      	bhi.n	80044f0 <lsm303agr_mag_data_rate_get+0x5c>
 80044ba:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <lsm303agr_mag_data_rate_get+0x2c>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044d9 	.word	0x080044d9
 80044c8:	080044e1 	.word	0x080044e1
 80044cc:	080044e9 	.word	0x080044e9
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
      break;
 80044d6:	e00f      	b.n	80044f8 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2201      	movs	r2, #1
 80044dc:	701a      	strb	r2, [r3, #0]
      break;
 80044de:	e00b      	b.n	80044f8 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2202      	movs	r2, #2
 80044e4:	701a      	strb	r2, [r3, #0]
      break;
 80044e6:	e007      	b.n	80044f8 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2203      	movs	r2, #3
 80044ec:	701a      	strb	r2, [r3, #0]
      break;
 80044ee:	e003      	b.n	80044f8 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2200      	movs	r2, #0
 80044f4:	701a      	strb	r2, [r3, #0]
      break;
 80044f6:	bf00      	nop
  }

  return ret;
 80044f8:	68fb      	ldr	r3, [r7, #12]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop

08004504 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004510:	f107 0208 	add.w	r2, r7, #8
 8004514:	2301      	movs	r3, #1
 8004516:	2162      	movs	r1, #98	; 0x62
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff fdb9 	bl	8004090 <lsm303agr_read_reg>
 800451e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10f      	bne.n	8004546 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	b2da      	uxtb	r2, r3
 800452e:	7a3b      	ldrb	r3, [r7, #8]
 8004530:	f362 1304 	bfi	r3, r2, #4, #1
 8004534:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004536:	f107 0208 	add.w	r2, r7, #8
 800453a:	2301      	movs	r3, #1
 800453c:	2162      	movs	r1, #98	; 0x62
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff fdbe 	bl	80040c0 <lsm303agr_write_reg>
 8004544:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004546:	68fb      	ldr	r3, [r7, #12]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 800455a:	f107 020c 	add.w	r2, r7, #12
 800455e:	2306      	movs	r3, #6
 8004560:	2168      	movs	r1, #104	; 0x68
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff fd94 	bl	8004090 <lsm303agr_read_reg>
 8004568:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800456a:	7b7b      	ldrb	r3, [r7, #13]
 800456c:	b21a      	sxth	r2, r3
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004578:	b29b      	uxth	r3, r3
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	b29a      	uxth	r2, r3
 800457e:	7b3b      	ldrb	r3, [r7, #12]
 8004580:	b29b      	uxth	r3, r3
 8004582:	4413      	add	r3, r2
 8004584:	b29b      	uxth	r3, r3
 8004586:	b21a      	sxth	r2, r3
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800458c:	7bfa      	ldrb	r2, [r7, #15]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	3302      	adds	r3, #2
 8004592:	b212      	sxth	r2, r2
 8004594:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	3302      	adds	r3, #2
 800459a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	7bbb      	ldrb	r3, [r7, #14]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	4413      	add	r3, r2
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	3302      	adds	r3, #2
 80045b0:	b212      	sxth	r2, r2
 80045b2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80045b4:	7c7a      	ldrb	r2, [r7, #17]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	3304      	adds	r3, #4
 80045ba:	b212      	sxth	r2, r2
 80045bc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	3304      	adds	r3, #4
 80045c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	7c3b      	ldrb	r3, [r7, #16]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	3304      	adds	r3, #4
 80045d8:	b212      	sxth	r2, r2
 80045da:	801a      	strh	r2, [r3, #0]
  return ret;
 80045dc:	697b      	ldr	r3, [r7, #20]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 80045f0:	2301      	movs	r3, #1
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	210f      	movs	r1, #15
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff fd4a 	bl	8004090 <lsm303agr_read_reg>
 80045fc:	60f8      	str	r0, [r7, #12]
  return ret;
 80045fe:	68fb      	ldr	r3, [r7, #12]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8004612:	2301      	movs	r3, #1
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	214f      	movs	r1, #79	; 0x4f
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff fd39 	bl	8004090 <lsm303agr_read_reg>
 800461e:	60f8      	str	r0, [r7, #12]
  return ret;
 8004620:	68fb      	ldr	r3, [r7, #12]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	460b      	mov	r3, r1
 8004634:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004636:	f107 0208 	add.w	r2, r7, #8
 800463a:	2301      	movs	r3, #1
 800463c:	2162      	movs	r1, #98	; 0x62
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff fd26 	bl	8004090 <lsm303agr_read_reg>
 8004644:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10f      	bne.n	800466c <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	b2da      	uxtb	r2, r3
 8004654:	7a3b      	ldrb	r3, [r7, #8]
 8004656:	f362 0341 	bfi	r3, r2, #1, #1
 800465a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800465c:	f107 0208 	add.w	r2, r7, #8
 8004660:	2301      	movs	r3, #1
 8004662:	2162      	movs	r1, #98	; 0x62
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff fd2b 	bl	80040c0 <lsm303agr_write_reg>
 800466a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800466c:	68fb      	ldr	r3, [r7, #12]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8004682:	f107 0208 	add.w	r2, r7, #8
 8004686:	2301      	movs	r3, #1
 8004688:	212e      	movs	r1, #46	; 0x2e
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff fd00 	bl	8004090 <lsm303agr_read_reg>
 8004690:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10f      	bne.n	80046b8 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	7a3b      	ldrb	r3, [r7, #8]
 80046a2:	f362 1387 	bfi	r3, r2, #6, #2
 80046a6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80046a8:	f107 0208 	add.w	r2, r7, #8
 80046ac:	2301      	movs	r3, #1
 80046ae:	212e      	movs	r1, #46	; 0x2e
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff fd05 	bl	80040c0 <lsm303agr_write_reg>
 80046b6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 80046b8:	68fb      	ldr	r3, [r7, #12]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	460b      	mov	r3, r1
 80046cc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80046ce:	f107 0208 	add.w	r2, r7, #8
 80046d2:	2301      	movs	r3, #1
 80046d4:	2162      	movs	r1, #98	; 0x62
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff fcda 	bl	8004090 <lsm303agr_read_reg>
 80046dc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10f      	bne.n	8004704 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	7a3b      	ldrb	r3, [r7, #8]
 80046ee:	f362 1345 	bfi	r3, r2, #5, #1
 80046f2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80046f4:	f107 0208 	add.w	r2, r7, #8
 80046f8:	2301      	movs	r3, #1
 80046fa:	2162      	movs	r1, #98	; 0x62
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff fcdf 	bl	80040c0 <lsm303agr_write_reg>
 8004702:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004704:	68fb      	ldr	r3, [r7, #12]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d103      	bne.n	800472c <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8004724:	f04f 33ff 	mov.w	r3, #4294967295
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	e04d      	b.n	80047c8 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	7b1a      	ldrb	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	695a      	ldr	r2, [r3, #20]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	699a      	ldr	r2, [r3, #24]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a1b      	ldr	r2, [pc, #108]	; (80047d4 <LSM6DSL_RegisterBusIO+0xc4>)
 8004768:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a1a      	ldr	r2, [pc, #104]	; (80047d8 <LSM6DSL_RegisterBusIO+0xc8>)
 800476e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d103      	bne.n	8004786 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 800477e:	f04f 33ff 	mov.w	r3, #4294967295
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	e020      	b.n	80047c8 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4798      	blx	r3
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8004792:	f04f 33ff 	mov.w	r3, #4294967295
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	e016      	b.n	80047c8 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d112      	bne.n	80047c8 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10d      	bne.n	80047c8 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80047ac:	230c      	movs	r3, #12
 80047ae:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80047b0:	7afb      	ldrb	r3, [r7, #11]
 80047b2:	461a      	mov	r2, r3
 80047b4:	2112      	movs	r1, #18
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fd2d 	bl	8005216 <LSM6DSL_Write_Reg>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 80047c2:	f04f 33ff 	mov.w	r3, #4294967295
 80047c6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80047c8:	68fb      	ldr	r3, [r7, #12]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	08005685 	.word	0x08005685
 80047d8:	080056bb 	.word	0x080056bb

080047dc <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	331c      	adds	r3, #28
 80047e8:	2101      	movs	r1, #1
 80047ea:	4618      	mov	r0, r3
 80047ec:	f001 fa59 	bl	8005ca2 <lsm6dsl_auto_increment_set>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80047f6:	f04f 33ff 	mov.w	r3, #4294967295
 80047fa:	e054      	b.n	80048a6 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	331c      	adds	r3, #28
 8004800:	2101      	movs	r1, #1
 8004802:	4618      	mov	r0, r3
 8004804:	f001 f980 	bl	8005b08 <lsm6dsl_block_data_update_set>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 800480e:	f04f 33ff 	mov.w	r3, #4294967295
 8004812:	e048      	b.n	80048a6 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	331c      	adds	r3, #28
 8004818:	2100      	movs	r1, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f001 fa67 	bl	8005cee <lsm6dsl_fifo_mode_set>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8004826:	f04f 33ff 	mov.w	r3, #4294967295
 800482a:	e03c      	b.n	80048a6 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2204      	movs	r2, #4
 8004830:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	331c      	adds	r3, #28
 8004838:	2100      	movs	r1, #0
 800483a:	4618      	mov	r0, r3
 800483c:	f000 ffe6 	bl	800580c <lsm6dsl_xl_data_rate_set>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8004846:	f04f 33ff 	mov.w	r3, #4294967295
 800484a:	e02c      	b.n	80048a6 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	331c      	adds	r3, #28
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f000 ff7c 	bl	8005750 <lsm6dsl_xl_full_scale_set>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 800485e:	f04f 33ff 	mov.w	r3, #4294967295
 8004862:	e020      	b.n	80048a6 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2204      	movs	r2, #4
 8004868:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	331c      	adds	r3, #28
 8004870:	2100      	movs	r1, #0
 8004872:	4618      	mov	r0, r3
 8004874:	f001 f8c0 	bl	80059f8 <lsm6dsl_gy_data_rate_set>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800487e:	f04f 33ff 	mov.w	r3, #4294967295
 8004882:	e010      	b.n	80048a6 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	331c      	adds	r3, #28
 8004888:	2106      	movs	r1, #6
 800488a:	4618      	mov	r0, r3
 800488c:	f001 f84c 	bl	8005928 <lsm6dsl_gy_full_scale_set>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8004896:	f04f 33ff 	mov.w	r3, #4294967295
 800489a:	e004      	b.n	80048a6 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f888 	bl	80049cc <LSM6DSL_ACC_Disable>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 80048c2:	f04f 33ff 	mov.w	r3, #4294967295
 80048c6:	e015      	b.n	80048f4 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fa9a 	bl	8004e02 <LSM6DSL_GYRO_Disable>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 80048d4:	f04f 33ff 	mov.w	r3, #4294967295
 80048d8:	e00c      	b.n	80048f4 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	331c      	adds	r3, #28
 800490a:	6839      	ldr	r1, [r7, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f001 f9b7 	bl	8005c80 <lsm6dsl_device_id_get>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8004918:	f04f 33ff 	mov.w	r3, #4294967295
 800491c:	e000      	b.n	8004920 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2201      	movs	r2, #1
 8004936:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2201      	movs	r2, #1
 800493c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2200      	movs	r2, #0
 8004942:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2200      	movs	r2, #0
 8004948:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004950:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2210      	movs	r2, #16
 8004956:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2200      	movs	r2, #0
 800495c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	4a07      	ldr	r2, [pc, #28]	; (8004980 <LSM6DSL_GetCapabilities+0x58>)
 8004962:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	4a06      	ldr	r2, [pc, #24]	; (8004980 <LSM6DSL_GetCapabilities+0x58>)
 8004968:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	45d02000 	.word	0x45d02000

08004984 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	e014      	b.n	80049c4 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f103 021c 	add.w	r2, r3, #28
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f000 ff2f 	bl	800580c <lsm6dsl_xl_data_rate_set>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80049b4:	f04f 33ff 	mov.w	r3, #4294967295
 80049b8:	e004      	b.n	80049c4 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e01f      	b.n	8004a22 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f103 021c 	add.w	r2, r3, #28
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	332b      	adds	r3, #43	; 0x2b
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f000 ff32 	bl	8005858 <lsm6dsl_xl_data_rate_get>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80049fa:	f04f 33ff 	mov.w	r3, #4294967295
 80049fe:	e010      	b.n	8004a22 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	331c      	adds	r3, #28
 8004a04:	2100      	movs	r1, #0
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 ff00 	bl	800580c <lsm6dsl_xl_data_rate_set>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004a12:	f04f 33ff 	mov.w	r3, #4294967295
 8004a16:	e004      	b.n	8004a22 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	331c      	adds	r3, #28
 8004a3e:	f107 020b 	add.w	r2, r7, #11
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fea9 	bl	800579c <lsm6dsl_xl_full_scale_get>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004a50:	f04f 33ff 	mov.w	r3, #4294967295
 8004a54:	e023      	b.n	8004a9e <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004a56:	7afb      	ldrb	r3, [r7, #11]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d81b      	bhi.n	8004a94 <LSM6DSL_ACC_GetSensitivity+0x68>
 8004a5c:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004a75 	.word	0x08004a75
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004a7d 	.word	0x08004a7d
 8004a70:	08004a85 	.word	0x08004a85
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	4a0c      	ldr	r2, [pc, #48]	; (8004aa8 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004a78:	601a      	str	r2, [r3, #0]
      break;
 8004a7a:	e00f      	b.n	8004a9c <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	4a0b      	ldr	r2, [pc, #44]	; (8004aac <LSM6DSL_ACC_GetSensitivity+0x80>)
 8004a80:	601a      	str	r2, [r3, #0]
      break;
 8004a82:	e00b      	b.n	8004a9c <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	4a0a      	ldr	r2, [pc, #40]	; (8004ab0 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004a88:	601a      	str	r2, [r3, #0]
      break;
 8004a8a:	e007      	b.n	8004a9c <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	4a09      	ldr	r2, [pc, #36]	; (8004ab4 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8004a90:	601a      	str	r2, [r3, #0]
      break;
 8004a92:	e003      	b.n	8004a9c <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004a94:	f04f 33ff 	mov.w	r3, #4294967295
 8004a98:	60fb      	str	r3, [r7, #12]
      break;
 8004a9a:	bf00      	nop
  }

  return ret;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	3d79db23 	.word	0x3d79db23
 8004aac:	3df9db23 	.word	0x3df9db23
 8004ab0:	3e79db23 	.word	0x3e79db23
 8004ab4:	3ef9db23 	.word	0x3ef9db23

08004ab8 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	331c      	adds	r3, #28
 8004aca:	f107 020b 	add.w	r2, r7, #11
 8004ace:	4611      	mov	r1, r2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fec1 	bl	8005858 <lsm6dsl_xl_data_rate_get>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004adc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae0:	e054      	b.n	8004b8c <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8004ae2:	7afb      	ldrb	r3, [r7, #11]
 8004ae4:	2b0b      	cmp	r3, #11
 8004ae6:	d84c      	bhi.n	8004b82 <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8004ae8:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8004aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aee:	bf00      	nop
 8004af0:	08004b21 	.word	0x08004b21
 8004af4:	08004b33 	.word	0x08004b33
 8004af8:	08004b3b 	.word	0x08004b3b
 8004afc:	08004b43 	.word	0x08004b43
 8004b00:	08004b4b 	.word	0x08004b4b
 8004b04:	08004b53 	.word	0x08004b53
 8004b08:	08004b5b 	.word	0x08004b5b
 8004b0c:	08004b63 	.word	0x08004b63
 8004b10:	08004b6b 	.word	0x08004b6b
 8004b14:	08004b73 	.word	0x08004b73
 8004b18:	08004b7b 	.word	0x08004b7b
 8004b1c:	08004b2b 	.word	0x08004b2b
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]
      break;
 8004b28:	e02f      	b.n	8004b8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	4a19      	ldr	r2, [pc, #100]	; (8004b94 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8004b2e:	601a      	str	r2, [r3, #0]
      break;
 8004b30:	e02b      	b.n	8004b8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8004b36:	601a      	str	r2, [r3, #0]
      break;
 8004b38:	e027      	b.n	8004b8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8004b3e:	601a      	str	r2, [r3, #0]
      break;
 8004b40:	e023      	b.n	8004b8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	4a16      	ldr	r2, [pc, #88]	; (8004ba0 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8004b46:	601a      	str	r2, [r3, #0]
      break;
 8004b48:	e01f      	b.n	8004b8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	4a15      	ldr	r2, [pc, #84]	; (8004ba4 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8004b4e:	601a      	str	r2, [r3, #0]
      break;
 8004b50:	e01b      	b.n	8004b8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	4a14      	ldr	r2, [pc, #80]	; (8004ba8 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8004b56:	601a      	str	r2, [r3, #0]
      break;
 8004b58:	e017      	b.n	8004b8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	4a13      	ldr	r2, [pc, #76]	; (8004bac <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8004b5e:	601a      	str	r2, [r3, #0]
      break;
 8004b60:	e013      	b.n	8004b8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	4a12      	ldr	r2, [pc, #72]	; (8004bb0 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8004b66:	601a      	str	r2, [r3, #0]
      break;
 8004b68:	e00f      	b.n	8004b8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	4a11      	ldr	r2, [pc, #68]	; (8004bb4 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8004b6e:	601a      	str	r2, [r3, #0]
      break;
 8004b70:	e00b      	b.n	8004b8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	4a10      	ldr	r2, [pc, #64]	; (8004bb8 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8004b76:	601a      	str	r2, [r3, #0]
      break;
 8004b78:	e007      	b.n	8004b8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	4a0f      	ldr	r2, [pc, #60]	; (8004bbc <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8004b7e:	601a      	str	r2, [r3, #0]
      break;
 8004b80:	e003      	b.n	8004b8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8004b82:	f04f 33ff 	mov.w	r3, #4294967295
 8004b86:	60fb      	str	r3, [r7, #12]
      break;
 8004b88:	bf00      	nop
  }

  return ret;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	3fcccccd 	.word	0x3fcccccd
 8004b98:	41480000 	.word	0x41480000
 8004b9c:	41d00000 	.word	0x41d00000
 8004ba0:	42500000 	.word	0x42500000
 8004ba4:	42d00000 	.word	0x42d00000
 8004ba8:	43500000 	.word	0x43500000
 8004bac:	43d00000 	.word	0x43d00000
 8004bb0:	44504000 	.word	0x44504000
 8004bb4:	44cf8000 	.word	0x44cf8000
 8004bb8:	45502000 	.word	0x45502000
 8004bbc:	45d02000 	.word	0x45d02000

08004bc0 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d106      	bne.n	8004be4 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004bd6:	ed97 0a00 	vldr	s0, [r7]
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fb36 	bl	800524c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8004be0:	4603      	mov	r3, r0
 8004be2:	e005      	b.n	8004bf0 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004be4:	ed97 0a00 	vldr	s0, [r7]
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fbbb 	bl	8005364 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8004bee:	4603      	mov	r3, r0
  }
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	331c      	adds	r3, #28
 8004c0a:	f107 020b 	add.w	r2, r7, #11
 8004c0e:	4611      	mov	r1, r2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fdc3 	bl	800579c <lsm6dsl_xl_full_scale_get>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c20:	e023      	b.n	8004c6a <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004c22:	7afb      	ldrb	r3, [r7, #11]
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d81b      	bhi.n	8004c60 <LSM6DSL_ACC_GetFullScale+0x68>
 8004c28:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <LSM6DSL_ACC_GetFullScale+0x38>)
 8004c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2e:	bf00      	nop
 8004c30:	08004c41 	.word	0x08004c41
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c49 	.word	0x08004c49
 8004c3c:	08004c51 	.word	0x08004c51
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2202      	movs	r2, #2
 8004c44:	601a      	str	r2, [r3, #0]
      break;
 8004c46:	e00f      	b.n	8004c68 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2204      	movs	r2, #4
 8004c4c:	601a      	str	r2, [r3, #0]
      break;
 8004c4e:	e00b      	b.n	8004c68 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2208      	movs	r2, #8
 8004c54:	601a      	str	r2, [r3, #0]
      break;
 8004c56:	e007      	b.n	8004c68 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2210      	movs	r2, #16
 8004c5c:	601a      	str	r2, [r3, #0]
      break;
 8004c5e:	e003      	b.n	8004c68 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004c60:	f04f 33ff 	mov.w	r3, #4294967295
 8004c64:	60fb      	str	r3, [r7, #12]
      break;
 8004c66:	bf00      	nop
  }

  return ret;
 8004c68:	68fb      	ldr	r3, [r7, #12]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop

08004c74 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	dd0b      	ble.n	8004c9c <LSM6DSL_ACC_SetFullScale+0x28>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	dd06      	ble.n	8004c98 <LSM6DSL_ACC_SetFullScale+0x24>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	dc01      	bgt.n	8004c94 <LSM6DSL_ACC_SetFullScale+0x20>
 8004c90:	2303      	movs	r3, #3
 8004c92:	e004      	b.n	8004c9e <LSM6DSL_ACC_SetFullScale+0x2a>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e002      	b.n	8004c9e <LSM6DSL_ACC_SetFullScale+0x2a>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e000      	b.n	8004c9e <LSM6DSL_ACC_SetFullScale+0x2a>
 8004c9c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8004c9e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	331c      	adds	r3, #28
 8004ca4:	7bfa      	ldrb	r2, [r7, #15]
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fd51 	bl	8005750 <lsm6dsl_xl_full_scale_set>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8004cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb8:	e000      	b.n	8004cbc <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	331c      	adds	r3, #28
 8004cd2:	f107 0208 	add.w	r2, r7, #8
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 ff86 	bl	8005bea <lsm6dsl_acceleration_raw_get>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce8:	e00c      	b.n	8004d04 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004cea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004cf2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004cfa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	331c      	adds	r3, #28
 8004d20:	f107 0210 	add.w	r2, r7, #16
 8004d24:	4611      	mov	r1, r2
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 ff5f 	bl	8005bea <lsm6dsl_acceleration_raw_get>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8004d32:	f04f 33ff 	mov.w	r3, #4294967295
 8004d36:	e03c      	b.n	8004db2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004d38:	f107 030c 	add.w	r3, r7, #12
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff fe74 	bl	8004a2c <LSM6DSL_ACC_GetSensitivity>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8004d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4e:	e030      	b.n	8004db2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004d50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d54:	ee07 3a90 	vmov	s15, r3
 8004d58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d68:	ee17 2a90 	vmov	r2, s15
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004d70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d74:	ee07 3a90 	vmov	s15, r3
 8004d78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d88:	ee17 2a90 	vmov	r2, s15
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004d90:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d94:	ee07 3a90 	vmov	s15, r3
 8004d98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004da8:	ee17 2a90 	vmov	r2, s15
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	e014      	b.n	8004dfa <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f103 021c 	add.w	r2, r3, #28
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f000 fe0a 	bl	80059f8 <lsm6dsl_gy_data_rate_set>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004dea:	f04f 33ff 	mov.w	r3, #4294967295
 8004dee:	e004      	b.n	8004dfa <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e01f      	b.n	8004e58 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f103 021c 	add.w	r2, r3, #28
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	332c      	adds	r3, #44	; 0x2c
 8004e22:	4619      	mov	r1, r3
 8004e24:	4610      	mov	r0, r2
 8004e26:	f000 fe0d 	bl	8005a44 <lsm6dsl_gy_data_rate_get>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004e30:	f04f 33ff 	mov.w	r3, #4294967295
 8004e34:	e010      	b.n	8004e58 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	331c      	adds	r3, #28
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fddb 	bl	80059f8 <lsm6dsl_gy_data_rate_set>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004e48:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4c:	e004      	b.n	8004e58 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	331c      	adds	r3, #28
 8004e72:	f107 020b 	add.w	r2, r7, #11
 8004e76:	4611      	mov	r1, r2
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fd7b 	bl	8005974 <lsm6dsl_gy_full_scale_get>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004e84:	f04f 33ff 	mov.w	r3, #4294967295
 8004e88:	e02d      	b.n	8004ee6 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004e8a:	7afb      	ldrb	r3, [r7, #11]
 8004e8c:	2b06      	cmp	r3, #6
 8004e8e:	d825      	bhi.n	8004edc <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004e90:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8004e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e96:	bf00      	nop
 8004e98:	08004ebd 	.word	0x08004ebd
 8004e9c:	08004eb5 	.word	0x08004eb5
 8004ea0:	08004ec5 	.word	0x08004ec5
 8004ea4:	08004edd 	.word	0x08004edd
 8004ea8:	08004ecd 	.word	0x08004ecd
 8004eac:	08004edd 	.word	0x08004edd
 8004eb0:	08004ed5 	.word	0x08004ed5
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	4a0e      	ldr	r2, [pc, #56]	; (8004ef0 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8004eb8:	601a      	str	r2, [r3, #0]
      break;
 8004eba:	e013      	b.n	8004ee4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	4a0d      	ldr	r2, [pc, #52]	; (8004ef4 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8004ec0:	601a      	str	r2, [r3, #0]
      break;
 8004ec2:	e00f      	b.n	8004ee4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	4a0c      	ldr	r2, [pc, #48]	; (8004ef8 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8004ec8:	601a      	str	r2, [r3, #0]
      break;
 8004eca:	e00b      	b.n	8004ee4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	4a0b      	ldr	r2, [pc, #44]	; (8004efc <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8004ed0:	601a      	str	r2, [r3, #0]
      break;
 8004ed2:	e007      	b.n	8004ee4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8004ed8:	601a      	str	r2, [r3, #0]
      break;
 8004eda:	e003      	b.n	8004ee4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8004edc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee0:	60fb      	str	r3, [r7, #12]
      break;
 8004ee2:	bf00      	nop
  }

  return ret;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	408c0000 	.word	0x408c0000
 8004ef4:	410c0000 	.word	0x410c0000
 8004ef8:	418c0000 	.word	0x418c0000
 8004efc:	420c0000 	.word	0x420c0000
 8004f00:	428c0000 	.word	0x428c0000

08004f04 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	331c      	adds	r3, #28
 8004f16:	f107 020b 	add.w	r2, r7, #11
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fd91 	bl	8005a44 <lsm6dsl_gy_data_rate_get>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004f28:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2c:	e04e      	b.n	8004fcc <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004f2e:	7afb      	ldrb	r3, [r7, #11]
 8004f30:	2b0a      	cmp	r3, #10
 8004f32:	d846      	bhi.n	8004fc2 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8004f34:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004f69 	.word	0x08004f69
 8004f40:	08004f73 	.word	0x08004f73
 8004f44:	08004f7b 	.word	0x08004f7b
 8004f48:	08004f83 	.word	0x08004f83
 8004f4c:	08004f8b 	.word	0x08004f8b
 8004f50:	08004f93 	.word	0x08004f93
 8004f54:	08004f9b 	.word	0x08004f9b
 8004f58:	08004fa3 	.word	0x08004fa3
 8004f5c:	08004fab 	.word	0x08004fab
 8004f60:	08004fb3 	.word	0x08004fb3
 8004f64:	08004fbb 	.word	0x08004fbb
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]
      break;
 8004f70:	e02b      	b.n	8004fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	4a17      	ldr	r2, [pc, #92]	; (8004fd4 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8004f76:	601a      	str	r2, [r3, #0]
      break;
 8004f78:	e027      	b.n	8004fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	4a16      	ldr	r2, [pc, #88]	; (8004fd8 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004f7e:	601a      	str	r2, [r3, #0]
      break;
 8004f80:	e023      	b.n	8004fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	4a15      	ldr	r2, [pc, #84]	; (8004fdc <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8004f86:	601a      	str	r2, [r3, #0]
      break;
 8004f88:	e01f      	b.n	8004fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	4a14      	ldr	r2, [pc, #80]	; (8004fe0 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8004f8e:	601a      	str	r2, [r3, #0]
      break;
 8004f90:	e01b      	b.n	8004fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	4a13      	ldr	r2, [pc, #76]	; (8004fe4 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8004f96:	601a      	str	r2, [r3, #0]
      break;
 8004f98:	e017      	b.n	8004fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	4a12      	ldr	r2, [pc, #72]	; (8004fe8 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8004f9e:	601a      	str	r2, [r3, #0]
      break;
 8004fa0:	e013      	b.n	8004fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	4a11      	ldr	r2, [pc, #68]	; (8004fec <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8004fa6:	601a      	str	r2, [r3, #0]
      break;
 8004fa8:	e00f      	b.n	8004fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	4a10      	ldr	r2, [pc, #64]	; (8004ff0 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8004fae:	601a      	str	r2, [r3, #0]
      break;
 8004fb0:	e00b      	b.n	8004fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	4a0f      	ldr	r2, [pc, #60]	; (8004ff4 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8004fb6:	601a      	str	r2, [r3, #0]
      break;
 8004fb8:	e007      	b.n	8004fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	4a0e      	ldr	r2, [pc, #56]	; (8004ff8 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8004fbe:	601a      	str	r2, [r3, #0]
      break;
 8004fc0:	e003      	b.n	8004fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8004fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc6:	60fb      	str	r3, [r7, #12]
      break;
 8004fc8:	bf00      	nop
  }

  return ret;
 8004fca:	68fb      	ldr	r3, [r7, #12]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	41480000 	.word	0x41480000
 8004fd8:	41d00000 	.word	0x41d00000
 8004fdc:	42500000 	.word	0x42500000
 8004fe0:	42d00000 	.word	0x42d00000
 8004fe4:	43500000 	.word	0x43500000
 8004fe8:	43d00000 	.word	0x43d00000
 8004fec:	44504000 	.word	0x44504000
 8004ff0:	44cf8000 	.word	0x44cf8000
 8004ff4:	45502000 	.word	0x45502000
 8004ff8:	45d02000 	.word	0x45d02000

08004ffc <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800500e:	2b01      	cmp	r3, #1
 8005010:	d106      	bne.n	8005020 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005012:	ed97 0a00 	vldr	s0, [r7]
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fa26 	bl	8005468 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 800501c:	4603      	mov	r3, r0
 800501e:	e005      	b.n	800502c <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005020:	ed97 0a00 	vldr	s0, [r7]
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 faab 	bl	8005580 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 800502a:	4603      	mov	r3, r0
  }
}
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	331c      	adds	r3, #28
 8005046:	f107 020b 	add.w	r2, r7, #11
 800504a:	4611      	mov	r1, r2
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fc91 	bl	8005974 <lsm6dsl_gy_full_scale_get>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8005058:	f04f 33ff 	mov.w	r3, #4294967295
 800505c:	e030      	b.n	80050c0 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800505e:	7afb      	ldrb	r3, [r7, #11]
 8005060:	2b06      	cmp	r3, #6
 8005062:	d828      	bhi.n	80050b6 <LSM6DSL_GYRO_GetFullScale+0x82>
 8005064:	a201      	add	r2, pc, #4	; (adr r2, 800506c <LSM6DSL_GYRO_GetFullScale+0x38>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	08005091 	.word	0x08005091
 8005070:	08005089 	.word	0x08005089
 8005074:	08005099 	.word	0x08005099
 8005078:	080050b7 	.word	0x080050b7
 800507c:	080050a3 	.word	0x080050a3
 8005080:	080050b7 	.word	0x080050b7
 8005084:	080050ad 	.word	0x080050ad
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	227d      	movs	r2, #125	; 0x7d
 800508c:	601a      	str	r2, [r3, #0]
      break;
 800508e:	e016      	b.n	80050be <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	22fa      	movs	r2, #250	; 0xfa
 8005094:	601a      	str	r2, [r3, #0]
      break;
 8005096:	e012      	b.n	80050be <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800509e:	601a      	str	r2, [r3, #0]
      break;
 80050a0:	e00d      	b.n	80050be <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050a8:	601a      	str	r2, [r3, #0]
      break;
 80050aa:	e008      	b.n	80050be <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80050b2:	601a      	str	r2, [r3, #0]
      break;
 80050b4:	e003      	b.n	80050be <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 80050b6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ba:	60fb      	str	r3, [r7, #12]
      break;
 80050bc:	bf00      	nop
  }

  return ret;
 80050be:	68fb      	ldr	r3, [r7, #12]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b7d      	cmp	r3, #125	; 0x7d
 80050d6:	dd12      	ble.n	80050fe <LSM6DSL_GYRO_SetFullScale+0x36>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2bfa      	cmp	r3, #250	; 0xfa
 80050dc:	dd0d      	ble.n	80050fa <LSM6DSL_GYRO_SetFullScale+0x32>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050e4:	dd07      	ble.n	80050f6 <LSM6DSL_GYRO_SetFullScale+0x2e>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050ec:	dc01      	bgt.n	80050f2 <LSM6DSL_GYRO_SetFullScale+0x2a>
 80050ee:	2304      	movs	r3, #4
 80050f0:	e006      	b.n	8005100 <LSM6DSL_GYRO_SetFullScale+0x38>
 80050f2:	2306      	movs	r3, #6
 80050f4:	e004      	b.n	8005100 <LSM6DSL_GYRO_SetFullScale+0x38>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e002      	b.n	8005100 <LSM6DSL_GYRO_SetFullScale+0x38>
 80050fa:	2300      	movs	r3, #0
 80050fc:	e000      	b.n	8005100 <LSM6DSL_GYRO_SetFullScale+0x38>
 80050fe:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8005100:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	331c      	adds	r3, #28
 8005106:	7bfa      	ldrb	r2, [r7, #15]
 8005108:	4611      	mov	r1, r2
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fc0c 	bl	8005928 <lsm6dsl_gy_full_scale_set>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8005116:	f04f 33ff 	mov.w	r3, #4294967295
 800511a:	e000      	b.n	800511e <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b084      	sub	sp, #16
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	331c      	adds	r3, #28
 8005134:	f107 0208 	add.w	r2, r7, #8
 8005138:	4611      	mov	r1, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fd0a 	bl	8005b54 <lsm6dsl_angular_rate_raw_get>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8005146:	f04f 33ff 	mov.w	r3, #4294967295
 800514a:	e00c      	b.n	8005166 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800514c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005154:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800515c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b086      	sub	sp, #24
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	331c      	adds	r3, #28
 800517c:	f107 0210 	add.w	r2, r7, #16
 8005180:	4611      	mov	r1, r2
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fce6 	bl	8005b54 <lsm6dsl_angular_rate_raw_get>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 800518e:	f04f 33ff 	mov.w	r3, #4294967295
 8005192:	e03c      	b.n	800520e <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8005194:	f107 030c 	add.w	r3, r7, #12
 8005198:	4619      	mov	r1, r3
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff fe60 	bl	8004e60 <LSM6DSL_GYRO_GetSensitivity>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80051a6:	f04f 33ff 	mov.w	r3, #4294967295
 80051aa:	e030      	b.n	800520e <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80051ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80051b0:	ee07 3a90 	vmov	s15, r3
 80051b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80051bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051c4:	ee17 2a90 	vmov	r2, s15
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80051cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80051d0:	ee07 3a90 	vmov	s15, r3
 80051d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80051dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051e4:	ee17 2a90 	vmov	r2, s15
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80051ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051f0:	ee07 3a90 	vmov	s15, r3
 80051f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80051fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005204:	ee17 2a90 	vmov	r2, s15
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	460b      	mov	r3, r1
 8005220:	70fb      	strb	r3, [r7, #3]
 8005222:	4613      	mov	r3, r2
 8005224:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f103 001c 	add.w	r0, r3, #28
 800522c:	1cba      	adds	r2, r7, #2
 800522e:	78f9      	ldrb	r1, [r7, #3]
 8005230:	2301      	movs	r3, #1
 8005232:	f000 fa75 	bl	8005720 <lsm6dsl_write_reg>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 800523c:	f04f 33ff 	mov.w	r3, #4294967295
 8005240:	e000      	b.n	8005244 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005258:	edd7 7a00 	vldr	s15, [r7]
 800525c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005268:	d801      	bhi.n	800526e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 800526a:	2301      	movs	r3, #1
 800526c:	e058      	b.n	8005320 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800526e:	edd7 7a00 	vldr	s15, [r7]
 8005272:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800527a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527e:	d801      	bhi.n	8005284 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005280:	2302      	movs	r3, #2
 8005282:	e04d      	b.n	8005320 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005284:	edd7 7a00 	vldr	s15, [r7]
 8005288:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005348 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 800528c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005294:	d801      	bhi.n	800529a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8005296:	2303      	movs	r3, #3
 8005298:	e042      	b.n	8005320 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800529a:	edd7 7a00 	vldr	s15, [r7]
 800529e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800534c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80052a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052aa:	d801      	bhi.n	80052b0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 80052ac:	2304      	movs	r3, #4
 80052ae:	e037      	b.n	8005320 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80052b0:	edd7 7a00 	vldr	s15, [r7]
 80052b4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005350 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 80052b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c0:	d801      	bhi.n	80052c6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80052c2:	2305      	movs	r3, #5
 80052c4:	e02c      	b.n	8005320 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80052c6:	edd7 7a00 	vldr	s15, [r7]
 80052ca:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005354 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 80052ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d6:	d801      	bhi.n	80052dc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 80052d8:	2306      	movs	r3, #6
 80052da:	e021      	b.n	8005320 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80052dc:	edd7 7a00 	vldr	s15, [r7]
 80052e0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005358 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80052e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ec:	d801      	bhi.n	80052f2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80052ee:	2307      	movs	r3, #7
 80052f0:	e016      	b.n	8005320 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80052f2:	edd7 7a00 	vldr	s15, [r7]
 80052f6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800535c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 80052fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005302:	d801      	bhi.n	8005308 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005304:	2308      	movs	r3, #8
 8005306:	e00b      	b.n	8005320 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005308:	edd7 7a00 	vldr	s15, [r7]
 800530c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005360 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8005310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005318:	d801      	bhi.n	800531e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800531a:	2309      	movs	r3, #9
 800531c:	e000      	b.n	8005320 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800531e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8005320:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	331c      	adds	r3, #28
 8005326:	7bfa      	ldrb	r2, [r7, #15]
 8005328:	4611      	mov	r1, r2
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fa6e 	bl	800580c <lsm6dsl_xl_data_rate_set>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8005336:	f04f 33ff 	mov.w	r3, #4294967295
 800533a:	e000      	b.n	800533e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	42500000 	.word	0x42500000
 800534c:	42d00000 	.word	0x42d00000
 8005350:	43500000 	.word	0x43500000
 8005354:	43d00000 	.word	0x43d00000
 8005358:	44504000 	.word	0x44504000
 800535c:	44cf8000 	.word	0x44cf8000
 8005360:	45502000 	.word	0x45502000

08005364 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005370:	edd7 7a00 	vldr	s15, [r7]
 8005374:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800537c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005380:	d801      	bhi.n	8005386 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8005382:	2301      	movs	r3, #1
 8005384:	e058      	b.n	8005438 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005386:	edd7 7a00 	vldr	s15, [r7]
 800538a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800538e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005396:	d801      	bhi.n	800539c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005398:	2302      	movs	r3, #2
 800539a:	e04d      	b.n	8005438 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800539c:	edd7 7a00 	vldr	s15, [r7]
 80053a0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800544c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80053a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ac:	d801      	bhi.n	80053b2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80053ae:	2303      	movs	r3, #3
 80053b0:	e042      	b.n	8005438 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80053b2:	edd7 7a00 	vldr	s15, [r7]
 80053b6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005450 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 80053ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c2:	d801      	bhi.n	80053c8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 80053c4:	2304      	movs	r3, #4
 80053c6:	e037      	b.n	8005438 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80053c8:	edd7 7a00 	vldr	s15, [r7]
 80053cc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005454 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80053d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d8:	d801      	bhi.n	80053de <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80053da:	2305      	movs	r3, #5
 80053dc:	e02c      	b.n	8005438 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80053de:	edd7 7a00 	vldr	s15, [r7]
 80053e2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005458 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80053e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ee:	d801      	bhi.n	80053f4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80053f0:	2306      	movs	r3, #6
 80053f2:	e021      	b.n	8005438 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80053f4:	edd7 7a00 	vldr	s15, [r7]
 80053f8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800545c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80053fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005404:	d801      	bhi.n	800540a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8005406:	2307      	movs	r3, #7
 8005408:	e016      	b.n	8005438 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800540a:	edd7 7a00 	vldr	s15, [r7]
 800540e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005460 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8005412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541a:	d801      	bhi.n	8005420 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800541c:	2308      	movs	r3, #8
 800541e:	e00b      	b.n	8005438 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005420:	edd7 7a00 	vldr	s15, [r7]
 8005424:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005464 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800542c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005430:	d801      	bhi.n	8005436 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8005432:	2309      	movs	r3, #9
 8005434:	e000      	b.n	8005438 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005436:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	42500000 	.word	0x42500000
 8005450:	42d00000 	.word	0x42d00000
 8005454:	43500000 	.word	0x43500000
 8005458:	43d00000 	.word	0x43d00000
 800545c:	44504000 	.word	0x44504000
 8005460:	44cf8000 	.word	0x44cf8000
 8005464:	45502000 	.word	0x45502000

08005468 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005474:	edd7 7a00 	vldr	s15, [r7]
 8005478:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800547c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005484:	d801      	bhi.n	800548a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005486:	2301      	movs	r3, #1
 8005488:	e058      	b.n	800553c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800548a:	edd7 7a00 	vldr	s15, [r7]
 800548e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800549a:	d801      	bhi.n	80054a0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800549c:	2302      	movs	r3, #2
 800549e:	e04d      	b.n	800553c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054a0:	edd7 7a00 	vldr	s15, [r7]
 80054a4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005564 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80054a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b0:	d801      	bhi.n	80054b6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80054b2:	2303      	movs	r3, #3
 80054b4:	e042      	b.n	800553c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054b6:	edd7 7a00 	vldr	s15, [r7]
 80054ba:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005568 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80054be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c6:	d801      	bhi.n	80054cc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80054c8:	2304      	movs	r3, #4
 80054ca:	e037      	b.n	800553c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054cc:	edd7 7a00 	vldr	s15, [r7]
 80054d0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800556c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80054d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054dc:	d801      	bhi.n	80054e2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80054de:	2305      	movs	r3, #5
 80054e0:	e02c      	b.n	800553c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054e2:	edd7 7a00 	vldr	s15, [r7]
 80054e6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005570 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80054ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f2:	d801      	bhi.n	80054f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80054f4:	2306      	movs	r3, #6
 80054f6:	e021      	b.n	800553c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054f8:	edd7 7a00 	vldr	s15, [r7]
 80054fc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005574 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005508:	d801      	bhi.n	800550e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800550a:	2307      	movs	r3, #7
 800550c:	e016      	b.n	800553c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800550e:	edd7 7a00 	vldr	s15, [r7]
 8005512:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005578 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8005516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800551a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551e:	d801      	bhi.n	8005524 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005520:	2308      	movs	r3, #8
 8005522:	e00b      	b.n	800553c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005524:	edd7 7a00 	vldr	s15, [r7]
 8005528:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800557c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800552c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005534:	d801      	bhi.n	800553a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8005536:	2309      	movs	r3, #9
 8005538:	e000      	b.n	800553c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800553a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 800553c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	331c      	adds	r3, #28
 8005542:	7bfa      	ldrb	r2, [r7, #15]
 8005544:	4611      	mov	r1, r2
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fa56 	bl	80059f8 <lsm6dsl_gy_data_rate_set>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8005552:	f04f 33ff 	mov.w	r3, #4294967295
 8005556:	e000      	b.n	800555a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	42500000 	.word	0x42500000
 8005568:	42d00000 	.word	0x42d00000
 800556c:	43500000 	.word	0x43500000
 8005570:	43d00000 	.word	0x43d00000
 8005574:	44504000 	.word	0x44504000
 8005578:	44cf8000 	.word	0x44cf8000
 800557c:	45502000 	.word	0x45502000

08005580 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800558c:	edd7 7a00 	vldr	s15, [r7]
 8005590:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559c:	d801      	bhi.n	80055a2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800559e:	2301      	movs	r3, #1
 80055a0:	e058      	b.n	8005654 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055a2:	edd7 7a00 	vldr	s15, [r7]
 80055a6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80055aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b2:	d801      	bhi.n	80055b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e04d      	b.n	8005654 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055b8:	edd7 7a00 	vldr	s15, [r7]
 80055bc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005668 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80055c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c8:	d801      	bhi.n	80055ce <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80055ca:	2303      	movs	r3, #3
 80055cc:	e042      	b.n	8005654 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055ce:	edd7 7a00 	vldr	s15, [r7]
 80055d2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800566c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80055d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055de:	d801      	bhi.n	80055e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80055e0:	2304      	movs	r3, #4
 80055e2:	e037      	b.n	8005654 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055e4:	edd7 7a00 	vldr	s15, [r7]
 80055e8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005670 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80055ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f4:	d801      	bhi.n	80055fa <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80055f6:	2305      	movs	r3, #5
 80055f8:	e02c      	b.n	8005654 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055fa:	edd7 7a00 	vldr	s15, [r7]
 80055fe:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005674 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560a:	d801      	bhi.n	8005610 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800560c:	2306      	movs	r3, #6
 800560e:	e021      	b.n	8005654 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005610:	edd7 7a00 	vldr	s15, [r7]
 8005614:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005678 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800561c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005620:	d801      	bhi.n	8005626 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005622:	2307      	movs	r3, #7
 8005624:	e016      	b.n	8005654 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005626:	edd7 7a00 	vldr	s15, [r7]
 800562a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800567c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800562e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005636:	d801      	bhi.n	800563c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005638:	2308      	movs	r3, #8
 800563a:	e00b      	b.n	8005654 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800563c:	edd7 7a00 	vldr	s15, [r7]
 8005640:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005680 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564c:	d801      	bhi.n	8005652 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800564e:	2309      	movs	r3, #9
 8005650:	e000      	b.n	8005654 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005652:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	42500000 	.word	0x42500000
 800566c:	42d00000 	.word	0x42d00000
 8005670:	43500000 	.word	0x43500000
 8005674:	43d00000 	.word	0x43d00000
 8005678:	44504000 	.word	0x44504000
 800567c:	44cf8000 	.word	0x44cf8000
 8005680:	45502000 	.word	0x45502000

08005684 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005684:	b590      	push	{r4, r7, lr}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	461a      	mov	r2, r3
 8005690:	460b      	mov	r3, r1
 8005692:	72fb      	strb	r3, [r7, #11]
 8005694:	4613      	mov	r3, r2
 8005696:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	695c      	ldr	r4, [r3, #20]
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	7b1b      	ldrb	r3, [r3, #12]
 80056a4:	b298      	uxth	r0, r3
 80056a6:	7afb      	ldrb	r3, [r7, #11]
 80056a8:	b299      	uxth	r1, r3
 80056aa:	893b      	ldrh	r3, [r7, #8]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	47a0      	blx	r4
 80056b0:	4603      	mov	r3, r0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd90      	pop	{r4, r7, pc}

080056ba <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80056ba:	b590      	push	{r4, r7, lr}
 80056bc:	b087      	sub	sp, #28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	461a      	mov	r2, r3
 80056c6:	460b      	mov	r3, r1
 80056c8:	72fb      	strb	r3, [r7, #11]
 80056ca:	4613      	mov	r3, r2
 80056cc:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	691c      	ldr	r4, [r3, #16]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	7b1b      	ldrb	r3, [r3, #12]
 80056da:	b298      	uxth	r0, r3
 80056dc:	7afb      	ldrb	r3, [r7, #11]
 80056de:	b299      	uxth	r1, r3
 80056e0:	893b      	ldrh	r3, [r7, #8]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	47a0      	blx	r4
 80056e6:	4603      	mov	r3, r0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd90      	pop	{r4, r7, pc}

080056f0 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80056f0:	b590      	push	{r4, r7, lr}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	607a      	str	r2, [r7, #4]
 80056fa:	461a      	mov	r2, r3
 80056fc:	460b      	mov	r3, r1
 80056fe:	72fb      	strb	r3, [r7, #11]
 8005700:	4613      	mov	r3, r2
 8005702:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685c      	ldr	r4, [r3, #4]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6898      	ldr	r0, [r3, #8]
 800570c:	893b      	ldrh	r3, [r7, #8]
 800570e:	7af9      	ldrb	r1, [r7, #11]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	47a0      	blx	r4
 8005714:	6178      	str	r0, [r7, #20]
  return ret;
 8005716:	697b      	ldr	r3, [r7, #20]
}
 8005718:	4618      	mov	r0, r3
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	bd90      	pop	{r4, r7, pc}

08005720 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005720:	b590      	push	{r4, r7, lr}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	607a      	str	r2, [r7, #4]
 800572a:	461a      	mov	r2, r3
 800572c:	460b      	mov	r3, r1
 800572e:	72fb      	strb	r3, [r7, #11]
 8005730:	4613      	mov	r3, r2
 8005732:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681c      	ldr	r4, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6898      	ldr	r0, [r3, #8]
 800573c:	893b      	ldrh	r3, [r7, #8]
 800573e:	7af9      	ldrb	r1, [r7, #11]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	47a0      	blx	r4
 8005744:	6178      	str	r0, [r7, #20]
  return ret;
 8005746:	697b      	ldr	r3, [r7, #20]
}
 8005748:	4618      	mov	r0, r3
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	bd90      	pop	{r4, r7, pc}

08005750 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800575c:	f107 0208 	add.w	r2, r7, #8
 8005760:	2301      	movs	r3, #1
 8005762:	2110      	movs	r1, #16
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff ffc3 	bl	80056f0 <lsm6dsl_read_reg>
 800576a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10f      	bne.n	8005792 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8005772:	78fb      	ldrb	r3, [r7, #3]
 8005774:	f003 0303 	and.w	r3, r3, #3
 8005778:	b2da      	uxtb	r2, r3
 800577a:	7a3b      	ldrb	r3, [r7, #8]
 800577c:	f362 0383 	bfi	r3, r2, #2, #2
 8005780:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005782:	f107 0208 	add.w	r2, r7, #8
 8005786:	2301      	movs	r3, #1
 8005788:	2110      	movs	r1, #16
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff ffc8 	bl	8005720 <lsm6dsl_write_reg>
 8005790:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8005792:	68fb      	ldr	r3, [r7, #12]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80057a6:	f107 0208 	add.w	r2, r7, #8
 80057aa:	2301      	movs	r3, #1
 80057ac:	2110      	movs	r1, #16
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff ff9e 	bl	80056f0 <lsm6dsl_read_reg>
 80057b4:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 80057b6:	7a3b      	ldrb	r3, [r7, #8]
 80057b8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d81a      	bhi.n	80057f8 <lsm6dsl_xl_full_scale_get+0x5c>
 80057c2:	a201      	add	r2, pc, #4	; (adr r2, 80057c8 <lsm6dsl_xl_full_scale_get+0x2c>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057d9 	.word	0x080057d9
 80057cc:	080057e1 	.word	0x080057e1
 80057d0:	080057e9 	.word	0x080057e9
 80057d4:	080057f1 	.word	0x080057f1
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2200      	movs	r2, #0
 80057dc:	701a      	strb	r2, [r3, #0]
      break;
 80057de:	e00f      	b.n	8005800 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2201      	movs	r2, #1
 80057e4:	701a      	strb	r2, [r3, #0]
      break;
 80057e6:	e00b      	b.n	8005800 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2202      	movs	r2, #2
 80057ec:	701a      	strb	r2, [r3, #0]
      break;
 80057ee:	e007      	b.n	8005800 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2203      	movs	r2, #3
 80057f4:	701a      	strb	r2, [r3, #0]
      break;
 80057f6:	e003      	b.n	8005800 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2204      	movs	r2, #4
 80057fc:	701a      	strb	r2, [r3, #0]
      break;
 80057fe:	bf00      	nop
  }

  return ret;
 8005800:	68fb      	ldr	r3, [r7, #12]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop

0800580c <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005818:	f107 0208 	add.w	r2, r7, #8
 800581c:	2301      	movs	r3, #1
 800581e:	2110      	movs	r1, #16
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff ff65 	bl	80056f0 <lsm6dsl_read_reg>
 8005826:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10f      	bne.n	800584e <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	f003 030f 	and.w	r3, r3, #15
 8005834:	b2da      	uxtb	r2, r3
 8005836:	7a3b      	ldrb	r3, [r7, #8]
 8005838:	f362 1307 	bfi	r3, r2, #4, #4
 800583c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800583e:	f107 0208 	add.w	r2, r7, #8
 8005842:	2301      	movs	r3, #1
 8005844:	2110      	movs	r1, #16
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff ff6a 	bl	8005720 <lsm6dsl_write_reg>
 800584c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800584e:	68fb      	ldr	r3, [r7, #12]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005862:	f107 0208 	add.w	r2, r7, #8
 8005866:	2301      	movs	r3, #1
 8005868:	2110      	movs	r1, #16
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff ff40 	bl	80056f0 <lsm6dsl_read_reg>
 8005870:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 8005872:	7a3b      	ldrb	r3, [r7, #8]
 8005874:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b0b      	cmp	r3, #11
 800587c:	d84a      	bhi.n	8005914 <lsm6dsl_xl_data_rate_get+0xbc>
 800587e:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <lsm6dsl_xl_data_rate_get+0x2c>)
 8005880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005884:	080058b5 	.word	0x080058b5
 8005888:	080058bd 	.word	0x080058bd
 800588c:	080058c5 	.word	0x080058c5
 8005890:	080058cd 	.word	0x080058cd
 8005894:	080058d5 	.word	0x080058d5
 8005898:	080058dd 	.word	0x080058dd
 800589c:	080058e5 	.word	0x080058e5
 80058a0:	080058ed 	.word	0x080058ed
 80058a4:	080058f5 	.word	0x080058f5
 80058a8:	080058fd 	.word	0x080058fd
 80058ac:	08005905 	.word	0x08005905
 80058b0:	0800590d 	.word	0x0800590d
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2200      	movs	r2, #0
 80058b8:	701a      	strb	r2, [r3, #0]
      break;
 80058ba:	e02f      	b.n	800591c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2201      	movs	r2, #1
 80058c0:	701a      	strb	r2, [r3, #0]
      break;
 80058c2:	e02b      	b.n	800591c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	2202      	movs	r2, #2
 80058c8:	701a      	strb	r2, [r3, #0]
      break;
 80058ca:	e027      	b.n	800591c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2203      	movs	r2, #3
 80058d0:	701a      	strb	r2, [r3, #0]
      break;
 80058d2:	e023      	b.n	800591c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2204      	movs	r2, #4
 80058d8:	701a      	strb	r2, [r3, #0]
      break;
 80058da:	e01f      	b.n	800591c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2205      	movs	r2, #5
 80058e0:	701a      	strb	r2, [r3, #0]
      break;
 80058e2:	e01b      	b.n	800591c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2206      	movs	r2, #6
 80058e8:	701a      	strb	r2, [r3, #0]
      break;
 80058ea:	e017      	b.n	800591c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2207      	movs	r2, #7
 80058f0:	701a      	strb	r2, [r3, #0]
      break;
 80058f2:	e013      	b.n	800591c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2208      	movs	r2, #8
 80058f8:	701a      	strb	r2, [r3, #0]
      break;
 80058fa:	e00f      	b.n	800591c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2209      	movs	r2, #9
 8005900:	701a      	strb	r2, [r3, #0]
      break;
 8005902:	e00b      	b.n	800591c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	220a      	movs	r2, #10
 8005908:	701a      	strb	r2, [r3, #0]
      break;
 800590a:	e007      	b.n	800591c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	220b      	movs	r2, #11
 8005910:	701a      	strb	r2, [r3, #0]
      break;
 8005912:	e003      	b.n	800591c <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	220c      	movs	r2, #12
 8005918:	701a      	strb	r2, [r3, #0]
      break;
 800591a:	bf00      	nop
  }

  return ret;
 800591c:	68fb      	ldr	r3, [r7, #12]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop

08005928 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005934:	f107 0208 	add.w	r2, r7, #8
 8005938:	2301      	movs	r3, #1
 800593a:	2111      	movs	r1, #17
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff fed7 	bl	80056f0 <lsm6dsl_read_reg>
 8005942:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10f      	bne.n	800596a <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	b2da      	uxtb	r2, r3
 8005952:	7a3b      	ldrb	r3, [r7, #8]
 8005954:	f362 0343 	bfi	r3, r2, #1, #3
 8005958:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800595a:	f107 0208 	add.w	r2, r7, #8
 800595e:	2301      	movs	r3, #1
 8005960:	2111      	movs	r1, #17
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff fedc 	bl	8005720 <lsm6dsl_write_reg>
 8005968:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800596a:	68fb      	ldr	r3, [r7, #12]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800597e:	f107 0208 	add.w	r2, r7, #8
 8005982:	2301      	movs	r3, #1
 8005984:	2111      	movs	r1, #17
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7ff feb2 	bl	80056f0 <lsm6dsl_read_reg>
 800598c:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 800598e:	7a3b      	ldrb	r3, [r7, #8]
 8005990:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b06      	cmp	r3, #6
 8005998:	d824      	bhi.n	80059e4 <lsm6dsl_gy_full_scale_get+0x70>
 800599a:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <lsm6dsl_gy_full_scale_get+0x2c>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	080059bd 	.word	0x080059bd
 80059a4:	080059c5 	.word	0x080059c5
 80059a8:	080059cd 	.word	0x080059cd
 80059ac:	080059e5 	.word	0x080059e5
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	080059e5 	.word	0x080059e5
 80059b8:	080059dd 	.word	0x080059dd
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2200      	movs	r2, #0
 80059c0:	701a      	strb	r2, [r3, #0]
      break;
 80059c2:	e013      	b.n	80059ec <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2201      	movs	r2, #1
 80059c8:	701a      	strb	r2, [r3, #0]
      break;
 80059ca:	e00f      	b.n	80059ec <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2202      	movs	r2, #2
 80059d0:	701a      	strb	r2, [r3, #0]
      break;
 80059d2:	e00b      	b.n	80059ec <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2204      	movs	r2, #4
 80059d8:	701a      	strb	r2, [r3, #0]
      break;
 80059da:	e007      	b.n	80059ec <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2206      	movs	r2, #6
 80059e0:	701a      	strb	r2, [r3, #0]
      break;
 80059e2:	e003      	b.n	80059ec <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2207      	movs	r2, #7
 80059e8:	701a      	strb	r2, [r3, #0]
      break;
 80059ea:	bf00      	nop
  }

  return ret;
 80059ec:	68fb      	ldr	r3, [r7, #12]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop

080059f8 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005a04:	f107 0208 	add.w	r2, r7, #8
 8005a08:	2301      	movs	r3, #1
 8005a0a:	2111      	movs	r1, #17
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff fe6f 	bl	80056f0 <lsm6dsl_read_reg>
 8005a12:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10f      	bne.n	8005a3a <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8005a1a:	78fb      	ldrb	r3, [r7, #3]
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	7a3b      	ldrb	r3, [r7, #8]
 8005a24:	f362 1307 	bfi	r3, r2, #4, #4
 8005a28:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005a2a:	f107 0208 	add.w	r2, r7, #8
 8005a2e:	2301      	movs	r3, #1
 8005a30:	2111      	movs	r1, #17
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff fe74 	bl	8005720 <lsm6dsl_write_reg>
 8005a38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005a4e:	f107 0208 	add.w	r2, r7, #8
 8005a52:	2301      	movs	r3, #1
 8005a54:	2111      	movs	r1, #17
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7ff fe4a 	bl	80056f0 <lsm6dsl_read_reg>
 8005a5c:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 8005a5e:	7a3b      	ldrb	r3, [r7, #8]
 8005a60:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b0a      	cmp	r3, #10
 8005a68:	d844      	bhi.n	8005af4 <lsm6dsl_gy_data_rate_get+0xb0>
 8005a6a:	a201      	add	r2, pc, #4	; (adr r2, 8005a70 <lsm6dsl_gy_data_rate_get+0x2c>)
 8005a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a70:	08005a9d 	.word	0x08005a9d
 8005a74:	08005aa5 	.word	0x08005aa5
 8005a78:	08005aad 	.word	0x08005aad
 8005a7c:	08005ab5 	.word	0x08005ab5
 8005a80:	08005abd 	.word	0x08005abd
 8005a84:	08005ac5 	.word	0x08005ac5
 8005a88:	08005acd 	.word	0x08005acd
 8005a8c:	08005ad5 	.word	0x08005ad5
 8005a90:	08005add 	.word	0x08005add
 8005a94:	08005ae5 	.word	0x08005ae5
 8005a98:	08005aed 	.word	0x08005aed
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	701a      	strb	r2, [r3, #0]
      break;
 8005aa2:	e02b      	b.n	8005afc <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	701a      	strb	r2, [r3, #0]
      break;
 8005aaa:	e027      	b.n	8005afc <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	701a      	strb	r2, [r3, #0]
      break;
 8005ab2:	e023      	b.n	8005afc <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	701a      	strb	r2, [r3, #0]
      break;
 8005aba:	e01f      	b.n	8005afc <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2204      	movs	r2, #4
 8005ac0:	701a      	strb	r2, [r3, #0]
      break;
 8005ac2:	e01b      	b.n	8005afc <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2205      	movs	r2, #5
 8005ac8:	701a      	strb	r2, [r3, #0]
      break;
 8005aca:	e017      	b.n	8005afc <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2206      	movs	r2, #6
 8005ad0:	701a      	strb	r2, [r3, #0]
      break;
 8005ad2:	e013      	b.n	8005afc <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2207      	movs	r2, #7
 8005ad8:	701a      	strb	r2, [r3, #0]
      break;
 8005ada:	e00f      	b.n	8005afc <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2208      	movs	r2, #8
 8005ae0:	701a      	strb	r2, [r3, #0]
      break;
 8005ae2:	e00b      	b.n	8005afc <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2209      	movs	r2, #9
 8005ae8:	701a      	strb	r2, [r3, #0]
      break;
 8005aea:	e007      	b.n	8005afc <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	220a      	movs	r2, #10
 8005af0:	701a      	strb	r2, [r3, #0]
      break;
 8005af2:	e003      	b.n	8005afc <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	220b      	movs	r2, #11
 8005af8:	701a      	strb	r2, [r3, #0]
      break;
 8005afa:	bf00      	nop
  }

  return ret;
 8005afc:	68fb      	ldr	r3, [r7, #12]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop

08005b08 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005b14:	f107 0208 	add.w	r2, r7, #8
 8005b18:	2301      	movs	r3, #1
 8005b1a:	2112      	movs	r1, #18
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff fde7 	bl	80056f0 <lsm6dsl_read_reg>
 8005b22:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10f      	bne.n	8005b4a <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	7a3b      	ldrb	r3, [r7, #8]
 8005b34:	f362 1386 	bfi	r3, r2, #6, #1
 8005b38:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005b3a:	f107 0208 	add.w	r2, r7, #8
 8005b3e:	2301      	movs	r3, #1
 8005b40:	2112      	movs	r1, #18
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fdec 	bl	8005720 <lsm6dsl_write_reg>
 8005b48:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8005b5e:	f107 020c 	add.w	r2, r7, #12
 8005b62:	2306      	movs	r3, #6
 8005b64:	2122      	movs	r1, #34	; 0x22
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7ff fdc2 	bl	80056f0 <lsm6dsl_read_reg>
 8005b6c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005b6e:	7b7b      	ldrb	r3, [r7, #13]
 8005b70:	b21a      	sxth	r2, r3
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	021b      	lsls	r3, r3, #8
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	7b3b      	ldrb	r3, [r7, #12]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	4413      	add	r3, r2
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	b21a      	sxth	r2, r3
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005b90:	7bfa      	ldrb	r2, [r7, #15]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	3302      	adds	r3, #2
 8005b96:	b212      	sxth	r2, r2
 8005b98:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	3302      	adds	r3, #2
 8005b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	021b      	lsls	r3, r3, #8
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	7bbb      	ldrb	r3, [r7, #14]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	4413      	add	r3, r2
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	3302      	adds	r3, #2
 8005bb4:	b212      	sxth	r2, r2
 8005bb6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005bb8:	7c7a      	ldrb	r2, [r7, #17]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	b212      	sxth	r2, r2
 8005bc0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	021b      	lsls	r3, r3, #8
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	7c3b      	ldrb	r3, [r7, #16]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	b212      	sxth	r2, r2
 8005bde:	801a      	strh	r2, [r3, #0]
  return ret;
 8005be0:	697b      	ldr	r3, [r7, #20]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b086      	sub	sp, #24
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8005bf4:	f107 020c 	add.w	r2, r7, #12
 8005bf8:	2306      	movs	r3, #6
 8005bfa:	2128      	movs	r1, #40	; 0x28
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7ff fd77 	bl	80056f0 <lsm6dsl_read_reg>
 8005c02:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005c04:	7b7b      	ldrb	r3, [r7, #13]
 8005c06:	b21a      	sxth	r2, r3
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	021b      	lsls	r3, r3, #8
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	7b3b      	ldrb	r3, [r7, #12]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	b21a      	sxth	r2, r3
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005c26:	7bfa      	ldrb	r2, [r7, #15]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	3302      	adds	r3, #2
 8005c2c:	b212      	sxth	r2, r2
 8005c2e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	3302      	adds	r3, #2
 8005c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	021b      	lsls	r3, r3, #8
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	7bbb      	ldrb	r3, [r7, #14]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	4413      	add	r3, r2
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	3302      	adds	r3, #2
 8005c4a:	b212      	sxth	r2, r2
 8005c4c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005c4e:	7c7a      	ldrb	r2, [r7, #17]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	3304      	adds	r3, #4
 8005c54:	b212      	sxth	r2, r2
 8005c56:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	7c3b      	ldrb	r3, [r7, #16]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	3304      	adds	r3, #4
 8005c72:	b212      	sxth	r2, r2
 8005c74:	801a      	strh	r2, [r3, #0]
  return ret;
 8005c76:	697b      	ldr	r3, [r7, #20]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	210f      	movs	r1, #15
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7ff fd2d 	bl	80056f0 <lsm6dsl_read_reg>
 8005c96:	60f8      	str	r0, [r7, #12]
  return ret;
 8005c98:	68fb      	ldr	r3, [r7, #12]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	460b      	mov	r3, r1
 8005cac:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005cae:	f107 0208 	add.w	r2, r7, #8
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	2112      	movs	r1, #18
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7ff fd1a 	bl	80056f0 <lsm6dsl_read_reg>
 8005cbc:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10f      	bne.n	8005ce4 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8005cc4:	78fb      	ldrb	r3, [r7, #3]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	7a3b      	ldrb	r3, [r7, #8]
 8005cce:	f362 0382 	bfi	r3, r2, #2, #1
 8005cd2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005cd4:	f107 0208 	add.w	r2, r7, #8
 8005cd8:	2301      	movs	r3, #1
 8005cda:	2112      	movs	r1, #18
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff fd1f 	bl	8005720 <lsm6dsl_write_reg>
 8005ce2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005cfa:	f107 0208 	add.w	r2, r7, #8
 8005cfe:	2301      	movs	r3, #1
 8005d00:	210a      	movs	r1, #10
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff fcf4 	bl	80056f0 <lsm6dsl_read_reg>
 8005d08:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10f      	bne.n	8005d30 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	7a3b      	ldrb	r3, [r7, #8]
 8005d1a:	f362 0302 	bfi	r3, r2, #0, #3
 8005d1e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005d20:	f107 0208 	add.w	r2, r7, #8
 8005d24:	2301      	movs	r3, #1
 8005d26:	210a      	movs	r1, #10
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff fcf9 	bl	8005720 <lsm6dsl_write_reg>
 8005d2e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005d30:	68fb      	ldr	r3, [r7, #12]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b08a      	sub	sp, #40	; 0x28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005d46:	2300      	movs	r3, #0
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <IKS01A2_ENV_SENSOR_Init+0x24>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d032      	beq.n	8005dc4 <IKS01A2_ENV_SENSOR_Init+0x88>
 8005d5e:	e063      	b.n	8005e28 <IKS01A2_ENV_SENSOR_Init+0xec>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8005d60:	6838      	ldr	r0, [r7, #0]
 8005d62:	f000 f973 	bl	800604c <HTS221_0_Probe>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <IKS01A2_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 8005d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d70:	e098      	b.n	8005ea4 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005d72:	4a4e      	ldr	r2, [pc, #312]	; (8005eac <IKS01A2_ENV_SENSOR_Init+0x170>)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	494c      	ldr	r1, [pc, #304]	; (8005eb0 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d84:	f107 0108 	add.w	r1, r7, #8
 8005d88:	4610      	mov	r0, r2
 8005d8a:	4798      	blx	r3
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <IKS01A2_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005d92:	f06f 0306 	mvn.w	r3, #6
 8005d96:	e085      	b.n	8005ea4 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8005d98:	7a3b      	ldrb	r3, [r7, #8]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d103      	bne.n	8005da6 <IKS01A2_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f043 0301 	orr.w	r3, r3, #1
 8005da4:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8005da6:	7abb      	ldrb	r3, [r7, #10]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d103      	bne.n	8005db4 <IKS01A2_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	f043 0304 	orr.w	r3, r3, #4
 8005db2:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8005db4:	7a7b      	ldrb	r3, [r7, #9]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d13a      	bne.n	8005e30 <IKS01A2_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	f043 0302 	orr.w	r3, r3, #2
 8005dc0:	61bb      	str	r3, [r7, #24]
      }
      break;
 8005dc2:	e035      	b.n	8005e30 <IKS01A2_ENV_SENSOR_Init+0xf4>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8005dc4:	6838      	ldr	r0, [r7, #0]
 8005dc6:	f000 f9fb 	bl	80061c0 <LPS22HB_0_Probe>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <IKS01A2_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 8005dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd4:	e066      	b.n	8005ea4 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005dd6:	4a35      	ldr	r2, [pc, #212]	; (8005eac <IKS01A2_ENV_SENSOR_Init+0x170>)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	4933      	ldr	r1, [pc, #204]	; (8005eb0 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005de8:	f107 0108 	add.w	r1, r7, #8
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <IKS01A2_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005df6:	f06f 0306 	mvn.w	r3, #6
 8005dfa:	e053      	b.n	8005ea4 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8005dfc:	7a3b      	ldrb	r3, [r7, #8]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d103      	bne.n	8005e0a <IKS01A2_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	f043 0301 	orr.w	r3, r3, #1
 8005e08:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8005e0a:	7abb      	ldrb	r3, [r7, #10]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d103      	bne.n	8005e18 <IKS01A2_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	f043 0304 	orr.w	r3, r3, #4
 8005e16:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8005e18:	7a7b      	ldrb	r3, [r7, #9]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d10a      	bne.n	8005e34 <IKS01A2_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	f043 0302 	orr.w	r3, r3, #2
 8005e24:	61bb      	str	r3, [r7, #24]
      }
      break;
 8005e26:	e005      	b.n	8005e34 <IKS01A2_ENV_SENSOR_Init+0xf8>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005e28:	f06f 0301 	mvn.w	r3, #1
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005e2e:	e002      	b.n	8005e36 <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 8005e30:	bf00      	nop
 8005e32:	e000      	b.n	8005e36 <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 8005e34:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <IKS01A2_ENV_SENSOR_Init+0x104>
  {
    return ret;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	e031      	b.n	8005ea4 <IKS01A2_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8005e40:	2300      	movs	r3, #0
 8005e42:	61fb      	str	r3, [r7, #28]
 8005e44:	e02a      	b.n	8005e9c <IKS01A2_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	6a3a      	ldr	r2, [r7, #32]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d11e      	bne.n	8005e90 <IKS01A2_ENV_SENSOR_Init+0x154>
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	4013      	ands	r3, r2
 8005e58:	6a3a      	ldr	r2, [r7, #32]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d118      	bne.n	8005e90 <IKS01A2_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8005e5e:	4a15      	ldr	r2, [pc, #84]	; (8005eb4 <IKS01A2_ENV_SENSOR_Init+0x178>)
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e66:	4814      	ldr	r0, [pc, #80]	; (8005eb8 <IKS01A2_ENV_SENSOR_Init+0x17c>)
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	4413      	add	r3, r2
 8005e70:	440b      	add	r3, r1
 8005e72:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	490d      	ldr	r1, [pc, #52]	; (8005eb0 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005e80:	4610      	mov	r0, r2
 8005e82:	4798      	blx	r3
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <IKS01A2_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005e8a:	f06f 0304 	mvn.w	r3, #4
 8005e8e:	e009      	b.n	8005ea4 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d9d1      	bls.n	8005e46 <IKS01A2_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3728      	adds	r7, #40	; 0x28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	20000684 	.word	0x20000684
 8005eb0:	200016c0 	.word	0x200016c0
 8005eb4:	20000138 	.word	0x20000138
 8005eb8:	2000066c 	.word	0x2000066c

08005ebc <IKS01A2_ENV_SENSOR_Enable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d903      	bls.n	8005ed4 <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005ecc:	f06f 0301 	mvn.w	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	e028      	b.n	8005f26 <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8005ed4:	4a16      	ldr	r2, [pc, #88]	; (8005f30 <IKS01A2_ENV_SENSOR_Enable+0x74>)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d11c      	bne.n	8005f20 <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8005ee6:	4a13      	ldr	r2, [pc, #76]	; (8005f34 <IKS01A2_ENV_SENSOR_Enable+0x78>)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005eee:	4812      	ldr	r0, [pc, #72]	; (8005f38 <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	4413      	add	r3, r2
 8005ef8:	440b      	add	r3, r1
 8005efa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	490e      	ldr	r1, [pc, #56]	; (8005f3c <IKS01A2_ENV_SENSOR_Enable+0x80>)
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005f08:	4610      	mov	r0, r2
 8005f0a:	4798      	blx	r3
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f12:	f06f 0304 	mvn.w	r3, #4
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	e005      	b.n	8005f26 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	e002      	b.n	8005f26 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005f20:	f06f 0301 	mvn.w	r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005f26:	68fb      	ldr	r3, [r7, #12]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	2000068c 	.word	0x2000068c
 8005f34:	20000138 	.word	0x20000138
 8005f38:	2000066c 	.word	0x2000066c
 8005f3c:	200016c0 	.word	0x200016c0

08005f40 <IKS01A2_ENV_SENSOR_Disable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d903      	bls.n	8005f58 <IKS01A2_ENV_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005f50:	f06f 0301 	mvn.w	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	e028      	b.n	8005faa <IKS01A2_ENV_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8005f58:	4a16      	ldr	r2, [pc, #88]	; (8005fb4 <IKS01A2_ENV_SENSOR_Disable+0x74>)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	4013      	ands	r3, r2
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d11c      	bne.n	8005fa4 <IKS01A2_ENV_SENSOR_Disable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Disable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8005f6a:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <IKS01A2_ENV_SENSOR_Disable+0x78>)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005f72:	4812      	ldr	r0, [pc, #72]	; (8005fbc <IKS01A2_ENV_SENSOR_Disable+0x7c>)
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	4613      	mov	r3, r2
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	4413      	add	r3, r2
 8005f7c:	440b      	add	r3, r1
 8005f7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	490e      	ldr	r1, [pc, #56]	; (8005fc0 <IKS01A2_ENV_SENSOR_Disable+0x80>)
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	4798      	blx	r3
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <IKS01A2_ENV_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f96:	f06f 0304 	mvn.w	r3, #4
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	e005      	b.n	8005faa <IKS01A2_ENV_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	e002      	b.n	8005faa <IKS01A2_ENV_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005fa4:	f06f 0301 	mvn.w	r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005faa:	68fb      	ldr	r3, [r7, #12]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	2000068c 	.word	0x2000068c
 8005fb8:	20000138 	.word	0x20000138
 8005fbc:	2000066c 	.word	0x2000066c
 8005fc0:	200016c0 	.word	0x200016c0

08005fc4 <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d903      	bls.n	8005fde <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005fd6:	f06f 0301 	mvn.w	r3, #1
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	e029      	b.n	8006032 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8005fde:	4a17      	ldr	r2, [pc, #92]	; (800603c <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d11d      	bne.n	800602c <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8005ff0:	4a13      	ldr	r2, [pc, #76]	; (8006040 <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ff8:	4812      	ldr	r0, [pc, #72]	; (8006044 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	4413      	add	r3, r2
 8006002:	440b      	add	r3, r1
 8006004:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	490f      	ldr	r1, [pc, #60]	; (8006048 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	4610      	mov	r0, r2
 8006016:	4798      	blx	r3
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800601e:	f06f 0304 	mvn.w	r3, #4
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	e005      	b.n	8006032 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]
 800602a:	e002      	b.n	8006032 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800602c:	f06f 0301 	mvn.w	r3, #1
 8006030:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006032:	697b      	ldr	r3, [r7, #20]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3718      	adds	r7, #24
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	2000068c 	.word	0x2000068c
 8006040:	20000138 	.word	0x20000138
 8006044:	2000066c 	.word	0x2000066c
 8006048:	200016c0 	.word	0x200016c0

0800604c <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b090      	sub	sp, #64	; 0x40
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8006054:	2300      	movs	r3, #0
 8006056:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8006058:	2300      	movs	r3, #0
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800605c:	23bf      	movs	r3, #191	; 0xbf
 800605e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8006062:	4b49      	ldr	r3, [pc, #292]	; (8006188 <HTS221_0_Probe+0x13c>)
 8006064:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006066:	4b49      	ldr	r3, [pc, #292]	; (800618c <HTS221_0_Probe+0x140>)
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800606a:	4b49      	ldr	r3, [pc, #292]	; (8006190 <HTS221_0_Probe+0x144>)
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800606e:	4b49      	ldr	r3, [pc, #292]	; (8006194 <HTS221_0_Probe+0x148>)
 8006070:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8006072:	4b49      	ldr	r3, [pc, #292]	; (8006198 <HTS221_0_Probe+0x14c>)
 8006074:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8006076:	f107 0320 	add.w	r3, r7, #32
 800607a:	4619      	mov	r1, r3
 800607c:	4847      	ldr	r0, [pc, #284]	; (800619c <HTS221_0_Probe+0x150>)
 800607e:	f7fb fb95 	bl	80017ac <HTS221_RegisterBusIO>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006088:	f06f 0306 	mvn.w	r3, #6
 800608c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800608e:	e076      	b.n	800617e <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8006090:	f107 031f 	add.w	r3, r7, #31
 8006094:	4619      	mov	r1, r3
 8006096:	4841      	ldr	r0, [pc, #260]	; (800619c <HTS221_0_Probe+0x150>)
 8006098:	f7fb fc0d 	bl	80018b6 <HTS221_ReadID>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060a2:	f06f 0306 	mvn.w	r3, #6
 80060a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060a8:	e069      	b.n	800617e <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 80060aa:	7ffb      	ldrb	r3, [r7, #31]
 80060ac:	2bbc      	cmp	r3, #188	; 0xbc
 80060ae:	d003      	beq.n	80060b8 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060b0:	f06f 0306 	mvn.w	r3, #6
 80060b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060b6:	e062      	b.n	800617e <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80060b8:	f107 030c 	add.w	r3, r7, #12
 80060bc:	4619      	mov	r1, r3
 80060be:	4837      	ldr	r0, [pc, #220]	; (800619c <HTS221_0_Probe+0x150>)
 80060c0:	f7fb fc10 	bl	80018e4 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80060c4:	7b3b      	ldrb	r3, [r7, #12]
 80060c6:	461a      	mov	r2, r3
 80060c8:	7b7b      	ldrb	r3, [r7, #13]
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 80060ce:	7bbb      	ldrb	r3, [r7, #14]
 80060d0:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80060d2:	4313      	orrs	r3, r2
 80060d4:	4a32      	ldr	r2, [pc, #200]	; (80061a0 <HTS221_0_Probe+0x154>)
 80060d6:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 80060d8:	4b32      	ldr	r3, [pc, #200]	; (80061a4 <HTS221_0_Probe+0x158>)
 80060da:	4a30      	ldr	r2, [pc, #192]	; (800619c <HTS221_0_Probe+0x150>)
 80060dc:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80060de:	4b32      	ldr	r3, [pc, #200]	; (80061a8 <HTS221_0_Probe+0x15c>)
 80060e0:	4a32      	ldr	r2, [pc, #200]	; (80061ac <HTS221_0_Probe+0x160>)
 80060e2:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80060e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d11d      	bne.n	8006126 <HTS221_0_Probe+0xda>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d018      	beq.n	8006126 <HTS221_0_Probe+0xda>
 80060f4:	7b3b      	ldrb	r3, [r7, #12]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d115      	bne.n	8006126 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80060fa:	4b2d      	ldr	r3, [pc, #180]	; (80061b0 <HTS221_0_Probe+0x164>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	4a2d      	ldr	r2, [pc, #180]	; (80061b4 <HTS221_0_Probe+0x168>)
 8006100:	492d      	ldr	r1, [pc, #180]	; (80061b8 <HTS221_0_Probe+0x16c>)
 8006102:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8006106:	4b28      	ldr	r3, [pc, #160]	; (80061a8 <HTS221_0_Probe+0x15c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a25      	ldr	r2, [pc, #148]	; (80061a4 <HTS221_0_Probe+0x158>)
 800610e:	6812      	ldr	r2, [r2, #0]
 8006110:	4610      	mov	r0, r2
 8006112:	4798      	blx	r3
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800611a:	f06f 0304 	mvn.w	r3, #4
 800611e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006120:	e001      	b.n	8006126 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006122:	2300      	movs	r3, #0
 8006124:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8006126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d11d      	bne.n	8006168 <HTS221_0_Probe+0x11c>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b00      	cmp	r3, #0
 8006134:	d018      	beq.n	8006168 <HTS221_0_Probe+0x11c>
 8006136:	7bbb      	ldrb	r3, [r7, #14]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d115      	bne.n	8006168 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800613c:	4b1c      	ldr	r3, [pc, #112]	; (80061b0 <HTS221_0_Probe+0x164>)
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	4a1c      	ldr	r2, [pc, #112]	; (80061b4 <HTS221_0_Probe+0x168>)
 8006142:	491e      	ldr	r1, [pc, #120]	; (80061bc <HTS221_0_Probe+0x170>)
 8006144:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8006148:	4b17      	ldr	r3, [pc, #92]	; (80061a8 <HTS221_0_Probe+0x15c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a15      	ldr	r2, [pc, #84]	; (80061a4 <HTS221_0_Probe+0x158>)
 8006150:	6812      	ldr	r2, [r2, #0]
 8006152:	4610      	mov	r0, r2
 8006154:	4798      	blx	r3
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800615c:	f06f 0304 	mvn.w	r3, #4
 8006160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006162:	e001      	b.n	8006168 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006164:	2300      	movs	r3, #0
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8006168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d107      	bne.n	800617e <HTS221_0_Probe+0x132>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006178:	f06f 0304 	mvn.w	r3, #4
 800617c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800617e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006180:	4618      	mov	r0, r3
 8006182:	3740      	adds	r7, #64	; 0x40
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	080013d9 	.word	0x080013d9
 800618c:	08001455 	.word	0x08001455
 8006190:	08001509 	.word	0x08001509
 8006194:	080014a5 	.word	0x080014a5
 8006198:	0800156d 	.word	0x0800156d
 800619c:	20000694 	.word	0x20000694
 80061a0:	2000068c 	.word	0x2000068c
 80061a4:	200016c0 	.word	0x200016c0
 80061a8:	20000684 	.word	0x20000684
 80061ac:	20000008 	.word	0x20000008
 80061b0:	20000138 	.word	0x20000138
 80061b4:	2000066c 	.word	0x2000066c
 80061b8:	2000002c 	.word	0x2000002c
 80061bc:	20000018 	.word	0x20000018

080061c0 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b090      	sub	sp, #64	; 0x40
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80061c8:	2300      	movs	r3, #0
 80061ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 80061cc:	2300      	movs	r3, #0
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 80061d0:	23bb      	movs	r3, #187	; 0xbb
 80061d2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 80061d6:	4b4a      	ldr	r3, [pc, #296]	; (8006300 <LPS22HB_0_Probe+0x140>)
 80061d8:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80061da:	4b4a      	ldr	r3, [pc, #296]	; (8006304 <LPS22HB_0_Probe+0x144>)
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80061de:	4b4a      	ldr	r3, [pc, #296]	; (8006308 <LPS22HB_0_Probe+0x148>)
 80061e0:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80061e2:	4b4a      	ldr	r3, [pc, #296]	; (800630c <LPS22HB_0_Probe+0x14c>)
 80061e4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 80061e6:	4b4a      	ldr	r3, [pc, #296]	; (8006310 <LPS22HB_0_Probe+0x150>)
 80061e8:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 80061ea:	f107 0320 	add.w	r3, r7, #32
 80061ee:	4619      	mov	r1, r3
 80061f0:	4848      	ldr	r0, [pc, #288]	; (8006314 <LPS22HB_0_Probe+0x154>)
 80061f2:	f7fc f8f9 	bl	80023e8 <LPS22HB_RegisterBusIO>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80061fc:	f06f 0306 	mvn.w	r3, #6
 8006200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006202:	e078      	b.n	80062f6 <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8006204:	f107 031f 	add.w	r3, r7, #31
 8006208:	4619      	mov	r1, r3
 800620a:	4842      	ldr	r0, [pc, #264]	; (8006314 <LPS22HB_0_Probe+0x154>)
 800620c:	f7fc f991 	bl	8002532 <LPS22HB_ReadID>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006216:	f06f 0306 	mvn.w	r3, #6
 800621a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800621c:	e06b      	b.n	80062f6 <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 800621e:	7ffb      	ldrb	r3, [r7, #31]
 8006220:	2bb1      	cmp	r3, #177	; 0xb1
 8006222:	d003      	beq.n	800622c <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006224:	f06f 0306 	mvn.w	r3, #6
 8006228:	63fb      	str	r3, [r7, #60]	; 0x3c
 800622a:	e064      	b.n	80062f6 <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 800622c:	f107 030c 	add.w	r3, r7, #12
 8006230:	4619      	mov	r1, r3
 8006232:	4838      	ldr	r0, [pc, #224]	; (8006314 <LPS22HB_0_Probe+0x154>)
 8006234:	f7fc f994 	bl	8002560 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8006238:	7b3b      	ldrb	r3, [r7, #12]
 800623a:	461a      	mov	r2, r3
 800623c:	7b7b      	ldrb	r3, [r7, #13]
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8006242:	7bbb      	ldrb	r3, [r7, #14]
 8006244:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8006246:	4313      	orrs	r3, r2
 8006248:	4a33      	ldr	r2, [pc, #204]	; (8006318 <LPS22HB_0_Probe+0x158>)
 800624a:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 800624c:	4b33      	ldr	r3, [pc, #204]	; (800631c <LPS22HB_0_Probe+0x15c>)
 800624e:	4a31      	ldr	r2, [pc, #196]	; (8006314 <LPS22HB_0_Probe+0x154>)
 8006250:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 8006252:	4b33      	ldr	r3, [pc, #204]	; (8006320 <LPS22HB_0_Probe+0x160>)
 8006254:	4a33      	ldr	r2, [pc, #204]	; (8006324 <LPS22HB_0_Probe+0x164>)
 8006256:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8006258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625a:	2b00      	cmp	r3, #0
 800625c:	d11e      	bne.n	800629c <LPS22HB_0_Probe+0xdc>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	d019      	beq.n	800629c <LPS22HB_0_Probe+0xdc>
 8006268:	7b3b      	ldrb	r3, [r7, #12]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d116      	bne.n	800629c <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 800626e:	4b2e      	ldr	r3, [pc, #184]	; (8006328 <LPS22HB_0_Probe+0x168>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	4a2e      	ldr	r2, [pc, #184]	; (800632c <LPS22HB_0_Probe+0x16c>)
 8006274:	3303      	adds	r3, #3
 8006276:	492e      	ldr	r1, [pc, #184]	; (8006330 <LPS22HB_0_Probe+0x170>)
 8006278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800627c:	4b28      	ldr	r3, [pc, #160]	; (8006320 <LPS22HB_0_Probe+0x160>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a26      	ldr	r2, [pc, #152]	; (800631c <LPS22HB_0_Probe+0x15c>)
 8006284:	6852      	ldr	r2, [r2, #4]
 8006286:	4610      	mov	r0, r2
 8006288:	4798      	blx	r3
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d003      	beq.n	8006298 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006290:	f06f 0304 	mvn.w	r3, #4
 8006294:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006296:	e001      	b.n	800629c <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006298:	2300      	movs	r3, #0
 800629a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800629c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d11e      	bne.n	80062e0 <LPS22HB_0_Probe+0x120>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d019      	beq.n	80062e0 <LPS22HB_0_Probe+0x120>
 80062ac:	7b7b      	ldrb	r3, [r7, #13]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d116      	bne.n	80062e0 <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 80062b2:	4b1d      	ldr	r3, [pc, #116]	; (8006328 <LPS22HB_0_Probe+0x168>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	4a1d      	ldr	r2, [pc, #116]	; (800632c <LPS22HB_0_Probe+0x16c>)
 80062b8:	3303      	adds	r3, #3
 80062ba:	491e      	ldr	r1, [pc, #120]	; (8006334 <LPS22HB_0_Probe+0x174>)
 80062bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 80062c0:	4b17      	ldr	r3, [pc, #92]	; (8006320 <LPS22HB_0_Probe+0x160>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a15      	ldr	r2, [pc, #84]	; (800631c <LPS22HB_0_Probe+0x15c>)
 80062c8:	6852      	ldr	r2, [r2, #4]
 80062ca:	4610      	mov	r0, r2
 80062cc:	4798      	blx	r3
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80062d4:	f06f 0304 	mvn.w	r3, #4
 80062d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062da:	e001      	b.n	80062e0 <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80062dc:	2300      	movs	r3, #0
 80062de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80062e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d107      	bne.n	80062f6 <LPS22HB_0_Probe+0x136>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80062f0:	f06f 0304 	mvn.w	r3, #4
 80062f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 80062f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3740      	adds	r7, #64	; 0x40
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	080013d9 	.word	0x080013d9
 8006304:	08001455 	.word	0x08001455
 8006308:	08001509 	.word	0x08001509
 800630c:	080014a5 	.word	0x080014a5
 8006310:	0800156d 	.word	0x0800156d
 8006314:	200006c0 	.word	0x200006c0
 8006318:	2000068c 	.word	0x2000068c
 800631c:	200016c0 	.word	0x200016c0
 8006320:	20000684 	.word	0x20000684
 8006324:	20000040 	.word	0x20000040
 8006328:	20000138 	.word	0x20000138
 800632c:	2000066c 	.word	0x2000066c
 8006330:	20000064 	.word	0x20000064
 8006334:	20000050 	.word	0x20000050

08006338 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08e      	sub	sp, #56	; 0x38
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006342:	2300      	movs	r3, #0
 8006344:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8006346:	2301      	movs	r3, #1
 8006348:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b02      	cmp	r3, #2
 8006352:	d06e      	beq.n	8006432 <IKS01A2_MOTION_SENSOR_Init+0xfa>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b02      	cmp	r3, #2
 8006358:	f200 809d 	bhi.w	8006496 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <IKS01A2_MOTION_SENSOR_Init+0x32>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d032      	beq.n	80063ce <IKS01A2_MOTION_SENSOR_Init+0x96>
 8006368:	e095      	b.n	8006496 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800636a:	6838      	ldr	r0, [r7, #0]
 800636c:	f000 fa32 	bl	80067d4 <LSM6DSL_0_Probe>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8006376:	f04f 33ff 	mov.w	r3, #4294967295
 800637a:	e0cc      	b.n	8006516 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800637c:	4a68      	ldr	r2, [pc, #416]	; (8006520 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	4967      	ldr	r1, [pc, #412]	; (8006524 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800638e:	f107 010c 	add.w	r1, r7, #12
 8006392:	4610      	mov	r0, r2
 8006394:	4798      	blx	r3
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800639c:	f06f 0306 	mvn.w	r3, #6
 80063a0:	e0b9      	b.n	8006516 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80063a2:	7b3b      	ldrb	r3, [r7, #12]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d103      	bne.n	80063b0 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	f043 0302 	orr.w	r3, r3, #2
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80063b0:	7b7b      	ldrb	r3, [r7, #13]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d103      	bne.n	80063be <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	f043 0301 	orr.w	r3, r3, #1
 80063bc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80063be:	7bbb      	ldrb	r3, [r7, #14]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d16c      	bne.n	800649e <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	f043 0304 	orr.w	r3, r3, #4
 80063ca:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80063cc:	e067      	b.n	800649e <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 80063ce:	6838      	ldr	r0, [r7, #0]
 80063d0:	f000 fabc 	bl	800694c <LSM303AGR_ACC_0_Probe>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80063da:	f04f 33ff 	mov.w	r3, #4294967295
 80063de:	e09a      	b.n	8006516 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80063e0:	4a4f      	ldr	r2, [pc, #316]	; (8006520 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	494e      	ldr	r1, [pc, #312]	; (8006524 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80063f2:	f107 010c 	add.w	r1, r7, #12
 80063f6:	4610      	mov	r0, r2
 80063f8:	4798      	blx	r3
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006400:	f06f 0306 	mvn.w	r3, #6
 8006404:	e087      	b.n	8006516 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8006406:	7b3b      	ldrb	r3, [r7, #12]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d103      	bne.n	8006414 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	f043 0302 	orr.w	r3, r3, #2
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006414:	7b7b      	ldrb	r3, [r7, #13]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d103      	bne.n	8006422 <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	f043 0301 	orr.w	r3, r3, #1
 8006420:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d13c      	bne.n	80064a2 <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	f043 0304 	orr.w	r3, r3, #4
 800642e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006430:	e037      	b.n	80064a2 <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8006432:	6838      	ldr	r0, [r7, #0]
 8006434:	f000 fb2e 	bl	8006a94 <LSM303AGR_MAG_0_Probe>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800643e:	f04f 33ff 	mov.w	r3, #4294967295
 8006442:	e068      	b.n	8006516 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006444:	4a36      	ldr	r2, [pc, #216]	; (8006520 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	4935      	ldr	r1, [pc, #212]	; (8006524 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006456:	f107 010c 	add.w	r1, r7, #12
 800645a:	4610      	mov	r0, r2
 800645c:	4798      	blx	r3
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006464:	f06f 0306 	mvn.w	r3, #6
 8006468:	e055      	b.n	8006516 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800646a:	7b3b      	ldrb	r3, [r7, #12]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d103      	bne.n	8006478 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	f043 0302 	orr.w	r3, r3, #2
 8006476:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006478:	7b7b      	ldrb	r3, [r7, #13]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d103      	bne.n	8006486 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	f043 0301 	orr.w	r3, r3, #1
 8006484:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8006486:	7bbb      	ldrb	r3, [r7, #14]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d10c      	bne.n	80064a6 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	f043 0304 	orr.w	r3, r3, #4
 8006492:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006494:	e007      	b.n	80064a6 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8006496:	f06f 0301 	mvn.w	r3, #1
 800649a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800649c:	e004      	b.n	80064a8 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800649e:	bf00      	nop
 80064a0:	e002      	b.n	80064a8 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 80064a2:	bf00      	nop
 80064a4:	e000      	b.n	80064a8 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 80064a6:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80064a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80064ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b0:	e031      	b.n	8006516 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 80064b2:	2300      	movs	r3, #0
 80064b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064b6:	e02a      	b.n	800650e <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	4013      	ands	r3, r2
 80064be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d11e      	bne.n	8006502 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 80064c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	4013      	ands	r3, r2
 80064ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d118      	bne.n	8006502 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80064d0:	4a15      	ldr	r2, [pc, #84]	; (8006528 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80064d8:	4814      	ldr	r0, [pc, #80]	; (800652c <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	4613      	mov	r3, r2
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	4413      	add	r3, r2
 80064e2:	440b      	add	r3, r1
 80064e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	490e      	ldr	r1, [pc, #56]	; (8006524 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80064f2:	4610      	mov	r0, r2
 80064f4:	4798      	blx	r3
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80064fc:	f06f 0304 	mvn.w	r3, #4
 8006500:	e009      	b.n	8006516 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8006508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650a:	3301      	adds	r3, #1
 800650c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006510:	2b02      	cmp	r3, #2
 8006512:	d9d1      	bls.n	80064b8 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8006514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006516:	4618      	mov	r0, r3
 8006518:	3738      	adds	r7, #56	; 0x38
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20000710 	.word	0x20000710
 8006524:	200016c8 	.word	0x200016c8
 8006528:	2000014c 	.word	0x2000014c
 800652c:	200006ec 	.word	0x200006ec

08006530 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b02      	cmp	r3, #2
 800653e:	d903      	bls.n	8006548 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006540:	f06f 0301 	mvn.w	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	e028      	b.n	800659a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006548:	4a16      	ldr	r2, [pc, #88]	; (80065a4 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	4013      	ands	r3, r2
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d11c      	bne.n	8006594 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800655a:	4a13      	ldr	r2, [pc, #76]	; (80065a8 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006562:	4812      	ldr	r0, [pc, #72]	; (80065ac <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	4613      	mov	r3, r2
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	4413      	add	r3, r2
 800656c:	440b      	add	r3, r1
 800656e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	490e      	ldr	r1, [pc, #56]	; (80065b0 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800657c:	4610      	mov	r0, r2
 800657e:	4798      	blx	r3
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006586:	f06f 0304 	mvn.w	r3, #4
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	e005      	b.n	800659a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	e002      	b.n	800659a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006594:	f06f 0301 	mvn.w	r3, #1
 8006598:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800659a:	68fb      	ldr	r3, [r7, #12]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	2000071c 	.word	0x2000071c
 80065a8:	2000014c 	.word	0x2000014c
 80065ac:	200006ec 	.word	0x200006ec
 80065b0:	200016c8 	.word	0x200016c8

080065b4 <IKS01A2_MOTION_SENSOR_Disable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d903      	bls.n	80065cc <IKS01A2_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80065c4:	f06f 0301 	mvn.w	r3, #1
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	e028      	b.n	800661e <IKS01A2_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80065cc:	4a16      	ldr	r2, [pc, #88]	; (8006628 <IKS01A2_MOTION_SENSOR_Disable+0x74>)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	4013      	ands	r3, r2
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d11c      	bne.n	8006618 <IKS01A2_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80065de:	4a13      	ldr	r2, [pc, #76]	; (800662c <IKS01A2_MOTION_SENSOR_Disable+0x78>)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80065e6:	4812      	ldr	r0, [pc, #72]	; (8006630 <IKS01A2_MOTION_SENSOR_Disable+0x7c>)
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	4613      	mov	r3, r2
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	4413      	add	r3, r2
 80065f0:	440b      	add	r3, r1
 80065f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	490e      	ldr	r1, [pc, #56]	; (8006634 <IKS01A2_MOTION_SENSOR_Disable+0x80>)
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <IKS01A2_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800660a:	f06f 0304 	mvn.w	r3, #4
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	e005      	b.n	800661e <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006612:	2300      	movs	r3, #0
 8006614:	60fb      	str	r3, [r7, #12]
 8006616:	e002      	b.n	800661e <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006618:	f06f 0301 	mvn.w	r3, #1
 800661c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800661e:	68fb      	ldr	r3, [r7, #12]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	2000071c 	.word	0x2000071c
 800662c:	2000014c 	.word	0x2000014c
 8006630:	200006ec 	.word	0x200006ec
 8006634:	200016c8 	.word	0x200016c8

08006638 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b02      	cmp	r3, #2
 8006648:	d903      	bls.n	8006652 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800664a:	f06f 0301 	mvn.w	r3, #1
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	e029      	b.n	80066a6 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006652:	4a17      	ldr	r2, [pc, #92]	; (80066b0 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	4013      	ands	r3, r2
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	429a      	cmp	r2, r3
 8006662:	d11d      	bne.n	80066a0 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8006664:	4a13      	ldr	r2, [pc, #76]	; (80066b4 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800666c:	4812      	ldr	r0, [pc, #72]	; (80066b8 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4613      	mov	r3, r2
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	4413      	add	r3, r2
 8006676:	440b      	add	r3, r1
 8006678:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	490f      	ldr	r1, [pc, #60]	; (80066bc <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	4610      	mov	r0, r2
 800668a:	4798      	blx	r3
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006692:	f06f 0304 	mvn.w	r3, #4
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	e005      	b.n	80066a6 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800669a:	2300      	movs	r3, #0
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	e002      	b.n	80066a6 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80066a0:	f06f 0301 	mvn.w	r3, #1
 80066a4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80066a6:	697b      	ldr	r3, [r7, #20]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	2000071c 	.word	0x2000071c
 80066b4:	2000014c 	.word	0x2000014c
 80066b8:	200006ec 	.word	0x200006ec
 80066bc:	200016c8 	.word	0x200016c8

080066c0 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d903      	bls.n	80066dc <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80066d4:	f06f 0301 	mvn.w	r3, #1
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	e02a      	b.n	8006732 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80066dc:	4a17      	ldr	r2, [pc, #92]	; (800673c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4013      	ands	r3, r2
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d11e      	bne.n	800672c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80066ee:	4a14      	ldr	r2, [pc, #80]	; (8006740 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066f6:	4813      	ldr	r0, [pc, #76]	; (8006744 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	4613      	mov	r3, r2
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	4413      	add	r3, r2
 8006700:	440b      	add	r3, r1
 8006702:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	490f      	ldr	r1, [pc, #60]	; (8006748 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006710:	ed97 0a01 	vldr	s0, [r7, #4]
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800671e:	f06f 0304 	mvn.w	r3, #4
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	e005      	b.n	8006732 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006726:	2300      	movs	r3, #0
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	e002      	b.n	8006732 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800672c:	f06f 0301 	mvn.w	r3, #1
 8006730:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006732:	697b      	ldr	r3, [r7, #20]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	2000071c 	.word	0x2000071c
 8006740:	2000014c 	.word	0x2000014c
 8006744:	200006ec 	.word	0x200006ec
 8006748:	200016c8 	.word	0x200016c8

0800674c <IKS01A2_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d903      	bls.n	8006766 <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800675e:	f06f 0301 	mvn.w	r3, #1
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	e029      	b.n	80067ba <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006766:	4a17      	ldr	r2, [pc, #92]	; (80067c4 <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	4013      	ands	r3, r2
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	429a      	cmp	r2, r3
 8006776:	d11d      	bne.n	80067b4 <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8006778:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006780:	4812      	ldr	r0, [pc, #72]	; (80067cc <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4613      	mov	r3, r2
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	4413      	add	r3, r2
 800678a:	440b      	add	r3, r1
 800678c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	490f      	ldr	r1, [pc, #60]	; (80067d0 <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	4610      	mov	r0, r2
 800679e:	4798      	blx	r3
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80067a6:	f06f 0304 	mvn.w	r3, #4
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	e005      	b.n	80067ba <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80067ae:	2300      	movs	r3, #0
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	e002      	b.n	80067ba <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80067b4:	f06f 0301 	mvn.w	r3, #1
 80067b8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80067ba:	697b      	ldr	r3, [r7, #20]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	2000071c 	.word	0x2000071c
 80067c8:	2000014c 	.word	0x2000014c
 80067cc:	200006ec 	.word	0x200006ec
 80067d0:	200016c8 	.word	0x200016c8

080067d4 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b092      	sub	sp, #72	; 0x48
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80067dc:	2300      	movs	r3, #0
 80067de:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 80067e0:	2300      	movs	r3, #0
 80067e2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 80067e4:	23d7      	movs	r3, #215	; 0xd7
 80067e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 80067ea:	4b4a      	ldr	r3, [pc, #296]	; (8006914 <LSM6DSL_0_Probe+0x140>)
 80067ec:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80067ee:	4b4a      	ldr	r3, [pc, #296]	; (8006918 <LSM6DSL_0_Probe+0x144>)
 80067f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80067f2:	4b4a      	ldr	r3, [pc, #296]	; (800691c <LSM6DSL_0_Probe+0x148>)
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80067f6:	4b4a      	ldr	r3, [pc, #296]	; (8006920 <LSM6DSL_0_Probe+0x14c>)
 80067f8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80067fa:	4b4a      	ldr	r3, [pc, #296]	; (8006924 <LSM6DSL_0_Probe+0x150>)
 80067fc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 80067fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006802:	4619      	mov	r1, r3
 8006804:	4848      	ldr	r0, [pc, #288]	; (8006928 <LSM6DSL_0_Probe+0x154>)
 8006806:	f7fd ff83 	bl	8004710 <LSM6DSL_RegisterBusIO>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006810:	f06f 0306 	mvn.w	r3, #6
 8006814:	647b      	str	r3, [r7, #68]	; 0x44
 8006816:	e077      	b.n	8006908 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8006818:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800681c:	4619      	mov	r1, r3
 800681e:	4842      	ldr	r0, [pc, #264]	; (8006928 <LSM6DSL_0_Probe+0x154>)
 8006820:	f7fe f86c 	bl	80048fc <LSM6DSL_ReadID>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800682a:	f06f 0306 	mvn.w	r3, #6
 800682e:	647b      	str	r3, [r7, #68]	; 0x44
 8006830:	e06a      	b.n	8006908 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8006832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006836:	2b6a      	cmp	r3, #106	; 0x6a
 8006838:	d003      	beq.n	8006842 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800683a:	f06f 0306 	mvn.w	r3, #6
 800683e:	647b      	str	r3, [r7, #68]	; 0x44
 8006840:	e062      	b.n	8006908 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8006842:	f107 0308 	add.w	r3, r7, #8
 8006846:	4619      	mov	r1, r3
 8006848:	4837      	ldr	r0, [pc, #220]	; (8006928 <LSM6DSL_0_Probe+0x154>)
 800684a:	f7fe f86d 	bl	8004928 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800684e:	7a7b      	ldrb	r3, [r7, #9]
 8006850:	461a      	mov	r2, r3
 8006852:	7a3b      	ldrb	r3, [r7, #8]
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	431a      	orrs	r2, r3
 8006858:	7abb      	ldrb	r3, [r7, #10]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4313      	orrs	r3, r2
 800685e:	4a33      	ldr	r2, [pc, #204]	; (800692c <LSM6DSL_0_Probe+0x158>)
 8006860:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8006862:	4b33      	ldr	r3, [pc, #204]	; (8006930 <LSM6DSL_0_Probe+0x15c>)
 8006864:	4a30      	ldr	r2, [pc, #192]	; (8006928 <LSM6DSL_0_Probe+0x154>)
 8006866:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8006868:	4b32      	ldr	r3, [pc, #200]	; (8006934 <LSM6DSL_0_Probe+0x160>)
 800686a:	4a33      	ldr	r2, [pc, #204]	; (8006938 <LSM6DSL_0_Probe+0x164>)
 800686c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800686e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006870:	2b00      	cmp	r3, #0
 8006872:	d11d      	bne.n	80068b0 <LSM6DSL_0_Probe+0xdc>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d018      	beq.n	80068b0 <LSM6DSL_0_Probe+0xdc>
 800687e:	7a7b      	ldrb	r3, [r7, #9]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d115      	bne.n	80068b0 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8006884:	4b2d      	ldr	r3, [pc, #180]	; (800693c <LSM6DSL_0_Probe+0x168>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	4a2d      	ldr	r2, [pc, #180]	; (8006940 <LSM6DSL_0_Probe+0x16c>)
 800688a:	492e      	ldr	r1, [pc, #184]	; (8006944 <LSM6DSL_0_Probe+0x170>)
 800688c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8006890:	4b28      	ldr	r3, [pc, #160]	; (8006934 <LSM6DSL_0_Probe+0x160>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a26      	ldr	r2, [pc, #152]	; (8006930 <LSM6DSL_0_Probe+0x15c>)
 8006898:	6812      	ldr	r2, [r2, #0]
 800689a:	4610      	mov	r0, r2
 800689c:	4798      	blx	r3
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80068a4:	f06f 0304 	mvn.w	r3, #4
 80068a8:	647b      	str	r3, [r7, #68]	; 0x44
 80068aa:	e001      	b.n	80068b0 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80068ac:	2300      	movs	r3, #0
 80068ae:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80068b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d11d      	bne.n	80068f2 <LSM6DSL_0_Probe+0x11e>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d018      	beq.n	80068f2 <LSM6DSL_0_Probe+0x11e>
 80068c0:	7a3b      	ldrb	r3, [r7, #8]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d115      	bne.n	80068f2 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80068c6:	4b1d      	ldr	r3, [pc, #116]	; (800693c <LSM6DSL_0_Probe+0x168>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	4a1d      	ldr	r2, [pc, #116]	; (8006940 <LSM6DSL_0_Probe+0x16c>)
 80068cc:	491e      	ldr	r1, [pc, #120]	; (8006948 <LSM6DSL_0_Probe+0x174>)
 80068ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80068d2:	4b18      	ldr	r3, [pc, #96]	; (8006934 <LSM6DSL_0_Probe+0x160>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a15      	ldr	r2, [pc, #84]	; (8006930 <LSM6DSL_0_Probe+0x15c>)
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	4610      	mov	r0, r2
 80068de:	4798      	blx	r3
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80068e6:	f06f 0304 	mvn.w	r3, #4
 80068ea:	647b      	str	r3, [r7, #68]	; 0x44
 80068ec:	e001      	b.n	80068f2 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80068ee:	2300      	movs	r3, #0
 80068f0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80068f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d107      	bne.n	8006908 <LSM6DSL_0_Probe+0x134>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006902:	f06f 0304 	mvn.w	r3, #4
 8006906:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800690a:	4618      	mov	r0, r3
 800690c:	3748      	adds	r7, #72	; 0x48
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	080013d9 	.word	0x080013d9
 8006918:	08001455 	.word	0x08001455
 800691c:	08001509 	.word	0x08001509
 8006920:	080014a5 	.word	0x080014a5
 8006924:	0800156d 	.word	0x0800156d
 8006928:	20000728 	.word	0x20000728
 800692c:	2000071c 	.word	0x2000071c
 8006930:	200016c8 	.word	0x200016c8
 8006934:	20000710 	.word	0x20000710
 8006938:	200000e0 	.word	0x200000e0
 800693c:	2000014c 	.word	0x2000014c
 8006940:	200006ec 	.word	0x200006ec
 8006944:	20000114 	.word	0x20000114
 8006948:	200000f0 	.word	0x200000f0

0800694c <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b092      	sub	sp, #72	; 0x48
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8006954:	2300      	movs	r3, #0
 8006956:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006958:	2300      	movs	r3, #0
 800695a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 800695c:	2333      	movs	r3, #51	; 0x33
 800695e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8006962:	4b3f      	ldr	r3, [pc, #252]	; (8006a60 <LSM303AGR_ACC_0_Probe+0x114>)
 8006964:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006966:	4b3f      	ldr	r3, [pc, #252]	; (8006a64 <LSM303AGR_ACC_0_Probe+0x118>)
 8006968:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800696a:	4b3f      	ldr	r3, [pc, #252]	; (8006a68 <LSM303AGR_ACC_0_Probe+0x11c>)
 800696c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800696e:	4b3f      	ldr	r3, [pc, #252]	; (8006a6c <LSM303AGR_ACC_0_Probe+0x120>)
 8006970:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8006972:	4b3f      	ldr	r3, [pc, #252]	; (8006a70 <LSM303AGR_ACC_0_Probe+0x124>)
 8006974:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8006976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800697a:	4619      	mov	r1, r3
 800697c:	483d      	ldr	r0, [pc, #244]	; (8006a74 <LSM303AGR_ACC_0_Probe+0x128>)
 800697e:	f7fc fb11 	bl	8002fa4 <LSM303AGR_ACC_RegisterBusIO>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006988:	f06f 0306 	mvn.w	r3, #6
 800698c:	647b      	str	r3, [r7, #68]	; 0x44
 800698e:	e062      	b.n	8006a56 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8006990:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006994:	4619      	mov	r1, r3
 8006996:	4837      	ldr	r0, [pc, #220]	; (8006a74 <LSM303AGR_ACC_0_Probe+0x128>)
 8006998:	f7fc fbc5 	bl	8003126 <LSM303AGR_ACC_ReadID>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80069a2:	f06f 0306 	mvn.w	r3, #6
 80069a6:	647b      	str	r3, [r7, #68]	; 0x44
 80069a8:	e055      	b.n	8006a56 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 80069aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069ae:	2b33      	cmp	r3, #51	; 0x33
 80069b0:	d003      	beq.n	80069ba <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80069b2:	f06f 0306 	mvn.w	r3, #6
 80069b6:	647b      	str	r3, [r7, #68]	; 0x44
 80069b8:	e04d      	b.n	8006a56 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 80069ba:	f107 0308 	add.w	r3, r7, #8
 80069be:	4619      	mov	r1, r3
 80069c0:	482c      	ldr	r0, [pc, #176]	; (8006a74 <LSM303AGR_ACC_0_Probe+0x128>)
 80069c2:	f7fc fbc7 	bl	8003154 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80069c6:	7a7b      	ldrb	r3, [r7, #9]
 80069c8:	461a      	mov	r2, r3
 80069ca:	7a3b      	ldrb	r3, [r7, #8]
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80069d0:	7abb      	ldrb	r3, [r7, #10]
 80069d2:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80069d4:	4313      	orrs	r3, r2
 80069d6:	4a28      	ldr	r2, [pc, #160]	; (8006a78 <LSM303AGR_ACC_0_Probe+0x12c>)
 80069d8:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 80069da:	4b28      	ldr	r3, [pc, #160]	; (8006a7c <LSM303AGR_ACC_0_Probe+0x130>)
 80069dc:	4a25      	ldr	r2, [pc, #148]	; (8006a74 <LSM303AGR_ACC_0_Probe+0x128>)
 80069de:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 80069e0:	4b27      	ldr	r3, [pc, #156]	; (8006a80 <LSM303AGR_ACC_0_Probe+0x134>)
 80069e2:	4a28      	ldr	r2, [pc, #160]	; (8006a84 <LSM303AGR_ACC_0_Probe+0x138>)
 80069e4:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80069e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d11e      	bne.n	8006a2a <LSM303AGR_ACC_0_Probe+0xde>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d019      	beq.n	8006a2a <LSM303AGR_ACC_0_Probe+0xde>
 80069f6:	7a3b      	ldrb	r3, [r7, #8]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d116      	bne.n	8006a2a <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80069fc:	4b22      	ldr	r3, [pc, #136]	; (8006a88 <LSM303AGR_ACC_0_Probe+0x13c>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	4a22      	ldr	r2, [pc, #136]	; (8006a8c <LSM303AGR_ACC_0_Probe+0x140>)
 8006a02:	3303      	adds	r3, #3
 8006a04:	4922      	ldr	r1, [pc, #136]	; (8006a90 <LSM303AGR_ACC_0_Probe+0x144>)
 8006a06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8006a0a:	4b1d      	ldr	r3, [pc, #116]	; (8006a80 <LSM303AGR_ACC_0_Probe+0x134>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a1a      	ldr	r2, [pc, #104]	; (8006a7c <LSM303AGR_ACC_0_Probe+0x130>)
 8006a12:	6852      	ldr	r2, [r2, #4]
 8006a14:	4610      	mov	r0, r2
 8006a16:	4798      	blx	r3
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a1e:	f06f 0304 	mvn.w	r3, #4
 8006a22:	647b      	str	r3, [r7, #68]	; 0x44
 8006a24:	e001      	b.n	8006a2a <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006a26:	2300      	movs	r3, #0
 8006a28:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d107      	bne.n	8006a40 <LSM303AGR_ACC_0_Probe+0xf4>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d002      	beq.n	8006a40 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a3a:	f06f 0304 	mvn.w	r3, #4
 8006a3e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d107      	bne.n	8006a56 <LSM303AGR_ACC_0_Probe+0x10a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a50:	f06f 0304 	mvn.w	r3, #4
 8006a54:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8006a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3748      	adds	r7, #72	; 0x48
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	080013d9 	.word	0x080013d9
 8006a64:	08001455 	.word	0x08001455
 8006a68:	08001509 	.word	0x08001509
 8006a6c:	080014a5 	.word	0x080014a5
 8006a70:	0800156d 	.word	0x0800156d
 8006a74:	20000758 	.word	0x20000758
 8006a78:	2000071c 	.word	0x2000071c
 8006a7c:	200016c8 	.word	0x200016c8
 8006a80:	20000710 	.word	0x20000710
 8006a84:	20000078 	.word	0x20000078
 8006a88:	2000014c 	.word	0x2000014c
 8006a8c:	200006ec 	.word	0x200006ec
 8006a90:	20000088 	.word	0x20000088

08006a94 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b092      	sub	sp, #72	; 0x48
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8006aa4:	233d      	movs	r3, #61	; 0x3d
 8006aa6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8006aaa:	4b3f      	ldr	r3, [pc, #252]	; (8006ba8 <LSM303AGR_MAG_0_Probe+0x114>)
 8006aac:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006aae:	4b3f      	ldr	r3, [pc, #252]	; (8006bac <LSM303AGR_MAG_0_Probe+0x118>)
 8006ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8006ab2:	4b3f      	ldr	r3, [pc, #252]	; (8006bb0 <LSM303AGR_MAG_0_Probe+0x11c>)
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8006ab6:	4b3f      	ldr	r3, [pc, #252]	; (8006bb4 <LSM303AGR_MAG_0_Probe+0x120>)
 8006ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8006aba:	4b3f      	ldr	r3, [pc, #252]	; (8006bb8 <LSM303AGR_MAG_0_Probe+0x124>)
 8006abc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8006abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	483d      	ldr	r0, [pc, #244]	; (8006bbc <LSM303AGR_MAG_0_Probe+0x128>)
 8006ac6:	f7fc fe33 	bl	8003730 <LSM303AGR_MAG_RegisterBusIO>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006ad0:	f06f 0306 	mvn.w	r3, #6
 8006ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ad6:	e062      	b.n	8006b9e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8006ad8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006adc:	4619      	mov	r1, r3
 8006ade:	4837      	ldr	r0, [pc, #220]	; (8006bbc <LSM303AGR_MAG_0_Probe+0x128>)
 8006ae0:	f7fc fedd 	bl	800389e <LSM303AGR_MAG_ReadID>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006aea:	f06f 0306 	mvn.w	r3, #6
 8006aee:	647b      	str	r3, [r7, #68]	; 0x44
 8006af0:	e055      	b.n	8006b9e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8006af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006af6:	2b40      	cmp	r3, #64	; 0x40
 8006af8:	d003      	beq.n	8006b02 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006afa:	f06f 0306 	mvn.w	r3, #6
 8006afe:	647b      	str	r3, [r7, #68]	; 0x44
 8006b00:	e04d      	b.n	8006b9e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8006b02:	f107 0308 	add.w	r3, r7, #8
 8006b06:	4619      	mov	r1, r3
 8006b08:	482c      	ldr	r0, [pc, #176]	; (8006bbc <LSM303AGR_MAG_0_Probe+0x128>)
 8006b0a:	f7fc fedf 	bl	80038cc <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006b0e:	7a7b      	ldrb	r3, [r7, #9]
 8006b10:	461a      	mov	r2, r3
 8006b12:	7a3b      	ldrb	r3, [r7, #8]
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8006b18:	7abb      	ldrb	r3, [r7, #10]
 8006b1a:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	4a28      	ldr	r2, [pc, #160]	; (8006bc0 <LSM303AGR_MAG_0_Probe+0x12c>)
 8006b20:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8006b22:	4b28      	ldr	r3, [pc, #160]	; (8006bc4 <LSM303AGR_MAG_0_Probe+0x130>)
 8006b24:	4a25      	ldr	r2, [pc, #148]	; (8006bbc <LSM303AGR_MAG_0_Probe+0x128>)
 8006b26:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8006b28:	4b27      	ldr	r3, [pc, #156]	; (8006bc8 <LSM303AGR_MAG_0_Probe+0x134>)
 8006b2a:	4a28      	ldr	r2, [pc, #160]	; (8006bcc <LSM303AGR_MAG_0_Probe+0x138>)
 8006b2c:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d11e      	bne.n	8006b72 <LSM303AGR_MAG_0_Probe+0xde>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d019      	beq.n	8006b72 <LSM303AGR_MAG_0_Probe+0xde>
 8006b3e:	7abb      	ldrb	r3, [r7, #10]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d116      	bne.n	8006b72 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006b44:	4b22      	ldr	r3, [pc, #136]	; (8006bd0 <LSM303AGR_MAG_0_Probe+0x13c>)
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	4a22      	ldr	r2, [pc, #136]	; (8006bd4 <LSM303AGR_MAG_0_Probe+0x140>)
 8006b4a:	3306      	adds	r3, #6
 8006b4c:	4922      	ldr	r1, [pc, #136]	; (8006bd8 <LSM303AGR_MAG_0_Probe+0x144>)
 8006b4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8006b52:	4b1d      	ldr	r3, [pc, #116]	; (8006bc8 <LSM303AGR_MAG_0_Probe+0x134>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1a      	ldr	r2, [pc, #104]	; (8006bc4 <LSM303AGR_MAG_0_Probe+0x130>)
 8006b5a:	6892      	ldr	r2, [r2, #8]
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	4798      	blx	r3
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b66:	f06f 0304 	mvn.w	r3, #4
 8006b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b6c:	e001      	b.n	8006b72 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d107      	bne.n	8006b88 <LSM303AGR_MAG_0_Probe+0xf4>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d002      	beq.n	8006b88 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b82:	f06f 0304 	mvn.w	r3, #4
 8006b86:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d107      	bne.n	8006b9e <LSM303AGR_MAG_0_Probe+0x10a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b98:	f06f 0304 	mvn.w	r3, #4
 8006b9c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8006b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3748      	adds	r7, #72	; 0x48
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	080013d9 	.word	0x080013d9
 8006bac:	08001455 	.word	0x08001455
 8006bb0:	08001509 	.word	0x08001509
 8006bb4:	080014a5 	.word	0x080014a5
 8006bb8:	0800156d 	.word	0x0800156d
 8006bbc:	20000784 	.word	0x20000784
 8006bc0:	2000071c 	.word	0x2000071c
 8006bc4:	200016c8 	.word	0x200016c8
 8006bc8:	20000710 	.word	0x20000710
 8006bcc:	200000ac 	.word	0x200000ac
 8006bd0:	2000014c 	.word	0x2000014c
 8006bd4:	200006ec 	.word	0x200006ec
 8006bd8:	200000bc 	.word	0x200000bc

08006bdc <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4603      	mov	r3, r0
 8006be4:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	4a04      	ldr	r2, [pc, #16]	; (8006bfc <BSP_LED_Init+0x20>)
 8006bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bee:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	0801ac50 	.word	0x0801ac50

08006c00 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	4a06      	ldr	r2, [pc, #24]	; (8006c28 <BSP_LED_On+0x28>)
 8006c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c12:	2120      	movs	r1, #32
 8006c14:	2201      	movs	r2, #1
 8006c16:	4618      	mov	r0, r3
 8006c18:	f001 f994 	bl	8007f44 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20000160 	.word	0x20000160

08006c2c <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	4603      	mov	r3, r0
 8006c34:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	4a06      	ldr	r2, [pc, #24]	; (8006c54 <BSP_LED_Off+0x28>)
 8006c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c3e:	2120      	movs	r1, #32
 8006c40:	2200      	movs	r2, #0
 8006c42:	4618      	mov	r0, r3
 8006c44:	f001 f97e 	bl	8007f44 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20000160 	.word	0x20000160

08006c58 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c5e:	4b1c      	ldr	r3, [pc, #112]	; (8006cd0 <LED_USER_GPIO_Init+0x78>)
 8006c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c62:	4a1b      	ldr	r2, [pc, #108]	; (8006cd0 <LED_USER_GPIO_Init+0x78>)
 8006c64:	f043 0301 	orr.w	r3, r3, #1
 8006c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c6a:	4b19      	ldr	r3, [pc, #100]	; (8006cd0 <LED_USER_GPIO_Init+0x78>)
 8006c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	60bb      	str	r3, [r7, #8]
 8006c74:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c76:	f107 030c 	add.w	r3, r7, #12
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	605a      	str	r2, [r3, #4]
 8006c80:	609a      	str	r2, [r3, #8]
 8006c82:	60da      	str	r2, [r3, #12]
 8006c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c86:	4b12      	ldr	r3, [pc, #72]	; (8006cd0 <LED_USER_GPIO_Init+0x78>)
 8006c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8a:	4a11      	ldr	r2, [pc, #68]	; (8006cd0 <LED_USER_GPIO_Init+0x78>)
 8006c8c:	f043 0301 	orr.w	r3, r3, #1
 8006c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c92:	4b0f      	ldr	r3, [pc, #60]	; (8006cd0 <LED_USER_GPIO_Init+0x78>)
 8006c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	607b      	str	r3, [r7, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2120      	movs	r1, #32
 8006ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ca6:	f001 f94d 	bl	8007f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8006caa:	2320      	movs	r3, #32
 8006cac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8006cba:	f107 030c 	add.w	r3, r7, #12
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006cc4:	f000 fe88 	bl	80079d8 <HAL_GPIO_Init>

}
 8006cc8:	bf00      	nop
 8006cca:	3720      	adds	r7, #32
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	40021000 	.word	0x40021000

08006cd4 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	460a      	mov	r2, r1
 8006cde:	71fb      	strb	r3, [r7, #7]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	4a1f      	ldr	r2, [pc, #124]	; (8006d68 <BSP_PB_Init+0x94>)
 8006cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cf0:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8006cf2:	79bb      	ldrb	r3, [r7, #6]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d132      	bne.n	8006d5e <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8006cf8:	79fb      	ldrb	r3, [r7, #7]
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	4a1b      	ldr	r2, [pc, #108]	; (8006d6c <BSP_PB_Init+0x98>)
 8006cfe:	441a      	add	r2, r3
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	491b      	ldr	r1, [pc, #108]	; (8006d70 <BSP_PB_Init+0x9c>)
 8006d04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	f000 fe1f 	bl	800794e <HAL_EXTI_GetHandle>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006d16:	f06f 0303 	mvn.w	r3, #3
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	e01f      	b.n	8006d5e <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8006d1e:	79fb      	ldrb	r3, [r7, #7]
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	4a12      	ldr	r2, [pc, #72]	; (8006d6c <BSP_PB_Init+0x98>)
 8006d24:	1898      	adds	r0, r3, r2
 8006d26:	79fb      	ldrb	r3, [r7, #7]
 8006d28:	4a12      	ldr	r2, [pc, #72]	; (8006d74 <BSP_PB_Init+0xa0>)
 8006d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	2100      	movs	r1, #0
 8006d32:	f000 fdf2 	bl	800791a <HAL_EXTI_RegisterCallback>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006d3c:	f06f 0303 	mvn.w	r3, #3
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	e00c      	b.n	8006d5e <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8006d44:	2028      	movs	r0, #40	; 0x28
 8006d46:	79fb      	ldrb	r3, [r7, #7]
 8006d48:	4a0b      	ldr	r2, [pc, #44]	; (8006d78 <BSP_PB_Init+0xa4>)
 8006d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	4619      	mov	r1, r3
 8006d52:	f000 faca 	bl	80072ea <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8006d56:	2328      	movs	r3, #40	; 0x28
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fae2 	bl	8007322 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	0801ac54 	.word	0x0801ac54
 8006d6c:	20000168 	.word	0x20000168
 8006d70:	0801ac58 	.word	0x0801ac58
 8006d74:	0801ac5c 	.word	0x0801ac5c
 8006d78:	0801ac60 	.word	0x0801ac60

08006d7c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	4603      	mov	r3, r0
 8006d84:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8006d86:	79fb      	ldrb	r3, [r7, #7]
 8006d88:	4a09      	ldr	r2, [pc, #36]	; (8006db0 <BSP_PB_GetState+0x34>)
 8006d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d92:	4611      	mov	r1, r2
 8006d94:	4618      	mov	r0, r3
 8006d96:	f001 f8bd 	bl	8007f14 <HAL_GPIO_ReadPin>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	bf0c      	ite	eq
 8006da0:	2301      	moveq	r3, #1
 8006da2:	2300      	movne	r3, #0
 8006da4:	b2db      	uxtb	r3, r3
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000164 	.word	0x20000164

08006db4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8006db8:	2000      	movs	r0, #0
 8006dba:	f005 fcaf 	bl	800c71c <BSP_PB_Callback>
}
 8006dbe:	bf00      	nop
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dca:	4b19      	ldr	r3, [pc, #100]	; (8006e30 <BUTTON_USER_GPIO_Init+0x6c>)
 8006dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dce:	4a18      	ldr	r2, [pc, #96]	; (8006e30 <BUTTON_USER_GPIO_Init+0x6c>)
 8006dd0:	f043 0304 	orr.w	r3, r3, #4
 8006dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dd6:	4b16      	ldr	r3, [pc, #88]	; (8006e30 <BUTTON_USER_GPIO_Init+0x6c>)
 8006dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	60bb      	str	r3, [r7, #8]
 8006de0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006de2:	f107 030c 	add.w	r3, r7, #12
 8006de6:	2200      	movs	r2, #0
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	605a      	str	r2, [r3, #4]
 8006dec:	609a      	str	r2, [r3, #8]
 8006dee:	60da      	str	r2, [r3, #12]
 8006df0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006df2:	4b0f      	ldr	r3, [pc, #60]	; (8006e30 <BUTTON_USER_GPIO_Init+0x6c>)
 8006df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df6:	4a0e      	ldr	r2, [pc, #56]	; (8006e30 <BUTTON_USER_GPIO_Init+0x6c>)
 8006df8:	f043 0304 	orr.w	r3, r3, #4
 8006dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dfe:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <BUTTON_USER_GPIO_Init+0x6c>)
 8006e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	607b      	str	r3, [r7, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8006e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006e10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8006e1a:	f107 030c 	add.w	r3, r7, #12
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4804      	ldr	r0, [pc, #16]	; (8006e34 <BUTTON_USER_GPIO_Init+0x70>)
 8006e22:	f000 fdd9 	bl	80079d8 <HAL_GPIO_Init>

}
 8006e26:	bf00      	nop
 8006e28:	3720      	adds	r7, #32
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	40021000 	.word	0x40021000
 8006e34:	48000800 	.word	0x48000800

08006e38 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8006e46:	79fb      	ldrb	r3, [r7, #7]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d903      	bls.n	8006e54 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006e4c:	f06f 0301 	mvn.w	r3, #1
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	e025      	b.n	8006ea0 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8006e54:	79fb      	ldrb	r3, [r7, #7]
 8006e56:	79fa      	ldrb	r2, [r7, #7]
 8006e58:	4914      	ldr	r1, [pc, #80]	; (8006eac <BSP_COM_Init+0x74>)
 8006e5a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006e5e:	4814      	ldr	r0, [pc, #80]	; (8006eb0 <BSP_COM_Init+0x78>)
 8006e60:	4613      	mov	r3, r2
 8006e62:	015b      	lsls	r3, r3, #5
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4403      	add	r3, r0
 8006e6a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8006e6c:	79fa      	ldrb	r2, [r7, #7]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	015b      	lsls	r3, r3, #5
 8006e72:	4413      	add	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4a0e      	ldr	r2, [pc, #56]	; (8006eb0 <BSP_COM_Init+0x78>)
 8006e78:	4413      	add	r3, r2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 f84e 	bl	8006f1c <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8006e80:	79fa      	ldrb	r2, [r7, #7]
 8006e82:	4613      	mov	r3, r2
 8006e84:	015b      	lsls	r3, r3, #5
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <BSP_COM_Init+0x78>)
 8006e8c:	4413      	add	r3, r2
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 f810 	bl	8006eb4 <MX_USART2_UART_Init>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006e9a:	f06f 0303 	mvn.w	r3, #3
 8006e9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	20000170 	.word	0x20000170
 8006eb0:	2000171c 	.word	0x2000171c

08006eb4 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a15      	ldr	r2, [pc, #84]	; (8006f18 <MX_USART2_UART_Init+0x64>)
 8006ec4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8006ecc:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	220c      	movs	r2, #12
 8006ee4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f004 f998 	bl	800b234 <HAL_UART_Init>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	40004400 	.word	0x40004400

08006f1c <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08a      	sub	sp, #40	; 0x28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006f24:	4b30      	ldr	r3, [pc, #192]	; (8006fe8 <USART2_MspInit+0xcc>)
 8006f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f28:	4a2f      	ldr	r2, [pc, #188]	; (8006fe8 <USART2_MspInit+0xcc>)
 8006f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8006f30:	4b2d      	ldr	r3, [pc, #180]	; (8006fe8 <USART2_MspInit+0xcc>)
 8006f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f38:	613b      	str	r3, [r7, #16]
 8006f3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f3c:	4b2a      	ldr	r3, [pc, #168]	; (8006fe8 <USART2_MspInit+0xcc>)
 8006f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f40:	4a29      	ldr	r2, [pc, #164]	; (8006fe8 <USART2_MspInit+0xcc>)
 8006f42:	f043 0301 	orr.w	r3, r3, #1
 8006f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f48:	4b27      	ldr	r3, [pc, #156]	; (8006fe8 <USART2_MspInit+0xcc>)
 8006f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8006f54:	2304      	movs	r3, #4
 8006f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f58:	2302      	movs	r3, #2
 8006f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f60:	2303      	movs	r3, #3
 8006f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8006f64:	2307      	movs	r3, #7
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8006f68:	f107 0314 	add.w	r3, r7, #20
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f72:	f000 fd31 	bl	80079d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8006f76:	2308      	movs	r3, #8
 8006f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f82:	2303      	movs	r3, #3
 8006f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8006f86:	2307      	movs	r3, #7
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8006f8a:	f107 0314 	add.w	r3, r7, #20
 8006f8e:	4619      	mov	r1, r3
 8006f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f94:	f000 fd20 	bl	80079d8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 8006f98:	4b14      	ldr	r3, [pc, #80]	; (8006fec <USART2_MspInit+0xd0>)
 8006f9a:	4a15      	ldr	r2, [pc, #84]	; (8006ff0 <USART2_MspInit+0xd4>)
 8006f9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8006f9e:	4b13      	ldr	r3, [pc, #76]	; (8006fec <USART2_MspInit+0xd0>)
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006fa4:	4b11      	ldr	r3, [pc, #68]	; (8006fec <USART2_MspInit+0xd0>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006faa:	4b10      	ldr	r3, [pc, #64]	; (8006fec <USART2_MspInit+0xd0>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006fb0:	4b0e      	ldr	r3, [pc, #56]	; (8006fec <USART2_MspInit+0xd0>)
 8006fb2:	2280      	movs	r2, #128	; 0x80
 8006fb4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006fb6:	4b0d      	ldr	r3, [pc, #52]	; (8006fec <USART2_MspInit+0xd0>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006fbc:	4b0b      	ldr	r3, [pc, #44]	; (8006fec <USART2_MspInit+0xd0>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8006fc2:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <USART2_MspInit+0xd0>)
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006fc8:	4b08      	ldr	r3, [pc, #32]	; (8006fec <USART2_MspInit+0xd0>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 8006fce:	4807      	ldr	r0, [pc, #28]	; (8006fec <USART2_MspInit+0xd0>)
 8006fd0:	f000 faac 	bl	800752c <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a05      	ldr	r2, [pc, #20]	; (8006fec <USART2_MspInit+0xd0>)
 8006fd8:	671a      	str	r2, [r3, #112]	; 0x70
 8006fda:	4a04      	ldr	r2, [pc, #16]	; (8006fec <USART2_MspInit+0xd0>)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8006fe0:	bf00      	nop
 8006fe2:	3728      	adds	r7, #40	; 0x28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	40021000 	.word	0x40021000
 8006fec:	200016d4 	.word	0x200016d4
 8006ff0:	4002006c 	.word	0x4002006c

08006ff4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ffe:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <HAL_Init+0x3c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a0b      	ldr	r2, [pc, #44]	; (8007030 <HAL_Init+0x3c>)
 8007004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007008:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800700a:	2003      	movs	r0, #3
 800700c:	f000 f962 	bl	80072d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007010:	2000      	movs	r0, #0
 8007012:	f000 f80f 	bl	8007034 <HAL_InitTick>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	71fb      	strb	r3, [r7, #7]
 8007020:	e001      	b.n	8007026 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007022:	f7fa f8f5 	bl	8001210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007026:	79fb      	ldrb	r3, [r7, #7]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40022000 	.word	0x40022000

08007034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8007040:	4b17      	ldr	r3, [pc, #92]	; (80070a0 <HAL_InitTick+0x6c>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d023      	beq.n	8007090 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007048:	4b16      	ldr	r3, [pc, #88]	; (80070a4 <HAL_InitTick+0x70>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	4b14      	ldr	r3, [pc, #80]	; (80070a0 <HAL_InitTick+0x6c>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	4619      	mov	r1, r3
 8007052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007056:	fbb3 f3f1 	udiv	r3, r3, r1
 800705a:	fbb2 f3f3 	udiv	r3, r2, r3
 800705e:	4618      	mov	r0, r3
 8007060:	f000 f96d 	bl	800733e <HAL_SYSTICK_Config>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10f      	bne.n	800708a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b0f      	cmp	r3, #15
 800706e:	d809      	bhi.n	8007084 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007070:	2200      	movs	r2, #0
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	f04f 30ff 	mov.w	r0, #4294967295
 8007078:	f000 f937 	bl	80072ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800707c:	4a0a      	ldr	r2, [pc, #40]	; (80070a8 <HAL_InitTick+0x74>)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	e007      	b.n	8007094 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	73fb      	strb	r3, [r7, #15]
 8007088:	e004      	b.n	8007094 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	73fb      	strb	r3, [r7, #15]
 800708e:	e001      	b.n	8007094 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007094:	7bfb      	ldrb	r3, [r7, #15]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	20000178 	.word	0x20000178
 80070a4:	20000004 	.word	0x20000004
 80070a8:	20000174 	.word	0x20000174

080070ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80070b0:	4b06      	ldr	r3, [pc, #24]	; (80070cc <HAL_IncTick+0x20>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	461a      	mov	r2, r3
 80070b6:	4b06      	ldr	r3, [pc, #24]	; (80070d0 <HAL_IncTick+0x24>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4413      	add	r3, r2
 80070bc:	4a04      	ldr	r2, [pc, #16]	; (80070d0 <HAL_IncTick+0x24>)
 80070be:	6013      	str	r3, [r2, #0]
}
 80070c0:	bf00      	nop
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	20000178 	.word	0x20000178
 80070d0:	200017a0 	.word	0x200017a0

080070d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80070d4:	b480      	push	{r7}
 80070d6:	af00      	add	r7, sp, #0
  return uwTick;
 80070d8:	4b03      	ldr	r3, [pc, #12]	; (80070e8 <HAL_GetTick+0x14>)
 80070da:	681b      	ldr	r3, [r3, #0]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	200017a0 	.word	0x200017a0

080070ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80070f4:	f7ff ffee 	bl	80070d4 <HAL_GetTick>
 80070f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007104:	d005      	beq.n	8007112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007106:	4b0a      	ldr	r3, [pc, #40]	; (8007130 <HAL_Delay+0x44>)
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	461a      	mov	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007112:	bf00      	nop
 8007114:	f7ff ffde 	bl	80070d4 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	429a      	cmp	r2, r3
 8007122:	d8f7      	bhi.n	8007114 <HAL_Delay+0x28>
  {
  }
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	20000178 	.word	0x20000178

08007134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007144:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <__NVIC_SetPriorityGrouping+0x44>)
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007150:	4013      	ands	r3, r2
 8007152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800715c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007166:	4a04      	ldr	r2, [pc, #16]	; (8007178 <__NVIC_SetPriorityGrouping+0x44>)
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	60d3      	str	r3, [r2, #12]
}
 800716c:	bf00      	nop
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	e000ed00 	.word	0xe000ed00

0800717c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007180:	4b04      	ldr	r3, [pc, #16]	; (8007194 <__NVIC_GetPriorityGrouping+0x18>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	0a1b      	lsrs	r3, r3, #8
 8007186:	f003 0307 	and.w	r3, r3, #7
}
 800718a:	4618      	mov	r0, r3
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	e000ed00 	.word	0xe000ed00

08007198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	db0b      	blt.n	80071c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071aa:	79fb      	ldrb	r3, [r7, #7]
 80071ac:	f003 021f 	and.w	r2, r3, #31
 80071b0:	4907      	ldr	r1, [pc, #28]	; (80071d0 <__NVIC_EnableIRQ+0x38>)
 80071b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071b6:	095b      	lsrs	r3, r3, #5
 80071b8:	2001      	movs	r0, #1
 80071ba:	fa00 f202 	lsl.w	r2, r0, r2
 80071be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	e000e100 	.word	0xe000e100

080071d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	4603      	mov	r3, r0
 80071dc:	6039      	str	r1, [r7, #0]
 80071de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	db0a      	blt.n	80071fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	490c      	ldr	r1, [pc, #48]	; (8007220 <__NVIC_SetPriority+0x4c>)
 80071ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071f2:	0112      	lsls	r2, r2, #4
 80071f4:	b2d2      	uxtb	r2, r2
 80071f6:	440b      	add	r3, r1
 80071f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80071fc:	e00a      	b.n	8007214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	b2da      	uxtb	r2, r3
 8007202:	4908      	ldr	r1, [pc, #32]	; (8007224 <__NVIC_SetPriority+0x50>)
 8007204:	79fb      	ldrb	r3, [r7, #7]
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	3b04      	subs	r3, #4
 800720c:	0112      	lsls	r2, r2, #4
 800720e:	b2d2      	uxtb	r2, r2
 8007210:	440b      	add	r3, r1
 8007212:	761a      	strb	r2, [r3, #24]
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	e000e100 	.word	0xe000e100
 8007224:	e000ed00 	.word	0xe000ed00

08007228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007228:	b480      	push	{r7}
 800722a:	b089      	sub	sp, #36	; 0x24
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	f1c3 0307 	rsb	r3, r3, #7
 8007242:	2b04      	cmp	r3, #4
 8007244:	bf28      	it	cs
 8007246:	2304      	movcs	r3, #4
 8007248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	3304      	adds	r3, #4
 800724e:	2b06      	cmp	r3, #6
 8007250:	d902      	bls.n	8007258 <NVIC_EncodePriority+0x30>
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	3b03      	subs	r3, #3
 8007256:	e000      	b.n	800725a <NVIC_EncodePriority+0x32>
 8007258:	2300      	movs	r3, #0
 800725a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800725c:	f04f 32ff 	mov.w	r2, #4294967295
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	fa02 f303 	lsl.w	r3, r2, r3
 8007266:	43da      	mvns	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	401a      	ands	r2, r3
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007270:	f04f 31ff 	mov.w	r1, #4294967295
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	fa01 f303 	lsl.w	r3, r1, r3
 800727a:	43d9      	mvns	r1, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007280:	4313      	orrs	r3, r2
         );
}
 8007282:	4618      	mov	r0, r3
 8007284:	3724      	adds	r7, #36	; 0x24
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
	...

08007290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3b01      	subs	r3, #1
 800729c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072a0:	d301      	bcc.n	80072a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072a2:	2301      	movs	r3, #1
 80072a4:	e00f      	b.n	80072c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072a6:	4a0a      	ldr	r2, [pc, #40]	; (80072d0 <SysTick_Config+0x40>)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3b01      	subs	r3, #1
 80072ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072ae:	210f      	movs	r1, #15
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295
 80072b4:	f7ff ff8e 	bl	80071d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072b8:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <SysTick_Config+0x40>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072be:	4b04      	ldr	r3, [pc, #16]	; (80072d0 <SysTick_Config+0x40>)
 80072c0:	2207      	movs	r2, #7
 80072c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	e000e010 	.word	0xe000e010

080072d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff ff29 	bl	8007134 <__NVIC_SetPriorityGrouping>
}
 80072e2:	bf00      	nop
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b086      	sub	sp, #24
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	4603      	mov	r3, r0
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	607a      	str	r2, [r7, #4]
 80072f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80072fc:	f7ff ff3e 	bl	800717c <__NVIC_GetPriorityGrouping>
 8007300:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	68b9      	ldr	r1, [r7, #8]
 8007306:	6978      	ldr	r0, [r7, #20]
 8007308:	f7ff ff8e 	bl	8007228 <NVIC_EncodePriority>
 800730c:	4602      	mov	r2, r0
 800730e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007312:	4611      	mov	r1, r2
 8007314:	4618      	mov	r0, r3
 8007316:	f7ff ff5d 	bl	80071d4 <__NVIC_SetPriority>
}
 800731a:	bf00      	nop
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	4603      	mov	r3, r0
 800732a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800732c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff ff31 	bl	8007198 <__NVIC_EnableIRQ>
}
 8007336:	bf00      	nop
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff ffa2 	bl	8007290 <SysTick_Config>
 800734c:	4603      	mov	r3, r0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e054      	b.n	8007414 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	7f5b      	ldrb	r3, [r3, #29]
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d105      	bne.n	8007380 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7f9 ff6c 	bl	8001258 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2202      	movs	r2, #2
 8007384:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	791b      	ldrb	r3, [r3, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10c      	bne.n	80073a8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a22      	ldr	r2, [pc, #136]	; (800741c <HAL_CRC_Init+0xc4>)
 8007394:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0218 	bic.w	r2, r2, #24
 80073a4:	609a      	str	r2, [r3, #8]
 80073a6:	e00c      	b.n	80073c2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6899      	ldr	r1, [r3, #8]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	461a      	mov	r2, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f834 	bl	8007420 <HAL_CRCEx_Polynomial_Set>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e028      	b.n	8007414 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	795b      	ldrb	r3, [r3, #5]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d105      	bne.n	80073d6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f04f 32ff 	mov.w	r2, #4294967295
 80073d2:	611a      	str	r2, [r3, #16]
 80073d4:	e004      	b.n	80073e0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	6912      	ldr	r2, [r2, #16]
 80073de:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	695a      	ldr	r2, [r3, #20]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	699a      	ldr	r2, [r3, #24]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	04c11db7 	.word	0x04c11db7

08007420 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007430:	231f      	movs	r3, #31
 8007432:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007434:	bf00      	nop
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1e5a      	subs	r2, r3, #1
 800743a:	613a      	str	r2, [r7, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d009      	beq.n	8007454 <HAL_CRCEx_Polynomial_Set+0x34>
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f003 031f 	and.w	r3, r3, #31
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	fa22 f303 	lsr.w	r3, r2, r3
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0f0      	beq.n	8007436 <HAL_CRCEx_Polynomial_Set+0x16>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b18      	cmp	r3, #24
 8007458:	d846      	bhi.n	80074e8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <HAL_CRCEx_Polynomial_Set+0x40>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	080074ef 	.word	0x080074ef
 8007464:	080074e9 	.word	0x080074e9
 8007468:	080074e9 	.word	0x080074e9
 800746c:	080074e9 	.word	0x080074e9
 8007470:	080074e9 	.word	0x080074e9
 8007474:	080074e9 	.word	0x080074e9
 8007478:	080074e9 	.word	0x080074e9
 800747c:	080074e9 	.word	0x080074e9
 8007480:	080074dd 	.word	0x080074dd
 8007484:	080074e9 	.word	0x080074e9
 8007488:	080074e9 	.word	0x080074e9
 800748c:	080074e9 	.word	0x080074e9
 8007490:	080074e9 	.word	0x080074e9
 8007494:	080074e9 	.word	0x080074e9
 8007498:	080074e9 	.word	0x080074e9
 800749c:	080074e9 	.word	0x080074e9
 80074a0:	080074d1 	.word	0x080074d1
 80074a4:	080074e9 	.word	0x080074e9
 80074a8:	080074e9 	.word	0x080074e9
 80074ac:	080074e9 	.word	0x080074e9
 80074b0:	080074e9 	.word	0x080074e9
 80074b4:	080074e9 	.word	0x080074e9
 80074b8:	080074e9 	.word	0x080074e9
 80074bc:	080074e9 	.word	0x080074e9
 80074c0:	080074c5 	.word	0x080074c5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	2b06      	cmp	r3, #6
 80074c8:	d913      	bls.n	80074f2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80074ce:	e010      	b.n	80074f2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	2b07      	cmp	r3, #7
 80074d4:	d90f      	bls.n	80074f6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80074da:	e00c      	b.n	80074f6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	2b0f      	cmp	r3, #15
 80074e0:	d90b      	bls.n	80074fa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80074e6:	e008      	b.n	80074fa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	75fb      	strb	r3, [r7, #23]
      break;
 80074ec:	e006      	b.n	80074fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80074ee:	bf00      	nop
 80074f0:	e004      	b.n	80074fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80074f2:	bf00      	nop
 80074f4:	e002      	b.n	80074fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80074f6:	bf00      	nop
 80074f8:	e000      	b.n	80074fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80074fa:	bf00      	nop
  }
  if (status == HAL_OK)
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10d      	bne.n	800751e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f023 0118 	bic.w	r1, r3, #24
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	430a      	orrs	r2, r1
 800751c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800751e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007520:	4618      	mov	r0, r3
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e098      	b.n	8007670 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	4b4d      	ldr	r3, [pc, #308]	; (800767c <HAL_DMA_Init+0x150>)
 8007546:	429a      	cmp	r2, r3
 8007548:	d80f      	bhi.n	800756a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	4b4b      	ldr	r3, [pc, #300]	; (8007680 <HAL_DMA_Init+0x154>)
 8007552:	4413      	add	r3, r2
 8007554:	4a4b      	ldr	r2, [pc, #300]	; (8007684 <HAL_DMA_Init+0x158>)
 8007556:	fba2 2303 	umull	r2, r3, r2, r3
 800755a:	091b      	lsrs	r3, r3, #4
 800755c:	009a      	lsls	r2, r3, #2
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a48      	ldr	r2, [pc, #288]	; (8007688 <HAL_DMA_Init+0x15c>)
 8007566:	641a      	str	r2, [r3, #64]	; 0x40
 8007568:	e00e      	b.n	8007588 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	4b46      	ldr	r3, [pc, #280]	; (800768c <HAL_DMA_Init+0x160>)
 8007572:	4413      	add	r3, r2
 8007574:	4a43      	ldr	r2, [pc, #268]	; (8007684 <HAL_DMA_Init+0x158>)
 8007576:	fba2 2303 	umull	r2, r3, r2, r3
 800757a:	091b      	lsrs	r3, r3, #4
 800757c:	009a      	lsls	r2, r3, #2
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a42      	ldr	r2, [pc, #264]	; (8007690 <HAL_DMA_Init+0x164>)
 8007586:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800759e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80075ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075e2:	d039      	beq.n	8007658 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e8:	4a27      	ldr	r2, [pc, #156]	; (8007688 <HAL_DMA_Init+0x15c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d11a      	bne.n	8007624 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80075ee:	4b29      	ldr	r3, [pc, #164]	; (8007694 <HAL_DMA_Init+0x168>)
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f6:	f003 031c 	and.w	r3, r3, #28
 80075fa:	210f      	movs	r1, #15
 80075fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007600:	43db      	mvns	r3, r3
 8007602:	4924      	ldr	r1, [pc, #144]	; (8007694 <HAL_DMA_Init+0x168>)
 8007604:	4013      	ands	r3, r2
 8007606:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007608:	4b22      	ldr	r3, [pc, #136]	; (8007694 <HAL_DMA_Init+0x168>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6859      	ldr	r1, [r3, #4]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007614:	f003 031c 	and.w	r3, r3, #28
 8007618:	fa01 f303 	lsl.w	r3, r1, r3
 800761c:	491d      	ldr	r1, [pc, #116]	; (8007694 <HAL_DMA_Init+0x168>)
 800761e:	4313      	orrs	r3, r2
 8007620:	600b      	str	r3, [r1, #0]
 8007622:	e019      	b.n	8007658 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007624:	4b1c      	ldr	r3, [pc, #112]	; (8007698 <HAL_DMA_Init+0x16c>)
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800762c:	f003 031c 	and.w	r3, r3, #28
 8007630:	210f      	movs	r1, #15
 8007632:	fa01 f303 	lsl.w	r3, r1, r3
 8007636:	43db      	mvns	r3, r3
 8007638:	4917      	ldr	r1, [pc, #92]	; (8007698 <HAL_DMA_Init+0x16c>)
 800763a:	4013      	ands	r3, r2
 800763c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800763e:	4b16      	ldr	r3, [pc, #88]	; (8007698 <HAL_DMA_Init+0x16c>)
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6859      	ldr	r1, [r3, #4]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764a:	f003 031c 	and.w	r3, r3, #28
 800764e:	fa01 f303 	lsl.w	r3, r1, r3
 8007652:	4911      	ldr	r1, [pc, #68]	; (8007698 <HAL_DMA_Init+0x16c>)
 8007654:	4313      	orrs	r3, r2
 8007656:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	40020407 	.word	0x40020407
 8007680:	bffdfff8 	.word	0xbffdfff8
 8007684:	cccccccd 	.word	0xcccccccd
 8007688:	40020000 	.word	0x40020000
 800768c:	bffdfbf8 	.word	0xbffdfbf8
 8007690:	40020400 	.word	0x40020400
 8007694:	400200a8 	.word	0x400200a8
 8007698:	400204a8 	.word	0x400204a8

0800769c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d101      	bne.n	80076bc <HAL_DMA_Start_IT+0x20>
 80076b8:	2302      	movs	r3, #2
 80076ba:	e04b      	b.n	8007754 <HAL_DMA_Start_IT+0xb8>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d13a      	bne.n	8007746 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0201 	bic.w	r2, r2, #1
 80076ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 f8e0 	bl	80078ba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d008      	beq.n	8007714 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f042 020e 	orr.w	r2, r2, #14
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	e00f      	b.n	8007734 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0204 	bic.w	r2, r2, #4
 8007722:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 020a 	orr.w	r2, r2, #10
 8007732:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0201 	orr.w	r2, r2, #1
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	e005      	b.n	8007752 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800774e:	2302      	movs	r3, #2
 8007750:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007752:	7dfb      	ldrb	r3, [r7, #23]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007778:	f003 031c 	and.w	r3, r3, #28
 800777c:	2204      	movs	r2, #4
 800777e:	409a      	lsls	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4013      	ands	r3, r2
 8007784:	2b00      	cmp	r3, #0
 8007786:	d026      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x7a>
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f003 0304 	and.w	r3, r3, #4
 800778e:	2b00      	cmp	r3, #0
 8007790:	d021      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0320 	and.w	r3, r3, #32
 800779c:	2b00      	cmp	r3, #0
 800779e:	d107      	bne.n	80077b0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 0204 	bic.w	r2, r2, #4
 80077ae:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b4:	f003 021c 	and.w	r2, r3, #28
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077bc:	2104      	movs	r1, #4
 80077be:	fa01 f202 	lsl.w	r2, r1, r2
 80077c2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d071      	beq.n	80078b0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80077d4:	e06c      	b.n	80078b0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077da:	f003 031c 	and.w	r3, r3, #28
 80077de:	2202      	movs	r2, #2
 80077e0:	409a      	lsls	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	4013      	ands	r3, r2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d02e      	beq.n	8007848 <HAL_DMA_IRQHandler+0xec>
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	f003 0302 	and.w	r3, r3, #2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d029      	beq.n	8007848 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0320 	and.w	r3, r3, #32
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10b      	bne.n	800781a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 020a 	bic.w	r2, r2, #10
 8007810:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781e:	f003 021c 	and.w	r2, r3, #28
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007826:	2102      	movs	r1, #2
 8007828:	fa01 f202 	lsl.w	r2, r1, r2
 800782c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d038      	beq.n	80078b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007846:	e033      	b.n	80078b0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784c:	f003 031c 	and.w	r3, r3, #28
 8007850:	2208      	movs	r2, #8
 8007852:	409a      	lsls	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4013      	ands	r3, r2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d02a      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x156>
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f003 0308 	and.w	r3, r3, #8
 8007862:	2b00      	cmp	r3, #0
 8007864:	d025      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 020e 	bic.w	r2, r2, #14
 8007874:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800787a:	f003 021c 	and.w	r2, r3, #28
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007882:	2101      	movs	r1, #1
 8007884:	fa01 f202 	lsl.w	r2, r1, r2
 8007888:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d004      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80078b0:	bf00      	nop
 80078b2:	bf00      	nop
}
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b085      	sub	sp, #20
 80078be:	af00      	add	r7, sp, #0
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	607a      	str	r2, [r7, #4]
 80078c6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078cc:	f003 021c 	and.w	r2, r3, #28
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d4:	2101      	movs	r1, #1
 80078d6:	fa01 f202 	lsl.w	r2, r1, r2
 80078da:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	2b10      	cmp	r3, #16
 80078ea:	d108      	bne.n	80078fe <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80078fc:	e007      	b.n	800790e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	60da      	str	r2, [r3, #12]
}
 800790e:	bf00      	nop
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800791a:	b480      	push	{r7}
 800791c:	b087      	sub	sp, #28
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	460b      	mov	r3, r1
 8007924:	607a      	str	r2, [r7, #4]
 8007926:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800792c:	7afb      	ldrb	r3, [r7, #11]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d103      	bne.n	800793a <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	605a      	str	r2, [r3, #4]
      break;
 8007938:	e002      	b.n	8007940 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	75fb      	strb	r3, [r7, #23]
      break;
 800793e:	bf00      	nop
  }

  return status;
 8007940:	7dfb      	ldrb	r3, [r7, #23]
}
 8007942:	4618      	mov	r0, r3
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e003      	b.n	800796a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007968:	2300      	movs	r3, #0
  }
}
 800796a:	4618      	mov	r0, r3
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
	...

08007978 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	0c1b      	lsrs	r3, r3, #16
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 031f 	and.w	r3, r3, #31
 8007994:	2201      	movs	r2, #1
 8007996:	fa02 f303 	lsl.w	r3, r2, r3
 800799a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	4b0c      	ldr	r3, [pc, #48]	; (80079d4 <HAL_EXTI_IRQHandler+0x5c>)
 80079a2:	4413      	add	r3, r2
 80079a4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	4013      	ands	r3, r2
 80079ae:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d009      	beq.n	80079ca <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d002      	beq.n	80079ca <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	4798      	blx	r3
    }
  }
}
 80079ca:	bf00      	nop
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	40010414 	.word	0x40010414

080079d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80079e2:	2300      	movs	r3, #0
 80079e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80079e6:	e17f      	b.n	8007ce8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	2101      	movs	r1, #1
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	fa01 f303 	lsl.w	r3, r1, r3
 80079f4:	4013      	ands	r3, r2
 80079f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 8171 	beq.w	8007ce2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f003 0303 	and.w	r3, r3, #3
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d005      	beq.n	8007a18 <HAL_GPIO_Init+0x40>
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f003 0303 	and.w	r3, r3, #3
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d130      	bne.n	8007a7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	2203      	movs	r2, #3
 8007a24:	fa02 f303 	lsl.w	r3, r2, r3
 8007a28:	43db      	mvns	r3, r3
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a4e:	2201      	movs	r2, #1
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	43db      	mvns	r3, r3
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	091b      	lsrs	r3, r3, #4
 8007a64:	f003 0201 	and.w	r2, r3, #1
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d118      	bne.n	8007ab8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	fa02 f303 	lsl.w	r3, r2, r3
 8007a94:	43db      	mvns	r3, r3
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	4013      	ands	r3, r2
 8007a9a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	08db      	lsrs	r3, r3, #3
 8007aa2:	f003 0201 	and.w	r2, r3, #1
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f003 0303 	and.w	r3, r3, #3
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d017      	beq.n	8007af4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	2203      	movs	r2, #3
 8007ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad4:	43db      	mvns	r3, r3
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f003 0303 	and.w	r3, r3, #3
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d123      	bne.n	8007b48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	08da      	lsrs	r2, r3, #3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3208      	adds	r2, #8
 8007b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	220f      	movs	r2, #15
 8007b18:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1c:	43db      	mvns	r3, r3
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4013      	ands	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	691a      	ldr	r2, [r3, #16]
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f003 0307 	and.w	r3, r3, #7
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	fa02 f303 	lsl.w	r3, r2, r3
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	08da      	lsrs	r2, r3, #3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3208      	adds	r2, #8
 8007b42:	6939      	ldr	r1, [r7, #16]
 8007b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	005b      	lsls	r3, r3, #1
 8007b52:	2203      	movs	r2, #3
 8007b54:	fa02 f303 	lsl.w	r3, r2, r3
 8007b58:	43db      	mvns	r3, r3
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f003 0203 	and.w	r2, r3, #3
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	005b      	lsls	r3, r3, #1
 8007b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 80ac 	beq.w	8007ce2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b8a:	4b5f      	ldr	r3, [pc, #380]	; (8007d08 <HAL_GPIO_Init+0x330>)
 8007b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b8e:	4a5e      	ldr	r2, [pc, #376]	; (8007d08 <HAL_GPIO_Init+0x330>)
 8007b90:	f043 0301 	orr.w	r3, r3, #1
 8007b94:	6613      	str	r3, [r2, #96]	; 0x60
 8007b96:	4b5c      	ldr	r3, [pc, #368]	; (8007d08 <HAL_GPIO_Init+0x330>)
 8007b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	60bb      	str	r3, [r7, #8]
 8007ba0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007ba2:	4a5a      	ldr	r2, [pc, #360]	; (8007d0c <HAL_GPIO_Init+0x334>)
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	089b      	lsrs	r3, r3, #2
 8007ba8:	3302      	adds	r3, #2
 8007baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	220f      	movs	r2, #15
 8007bba:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbe:	43db      	mvns	r3, r3
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007bcc:	d025      	beq.n	8007c1a <HAL_GPIO_Init+0x242>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a4f      	ldr	r2, [pc, #316]	; (8007d10 <HAL_GPIO_Init+0x338>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d01f      	beq.n	8007c16 <HAL_GPIO_Init+0x23e>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a4e      	ldr	r2, [pc, #312]	; (8007d14 <HAL_GPIO_Init+0x33c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d019      	beq.n	8007c12 <HAL_GPIO_Init+0x23a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a4d      	ldr	r2, [pc, #308]	; (8007d18 <HAL_GPIO_Init+0x340>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d013      	beq.n	8007c0e <HAL_GPIO_Init+0x236>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a4c      	ldr	r2, [pc, #304]	; (8007d1c <HAL_GPIO_Init+0x344>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00d      	beq.n	8007c0a <HAL_GPIO_Init+0x232>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a4b      	ldr	r2, [pc, #300]	; (8007d20 <HAL_GPIO_Init+0x348>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d007      	beq.n	8007c06 <HAL_GPIO_Init+0x22e>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a4a      	ldr	r2, [pc, #296]	; (8007d24 <HAL_GPIO_Init+0x34c>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d101      	bne.n	8007c02 <HAL_GPIO_Init+0x22a>
 8007bfe:	2306      	movs	r3, #6
 8007c00:	e00c      	b.n	8007c1c <HAL_GPIO_Init+0x244>
 8007c02:	2307      	movs	r3, #7
 8007c04:	e00a      	b.n	8007c1c <HAL_GPIO_Init+0x244>
 8007c06:	2305      	movs	r3, #5
 8007c08:	e008      	b.n	8007c1c <HAL_GPIO_Init+0x244>
 8007c0a:	2304      	movs	r3, #4
 8007c0c:	e006      	b.n	8007c1c <HAL_GPIO_Init+0x244>
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e004      	b.n	8007c1c <HAL_GPIO_Init+0x244>
 8007c12:	2302      	movs	r3, #2
 8007c14:	e002      	b.n	8007c1c <HAL_GPIO_Init+0x244>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <HAL_GPIO_Init+0x244>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	f002 0203 	and.w	r2, r2, #3
 8007c22:	0092      	lsls	r2, r2, #2
 8007c24:	4093      	lsls	r3, r2
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007c2c:	4937      	ldr	r1, [pc, #220]	; (8007d0c <HAL_GPIO_Init+0x334>)
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	089b      	lsrs	r3, r3, #2
 8007c32:	3302      	adds	r3, #2
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c3a:	4b3b      	ldr	r3, [pc, #236]	; (8007d28 <HAL_GPIO_Init+0x350>)
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	43db      	mvns	r3, r3
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	4013      	ands	r3, r2
 8007c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007c5e:	4a32      	ldr	r2, [pc, #200]	; (8007d28 <HAL_GPIO_Init+0x350>)
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007c64:	4b30      	ldr	r3, [pc, #192]	; (8007d28 <HAL_GPIO_Init+0x350>)
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	43db      	mvns	r3, r3
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	4013      	ands	r3, r2
 8007c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d003      	beq.n	8007c88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007c88:	4a27      	ldr	r2, [pc, #156]	; (8007d28 <HAL_GPIO_Init+0x350>)
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007c8e:	4b26      	ldr	r3, [pc, #152]	; (8007d28 <HAL_GPIO_Init+0x350>)
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	43db      	mvns	r3, r3
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007cb2:	4a1d      	ldr	r2, [pc, #116]	; (8007d28 <HAL_GPIO_Init+0x350>)
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007cb8:	4b1b      	ldr	r3, [pc, #108]	; (8007d28 <HAL_GPIO_Init+0x350>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	43db      	mvns	r3, r3
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007cdc:	4a12      	ldr	r2, [pc, #72]	; (8007d28 <HAL_GPIO_Init+0x350>)
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f47f ae78 	bne.w	80079e8 <HAL_GPIO_Init+0x10>
  }
}
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	40021000 	.word	0x40021000
 8007d0c:	40010000 	.word	0x40010000
 8007d10:	48000400 	.word	0x48000400
 8007d14:	48000800 	.word	0x48000800
 8007d18:	48000c00 	.word	0x48000c00
 8007d1c:	48001000 	.word	0x48001000
 8007d20:	48001400 	.word	0x48001400
 8007d24:	48001800 	.word	0x48001800
 8007d28:	40010400 	.word	0x40010400

08007d2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007d36:	2300      	movs	r3, #0
 8007d38:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007d3a:	e0cd      	b.n	8007ed8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	fa02 f303 	lsl.w	r3, r2, r3
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	4013      	ands	r3, r2
 8007d48:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 80c0 	beq.w	8007ed2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007d52:	4a68      	ldr	r2, [pc, #416]	; (8007ef4 <HAL_GPIO_DeInit+0x1c8>)
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	089b      	lsrs	r3, r3, #2
 8007d58:	3302      	adds	r3, #2
 8007d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d5e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	220f      	movs	r2, #15
 8007d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	4013      	ands	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007d7a:	d025      	beq.n	8007dc8 <HAL_GPIO_DeInit+0x9c>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a5e      	ldr	r2, [pc, #376]	; (8007ef8 <HAL_GPIO_DeInit+0x1cc>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d01f      	beq.n	8007dc4 <HAL_GPIO_DeInit+0x98>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a5d      	ldr	r2, [pc, #372]	; (8007efc <HAL_GPIO_DeInit+0x1d0>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d019      	beq.n	8007dc0 <HAL_GPIO_DeInit+0x94>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a5c      	ldr	r2, [pc, #368]	; (8007f00 <HAL_GPIO_DeInit+0x1d4>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d013      	beq.n	8007dbc <HAL_GPIO_DeInit+0x90>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a5b      	ldr	r2, [pc, #364]	; (8007f04 <HAL_GPIO_DeInit+0x1d8>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d00d      	beq.n	8007db8 <HAL_GPIO_DeInit+0x8c>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a5a      	ldr	r2, [pc, #360]	; (8007f08 <HAL_GPIO_DeInit+0x1dc>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d007      	beq.n	8007db4 <HAL_GPIO_DeInit+0x88>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a59      	ldr	r2, [pc, #356]	; (8007f0c <HAL_GPIO_DeInit+0x1e0>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d101      	bne.n	8007db0 <HAL_GPIO_DeInit+0x84>
 8007dac:	2306      	movs	r3, #6
 8007dae:	e00c      	b.n	8007dca <HAL_GPIO_DeInit+0x9e>
 8007db0:	2307      	movs	r3, #7
 8007db2:	e00a      	b.n	8007dca <HAL_GPIO_DeInit+0x9e>
 8007db4:	2305      	movs	r3, #5
 8007db6:	e008      	b.n	8007dca <HAL_GPIO_DeInit+0x9e>
 8007db8:	2304      	movs	r3, #4
 8007dba:	e006      	b.n	8007dca <HAL_GPIO_DeInit+0x9e>
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e004      	b.n	8007dca <HAL_GPIO_DeInit+0x9e>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e002      	b.n	8007dca <HAL_GPIO_DeInit+0x9e>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e000      	b.n	8007dca <HAL_GPIO_DeInit+0x9e>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	f002 0203 	and.w	r2, r2, #3
 8007dd0:	0092      	lsls	r2, r2, #2
 8007dd2:	4093      	lsls	r3, r2
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d132      	bne.n	8007e40 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007dda:	4b4d      	ldr	r3, [pc, #308]	; (8007f10 <HAL_GPIO_DeInit+0x1e4>)
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	43db      	mvns	r3, r3
 8007de2:	494b      	ldr	r1, [pc, #300]	; (8007f10 <HAL_GPIO_DeInit+0x1e4>)
 8007de4:	4013      	ands	r3, r2
 8007de6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007de8:	4b49      	ldr	r3, [pc, #292]	; (8007f10 <HAL_GPIO_DeInit+0x1e4>)
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	43db      	mvns	r3, r3
 8007df0:	4947      	ldr	r1, [pc, #284]	; (8007f10 <HAL_GPIO_DeInit+0x1e4>)
 8007df2:	4013      	ands	r3, r2
 8007df4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007df6:	4b46      	ldr	r3, [pc, #280]	; (8007f10 <HAL_GPIO_DeInit+0x1e4>)
 8007df8:	68da      	ldr	r2, [r3, #12]
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	43db      	mvns	r3, r3
 8007dfe:	4944      	ldr	r1, [pc, #272]	; (8007f10 <HAL_GPIO_DeInit+0x1e4>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007e04:	4b42      	ldr	r3, [pc, #264]	; (8007f10 <HAL_GPIO_DeInit+0x1e4>)
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	43db      	mvns	r3, r3
 8007e0c:	4940      	ldr	r1, [pc, #256]	; (8007f10 <HAL_GPIO_DeInit+0x1e4>)
 8007e0e:	4013      	ands	r3, r2
 8007e10:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f003 0303 	and.w	r3, r3, #3
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	220f      	movs	r2, #15
 8007e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e20:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007e22:	4a34      	ldr	r2, [pc, #208]	; (8007ef4 <HAL_GPIO_DeInit+0x1c8>)
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	089b      	lsrs	r3, r3, #2
 8007e28:	3302      	adds	r3, #2
 8007e2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	43da      	mvns	r2, r3
 8007e32:	4830      	ldr	r0, [pc, #192]	; (8007ef4 <HAL_GPIO_DeInit+0x1c8>)
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	089b      	lsrs	r3, r3, #2
 8007e38:	400a      	ands	r2, r1
 8007e3a:	3302      	adds	r3, #2
 8007e3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	005b      	lsls	r3, r3, #1
 8007e48:	2103      	movs	r1, #3
 8007e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	08da      	lsrs	r2, r3, #3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3208      	adds	r2, #8
 8007e5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	220f      	movs	r2, #15
 8007e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6e:	43db      	mvns	r3, r3
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	08d2      	lsrs	r2, r2, #3
 8007e74:	4019      	ands	r1, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3208      	adds	r2, #8
 8007e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689a      	ldr	r2, [r3, #8]
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	2103      	movs	r1, #3
 8007e88:	fa01 f303 	lsl.w	r3, r1, r3
 8007e8c:	43db      	mvns	r3, r3
 8007e8e:	401a      	ands	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	2101      	movs	r1, #1
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007ea0:	43db      	mvns	r3, r3
 8007ea2:	401a      	ands	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68da      	ldr	r2, [r3, #12]
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	2103      	movs	r1, #3
 8007eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb6:	43db      	mvns	r3, r3
 8007eb8:	401a      	ands	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eca:	43db      	mvns	r3, r3
 8007ecc:	401a      	ands	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f47f af2b 	bne.w	8007d3c <HAL_GPIO_DeInit+0x10>
  }
}
 8007ee6:	bf00      	nop
 8007ee8:	bf00      	nop
 8007eea:	371c      	adds	r7, #28
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	40010000 	.word	0x40010000
 8007ef8:	48000400 	.word	0x48000400
 8007efc:	48000800 	.word	0x48000800
 8007f00:	48000c00 	.word	0x48000c00
 8007f04:	48001000 	.word	0x48001000
 8007f08:	48001400 	.word	0x48001400
 8007f0c:	48001800 	.word	0x48001800
 8007f10:	40010400 	.word	0x40010400

08007f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	887b      	ldrh	r3, [r7, #2]
 8007f26:	4013      	ands	r3, r2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d002      	beq.n	8007f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	73fb      	strb	r3, [r7, #15]
 8007f30:	e001      	b.n	8007f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	807b      	strh	r3, [r7, #2]
 8007f50:	4613      	mov	r3, r2
 8007f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007f54:	787b      	ldrb	r3, [r7, #1]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007f5a:	887a      	ldrh	r2, [r7, #2]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007f60:	e002      	b.n	8007f68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007f62:	887a      	ldrh	r2, [r7, #2]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e081      	b.n	800808a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d106      	bne.n	8007fa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f8a8 	bl	80080f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2224      	movs	r2, #36	; 0x24
 8007fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0201 	bic.w	r2, r2, #1
 8007fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007fc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d107      	bne.n	8007fee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689a      	ldr	r2, [r3, #8]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fea:	609a      	str	r2, [r3, #8]
 8007fec:	e006      	b.n	8007ffc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007ffa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	2b02      	cmp	r3, #2
 8008002:	d104      	bne.n	800800e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800800c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	6812      	ldr	r2, [r2, #0]
 8008018:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800801c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008020:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68da      	ldr	r2, [r3, #12]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008030:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	691a      	ldr	r2, [r3, #16]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	69d9      	ldr	r1, [r3, #28]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a1a      	ldr	r2, [r3, #32]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	430a      	orrs	r2, r1
 800805a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0201 	orr.w	r2, r2, #1
 800806a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2220      	movs	r2, #32
 8008076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b082      	sub	sp, #8
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d101      	bne.n	80080a4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e021      	b.n	80080e8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2224      	movs	r2, #36	; 0x24
 80080a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0201 	bic.w	r2, r2, #1
 80080ba:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f821 	bl	8008104 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b088      	sub	sp, #32
 800811c:	af02      	add	r7, sp, #8
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	4608      	mov	r0, r1
 8008122:	4611      	mov	r1, r2
 8008124:	461a      	mov	r2, r3
 8008126:	4603      	mov	r3, r0
 8008128:	817b      	strh	r3, [r7, #10]
 800812a:	460b      	mov	r3, r1
 800812c:	813b      	strh	r3, [r7, #8]
 800812e:	4613      	mov	r3, r2
 8008130:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b20      	cmp	r3, #32
 800813c:	f040 80f9 	bne.w	8008332 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d002      	beq.n	800814c <HAL_I2C_Mem_Write+0x34>
 8008146:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008148:	2b00      	cmp	r3, #0
 800814a:	d105      	bne.n	8008158 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008152:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e0ed      	b.n	8008334 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800815e:	2b01      	cmp	r3, #1
 8008160:	d101      	bne.n	8008166 <HAL_I2C_Mem_Write+0x4e>
 8008162:	2302      	movs	r3, #2
 8008164:	e0e6      	b.n	8008334 <HAL_I2C_Mem_Write+0x21c>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800816e:	f7fe ffb1 	bl	80070d4 <HAL_GetTick>
 8008172:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	2319      	movs	r3, #25
 800817a:	2201      	movs	r2, #1
 800817c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 fadd 	bl	8008740 <I2C_WaitOnFlagUntilTimeout>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e0d1      	b.n	8008334 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2221      	movs	r2, #33	; 0x21
 8008194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2240      	movs	r2, #64	; 0x40
 800819c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6a3a      	ldr	r2, [r7, #32]
 80081aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80081b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80081b8:	88f8      	ldrh	r0, [r7, #6]
 80081ba:	893a      	ldrh	r2, [r7, #8]
 80081bc:	8979      	ldrh	r1, [r7, #10]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	9301      	str	r3, [sp, #4]
 80081c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	4603      	mov	r3, r0
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 f9ed 	bl	80085a8 <I2C_RequestMemoryWrite>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d005      	beq.n	80081e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e0a9      	b.n	8008334 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	2bff      	cmp	r3, #255	; 0xff
 80081e8:	d90e      	bls.n	8008208 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	22ff      	movs	r2, #255	; 0xff
 80081ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	8979      	ldrh	r1, [r7, #10]
 80081f8:	2300      	movs	r3, #0
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 fc45 	bl	8008a90 <I2C_TransferConfig>
 8008206:	e00f      	b.n	8008228 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800820c:	b29a      	uxth	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008216:	b2da      	uxtb	r2, r3
 8008218:	8979      	ldrh	r1, [r7, #10]
 800821a:	2300      	movs	r3, #0
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 fc34 	bl	8008a90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 fac7 	bl	80087c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e07b      	b.n	8008334 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	781a      	ldrb	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008256:	b29b      	uxth	r3, r3
 8008258:	3b01      	subs	r3, #1
 800825a:	b29a      	uxth	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008264:	3b01      	subs	r3, #1
 8008266:	b29a      	uxth	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008270:	b29b      	uxth	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	d034      	beq.n	80082e0 <HAL_I2C_Mem_Write+0x1c8>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800827a:	2b00      	cmp	r3, #0
 800827c:	d130      	bne.n	80082e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	2200      	movs	r2, #0
 8008286:	2180      	movs	r1, #128	; 0x80
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f000 fa59 	bl	8008740 <I2C_WaitOnFlagUntilTimeout>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e04d      	b.n	8008334 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800829c:	b29b      	uxth	r3, r3
 800829e:	2bff      	cmp	r3, #255	; 0xff
 80082a0:	d90e      	bls.n	80082c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	22ff      	movs	r2, #255	; 0xff
 80082a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	8979      	ldrh	r1, [r7, #10]
 80082b0:	2300      	movs	r3, #0
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 fbe9 	bl	8008a90 <I2C_TransferConfig>
 80082be:	e00f      	b.n	80082e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	8979      	ldrh	r1, [r7, #10]
 80082d2:	2300      	movs	r3, #0
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 fbd8 	bl	8008a90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d19e      	bne.n	8008228 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f000 faa6 	bl	8008840 <I2C_WaitOnSTOPFlagUntilTimeout>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e01a      	b.n	8008334 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2220      	movs	r2, #32
 8008304:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6859      	ldr	r1, [r3, #4]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	4b0a      	ldr	r3, [pc, #40]	; (800833c <HAL_I2C_Mem_Write+0x224>)
 8008312:	400b      	ands	r3, r1
 8008314:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2220      	movs	r2, #32
 800831a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	e000      	b.n	8008334 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008332:	2302      	movs	r3, #2
  }
}
 8008334:	4618      	mov	r0, r3
 8008336:	3718      	adds	r7, #24
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	fe00e800 	.word	0xfe00e800

08008340 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b088      	sub	sp, #32
 8008344:	af02      	add	r7, sp, #8
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	4608      	mov	r0, r1
 800834a:	4611      	mov	r1, r2
 800834c:	461a      	mov	r2, r3
 800834e:	4603      	mov	r3, r0
 8008350:	817b      	strh	r3, [r7, #10]
 8008352:	460b      	mov	r3, r1
 8008354:	813b      	strh	r3, [r7, #8]
 8008356:	4613      	mov	r3, r2
 8008358:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b20      	cmp	r3, #32
 8008364:	f040 80fd 	bne.w	8008562 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <HAL_I2C_Mem_Read+0x34>
 800836e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008370:	2b00      	cmp	r3, #0
 8008372:	d105      	bne.n	8008380 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800837a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e0f1      	b.n	8008564 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008386:	2b01      	cmp	r3, #1
 8008388:	d101      	bne.n	800838e <HAL_I2C_Mem_Read+0x4e>
 800838a:	2302      	movs	r3, #2
 800838c:	e0ea      	b.n	8008564 <HAL_I2C_Mem_Read+0x224>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008396:	f7fe fe9d 	bl	80070d4 <HAL_GetTick>
 800839a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	2319      	movs	r3, #25
 80083a2:	2201      	movs	r2, #1
 80083a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 f9c9 	bl	8008740 <I2C_WaitOnFlagUntilTimeout>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d001      	beq.n	80083b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e0d5      	b.n	8008564 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2222      	movs	r2, #34	; 0x22
 80083bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2240      	movs	r2, #64	; 0x40
 80083c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6a3a      	ldr	r2, [r7, #32]
 80083d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80083d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80083e0:	88f8      	ldrh	r0, [r7, #6]
 80083e2:	893a      	ldrh	r2, [r7, #8]
 80083e4:	8979      	ldrh	r1, [r7, #10]
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	4603      	mov	r3, r0
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 f92d 	bl	8008650 <I2C_RequestMemoryRead>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d005      	beq.n	8008408 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e0ad      	b.n	8008564 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800840c:	b29b      	uxth	r3, r3
 800840e:	2bff      	cmp	r3, #255	; 0xff
 8008410:	d90e      	bls.n	8008430 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	22ff      	movs	r2, #255	; 0xff
 8008416:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800841c:	b2da      	uxtb	r2, r3
 800841e:	8979      	ldrh	r1, [r7, #10]
 8008420:	4b52      	ldr	r3, [pc, #328]	; (800856c <HAL_I2C_Mem_Read+0x22c>)
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 fb31 	bl	8008a90 <I2C_TransferConfig>
 800842e:	e00f      	b.n	8008450 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008434:	b29a      	uxth	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800843e:	b2da      	uxtb	r2, r3
 8008440:	8979      	ldrh	r1, [r7, #10]
 8008442:	4b4a      	ldr	r3, [pc, #296]	; (800856c <HAL_I2C_Mem_Read+0x22c>)
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 fb20 	bl	8008a90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	2200      	movs	r2, #0
 8008458:	2104      	movs	r1, #4
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f000 f970 	bl	8008740 <I2C_WaitOnFlagUntilTimeout>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e07c      	b.n	8008564 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	b2d2      	uxtb	r2, r2
 8008476:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008486:	3b01      	subs	r3, #1
 8008488:	b29a      	uxth	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008492:	b29b      	uxth	r3, r3
 8008494:	3b01      	subs	r3, #1
 8008496:	b29a      	uxth	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d034      	beq.n	8008510 <HAL_I2C_Mem_Read+0x1d0>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d130      	bne.n	8008510 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	2200      	movs	r2, #0
 80084b6:	2180      	movs	r1, #128	; 0x80
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 f941 	bl	8008740 <I2C_WaitOnFlagUntilTimeout>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e04d      	b.n	8008564 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	2bff      	cmp	r3, #255	; 0xff
 80084d0:	d90e      	bls.n	80084f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	22ff      	movs	r2, #255	; 0xff
 80084d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	8979      	ldrh	r1, [r7, #10]
 80084e0:	2300      	movs	r3, #0
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 fad1 	bl	8008a90 <I2C_TransferConfig>
 80084ee:	e00f      	b.n	8008510 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	8979      	ldrh	r1, [r7, #10]
 8008502:	2300      	movs	r3, #0
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f000 fac0 	bl	8008a90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008514:	b29b      	uxth	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d19a      	bne.n	8008450 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 f98e 	bl	8008840 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e01a      	b.n	8008564 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2220      	movs	r2, #32
 8008534:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6859      	ldr	r1, [r3, #4]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	4b0b      	ldr	r3, [pc, #44]	; (8008570 <HAL_I2C_Mem_Read+0x230>)
 8008542:	400b      	ands	r3, r1
 8008544:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2220      	movs	r2, #32
 800854a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	e000      	b.n	8008564 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008562:	2302      	movs	r3, #2
  }
}
 8008564:	4618      	mov	r0, r3
 8008566:	3718      	adds	r7, #24
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	80002400 	.word	0x80002400
 8008570:	fe00e800 	.word	0xfe00e800

08008574 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008582:	b2db      	uxtb	r3, r3
}
 8008584:	4618      	mov	r0, r3
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800859c:	4618      	mov	r0, r3
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	4608      	mov	r0, r1
 80085b2:	4611      	mov	r1, r2
 80085b4:	461a      	mov	r2, r3
 80085b6:	4603      	mov	r3, r0
 80085b8:	817b      	strh	r3, [r7, #10]
 80085ba:	460b      	mov	r3, r1
 80085bc:	813b      	strh	r3, [r7, #8]
 80085be:	4613      	mov	r3, r2
 80085c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80085c2:	88fb      	ldrh	r3, [r7, #6]
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	8979      	ldrh	r1, [r7, #10]
 80085c8:	4b20      	ldr	r3, [pc, #128]	; (800864c <I2C_RequestMemoryWrite+0xa4>)
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 fa5d 	bl	8008a90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085d6:	69fa      	ldr	r2, [r7, #28]
 80085d8:	69b9      	ldr	r1, [r7, #24]
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 f8f0 	bl	80087c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e02c      	b.n	8008644 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085ea:	88fb      	ldrh	r3, [r7, #6]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d105      	bne.n	80085fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80085f0:	893b      	ldrh	r3, [r7, #8]
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	629a      	str	r2, [r3, #40]	; 0x28
 80085fa:	e015      	b.n	8008628 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80085fc:	893b      	ldrh	r3, [r7, #8]
 80085fe:	0a1b      	lsrs	r3, r3, #8
 8008600:	b29b      	uxth	r3, r3
 8008602:	b2da      	uxtb	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800860a:	69fa      	ldr	r2, [r7, #28]
 800860c:	69b9      	ldr	r1, [r7, #24]
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f000 f8d6 	bl	80087c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e012      	b.n	8008644 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800861e:	893b      	ldrh	r3, [r7, #8]
 8008620:	b2da      	uxtb	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	2200      	movs	r2, #0
 8008630:	2180      	movs	r1, #128	; 0x80
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 f884 	bl	8008740 <I2C_WaitOnFlagUntilTimeout>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e000      	b.n	8008644 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	80002000 	.word	0x80002000

08008650 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af02      	add	r7, sp, #8
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	4608      	mov	r0, r1
 800865a:	4611      	mov	r1, r2
 800865c:	461a      	mov	r2, r3
 800865e:	4603      	mov	r3, r0
 8008660:	817b      	strh	r3, [r7, #10]
 8008662:	460b      	mov	r3, r1
 8008664:	813b      	strh	r3, [r7, #8]
 8008666:	4613      	mov	r3, r2
 8008668:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800866a:	88fb      	ldrh	r3, [r7, #6]
 800866c:	b2da      	uxtb	r2, r3
 800866e:	8979      	ldrh	r1, [r7, #10]
 8008670:	4b20      	ldr	r3, [pc, #128]	; (80086f4 <I2C_RequestMemoryRead+0xa4>)
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	2300      	movs	r3, #0
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f000 fa0a 	bl	8008a90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800867c:	69fa      	ldr	r2, [r7, #28]
 800867e:	69b9      	ldr	r1, [r7, #24]
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 f89d 	bl	80087c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e02c      	b.n	80086ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008690:	88fb      	ldrh	r3, [r7, #6]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d105      	bne.n	80086a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008696:	893b      	ldrh	r3, [r7, #8]
 8008698:	b2da      	uxtb	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	629a      	str	r2, [r3, #40]	; 0x28
 80086a0:	e015      	b.n	80086ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80086a2:	893b      	ldrh	r3, [r7, #8]
 80086a4:	0a1b      	lsrs	r3, r3, #8
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	b2da      	uxtb	r2, r3
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086b0:	69fa      	ldr	r2, [r7, #28]
 80086b2:	69b9      	ldr	r1, [r7, #24]
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f000 f883 	bl	80087c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e012      	b.n	80086ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80086c4:	893b      	ldrh	r3, [r7, #8]
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	2200      	movs	r2, #0
 80086d6:	2140      	movs	r1, #64	; 0x40
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 f831 	bl	8008740 <I2C_WaitOnFlagUntilTimeout>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e000      	b.n	80086ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	80002000 	.word	0x80002000

080086f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b02      	cmp	r3, #2
 800870c:	d103      	bne.n	8008716 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2200      	movs	r2, #0
 8008714:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b01      	cmp	r3, #1
 8008722:	d007      	beq.n	8008734 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699a      	ldr	r2, [r3, #24]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f042 0201 	orr.w	r2, r2, #1
 8008732:	619a      	str	r2, [r3, #24]
  }
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	603b      	str	r3, [r7, #0]
 800874c:	4613      	mov	r3, r2
 800874e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008750:	e022      	b.n	8008798 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008758:	d01e      	beq.n	8008798 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800875a:	f7fe fcbb 	bl	80070d4 <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	d302      	bcc.n	8008770 <I2C_WaitOnFlagUntilTimeout+0x30>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d113      	bne.n	8008798 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008774:	f043 0220 	orr.w	r2, r3, #32
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2220      	movs	r2, #32
 8008780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e00f      	b.n	80087b8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	4013      	ands	r3, r2
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	bf0c      	ite	eq
 80087a8:	2301      	moveq	r3, #1
 80087aa:	2300      	movne	r3, #0
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	461a      	mov	r2, r3
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d0cd      	beq.n	8008752 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80087cc:	e02c      	b.n	8008828 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	68b9      	ldr	r1, [r7, #8]
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 f870 	bl	80088b8 <I2C_IsErrorOccurred>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d001      	beq.n	80087e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e02a      	b.n	8008838 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e8:	d01e      	beq.n	8008828 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ea:	f7fe fc73 	bl	80070d4 <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d302      	bcc.n	8008800 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d113      	bne.n	8008828 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008804:	f043 0220 	orr.w	r2, r3, #32
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2220      	movs	r2, #32
 8008810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e007      	b.n	8008838 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b02      	cmp	r3, #2
 8008834:	d1cb      	bne.n	80087ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800884c:	e028      	b.n	80088a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	68b9      	ldr	r1, [r7, #8]
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f000 f830 	bl	80088b8 <I2C_IsErrorOccurred>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e026      	b.n	80088b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008862:	f7fe fc37 	bl	80070d4 <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	429a      	cmp	r2, r3
 8008870:	d302      	bcc.n	8008878 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d113      	bne.n	80088a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800887c:	f043 0220 	orr.w	r2, r3, #32
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2220      	movs	r2, #32
 8008888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e007      	b.n	80088b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	f003 0320 	and.w	r3, r3, #32
 80088aa:	2b20      	cmp	r3, #32
 80088ac:	d1cf      	bne.n	800884e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08a      	sub	sp, #40	; 0x28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	f003 0310 	and.w	r3, r3, #16
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d075      	beq.n	80089d0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2210      	movs	r2, #16
 80088ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80088ec:	e056      	b.n	800899c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f4:	d052      	beq.n	800899c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80088f6:	f7fe fbed 	bl	80070d4 <HAL_GetTick>
 80088fa:	4602      	mov	r2, r0
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	429a      	cmp	r2, r3
 8008904:	d302      	bcc.n	800890c <I2C_IsErrorOccurred+0x54>
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d147      	bne.n	800899c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008916:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800891e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800892a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800892e:	d12e      	bne.n	800898e <I2C_IsErrorOccurred+0xd6>
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008936:	d02a      	beq.n	800898e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008938:	7cfb      	ldrb	r3, [r7, #19]
 800893a:	2b20      	cmp	r3, #32
 800893c:	d027      	beq.n	800898e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800894c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800894e:	f7fe fbc1 	bl	80070d4 <HAL_GetTick>
 8008952:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008954:	e01b      	b.n	800898e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008956:	f7fe fbbd 	bl	80070d4 <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	2b19      	cmp	r3, #25
 8008962:	d914      	bls.n	800898e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008968:	f043 0220 	orr.w	r2, r3, #32
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2220      	movs	r2, #32
 8008974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	f003 0320 	and.w	r3, r3, #32
 8008998:	2b20      	cmp	r3, #32
 800899a:	d1dc      	bne.n	8008956 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	f003 0320 	and.w	r3, r3, #32
 80089a6:	2b20      	cmp	r3, #32
 80089a8:	d003      	beq.n	80089b2 <I2C_IsErrorOccurred+0xfa>
 80089aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d09d      	beq.n	80088ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80089b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d103      	bne.n	80089c2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2220      	movs	r2, #32
 80089c0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	f043 0304 	orr.w	r3, r3, #4
 80089c8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00b      	beq.n	80089fa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	f043 0301 	orr.w	r3, r3, #1
 80089e8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	f043 0308 	orr.w	r3, r3, #8
 8008a0a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00b      	beq.n	8008a3e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	f043 0302 	orr.w	r3, r3, #2
 8008a2c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d01c      	beq.n	8008a80 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f7ff fe56 	bl	80086f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6859      	ldr	r1, [r3, #4]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	4b0d      	ldr	r3, [pc, #52]	; (8008a8c <I2C_IsErrorOccurred+0x1d4>)
 8008a58:	400b      	ands	r3, r1
 8008a5a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	431a      	orrs	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3728      	adds	r7, #40	; 0x28
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	fe00e800 	.word	0xfe00e800

08008a90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b087      	sub	sp, #28
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	607b      	str	r3, [r7, #4]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	817b      	strh	r3, [r7, #10]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008aa2:	897b      	ldrh	r3, [r7, #10]
 8008aa4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008aa8:	7a7b      	ldrb	r3, [r7, #9]
 8008aaa:	041b      	lsls	r3, r3, #16
 8008aac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ab0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008abe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	0d5b      	lsrs	r3, r3, #21
 8008aca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008ace:	4b08      	ldr	r3, [pc, #32]	; (8008af0 <I2C_TransferConfig+0x60>)
 8008ad0:	430b      	orrs	r3, r1
 8008ad2:	43db      	mvns	r3, r3
 8008ad4:	ea02 0103 	and.w	r1, r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	430a      	orrs	r2, r1
 8008ae0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008ae2:	bf00      	nop
 8008ae4:	371c      	adds	r7, #28
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	03ff63ff 	.word	0x03ff63ff

08008af4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b20      	cmp	r3, #32
 8008b08:	d138      	bne.n	8008b7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d101      	bne.n	8008b18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008b14:	2302      	movs	r3, #2
 8008b16:	e032      	b.n	8008b7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2224      	movs	r2, #36	; 0x24
 8008b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f022 0201 	bic.w	r2, r2, #1
 8008b36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6819      	ldr	r1, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	430a      	orrs	r2, r1
 8008b56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0201 	orr.w	r2, r2, #1
 8008b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	e000      	b.n	8008b7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b7c:	2302      	movs	r3, #2
  }
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b085      	sub	sp, #20
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b20      	cmp	r3, #32
 8008b9e:	d139      	bne.n	8008c14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d101      	bne.n	8008bae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008baa:	2302      	movs	r3, #2
 8008bac:	e033      	b.n	8008c16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2224      	movs	r2, #36	; 0x24
 8008bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 0201 	bic.w	r2, r2, #1
 8008bcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008bdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	021b      	lsls	r3, r3, #8
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f042 0201 	orr.w	r2, r2, #1
 8008bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2220      	movs	r2, #32
 8008c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	e000      	b.n	8008c16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008c14:	2302      	movs	r3, #2
  }
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
	...

08008c24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008c24:	b480      	push	{r7}
 8008c26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008c28:	4b04      	ldr	r3, [pc, #16]	; (8008c3c <HAL_PWREx_GetVoltageRange+0x18>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	40007000 	.word	0x40007000

08008c40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c4e:	d130      	bne.n	8008cb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c50:	4b23      	ldr	r3, [pc, #140]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c5c:	d038      	beq.n	8008cd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008c5e:	4b20      	ldr	r3, [pc, #128]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008c66:	4a1e      	ldr	r2, [pc, #120]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008c6e:	4b1d      	ldr	r3, [pc, #116]	; (8008ce4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2232      	movs	r2, #50	; 0x32
 8008c74:	fb02 f303 	mul.w	r3, r2, r3
 8008c78:	4a1b      	ldr	r2, [pc, #108]	; (8008ce8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c7e:	0c9b      	lsrs	r3, r3, #18
 8008c80:	3301      	adds	r3, #1
 8008c82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c84:	e002      	b.n	8008c8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c8c:	4b14      	ldr	r3, [pc, #80]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c98:	d102      	bne.n	8008ca0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1f2      	bne.n	8008c86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008ca0:	4b0f      	ldr	r3, [pc, #60]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ca2:	695b      	ldr	r3, [r3, #20]
 8008ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cac:	d110      	bne.n	8008cd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e00f      	b.n	8008cd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008cb2:	4b0b      	ldr	r3, [pc, #44]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cbe:	d007      	beq.n	8008cd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008cc0:	4b07      	ldr	r3, [pc, #28]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008cc8:	4a05      	ldr	r2, [pc, #20]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008cce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	40007000 	.word	0x40007000
 8008ce4:	20000004 	.word	0x20000004
 8008ce8:	431bde83 	.word	0x431bde83

08008cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b088      	sub	sp, #32
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e3d4      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cfe:	4ba1      	ldr	r3, [pc, #644]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f003 030c 	and.w	r3, r3, #12
 8008d06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d08:	4b9e      	ldr	r3, [pc, #632]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	f003 0303 	and.w	r3, r3, #3
 8008d10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0310 	and.w	r3, r3, #16
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f000 80e4 	beq.w	8008ee8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d007      	beq.n	8008d36 <HAL_RCC_OscConfig+0x4a>
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	2b0c      	cmp	r3, #12
 8008d2a:	f040 808b 	bne.w	8008e44 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	f040 8087 	bne.w	8008e44 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008d36:	4b93      	ldr	r3, [pc, #588]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 0302 	and.w	r3, r3, #2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d005      	beq.n	8008d4e <HAL_RCC_OscConfig+0x62>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e3ac      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1a      	ldr	r2, [r3, #32]
 8008d52:	4b8c      	ldr	r3, [pc, #560]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 0308 	and.w	r3, r3, #8
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d004      	beq.n	8008d68 <HAL_RCC_OscConfig+0x7c>
 8008d5e:	4b89      	ldr	r3, [pc, #548]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d66:	e005      	b.n	8008d74 <HAL_RCC_OscConfig+0x88>
 8008d68:	4b86      	ldr	r3, [pc, #536]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d6e:	091b      	lsrs	r3, r3, #4
 8008d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d223      	bcs.n	8008dc0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 fd41 	bl	8009804 <RCC_SetFlashLatencyFromMSIRange>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e38d      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d8c:	4b7d      	ldr	r3, [pc, #500]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a7c      	ldr	r2, [pc, #496]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008d92:	f043 0308 	orr.w	r3, r3, #8
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	4b7a      	ldr	r3, [pc, #488]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a1b      	ldr	r3, [r3, #32]
 8008da4:	4977      	ldr	r1, [pc, #476]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008daa:	4b76      	ldr	r3, [pc, #472]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	021b      	lsls	r3, r3, #8
 8008db8:	4972      	ldr	r1, [pc, #456]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	604b      	str	r3, [r1, #4]
 8008dbe:	e025      	b.n	8008e0c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008dc0:	4b70      	ldr	r3, [pc, #448]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a6f      	ldr	r2, [pc, #444]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008dc6:	f043 0308 	orr.w	r3, r3, #8
 8008dca:	6013      	str	r3, [r2, #0]
 8008dcc:	4b6d      	ldr	r3, [pc, #436]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	496a      	ldr	r1, [pc, #424]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008dde:	4b69      	ldr	r3, [pc, #420]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	021b      	lsls	r3, r3, #8
 8008dec:	4965      	ldr	r1, [pc, #404]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008dee:	4313      	orrs	r3, r2
 8008df0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d109      	bne.n	8008e0c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 fd01 	bl	8009804 <RCC_SetFlashLatencyFromMSIRange>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e34d      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008e0c:	f000 fc36 	bl	800967c <HAL_RCC_GetSysClockFreq>
 8008e10:	4602      	mov	r2, r0
 8008e12:	4b5c      	ldr	r3, [pc, #368]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	091b      	lsrs	r3, r3, #4
 8008e18:	f003 030f 	and.w	r3, r3, #15
 8008e1c:	495a      	ldr	r1, [pc, #360]	; (8008f88 <HAL_RCC_OscConfig+0x29c>)
 8008e1e:	5ccb      	ldrb	r3, [r1, r3]
 8008e20:	f003 031f 	and.w	r3, r3, #31
 8008e24:	fa22 f303 	lsr.w	r3, r2, r3
 8008e28:	4a58      	ldr	r2, [pc, #352]	; (8008f8c <HAL_RCC_OscConfig+0x2a0>)
 8008e2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008e2c:	4b58      	ldr	r3, [pc, #352]	; (8008f90 <HAL_RCC_OscConfig+0x2a4>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fe f8ff 	bl	8007034 <HAL_InitTick>
 8008e36:	4603      	mov	r3, r0
 8008e38:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d052      	beq.n	8008ee6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	e331      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d032      	beq.n	8008eb2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008e4c:	4b4d      	ldr	r3, [pc, #308]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a4c      	ldr	r2, [pc, #304]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008e52:	f043 0301 	orr.w	r3, r3, #1
 8008e56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008e58:	f7fe f93c 	bl	80070d4 <HAL_GetTick>
 8008e5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008e5e:	e008      	b.n	8008e72 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008e60:	f7fe f938 	bl	80070d4 <HAL_GetTick>
 8008e64:	4602      	mov	r2, r0
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d901      	bls.n	8008e72 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e31a      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008e72:	4b44      	ldr	r3, [pc, #272]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 0302 	and.w	r3, r3, #2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d0f0      	beq.n	8008e60 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008e7e:	4b41      	ldr	r3, [pc, #260]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a40      	ldr	r2, [pc, #256]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008e84:	f043 0308 	orr.w	r3, r3, #8
 8008e88:	6013      	str	r3, [r2, #0]
 8008e8a:	4b3e      	ldr	r3, [pc, #248]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	493b      	ldr	r1, [pc, #236]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008e9c:	4b39      	ldr	r3, [pc, #228]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	021b      	lsls	r3, r3, #8
 8008eaa:	4936      	ldr	r1, [pc, #216]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	604b      	str	r3, [r1, #4]
 8008eb0:	e01a      	b.n	8008ee8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008eb2:	4b34      	ldr	r3, [pc, #208]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a33      	ldr	r2, [pc, #204]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008eb8:	f023 0301 	bic.w	r3, r3, #1
 8008ebc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008ebe:	f7fe f909 	bl	80070d4 <HAL_GetTick>
 8008ec2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008ec4:	e008      	b.n	8008ed8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008ec6:	f7fe f905 	bl	80070d4 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d901      	bls.n	8008ed8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e2e7      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008ed8:	4b2a      	ldr	r3, [pc, #168]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0302 	and.w	r3, r3, #2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1f0      	bne.n	8008ec6 <HAL_RCC_OscConfig+0x1da>
 8008ee4:	e000      	b.n	8008ee8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008ee6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d074      	beq.n	8008fde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	2b08      	cmp	r3, #8
 8008ef8:	d005      	beq.n	8008f06 <HAL_RCC_OscConfig+0x21a>
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	2b0c      	cmp	r3, #12
 8008efe:	d10e      	bne.n	8008f1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	d10b      	bne.n	8008f1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f06:	4b1f      	ldr	r3, [pc, #124]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d064      	beq.n	8008fdc <HAL_RCC_OscConfig+0x2f0>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d160      	bne.n	8008fdc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e2c4      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f26:	d106      	bne.n	8008f36 <HAL_RCC_OscConfig+0x24a>
 8008f28:	4b16      	ldr	r3, [pc, #88]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a15      	ldr	r2, [pc, #84]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f32:	6013      	str	r3, [r2, #0]
 8008f34:	e01d      	b.n	8008f72 <HAL_RCC_OscConfig+0x286>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f3e:	d10c      	bne.n	8008f5a <HAL_RCC_OscConfig+0x26e>
 8008f40:	4b10      	ldr	r3, [pc, #64]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a0f      	ldr	r2, [pc, #60]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008f46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f4a:	6013      	str	r3, [r2, #0]
 8008f4c:	4b0d      	ldr	r3, [pc, #52]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a0c      	ldr	r2, [pc, #48]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	e00b      	b.n	8008f72 <HAL_RCC_OscConfig+0x286>
 8008f5a:	4b0a      	ldr	r3, [pc, #40]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a09      	ldr	r2, [pc, #36]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f64:	6013      	str	r3, [r2, #0]
 8008f66:	4b07      	ldr	r3, [pc, #28]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a06      	ldr	r2, [pc, #24]	; (8008f84 <HAL_RCC_OscConfig+0x298>)
 8008f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d01c      	beq.n	8008fb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f7a:	f7fe f8ab 	bl	80070d4 <HAL_GetTick>
 8008f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f80:	e011      	b.n	8008fa6 <HAL_RCC_OscConfig+0x2ba>
 8008f82:	bf00      	nop
 8008f84:	40021000 	.word	0x40021000
 8008f88:	0801ac08 	.word	0x0801ac08
 8008f8c:	20000004 	.word	0x20000004
 8008f90:	20000174 	.word	0x20000174
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f94:	f7fe f89e 	bl	80070d4 <HAL_GetTick>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	2b64      	cmp	r3, #100	; 0x64
 8008fa0:	d901      	bls.n	8008fa6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	e280      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008fa6:	4baf      	ldr	r3, [pc, #700]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0f0      	beq.n	8008f94 <HAL_RCC_OscConfig+0x2a8>
 8008fb2:	e014      	b.n	8008fde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fb4:	f7fe f88e 	bl	80070d4 <HAL_GetTick>
 8008fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008fba:	e008      	b.n	8008fce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fbc:	f7fe f88a 	bl	80070d4 <HAL_GetTick>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	2b64      	cmp	r3, #100	; 0x64
 8008fc8:	d901      	bls.n	8008fce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	e26c      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008fce:	4ba5      	ldr	r3, [pc, #660]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1f0      	bne.n	8008fbc <HAL_RCC_OscConfig+0x2d0>
 8008fda:	e000      	b.n	8008fde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d060      	beq.n	80090ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	d005      	beq.n	8008ffc <HAL_RCC_OscConfig+0x310>
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	2b0c      	cmp	r3, #12
 8008ff4:	d119      	bne.n	800902a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d116      	bne.n	800902a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ffc:	4b99      	ldr	r3, [pc, #612]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009004:	2b00      	cmp	r3, #0
 8009006:	d005      	beq.n	8009014 <HAL_RCC_OscConfig+0x328>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d101      	bne.n	8009014 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e249      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009014:	4b93      	ldr	r3, [pc, #588]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	061b      	lsls	r3, r3, #24
 8009022:	4990      	ldr	r1, [pc, #576]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8009024:	4313      	orrs	r3, r2
 8009026:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009028:	e040      	b.n	80090ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d023      	beq.n	800907a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009032:	4b8c      	ldr	r3, [pc, #560]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a8b      	ldr	r2, [pc, #556]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8009038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800903c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800903e:	f7fe f849 	bl	80070d4 <HAL_GetTick>
 8009042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009044:	e008      	b.n	8009058 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009046:	f7fe f845 	bl	80070d4 <HAL_GetTick>
 800904a:	4602      	mov	r2, r0
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	2b02      	cmp	r3, #2
 8009052:	d901      	bls.n	8009058 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e227      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009058:	4b82      	ldr	r3, [pc, #520]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009060:	2b00      	cmp	r3, #0
 8009062:	d0f0      	beq.n	8009046 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009064:	4b7f      	ldr	r3, [pc, #508]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	061b      	lsls	r3, r3, #24
 8009072:	497c      	ldr	r1, [pc, #496]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8009074:	4313      	orrs	r3, r2
 8009076:	604b      	str	r3, [r1, #4]
 8009078:	e018      	b.n	80090ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800907a:	4b7a      	ldr	r3, [pc, #488]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a79      	ldr	r2, [pc, #484]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8009080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009086:	f7fe f825 	bl	80070d4 <HAL_GetTick>
 800908a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800908c:	e008      	b.n	80090a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800908e:	f7fe f821 	bl	80070d4 <HAL_GetTick>
 8009092:	4602      	mov	r2, r0
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	2b02      	cmp	r3, #2
 800909a:	d901      	bls.n	80090a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e203      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80090a0:	4b70      	ldr	r3, [pc, #448]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1f0      	bne.n	800908e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0308 	and.w	r3, r3, #8
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d03c      	beq.n	8009132 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d01c      	beq.n	80090fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090c0:	4b68      	ldr	r3, [pc, #416]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 80090c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090c6:	4a67      	ldr	r2, [pc, #412]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 80090c8:	f043 0301 	orr.w	r3, r3, #1
 80090cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090d0:	f7fe f800 	bl	80070d4 <HAL_GetTick>
 80090d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80090d6:	e008      	b.n	80090ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090d8:	f7fd fffc 	bl	80070d4 <HAL_GetTick>
 80090dc:	4602      	mov	r2, r0
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d901      	bls.n	80090ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e1de      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80090ea:	4b5e      	ldr	r3, [pc, #376]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 80090ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090f0:	f003 0302 	and.w	r3, r3, #2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d0ef      	beq.n	80090d8 <HAL_RCC_OscConfig+0x3ec>
 80090f8:	e01b      	b.n	8009132 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090fa:	4b5a      	ldr	r3, [pc, #360]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 80090fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009100:	4a58      	ldr	r2, [pc, #352]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8009102:	f023 0301 	bic.w	r3, r3, #1
 8009106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800910a:	f7fd ffe3 	bl	80070d4 <HAL_GetTick>
 800910e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009110:	e008      	b.n	8009124 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009112:	f7fd ffdf 	bl	80070d4 <HAL_GetTick>
 8009116:	4602      	mov	r2, r0
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	2b02      	cmp	r3, #2
 800911e:	d901      	bls.n	8009124 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009120:	2303      	movs	r3, #3
 8009122:	e1c1      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009124:	4b4f      	ldr	r3, [pc, #316]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8009126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1ef      	bne.n	8009112 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0304 	and.w	r3, r3, #4
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 80a6 	beq.w	800928c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009140:	2300      	movs	r3, #0
 8009142:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009144:	4b47      	ldr	r3, [pc, #284]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8009146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10d      	bne.n	800916c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009150:	4b44      	ldr	r3, [pc, #272]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8009152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009154:	4a43      	ldr	r2, [pc, #268]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8009156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800915a:	6593      	str	r3, [r2, #88]	; 0x58
 800915c:	4b41      	ldr	r3, [pc, #260]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 800915e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009164:	60bb      	str	r3, [r7, #8]
 8009166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009168:	2301      	movs	r3, #1
 800916a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800916c:	4b3e      	ldr	r3, [pc, #248]	; (8009268 <HAL_RCC_OscConfig+0x57c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009174:	2b00      	cmp	r3, #0
 8009176:	d118      	bne.n	80091aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009178:	4b3b      	ldr	r3, [pc, #236]	; (8009268 <HAL_RCC_OscConfig+0x57c>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a3a      	ldr	r2, [pc, #232]	; (8009268 <HAL_RCC_OscConfig+0x57c>)
 800917e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009182:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009184:	f7fd ffa6 	bl	80070d4 <HAL_GetTick>
 8009188:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800918a:	e008      	b.n	800919e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800918c:	f7fd ffa2 	bl	80070d4 <HAL_GetTick>
 8009190:	4602      	mov	r2, r0
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	2b02      	cmp	r3, #2
 8009198:	d901      	bls.n	800919e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e184      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800919e:	4b32      	ldr	r3, [pc, #200]	; (8009268 <HAL_RCC_OscConfig+0x57c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d0f0      	beq.n	800918c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d108      	bne.n	80091c4 <HAL_RCC_OscConfig+0x4d8>
 80091b2:	4b2c      	ldr	r3, [pc, #176]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 80091b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091b8:	4a2a      	ldr	r2, [pc, #168]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 80091ba:	f043 0301 	orr.w	r3, r3, #1
 80091be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80091c2:	e024      	b.n	800920e <HAL_RCC_OscConfig+0x522>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	2b05      	cmp	r3, #5
 80091ca:	d110      	bne.n	80091ee <HAL_RCC_OscConfig+0x502>
 80091cc:	4b25      	ldr	r3, [pc, #148]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 80091ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d2:	4a24      	ldr	r2, [pc, #144]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 80091d4:	f043 0304 	orr.w	r3, r3, #4
 80091d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80091dc:	4b21      	ldr	r3, [pc, #132]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 80091de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091e2:	4a20      	ldr	r2, [pc, #128]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 80091e4:	f043 0301 	orr.w	r3, r3, #1
 80091e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80091ec:	e00f      	b.n	800920e <HAL_RCC_OscConfig+0x522>
 80091ee:	4b1d      	ldr	r3, [pc, #116]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 80091f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091f4:	4a1b      	ldr	r2, [pc, #108]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 80091f6:	f023 0301 	bic.w	r3, r3, #1
 80091fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80091fe:	4b19      	ldr	r3, [pc, #100]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8009200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009204:	4a17      	ldr	r2, [pc, #92]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8009206:	f023 0304 	bic.w	r3, r3, #4
 800920a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d016      	beq.n	8009244 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009216:	f7fd ff5d 	bl	80070d4 <HAL_GetTick>
 800921a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800921c:	e00a      	b.n	8009234 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800921e:	f7fd ff59 	bl	80070d4 <HAL_GetTick>
 8009222:	4602      	mov	r2, r0
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	f241 3288 	movw	r2, #5000	; 0x1388
 800922c:	4293      	cmp	r3, r2
 800922e:	d901      	bls.n	8009234 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e139      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009234:	4b0b      	ldr	r3, [pc, #44]	; (8009264 <HAL_RCC_OscConfig+0x578>)
 8009236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800923a:	f003 0302 	and.w	r3, r3, #2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0ed      	beq.n	800921e <HAL_RCC_OscConfig+0x532>
 8009242:	e01a      	b.n	800927a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009244:	f7fd ff46 	bl	80070d4 <HAL_GetTick>
 8009248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800924a:	e00f      	b.n	800926c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800924c:	f7fd ff42 	bl	80070d4 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	f241 3288 	movw	r2, #5000	; 0x1388
 800925a:	4293      	cmp	r3, r2
 800925c:	d906      	bls.n	800926c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800925e:	2303      	movs	r3, #3
 8009260:	e122      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
 8009262:	bf00      	nop
 8009264:	40021000 	.word	0x40021000
 8009268:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800926c:	4b90      	ldr	r3, [pc, #576]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 800926e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009272:	f003 0302 	and.w	r3, r3, #2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1e8      	bne.n	800924c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800927a:	7ffb      	ldrb	r3, [r7, #31]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d105      	bne.n	800928c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009280:	4b8b      	ldr	r3, [pc, #556]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 8009282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009284:	4a8a      	ldr	r2, [pc, #552]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 8009286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800928a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 8108 	beq.w	80094a6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929a:	2b02      	cmp	r3, #2
 800929c:	f040 80d0 	bne.w	8009440 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80092a0:	4b83      	ldr	r3, [pc, #524]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	f003 0203 	and.w	r2, r3, #3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d130      	bne.n	8009316 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092be:	3b01      	subs	r3, #1
 80092c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d127      	bne.n	8009316 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d11f      	bne.n	8009316 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80092e0:	2a07      	cmp	r2, #7
 80092e2:	bf14      	ite	ne
 80092e4:	2201      	movne	r2, #1
 80092e6:	2200      	moveq	r2, #0
 80092e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d113      	bne.n	8009316 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f8:	085b      	lsrs	r3, r3, #1
 80092fa:	3b01      	subs	r3, #1
 80092fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80092fe:	429a      	cmp	r2, r3
 8009300:	d109      	bne.n	8009316 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930c:	085b      	lsrs	r3, r3, #1
 800930e:	3b01      	subs	r3, #1
 8009310:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009312:	429a      	cmp	r2, r3
 8009314:	d06e      	beq.n	80093f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	2b0c      	cmp	r3, #12
 800931a:	d069      	beq.n	80093f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800931c:	4b64      	ldr	r3, [pc, #400]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d105      	bne.n	8009334 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009328:	4b61      	ldr	r3, [pc, #388]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e0b7      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009338:	4b5d      	ldr	r3, [pc, #372]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a5c      	ldr	r2, [pc, #368]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 800933e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009342:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009344:	f7fd fec6 	bl	80070d4 <HAL_GetTick>
 8009348:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800934a:	e008      	b.n	800935e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800934c:	f7fd fec2 	bl	80070d4 <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	2b02      	cmp	r3, #2
 8009358:	d901      	bls.n	800935e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e0a4      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800935e:	4b54      	ldr	r3, [pc, #336]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1f0      	bne.n	800934c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800936a:	4b51      	ldr	r3, [pc, #324]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 800936c:	68da      	ldr	r2, [r3, #12]
 800936e:	4b51      	ldr	r3, [pc, #324]	; (80094b4 <HAL_RCC_OscConfig+0x7c8>)
 8009370:	4013      	ands	r3, r2
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800937a:	3a01      	subs	r2, #1
 800937c:	0112      	lsls	r2, r2, #4
 800937e:	4311      	orrs	r1, r2
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009384:	0212      	lsls	r2, r2, #8
 8009386:	4311      	orrs	r1, r2
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800938c:	0852      	lsrs	r2, r2, #1
 800938e:	3a01      	subs	r2, #1
 8009390:	0552      	lsls	r2, r2, #21
 8009392:	4311      	orrs	r1, r2
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009398:	0852      	lsrs	r2, r2, #1
 800939a:	3a01      	subs	r2, #1
 800939c:	0652      	lsls	r2, r2, #25
 800939e:	4311      	orrs	r1, r2
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80093a4:	0912      	lsrs	r2, r2, #4
 80093a6:	0452      	lsls	r2, r2, #17
 80093a8:	430a      	orrs	r2, r1
 80093aa:	4941      	ldr	r1, [pc, #260]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 80093ac:	4313      	orrs	r3, r2
 80093ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80093b0:	4b3f      	ldr	r3, [pc, #252]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a3e      	ldr	r2, [pc, #248]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 80093b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80093bc:	4b3c      	ldr	r3, [pc, #240]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	4a3b      	ldr	r2, [pc, #236]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 80093c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80093c8:	f7fd fe84 	bl	80070d4 <HAL_GetTick>
 80093cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093ce:	e008      	b.n	80093e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093d0:	f7fd fe80 	bl	80070d4 <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d901      	bls.n	80093e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e062      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093e2:	4b33      	ldr	r3, [pc, #204]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d0f0      	beq.n	80093d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80093ee:	e05a      	b.n	80094a6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e059      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093f4:	4b2e      	ldr	r3, [pc, #184]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d152      	bne.n	80094a6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009400:	4b2b      	ldr	r3, [pc, #172]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a2a      	ldr	r2, [pc, #168]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 8009406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800940a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800940c:	4b28      	ldr	r3, [pc, #160]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	4a27      	ldr	r2, [pc, #156]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 8009412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009416:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009418:	f7fd fe5c 	bl	80070d4 <HAL_GetTick>
 800941c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800941e:	e008      	b.n	8009432 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009420:	f7fd fe58 	bl	80070d4 <HAL_GetTick>
 8009424:	4602      	mov	r2, r0
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	2b02      	cmp	r3, #2
 800942c:	d901      	bls.n	8009432 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	e03a      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009432:	4b1f      	ldr	r3, [pc, #124]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0f0      	beq.n	8009420 <HAL_RCC_OscConfig+0x734>
 800943e:	e032      	b.n	80094a6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	2b0c      	cmp	r3, #12
 8009444:	d02d      	beq.n	80094a2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009446:	4b1a      	ldr	r3, [pc, #104]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a19      	ldr	r2, [pc, #100]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 800944c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009450:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8009452:	4b17      	ldr	r3, [pc, #92]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800945a:	2b00      	cmp	r3, #0
 800945c:	d105      	bne.n	800946a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800945e:	4b14      	ldr	r3, [pc, #80]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	4a13      	ldr	r2, [pc, #76]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 8009464:	f023 0303 	bic.w	r3, r3, #3
 8009468:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800946a:	4b11      	ldr	r3, [pc, #68]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	4a10      	ldr	r2, [pc, #64]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 8009470:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009478:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800947a:	f7fd fe2b 	bl	80070d4 <HAL_GetTick>
 800947e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009480:	e008      	b.n	8009494 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009482:	f7fd fe27 	bl	80070d4 <HAL_GetTick>
 8009486:	4602      	mov	r2, r0
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	2b02      	cmp	r3, #2
 800948e:	d901      	bls.n	8009494 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8009490:	2303      	movs	r3, #3
 8009492:	e009      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009494:	4b06      	ldr	r3, [pc, #24]	; (80094b0 <HAL_RCC_OscConfig+0x7c4>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1f0      	bne.n	8009482 <HAL_RCC_OscConfig+0x796>
 80094a0:	e001      	b.n	80094a6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e000      	b.n	80094a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3720      	adds	r7, #32
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	40021000 	.word	0x40021000
 80094b4:	f99d808c 	.word	0xf99d808c

080094b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d101      	bne.n	80094cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e0c8      	b.n	800965e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80094cc:	4b66      	ldr	r3, [pc, #408]	; (8009668 <HAL_RCC_ClockConfig+0x1b0>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0307 	and.w	r3, r3, #7
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d910      	bls.n	80094fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094da:	4b63      	ldr	r3, [pc, #396]	; (8009668 <HAL_RCC_ClockConfig+0x1b0>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f023 0207 	bic.w	r2, r3, #7
 80094e2:	4961      	ldr	r1, [pc, #388]	; (8009668 <HAL_RCC_ClockConfig+0x1b0>)
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094ea:	4b5f      	ldr	r3, [pc, #380]	; (8009668 <HAL_RCC_ClockConfig+0x1b0>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 0307 	and.w	r3, r3, #7
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d001      	beq.n	80094fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e0b0      	b.n	800965e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	2b00      	cmp	r3, #0
 8009506:	d04c      	beq.n	80095a2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	2b03      	cmp	r3, #3
 800950e:	d107      	bne.n	8009520 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009510:	4b56      	ldr	r3, [pc, #344]	; (800966c <HAL_RCC_ClockConfig+0x1b4>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009518:	2b00      	cmp	r3, #0
 800951a:	d121      	bne.n	8009560 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	e09e      	b.n	800965e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	2b02      	cmp	r3, #2
 8009526:	d107      	bne.n	8009538 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009528:	4b50      	ldr	r3, [pc, #320]	; (800966c <HAL_RCC_ClockConfig+0x1b4>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d115      	bne.n	8009560 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e092      	b.n	800965e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d107      	bne.n	8009550 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009540:	4b4a      	ldr	r3, [pc, #296]	; (800966c <HAL_RCC_ClockConfig+0x1b4>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 0302 	and.w	r3, r3, #2
 8009548:	2b00      	cmp	r3, #0
 800954a:	d109      	bne.n	8009560 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e086      	b.n	800965e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009550:	4b46      	ldr	r3, [pc, #280]	; (800966c <HAL_RCC_ClockConfig+0x1b4>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009558:	2b00      	cmp	r3, #0
 800955a:	d101      	bne.n	8009560 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e07e      	b.n	800965e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009560:	4b42      	ldr	r3, [pc, #264]	; (800966c <HAL_RCC_ClockConfig+0x1b4>)
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f023 0203 	bic.w	r2, r3, #3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	493f      	ldr	r1, [pc, #252]	; (800966c <HAL_RCC_ClockConfig+0x1b4>)
 800956e:	4313      	orrs	r3, r2
 8009570:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009572:	f7fd fdaf 	bl	80070d4 <HAL_GetTick>
 8009576:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009578:	e00a      	b.n	8009590 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800957a:	f7fd fdab 	bl	80070d4 <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	f241 3288 	movw	r2, #5000	; 0x1388
 8009588:	4293      	cmp	r3, r2
 800958a:	d901      	bls.n	8009590 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800958c:	2303      	movs	r3, #3
 800958e:	e066      	b.n	800965e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009590:	4b36      	ldr	r3, [pc, #216]	; (800966c <HAL_RCC_ClockConfig+0x1b4>)
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f003 020c 	and.w	r2, r3, #12
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	429a      	cmp	r2, r3
 80095a0:	d1eb      	bne.n	800957a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f003 0302 	and.w	r3, r3, #2
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d008      	beq.n	80095c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095ae:	4b2f      	ldr	r3, [pc, #188]	; (800966c <HAL_RCC_ClockConfig+0x1b4>)
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	492c      	ldr	r1, [pc, #176]	; (800966c <HAL_RCC_ClockConfig+0x1b4>)
 80095bc:	4313      	orrs	r3, r2
 80095be:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095c0:	4b29      	ldr	r3, [pc, #164]	; (8009668 <HAL_RCC_ClockConfig+0x1b0>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 0307 	and.w	r3, r3, #7
 80095c8:	683a      	ldr	r2, [r7, #0]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d210      	bcs.n	80095f0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095ce:	4b26      	ldr	r3, [pc, #152]	; (8009668 <HAL_RCC_ClockConfig+0x1b0>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f023 0207 	bic.w	r2, r3, #7
 80095d6:	4924      	ldr	r1, [pc, #144]	; (8009668 <HAL_RCC_ClockConfig+0x1b0>)
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	4313      	orrs	r3, r2
 80095dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095de:	4b22      	ldr	r3, [pc, #136]	; (8009668 <HAL_RCC_ClockConfig+0x1b0>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 0307 	and.w	r3, r3, #7
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d001      	beq.n	80095f0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e036      	b.n	800965e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0304 	and.w	r3, r3, #4
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d008      	beq.n	800960e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095fc:	4b1b      	ldr	r3, [pc, #108]	; (800966c <HAL_RCC_ClockConfig+0x1b4>)
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	4918      	ldr	r1, [pc, #96]	; (800966c <HAL_RCC_ClockConfig+0x1b4>)
 800960a:	4313      	orrs	r3, r2
 800960c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0308 	and.w	r3, r3, #8
 8009616:	2b00      	cmp	r3, #0
 8009618:	d009      	beq.n	800962e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800961a:	4b14      	ldr	r3, [pc, #80]	; (800966c <HAL_RCC_ClockConfig+0x1b4>)
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	00db      	lsls	r3, r3, #3
 8009628:	4910      	ldr	r1, [pc, #64]	; (800966c <HAL_RCC_ClockConfig+0x1b4>)
 800962a:	4313      	orrs	r3, r2
 800962c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800962e:	f000 f825 	bl	800967c <HAL_RCC_GetSysClockFreq>
 8009632:	4602      	mov	r2, r0
 8009634:	4b0d      	ldr	r3, [pc, #52]	; (800966c <HAL_RCC_ClockConfig+0x1b4>)
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	091b      	lsrs	r3, r3, #4
 800963a:	f003 030f 	and.w	r3, r3, #15
 800963e:	490c      	ldr	r1, [pc, #48]	; (8009670 <HAL_RCC_ClockConfig+0x1b8>)
 8009640:	5ccb      	ldrb	r3, [r1, r3]
 8009642:	f003 031f 	and.w	r3, r3, #31
 8009646:	fa22 f303 	lsr.w	r3, r2, r3
 800964a:	4a0a      	ldr	r2, [pc, #40]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 800964c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800964e:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <HAL_RCC_ClockConfig+0x1c0>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4618      	mov	r0, r3
 8009654:	f7fd fcee 	bl	8007034 <HAL_InitTick>
 8009658:	4603      	mov	r3, r0
 800965a:	72fb      	strb	r3, [r7, #11]

  return status;
 800965c:	7afb      	ldrb	r3, [r7, #11]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	40022000 	.word	0x40022000
 800966c:	40021000 	.word	0x40021000
 8009670:	0801ac08 	.word	0x0801ac08
 8009674:	20000004 	.word	0x20000004
 8009678:	20000174 	.word	0x20000174

0800967c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800967c:	b480      	push	{r7}
 800967e:	b089      	sub	sp, #36	; 0x24
 8009680:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009682:	2300      	movs	r3, #0
 8009684:	61fb      	str	r3, [r7, #28]
 8009686:	2300      	movs	r3, #0
 8009688:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800968a:	4b3e      	ldr	r3, [pc, #248]	; (8009784 <HAL_RCC_GetSysClockFreq+0x108>)
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f003 030c 	and.w	r3, r3, #12
 8009692:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009694:	4b3b      	ldr	r3, [pc, #236]	; (8009784 <HAL_RCC_GetSysClockFreq+0x108>)
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	f003 0303 	and.w	r3, r3, #3
 800969c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d005      	beq.n	80096b0 <HAL_RCC_GetSysClockFreq+0x34>
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2b0c      	cmp	r3, #12
 80096a8:	d121      	bne.n	80096ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d11e      	bne.n	80096ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80096b0:	4b34      	ldr	r3, [pc, #208]	; (8009784 <HAL_RCC_GetSysClockFreq+0x108>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0308 	and.w	r3, r3, #8
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d107      	bne.n	80096cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80096bc:	4b31      	ldr	r3, [pc, #196]	; (8009784 <HAL_RCC_GetSysClockFreq+0x108>)
 80096be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096c2:	0a1b      	lsrs	r3, r3, #8
 80096c4:	f003 030f 	and.w	r3, r3, #15
 80096c8:	61fb      	str	r3, [r7, #28]
 80096ca:	e005      	b.n	80096d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80096cc:	4b2d      	ldr	r3, [pc, #180]	; (8009784 <HAL_RCC_GetSysClockFreq+0x108>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	091b      	lsrs	r3, r3, #4
 80096d2:	f003 030f 	and.w	r3, r3, #15
 80096d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80096d8:	4a2b      	ldr	r2, [pc, #172]	; (8009788 <HAL_RCC_GetSysClockFreq+0x10c>)
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10d      	bne.n	8009704 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80096ec:	e00a      	b.n	8009704 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	2b04      	cmp	r3, #4
 80096f2:	d102      	bne.n	80096fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80096f4:	4b25      	ldr	r3, [pc, #148]	; (800978c <HAL_RCC_GetSysClockFreq+0x110>)
 80096f6:	61bb      	str	r3, [r7, #24]
 80096f8:	e004      	b.n	8009704 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	2b08      	cmp	r3, #8
 80096fe:	d101      	bne.n	8009704 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009700:	4b23      	ldr	r3, [pc, #140]	; (8009790 <HAL_RCC_GetSysClockFreq+0x114>)
 8009702:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	2b0c      	cmp	r3, #12
 8009708:	d134      	bne.n	8009774 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800970a:	4b1e      	ldr	r3, [pc, #120]	; (8009784 <HAL_RCC_GetSysClockFreq+0x108>)
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	f003 0303 	and.w	r3, r3, #3
 8009712:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	2b02      	cmp	r3, #2
 8009718:	d003      	beq.n	8009722 <HAL_RCC_GetSysClockFreq+0xa6>
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b03      	cmp	r3, #3
 800971e:	d003      	beq.n	8009728 <HAL_RCC_GetSysClockFreq+0xac>
 8009720:	e005      	b.n	800972e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009722:	4b1a      	ldr	r3, [pc, #104]	; (800978c <HAL_RCC_GetSysClockFreq+0x110>)
 8009724:	617b      	str	r3, [r7, #20]
      break;
 8009726:	e005      	b.n	8009734 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009728:	4b19      	ldr	r3, [pc, #100]	; (8009790 <HAL_RCC_GetSysClockFreq+0x114>)
 800972a:	617b      	str	r3, [r7, #20]
      break;
 800972c:	e002      	b.n	8009734 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	617b      	str	r3, [r7, #20]
      break;
 8009732:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009734:	4b13      	ldr	r3, [pc, #76]	; (8009784 <HAL_RCC_GetSysClockFreq+0x108>)
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	091b      	lsrs	r3, r3, #4
 800973a:	f003 0307 	and.w	r3, r3, #7
 800973e:	3301      	adds	r3, #1
 8009740:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009742:	4b10      	ldr	r3, [pc, #64]	; (8009784 <HAL_RCC_GetSysClockFreq+0x108>)
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	0a1b      	lsrs	r3, r3, #8
 8009748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	fb02 f203 	mul.w	r2, r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	fbb2 f3f3 	udiv	r3, r2, r3
 8009758:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800975a:	4b0a      	ldr	r3, [pc, #40]	; (8009784 <HAL_RCC_GetSysClockFreq+0x108>)
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	0e5b      	lsrs	r3, r3, #25
 8009760:	f003 0303 	and.w	r3, r3, #3
 8009764:	3301      	adds	r3, #1
 8009766:	005b      	lsls	r3, r3, #1
 8009768:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009772:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009774:	69bb      	ldr	r3, [r7, #24]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3724      	adds	r7, #36	; 0x24
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	40021000 	.word	0x40021000
 8009788:	0801ac20 	.word	0x0801ac20
 800978c:	00f42400 	.word	0x00f42400
 8009790:	007a1200 	.word	0x007a1200

08009794 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009794:	b480      	push	{r7}
 8009796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009798:	4b03      	ldr	r3, [pc, #12]	; (80097a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800979a:	681b      	ldr	r3, [r3, #0]
}
 800979c:	4618      	mov	r0, r3
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	20000004 	.word	0x20000004

080097ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80097b0:	f7ff fff0 	bl	8009794 <HAL_RCC_GetHCLKFreq>
 80097b4:	4602      	mov	r2, r0
 80097b6:	4b06      	ldr	r3, [pc, #24]	; (80097d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	0a1b      	lsrs	r3, r3, #8
 80097bc:	f003 0307 	and.w	r3, r3, #7
 80097c0:	4904      	ldr	r1, [pc, #16]	; (80097d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80097c2:	5ccb      	ldrb	r3, [r1, r3]
 80097c4:	f003 031f 	and.w	r3, r3, #31
 80097c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	40021000 	.word	0x40021000
 80097d4:	0801ac18 	.word	0x0801ac18

080097d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80097dc:	f7ff ffda 	bl	8009794 <HAL_RCC_GetHCLKFreq>
 80097e0:	4602      	mov	r2, r0
 80097e2:	4b06      	ldr	r3, [pc, #24]	; (80097fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	0adb      	lsrs	r3, r3, #11
 80097e8:	f003 0307 	and.w	r3, r3, #7
 80097ec:	4904      	ldr	r1, [pc, #16]	; (8009800 <HAL_RCC_GetPCLK2Freq+0x28>)
 80097ee:	5ccb      	ldrb	r3, [r1, r3]
 80097f0:	f003 031f 	and.w	r3, r3, #31
 80097f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	40021000 	.word	0x40021000
 8009800:	0801ac18 	.word	0x0801ac18

08009804 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800980c:	2300      	movs	r3, #0
 800980e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009810:	4b2a      	ldr	r3, [pc, #168]	; (80098bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d003      	beq.n	8009824 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800981c:	f7ff fa02 	bl	8008c24 <HAL_PWREx_GetVoltageRange>
 8009820:	6178      	str	r0, [r7, #20]
 8009822:	e014      	b.n	800984e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009824:	4b25      	ldr	r3, [pc, #148]	; (80098bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009828:	4a24      	ldr	r2, [pc, #144]	; (80098bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800982a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800982e:	6593      	str	r3, [r2, #88]	; 0x58
 8009830:	4b22      	ldr	r3, [pc, #136]	; (80098bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009838:	60fb      	str	r3, [r7, #12]
 800983a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800983c:	f7ff f9f2 	bl	8008c24 <HAL_PWREx_GetVoltageRange>
 8009840:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009842:	4b1e      	ldr	r3, [pc, #120]	; (80098bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009846:	4a1d      	ldr	r2, [pc, #116]	; (80098bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800984c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009854:	d10b      	bne.n	800986e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2b80      	cmp	r3, #128	; 0x80
 800985a:	d919      	bls.n	8009890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2ba0      	cmp	r3, #160	; 0xa0
 8009860:	d902      	bls.n	8009868 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009862:	2302      	movs	r3, #2
 8009864:	613b      	str	r3, [r7, #16]
 8009866:	e013      	b.n	8009890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009868:	2301      	movs	r3, #1
 800986a:	613b      	str	r3, [r7, #16]
 800986c:	e010      	b.n	8009890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b80      	cmp	r3, #128	; 0x80
 8009872:	d902      	bls.n	800987a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009874:	2303      	movs	r3, #3
 8009876:	613b      	str	r3, [r7, #16]
 8009878:	e00a      	b.n	8009890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b80      	cmp	r3, #128	; 0x80
 800987e:	d102      	bne.n	8009886 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009880:	2302      	movs	r3, #2
 8009882:	613b      	str	r3, [r7, #16]
 8009884:	e004      	b.n	8009890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2b70      	cmp	r3, #112	; 0x70
 800988a:	d101      	bne.n	8009890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800988c:	2301      	movs	r3, #1
 800988e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009890:	4b0b      	ldr	r3, [pc, #44]	; (80098c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f023 0207 	bic.w	r2, r3, #7
 8009898:	4909      	ldr	r1, [pc, #36]	; (80098c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	4313      	orrs	r3, r2
 800989e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80098a0:	4b07      	ldr	r3, [pc, #28]	; (80098c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0307 	and.w	r3, r3, #7
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d001      	beq.n	80098b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e000      	b.n	80098b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3718      	adds	r7, #24
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	40021000 	.word	0x40021000
 80098c0:	40022000 	.word	0x40022000

080098c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80098cc:	2300      	movs	r3, #0
 80098ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80098d0:	2300      	movs	r3, #0
 80098d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d041      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80098e8:	d02a      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80098ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80098ee:	d824      	bhi.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80098f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098f4:	d008      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80098f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098fa:	d81e      	bhi.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00a      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009904:	d010      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009906:	e018      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009908:	4b86      	ldr	r3, [pc, #536]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	4a85      	ldr	r2, [pc, #532]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800990e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009912:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009914:	e015      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	3304      	adds	r3, #4
 800991a:	2100      	movs	r1, #0
 800991c:	4618      	mov	r0, r3
 800991e:	f000 fabb 	bl	8009e98 <RCCEx_PLLSAI1_Config>
 8009922:	4603      	mov	r3, r0
 8009924:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009926:	e00c      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	3320      	adds	r3, #32
 800992c:	2100      	movs	r1, #0
 800992e:	4618      	mov	r0, r3
 8009930:	f000 fba6 	bl	800a080 <RCCEx_PLLSAI2_Config>
 8009934:	4603      	mov	r3, r0
 8009936:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009938:	e003      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	74fb      	strb	r3, [r7, #19]
      break;
 800993e:	e000      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009942:	7cfb      	ldrb	r3, [r7, #19]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10b      	bne.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009948:	4b76      	ldr	r3, [pc, #472]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800994a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800994e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009956:	4973      	ldr	r1, [pc, #460]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009958:	4313      	orrs	r3, r2
 800995a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800995e:	e001      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009960:	7cfb      	ldrb	r3, [r7, #19]
 8009962:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d041      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009974:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009978:	d02a      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800997a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800997e:	d824      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009980:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009984:	d008      	beq.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800998a:	d81e      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00a      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009994:	d010      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009996:	e018      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009998:	4b62      	ldr	r3, [pc, #392]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	4a61      	ldr	r2, [pc, #388]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800999e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80099a4:	e015      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	3304      	adds	r3, #4
 80099aa:	2100      	movs	r1, #0
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 fa73 	bl	8009e98 <RCCEx_PLLSAI1_Config>
 80099b2:	4603      	mov	r3, r0
 80099b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80099b6:	e00c      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	3320      	adds	r3, #32
 80099bc:	2100      	movs	r1, #0
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 fb5e 	bl	800a080 <RCCEx_PLLSAI2_Config>
 80099c4:	4603      	mov	r3, r0
 80099c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80099c8:	e003      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	74fb      	strb	r3, [r7, #19]
      break;
 80099ce:	e000      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80099d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099d2:	7cfb      	ldrb	r3, [r7, #19]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10b      	bne.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80099d8:	4b52      	ldr	r3, [pc, #328]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80099da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099e6:	494f      	ldr	r1, [pc, #316]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80099e8:	4313      	orrs	r3, r2
 80099ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80099ee:	e001      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f0:	7cfb      	ldrb	r3, [r7, #19]
 80099f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 80a0 	beq.w	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a02:	2300      	movs	r3, #0
 8009a04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009a06:	4b47      	ldr	r3, [pc, #284]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d101      	bne.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009a12:	2301      	movs	r3, #1
 8009a14:	e000      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8009a16:	2300      	movs	r3, #0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00d      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a1c:	4b41      	ldr	r3, [pc, #260]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a20:	4a40      	ldr	r2, [pc, #256]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a26:	6593      	str	r3, [r2, #88]	; 0x58
 8009a28:	4b3e      	ldr	r3, [pc, #248]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a30:	60bb      	str	r3, [r7, #8]
 8009a32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a34:	2301      	movs	r3, #1
 8009a36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a38:	4b3b      	ldr	r3, [pc, #236]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a3a      	ldr	r2, [pc, #232]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a44:	f7fd fb46 	bl	80070d4 <HAL_GetTick>
 8009a48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009a4a:	e009      	b.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a4c:	f7fd fb42 	bl	80070d4 <HAL_GetTick>
 8009a50:	4602      	mov	r2, r0
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d902      	bls.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	74fb      	strb	r3, [r7, #19]
        break;
 8009a5e:	e005      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009a60:	4b31      	ldr	r3, [pc, #196]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d0ef      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009a6c:	7cfb      	ldrb	r3, [r7, #19]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d15c      	bne.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009a72:	4b2c      	ldr	r3, [pc, #176]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d01f      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d019      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009a90:	4b24      	ldr	r3, [pc, #144]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a9c:	4b21      	ldr	r3, [pc, #132]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aa2:	4a20      	ldr	r2, [pc, #128]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009aac:	4b1d      	ldr	r3, [pc, #116]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ab2:	4a1c      	ldr	r2, [pc, #112]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009abc:	4a19      	ldr	r2, [pc, #100]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d016      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ace:	f7fd fb01 	bl	80070d4 <HAL_GetTick>
 8009ad2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009ad4:	e00b      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ad6:	f7fd fafd 	bl	80070d4 <HAL_GetTick>
 8009ada:	4602      	mov	r2, r0
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d902      	bls.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	74fb      	strb	r3, [r7, #19]
            break;
 8009aec:	e006      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009aee:	4b0d      	ldr	r3, [pc, #52]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009af4:	f003 0302 	and.w	r3, r3, #2
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d0ec      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009afc:	7cfb      	ldrb	r3, [r7, #19]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10c      	bne.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b02:	4b08      	ldr	r3, [pc, #32]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b12:	4904      	ldr	r1, [pc, #16]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b14:	4313      	orrs	r3, r2
 8009b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009b1a:	e009      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b1c:	7cfb      	ldrb	r3, [r7, #19]
 8009b1e:	74bb      	strb	r3, [r7, #18]
 8009b20:	e006      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009b22:	bf00      	nop
 8009b24:	40021000 	.word	0x40021000
 8009b28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b2c:	7cfb      	ldrb	r3, [r7, #19]
 8009b2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b30:	7c7b      	ldrb	r3, [r7, #17]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d105      	bne.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b36:	4b9e      	ldr	r3, [pc, #632]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b3a:	4a9d      	ldr	r2, [pc, #628]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00a      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009b4e:	4b98      	ldr	r3, [pc, #608]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b54:	f023 0203 	bic.w	r2, r3, #3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5c:	4994      	ldr	r1, [pc, #592]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0302 	and.w	r3, r3, #2
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00a      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009b70:	4b8f      	ldr	r3, [pc, #572]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b76:	f023 020c 	bic.w	r2, r3, #12
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b7e:	498c      	ldr	r1, [pc, #560]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b80:	4313      	orrs	r3, r2
 8009b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0304 	and.w	r3, r3, #4
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00a      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009b92:	4b87      	ldr	r3, [pc, #540]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba0:	4983      	ldr	r1, [pc, #524]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0308 	and.w	r3, r3, #8
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00a      	beq.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009bb4:	4b7e      	ldr	r3, [pc, #504]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc2:	497b      	ldr	r1, [pc, #492]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 0310 	and.w	r3, r3, #16
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00a      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009bd6:	4b76      	ldr	r3, [pc, #472]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009be4:	4972      	ldr	r1, [pc, #456]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009be6:	4313      	orrs	r3, r2
 8009be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 0320 	and.w	r3, r3, #32
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00a      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009bf8:	4b6d      	ldr	r3, [pc, #436]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c06:	496a      	ldr	r1, [pc, #424]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00a      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c1a:	4b65      	ldr	r3, [pc, #404]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c28:	4961      	ldr	r1, [pc, #388]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00a      	beq.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c3c:	4b5c      	ldr	r3, [pc, #368]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c4a:	4959      	ldr	r1, [pc, #356]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00a      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009c5e:	4b54      	ldr	r3, [pc, #336]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c6c:	4950      	ldr	r1, [pc, #320]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00a      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009c80:	4b4b      	ldr	r3, [pc, #300]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c8e:	4948      	ldr	r1, [pc, #288]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c90:	4313      	orrs	r3, r2
 8009c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00a      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009ca2:	4b43      	ldr	r3, [pc, #268]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ca8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cb0:	493f      	ldr	r1, [pc, #252]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d028      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009cc4:	4b3a      	ldr	r3, [pc, #232]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cd2:	4937      	ldr	r1, [pc, #220]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ce2:	d106      	bne.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ce4:	4b32      	ldr	r3, [pc, #200]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	4a31      	ldr	r2, [pc, #196]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cee:	60d3      	str	r3, [r2, #12]
 8009cf0:	e011      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cfa:	d10c      	bne.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	3304      	adds	r3, #4
 8009d00:	2101      	movs	r1, #1
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 f8c8 	bl	8009e98 <RCCEx_PLLSAI1_Config>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009d0c:	7cfb      	ldrb	r3, [r7, #19]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8009d12:	7cfb      	ldrb	r3, [r7, #19]
 8009d14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d028      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009d22:	4b23      	ldr	r3, [pc, #140]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d30:	491f      	ldr	r1, [pc, #124]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d32:	4313      	orrs	r3, r2
 8009d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d40:	d106      	bne.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d42:	4b1b      	ldr	r3, [pc, #108]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	4a1a      	ldr	r2, [pc, #104]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d4c:	60d3      	str	r3, [r2, #12]
 8009d4e:	e011      	b.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d58:	d10c      	bne.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	2101      	movs	r1, #1
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 f899 	bl	8009e98 <RCCEx_PLLSAI1_Config>
 8009d66:	4603      	mov	r3, r0
 8009d68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009d6a:	7cfb      	ldrb	r3, [r7, #19]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009d70:	7cfb      	ldrb	r3, [r7, #19]
 8009d72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d02b      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d80:	4b0b      	ldr	r3, [pc, #44]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d8e:	4908      	ldr	r1, [pc, #32]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d90:	4313      	orrs	r3, r2
 8009d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d9e:	d109      	bne.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009da0:	4b03      	ldr	r3, [pc, #12]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	4a02      	ldr	r2, [pc, #8]	; (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009daa:	60d3      	str	r3, [r2, #12]
 8009dac:	e014      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009dae:	bf00      	nop
 8009db0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009db8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009dbc:	d10c      	bne.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	2101      	movs	r1, #1
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 f867 	bl	8009e98 <RCCEx_PLLSAI1_Config>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009dce:	7cfb      	ldrb	r3, [r7, #19]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d001      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8009dd4:	7cfb      	ldrb	r3, [r7, #19]
 8009dd6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d02f      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009de4:	4b2b      	ldr	r3, [pc, #172]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009df2:	4928      	ldr	r1, [pc, #160]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009df4:	4313      	orrs	r3, r2
 8009df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e02:	d10d      	bne.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	3304      	adds	r3, #4
 8009e08:	2102      	movs	r1, #2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 f844 	bl	8009e98 <RCCEx_PLLSAI1_Config>
 8009e10:	4603      	mov	r3, r0
 8009e12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009e14:	7cfb      	ldrb	r3, [r7, #19]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d014      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009e1a:	7cfb      	ldrb	r3, [r7, #19]
 8009e1c:	74bb      	strb	r3, [r7, #18]
 8009e1e:	e011      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e28:	d10c      	bne.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	3320      	adds	r3, #32
 8009e2e:	2102      	movs	r1, #2
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 f925 	bl	800a080 <RCCEx_PLLSAI2_Config>
 8009e36:	4603      	mov	r3, r0
 8009e38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009e3a:	7cfb      	ldrb	r3, [r7, #19]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009e40:	7cfb      	ldrb	r3, [r7, #19]
 8009e42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00a      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e50:	4b10      	ldr	r3, [pc, #64]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e5e:	490d      	ldr	r1, [pc, #52]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009e60:	4313      	orrs	r3, r2
 8009e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00b      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009e72:	4b08      	ldr	r3, [pc, #32]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e82:	4904      	ldr	r1, [pc, #16]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009e84:	4313      	orrs	r3, r2
 8009e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009e8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3718      	adds	r7, #24
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	40021000 	.word	0x40021000

08009e98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009ea6:	4b75      	ldr	r3, [pc, #468]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	f003 0303 	and.w	r3, r3, #3
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d018      	beq.n	8009ee4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009eb2:	4b72      	ldr	r3, [pc, #456]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	f003 0203 	and.w	r2, r3, #3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d10d      	bne.n	8009ede <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
       ||
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d009      	beq.n	8009ede <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009eca:	4b6c      	ldr	r3, [pc, #432]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	091b      	lsrs	r3, r3, #4
 8009ed0:	f003 0307 	and.w	r3, r3, #7
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
       ||
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d047      	beq.n	8009f6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	73fb      	strb	r3, [r7, #15]
 8009ee2:	e044      	b.n	8009f6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b03      	cmp	r3, #3
 8009eea:	d018      	beq.n	8009f1e <RCCEx_PLLSAI1_Config+0x86>
 8009eec:	2b03      	cmp	r3, #3
 8009eee:	d825      	bhi.n	8009f3c <RCCEx_PLLSAI1_Config+0xa4>
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d002      	beq.n	8009efa <RCCEx_PLLSAI1_Config+0x62>
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d009      	beq.n	8009f0c <RCCEx_PLLSAI1_Config+0x74>
 8009ef8:	e020      	b.n	8009f3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009efa:	4b60      	ldr	r3, [pc, #384]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 0302 	and.w	r3, r3, #2
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d11d      	bne.n	8009f42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f0a:	e01a      	b.n	8009f42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009f0c:	4b5b      	ldr	r3, [pc, #364]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d116      	bne.n	8009f46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f1c:	e013      	b.n	8009f46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009f1e:	4b57      	ldr	r3, [pc, #348]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10f      	bne.n	8009f4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009f2a:	4b54      	ldr	r3, [pc, #336]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d109      	bne.n	8009f4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009f3a:	e006      	b.n	8009f4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f40:	e004      	b.n	8009f4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009f42:	bf00      	nop
 8009f44:	e002      	b.n	8009f4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009f46:	bf00      	nop
 8009f48:	e000      	b.n	8009f4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009f4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10d      	bne.n	8009f6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009f52:	4b4a      	ldr	r3, [pc, #296]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6819      	ldr	r1, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	011b      	lsls	r3, r3, #4
 8009f66:	430b      	orrs	r3, r1
 8009f68:	4944      	ldr	r1, [pc, #272]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009f6e:	7bfb      	ldrb	r3, [r7, #15]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d17d      	bne.n	800a070 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009f74:	4b41      	ldr	r3, [pc, #260]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a40      	ldr	r2, [pc, #256]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009f7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009f7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f80:	f7fd f8a8 	bl	80070d4 <HAL_GetTick>
 8009f84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009f86:	e009      	b.n	8009f9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009f88:	f7fd f8a4 	bl	80070d4 <HAL_GetTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	d902      	bls.n	8009f9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	73fb      	strb	r3, [r7, #15]
        break;
 8009f9a:	e005      	b.n	8009fa8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009f9c:	4b37      	ldr	r3, [pc, #220]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1ef      	bne.n	8009f88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d160      	bne.n	800a070 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d111      	bne.n	8009fd8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009fb4:	4b31      	ldr	r3, [pc, #196]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	6892      	ldr	r2, [r2, #8]
 8009fc4:	0211      	lsls	r1, r2, #8
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	68d2      	ldr	r2, [r2, #12]
 8009fca:	0912      	lsrs	r2, r2, #4
 8009fcc:	0452      	lsls	r2, r2, #17
 8009fce:	430a      	orrs	r2, r1
 8009fd0:	492a      	ldr	r1, [pc, #168]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	610b      	str	r3, [r1, #16]
 8009fd6:	e027      	b.n	800a028 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d112      	bne.n	800a004 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009fde:	4b27      	ldr	r3, [pc, #156]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009fe6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	6892      	ldr	r2, [r2, #8]
 8009fee:	0211      	lsls	r1, r2, #8
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	6912      	ldr	r2, [r2, #16]
 8009ff4:	0852      	lsrs	r2, r2, #1
 8009ff6:	3a01      	subs	r2, #1
 8009ff8:	0552      	lsls	r2, r2, #21
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	491f      	ldr	r1, [pc, #124]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009ffe:	4313      	orrs	r3, r2
 800a000:	610b      	str	r3, [r1, #16]
 800a002:	e011      	b.n	800a028 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a004:	4b1d      	ldr	r3, [pc, #116]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a00c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	6892      	ldr	r2, [r2, #8]
 800a014:	0211      	lsls	r1, r2, #8
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	6952      	ldr	r2, [r2, #20]
 800a01a:	0852      	lsrs	r2, r2, #1
 800a01c:	3a01      	subs	r2, #1
 800a01e:	0652      	lsls	r2, r2, #25
 800a020:	430a      	orrs	r2, r1
 800a022:	4916      	ldr	r1, [pc, #88]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a024:	4313      	orrs	r3, r2
 800a026:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a028:	4b14      	ldr	r3, [pc, #80]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a13      	ldr	r2, [pc, #76]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a02e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a032:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a034:	f7fd f84e 	bl	80070d4 <HAL_GetTick>
 800a038:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a03a:	e009      	b.n	800a050 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a03c:	f7fd f84a 	bl	80070d4 <HAL_GetTick>
 800a040:	4602      	mov	r2, r0
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	2b02      	cmp	r3, #2
 800a048:	d902      	bls.n	800a050 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800a04a:	2303      	movs	r3, #3
 800a04c:	73fb      	strb	r3, [r7, #15]
          break;
 800a04e:	e005      	b.n	800a05c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a050:	4b0a      	ldr	r3, [pc, #40]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d0ef      	beq.n	800a03c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d106      	bne.n	800a070 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a062:	4b06      	ldr	r3, [pc, #24]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a064:	691a      	ldr	r2, [r3, #16]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	4904      	ldr	r1, [pc, #16]	; (800a07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a06c:	4313      	orrs	r3, r2
 800a06e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a070:	7bfb      	ldrb	r3, [r7, #15]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	40021000 	.word	0x40021000

0800a080 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a08a:	2300      	movs	r3, #0
 800a08c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a08e:	4b6a      	ldr	r3, [pc, #424]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	f003 0303 	and.w	r3, r3, #3
 800a096:	2b00      	cmp	r3, #0
 800a098:	d018      	beq.n	800a0cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a09a:	4b67      	ldr	r3, [pc, #412]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	f003 0203 	and.w	r2, r3, #3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d10d      	bne.n	800a0c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
       ||
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d009      	beq.n	800a0c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a0b2:	4b61      	ldr	r3, [pc, #388]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	091b      	lsrs	r3, r3, #4
 800a0b8:	f003 0307 	and.w	r3, r3, #7
 800a0bc:	1c5a      	adds	r2, r3, #1
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
       ||
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d047      	beq.n	800a156 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	73fb      	strb	r3, [r7, #15]
 800a0ca:	e044      	b.n	800a156 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d018      	beq.n	800a106 <RCCEx_PLLSAI2_Config+0x86>
 800a0d4:	2b03      	cmp	r3, #3
 800a0d6:	d825      	bhi.n	800a124 <RCCEx_PLLSAI2_Config+0xa4>
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d002      	beq.n	800a0e2 <RCCEx_PLLSAI2_Config+0x62>
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d009      	beq.n	800a0f4 <RCCEx_PLLSAI2_Config+0x74>
 800a0e0:	e020      	b.n	800a124 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a0e2:	4b55      	ldr	r3, [pc, #340]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0302 	and.w	r3, r3, #2
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d11d      	bne.n	800a12a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0f2:	e01a      	b.n	800a12a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a0f4:	4b50      	ldr	r3, [pc, #320]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d116      	bne.n	800a12e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a104:	e013      	b.n	800a12e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a106:	4b4c      	ldr	r3, [pc, #304]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10f      	bne.n	800a132 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a112:	4b49      	ldr	r3, [pc, #292]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d109      	bne.n	800a132 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a122:	e006      	b.n	800a132 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	73fb      	strb	r3, [r7, #15]
      break;
 800a128:	e004      	b.n	800a134 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a12a:	bf00      	nop
 800a12c:	e002      	b.n	800a134 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a12e:	bf00      	nop
 800a130:	e000      	b.n	800a134 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a132:	bf00      	nop
    }

    if(status == HAL_OK)
 800a134:	7bfb      	ldrb	r3, [r7, #15]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10d      	bne.n	800a156 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a13a:	4b3f      	ldr	r3, [pc, #252]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6819      	ldr	r1, [r3, #0]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	3b01      	subs	r3, #1
 800a14c:	011b      	lsls	r3, r3, #4
 800a14e:	430b      	orrs	r3, r1
 800a150:	4939      	ldr	r1, [pc, #228]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a152:	4313      	orrs	r3, r2
 800a154:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d167      	bne.n	800a22c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a15c:	4b36      	ldr	r3, [pc, #216]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a35      	ldr	r2, [pc, #212]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a166:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a168:	f7fc ffb4 	bl	80070d4 <HAL_GetTick>
 800a16c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a16e:	e009      	b.n	800a184 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a170:	f7fc ffb0 	bl	80070d4 <HAL_GetTick>
 800a174:	4602      	mov	r2, r0
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d902      	bls.n	800a184 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	73fb      	strb	r3, [r7, #15]
        break;
 800a182:	e005      	b.n	800a190 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a184:	4b2c      	ldr	r3, [pc, #176]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1ef      	bne.n	800a170 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a190:	7bfb      	ldrb	r3, [r7, #15]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d14a      	bne.n	800a22c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d111      	bne.n	800a1c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a19c:	4b26      	ldr	r3, [pc, #152]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a19e:	695b      	ldr	r3, [r3, #20]
 800a1a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a1a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	6892      	ldr	r2, [r2, #8]
 800a1ac:	0211      	lsls	r1, r2, #8
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	68d2      	ldr	r2, [r2, #12]
 800a1b2:	0912      	lsrs	r2, r2, #4
 800a1b4:	0452      	lsls	r2, r2, #17
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	491f      	ldr	r1, [pc, #124]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	614b      	str	r3, [r1, #20]
 800a1be:	e011      	b.n	800a1e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a1c0:	4b1d      	ldr	r3, [pc, #116]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a1c2:	695b      	ldr	r3, [r3, #20]
 800a1c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a1c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	6892      	ldr	r2, [r2, #8]
 800a1d0:	0211      	lsls	r1, r2, #8
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	6912      	ldr	r2, [r2, #16]
 800a1d6:	0852      	lsrs	r2, r2, #1
 800a1d8:	3a01      	subs	r2, #1
 800a1da:	0652      	lsls	r2, r2, #25
 800a1dc:	430a      	orrs	r2, r1
 800a1de:	4916      	ldr	r1, [pc, #88]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a1e4:	4b14      	ldr	r3, [pc, #80]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a13      	ldr	r2, [pc, #76]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a1ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1f0:	f7fc ff70 	bl	80070d4 <HAL_GetTick>
 800a1f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a1f6:	e009      	b.n	800a20c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a1f8:	f7fc ff6c 	bl	80070d4 <HAL_GetTick>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	2b02      	cmp	r3, #2
 800a204:	d902      	bls.n	800a20c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	73fb      	strb	r3, [r7, #15]
          break;
 800a20a:	e005      	b.n	800a218 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a20c:	4b0a      	ldr	r3, [pc, #40]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a214:	2b00      	cmp	r3, #0
 800a216:	d0ef      	beq.n	800a1f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800a218:	7bfb      	ldrb	r3, [r7, #15]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d106      	bne.n	800a22c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a21e:	4b06      	ldr	r3, [pc, #24]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a220:	695a      	ldr	r2, [r3, #20]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	4904      	ldr	r1, [pc, #16]	; (800a238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a228:	4313      	orrs	r3, r2
 800a22a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	40021000 	.word	0x40021000

0800a23c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d06c      	beq.n	800a328 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b00      	cmp	r3, #0
 800a258:	d106      	bne.n	800a268 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7f7 f818 	bl	8001298 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2202      	movs	r2, #2
 800a26c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	22ca      	movs	r2, #202	; 0xca
 800a276:	625a      	str	r2, [r3, #36]	; 0x24
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2253      	movs	r2, #83	; 0x53
 800a27e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fa49 	bl	800a718 <RTC_EnterInitMode>
 800a286:	4603      	mov	r3, r0
 800a288:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a28a:	7bfb      	ldrb	r3, [r7, #15]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d14b      	bne.n	800a328 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	6812      	ldr	r2, [r2, #0]
 800a29a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a29e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2a2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	6899      	ldr	r1, [r3, #8]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	691b      	ldr	r3, [r3, #16]
 800a2b2:	431a      	orrs	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	431a      	orrs	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	68d2      	ldr	r2, [r2, #12]
 800a2ca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6919      	ldr	r1, [r3, #16]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	041a      	lsls	r2, r3, #16
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fa4d 	bl	800a780 <RTC_ExitInitMode>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d11b      	bne.n	800a328 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f022 0203 	bic.w	r2, r2, #3
 800a2fe:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	69da      	ldr	r2, [r3, #28]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	431a      	orrs	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	430a      	orrs	r2, r1
 800a316:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	22ff      	movs	r2, #255	; 0xff
 800a31e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800a328:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a332:	b590      	push	{r4, r7, lr}
 800a334:	b087      	sub	sp, #28
 800a336:	af00      	add	r7, sp, #0
 800a338:	60f8      	str	r0, [r7, #12]
 800a33a:	60b9      	str	r1, [r7, #8]
 800a33c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a344:	2b01      	cmp	r3, #1
 800a346:	d101      	bne.n	800a34c <HAL_RTC_SetTime+0x1a>
 800a348:	2302      	movs	r3, #2
 800a34a:	e08b      	b.n	800a464 <HAL_RTC_SetTime+0x132>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2202      	movs	r2, #2
 800a358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	22ca      	movs	r2, #202	; 0xca
 800a362:	625a      	str	r2, [r3, #36]	; 0x24
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2253      	movs	r2, #83	; 0x53
 800a36a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f000 f9d3 	bl	800a718 <RTC_EnterInitMode>
 800a372:	4603      	mov	r3, r0
 800a374:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a376:	7cfb      	ldrb	r3, [r7, #19]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d163      	bne.n	800a444 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d126      	bne.n	800a3d0 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d102      	bne.n	800a396 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2200      	movs	r2, #0
 800a394:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 fa2e 	bl	800a7fc <RTC_ByteToBcd2>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	785b      	ldrb	r3, [r3, #1]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 fa27 	bl	800a7fc <RTC_ByteToBcd2>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a3b2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	789b      	ldrb	r3, [r3, #2]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f000 fa1f 	bl	800a7fc <RTC_ByteToBcd2>
 800a3be:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a3c0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	78db      	ldrb	r3, [r3, #3]
 800a3c8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	617b      	str	r3, [r7, #20]
 800a3ce:	e018      	b.n	800a402 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d102      	bne.n	800a3e4 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	785b      	ldrb	r3, [r3, #1]
 800a3ee:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a3f0:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a3f6:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	78db      	ldrb	r3, [r3, #3]
 800a3fc:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a3fe:	4313      	orrs	r3, r2
 800a400:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a40c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a410:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	689a      	ldr	r2, [r3, #8]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a420:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	6899      	ldr	r1, [r3, #8]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	68da      	ldr	r2, [r3, #12]
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	431a      	orrs	r2, r3
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	430a      	orrs	r2, r1
 800a438:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f000 f9a0 	bl	800a780 <RTC_ExitInitMode>
 800a440:	4603      	mov	r3, r0
 800a442:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	22ff      	movs	r2, #255	; 0xff
 800a44a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a44c:	7cfb      	ldrb	r3, [r7, #19]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d103      	bne.n	800a45a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2201      	movs	r2, #1
 800a456:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a462:	7cfb      	ldrb	r3, [r7, #19]
}
 800a464:	4618      	mov	r0, r3
 800a466:	371c      	adds	r7, #28
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd90      	pop	{r4, r7, pc}

0800a46c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a49a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a49e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	0c1b      	lsrs	r3, r3, #16
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	0a1b      	lsrs	r3, r3, #8
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	0d9b      	lsrs	r3, r3, #22
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d11a      	bne.n	800a51a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 f9a7 	bl	800a83c <RTC_Bcd2ToByte>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	785b      	ldrb	r3, [r3, #1]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 f99e 	bl	800a83c <RTC_Bcd2ToByte>
 800a500:	4603      	mov	r3, r0
 800a502:	461a      	mov	r2, r3
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	789b      	ldrb	r3, [r3, #2]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f000 f995 	bl	800a83c <RTC_Bcd2ToByte>
 800a512:	4603      	mov	r3, r0
 800a514:	461a      	mov	r2, r3
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3718      	adds	r7, #24
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a524:	b590      	push	{r4, r7, lr}
 800a526:	b087      	sub	sp, #28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a536:	2b01      	cmp	r3, #1
 800a538:	d101      	bne.n	800a53e <HAL_RTC_SetDate+0x1a>
 800a53a:	2302      	movs	r3, #2
 800a53c:	e075      	b.n	800a62a <HAL_RTC_SetDate+0x106>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2202      	movs	r2, #2
 800a54a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d10e      	bne.n	800a572 <HAL_RTC_SetDate+0x4e>
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	785b      	ldrb	r3, [r3, #1]
 800a558:	f003 0310 	and.w	r3, r3, #16
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d008      	beq.n	800a572 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	785b      	ldrb	r3, [r3, #1]
 800a564:	f023 0310 	bic.w	r3, r3, #16
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	330a      	adds	r3, #10
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d11c      	bne.n	800a5b2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	78db      	ldrb	r3, [r3, #3]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f000 f93d 	bl	800a7fc <RTC_ByteToBcd2>
 800a582:	4603      	mov	r3, r0
 800a584:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	785b      	ldrb	r3, [r3, #1]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 f936 	bl	800a7fc <RTC_ByteToBcd2>
 800a590:	4603      	mov	r3, r0
 800a592:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a594:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	789b      	ldrb	r3, [r3, #2]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 f92e 	bl	800a7fc <RTC_ByteToBcd2>
 800a5a0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a5a2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	617b      	str	r3, [r7, #20]
 800a5b0:	e00e      	b.n	800a5d0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	78db      	ldrb	r3, [r3, #3]
 800a5b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	785b      	ldrb	r3, [r3, #1]
 800a5bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a5be:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a5c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	22ca      	movs	r2, #202	; 0xca
 800a5d6:	625a      	str	r2, [r3, #36]	; 0x24
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2253      	movs	r2, #83	; 0x53
 800a5de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f000 f899 	bl	800a718 <RTC_EnterInitMode>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a5ea:	7cfb      	ldrb	r3, [r7, #19]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10c      	bne.n	800a60a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a5fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a5fe:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f000 f8bd 	bl	800a780 <RTC_ExitInitMode>
 800a606:	4603      	mov	r3, r0
 800a608:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	22ff      	movs	r2, #255	; 0xff
 800a610:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a612:	7cfb      	ldrb	r3, [r7, #19]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d103      	bne.n	800a620 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a628:	7cfb      	ldrb	r3, [r7, #19]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	371c      	adds	r7, #28
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd90      	pop	{r4, r7, pc}

0800a632 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b086      	sub	sp, #24
 800a636:	af00      	add	r7, sp, #0
 800a638:	60f8      	str	r0, [r7, #12]
 800a63a:	60b9      	str	r1, [r7, #8]
 800a63c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a648:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a64c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	0c1b      	lsrs	r3, r3, #16
 800a652:	b2da      	uxtb	r2, r3
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	0a1b      	lsrs	r3, r3, #8
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	f003 031f 	and.w	r3, r3, #31
 800a662:	b2da      	uxtb	r2, r3
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a670:	b2da      	uxtb	r2, r3
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	0b5b      	lsrs	r3, r3, #13
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	f003 0307 	and.w	r3, r3, #7
 800a680:	b2da      	uxtb	r2, r3
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d11a      	bne.n	800a6c2 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	78db      	ldrb	r3, [r3, #3]
 800a690:	4618      	mov	r0, r3
 800a692:	f000 f8d3 	bl	800a83c <RTC_Bcd2ToByte>
 800a696:	4603      	mov	r3, r0
 800a698:	461a      	mov	r2, r3
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	785b      	ldrb	r3, [r3, #1]
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f000 f8ca 	bl	800a83c <RTC_Bcd2ToByte>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	789b      	ldrb	r3, [r3, #2]
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f000 f8c1 	bl	800a83c <RTC_Bcd2ToByte>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	461a      	mov	r2, r3
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3718      	adds	r7, #24
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68da      	ldr	r2, [r3, #12]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a6e2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800a6e4:	f7fc fcf6 	bl	80070d4 <HAL_GetTick>
 800a6e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a6ea:	e009      	b.n	800a700 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a6ec:	f7fc fcf2 	bl	80070d4 <HAL_GetTick>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6fa:	d901      	bls.n	800a700 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e007      	b.n	800a710 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	f003 0320 	and.w	r3, r3, #32
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d0ee      	beq.n	800a6ec <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d120      	bne.n	800a774 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f04f 32ff 	mov.w	r2, #4294967295
 800a73a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a73c:	f7fc fcca 	bl	80070d4 <HAL_GetTick>
 800a740:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a742:	e00d      	b.n	800a760 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a744:	f7fc fcc6 	bl	80070d4 <HAL_GetTick>
 800a748:	4602      	mov	r2, r0
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a752:	d905      	bls.n	800a760 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a754:	2303      	movs	r3, #3
 800a756:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2203      	movs	r2, #3
 800a75c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d102      	bne.n	800a774 <RTC_EnterInitMode+0x5c>
 800a76e:	7bfb      	ldrb	r3, [r7, #15]
 800a770:	2b03      	cmp	r3, #3
 800a772:	d1e7      	bne.n	800a744 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800a774:	7bfb      	ldrb	r3, [r7, #15]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
	...

0800a780 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800a78c:	4b1a      	ldr	r3, [pc, #104]	; (800a7f8 <RTC_ExitInitMode+0x78>)
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	4a19      	ldr	r2, [pc, #100]	; (800a7f8 <RTC_ExitInitMode+0x78>)
 800a792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a796:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a798:	4b17      	ldr	r3, [pc, #92]	; (800a7f8 <RTC_ExitInitMode+0x78>)
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	f003 0320 	and.w	r3, r3, #32
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10c      	bne.n	800a7be <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f7ff ff91 	bl	800a6cc <HAL_RTC_WaitForSynchro>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d01e      	beq.n	800a7ee <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2203      	movs	r2, #3
 800a7b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a7b8:	2303      	movs	r3, #3
 800a7ba:	73fb      	strb	r3, [r7, #15]
 800a7bc:	e017      	b.n	800a7ee <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a7be:	4b0e      	ldr	r3, [pc, #56]	; (800a7f8 <RTC_ExitInitMode+0x78>)
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	4a0d      	ldr	r2, [pc, #52]	; (800a7f8 <RTC_ExitInitMode+0x78>)
 800a7c4:	f023 0320 	bic.w	r3, r3, #32
 800a7c8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f7ff ff7e 	bl	800a6cc <HAL_RTC_WaitForSynchro>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d005      	beq.n	800a7e2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2203      	movs	r2, #3
 800a7da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a7e2:	4b05      	ldr	r3, [pc, #20]	; (800a7f8 <RTC_ExitInitMode+0x78>)
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	4a04      	ldr	r2, [pc, #16]	; (800a7f8 <RTC_ExitInitMode+0x78>)
 800a7e8:	f043 0320 	orr.w	r3, r3, #32
 800a7ec:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	40002800 	.word	0x40002800

0800a7fc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	4603      	mov	r3, r0
 800a804:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a806:	2300      	movs	r3, #0
 800a808:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800a80a:	79fb      	ldrb	r3, [r7, #7]
 800a80c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800a80e:	e005      	b.n	800a81c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	3301      	adds	r3, #1
 800a814:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800a816:	7afb      	ldrb	r3, [r7, #11]
 800a818:	3b0a      	subs	r3, #10
 800a81a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800a81c:	7afb      	ldrb	r3, [r7, #11]
 800a81e:	2b09      	cmp	r3, #9
 800a820:	d8f6      	bhi.n	800a810 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	b2db      	uxtb	r3, r3
 800a826:	011b      	lsls	r3, r3, #4
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	7afb      	ldrb	r3, [r7, #11]
 800a82c:	4313      	orrs	r3, r2
 800a82e:	b2db      	uxtb	r3, r3
}
 800a830:	4618      	mov	r0, r3
 800a832:	3714      	adds	r7, #20
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	4603      	mov	r3, r0
 800a844:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800a846:	79fb      	ldrb	r3, [r7, #7]
 800a848:	091b      	lsrs	r3, r3, #4
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	461a      	mov	r2, r3
 800a84e:	0092      	lsls	r2, r2, #2
 800a850:	4413      	add	r3, r2
 800a852:	005b      	lsls	r3, r3, #1
 800a854:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800a856:	79fb      	ldrb	r3, [r7, #7]
 800a858:	f003 030f 	and.w	r3, r3, #15
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	4413      	add	r3, r2
 800a862:	b2db      	uxtb	r3, r3
}
 800a864:	4618      	mov	r0, r3
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e049      	b.n	800a916 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d106      	bne.n	800a89c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7f6 fd30 	bl	80012fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2202      	movs	r2, #2
 800a8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3304      	adds	r3, #4
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4610      	mov	r0, r2
 800a8b0:	f000 fae6 	bl	800ae80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
	...

0800a920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b01      	cmp	r3, #1
 800a932:	d001      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	e04f      	b.n	800a9d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2202      	movs	r2, #2
 800a93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68da      	ldr	r2, [r3, #12]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f042 0201 	orr.w	r2, r2, #1
 800a94e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a23      	ldr	r2, [pc, #140]	; (800a9e4 <HAL_TIM_Base_Start_IT+0xc4>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d01d      	beq.n	800a996 <HAL_TIM_Base_Start_IT+0x76>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a962:	d018      	beq.n	800a996 <HAL_TIM_Base_Start_IT+0x76>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a1f      	ldr	r2, [pc, #124]	; (800a9e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d013      	beq.n	800a996 <HAL_TIM_Base_Start_IT+0x76>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a1e      	ldr	r2, [pc, #120]	; (800a9ec <HAL_TIM_Base_Start_IT+0xcc>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d00e      	beq.n	800a996 <HAL_TIM_Base_Start_IT+0x76>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a1c      	ldr	r2, [pc, #112]	; (800a9f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d009      	beq.n	800a996 <HAL_TIM_Base_Start_IT+0x76>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a1b      	ldr	r2, [pc, #108]	; (800a9f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d004      	beq.n	800a996 <HAL_TIM_Base_Start_IT+0x76>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a19      	ldr	r2, [pc, #100]	; (800a9f8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d115      	bne.n	800a9c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	689a      	ldr	r2, [r3, #8]
 800a99c:	4b17      	ldr	r3, [pc, #92]	; (800a9fc <HAL_TIM_Base_Start_IT+0xdc>)
 800a99e:	4013      	ands	r3, r2
 800a9a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2b06      	cmp	r3, #6
 800a9a6:	d015      	beq.n	800a9d4 <HAL_TIM_Base_Start_IT+0xb4>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ae:	d011      	beq.n	800a9d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f042 0201 	orr.w	r2, r2, #1
 800a9be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9c0:	e008      	b.n	800a9d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f042 0201 	orr.w	r2, r2, #1
 800a9d0:	601a      	str	r2, [r3, #0]
 800a9d2:	e000      	b.n	800a9d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr
 800a9e4:	40012c00 	.word	0x40012c00
 800a9e8:	40000400 	.word	0x40000400
 800a9ec:	40000800 	.word	0x40000800
 800a9f0:	40000c00 	.word	0x40000c00
 800a9f4:	40013400 	.word	0x40013400
 800a9f8:	40014000 	.word	0x40014000
 800a9fc:	00010007 	.word	0x00010007

0800aa00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68da      	ldr	r2, [r3, #12]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f022 0201 	bic.w	r2, r2, #1
 800aa16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6a1a      	ldr	r2, [r3, #32]
 800aa1e:	f241 1311 	movw	r3, #4369	; 0x1111
 800aa22:	4013      	ands	r3, r2
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10f      	bne.n	800aa48 <HAL_TIM_Base_Stop_IT+0x48>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	6a1a      	ldr	r2, [r3, #32]
 800aa2e:	f240 4344 	movw	r3, #1092	; 0x444
 800aa32:	4013      	ands	r3, r2
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d107      	bne.n	800aa48 <HAL_TIM_Base_Stop_IT+0x48>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f022 0201 	bic.w	r2, r2, #1
 800aa46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	370c      	adds	r7, #12
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr

0800aa5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b082      	sub	sp, #8
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	f003 0302 	and.w	r3, r3, #2
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d122      	bne.n	800aaba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	f003 0302 	and.w	r3, r3, #2
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d11b      	bne.n	800aaba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f06f 0202 	mvn.w	r2, #2
 800aa8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	f003 0303 	and.w	r3, r3, #3
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d003      	beq.n	800aaa8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 f9ce 	bl	800ae42 <HAL_TIM_IC_CaptureCallback>
 800aaa6:	e005      	b.n	800aab4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f9c0 	bl	800ae2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f9d1 	bl	800ae56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	f003 0304 	and.w	r3, r3, #4
 800aac4:	2b04      	cmp	r3, #4
 800aac6:	d122      	bne.n	800ab0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	f003 0304 	and.w	r3, r3, #4
 800aad2:	2b04      	cmp	r3, #4
 800aad4:	d11b      	bne.n	800ab0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f06f 0204 	mvn.w	r2, #4
 800aade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2202      	movs	r2, #2
 800aae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	699b      	ldr	r3, [r3, #24]
 800aaec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d003      	beq.n	800aafc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 f9a4 	bl	800ae42 <HAL_TIM_IC_CaptureCallback>
 800aafa:	e005      	b.n	800ab08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f996 	bl	800ae2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f9a7 	bl	800ae56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	f003 0308 	and.w	r3, r3, #8
 800ab18:	2b08      	cmp	r3, #8
 800ab1a:	d122      	bne.n	800ab62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	f003 0308 	and.w	r3, r3, #8
 800ab26:	2b08      	cmp	r3, #8
 800ab28:	d11b      	bne.n	800ab62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f06f 0208 	mvn.w	r2, #8
 800ab32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2204      	movs	r2, #4
 800ab38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	69db      	ldr	r3, [r3, #28]
 800ab40:	f003 0303 	and.w	r3, r3, #3
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d003      	beq.n	800ab50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 f97a 	bl	800ae42 <HAL_TIM_IC_CaptureCallback>
 800ab4e:	e005      	b.n	800ab5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f96c 	bl	800ae2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f97d 	bl	800ae56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	f003 0310 	and.w	r3, r3, #16
 800ab6c:	2b10      	cmp	r3, #16
 800ab6e:	d122      	bne.n	800abb6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	f003 0310 	and.w	r3, r3, #16
 800ab7a:	2b10      	cmp	r3, #16
 800ab7c:	d11b      	bne.n	800abb6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f06f 0210 	mvn.w	r2, #16
 800ab86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2208      	movs	r2, #8
 800ab8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	69db      	ldr	r3, [r3, #28]
 800ab94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d003      	beq.n	800aba4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f950 	bl	800ae42 <HAL_TIM_IC_CaptureCallback>
 800aba2:	e005      	b.n	800abb0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 f942 	bl	800ae2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 f953 	bl	800ae56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	f003 0301 	and.w	r3, r3, #1
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d10e      	bne.n	800abe2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d107      	bne.n	800abe2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f06f 0201 	mvn.w	r2, #1
 800abda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f001 faf7 	bl	800c1d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abec:	2b80      	cmp	r3, #128	; 0x80
 800abee:	d10e      	bne.n	800ac0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abfa:	2b80      	cmp	r3, #128	; 0x80
 800abfc:	d107      	bne.n	800ac0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 faff 	bl	800b20c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac1c:	d10e      	bne.n	800ac3c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac28:	2b80      	cmp	r3, #128	; 0x80
 800ac2a:	d107      	bne.n	800ac3c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 faf2 	bl	800b220 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac46:	2b40      	cmp	r3, #64	; 0x40
 800ac48:	d10e      	bne.n	800ac68 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac54:	2b40      	cmp	r3, #64	; 0x40
 800ac56:	d107      	bne.n	800ac68 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f901 	bl	800ae6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	f003 0320 	and.w	r3, r3, #32
 800ac72:	2b20      	cmp	r3, #32
 800ac74:	d10e      	bne.n	800ac94 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	f003 0320 	and.w	r3, r3, #32
 800ac80:	2b20      	cmp	r3, #32
 800ac82:	d107      	bne.n	800ac94 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f06f 0220 	mvn.w	r2, #32
 800ac8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fab2 	bl	800b1f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac94:	bf00      	nop
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aca6:	2300      	movs	r3, #0
 800aca8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d101      	bne.n	800acb8 <HAL_TIM_ConfigClockSource+0x1c>
 800acb4:	2302      	movs	r3, #2
 800acb6:	e0b6      	b.n	800ae26 <HAL_TIM_ConfigClockSource+0x18a>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2202      	movs	r2, #2
 800acc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800acda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ace2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	68ba      	ldr	r2, [r7, #8]
 800acea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acf4:	d03e      	beq.n	800ad74 <HAL_TIM_ConfigClockSource+0xd8>
 800acf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acfa:	f200 8087 	bhi.w	800ae0c <HAL_TIM_ConfigClockSource+0x170>
 800acfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad02:	f000 8086 	beq.w	800ae12 <HAL_TIM_ConfigClockSource+0x176>
 800ad06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad0a:	d87f      	bhi.n	800ae0c <HAL_TIM_ConfigClockSource+0x170>
 800ad0c:	2b70      	cmp	r3, #112	; 0x70
 800ad0e:	d01a      	beq.n	800ad46 <HAL_TIM_ConfigClockSource+0xaa>
 800ad10:	2b70      	cmp	r3, #112	; 0x70
 800ad12:	d87b      	bhi.n	800ae0c <HAL_TIM_ConfigClockSource+0x170>
 800ad14:	2b60      	cmp	r3, #96	; 0x60
 800ad16:	d050      	beq.n	800adba <HAL_TIM_ConfigClockSource+0x11e>
 800ad18:	2b60      	cmp	r3, #96	; 0x60
 800ad1a:	d877      	bhi.n	800ae0c <HAL_TIM_ConfigClockSource+0x170>
 800ad1c:	2b50      	cmp	r3, #80	; 0x50
 800ad1e:	d03c      	beq.n	800ad9a <HAL_TIM_ConfigClockSource+0xfe>
 800ad20:	2b50      	cmp	r3, #80	; 0x50
 800ad22:	d873      	bhi.n	800ae0c <HAL_TIM_ConfigClockSource+0x170>
 800ad24:	2b40      	cmp	r3, #64	; 0x40
 800ad26:	d058      	beq.n	800adda <HAL_TIM_ConfigClockSource+0x13e>
 800ad28:	2b40      	cmp	r3, #64	; 0x40
 800ad2a:	d86f      	bhi.n	800ae0c <HAL_TIM_ConfigClockSource+0x170>
 800ad2c:	2b30      	cmp	r3, #48	; 0x30
 800ad2e:	d064      	beq.n	800adfa <HAL_TIM_ConfigClockSource+0x15e>
 800ad30:	2b30      	cmp	r3, #48	; 0x30
 800ad32:	d86b      	bhi.n	800ae0c <HAL_TIM_ConfigClockSource+0x170>
 800ad34:	2b20      	cmp	r3, #32
 800ad36:	d060      	beq.n	800adfa <HAL_TIM_ConfigClockSource+0x15e>
 800ad38:	2b20      	cmp	r3, #32
 800ad3a:	d867      	bhi.n	800ae0c <HAL_TIM_ConfigClockSource+0x170>
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d05c      	beq.n	800adfa <HAL_TIM_ConfigClockSource+0x15e>
 800ad40:	2b10      	cmp	r3, #16
 800ad42:	d05a      	beq.n	800adfa <HAL_TIM_ConfigClockSource+0x15e>
 800ad44:	e062      	b.n	800ae0c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6818      	ldr	r0, [r3, #0]
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	6899      	ldr	r1, [r3, #8]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	685a      	ldr	r2, [r3, #4]
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	f000 f9a7 	bl	800b0a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	609a      	str	r2, [r3, #8]
      break;
 800ad72:	e04f      	b.n	800ae14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6818      	ldr	r0, [r3, #0]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	6899      	ldr	r1, [r3, #8]
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	685a      	ldr	r2, [r3, #4]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f000 f990 	bl	800b0a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	689a      	ldr	r2, [r3, #8]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad96:	609a      	str	r2, [r3, #8]
      break;
 800ad98:	e03c      	b.n	800ae14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	6859      	ldr	r1, [r3, #4]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	461a      	mov	r2, r3
 800ada8:	f000 f904 	bl	800afb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2150      	movs	r1, #80	; 0x50
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 f95d 	bl	800b072 <TIM_ITRx_SetConfig>
      break;
 800adb8:	e02c      	b.n	800ae14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6818      	ldr	r0, [r3, #0]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	6859      	ldr	r1, [r3, #4]
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	461a      	mov	r2, r3
 800adc8:	f000 f923 	bl	800b012 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2160      	movs	r1, #96	; 0x60
 800add2:	4618      	mov	r0, r3
 800add4:	f000 f94d 	bl	800b072 <TIM_ITRx_SetConfig>
      break;
 800add8:	e01c      	b.n	800ae14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6818      	ldr	r0, [r3, #0]
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	6859      	ldr	r1, [r3, #4]
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	461a      	mov	r2, r3
 800ade8:	f000 f8e4 	bl	800afb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2140      	movs	r1, #64	; 0x40
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 f93d 	bl	800b072 <TIM_ITRx_SetConfig>
      break;
 800adf8:	e00c      	b.n	800ae14 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4619      	mov	r1, r3
 800ae04:	4610      	mov	r0, r2
 800ae06:	f000 f934 	bl	800b072 <TIM_ITRx_SetConfig>
      break;
 800ae0a:	e003      	b.n	800ae14 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae10:	e000      	b.n	800ae14 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ae12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae2e:	b480      	push	{r7}
 800ae30:	b083      	sub	sp, #12
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae36:	bf00      	nop
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr

0800ae42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae42:	b480      	push	{r7}
 800ae44:	b083      	sub	sp, #12
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae4a:	bf00      	nop
 800ae4c:	370c      	adds	r7, #12
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr

0800ae56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae56:	b480      	push	{r7}
 800ae58:	b083      	sub	sp, #12
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae5e:	bf00      	nop
 800ae60:	370c      	adds	r7, #12
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	b083      	sub	sp, #12
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae72:	bf00      	nop
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
	...

0800ae80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a40      	ldr	r2, [pc, #256]	; (800af94 <TIM_Base_SetConfig+0x114>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d013      	beq.n	800aec0 <TIM_Base_SetConfig+0x40>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae9e:	d00f      	beq.n	800aec0 <TIM_Base_SetConfig+0x40>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a3d      	ldr	r2, [pc, #244]	; (800af98 <TIM_Base_SetConfig+0x118>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d00b      	beq.n	800aec0 <TIM_Base_SetConfig+0x40>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a3c      	ldr	r2, [pc, #240]	; (800af9c <TIM_Base_SetConfig+0x11c>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d007      	beq.n	800aec0 <TIM_Base_SetConfig+0x40>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a3b      	ldr	r2, [pc, #236]	; (800afa0 <TIM_Base_SetConfig+0x120>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d003      	beq.n	800aec0 <TIM_Base_SetConfig+0x40>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a3a      	ldr	r2, [pc, #232]	; (800afa4 <TIM_Base_SetConfig+0x124>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d108      	bne.n	800aed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	4313      	orrs	r3, r2
 800aed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a2f      	ldr	r2, [pc, #188]	; (800af94 <TIM_Base_SetConfig+0x114>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d01f      	beq.n	800af1a <TIM_Base_SetConfig+0x9a>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aee0:	d01b      	beq.n	800af1a <TIM_Base_SetConfig+0x9a>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a2c      	ldr	r2, [pc, #176]	; (800af98 <TIM_Base_SetConfig+0x118>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d017      	beq.n	800af1a <TIM_Base_SetConfig+0x9a>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a2b      	ldr	r2, [pc, #172]	; (800af9c <TIM_Base_SetConfig+0x11c>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d013      	beq.n	800af1a <TIM_Base_SetConfig+0x9a>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a2a      	ldr	r2, [pc, #168]	; (800afa0 <TIM_Base_SetConfig+0x120>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d00f      	beq.n	800af1a <TIM_Base_SetConfig+0x9a>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a29      	ldr	r2, [pc, #164]	; (800afa4 <TIM_Base_SetConfig+0x124>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d00b      	beq.n	800af1a <TIM_Base_SetConfig+0x9a>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a28      	ldr	r2, [pc, #160]	; (800afa8 <TIM_Base_SetConfig+0x128>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d007      	beq.n	800af1a <TIM_Base_SetConfig+0x9a>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a27      	ldr	r2, [pc, #156]	; (800afac <TIM_Base_SetConfig+0x12c>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d003      	beq.n	800af1a <TIM_Base_SetConfig+0x9a>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a26      	ldr	r2, [pc, #152]	; (800afb0 <TIM_Base_SetConfig+0x130>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d108      	bne.n	800af2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	4313      	orrs	r3, r2
 800af2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	4313      	orrs	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	68fa      	ldr	r2, [r7, #12]
 800af3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	689a      	ldr	r2, [r3, #8]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a10      	ldr	r2, [pc, #64]	; (800af94 <TIM_Base_SetConfig+0x114>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d00f      	beq.n	800af78 <TIM_Base_SetConfig+0xf8>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a12      	ldr	r2, [pc, #72]	; (800afa4 <TIM_Base_SetConfig+0x124>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d00b      	beq.n	800af78 <TIM_Base_SetConfig+0xf8>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a11      	ldr	r2, [pc, #68]	; (800afa8 <TIM_Base_SetConfig+0x128>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d007      	beq.n	800af78 <TIM_Base_SetConfig+0xf8>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a10      	ldr	r2, [pc, #64]	; (800afac <TIM_Base_SetConfig+0x12c>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d003      	beq.n	800af78 <TIM_Base_SetConfig+0xf8>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a0f      	ldr	r2, [pc, #60]	; (800afb0 <TIM_Base_SetConfig+0x130>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d103      	bne.n	800af80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	691a      	ldr	r2, [r3, #16]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	615a      	str	r2, [r3, #20]
}
 800af86:	bf00      	nop
 800af88:	3714      	adds	r7, #20
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	40012c00 	.word	0x40012c00
 800af98:	40000400 	.word	0x40000400
 800af9c:	40000800 	.word	0x40000800
 800afa0:	40000c00 	.word	0x40000c00
 800afa4:	40013400 	.word	0x40013400
 800afa8:	40014000 	.word	0x40014000
 800afac:	40014400 	.word	0x40014400
 800afb0:	40014800 	.word	0x40014800

0800afb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b087      	sub	sp, #28
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6a1b      	ldr	r3, [r3, #32]
 800afc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	f023 0201 	bic.w	r2, r3, #1
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	011b      	lsls	r3, r3, #4
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	f023 030a 	bic.w	r3, r3, #10
 800aff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	697a      	ldr	r2, [r7, #20]
 800b004:	621a      	str	r2, [r3, #32]
}
 800b006:	bf00      	nop
 800b008:	371c      	adds	r7, #28
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b012:	b480      	push	{r7}
 800b014:	b087      	sub	sp, #28
 800b016:	af00      	add	r7, sp, #0
 800b018:	60f8      	str	r0, [r7, #12]
 800b01a:	60b9      	str	r1, [r7, #8]
 800b01c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	f023 0210 	bic.w	r2, r3, #16
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	699b      	ldr	r3, [r3, #24]
 800b02e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6a1b      	ldr	r3, [r3, #32]
 800b034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b03c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	031b      	lsls	r3, r3, #12
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	4313      	orrs	r3, r2
 800b046:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b04e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	011b      	lsls	r3, r3, #4
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	4313      	orrs	r3, r2
 800b058:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	697a      	ldr	r2, [r7, #20]
 800b05e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	693a      	ldr	r2, [r7, #16]
 800b064:	621a      	str	r2, [r3, #32]
}
 800b066:	bf00      	nop
 800b068:	371c      	adds	r7, #28
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr

0800b072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b072:	b480      	push	{r7}
 800b074:	b085      	sub	sp, #20
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b08a:	683a      	ldr	r2, [r7, #0]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	4313      	orrs	r3, r2
 800b090:	f043 0307 	orr.w	r3, r3, #7
 800b094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	609a      	str	r2, [r3, #8]
}
 800b09c:	bf00      	nop
 800b09e:	3714      	adds	r7, #20
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b087      	sub	sp, #28
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
 800b0b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	021a      	lsls	r2, r3, #8
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	431a      	orrs	r2, r3
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	697a      	ldr	r2, [r7, #20]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	609a      	str	r2, [r3, #8]
}
 800b0dc:	bf00      	nop
 800b0de:	371c      	adds	r7, #28
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d101      	bne.n	800b100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0fc:	2302      	movs	r3, #2
 800b0fe:	e068      	b.n	800b1d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2202      	movs	r2, #2
 800b10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a2e      	ldr	r2, [pc, #184]	; (800b1e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d004      	beq.n	800b134 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4a2d      	ldr	r2, [pc, #180]	; (800b1e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d108      	bne.n	800b146 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b13a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	4313      	orrs	r3, r2
 800b144:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b14c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	4313      	orrs	r3, r2
 800b156:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a1e      	ldr	r2, [pc, #120]	; (800b1e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d01d      	beq.n	800b1a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b172:	d018      	beq.n	800b1a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a1b      	ldr	r2, [pc, #108]	; (800b1e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d013      	beq.n	800b1a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a1a      	ldr	r2, [pc, #104]	; (800b1ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d00e      	beq.n	800b1a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a18      	ldr	r2, [pc, #96]	; (800b1f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d009      	beq.n	800b1a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a13      	ldr	r2, [pc, #76]	; (800b1e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d004      	beq.n	800b1a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a14      	ldr	r2, [pc, #80]	; (800b1f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d10c      	bne.n	800b1c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3714      	adds	r7, #20
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	40012c00 	.word	0x40012c00
 800b1e4:	40013400 	.word	0x40013400
 800b1e8:	40000400 	.word	0x40000400
 800b1ec:	40000800 	.word	0x40000800
 800b1f0:	40000c00 	.word	0x40000c00
 800b1f4:	40014000 	.word	0x40014000

0800b1f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b200:	bf00      	nop
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b214:	bf00      	nop
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b228:	bf00      	nop
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d101      	bne.n	800b246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b242:	2301      	movs	r3, #1
 800b244:	e040      	b.n	800b2c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d106      	bne.n	800b25c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f83a 	bl	800b2d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2224      	movs	r2, #36	; 0x24
 800b260:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f022 0201 	bic.w	r2, r2, #1
 800b270:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 f94a 	bl	800b50c <UART_SetConfig>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d101      	bne.n	800b282 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b27e:	2301      	movs	r3, #1
 800b280:	e022      	b.n	800b2c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	2b00      	cmp	r3, #0
 800b288:	d002      	beq.n	800b290 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fbc8 	bl	800ba20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	685a      	ldr	r2, [r3, #4]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b29e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	689a      	ldr	r2, [r3, #8]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	681a      	ldr	r2, [r3, #0]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f042 0201 	orr.w	r2, r2, #1
 800b2be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 fc4f 	bl	800bb64 <UART_CheckIdleState>
 800b2c6:	4603      	mov	r3, r0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800b2d8:	bf00      	nop
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b08a      	sub	sp, #40	; 0x28
 800b2e8:	af02      	add	r7, sp, #8
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	603b      	str	r3, [r7, #0]
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2f8:	2b20      	cmp	r3, #32
 800b2fa:	f040 8082 	bne.w	800b402 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <HAL_UART_Transmit+0x26>
 800b304:	88fb      	ldrh	r3, [r7, #6]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d101      	bne.n	800b30e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
 800b30c:	e07a      	b.n	800b404 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b314:	2b01      	cmp	r3, #1
 800b316:	d101      	bne.n	800b31c <HAL_UART_Transmit+0x38>
 800b318:	2302      	movs	r3, #2
 800b31a:	e073      	b.n	800b404 <HAL_UART_Transmit+0x120>
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2221      	movs	r2, #33	; 0x21
 800b330:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b332:	f7fb fecf 	bl	80070d4 <HAL_GetTick>
 800b336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	88fa      	ldrh	r2, [r7, #6]
 800b33c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	88fa      	ldrh	r2, [r7, #6]
 800b344:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b350:	d108      	bne.n	800b364 <HAL_UART_Transmit+0x80>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d104      	bne.n	800b364 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b35a:	2300      	movs	r3, #0
 800b35c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	61bb      	str	r3, [r7, #24]
 800b362:	e003      	b.n	800b36c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b368:	2300      	movs	r3, #0
 800b36a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b374:	e02d      	b.n	800b3d2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	2200      	movs	r2, #0
 800b37e:	2180      	movs	r1, #128	; 0x80
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f000 fc38 	bl	800bbf6 <UART_WaitOnFlagUntilTimeout>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b38c:	2303      	movs	r3, #3
 800b38e:	e039      	b.n	800b404 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10b      	bne.n	800b3ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	881a      	ldrh	r2, [r3, #0]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3a2:	b292      	uxth	r2, r2
 800b3a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	3302      	adds	r3, #2
 800b3aa:	61bb      	str	r3, [r7, #24]
 800b3ac:	e008      	b.n	800b3c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	781a      	ldrb	r2, [r3, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	b292      	uxth	r2, r2
 800b3b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1cb      	bne.n	800b376 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	2140      	movs	r1, #64	; 0x40
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f000 fc04 	bl	800bbf6 <UART_WaitOnFlagUntilTimeout>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d001      	beq.n	800b3f8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e005      	b.n	800b404 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2220      	movs	r2, #32
 800b3fc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b3fe:	2300      	movs	r3, #0
 800b400:	e000      	b.n	800b404 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800b402:	2302      	movs	r3, #2
  }
}
 800b404:	4618      	mov	r0, r3
 800b406:	3720      	adds	r7, #32
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b08a      	sub	sp, #40	; 0x28
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	4613      	mov	r3, r2
 800b418:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b41e:	2b20      	cmp	r3, #32
 800b420:	d142      	bne.n	800b4a8 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <HAL_UART_Receive_DMA+0x22>
 800b428:	88fb      	ldrh	r3, [r7, #6]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d101      	bne.n	800b432 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e03b      	b.n	800b4aa <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d101      	bne.n	800b440 <HAL_UART_Receive_DMA+0x34>
 800b43c:	2302      	movs	r3, #2
 800b43e:	e034      	b.n	800b4aa <HAL_UART_Receive_DMA+0x9e>
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2200      	movs	r2, #0
 800b44c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a18      	ldr	r2, [pc, #96]	; (800b4b4 <HAL_UART_Receive_DMA+0xa8>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d01f      	beq.n	800b498 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b462:	2b00      	cmp	r3, #0
 800b464:	d018      	beq.n	800b498 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	e853 3f00 	ldrex	r3, [r3]
 800b472:	613b      	str	r3, [r7, #16]
   return(result);
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b47a:	627b      	str	r3, [r7, #36]	; 0x24
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	461a      	mov	r2, r3
 800b482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b484:	623b      	str	r3, [r7, #32]
 800b486:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b488:	69f9      	ldr	r1, [r7, #28]
 800b48a:	6a3a      	ldr	r2, [r7, #32]
 800b48c:	e841 2300 	strex	r3, r2, [r1]
 800b490:	61bb      	str	r3, [r7, #24]
   return(result);
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1e6      	bne.n	800b466 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b498:	88fb      	ldrh	r3, [r7, #6]
 800b49a:	461a      	mov	r2, r3
 800b49c:	68b9      	ldr	r1, [r7, #8]
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f000 fc6e 	bl	800bd80 <UART_Start_Receive_DMA>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	e000      	b.n	800b4aa <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800b4a8:	2302      	movs	r3, #2
  }
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3728      	adds	r7, #40	; 0x28
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	40008000 	.word	0x40008000

0800b4b8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b4e8:	bf00      	nop
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b50c:	b5b0      	push	{r4, r5, r7, lr}
 800b50e:	b088      	sub	sp, #32
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b514:	2300      	movs	r3, #0
 800b516:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	689a      	ldr	r2, [r3, #8]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	691b      	ldr	r3, [r3, #16]
 800b520:	431a      	orrs	r2, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	695b      	ldr	r3, [r3, #20]
 800b526:	431a      	orrs	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	69db      	ldr	r3, [r3, #28]
 800b52c:	4313      	orrs	r3, r2
 800b52e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	4bad      	ldr	r3, [pc, #692]	; (800b7ec <UART_SetConfig+0x2e0>)
 800b538:	4013      	ands	r3, r2
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	6812      	ldr	r2, [r2, #0]
 800b53e:	69f9      	ldr	r1, [r7, #28]
 800b540:	430b      	orrs	r3, r1
 800b542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	68da      	ldr	r2, [r3, #12]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	430a      	orrs	r2, r1
 800b558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4aa2      	ldr	r2, [pc, #648]	; (800b7f0 <UART_SetConfig+0x2e4>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d004      	beq.n	800b574 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a1b      	ldr	r3, [r3, #32]
 800b56e:	69fa      	ldr	r2, [r7, #28]
 800b570:	4313      	orrs	r3, r2
 800b572:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	69fa      	ldr	r2, [r7, #28]
 800b584:	430a      	orrs	r2, r1
 800b586:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a99      	ldr	r2, [pc, #612]	; (800b7f4 <UART_SetConfig+0x2e8>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d121      	bne.n	800b5d6 <UART_SetConfig+0xca>
 800b592:	4b99      	ldr	r3, [pc, #612]	; (800b7f8 <UART_SetConfig+0x2ec>)
 800b594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b598:	f003 0303 	and.w	r3, r3, #3
 800b59c:	2b03      	cmp	r3, #3
 800b59e:	d817      	bhi.n	800b5d0 <UART_SetConfig+0xc4>
 800b5a0:	a201      	add	r2, pc, #4	; (adr r2, 800b5a8 <UART_SetConfig+0x9c>)
 800b5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a6:	bf00      	nop
 800b5a8:	0800b5b9 	.word	0x0800b5b9
 800b5ac:	0800b5c5 	.word	0x0800b5c5
 800b5b0:	0800b5bf 	.word	0x0800b5bf
 800b5b4:	0800b5cb 	.word	0x0800b5cb
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	76fb      	strb	r3, [r7, #27]
 800b5bc:	e0e7      	b.n	800b78e <UART_SetConfig+0x282>
 800b5be:	2302      	movs	r3, #2
 800b5c0:	76fb      	strb	r3, [r7, #27]
 800b5c2:	e0e4      	b.n	800b78e <UART_SetConfig+0x282>
 800b5c4:	2304      	movs	r3, #4
 800b5c6:	76fb      	strb	r3, [r7, #27]
 800b5c8:	e0e1      	b.n	800b78e <UART_SetConfig+0x282>
 800b5ca:	2308      	movs	r3, #8
 800b5cc:	76fb      	strb	r3, [r7, #27]
 800b5ce:	e0de      	b.n	800b78e <UART_SetConfig+0x282>
 800b5d0:	2310      	movs	r3, #16
 800b5d2:	76fb      	strb	r3, [r7, #27]
 800b5d4:	e0db      	b.n	800b78e <UART_SetConfig+0x282>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a88      	ldr	r2, [pc, #544]	; (800b7fc <UART_SetConfig+0x2f0>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d132      	bne.n	800b646 <UART_SetConfig+0x13a>
 800b5e0:	4b85      	ldr	r3, [pc, #532]	; (800b7f8 <UART_SetConfig+0x2ec>)
 800b5e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5e6:	f003 030c 	and.w	r3, r3, #12
 800b5ea:	2b0c      	cmp	r3, #12
 800b5ec:	d828      	bhi.n	800b640 <UART_SetConfig+0x134>
 800b5ee:	a201      	add	r2, pc, #4	; (adr r2, 800b5f4 <UART_SetConfig+0xe8>)
 800b5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f4:	0800b629 	.word	0x0800b629
 800b5f8:	0800b641 	.word	0x0800b641
 800b5fc:	0800b641 	.word	0x0800b641
 800b600:	0800b641 	.word	0x0800b641
 800b604:	0800b635 	.word	0x0800b635
 800b608:	0800b641 	.word	0x0800b641
 800b60c:	0800b641 	.word	0x0800b641
 800b610:	0800b641 	.word	0x0800b641
 800b614:	0800b62f 	.word	0x0800b62f
 800b618:	0800b641 	.word	0x0800b641
 800b61c:	0800b641 	.word	0x0800b641
 800b620:	0800b641 	.word	0x0800b641
 800b624:	0800b63b 	.word	0x0800b63b
 800b628:	2300      	movs	r3, #0
 800b62a:	76fb      	strb	r3, [r7, #27]
 800b62c:	e0af      	b.n	800b78e <UART_SetConfig+0x282>
 800b62e:	2302      	movs	r3, #2
 800b630:	76fb      	strb	r3, [r7, #27]
 800b632:	e0ac      	b.n	800b78e <UART_SetConfig+0x282>
 800b634:	2304      	movs	r3, #4
 800b636:	76fb      	strb	r3, [r7, #27]
 800b638:	e0a9      	b.n	800b78e <UART_SetConfig+0x282>
 800b63a:	2308      	movs	r3, #8
 800b63c:	76fb      	strb	r3, [r7, #27]
 800b63e:	e0a6      	b.n	800b78e <UART_SetConfig+0x282>
 800b640:	2310      	movs	r3, #16
 800b642:	76fb      	strb	r3, [r7, #27]
 800b644:	e0a3      	b.n	800b78e <UART_SetConfig+0x282>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a6d      	ldr	r2, [pc, #436]	; (800b800 <UART_SetConfig+0x2f4>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d120      	bne.n	800b692 <UART_SetConfig+0x186>
 800b650:	4b69      	ldr	r3, [pc, #420]	; (800b7f8 <UART_SetConfig+0x2ec>)
 800b652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b656:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b65a:	2b30      	cmp	r3, #48	; 0x30
 800b65c:	d013      	beq.n	800b686 <UART_SetConfig+0x17a>
 800b65e:	2b30      	cmp	r3, #48	; 0x30
 800b660:	d814      	bhi.n	800b68c <UART_SetConfig+0x180>
 800b662:	2b20      	cmp	r3, #32
 800b664:	d009      	beq.n	800b67a <UART_SetConfig+0x16e>
 800b666:	2b20      	cmp	r3, #32
 800b668:	d810      	bhi.n	800b68c <UART_SetConfig+0x180>
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d002      	beq.n	800b674 <UART_SetConfig+0x168>
 800b66e:	2b10      	cmp	r3, #16
 800b670:	d006      	beq.n	800b680 <UART_SetConfig+0x174>
 800b672:	e00b      	b.n	800b68c <UART_SetConfig+0x180>
 800b674:	2300      	movs	r3, #0
 800b676:	76fb      	strb	r3, [r7, #27]
 800b678:	e089      	b.n	800b78e <UART_SetConfig+0x282>
 800b67a:	2302      	movs	r3, #2
 800b67c:	76fb      	strb	r3, [r7, #27]
 800b67e:	e086      	b.n	800b78e <UART_SetConfig+0x282>
 800b680:	2304      	movs	r3, #4
 800b682:	76fb      	strb	r3, [r7, #27]
 800b684:	e083      	b.n	800b78e <UART_SetConfig+0x282>
 800b686:	2308      	movs	r3, #8
 800b688:	76fb      	strb	r3, [r7, #27]
 800b68a:	e080      	b.n	800b78e <UART_SetConfig+0x282>
 800b68c:	2310      	movs	r3, #16
 800b68e:	76fb      	strb	r3, [r7, #27]
 800b690:	e07d      	b.n	800b78e <UART_SetConfig+0x282>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a5b      	ldr	r2, [pc, #364]	; (800b804 <UART_SetConfig+0x2f8>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d120      	bne.n	800b6de <UART_SetConfig+0x1d2>
 800b69c:	4b56      	ldr	r3, [pc, #344]	; (800b7f8 <UART_SetConfig+0x2ec>)
 800b69e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b6a6:	2bc0      	cmp	r3, #192	; 0xc0
 800b6a8:	d013      	beq.n	800b6d2 <UART_SetConfig+0x1c6>
 800b6aa:	2bc0      	cmp	r3, #192	; 0xc0
 800b6ac:	d814      	bhi.n	800b6d8 <UART_SetConfig+0x1cc>
 800b6ae:	2b80      	cmp	r3, #128	; 0x80
 800b6b0:	d009      	beq.n	800b6c6 <UART_SetConfig+0x1ba>
 800b6b2:	2b80      	cmp	r3, #128	; 0x80
 800b6b4:	d810      	bhi.n	800b6d8 <UART_SetConfig+0x1cc>
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d002      	beq.n	800b6c0 <UART_SetConfig+0x1b4>
 800b6ba:	2b40      	cmp	r3, #64	; 0x40
 800b6bc:	d006      	beq.n	800b6cc <UART_SetConfig+0x1c0>
 800b6be:	e00b      	b.n	800b6d8 <UART_SetConfig+0x1cc>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	76fb      	strb	r3, [r7, #27]
 800b6c4:	e063      	b.n	800b78e <UART_SetConfig+0x282>
 800b6c6:	2302      	movs	r3, #2
 800b6c8:	76fb      	strb	r3, [r7, #27]
 800b6ca:	e060      	b.n	800b78e <UART_SetConfig+0x282>
 800b6cc:	2304      	movs	r3, #4
 800b6ce:	76fb      	strb	r3, [r7, #27]
 800b6d0:	e05d      	b.n	800b78e <UART_SetConfig+0x282>
 800b6d2:	2308      	movs	r3, #8
 800b6d4:	76fb      	strb	r3, [r7, #27]
 800b6d6:	e05a      	b.n	800b78e <UART_SetConfig+0x282>
 800b6d8:	2310      	movs	r3, #16
 800b6da:	76fb      	strb	r3, [r7, #27]
 800b6dc:	e057      	b.n	800b78e <UART_SetConfig+0x282>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a49      	ldr	r2, [pc, #292]	; (800b808 <UART_SetConfig+0x2fc>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d125      	bne.n	800b734 <UART_SetConfig+0x228>
 800b6e8:	4b43      	ldr	r3, [pc, #268]	; (800b7f8 <UART_SetConfig+0x2ec>)
 800b6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6f6:	d017      	beq.n	800b728 <UART_SetConfig+0x21c>
 800b6f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6fc:	d817      	bhi.n	800b72e <UART_SetConfig+0x222>
 800b6fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b702:	d00b      	beq.n	800b71c <UART_SetConfig+0x210>
 800b704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b708:	d811      	bhi.n	800b72e <UART_SetConfig+0x222>
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d003      	beq.n	800b716 <UART_SetConfig+0x20a>
 800b70e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b712:	d006      	beq.n	800b722 <UART_SetConfig+0x216>
 800b714:	e00b      	b.n	800b72e <UART_SetConfig+0x222>
 800b716:	2300      	movs	r3, #0
 800b718:	76fb      	strb	r3, [r7, #27]
 800b71a:	e038      	b.n	800b78e <UART_SetConfig+0x282>
 800b71c:	2302      	movs	r3, #2
 800b71e:	76fb      	strb	r3, [r7, #27]
 800b720:	e035      	b.n	800b78e <UART_SetConfig+0x282>
 800b722:	2304      	movs	r3, #4
 800b724:	76fb      	strb	r3, [r7, #27]
 800b726:	e032      	b.n	800b78e <UART_SetConfig+0x282>
 800b728:	2308      	movs	r3, #8
 800b72a:	76fb      	strb	r3, [r7, #27]
 800b72c:	e02f      	b.n	800b78e <UART_SetConfig+0x282>
 800b72e:	2310      	movs	r3, #16
 800b730:	76fb      	strb	r3, [r7, #27]
 800b732:	e02c      	b.n	800b78e <UART_SetConfig+0x282>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a2d      	ldr	r2, [pc, #180]	; (800b7f0 <UART_SetConfig+0x2e4>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d125      	bne.n	800b78a <UART_SetConfig+0x27e>
 800b73e:	4b2e      	ldr	r3, [pc, #184]	; (800b7f8 <UART_SetConfig+0x2ec>)
 800b740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b744:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b748:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b74c:	d017      	beq.n	800b77e <UART_SetConfig+0x272>
 800b74e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b752:	d817      	bhi.n	800b784 <UART_SetConfig+0x278>
 800b754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b758:	d00b      	beq.n	800b772 <UART_SetConfig+0x266>
 800b75a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b75e:	d811      	bhi.n	800b784 <UART_SetConfig+0x278>
 800b760:	2b00      	cmp	r3, #0
 800b762:	d003      	beq.n	800b76c <UART_SetConfig+0x260>
 800b764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b768:	d006      	beq.n	800b778 <UART_SetConfig+0x26c>
 800b76a:	e00b      	b.n	800b784 <UART_SetConfig+0x278>
 800b76c:	2300      	movs	r3, #0
 800b76e:	76fb      	strb	r3, [r7, #27]
 800b770:	e00d      	b.n	800b78e <UART_SetConfig+0x282>
 800b772:	2302      	movs	r3, #2
 800b774:	76fb      	strb	r3, [r7, #27]
 800b776:	e00a      	b.n	800b78e <UART_SetConfig+0x282>
 800b778:	2304      	movs	r3, #4
 800b77a:	76fb      	strb	r3, [r7, #27]
 800b77c:	e007      	b.n	800b78e <UART_SetConfig+0x282>
 800b77e:	2308      	movs	r3, #8
 800b780:	76fb      	strb	r3, [r7, #27]
 800b782:	e004      	b.n	800b78e <UART_SetConfig+0x282>
 800b784:	2310      	movs	r3, #16
 800b786:	76fb      	strb	r3, [r7, #27]
 800b788:	e001      	b.n	800b78e <UART_SetConfig+0x282>
 800b78a:	2310      	movs	r3, #16
 800b78c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a17      	ldr	r2, [pc, #92]	; (800b7f0 <UART_SetConfig+0x2e4>)
 800b794:	4293      	cmp	r3, r2
 800b796:	f040 8087 	bne.w	800b8a8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b79a:	7efb      	ldrb	r3, [r7, #27]
 800b79c:	2b08      	cmp	r3, #8
 800b79e:	d837      	bhi.n	800b810 <UART_SetConfig+0x304>
 800b7a0:	a201      	add	r2, pc, #4	; (adr r2, 800b7a8 <UART_SetConfig+0x29c>)
 800b7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a6:	bf00      	nop
 800b7a8:	0800b7cd 	.word	0x0800b7cd
 800b7ac:	0800b811 	.word	0x0800b811
 800b7b0:	0800b7d5 	.word	0x0800b7d5
 800b7b4:	0800b811 	.word	0x0800b811
 800b7b8:	0800b7db 	.word	0x0800b7db
 800b7bc:	0800b811 	.word	0x0800b811
 800b7c0:	0800b811 	.word	0x0800b811
 800b7c4:	0800b811 	.word	0x0800b811
 800b7c8:	0800b7e3 	.word	0x0800b7e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7cc:	f7fd ffee 	bl	80097ac <HAL_RCC_GetPCLK1Freq>
 800b7d0:	6178      	str	r0, [r7, #20]
        break;
 800b7d2:	e022      	b.n	800b81a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7d4:	4b0d      	ldr	r3, [pc, #52]	; (800b80c <UART_SetConfig+0x300>)
 800b7d6:	617b      	str	r3, [r7, #20]
        break;
 800b7d8:	e01f      	b.n	800b81a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7da:	f7fd ff4f 	bl	800967c <HAL_RCC_GetSysClockFreq>
 800b7de:	6178      	str	r0, [r7, #20]
        break;
 800b7e0:	e01b      	b.n	800b81a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7e6:	617b      	str	r3, [r7, #20]
        break;
 800b7e8:	e017      	b.n	800b81a <UART_SetConfig+0x30e>
 800b7ea:	bf00      	nop
 800b7ec:	efff69f3 	.word	0xefff69f3
 800b7f0:	40008000 	.word	0x40008000
 800b7f4:	40013800 	.word	0x40013800
 800b7f8:	40021000 	.word	0x40021000
 800b7fc:	40004400 	.word	0x40004400
 800b800:	40004800 	.word	0x40004800
 800b804:	40004c00 	.word	0x40004c00
 800b808:	40005000 	.word	0x40005000
 800b80c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b810:	2300      	movs	r3, #0
 800b812:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	76bb      	strb	r3, [r7, #26]
        break;
 800b818:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f000 80f1 	beq.w	800ba04 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	685a      	ldr	r2, [r3, #4]
 800b826:	4613      	mov	r3, r2
 800b828:	005b      	lsls	r3, r3, #1
 800b82a:	4413      	add	r3, r2
 800b82c:	697a      	ldr	r2, [r7, #20]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d305      	bcc.n	800b83e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b838:	697a      	ldr	r2, [r7, #20]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d902      	bls.n	800b844 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	76bb      	strb	r3, [r7, #26]
 800b842:	e0df      	b.n	800ba04 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	4618      	mov	r0, r3
 800b848:	f04f 0100 	mov.w	r1, #0
 800b84c:	f04f 0200 	mov.w	r2, #0
 800b850:	f04f 0300 	mov.w	r3, #0
 800b854:	020b      	lsls	r3, r1, #8
 800b856:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b85a:	0202      	lsls	r2, r0, #8
 800b85c:	6879      	ldr	r1, [r7, #4]
 800b85e:	6849      	ldr	r1, [r1, #4]
 800b860:	0849      	lsrs	r1, r1, #1
 800b862:	4608      	mov	r0, r1
 800b864:	f04f 0100 	mov.w	r1, #0
 800b868:	1814      	adds	r4, r2, r0
 800b86a:	eb43 0501 	adc.w	r5, r3, r1
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	461a      	mov	r2, r3
 800b874:	f04f 0300 	mov.w	r3, #0
 800b878:	4620      	mov	r0, r4
 800b87a:	4629      	mov	r1, r5
 800b87c:	f7f5 f9b4 	bl	8000be8 <__aeabi_uldivmod>
 800b880:	4602      	mov	r2, r0
 800b882:	460b      	mov	r3, r1
 800b884:	4613      	mov	r3, r2
 800b886:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b88e:	d308      	bcc.n	800b8a2 <UART_SetConfig+0x396>
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b896:	d204      	bcs.n	800b8a2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	693a      	ldr	r2, [r7, #16]
 800b89e:	60da      	str	r2, [r3, #12]
 800b8a0:	e0b0      	b.n	800ba04 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	76bb      	strb	r3, [r7, #26]
 800b8a6:	e0ad      	b.n	800ba04 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	69db      	ldr	r3, [r3, #28]
 800b8ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8b0:	d15b      	bne.n	800b96a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800b8b2:	7efb      	ldrb	r3, [r7, #27]
 800b8b4:	2b08      	cmp	r3, #8
 800b8b6:	d828      	bhi.n	800b90a <UART_SetConfig+0x3fe>
 800b8b8:	a201      	add	r2, pc, #4	; (adr r2, 800b8c0 <UART_SetConfig+0x3b4>)
 800b8ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8be:	bf00      	nop
 800b8c0:	0800b8e5 	.word	0x0800b8e5
 800b8c4:	0800b8ed 	.word	0x0800b8ed
 800b8c8:	0800b8f5 	.word	0x0800b8f5
 800b8cc:	0800b90b 	.word	0x0800b90b
 800b8d0:	0800b8fb 	.word	0x0800b8fb
 800b8d4:	0800b90b 	.word	0x0800b90b
 800b8d8:	0800b90b 	.word	0x0800b90b
 800b8dc:	0800b90b 	.word	0x0800b90b
 800b8e0:	0800b903 	.word	0x0800b903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8e4:	f7fd ff62 	bl	80097ac <HAL_RCC_GetPCLK1Freq>
 800b8e8:	6178      	str	r0, [r7, #20]
        break;
 800b8ea:	e013      	b.n	800b914 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8ec:	f7fd ff74 	bl	80097d8 <HAL_RCC_GetPCLK2Freq>
 800b8f0:	6178      	str	r0, [r7, #20]
        break;
 800b8f2:	e00f      	b.n	800b914 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8f4:	4b49      	ldr	r3, [pc, #292]	; (800ba1c <UART_SetConfig+0x510>)
 800b8f6:	617b      	str	r3, [r7, #20]
        break;
 800b8f8:	e00c      	b.n	800b914 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8fa:	f7fd febf 	bl	800967c <HAL_RCC_GetSysClockFreq>
 800b8fe:	6178      	str	r0, [r7, #20]
        break;
 800b900:	e008      	b.n	800b914 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b906:	617b      	str	r3, [r7, #20]
        break;
 800b908:	e004      	b.n	800b914 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800b90a:	2300      	movs	r3, #0
 800b90c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	76bb      	strb	r3, [r7, #26]
        break;
 800b912:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d074      	beq.n	800ba04 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	005a      	lsls	r2, r3, #1
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	085b      	lsrs	r3, r3, #1
 800b924:	441a      	add	r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b92e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	2b0f      	cmp	r3, #15
 800b934:	d916      	bls.n	800b964 <UART_SetConfig+0x458>
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b93c:	d212      	bcs.n	800b964 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	b29b      	uxth	r3, r3
 800b942:	f023 030f 	bic.w	r3, r3, #15
 800b946:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	085b      	lsrs	r3, r3, #1
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	f003 0307 	and.w	r3, r3, #7
 800b952:	b29a      	uxth	r2, r3
 800b954:	89fb      	ldrh	r3, [r7, #14]
 800b956:	4313      	orrs	r3, r2
 800b958:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	89fa      	ldrh	r2, [r7, #14]
 800b960:	60da      	str	r2, [r3, #12]
 800b962:	e04f      	b.n	800ba04 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	76bb      	strb	r3, [r7, #26]
 800b968:	e04c      	b.n	800ba04 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b96a:	7efb      	ldrb	r3, [r7, #27]
 800b96c:	2b08      	cmp	r3, #8
 800b96e:	d828      	bhi.n	800b9c2 <UART_SetConfig+0x4b6>
 800b970:	a201      	add	r2, pc, #4	; (adr r2, 800b978 <UART_SetConfig+0x46c>)
 800b972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b976:	bf00      	nop
 800b978:	0800b99d 	.word	0x0800b99d
 800b97c:	0800b9a5 	.word	0x0800b9a5
 800b980:	0800b9ad 	.word	0x0800b9ad
 800b984:	0800b9c3 	.word	0x0800b9c3
 800b988:	0800b9b3 	.word	0x0800b9b3
 800b98c:	0800b9c3 	.word	0x0800b9c3
 800b990:	0800b9c3 	.word	0x0800b9c3
 800b994:	0800b9c3 	.word	0x0800b9c3
 800b998:	0800b9bb 	.word	0x0800b9bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b99c:	f7fd ff06 	bl	80097ac <HAL_RCC_GetPCLK1Freq>
 800b9a0:	6178      	str	r0, [r7, #20]
        break;
 800b9a2:	e013      	b.n	800b9cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9a4:	f7fd ff18 	bl	80097d8 <HAL_RCC_GetPCLK2Freq>
 800b9a8:	6178      	str	r0, [r7, #20]
        break;
 800b9aa:	e00f      	b.n	800b9cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b9ac:	4b1b      	ldr	r3, [pc, #108]	; (800ba1c <UART_SetConfig+0x510>)
 800b9ae:	617b      	str	r3, [r7, #20]
        break;
 800b9b0:	e00c      	b.n	800b9cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9b2:	f7fd fe63 	bl	800967c <HAL_RCC_GetSysClockFreq>
 800b9b6:	6178      	str	r0, [r7, #20]
        break;
 800b9b8:	e008      	b.n	800b9cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9be:	617b      	str	r3, [r7, #20]
        break;
 800b9c0:	e004      	b.n	800b9cc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	76bb      	strb	r3, [r7, #26]
        break;
 800b9ca:	bf00      	nop
    }

    if (pclk != 0U)
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d018      	beq.n	800ba04 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	085a      	lsrs	r2, r3, #1
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	441a      	add	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9e4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	2b0f      	cmp	r3, #15
 800b9ea:	d909      	bls.n	800ba00 <UART_SetConfig+0x4f4>
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9f2:	d205      	bcs.n	800ba00 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	60da      	str	r2, [r3, #12]
 800b9fe:	e001      	b.n	800ba04 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ba10:	7ebb      	ldrb	r3, [r7, #26]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3720      	adds	r7, #32
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bdb0      	pop	{r4, r5, r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	00f42400 	.word	0x00f42400

0800ba20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2c:	f003 0301 	and.w	r3, r3, #1
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00a      	beq.n	800ba4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	430a      	orrs	r2, r1
 800ba48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4e:	f003 0302 	and.w	r3, r3, #2
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00a      	beq.n	800ba6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	430a      	orrs	r2, r1
 800ba6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba70:	f003 0304 	and.w	r3, r3, #4
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00a      	beq.n	800ba8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	430a      	orrs	r2, r1
 800ba8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba92:	f003 0308 	and.w	r3, r3, #8
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00a      	beq.n	800bab0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	430a      	orrs	r2, r1
 800baae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab4:	f003 0310 	and.w	r3, r3, #16
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00a      	beq.n	800bad2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	430a      	orrs	r2, r1
 800bad0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad6:	f003 0320 	and.w	r3, r3, #32
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00a      	beq.n	800baf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	430a      	orrs	r2, r1
 800baf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d01a      	beq.n	800bb36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	430a      	orrs	r2, r1
 800bb14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb1e:	d10a      	bne.n	800bb36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	430a      	orrs	r2, r1
 800bb34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00a      	beq.n	800bb58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	430a      	orrs	r2, r1
 800bb56:	605a      	str	r2, [r3, #4]
  }
}
 800bb58:	bf00      	nop
 800bb5a:	370c      	adds	r7, #12
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af02      	add	r7, sp, #8
 800bb6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb74:	f7fb faae 	bl	80070d4 <HAL_GetTick>
 800bb78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f003 0308 	and.w	r3, r3, #8
 800bb84:	2b08      	cmp	r3, #8
 800bb86:	d10e      	bne.n	800bba6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f82d 	bl	800bbf6 <UART_WaitOnFlagUntilTimeout>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d001      	beq.n	800bba6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bba2:	2303      	movs	r3, #3
 800bba4:	e023      	b.n	800bbee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f003 0304 	and.w	r3, r3, #4
 800bbb0:	2b04      	cmp	r3, #4
 800bbb2:	d10e      	bne.n	800bbd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f817 	bl	800bbf6 <UART_WaitOnFlagUntilTimeout>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	e00d      	b.n	800bbee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2220      	movs	r2, #32
 800bbd6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2220      	movs	r2, #32
 800bbdc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b09c      	sub	sp, #112	; 0x70
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	60f8      	str	r0, [r7, #12]
 800bbfe:	60b9      	str	r1, [r7, #8]
 800bc00:	603b      	str	r3, [r7, #0]
 800bc02:	4613      	mov	r3, r2
 800bc04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc06:	e0a5      	b.n	800bd54 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc0e:	f000 80a1 	beq.w	800bd54 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc12:	f7fb fa5f 	bl	80070d4 <HAL_GetTick>
 800bc16:	4602      	mov	r2, r0
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d302      	bcc.n	800bc28 <UART_WaitOnFlagUntilTimeout+0x32>
 800bc22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d13e      	bne.n	800bca6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc30:	e853 3f00 	ldrex	r3, [r3]
 800bc34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bc36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc3c:	667b      	str	r3, [r7, #100]	; 0x64
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	461a      	mov	r2, r3
 800bc44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc48:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc4e:	e841 2300 	strex	r3, r2, [r1]
 800bc52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bc54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1e6      	bne.n	800bc28 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3308      	adds	r3, #8
 800bc60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc64:	e853 3f00 	ldrex	r3, [r3]
 800bc68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6c:	f023 0301 	bic.w	r3, r3, #1
 800bc70:	663b      	str	r3, [r7, #96]	; 0x60
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	3308      	adds	r3, #8
 800bc78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc7a:	64ba      	str	r2, [r7, #72]	; 0x48
 800bc7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc82:	e841 2300 	strex	r3, r2, [r1]
 800bc86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bc88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1e5      	bne.n	800bc5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2220      	movs	r2, #32
 800bc92:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2220      	movs	r2, #32
 800bc98:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800bca2:	2303      	movs	r3, #3
 800bca4:	e067      	b.n	800bd76 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f003 0304 	and.w	r3, r3, #4
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d04f      	beq.n	800bd54 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	69db      	ldr	r3, [r3, #28]
 800bcba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcc2:	d147      	bne.n	800bd54 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bccc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd6:	e853 3f00 	ldrex	r3, [r3]
 800bcda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bce2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	461a      	mov	r2, r3
 800bcea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcec:	637b      	str	r3, [r7, #52]	; 0x34
 800bcee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bcf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcf4:	e841 2300 	strex	r3, r2, [r1]
 800bcf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1e6      	bne.n	800bcce <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	3308      	adds	r3, #8
 800bd06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	e853 3f00 	ldrex	r3, [r3]
 800bd0e:	613b      	str	r3, [r7, #16]
   return(result);
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	f023 0301 	bic.w	r3, r3, #1
 800bd16:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	3308      	adds	r3, #8
 800bd1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bd20:	623a      	str	r2, [r7, #32]
 800bd22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd24:	69f9      	ldr	r1, [r7, #28]
 800bd26:	6a3a      	ldr	r2, [r7, #32]
 800bd28:	e841 2300 	strex	r3, r2, [r1]
 800bd2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1e5      	bne.n	800bd00 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2220      	movs	r2, #32
 800bd38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2220      	movs	r2, #32
 800bd3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2220      	movs	r2, #32
 800bd44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800bd50:	2303      	movs	r3, #3
 800bd52:	e010      	b.n	800bd76 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	69da      	ldr	r2, [r3, #28]
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	68ba      	ldr	r2, [r7, #8]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	bf0c      	ite	eq
 800bd64:	2301      	moveq	r3, #1
 800bd66:	2300      	movne	r3, #0
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	79fb      	ldrb	r3, [r7, #7]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	f43f af4a 	beq.w	800bc08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3770      	adds	r7, #112	; 0x70
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
	...

0800bd80 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b096      	sub	sp, #88	; 0x58
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	68ba      	ldr	r2, [r7, #8]
 800bd92:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	88fa      	ldrh	r2, [r7, #6]
 800bd98:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2222      	movs	r2, #34	; 0x22
 800bda8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d02b      	beq.n	800be0a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdb6:	4a42      	ldr	r2, [pc, #264]	; (800bec0 <UART_Start_Receive_DMA+0x140>)
 800bdb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdbe:	4a41      	ldr	r2, [pc, #260]	; (800bec4 <UART_Start_Receive_DMA+0x144>)
 800bdc0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdc6:	4a40      	ldr	r2, [pc, #256]	; (800bec8 <UART_Start_Receive_DMA+0x148>)
 800bdc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdce:	2200      	movs	r2, #0
 800bdd0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	3324      	adds	r3, #36	; 0x24
 800bddc:	4619      	mov	r1, r3
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bde2:	461a      	mov	r2, r3
 800bde4:	88fb      	ldrh	r3, [r7, #6]
 800bde6:	f7fb fc59 	bl	800769c <HAL_DMA_Start_IT>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d00c      	beq.n	800be0a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2210      	movs	r2, #16
 800bdf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2220      	movs	r2, #32
 800be04:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	e055      	b.n	800beb6 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2200      	movs	r2, #0
 800be0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d018      	beq.n	800be4c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be22:	e853 3f00 	ldrex	r3, [r3]
 800be26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be2e:	657b      	str	r3, [r7, #84]	; 0x54
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	461a      	mov	r2, r3
 800be36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be38:	64bb      	str	r3, [r7, #72]	; 0x48
 800be3a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be40:	e841 2300 	strex	r3, r2, [r1]
 800be44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800be46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1e6      	bne.n	800be1a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	3308      	adds	r3, #8
 800be52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	e853 3f00 	ldrex	r3, [r3]
 800be5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5e:	f043 0301 	orr.w	r3, r3, #1
 800be62:	653b      	str	r3, [r7, #80]	; 0x50
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	3308      	adds	r3, #8
 800be6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be6c:	637a      	str	r2, [r7, #52]	; 0x34
 800be6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be74:	e841 2300 	strex	r3, r2, [r1]
 800be78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800be7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1e5      	bne.n	800be4c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3308      	adds	r3, #8
 800be86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	e853 3f00 	ldrex	r3, [r3]
 800be8e:	613b      	str	r3, [r7, #16]
   return(result);
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be96:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3308      	adds	r3, #8
 800be9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bea0:	623a      	str	r2, [r7, #32]
 800bea2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea4:	69f9      	ldr	r1, [r7, #28]
 800bea6:	6a3a      	ldr	r2, [r7, #32]
 800bea8:	e841 2300 	strex	r3, r2, [r1]
 800beac:	61bb      	str	r3, [r7, #24]
   return(result);
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1e5      	bne.n	800be80 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3758      	adds	r7, #88	; 0x58
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	0800bfdf 	.word	0x0800bfdf
 800bec4:	0800c103 	.word	0x0800c103
 800bec8:	0800c13b 	.word	0x0800c13b

0800becc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800becc:	b480      	push	{r7}
 800bece:	b089      	sub	sp, #36	; 0x24
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	e853 3f00 	ldrex	r3, [r3]
 800bee0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bee8:	61fb      	str	r3, [r7, #28]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	61bb      	str	r3, [r7, #24]
 800bef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef6:	6979      	ldr	r1, [r7, #20]
 800bef8:	69ba      	ldr	r2, [r7, #24]
 800befa:	e841 2300 	strex	r3, r2, [r1]
 800befe:	613b      	str	r3, [r7, #16]
   return(result);
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1e6      	bne.n	800bed4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2220      	movs	r2, #32
 800bf0a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800bf0c:	bf00      	nop
 800bf0e:	3724      	adds	r7, #36	; 0x24
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b095      	sub	sp, #84	; 0x54
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf28:	e853 3f00 	ldrex	r3, [r3]
 800bf2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf3e:	643b      	str	r3, [r7, #64]	; 0x40
 800bf40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf46:	e841 2300 	strex	r3, r2, [r1]
 800bf4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1e6      	bne.n	800bf20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	3308      	adds	r3, #8
 800bf58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5a:	6a3b      	ldr	r3, [r7, #32]
 800bf5c:	e853 3f00 	ldrex	r3, [r3]
 800bf60:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	f023 0301 	bic.w	r3, r3, #1
 800bf68:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	3308      	adds	r3, #8
 800bf70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf72:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf7a:	e841 2300 	strex	r3, r2, [r1]
 800bf7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d1e5      	bne.n	800bf52 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d118      	bne.n	800bfc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	e853 3f00 	ldrex	r3, [r3]
 800bf9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	f023 0310 	bic.w	r3, r3, #16
 800bfa2:	647b      	str	r3, [r7, #68]	; 0x44
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfac:	61bb      	str	r3, [r7, #24]
 800bfae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb0:	6979      	ldr	r1, [r7, #20]
 800bfb2:	69ba      	ldr	r2, [r7, #24]
 800bfb4:	e841 2300 	strex	r3, r2, [r1]
 800bfb8:	613b      	str	r3, [r7, #16]
   return(result);
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1e6      	bne.n	800bf8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2220      	movs	r2, #32
 800bfc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800bfd2:	bf00      	nop
 800bfd4:	3754      	adds	r7, #84	; 0x54
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b09c      	sub	sp, #112	; 0x70
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfea:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f003 0320 	and.w	r3, r3, #32
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d170      	bne.n	800c0dc <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800bffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bffc:	2200      	movs	r2, #0
 800bffe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c00a:	e853 3f00 	ldrex	r3, [r3]
 800c00e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c016:	66bb      	str	r3, [r7, #104]	; 0x68
 800c018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	461a      	mov	r2, r3
 800c01e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c020:	65bb      	str	r3, [r7, #88]	; 0x58
 800c022:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c026:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c028:	e841 2300 	strex	r3, r2, [r1]
 800c02c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c02e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1e6      	bne.n	800c002 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	3308      	adds	r3, #8
 800c03a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03e:	e853 3f00 	ldrex	r3, [r3]
 800c042:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c046:	f023 0301 	bic.w	r3, r3, #1
 800c04a:	667b      	str	r3, [r7, #100]	; 0x64
 800c04c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	3308      	adds	r3, #8
 800c052:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c054:	647a      	str	r2, [r7, #68]	; 0x44
 800c056:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c058:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c05a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c05c:	e841 2300 	strex	r3, r2, [r1]
 800c060:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1e5      	bne.n	800c034 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	3308      	adds	r3, #8
 800c06e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	e853 3f00 	ldrex	r3, [r3]
 800c076:	623b      	str	r3, [r7, #32]
   return(result);
 800c078:	6a3b      	ldr	r3, [r7, #32]
 800c07a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c07e:	663b      	str	r3, [r7, #96]	; 0x60
 800c080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	3308      	adds	r3, #8
 800c086:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c088:	633a      	str	r2, [r7, #48]	; 0x30
 800c08a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c08c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c08e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c090:	e841 2300 	strex	r3, r2, [r1]
 800c094:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1e5      	bne.n	800c068 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c09c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c09e:	2220      	movs	r2, #32
 800c0a0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d118      	bne.n	800c0dc <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	e853 3f00 	ldrex	r3, [r3]
 800c0b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f023 0310 	bic.w	r3, r3, #16
 800c0be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c0c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0c8:	61fb      	str	r3, [r7, #28]
 800c0ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0cc:	69b9      	ldr	r1, [r7, #24]
 800c0ce:	69fa      	ldr	r2, [r7, #28]
 800c0d0:	e841 2300 	strex	r3, r2, [r1]
 800c0d4:	617b      	str	r3, [r7, #20]
   return(result);
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d1e6      	bne.n	800c0aa <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d107      	bne.n	800c0f4 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c0ee:	f7ff fa01 	bl	800b4f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c0f2:	e002      	b.n	800c0fa <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800c0f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c0f6:	f7ff f9df 	bl	800b4b8 <HAL_UART_RxCpltCallback>
}
 800c0fa:	bf00      	nop
 800c0fc:	3770      	adds	r7, #112	; 0x70
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b084      	sub	sp, #16
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c10e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c114:	2b01      	cmp	r3, #1
 800c116:	d109      	bne.n	800c12c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c11e:	085b      	lsrs	r3, r3, #1
 800c120:	b29b      	uxth	r3, r3
 800c122:	4619      	mov	r1, r3
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f7ff f9e5 	bl	800b4f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c12a:	e002      	b.n	800c132 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f7ff f9cd 	bl	800b4cc <HAL_UART_RxHalfCpltCallback>
}
 800c132:	bf00      	nop
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b086      	sub	sp, #24
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c146:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c14c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c152:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c15e:	2b80      	cmp	r3, #128	; 0x80
 800c160:	d109      	bne.n	800c176 <UART_DMAError+0x3c>
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	2b21      	cmp	r3, #33	; 0x21
 800c166:	d106      	bne.n	800c176 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	2200      	movs	r2, #0
 800c16c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800c170:	6978      	ldr	r0, [r7, #20]
 800c172:	f7ff feab 	bl	800becc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c180:	2b40      	cmp	r3, #64	; 0x40
 800c182:	d109      	bne.n	800c198 <UART_DMAError+0x5e>
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2b22      	cmp	r3, #34	; 0x22
 800c188:	d106      	bne.n	800c198 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	2200      	movs	r2, #0
 800c18e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c192:	6978      	ldr	r0, [r7, #20]
 800c194:	f7ff fec0 	bl	800bf18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c19e:	f043 0210 	orr.w	r2, r3, #16
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c1a8:	6978      	ldr	r0, [r7, #20]
 800c1aa:	f7ff f999 	bl	800b4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1ae:	bf00      	nop
 800c1b0:	3718      	adds	r7, #24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <MX_MEMS_Init>:
static void DWT_Init(void);
static void DWT_Start(void);
static uint32_t DWT_Stop(void);

void MX_MEMS_Init(void)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DataLogFusion_Init();
 800c1ba:	f000 f821 	bl	800c200 <MX_DataLogFusion_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800c1be:	bf00      	nop
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_DataLogFusion_Process();
 800c1c6:	f000 f89d 	bl	800c304 <MX_DataLogFusion_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 800c1ca:	bf00      	nop
 800c1cc:	bd80      	pop	{r7, pc}
	...

0800c1d0 <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *              the configuration information for TIM module.
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	4b06      	ldr	r3, [pc, #24]	; (800c1f8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d102      	bne.n	800c1ea <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 800c1e4:	4b05      	ldr	r3, [pc, #20]	; (800c1fc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	701a      	strb	r2, [r3, #0]
  }
}
 800c1ea:	bf00      	nop
 800c1ec:	370c      	adds	r7, #12
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	20001604 	.word	0x20001604
 800c1fc:	200007b8 	.word	0x200007b8

0800c200 <MX_DataLogFusion_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_DataLogFusion_Init(void)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af00      	add	r7, sp, #0
  float ans_float;

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800c206:	2101      	movs	r1, #1
 800c208:	2000      	movs	r0, #0
 800c20a:	f7fa fd63 	bl	8006cd4 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 800c20e:	2000      	movs	r0, #0
 800c210:	f7fa fdb4 	bl	8006d7c <BSP_PB_GetState>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	bf0c      	ite	eq
 800c21a:	2301      	moveq	r3, #1
 800c21c:	2300      	movne	r3, #0
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	461a      	mov	r2, r3
 800c222:	4b32      	ldr	r3, [pc, #200]	; (800c2ec <MX_DataLogFusion_Init+0xec>)
 800c224:	601a      	str	r2, [r3, #0]

  /* Initialize LED */
  BSP_LED_Init(LED2);
 800c226:	2000      	movs	r0, #0
 800c228:	f7fa fcd8 	bl	8006bdc <BSP_LED_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800c22c:	2000      	movs	r0, #0
 800c22e:	f7fa fe03 	bl	8006e38 <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 800c232:	f7f4 ff39 	bl	80010a8 <MX_TIM3_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 800c236:	2064      	movs	r0, #100	; 0x64
 800c238:	f000 fcae 	bl	800cb98 <TIM_Config>

  /* Initialize (disabled) sensors */
  Init_Sensors();
 800c23c:	f000 f8fa 	bl	800c434 <Init_Sensors>

  /* Sensor Fusion API initialization function */
  MotionFX_manager_init();
 800c240:	f001 fc9c 	bl	800db7c <MotionFX_manager_init>

  /* OPTIONAL */
  /* Get library version */
  MotionFX_manager_get_version(LibVersion, &LibVersionLen);
 800c244:	492a      	ldr	r1, [pc, #168]	; (800c2f0 <MX_DataLogFusion_Init+0xf0>)
 800c246:	482b      	ldr	r0, [pc, #172]	; (800c2f4 <MX_DataLogFusion_Init+0xf4>)
 800c248:	f001 fd44 	bl	800dcd4 <MotionFX_manager_get_version>

  /* Enable magnetometer calibration */
  MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800c24c:	200a      	movs	r0, #10
 800c24e:	f001 fd60 	bl	800dd12 <MotionFX_manager_MagCal_start>

  /* Test if calibration data are available */
  MFX_MagCal_output_t mag_cal_test;
  MotionFX_MagCal_getParams(&mag_cal_test);
 800c252:	1d3b      	adds	r3, r7, #4
 800c254:	4618      	mov	r0, r3
 800c256:	f00c f8b9 	bl	80183cc <MotionFX_MagCal_getParams>

  /* If calibration data are available load HI coefficients */
  if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 800c25a:	7c3b      	ldrb	r3, [r7, #16]
 800c25c:	2b03      	cmp	r3, #3
 800c25e:	d132      	bne.n	800c2c6 <MX_DataLogFusion_Init+0xc6>
  {
    ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800c260:	edd7 7a01 	vldr	s15, [r7, #4]
 800c264:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800c2f8 <MX_DataLogFusion_Init+0xf8>
 800c268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c26c:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.x = (int32_t)ans_float;
 800c270:	edd7 7a05 	vldr	s15, [r7, #20]
 800c274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c278:	ee17 2a90 	vmov	r2, s15
 800c27c:	4b1f      	ldr	r3, [pc, #124]	; (800c2fc <MX_DataLogFusion_Init+0xfc>)
 800c27e:	601a      	str	r2, [r3, #0]
    ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800c280:	edd7 7a02 	vldr	s15, [r7, #8]
 800c284:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800c2f8 <MX_DataLogFusion_Init+0xf8>
 800c288:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c28c:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.y = (int32_t)ans_float;
 800c290:	edd7 7a05 	vldr	s15, [r7, #20]
 800c294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c298:	ee17 2a90 	vmov	r2, s15
 800c29c:	4b17      	ldr	r3, [pc, #92]	; (800c2fc <MX_DataLogFusion_Init+0xfc>)
 800c29e:	605a      	str	r2, [r3, #4]
    ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800c2a0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2a4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800c2f8 <MX_DataLogFusion_Init+0xf8>
 800c2a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c2ac:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.z = (int32_t)ans_float;
 800c2b0:	edd7 7a05 	vldr	s15, [r7, #20]
 800c2b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2b8:	ee17 2a90 	vmov	r2, s15
 800c2bc:	4b0f      	ldr	r3, [pc, #60]	; (800c2fc <MX_DataLogFusion_Init+0xfc>)
 800c2be:	609a      	str	r2, [r3, #8]

    MagCalStatus = 1;
 800c2c0:	4b0f      	ldr	r3, [pc, #60]	; (800c300 <MX_DataLogFusion_Init+0x100>)
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	701a      	strb	r2, [r3, #0]
  }

  DWT_Init();
 800c2c6:	f000 fc9b 	bl	800cc00 <DWT_Init>

  BSP_LED_On(LED2);
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	f7fa fc98 	bl	8006c00 <BSP_LED_On>
  HAL_Delay(500);
 800c2d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c2d4:	f7fa ff0a 	bl	80070ec <HAL_Delay>
  BSP_LED_Off(LED2);
 800c2d8:	2000      	movs	r0, #0
 800c2da:	f7fa fca7 	bl	8006c2c <BSP_LED_Off>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 800c2de:	f000 fdb3 	bl	800ce48 <UART_StartReceiveMsg>
}
 800c2e2:	bf00      	nop
 800c2e4:	3718      	adds	r7, #24
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	200007cc 	.word	0x200007cc
 800c2f0:	20001968 	.word	0x20001968
 800c2f4:	20001944 	.word	0x20001944
 800c2f8:	43fa0000 	.word	0x43fa0000
 800c2fc:	20000808 	.word	0x20000808
 800c300:	20000814 	.word	0x20000814

0800c304 <MX_DataLogFusion_Process>:
/**
  * @brief  Process of the application
  * @retval None
  */
static void MX_DataLogFusion_Process(void)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	af00      	add	r7, sp, #0
  static TMsg msg_dat;
  static TMsg msg_cmd;

  if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 800c308:	4840      	ldr	r0, [pc, #256]	; (800c40c <MX_DataLogFusion_Process+0x108>)
 800c30a:	f000 fccb 	bl	800cca4 <UART_ReceivedMSG>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b01      	cmp	r3, #1
 800c312:	d106      	bne.n	800c322 <MX_DataLogFusion_Process+0x1e>
  {
    if (msg_cmd.Data[0] == DEV_ADDR)
 800c314:	4b3d      	ldr	r3, [pc, #244]	; (800c40c <MX_DataLogFusion_Process+0x108>)
 800c316:	791b      	ldrb	r3, [r3, #4]
 800c318:	2b32      	cmp	r3, #50	; 0x32
 800c31a:	d102      	bne.n	800c322 <MX_DataLogFusion_Process+0x1e>
    {
      (void)HandleMSG((TMsg *)&msg_cmd);
 800c31c:	483b      	ldr	r0, [pc, #236]	; (800c40c <MX_DataLogFusion_Process+0x108>)
 800c31e:	f000 fedd 	bl	800d0dc <HandleMSG>
    }
  }

  if (MagCalRequest == 1U)
 800c322:	4b3b      	ldr	r3, [pc, #236]	; (800c410 <MX_DataLogFusion_Process+0x10c>)
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	b2db      	uxtb	r3, r3
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d120      	bne.n	800c36e <MX_DataLogFusion_Process+0x6a>
  {
    /* Debouncing */
    HAL_Delay(50);
 800c32c:	2032      	movs	r0, #50	; 0x32
 800c32e:	f7fa fedd 	bl	80070ec <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 800c332:	bf00      	nop
 800c334:	2000      	movs	r0, #0
 800c336:	f7fa fd21 	bl	8006d7c <BSP_PB_GetState>
 800c33a:	4602      	mov	r2, r0
 800c33c:	4b35      	ldr	r3, [pc, #212]	; (800c414 <MX_DataLogFusion_Process+0x110>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	429a      	cmp	r2, r3
 800c342:	d0f7      	beq.n	800c334 <MX_DataLogFusion_Process+0x30>

    /* Debouncing */
    HAL_Delay(50);
 800c344:	2032      	movs	r0, #50	; 0x32
 800c346:	f7fa fed1 	bl	80070ec <HAL_Delay>

    MagCalRequest = 0;
 800c34a:	4b31      	ldr	r3, [pc, #196]	; (800c410 <MX_DataLogFusion_Process+0x10c>)
 800c34c:	2200      	movs	r2, #0
 800c34e:	701a      	strb	r2, [r3, #0]

    /* Reset magnetometer calibration value*/
    MagCalStatus = 0;
 800c350:	4b31      	ldr	r3, [pc, #196]	; (800c418 <MX_DataLogFusion_Process+0x114>)
 800c352:	2200      	movs	r2, #0
 800c354:	701a      	strb	r2, [r3, #0]
    MagOffset.x = 0;
 800c356:	4b31      	ldr	r3, [pc, #196]	; (800c41c <MX_DataLogFusion_Process+0x118>)
 800c358:	2200      	movs	r2, #0
 800c35a:	601a      	str	r2, [r3, #0]
    MagOffset.y = 0;
 800c35c:	4b2f      	ldr	r3, [pc, #188]	; (800c41c <MX_DataLogFusion_Process+0x118>)
 800c35e:	2200      	movs	r2, #0
 800c360:	605a      	str	r2, [r3, #4]
    MagOffset.z = 0;
 800c362:	4b2e      	ldr	r3, [pc, #184]	; (800c41c <MX_DataLogFusion_Process+0x118>)
 800c364:	2200      	movs	r2, #0
 800c366:	609a      	str	r2, [r3, #8]

    /* Enable magnetometer calibration */
    MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800c368:	200a      	movs	r0, #10
 800c36a:	f001 fcd2 	bl	800dd12 <MotionFX_manager_MagCal_start>
  }

  if (SensorReadRequest == 1U)
 800c36e:	4b2c      	ldr	r3, [pc, #176]	; (800c420 <MX_DataLogFusion_Process+0x11c>)
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	b2db      	uxtb	r3, r3
 800c374:	2b01      	cmp	r3, #1
 800c376:	d146      	bne.n	800c406 <MX_DataLogFusion_Process+0x102>
  {
    SensorReadRequest = 0;
 800c378:	4b29      	ldr	r3, [pc, #164]	; (800c420 <MX_DataLogFusion_Process+0x11c>)
 800c37a:	2200      	movs	r2, #0
 800c37c:	701a      	strb	r2, [r3, #0]

    /* Acquire data from enabled sensors and fill Msg stream */
    RTC_Handler(&msg_dat);
 800c37e:	4829      	ldr	r0, [pc, #164]	; (800c424 <MX_DataLogFusion_Process+0x120>)
 800c380:	f000 f872 	bl	800c468 <RTC_Handler>
    Accelero_Sensor_Handler(&msg_dat);
 800c384:	4827      	ldr	r0, [pc, #156]	; (800c424 <MX_DataLogFusion_Process+0x120>)
 800c386:	f000 f9d9 	bl	800c73c <Accelero_Sensor_Handler>
    Gyro_Sensor_Handler(&msg_dat);
 800c38a:	4826      	ldr	r0, [pc, #152]	; (800c424 <MX_DataLogFusion_Process+0x120>)
 800c38c:	f000 fa30 	bl	800c7f0 <Gyro_Sensor_Handler>
    Magneto_Sensor_Handler(&msg_dat);
 800c390:	4824      	ldr	r0, [pc, #144]	; (800c424 <MX_DataLogFusion_Process+0x120>)
 800c392:	f000 fa87 	bl	800c8a4 <Magneto_Sensor_Handler>
    Humidity_Sensor_Handler(&msg_dat);
 800c396:	4823      	ldr	r0, [pc, #140]	; (800c424 <MX_DataLogFusion_Process+0x120>)
 800c398:	f000 fbce 	bl	800cb38 <Humidity_Sensor_Handler>
    Temperature_Sensor_Handler(&msg_dat);
 800c39c:	4821      	ldr	r0, [pc, #132]	; (800c424 <MX_DataLogFusion_Process+0x120>)
 800c39e:	f000 fb9b 	bl	800cad8 <Temperature_Sensor_Handler>
    Pressure_Sensor_Handler(&msg_dat);
 800c3a2:	4820      	ldr	r0, [pc, #128]	; (800c424 <MX_DataLogFusion_Process+0x120>)
 800c3a4:	f000 fb68 	bl	800ca78 <Pressure_Sensor_Handler>

    /* Sensor Fusion specific part */
    FX_Data_Handler(&msg_dat);
 800c3a8:	481e      	ldr	r0, [pc, #120]	; (800c424 <MX_DataLogFusion_Process+0x120>)
 800c3aa:	f000 f8d1 	bl	800c550 <FX_Data_Handler>

    /* Send data stream */
    INIT_STREAMING_HEADER(&msg_dat);
 800c3ae:	481d      	ldr	r0, [pc, #116]	; (800c424 <MX_DataLogFusion_Process+0x120>)
 800c3b0:	f000 fe7a 	bl	800d0a8 <INIT_STREAMING_HEADER>
    msg_dat.Len = STREAMING_MSG_LENGTH;
 800c3b4:	4b1b      	ldr	r3, [pc, #108]	; (800c424 <MX_DataLogFusion_Process+0x120>)
 800c3b6:	2277      	movs	r2, #119	; 0x77
 800c3b8:	601a      	str	r2, [r3, #0]

    if (UseOfflineData == 1U)
 800c3ba:	4b1b      	ldr	r3, [pc, #108]	; (800c428 <MX_DataLogFusion_Process+0x124>)
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d11e      	bne.n	800c400 <MX_DataLogFusion_Process+0xfc>
    {
      OfflineDataCount--;
 800c3c2:	4b1a      	ldr	r3, [pc, #104]	; (800c42c <MX_DataLogFusion_Process+0x128>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	3b01      	subs	r3, #1
 800c3c8:	4a18      	ldr	r2, [pc, #96]	; (800c42c <MX_DataLogFusion_Process+0x128>)
 800c3ca:	6013      	str	r3, [r2, #0]
      if (OfflineDataCount < 0)
 800c3cc:	4b17      	ldr	r3, [pc, #92]	; (800c42c <MX_DataLogFusion_Process+0x128>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	da02      	bge.n	800c3da <MX_DataLogFusion_Process+0xd6>
      {
        OfflineDataCount = 0;
 800c3d4:	4b15      	ldr	r3, [pc, #84]	; (800c42c <MX_DataLogFusion_Process+0x128>)
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	601a      	str	r2, [r3, #0]
      }

      OfflineDataReadIndex++;
 800c3da:	4b15      	ldr	r3, [pc, #84]	; (800c430 <MX_DataLogFusion_Process+0x12c>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	4a13      	ldr	r2, [pc, #76]	; (800c430 <MX_DataLogFusion_Process+0x12c>)
 800c3e2:	6013      	str	r3, [r2, #0]
      if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 800c3e4:	4b12      	ldr	r3, [pc, #72]	; (800c430 <MX_DataLogFusion_Process+0x12c>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2b07      	cmp	r3, #7
 800c3ea:	dd02      	ble.n	800c3f2 <MX_DataLogFusion_Process+0xee>
      {
        OfflineDataReadIndex = 0;
 800c3ec:	4b10      	ldr	r3, [pc, #64]	; (800c430 <MX_DataLogFusion_Process+0x12c>)
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	601a      	str	r2, [r3, #0]
      }

      if (OfflineDataCount > 0)
 800c3f2:	4b0e      	ldr	r3, [pc, #56]	; (800c42c <MX_DataLogFusion_Process+0x128>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	dd02      	ble.n	800c400 <MX_DataLogFusion_Process+0xfc>
      {
        SensorReadRequest = 1;
 800c3fa:	4b09      	ldr	r3, [pc, #36]	; (800c420 <MX_DataLogFusion_Process+0x11c>)
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	701a      	strb	r2, [r3, #0]
      }
    }
    UART_SendMsg(&msg_dat);
 800c400:	4808      	ldr	r0, [pc, #32]	; (800c424 <MX_DataLogFusion_Process+0x120>)
 800c402:	f000 fd05 	bl	800ce10 <UART_SendMsg>
  }
}
 800c406:	bf00      	nop
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	20000818 	.word	0x20000818
 800c410:	20000804 	.word	0x20000804
 800c414:	200007cc 	.word	0x200007cc
 800c418:	20000814 	.word	0x20000814
 800c41c:	20000808 	.word	0x20000808
 800c420:	200007b8 	.word	0x200007b8
 800c424:	2000091c 	.word	0x2000091c
 800c428:	200007b9 	.word	0x200007b9
 800c42c:	200007c4 	.word	0x200007c4
 800c430:	200007bc 	.word	0x200007bc

0800c434 <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
static void Init_Sensors(void)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 800c438:	f001 fa66 	bl	800d908 <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 800c43c:	f001 fa6c 	bl	800d918 <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 800c440:	f001 fa72 	bl	800d928 <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 800c444:	f001 fa78 	bl	800d938 <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 800c448:	f001 fa7e 	bl	800d948 <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 800c44c:	f001 fa84 	bl	800d958 <BSP_SENSOR_HUM_Init>

  BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 800c450:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800c464 <Init_Sensors+0x30>
 800c454:	f001 fb36 	bl	800dac4 <BSP_SENSOR_ACC_SetOutputDataRate>
  BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 800c458:	2004      	movs	r0, #4
 800c45a:	f001 fb42 	bl	800dae2 <BSP_SENSOR_ACC_SetFullScale>
}
 800c45e:	bf00      	nop
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	42c80000 	.word	0x42c80000

0800c468 <RTC_Handler>:
 * @brief  Handles the time+date getting/sending
 * @param  Msg the time+date part of the stream
 * @retval None
 */
static void RTC_Handler(TMsg *Msg)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b08c      	sub	sp, #48	; 0x30
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  uint8_t sub_sec = 0;
 800c470:	2300      	movs	r3, #0
 800c472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 800c476:	4b32      	ldr	r3, [pc, #200]	; (800c540 <RTC_Handler+0xd8>)
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (UseOfflineData == 1)
 800c47c:	4b31      	ldr	r3, [pc, #196]	; (800c544 <RTC_Handler+0xdc>)
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	2b01      	cmp	r3, #1
 800c482:	d12b      	bne.n	800c4dc <RTC_Handler+0x74>
  {
    Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 800c484:	4b30      	ldr	r3, [pc, #192]	; (800c548 <RTC_Handler+0xe0>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a30      	ldr	r2, [pc, #192]	; (800c54c <RTC_Handler+0xe4>)
 800c48a:	2134      	movs	r1, #52	; 0x34
 800c48c:	fb01 f303 	mul.w	r3, r1, r3
 800c490:	4413      	add	r3, r2
 800c492:	781a      	ldrb	r2, [r3, #0]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 800c498:	4b2b      	ldr	r3, [pc, #172]	; (800c548 <RTC_Handler+0xe0>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a2b      	ldr	r2, [pc, #172]	; (800c54c <RTC_Handler+0xe4>)
 800c49e:	2134      	movs	r1, #52	; 0x34
 800c4a0:	fb01 f303 	mul.w	r3, r1, r3
 800c4a4:	4413      	add	r3, r2
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	781a      	ldrb	r2, [r3, #0]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 800c4ae:	4b26      	ldr	r3, [pc, #152]	; (800c548 <RTC_Handler+0xe0>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a26      	ldr	r2, [pc, #152]	; (800c54c <RTC_Handler+0xe4>)
 800c4b4:	2134      	movs	r1, #52	; 0x34
 800c4b6:	fb01 f303 	mul.w	r3, r1, r3
 800c4ba:	4413      	add	r3, r2
 800c4bc:	3302      	adds	r3, #2
 800c4be:	781a      	ldrb	r2, [r3, #0]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 800c4c4:	4b20      	ldr	r3, [pc, #128]	; (800c548 <RTC_Handler+0xe0>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a20      	ldr	r2, [pc, #128]	; (800c54c <RTC_Handler+0xe4>)
 800c4ca:	2134      	movs	r1, #52	; 0x34
 800c4cc:	fb01 f303 	mul.w	r3, r1, r3
 800c4d0:	4413      	add	r3, r2
 800c4d2:	3303      	adds	r3, #3
 800c4d4:	781a      	ldrb	r2, [r3, #0]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	729a      	strb	r2, [r3, #10]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
    Msg->Data[6] = sub_sec;
  }
}
 800c4da:	e02d      	b.n	800c538 <RTC_Handler+0xd0>
    (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 800c4dc:	f107 0308 	add.w	r3, r7, #8
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	4816      	ldr	r0, [pc, #88]	; (800c540 <RTC_Handler+0xd8>)
 800c4e6:	f7fd ffc1 	bl	800a46c <HAL_RTC_GetTime>
    (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 800c4ea:	f107 031c 	add.w	r3, r7, #28
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	4813      	ldr	r0, [pc, #76]	; (800c540 <RTC_Handler+0xd8>)
 800c4f4:	f7fe f89d 	bl	800a632 <HAL_RTC_GetDate>
    ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4fc:	1ad3      	subs	r3, r2, r3
 800c4fe:	2264      	movs	r2, #100	; 0x64
 800c500:	fb02 f303 	mul.w	r3, r2, r3
 800c504:	627b      	str	r3, [r7, #36]	; 0x24
    ans_int32 /= RtcSynchPrediv + 1;
 800c506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50a:	3301      	adds	r3, #1
 800c50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c510:	627b      	str	r3, [r7, #36]	; 0x24
    ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 800c512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c514:	b2db      	uxtb	r3, r3
 800c516:	623b      	str	r3, [r7, #32]
    sub_sec = (uint8_t)ans_uint32;
 800c518:	6a3b      	ldr	r3, [r7, #32]
 800c51a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
 800c51e:	7a3a      	ldrb	r2, [r7, #8]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 800c524:	7a7a      	ldrb	r2, [r7, #9]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 800c52a:	7aba      	ldrb	r2, [r7, #10]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = sub_sec;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c536:	729a      	strb	r2, [r3, #10]
}
 800c538:	bf00      	nop
 800c53a:	3730      	adds	r7, #48	; 0x30
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	20001650 	.word	0x20001650
 800c544:	200007b9 	.word	0x200007b9
 800c548:	200007bc 	.word	0x200007bc
 800c54c:	200017a4 	.word	0x200017a4

0800c550 <FX_Data_Handler>:
 * @brief  Sensor Fusion data handler
 * @param  Msg the Sensor Fusion data part of the stream
 * @retval None
 */
static void FX_Data_Handler(TMsg *Msg)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b09e      	sub	sp, #120	; 0x78
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  uint32_t elapsed_time_us = 0U;
 800c558:	2300      	movs	r3, #0
 800c55a:	677b      	str	r3, [r7, #116]	; 0x74
  MFX_input_t data_in;
  MFX_input_t *pdata_in = &data_in;
 800c55c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c560:	673b      	str	r3, [r7, #112]	; 0x70
  MFX_output_t data_out;
  MFX_output_t *pdata_out = &data_out;
 800c562:	f107 030c 	add.w	r3, r7, #12
 800c566:	66fb      	str	r3, [r7, #108]	; 0x6c

  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800c568:	4b65      	ldr	r3, [pc, #404]	; (800c700 <FX_Data_Handler+0x1b0>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f003 0310 	and.w	r3, r3, #16
 800c570:	2b10      	cmp	r3, #16
 800c572:	f040 80c0 	bne.w	800c6f6 <FX_Data_Handler+0x1a6>
  {
    if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800c576:	4b62      	ldr	r3, [pc, #392]	; (800c700 <FX_Data_Handler+0x1b0>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 0320 	and.w	r3, r3, #32
 800c57e:	2b20      	cmp	r3, #32
 800c580:	f040 80b9 	bne.w	800c6f6 <FX_Data_Handler+0x1a6>
    {
      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800c584:	4b5e      	ldr	r3, [pc, #376]	; (800c700 <FX_Data_Handler+0x1b0>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c58c:	2b40      	cmp	r3, #64	; 0x40
 800c58e:	f040 80b2 	bne.w	800c6f6 <FX_Data_Handler+0x1a6>
      {
        /* Convert angular velocity from [mdps] to [dps] */
        data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 800c592:	4b5c      	ldr	r3, [pc, #368]	; (800c704 <FX_Data_Handler+0x1b4>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	ee07 3a90 	vmov	s15, r3
 800c59a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c59e:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800c708 <FX_Data_Handler+0x1b8>
 800c5a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5a6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 800c5aa:	4b56      	ldr	r3, [pc, #344]	; (800c704 <FX_Data_Handler+0x1b4>)
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	ee07 3a90 	vmov	s15, r3
 800c5b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5b6:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800c708 <FX_Data_Handler+0x1b8>
 800c5ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5be:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 800c5c2:	4b50      	ldr	r3, [pc, #320]	; (800c704 <FX_Data_Handler+0x1b4>)
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	ee07 3a90 	vmov	s15, r3
 800c5ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5ce:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800c708 <FX_Data_Handler+0x1b8>
 800c5d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5d6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

        /* Convert acceleration from [mg] to [g] */
        data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 800c5da:	4b4c      	ldr	r3, [pc, #304]	; (800c70c <FX_Data_Handler+0x1bc>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	ee07 3a90 	vmov	s15, r3
 800c5e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5e6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800c708 <FX_Data_Handler+0x1b8>
 800c5ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5ee:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 800c5f2:	4b46      	ldr	r3, [pc, #280]	; (800c70c <FX_Data_Handler+0x1bc>)
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	ee07 3a90 	vmov	s15, r3
 800c5fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5fe:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800c708 <FX_Data_Handler+0x1b8>
 800c602:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c606:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800c60a:	4b40      	ldr	r3, [pc, #256]	; (800c70c <FX_Data_Handler+0x1bc>)
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	ee07 3a90 	vmov	s15, r3
 800c612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c616:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800c708 <FX_Data_Handler+0x1b8>
 800c61a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c61e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

        /* Convert magnetic field intensity from [mGauss] to [uT / 50] */
        data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800c622:	4b3b      	ldr	r3, [pc, #236]	; (800c710 <FX_Data_Handler+0x1c0>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	ee07 3a90 	vmov	s15, r3
 800c62a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c62e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800c714 <FX_Data_Handler+0x1c4>
 800c632:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c636:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800c63a:	4b35      	ldr	r3, [pc, #212]	; (800c710 <FX_Data_Handler+0x1c0>)
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	ee07 3a90 	vmov	s15, r3
 800c642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c646:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800c714 <FX_Data_Handler+0x1c4>
 800c64a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c64e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800c652:	4b2f      	ldr	r3, [pc, #188]	; (800c710 <FX_Data_Handler+0x1c0>)
 800c654:	689b      	ldr	r3, [r3, #8]
 800c656:	ee07 3a90 	vmov	s15, r3
 800c65a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c65e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800c714 <FX_Data_Handler+0x1c4>
 800c662:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c666:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

        /* Run Sensor Fusion algorithm */
        BSP_LED_On(LED2);
 800c66a:	2000      	movs	r0, #0
 800c66c:	f7fa fac8 	bl	8006c00 <BSP_LED_On>
        DWT_Start();
 800c670:	f000 fade 	bl	800cc30 <DWT_Start>
        MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 800c674:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800c718 <FX_Data_Handler+0x1c8>
 800c678:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c67a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c67c:	f001 fad6 	bl	800dc2c <MotionFX_manager_run>
        elapsed_time_us = DWT_Stop();
 800c680:	f000 fae8 	bl	800cc54 <DWT_Stop>
 800c684:	6778      	str	r0, [r7, #116]	; 0x74
        BSP_LED_Off(LED2);
 800c686:	2000      	movs	r0, #0
 800c688:	f7fa fad0 	bl	8006c2c <BSP_LED_Off>

        (void)memcpy(&Msg->Data[55], (void *)pdata_out->quaternion, 4U * sizeof(float));
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 800c692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c694:	330c      	adds	r3, #12
 800c696:	2210      	movs	r2, #16
 800c698:	4619      	mov	r1, r3
 800c69a:	f00d fe27 	bl	801a2ec <memcpy>
        (void)memcpy(&Msg->Data[71], (void *)pdata_out->rotation, 3U * sizeof(float));
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	334b      	adds	r3, #75	; 0x4b
 800c6a2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c6a4:	220c      	movs	r2, #12
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f00d fe20 	bl	801a2ec <memcpy>
        (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity, 3U * sizeof(float));
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f103 0057 	add.w	r0, r3, #87	; 0x57
 800c6b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6b4:	331c      	adds	r3, #28
 800c6b6:	220c      	movs	r2, #12
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	f00d fe17 	bl	801a2ec <memcpy>
        (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration, 3U * sizeof(float));
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f103 0063 	add.w	r0, r3, #99	; 0x63
 800c6c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6c6:	3328      	adds	r3, #40	; 0x28
 800c6c8:	220c      	movs	r2, #12
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	f00d fe0e 	bl	801a2ec <memcpy>

        (void)memcpy(&Msg->Data[107], (void *) & (pdata_out->heading), sizeof(float));
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	336f      	adds	r3, #111	; 0x6f
 800c6d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c6d6:	3234      	adds	r2, #52	; 0x34
 800c6d8:	6812      	ldr	r2, [r2, #0]
 800c6da:	601a      	str	r2, [r3, #0]
        (void)memcpy(&Msg->Data[111], (void *) & (pdata_out->headingErr), sizeof(float));
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	3373      	adds	r3, #115	; 0x73
 800c6e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c6e2:	3238      	adds	r2, #56	; 0x38
 800c6e4:	6812      	ldr	r2, [r2, #0]
 800c6e6:	601a      	str	r2, [r3, #0]

        Serialize_s32(&Msg->Data[115], (int32_t)elapsed_time_us, 4);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	3377      	adds	r3, #119	; 0x77
 800c6ec:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c6ee:	2204      	movs	r2, #4
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f001 fc20 	bl	800df36 <Serialize_s32>
      }
    }
  }
}
 800c6f6:	bf00      	nop
 800c6f8:	3778      	adds	r7, #120	; 0x78
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	200007b4 	.word	0x200007b4
 800c704:	200007dc 	.word	0x200007dc
 800c708:	3a83126f 	.word	0x3a83126f
 800c70c:	200007d0 	.word	0x200007d0
 800c710:	200007e8 	.word	0x200007e8
 800c714:	3b03126f 	.word	0x3b03126f
 800c718:	3c23d70a 	.word	0x3c23d70a

0800c71c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b083      	sub	sp, #12
 800c720:	af00      	add	r7, sp, #0
 800c722:	4603      	mov	r3, r0
 800c724:	71fb      	strb	r3, [r7, #7]
  MagCalRequest = 1U;
 800c726:	4b04      	ldr	r3, [pc, #16]	; (800c738 <BSP_PB_Callback+0x1c>)
 800c728:	2201      	movs	r2, #1
 800c72a:	701a      	strb	r2, [r3, #0]
}
 800c72c:	bf00      	nop
 800c72e:	370c      	adds	r7, #12
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr
 800c738:	20000804 	.word	0x20000804

0800c73c <Accelero_Sensor_Handler>:
 * @brief  Handles the ACC axes data getting/sending
 * @param  Msg the ACC part of the stream
 * @retval None
 */
static void Accelero_Sensor_Handler(TMsg *Msg)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800c744:	4b25      	ldr	r3, [pc, #148]	; (800c7dc <Accelero_Sensor_Handler+0xa0>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f003 0310 	and.w	r3, r3, #16
 800c74c:	2b10      	cmp	r3, #16
 800c74e:	d140      	bne.n	800c7d2 <Accelero_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 800c750:	4b23      	ldr	r3, [pc, #140]	; (800c7e0 <Accelero_Sensor_Handler+0xa4>)
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	2b01      	cmp	r3, #1
 800c756:	d121      	bne.n	800c79c <Accelero_Sensor_Handler+0x60>
    {
      AccValue.x = OfflineData[OfflineDataReadIndex].acceleration_x_mg;
 800c758:	4b22      	ldr	r3, [pc, #136]	; (800c7e4 <Accelero_Sensor_Handler+0xa8>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a22      	ldr	r2, [pc, #136]	; (800c7e8 <Accelero_Sensor_Handler+0xac>)
 800c75e:	2134      	movs	r1, #52	; 0x34
 800c760:	fb01 f303 	mul.w	r3, r1, r3
 800c764:	4413      	add	r3, r2
 800c766:	3310      	adds	r3, #16
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a20      	ldr	r2, [pc, #128]	; (800c7ec <Accelero_Sensor_Handler+0xb0>)
 800c76c:	6013      	str	r3, [r2, #0]
      AccValue.y = OfflineData[OfflineDataReadIndex].acceleration_y_mg;
 800c76e:	4b1d      	ldr	r3, [pc, #116]	; (800c7e4 <Accelero_Sensor_Handler+0xa8>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a1d      	ldr	r2, [pc, #116]	; (800c7e8 <Accelero_Sensor_Handler+0xac>)
 800c774:	2134      	movs	r1, #52	; 0x34
 800c776:	fb01 f303 	mul.w	r3, r1, r3
 800c77a:	4413      	add	r3, r2
 800c77c:	3314      	adds	r3, #20
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a1a      	ldr	r2, [pc, #104]	; (800c7ec <Accelero_Sensor_Handler+0xb0>)
 800c782:	6053      	str	r3, [r2, #4]
      AccValue.z = OfflineData[OfflineDataReadIndex].acceleration_z_mg;
 800c784:	4b17      	ldr	r3, [pc, #92]	; (800c7e4 <Accelero_Sensor_Handler+0xa8>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a17      	ldr	r2, [pc, #92]	; (800c7e8 <Accelero_Sensor_Handler+0xac>)
 800c78a:	2134      	movs	r1, #52	; 0x34
 800c78c:	fb01 f303 	mul.w	r3, r1, r3
 800c790:	4413      	add	r3, r2
 800c792:	3318      	adds	r3, #24
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4a15      	ldr	r2, [pc, #84]	; (800c7ec <Accelero_Sensor_Handler+0xb0>)
 800c798:	6093      	str	r3, [r2, #8]
 800c79a:	e002      	b.n	800c7a2 <Accelero_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_ACC_GetAxes(&AccValue);
 800c79c:	4813      	ldr	r0, [pc, #76]	; (800c7ec <Accelero_Sensor_Handler+0xb0>)
 800c79e:	f001 f943 	bl	800da28 <BSP_SENSOR_ACC_GetAxes>
    }

    Serialize_s32(&Msg->Data[19], (int32_t)AccValue.x, 4);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	3317      	adds	r3, #23
 800c7a6:	4a11      	ldr	r2, [pc, #68]	; (800c7ec <Accelero_Sensor_Handler+0xb0>)
 800c7a8:	6811      	ldr	r1, [r2, #0]
 800c7aa:	2204      	movs	r2, #4
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f001 fbc2 	bl	800df36 <Serialize_s32>
    Serialize_s32(&Msg->Data[23], (int32_t)AccValue.y, 4);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	331b      	adds	r3, #27
 800c7b6:	4a0d      	ldr	r2, [pc, #52]	; (800c7ec <Accelero_Sensor_Handler+0xb0>)
 800c7b8:	6851      	ldr	r1, [r2, #4]
 800c7ba:	2204      	movs	r2, #4
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f001 fbba 	bl	800df36 <Serialize_s32>
    Serialize_s32(&Msg->Data[27], (int32_t)AccValue.z, 4);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	331f      	adds	r3, #31
 800c7c6:	4a09      	ldr	r2, [pc, #36]	; (800c7ec <Accelero_Sensor_Handler+0xb0>)
 800c7c8:	6891      	ldr	r1, [r2, #8]
 800c7ca:	2204      	movs	r2, #4
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f001 fbb2 	bl	800df36 <Serialize_s32>
  }
}
 800c7d2:	bf00      	nop
 800c7d4:	3708      	adds	r7, #8
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	200007b4 	.word	0x200007b4
 800c7e0:	200007b9 	.word	0x200007b9
 800c7e4:	200007bc 	.word	0x200007bc
 800c7e8:	200017a4 	.word	0x200017a4
 800c7ec:	200007d0 	.word	0x200007d0

0800c7f0 <Gyro_Sensor_Handler>:
 * @brief  Handles the GYR axes data getting/sending
 * @param  Msg the GYR part of the stream
 * @retval None
 */
static void Gyro_Sensor_Handler(TMsg *Msg)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800c7f8:	4b25      	ldr	r3, [pc, #148]	; (800c890 <Gyro_Sensor_Handler+0xa0>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f003 0320 	and.w	r3, r3, #32
 800c800:	2b20      	cmp	r3, #32
 800c802:	d140      	bne.n	800c886 <Gyro_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 800c804:	4b23      	ldr	r3, [pc, #140]	; (800c894 <Gyro_Sensor_Handler+0xa4>)
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d121      	bne.n	800c850 <Gyro_Sensor_Handler+0x60>
    {
      GyrValue.x = OfflineData[OfflineDataReadIndex].angular_rate_x_mdps;
 800c80c:	4b22      	ldr	r3, [pc, #136]	; (800c898 <Gyro_Sensor_Handler+0xa8>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a22      	ldr	r2, [pc, #136]	; (800c89c <Gyro_Sensor_Handler+0xac>)
 800c812:	2134      	movs	r1, #52	; 0x34
 800c814:	fb01 f303 	mul.w	r3, r1, r3
 800c818:	4413      	add	r3, r2
 800c81a:	331c      	adds	r3, #28
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a20      	ldr	r2, [pc, #128]	; (800c8a0 <Gyro_Sensor_Handler+0xb0>)
 800c820:	6013      	str	r3, [r2, #0]
      GyrValue.y = OfflineData[OfflineDataReadIndex].angular_rate_y_mdps;
 800c822:	4b1d      	ldr	r3, [pc, #116]	; (800c898 <Gyro_Sensor_Handler+0xa8>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a1d      	ldr	r2, [pc, #116]	; (800c89c <Gyro_Sensor_Handler+0xac>)
 800c828:	2134      	movs	r1, #52	; 0x34
 800c82a:	fb01 f303 	mul.w	r3, r1, r3
 800c82e:	4413      	add	r3, r2
 800c830:	3320      	adds	r3, #32
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a1a      	ldr	r2, [pc, #104]	; (800c8a0 <Gyro_Sensor_Handler+0xb0>)
 800c836:	6053      	str	r3, [r2, #4]
      GyrValue.z = OfflineData[OfflineDataReadIndex].angular_rate_z_mdps;
 800c838:	4b17      	ldr	r3, [pc, #92]	; (800c898 <Gyro_Sensor_Handler+0xa8>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a17      	ldr	r2, [pc, #92]	; (800c89c <Gyro_Sensor_Handler+0xac>)
 800c83e:	2134      	movs	r1, #52	; 0x34
 800c840:	fb01 f303 	mul.w	r3, r1, r3
 800c844:	4413      	add	r3, r2
 800c846:	3324      	adds	r3, #36	; 0x24
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a15      	ldr	r2, [pc, #84]	; (800c8a0 <Gyro_Sensor_Handler+0xb0>)
 800c84c:	6093      	str	r3, [r2, #8]
 800c84e:	e002      	b.n	800c856 <Gyro_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_GYR_GetAxes(&GyrValue);
 800c850:	4813      	ldr	r0, [pc, #76]	; (800c8a0 <Gyro_Sensor_Handler+0xb0>)
 800c852:	f001 f8f6 	bl	800da42 <BSP_SENSOR_GYR_GetAxes>
    }

    Serialize_s32(&Msg->Data[31], GyrValue.x, 4);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	3323      	adds	r3, #35	; 0x23
 800c85a:	4a11      	ldr	r2, [pc, #68]	; (800c8a0 <Gyro_Sensor_Handler+0xb0>)
 800c85c:	6811      	ldr	r1, [r2, #0]
 800c85e:	2204      	movs	r2, #4
 800c860:	4618      	mov	r0, r3
 800c862:	f001 fb68 	bl	800df36 <Serialize_s32>
    Serialize_s32(&Msg->Data[35], GyrValue.y, 4);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	3327      	adds	r3, #39	; 0x27
 800c86a:	4a0d      	ldr	r2, [pc, #52]	; (800c8a0 <Gyro_Sensor_Handler+0xb0>)
 800c86c:	6851      	ldr	r1, [r2, #4]
 800c86e:	2204      	movs	r2, #4
 800c870:	4618      	mov	r0, r3
 800c872:	f001 fb60 	bl	800df36 <Serialize_s32>
    Serialize_s32(&Msg->Data[39], GyrValue.z, 4);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	332b      	adds	r3, #43	; 0x2b
 800c87a:	4a09      	ldr	r2, [pc, #36]	; (800c8a0 <Gyro_Sensor_Handler+0xb0>)
 800c87c:	6891      	ldr	r1, [r2, #8]
 800c87e:	2204      	movs	r2, #4
 800c880:	4618      	mov	r0, r3
 800c882:	f001 fb58 	bl	800df36 <Serialize_s32>
  }
}
 800c886:	bf00      	nop
 800c888:	3708      	adds	r7, #8
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	200007b4 	.word	0x200007b4
 800c894:	200007b9 	.word	0x200007b9
 800c898:	200007bc 	.word	0x200007bc
 800c89c:	200017a4 	.word	0x200017a4
 800c8a0:	200007dc 	.word	0x200007dc

0800c8a4 <Magneto_Sensor_Handler>:
 * @brief  Handles the MAG axes data getting/sending
 * @param  Msg the MAG part of the stream
 * @retval None
 */
static void Magneto_Sensor_Handler(TMsg *Msg)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b08c      	sub	sp, #48	; 0x30
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  float ans_float;
  MFX_MagCal_input_t mag_data_in;
  MFX_MagCal_output_t mag_data_out;

  if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800c8ac:	4b68      	ldr	r3, [pc, #416]	; (800ca50 <Magneto_Sensor_Handler+0x1ac>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8b4:	2b40      	cmp	r3, #64	; 0x40
 800c8b6:	f040 80c7 	bne.w	800ca48 <Magneto_Sensor_Handler+0x1a4>
  {
    if (UseOfflineData == 1)
 800c8ba:	4b66      	ldr	r3, [pc, #408]	; (800ca54 <Magneto_Sensor_Handler+0x1b0>)
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d121      	bne.n	800c906 <Magneto_Sensor_Handler+0x62>
    {
     MagValue.x = OfflineData[OfflineDataReadIndex].magnetic_field_x_mgauss;
 800c8c2:	4b65      	ldr	r3, [pc, #404]	; (800ca58 <Magneto_Sensor_Handler+0x1b4>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4a65      	ldr	r2, [pc, #404]	; (800ca5c <Magneto_Sensor_Handler+0x1b8>)
 800c8c8:	2134      	movs	r1, #52	; 0x34
 800c8ca:	fb01 f303 	mul.w	r3, r1, r3
 800c8ce:	4413      	add	r3, r2
 800c8d0:	3328      	adds	r3, #40	; 0x28
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4a62      	ldr	r2, [pc, #392]	; (800ca60 <Magneto_Sensor_Handler+0x1bc>)
 800c8d6:	6013      	str	r3, [r2, #0]
     MagValue.y = OfflineData[OfflineDataReadIndex].magnetic_field_y_mgauss;
 800c8d8:	4b5f      	ldr	r3, [pc, #380]	; (800ca58 <Magneto_Sensor_Handler+0x1b4>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a5f      	ldr	r2, [pc, #380]	; (800ca5c <Magneto_Sensor_Handler+0x1b8>)
 800c8de:	2134      	movs	r1, #52	; 0x34
 800c8e0:	fb01 f303 	mul.w	r3, r1, r3
 800c8e4:	4413      	add	r3, r2
 800c8e6:	332c      	adds	r3, #44	; 0x2c
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a5d      	ldr	r2, [pc, #372]	; (800ca60 <Magneto_Sensor_Handler+0x1bc>)
 800c8ec:	6053      	str	r3, [r2, #4]
     MagValue.z = OfflineData[OfflineDataReadIndex].magnetic_field_z_mgauss;
 800c8ee:	4b5a      	ldr	r3, [pc, #360]	; (800ca58 <Magneto_Sensor_Handler+0x1b4>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4a5a      	ldr	r2, [pc, #360]	; (800ca5c <Magneto_Sensor_Handler+0x1b8>)
 800c8f4:	2134      	movs	r1, #52	; 0x34
 800c8f6:	fb01 f303 	mul.w	r3, r1, r3
 800c8fa:	4413      	add	r3, r2
 800c8fc:	3330      	adds	r3, #48	; 0x30
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a57      	ldr	r2, [pc, #348]	; (800ca60 <Magneto_Sensor_Handler+0x1bc>)
 800c902:	6093      	str	r3, [r2, #8]
 800c904:	e088      	b.n	800ca18 <Magneto_Sensor_Handler+0x174>
    }
    else
    {
      BSP_SENSOR_MAG_GetAxes(&MagValue);
 800c906:	4856      	ldr	r0, [pc, #344]	; (800ca60 <Magneto_Sensor_Handler+0x1bc>)
 800c908:	f001 f8a8 	bl	800da5c <BSP_SENSOR_MAG_GetAxes>

      if (MagCalStatus == 0U)
 800c90c:	4b55      	ldr	r3, [pc, #340]	; (800ca64 <Magneto_Sensor_Handler+0x1c0>)
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d16c      	bne.n	800c9ee <Magneto_Sensor_Handler+0x14a>
      {
        mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800c914:	4b52      	ldr	r3, [pc, #328]	; (800ca60 <Magneto_Sensor_Handler+0x1bc>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	ee07 3a90 	vmov	s15, r3
 800c91c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c920:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800ca68 <Magneto_Sensor_Handler+0x1c4>
 800c924:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c928:	edc7 7a07 	vstr	s15, [r7, #28]
        mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800c92c:	4b4c      	ldr	r3, [pc, #304]	; (800ca60 <Magneto_Sensor_Handler+0x1bc>)
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	ee07 3a90 	vmov	s15, r3
 800c934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c938:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800ca68 <Magneto_Sensor_Handler+0x1c4>
 800c93c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c940:	edc7 7a08 	vstr	s15, [r7, #32]
        mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800c944:	4b46      	ldr	r3, [pc, #280]	; (800ca60 <Magneto_Sensor_Handler+0x1bc>)
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	ee07 3a90 	vmov	s15, r3
 800c94c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c950:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800ca68 <Magneto_Sensor_Handler+0x1c4>
 800c954:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c958:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        mag_data_in.time_stamp = (int)TimeStamp;
 800c95c:	4b43      	ldr	r3, [pc, #268]	; (800ca6c <Magneto_Sensor_Handler+0x1c8>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	62bb      	str	r3, [r7, #40]	; 0x28
        TimeStamp += (uint32_t)ALGO_PERIOD;
 800c962:	4b42      	ldr	r3, [pc, #264]	; (800ca6c <Magneto_Sensor_Handler+0x1c8>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	330a      	adds	r3, #10
 800c968:	4a40      	ldr	r2, [pc, #256]	; (800ca6c <Magneto_Sensor_Handler+0x1c8>)
 800c96a:	6013      	str	r3, [r2, #0]

        MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 800c96c:	f107 020c 	add.w	r2, r7, #12
 800c970:	f107 031c 	add.w	r3, r7, #28
 800c974:	4611      	mov	r1, r2
 800c976:	4618      	mov	r0, r3
 800c978:	f001 f9bc 	bl	800dcf4 <MotionFX_manager_MagCal_run>

        if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 800c97c:	7e3b      	ldrb	r3, [r7, #24]
 800c97e:	2b03      	cmp	r3, #3
 800c980:	d135      	bne.n	800c9ee <Magneto_Sensor_Handler+0x14a>
        {
          MagCalStatus = 1;
 800c982:	4b38      	ldr	r3, [pc, #224]	; (800ca64 <Magneto_Sensor_Handler+0x1c0>)
 800c984:	2201      	movs	r2, #1
 800c986:	701a      	strb	r2, [r3, #0]

          ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800c988:	edd7 7a03 	vldr	s15, [r7, #12]
 800c98c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ca70 <Magneto_Sensor_Handler+0x1cc>
 800c990:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c994:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          MagOffset.x = (int32_t)ans_float;
 800c998:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c99c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9a0:	ee17 2a90 	vmov	r2, s15
 800c9a4:	4b33      	ldr	r3, [pc, #204]	; (800ca74 <Magneto_Sensor_Handler+0x1d0>)
 800c9a6:	601a      	str	r2, [r3, #0]
          ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800c9a8:	edd7 7a04 	vldr	s15, [r7, #16]
 800c9ac:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800ca70 <Magneto_Sensor_Handler+0x1cc>
 800c9b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c9b4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          MagOffset.y = (int32_t)ans_float;
 800c9b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c9bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9c0:	ee17 2a90 	vmov	r2, s15
 800c9c4:	4b2b      	ldr	r3, [pc, #172]	; (800ca74 <Magneto_Sensor_Handler+0x1d0>)
 800c9c6:	605a      	str	r2, [r3, #4]
          ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800c9c8:	edd7 7a05 	vldr	s15, [r7, #20]
 800c9cc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800ca70 <Magneto_Sensor_Handler+0x1cc>
 800c9d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c9d4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          MagOffset.z = (int32_t)ans_float;
 800c9d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c9dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9e0:	ee17 2a90 	vmov	r2, s15
 800c9e4:	4b23      	ldr	r3, [pc, #140]	; (800ca74 <Magneto_Sensor_Handler+0x1d0>)
 800c9e6:	609a      	str	r2, [r3, #8]

          /* Disable magnetometer calibration */
          MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 800c9e8:	200a      	movs	r0, #10
 800c9ea:	f001 f99e 	bl	800dd2a <MotionFX_manager_MagCal_stop>
        }
      }

      MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800c9ee:	4b1c      	ldr	r3, [pc, #112]	; (800ca60 <Magneto_Sensor_Handler+0x1bc>)
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	4b20      	ldr	r3, [pc, #128]	; (800ca74 <Magneto_Sensor_Handler+0x1d0>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	1ad3      	subs	r3, r2, r3
 800c9f8:	4a19      	ldr	r2, [pc, #100]	; (800ca60 <Magneto_Sensor_Handler+0x1bc>)
 800c9fa:	6013      	str	r3, [r2, #0]
      MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800c9fc:	4b18      	ldr	r3, [pc, #96]	; (800ca60 <Magneto_Sensor_Handler+0x1bc>)
 800c9fe:	685a      	ldr	r2, [r3, #4]
 800ca00:	4b1c      	ldr	r3, [pc, #112]	; (800ca74 <Magneto_Sensor_Handler+0x1d0>)
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	1ad3      	subs	r3, r2, r3
 800ca06:	4a16      	ldr	r2, [pc, #88]	; (800ca60 <Magneto_Sensor_Handler+0x1bc>)
 800ca08:	6053      	str	r3, [r2, #4]
      MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800ca0a:	4b15      	ldr	r3, [pc, #84]	; (800ca60 <Magneto_Sensor_Handler+0x1bc>)
 800ca0c:	689a      	ldr	r2, [r3, #8]
 800ca0e:	4b19      	ldr	r3, [pc, #100]	; (800ca74 <Magneto_Sensor_Handler+0x1d0>)
 800ca10:	689b      	ldr	r3, [r3, #8]
 800ca12:	1ad3      	subs	r3, r2, r3
 800ca14:	4a12      	ldr	r2, [pc, #72]	; (800ca60 <Magneto_Sensor_Handler+0x1bc>)
 800ca16:	6093      	str	r3, [r2, #8]
    }

    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	332f      	adds	r3, #47	; 0x2f
 800ca1c:	4a10      	ldr	r2, [pc, #64]	; (800ca60 <Magneto_Sensor_Handler+0x1bc>)
 800ca1e:	6811      	ldr	r1, [r2, #0]
 800ca20:	2204      	movs	r2, #4
 800ca22:	4618      	mov	r0, r3
 800ca24:	f001 fa87 	bl	800df36 <Serialize_s32>
    Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	3333      	adds	r3, #51	; 0x33
 800ca2c:	4a0c      	ldr	r2, [pc, #48]	; (800ca60 <Magneto_Sensor_Handler+0x1bc>)
 800ca2e:	6851      	ldr	r1, [r2, #4]
 800ca30:	2204      	movs	r2, #4
 800ca32:	4618      	mov	r0, r3
 800ca34:	f001 fa7f 	bl	800df36 <Serialize_s32>
    Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	3337      	adds	r3, #55	; 0x37
 800ca3c:	4a08      	ldr	r2, [pc, #32]	; (800ca60 <Magneto_Sensor_Handler+0x1bc>)
 800ca3e:	6891      	ldr	r1, [r2, #8]
 800ca40:	2204      	movs	r2, #4
 800ca42:	4618      	mov	r0, r3
 800ca44:	f001 fa77 	bl	800df36 <Serialize_s32>
  }
}
 800ca48:	bf00      	nop
 800ca4a:	3730      	adds	r7, #48	; 0x30
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	200007b4 	.word	0x200007b4
 800ca54:	200007b9 	.word	0x200007b9
 800ca58:	200007bc 	.word	0x200007bc
 800ca5c:	200017a4 	.word	0x200017a4
 800ca60:	200007e8 	.word	0x200007e8
 800ca64:	20000814 	.word	0x20000814
 800ca68:	3b03126f 	.word	0x3b03126f
 800ca6c:	20000800 	.word	0x20000800
 800ca70:	43fa0000 	.word	0x43fa0000
 800ca74:	20000808 	.word	0x20000808

0800ca78 <Pressure_Sensor_Handler>:
 * @brief  Handles the PRESS sensor data getting/sending.
 * @param  Msg the PRESS part of the stream
 * @retval None
 */
static void Pressure_Sensor_Handler(TMsg *Msg)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800ca80:	4b10      	ldr	r3, [pc, #64]	; (800cac4 <Pressure_Sensor_Handler+0x4c>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f003 0301 	and.w	r3, r3, #1
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d117      	bne.n	800cabc <Pressure_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 800ca8c:	4b0e      	ldr	r3, [pc, #56]	; (800cac8 <Pressure_Sensor_Handler+0x50>)
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d10b      	bne.n	800caac <Pressure_Sensor_Handler+0x34>
    {
      PressValue = OfflineData[OfflineDataReadIndex].pressure;
 800ca94:	4b0d      	ldr	r3, [pc, #52]	; (800cacc <Pressure_Sensor_Handler+0x54>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a0d      	ldr	r2, [pc, #52]	; (800cad0 <Pressure_Sensor_Handler+0x58>)
 800ca9a:	2134      	movs	r1, #52	; 0x34
 800ca9c:	fb01 f303 	mul.w	r3, r1, r3
 800caa0:	4413      	add	r3, r2
 800caa2:	3304      	adds	r3, #4
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a0b      	ldr	r2, [pc, #44]	; (800cad4 <Pressure_Sensor_Handler+0x5c>)
 800caa8:	6013      	str	r3, [r2, #0]
 800caaa:	e002      	b.n	800cab2 <Pressure_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_PRESS_GetValue(&PressValue);
 800caac:	4809      	ldr	r0, [pc, #36]	; (800cad4 <Pressure_Sensor_Handler+0x5c>)
 800caae:	f000 ffe2 	bl	800da76 <BSP_SENSOR_PRESS_GetValue>
    }

    (void)memcpy(&Msg->Data[7], (void *)&PressValue, sizeof(float));
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	330b      	adds	r3, #11
 800cab6:	4a07      	ldr	r2, [pc, #28]	; (800cad4 <Pressure_Sensor_Handler+0x5c>)
 800cab8:	6812      	ldr	r2, [r2, #0]
 800caba:	601a      	str	r2, [r3, #0]
  }
}
 800cabc:	bf00      	nop
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	200007b4 	.word	0x200007b4
 800cac8:	200007b9 	.word	0x200007b9
 800cacc:	200007bc 	.word	0x200007bc
 800cad0:	200017a4 	.word	0x200017a4
 800cad4:	200007f4 	.word	0x200007f4

0800cad8 <Temperature_Sensor_Handler>:
 * @brief  Handles the TEMP axes data getting/sending
 * @param  Msg the TEMP part of the stream
 * @retval None
 */
static void Temperature_Sensor_Handler(TMsg *Msg)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800cae0:	4b10      	ldr	r3, [pc, #64]	; (800cb24 <Temperature_Sensor_Handler+0x4c>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f003 0302 	and.w	r3, r3, #2
 800cae8:	2b02      	cmp	r3, #2
 800caea:	d117      	bne.n	800cb1c <Temperature_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 800caec:	4b0e      	ldr	r3, [pc, #56]	; (800cb28 <Temperature_Sensor_Handler+0x50>)
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d10b      	bne.n	800cb0c <Temperature_Sensor_Handler+0x34>
    {
      TempValue = OfflineData[OfflineDataReadIndex].temperature;
 800caf4:	4b0d      	ldr	r3, [pc, #52]	; (800cb2c <Temperature_Sensor_Handler+0x54>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a0d      	ldr	r2, [pc, #52]	; (800cb30 <Temperature_Sensor_Handler+0x58>)
 800cafa:	2134      	movs	r1, #52	; 0x34
 800cafc:	fb01 f303 	mul.w	r3, r1, r3
 800cb00:	4413      	add	r3, r2
 800cb02:	330c      	adds	r3, #12
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a0b      	ldr	r2, [pc, #44]	; (800cb34 <Temperature_Sensor_Handler+0x5c>)
 800cb08:	6013      	str	r3, [r2, #0]
 800cb0a:	e002      	b.n	800cb12 <Temperature_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_TEMP_GetValue(&TempValue);
 800cb0c:	4809      	ldr	r0, [pc, #36]	; (800cb34 <Temperature_Sensor_Handler+0x5c>)
 800cb0e:	f000 ffbf 	bl	800da90 <BSP_SENSOR_TEMP_GetValue>
    }

    (void)memcpy(&Msg->Data[11], (void *)&TempValue, sizeof(float));
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	330f      	adds	r3, #15
 800cb16:	4a07      	ldr	r2, [pc, #28]	; (800cb34 <Temperature_Sensor_Handler+0x5c>)
 800cb18:	6812      	ldr	r2, [r2, #0]
 800cb1a:	601a      	str	r2, [r3, #0]
  }
}
 800cb1c:	bf00      	nop
 800cb1e:	3708      	adds	r7, #8
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	200007b4 	.word	0x200007b4
 800cb28:	200007b9 	.word	0x200007b9
 800cb2c:	200007bc 	.word	0x200007bc
 800cb30:	200017a4 	.word	0x200017a4
 800cb34:	200007f8 	.word	0x200007f8

0800cb38 <Humidity_Sensor_Handler>:
 * @brief  Handles the HUM axes data getting/sending
 * @param  Msg the HUM part of the stream
 * @retval None
 */
static void Humidity_Sensor_Handler(TMsg *Msg)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800cb40:	4b10      	ldr	r3, [pc, #64]	; (800cb84 <Humidity_Sensor_Handler+0x4c>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f003 0304 	and.w	r3, r3, #4
 800cb48:	2b04      	cmp	r3, #4
 800cb4a:	d117      	bne.n	800cb7c <Humidity_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 800cb4c:	4b0e      	ldr	r3, [pc, #56]	; (800cb88 <Humidity_Sensor_Handler+0x50>)
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d10b      	bne.n	800cb6c <Humidity_Sensor_Handler+0x34>
    {
      HumValue = OfflineData[OfflineDataReadIndex].humidity;
 800cb54:	4b0d      	ldr	r3, [pc, #52]	; (800cb8c <Humidity_Sensor_Handler+0x54>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a0d      	ldr	r2, [pc, #52]	; (800cb90 <Humidity_Sensor_Handler+0x58>)
 800cb5a:	2134      	movs	r1, #52	; 0x34
 800cb5c:	fb01 f303 	mul.w	r3, r1, r3
 800cb60:	4413      	add	r3, r2
 800cb62:	3308      	adds	r3, #8
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4a0b      	ldr	r2, [pc, #44]	; (800cb94 <Humidity_Sensor_Handler+0x5c>)
 800cb68:	6013      	str	r3, [r2, #0]
 800cb6a:	e002      	b.n	800cb72 <Humidity_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_HUM_GetValue(&HumValue);
 800cb6c:	4809      	ldr	r0, [pc, #36]	; (800cb94 <Humidity_Sensor_Handler+0x5c>)
 800cb6e:	f000 ff9c 	bl	800daaa <BSP_SENSOR_HUM_GetValue>
    }

    (void)memcpy(&Msg->Data[15], (void *)&HumValue, sizeof(float));;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	3313      	adds	r3, #19
 800cb76:	4a07      	ldr	r2, [pc, #28]	; (800cb94 <Humidity_Sensor_Handler+0x5c>)
 800cb78:	6812      	ldr	r2, [r2, #0]
 800cb7a:	601a      	str	r2, [r3, #0]
  }
}
 800cb7c:	bf00      	nop
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	200007b4 	.word	0x200007b4
 800cb88:	200007b9 	.word	0x200007b9
 800cb8c:	200007bc 	.word	0x200007bc
 800cb90:	200017a4 	.word	0x200017a4
 800cb94:	200007fc 	.word	0x200007fc

0800cb98 <TIM_Config>:
 * @brief  Timer configuration
 * @param  Freq the desired Timer frequency
 * @retval None
 */
static void TIM_Config(uint32_t Freq)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b086      	sub	sp, #24
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800cba0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cba4:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 800cba6:	4b14      	ldr	r3, [pc, #80]	; (800cbf8 <TIM_Config+0x60>)
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbb0:	3b01      	subs	r3, #1
 800cbb2:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 800cbb4:	697a      	ldr	r2, [r7, #20]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 800cbc0:	4a0e      	ldr	r2, [pc, #56]	; (800cbfc <TIM_Config+0x64>)
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cbc6:	4b0d      	ldr	r3, [pc, #52]	; (800cbfc <TIM_Config+0x64>)
 800cbc8:	2200      	movs	r2, #0
 800cbca:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 800cbcc:	4a0b      	ldr	r2, [pc, #44]	; (800cbfc <TIM_Config+0x64>)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cbd2:	4b0a      	ldr	r3, [pc, #40]	; (800cbfc <TIM_Config+0x64>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cbd8:	4b08      	ldr	r3, [pc, #32]	; (800cbfc <TIM_Config+0x64>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 800cbde:	4807      	ldr	r0, [pc, #28]	; (800cbfc <TIM_Config+0x64>)
 800cbe0:	f7fd fe46 	bl	800a870 <HAL_TIM_Base_Init>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d001      	beq.n	800cbee <TIM_Config+0x56>
  {
    Error_Handler();
 800cbea:	f7f4 fb0b 	bl	8001204 <Error_Handler>
  }
}
 800cbee:	bf00      	nop
 800cbf0:	3718      	adds	r7, #24
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20000004 	.word	0x20000004
 800cbfc:	20001604 	.word	0x20001604

0800cc00 <DWT_Init>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
static void DWT_Init(void)
{
 800cc00:	b480      	push	{r7}
 800cc02:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800cc04:	4b08      	ldr	r3, [pc, #32]	; (800cc28 <DWT_Init+0x28>)
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	4a07      	ldr	r2, [pc, #28]	; (800cc28 <DWT_Init+0x28>)
 800cc0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc0e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800cc10:	4b06      	ldr	r3, [pc, #24]	; (800cc2c <DWT_Init+0x2c>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a05      	ldr	r2, [pc, #20]	; (800cc2c <DWT_Init+0x2c>)
 800cc16:	f023 0301 	bic.w	r3, r3, #1
 800cc1a:	6013      	str	r3, [r2, #0]
}
 800cc1c:	bf00      	nop
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	e000edf0 	.word	0xe000edf0
 800cc2c:	e0001000 	.word	0xe0001000

0800cc30 <DWT_Start>:
 * @brief  Start counting clock cycles
 * @param  None
 * @retval None
 */
static void DWT_Start(void)
{
 800cc30:	b480      	push	{r7}
 800cc32:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 800cc34:	4b06      	ldr	r3, [pc, #24]	; (800cc50 <DWT_Start+0x20>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 800cc3a:	4b05      	ldr	r3, [pc, #20]	; (800cc50 <DWT_Start+0x20>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a04      	ldr	r2, [pc, #16]	; (800cc50 <DWT_Start+0x20>)
 800cc40:	f043 0301 	orr.w	r3, r3, #1
 800cc44:	6013      	str	r3, [r2, #0]
}
 800cc46:	bf00      	nop
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr
 800cc50:	e0001000 	.word	0xe0001000

0800cc54 <DWT_Stop>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
static uint32_t DWT_Stop(void)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
  volatile uint32_t cycles_count = 0U;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	603b      	str	r3, [r7, #0]
  uint32_t system_core_clock_mhz = 0U;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	607b      	str	r3, [r7, #4]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800cc62:	4b0d      	ldr	r3, [pc, #52]	; (800cc98 <DWT_Stop+0x44>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a0c      	ldr	r2, [pc, #48]	; (800cc98 <DWT_Stop+0x44>)
 800cc68:	f023 0301 	bic.w	r3, r3, #1
 800cc6c:	6013      	str	r3, [r2, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 800cc6e:	4b0a      	ldr	r3, [pc, #40]	; (800cc98 <DWT_Stop+0x44>)
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	603b      	str	r3, [r7, #0]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 800cc74:	4b09      	ldr	r3, [pc, #36]	; (800cc9c <DWT_Stop+0x48>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a09      	ldr	r2, [pc, #36]	; (800cca0 <DWT_Stop+0x4c>)
 800cc7a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc7e:	0c9b      	lsrs	r3, r3, #18
 800cc80:	607b      	str	r3, [r7, #4]
  return cycles_count / system_core_clock_mhz;
 800cc82:	683a      	ldr	r2, [r7, #0]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	370c      	adds	r7, #12
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr
 800cc96:	bf00      	nop
 800cc98:	e0001000 	.word	0xe0001000
 800cc9c:	20000004 	.word	0x20000004
 800cca0:	431bde83 	.word	0x431bde83

0800cca4 <UART_ReceivedMSG>:
 * @brief  Check if a message is received via UART
 * @param  Msg the pointer to the message to be received
 * @retval 1 if a complete message is found, 0 otherwise
 */
int UART_ReceivedMSG(TMsg *Msg)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b08a      	sub	sp, #40	; 0x28
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 800ccac:	2300      	movs	r3, #0
 800ccae:	83fb      	strh	r3, [r7, #30]
  uint8_t inc;

  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 800ccb0:	4b54      	ldr	r3, [pc, #336]	; (800ce04 <UART_ReceivedMSG+0x160>)
 800ccb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 f8e1 	bl	800ce7c <Get_DMA_Flag_Status>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f040 809c 	bne.w	800cdfa <UART_ReceivedMSG+0x156>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 800ccc2:	4b50      	ldr	r3, [pc, #320]	; (800ce04 <UART_ReceivedMSG+0x160>)
 800ccc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f000 f9ca 	bl	800d060 <Get_DMA_Counter>
 800cccc:	4603      	mov	r3, r0
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ccd4:	83bb      	strh	r3, [r7, #28]

    if (dma_counter >= UartEngine.StartOfMsg)
 800ccd6:	4b4c      	ldr	r3, [pc, #304]	; (800ce08 <UART_ReceivedMSG+0x164>)
 800ccd8:	889b      	ldrh	r3, [r3, #4]
 800ccda:	8bba      	ldrh	r2, [r7, #28]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d305      	bcc.n	800ccec <UART_ReceivedMSG+0x48>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 800cce0:	4b49      	ldr	r3, [pc, #292]	; (800ce08 <UART_ReceivedMSG+0x164>)
 800cce2:	889b      	ldrh	r3, [r3, #4]
 800cce4:	8bba      	ldrh	r2, [r7, #28]
 800cce6:	1ad3      	subs	r3, r2, r3
 800cce8:	843b      	strh	r3, [r7, #32]
 800ccea:	e007      	b.n	800ccfc <UART_ReceivedMSG+0x58>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 800ccec:	4b46      	ldr	r3, [pc, #280]	; (800ce08 <UART_ReceivedMSG+0x164>)
 800ccee:	889b      	ldrh	r3, [r3, #4]
 800ccf0:	8bba      	ldrh	r2, [r7, #28]
 800ccf2:	1ad3      	subs	r3, r2, r3
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ccfa:	843b      	strh	r3, [r7, #32]
    }

    j = UartEngine.StartOfMsg;
 800ccfc:	4b42      	ldr	r3, [pc, #264]	; (800ce08 <UART_ReceivedMSG+0x164>)
 800ccfe:	889b      	ldrh	r3, [r3, #4]
 800cd00:	84bb      	strh	r3, [r7, #36]	; 0x24

    for (k = 0; k < length; k++)
 800cd02:	2300      	movs	r3, #0
 800cd04:	847b      	strh	r3, [r7, #34]	; 0x22
 800cd06:	e06d      	b.n	800cde4 <UART_ReceivedMSG+0x140>
    {
      data = UartRxBuffer[j];
 800cd08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd0a:	4a40      	ldr	r2, [pc, #256]	; (800ce0c <UART_ReceivedMSG+0x168>)
 800cd0c:	5cd3      	ldrb	r3, [r2, r3]
 800cd0e:	76fb      	strb	r3, [r7, #27]
      j++;
 800cd10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd12:	3301      	adds	r3, #1
 800cd14:	84bb      	strh	r3, [r7, #36]	; 0x24

      if (j >= (uint16_t)UART_RxBufferSize)
 800cd16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd1c:	d301      	bcc.n	800cd22 <UART_ReceivedMSG+0x7e>
      {
        j = 0;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      if (data == (uint8_t)TMsg_EOF)
 800cd22:	7efb      	ldrb	r3, [r7, #27]
 800cd24:	2bf0      	cmp	r3, #240	; 0xf0
 800cd26:	d15a      	bne.n	800cdde <UART_ReceivedMSG+0x13a>
      {
        j = UartEngine.StartOfMsg;
 800cd28:	4b37      	ldr	r3, [pc, #220]	; (800ce08 <UART_ReceivedMSG+0x164>)
 800cd2a:	889b      	ldrh	r3, [r3, #4]
 800cd2c:	84bb      	strh	r3, [r7, #36]	; 0x24

        for (i = 0; i < k; i += inc)
 800cd2e:	2300      	movs	r3, #0
 800cd30:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cd32:	e03a      	b.n	800cdaa <UART_ReceivedMSG+0x106>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 800cd34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd36:	3301      	adds	r3, #1
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd3e:	833b      	strh	r3, [r7, #24]

          if (source >= TMsg_MaxLen)
 800cd40:	8bfb      	ldrh	r3, [r7, #30]
 800cd42:	2bff      	cmp	r3, #255	; 0xff
 800cd44:	d904      	bls.n	800cd50 <UART_ReceivedMSG+0xac>
          {
            UartEngine.StartOfMsg = j;
 800cd46:	4a30      	ldr	r2, [pc, #192]	; (800ce08 <UART_ReceivedMSG+0x164>)
 800cd48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd4a:	8093      	strh	r3, [r2, #4]
            return 0;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	e055      	b.n	800cdfc <UART_ReceivedMSG+0x158>
          }

          Source0 = UartRxBuffer[j];
 800cd50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd52:	4a2e      	ldr	r2, [pc, #184]	; (800ce0c <UART_ReceivedMSG+0x168>)
 800cd54:	5cd3      	ldrb	r3, [r2, r3]
 800cd56:	75fb      	strb	r3, [r7, #23]
          Source1 = UartRxBuffer[j2];
 800cd58:	8b3b      	ldrh	r3, [r7, #24]
 800cd5a:	4a2c      	ldr	r2, [pc, #176]	; (800ce0c <UART_ReceivedMSG+0x168>)
 800cd5c:	5cd3      	ldrb	r3, [r2, r3]
 800cd5e:	75bb      	strb	r3, [r7, #22]
          Dest    = &Msg->Data[source];
 800cd60:	8bfb      	ldrh	r3, [r7, #30]
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	4413      	add	r3, r2
 800cd66:	3304      	adds	r3, #4
 800cd68:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 800cd6a:	7db9      	ldrb	r1, [r7, #22]
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
 800cd6e:	693a      	ldr	r2, [r7, #16]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f001 f83f 	bl	800ddf4 <ReverseByteStuffCopyByte2>
 800cd76:	4603      	mov	r3, r0
 800cd78:	73fb      	strb	r3, [r7, #15]

          if (inc == 0U)
 800cd7a:	7bfb      	ldrb	r3, [r7, #15]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d104      	bne.n	800cd8a <UART_ReceivedMSG+0xe6>
          {
            UartEngine.StartOfMsg = j2;
 800cd80:	4a21      	ldr	r2, [pc, #132]	; (800ce08 <UART_ReceivedMSG+0x164>)
 800cd82:	8b3b      	ldrh	r3, [r7, #24]
 800cd84:	8093      	strh	r3, [r2, #4]
            return 0;
 800cd86:	2300      	movs	r3, #0
 800cd88:	e038      	b.n	800cdfc <UART_ReceivedMSG+0x158>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 800cd8a:	7bfb      	ldrb	r3, [r7, #15]
 800cd8c:	b29a      	uxth	r2, r3
 800cd8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd90:	4413      	add	r3, r2
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd98:	84bb      	strh	r3, [r7, #36]	; 0x24
          source++;
 800cd9a:	8bfb      	ldrh	r3, [r7, #30]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	83fb      	strh	r3, [r7, #30]
        for (i = 0; i < k; i += inc)
 800cda0:	7bfb      	ldrb	r3, [r7, #15]
 800cda2:	b29a      	uxth	r2, r3
 800cda4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cda6:	4413      	add	r3, r2
 800cda8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cdaa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cdac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d3c0      	bcc.n	800cd34 <UART_ReceivedMSG+0x90>
        }

        Msg->Len = source;
 800cdb2:	8bfa      	ldrh	r2, [r7, #30]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 800cdb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdba:	3301      	adds	r3, #1
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdc2:	84bb      	strh	r3, [r7, #36]	; 0x24
        UartEngine.StartOfMsg = j;
 800cdc4:	4a10      	ldr	r2, [pc, #64]	; (800ce08 <UART_ReceivedMSG+0x164>)
 800cdc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdc8:	8093      	strh	r3, [r2, #4]

        if (CHK_CheckAndRemove(Msg) != 0) /* check message integrity */
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f001 f863 	bl	800de96 <CHK_CheckAndRemove>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d001      	beq.n	800cdda <UART_ReceivedMSG+0x136>
        {
          return 1;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e010      	b.n	800cdfc <UART_ReceivedMSG+0x158>
        }
        else
        {
          return 0;
 800cdda:	2300      	movs	r3, #0
 800cddc:	e00e      	b.n	800cdfc <UART_ReceivedMSG+0x158>
    for (k = 0; k < length; k++)
 800cdde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cde0:	3301      	adds	r3, #1
 800cde2:	847b      	strh	r3, [r7, #34]	; 0x22
 800cde4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cde6:	8c3b      	ldrh	r3, [r7, #32]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d38d      	bcc.n	800cd08 <UART_ReceivedMSG+0x64>
        }
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 800cdec:	8c3b      	ldrh	r3, [r7, #32]
 800cdee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdf2:	d902      	bls.n	800cdfa <UART_ReceivedMSG+0x156>
    {
      UartEngine.StartOfMsg = dma_counter;
 800cdf4:	4a04      	ldr	r2, [pc, #16]	; (800ce08 <UART_ReceivedMSG+0x164>)
 800cdf6:	8bbb      	ldrh	r3, [r7, #28]
 800cdf8:	8093      	strh	r3, [r2, #4]
    }
  }

  return 0;
 800cdfa:	2300      	movs	r3, #0
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3728      	adds	r7, #40	; 0x28
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	2000171c 	.word	0x2000171c
 800ce08:	20001b6c 	.word	0x20001b6c
 800ce0c:	2000196c 	.word	0x2000196c

0800ce10 <UART_SendMsg>:
 * @brief  Send a message via UART
 * @param  Msg the pointer to the message to be sent
 * @retval None
 */
void UART_SendMsg(TMsg *Msg)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f001 f812 	bl	800de42 <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 800ce1e:	6879      	ldr	r1, [r7, #4]
 800ce20:	4807      	ldr	r0, [pc, #28]	; (800ce40 <UART_SendMsg+0x30>)
 800ce22:	f000 ffb9 	bl	800dd98 <ByteStuffCopy>
 800ce26:	4603      	mov	r3, r0
 800ce28:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 800ce2a:	89fa      	ldrh	r2, [r7, #14]
 800ce2c:	f241 3388 	movw	r3, #5000	; 0x1388
 800ce30:	4903      	ldr	r1, [pc, #12]	; (800ce40 <UART_SendMsg+0x30>)
 800ce32:	4804      	ldr	r0, [pc, #16]	; (800ce44 <UART_SendMsg+0x34>)
 800ce34:	f7fe fa56 	bl	800b2e4 <HAL_UART_Transmit>
}
 800ce38:	bf00      	nop
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	20000a20 	.word	0x20000a20
 800ce44:	2000171c 	.word	0x2000171c

0800ce48 <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 800ce4c:	4b09      	ldr	r3, [pc, #36]	; (800ce74 <UART_StartReceiveMsg+0x2c>)
 800ce4e:	4a0a      	ldr	r2, [pc, #40]	; (800ce78 <UART_StartReceiveMsg+0x30>)
 800ce50:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 800ce52:	4b08      	ldr	r3, [pc, #32]	; (800ce74 <UART_StartReceiveMsg+0x2c>)
 800ce54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce58:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 800ce5c:	4b05      	ldr	r3, [pc, #20]	; (800ce74 <UART_StartReceiveMsg+0x2c>)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 800ce64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce68:	4903      	ldr	r1, [pc, #12]	; (800ce78 <UART_StartReceiveMsg+0x30>)
 800ce6a:	4802      	ldr	r0, [pc, #8]	; (800ce74 <UART_StartReceiveMsg+0x2c>)
 800ce6c:	f7fe face 	bl	800b40c <HAL_UART_Receive_DMA>
}
 800ce70:	bf00      	nop
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	2000171c 	.word	0x2000171c
 800ce78:	2000196c 	.word	0x2000196c

0800ce7c <Get_DMA_Flag_Status>:
 * @brief  Get the DMA Stream pending flags
 * @param  handle_dma DMA handle
 * @retval The state of FLAG (SET or RESET)
 */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	461a      	mov	r2, r3
 800ce8a:	4b66      	ldr	r3, [pc, #408]	; (800d024 <Get_DMA_Flag_Status+0x1a8>)
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d961      	bls.n	800cf54 <Get_DMA_Flag_Status+0xd8>
 800ce90:	4b65      	ldr	r3, [pc, #404]	; (800d028 <Get_DMA_Flag_Status+0x1ac>)
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4964      	ldr	r1, [pc, #400]	; (800d02c <Get_DMA_Flag_Status+0x1b0>)
 800ce9a:	428b      	cmp	r3, r1
 800ce9c:	d057      	beq.n	800cf4e <Get_DMA_Flag_Status+0xd2>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4963      	ldr	r1, [pc, #396]	; (800d030 <Get_DMA_Flag_Status+0x1b4>)
 800cea4:	428b      	cmp	r3, r1
 800cea6:	d050      	beq.n	800cf4a <Get_DMA_Flag_Status+0xce>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4961      	ldr	r1, [pc, #388]	; (800d034 <Get_DMA_Flag_Status+0x1b8>)
 800ceae:	428b      	cmp	r3, r1
 800ceb0:	d049      	beq.n	800cf46 <Get_DMA_Flag_Status+0xca>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4960      	ldr	r1, [pc, #384]	; (800d038 <Get_DMA_Flag_Status+0x1bc>)
 800ceb8:	428b      	cmp	r3, r1
 800ceba:	d042      	beq.n	800cf42 <Get_DMA_Flag_Status+0xc6>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	495e      	ldr	r1, [pc, #376]	; (800d03c <Get_DMA_Flag_Status+0x1c0>)
 800cec2:	428b      	cmp	r3, r1
 800cec4:	d03a      	beq.n	800cf3c <Get_DMA_Flag_Status+0xc0>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	495d      	ldr	r1, [pc, #372]	; (800d040 <Get_DMA_Flag_Status+0x1c4>)
 800cecc:	428b      	cmp	r3, r1
 800cece:	d032      	beq.n	800cf36 <Get_DMA_Flag_Status+0xba>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	495b      	ldr	r1, [pc, #364]	; (800d044 <Get_DMA_Flag_Status+0x1c8>)
 800ced6:	428b      	cmp	r3, r1
 800ced8:	d02a      	beq.n	800cf30 <Get_DMA_Flag_Status+0xb4>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	495a      	ldr	r1, [pc, #360]	; (800d048 <Get_DMA_Flag_Status+0x1cc>)
 800cee0:	428b      	cmp	r3, r1
 800cee2:	d022      	beq.n	800cf2a <Get_DMA_Flag_Status+0xae>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4958      	ldr	r1, [pc, #352]	; (800d04c <Get_DMA_Flag_Status+0x1d0>)
 800ceea:	428b      	cmp	r3, r1
 800ceec:	d01a      	beq.n	800cf24 <Get_DMA_Flag_Status+0xa8>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4957      	ldr	r1, [pc, #348]	; (800d050 <Get_DMA_Flag_Status+0x1d4>)
 800cef4:	428b      	cmp	r3, r1
 800cef6:	d012      	beq.n	800cf1e <Get_DMA_Flag_Status+0xa2>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4955      	ldr	r1, [pc, #340]	; (800d054 <Get_DMA_Flag_Status+0x1d8>)
 800cefe:	428b      	cmp	r3, r1
 800cf00:	d00a      	beq.n	800cf18 <Get_DMA_Flag_Status+0x9c>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4954      	ldr	r1, [pc, #336]	; (800d058 <Get_DMA_Flag_Status+0x1dc>)
 800cf08:	428b      	cmp	r3, r1
 800cf0a:	d102      	bne.n	800cf12 <Get_DMA_Flag_Status+0x96>
 800cf0c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cf10:	e01e      	b.n	800cf50 <Get_DMA_Flag_Status+0xd4>
 800cf12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cf16:	e01b      	b.n	800cf50 <Get_DMA_Flag_Status+0xd4>
 800cf18:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cf1c:	e018      	b.n	800cf50 <Get_DMA_Flag_Status+0xd4>
 800cf1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cf22:	e015      	b.n	800cf50 <Get_DMA_Flag_Status+0xd4>
 800cf24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cf28:	e012      	b.n	800cf50 <Get_DMA_Flag_Status+0xd4>
 800cf2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf2e:	e00f      	b.n	800cf50 <Get_DMA_Flag_Status+0xd4>
 800cf30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf34:	e00c      	b.n	800cf50 <Get_DMA_Flag_Status+0xd4>
 800cf36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf3a:	e009      	b.n	800cf50 <Get_DMA_Flag_Status+0xd4>
 800cf3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf40:	e006      	b.n	800cf50 <Get_DMA_Flag_Status+0xd4>
 800cf42:	2380      	movs	r3, #128	; 0x80
 800cf44:	e004      	b.n	800cf50 <Get_DMA_Flag_Status+0xd4>
 800cf46:	2380      	movs	r3, #128	; 0x80
 800cf48:	e002      	b.n	800cf50 <Get_DMA_Flag_Status+0xd4>
 800cf4a:	2308      	movs	r3, #8
 800cf4c:	e000      	b.n	800cf50 <Get_DMA_Flag_Status+0xd4>
 800cf4e:	2308      	movs	r3, #8
 800cf50:	4013      	ands	r3, r2
 800cf52:	e060      	b.n	800d016 <Get_DMA_Flag_Status+0x19a>
 800cf54:	4b41      	ldr	r3, [pc, #260]	; (800d05c <Get_DMA_Flag_Status+0x1e0>)
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4933      	ldr	r1, [pc, #204]	; (800d02c <Get_DMA_Flag_Status+0x1b0>)
 800cf5e:	428b      	cmp	r3, r1
 800cf60:	d057      	beq.n	800d012 <Get_DMA_Flag_Status+0x196>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4932      	ldr	r1, [pc, #200]	; (800d030 <Get_DMA_Flag_Status+0x1b4>)
 800cf68:	428b      	cmp	r3, r1
 800cf6a:	d050      	beq.n	800d00e <Get_DMA_Flag_Status+0x192>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4930      	ldr	r1, [pc, #192]	; (800d034 <Get_DMA_Flag_Status+0x1b8>)
 800cf72:	428b      	cmp	r3, r1
 800cf74:	d049      	beq.n	800d00a <Get_DMA_Flag_Status+0x18e>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	492f      	ldr	r1, [pc, #188]	; (800d038 <Get_DMA_Flag_Status+0x1bc>)
 800cf7c:	428b      	cmp	r3, r1
 800cf7e:	d042      	beq.n	800d006 <Get_DMA_Flag_Status+0x18a>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	492d      	ldr	r1, [pc, #180]	; (800d03c <Get_DMA_Flag_Status+0x1c0>)
 800cf86:	428b      	cmp	r3, r1
 800cf88:	d03a      	beq.n	800d000 <Get_DMA_Flag_Status+0x184>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	492c      	ldr	r1, [pc, #176]	; (800d040 <Get_DMA_Flag_Status+0x1c4>)
 800cf90:	428b      	cmp	r3, r1
 800cf92:	d032      	beq.n	800cffa <Get_DMA_Flag_Status+0x17e>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	492a      	ldr	r1, [pc, #168]	; (800d044 <Get_DMA_Flag_Status+0x1c8>)
 800cf9a:	428b      	cmp	r3, r1
 800cf9c:	d02a      	beq.n	800cff4 <Get_DMA_Flag_Status+0x178>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4929      	ldr	r1, [pc, #164]	; (800d048 <Get_DMA_Flag_Status+0x1cc>)
 800cfa4:	428b      	cmp	r3, r1
 800cfa6:	d022      	beq.n	800cfee <Get_DMA_Flag_Status+0x172>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4927      	ldr	r1, [pc, #156]	; (800d04c <Get_DMA_Flag_Status+0x1d0>)
 800cfae:	428b      	cmp	r3, r1
 800cfb0:	d01a      	beq.n	800cfe8 <Get_DMA_Flag_Status+0x16c>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4926      	ldr	r1, [pc, #152]	; (800d050 <Get_DMA_Flag_Status+0x1d4>)
 800cfb8:	428b      	cmp	r3, r1
 800cfba:	d012      	beq.n	800cfe2 <Get_DMA_Flag_Status+0x166>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4924      	ldr	r1, [pc, #144]	; (800d054 <Get_DMA_Flag_Status+0x1d8>)
 800cfc2:	428b      	cmp	r3, r1
 800cfc4:	d00a      	beq.n	800cfdc <Get_DMA_Flag_Status+0x160>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4923      	ldr	r1, [pc, #140]	; (800d058 <Get_DMA_Flag_Status+0x1dc>)
 800cfcc:	428b      	cmp	r3, r1
 800cfce:	d102      	bne.n	800cfd6 <Get_DMA_Flag_Status+0x15a>
 800cfd0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cfd4:	e01e      	b.n	800d014 <Get_DMA_Flag_Status+0x198>
 800cfd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cfda:	e01b      	b.n	800d014 <Get_DMA_Flag_Status+0x198>
 800cfdc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cfe0:	e018      	b.n	800d014 <Get_DMA_Flag_Status+0x198>
 800cfe2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cfe6:	e015      	b.n	800d014 <Get_DMA_Flag_Status+0x198>
 800cfe8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cfec:	e012      	b.n	800d014 <Get_DMA_Flag_Status+0x198>
 800cfee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cff2:	e00f      	b.n	800d014 <Get_DMA_Flag_Status+0x198>
 800cff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cff8:	e00c      	b.n	800d014 <Get_DMA_Flag_Status+0x198>
 800cffa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cffe:	e009      	b.n	800d014 <Get_DMA_Flag_Status+0x198>
 800d000:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d004:	e006      	b.n	800d014 <Get_DMA_Flag_Status+0x198>
 800d006:	2380      	movs	r3, #128	; 0x80
 800d008:	e004      	b.n	800d014 <Get_DMA_Flag_Status+0x198>
 800d00a:	2380      	movs	r3, #128	; 0x80
 800d00c:	e002      	b.n	800d014 <Get_DMA_Flag_Status+0x198>
 800d00e:	2308      	movs	r3, #8
 800d010:	e000      	b.n	800d014 <Get_DMA_Flag_Status+0x198>
 800d012:	2308      	movs	r3, #8
 800d014:	4013      	ands	r3, r2
}
 800d016:	4618      	mov	r0, r3
 800d018:	370c      	adds	r7, #12
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop
 800d024:	40020080 	.word	0x40020080
 800d028:	40020400 	.word	0x40020400
 800d02c:	40020008 	.word	0x40020008
 800d030:	40020408 	.word	0x40020408
 800d034:	4002001c 	.word	0x4002001c
 800d038:	4002041c 	.word	0x4002041c
 800d03c:	40020030 	.word	0x40020030
 800d040:	40020430 	.word	0x40020430
 800d044:	40020044 	.word	0x40020044
 800d048:	40020444 	.word	0x40020444
 800d04c:	40020058 	.word	0x40020058
 800d050:	40020458 	.word	0x40020458
 800d054:	4002006c 	.word	0x4002006c
 800d058:	4002046c 	.word	0x4002046c
 800d05c:	40020000 	.word	0x40020000

0800d060 <Get_DMA_Counter>:
 * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
 * @param  handle_dma DMA handle
 * @retval The number of remaining data units in the current DMA Stream transfer
 */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	685b      	ldr	r3, [r3, #4]
}
 800d06e:	4618      	mov	r0, r3
 800d070:	370c      	adds	r7, #12
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr

0800d07a <BUILD_REPLY_HEADER>:
 * @brief  Build the reply header
 * @param  Msg the pointer to the message to be built
 * @retval None
 */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 800d07a:	b480      	push	{r7}
 800d07c:	b083      	sub	sp, #12
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	795a      	ldrb	r2, [r3, #5]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2232      	movs	r2, #50	; 0x32
 800d08e:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	799b      	ldrb	r3, [r3, #6]
 800d094:	3b80      	subs	r3, #128	; 0x80
 800d096:	b2da      	uxtb	r2, r3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	719a      	strb	r2, [r3, #6]
}
 800d09c:	bf00      	nop
 800d09e:	370c      	adds	r7, #12
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <INIT_STREAMING_HEADER>:
 * @brief  Initialize the streaming header
 * @param  Msg the pointer to the header to be initialized
 * @retval None
 */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 800d0b0:	4b09      	ldr	r3, [pc, #36]	; (800d0d8 <INIT_STREAMING_HEADER+0x30>)
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	b2da      	uxtb	r2, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2232      	movs	r2, #50	; 0x32
 800d0be:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2208      	movs	r2, #8
 800d0c4:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2203      	movs	r2, #3
 800d0ca:	601a      	str	r2, [r3, #0]
}
 800d0cc:	bf00      	nop
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr
 800d0d8:	20000180 	.word	0x20000180

0800d0dc <HandleMSG>:
 */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SouceAddr | CMD | PAYLOAD
 *      1          1        1       N
 */
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b098      	sub	sp, #96	; 0x60
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  int ret = 1;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i;
  char ps[64];
  uint32_t ps_len = 0;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	60fb      	str	r3, [r7, #12]
  static uint32_t sensors_enabled_prev = 0;
  int32_t msg_offset;
  uint32_t msg_count;

  if (Msg->Len < 2U)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d801      	bhi.n	800d0f8 <HandleMSG+0x1c>
  {
    return 0;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	e36f      	b.n	800d7d8 <HandleMSG+0x6fc>
  }

  if (Msg->Data[0] != DEV_ADDR)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	791b      	ldrb	r3, [r3, #4]
 800d0fc:	2b32      	cmp	r3, #50	; 0x32
 800d0fe:	d001      	beq.n	800d104 <HandleMSG+0x28>
  {
    return 0;
 800d100:	2300      	movs	r3, #0
 800d102:	e369      	b.n	800d7d8 <HandleMSG+0x6fc>
  }

  switch (Msg->Data[2])   /* CMD */
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	799b      	ldrb	r3, [r3, #6]
 800d108:	2b12      	cmp	r3, #18
 800d10a:	dc6b      	bgt.n	800d1e4 <HandleMSG+0x108>
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	dc3d      	bgt.n	800d18c <HandleMSG+0xb0>
 800d110:	e35e      	b.n	800d7d0 <HandleMSG+0x6f4>
 800d112:	3b60      	subs	r3, #96	; 0x60
 800d114:	2b1a      	cmp	r3, #26
 800d116:	f200 835b 	bhi.w	800d7d0 <HandleMSG+0x6f4>
 800d11a:	a201      	add	r2, pc, #4	; (adr r2, 800d120 <HandleMSG+0x44>)
 800d11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d120:	0800d287 	.word	0x0800d287
 800d124:	0800d7d1 	.word	0x0800d7d1
 800d128:	0800d2b5 	.word	0x0800d2b5
 800d12c:	0800d7d1 	.word	0x0800d7d1
 800d130:	0800d7d1 	.word	0x0800d7d1
 800d134:	0800d7d1 	.word	0x0800d7d1
 800d138:	0800d7d1 	.word	0x0800d7d1
 800d13c:	0800d7d1 	.word	0x0800d7d1
 800d140:	0800d7d1 	.word	0x0800d7d1
 800d144:	0800d7d1 	.word	0x0800d7d1
 800d148:	0800d7d1 	.word	0x0800d7d1
 800d14c:	0800d7d1 	.word	0x0800d7d1
 800d150:	0800d7d1 	.word	0x0800d7d1
 800d154:	0800d7d1 	.word	0x0800d7d1
 800d158:	0800d7d1 	.word	0x0800d7d1
 800d15c:	0800d7d1 	.word	0x0800d7d1
 800d160:	0800d7d1 	.word	0x0800d7d1
 800d164:	0800d7d1 	.word	0x0800d7d1
 800d168:	0800d7d1 	.word	0x0800d7d1
 800d16c:	0800d7d1 	.word	0x0800d7d1
 800d170:	0800d7d1 	.word	0x0800d7d1
 800d174:	0800d7d1 	.word	0x0800d7d1
 800d178:	0800d2e3 	.word	0x0800d2e3
 800d17c:	0800d7d1 	.word	0x0800d7d1
 800d180:	0800d7d1 	.word	0x0800d7d1
 800d184:	0800d7d1 	.word	0x0800d7d1
 800d188:	0800d311 	.word	0x0800d311
 800d18c:	3b01      	subs	r3, #1
 800d18e:	2b11      	cmp	r3, #17
 800d190:	f200 831e 	bhi.w	800d7d0 <HandleMSG+0x6f4>
 800d194:	a201      	add	r2, pc, #4	; (adr r2, 800d19c <HandleMSG+0xc0>)
 800d196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d19a:	bf00      	nop
 800d19c:	0800d1f1 	.word	0x0800d1f1
 800d1a0:	0800d22b 	.word	0x0800d22b
 800d1a4:	0800d7d1 	.word	0x0800d7d1
 800d1a8:	0800d7d1 	.word	0x0800d7d1
 800d1ac:	0800d7d1 	.word	0x0800d7d1
 800d1b0:	0800d7d1 	.word	0x0800d7d1
 800d1b4:	0800d795 	.word	0x0800d795
 800d1b8:	0800d33f 	.word	0x0800d33f
 800d1bc:	0800d3e5 	.word	0x0800d3e5
 800d1c0:	0800d7d1 	.word	0x0800d7d1
 800d1c4:	0800d7d1 	.word	0x0800d7d1
 800d1c8:	0800d42f 	.word	0x0800d42f
 800d1cc:	0800d7d1 	.word	0x0800d7d1
 800d1d0:	0800d211 	.word	0x0800d211
 800d1d4:	0800d7d1 	.word	0x0800d7d1
 800d1d8:	0800d475 	.word	0x0800d475
 800d1dc:	0800d6e5 	.word	0x0800d6e5
 800d1e0:	0800d733 	.word	0x0800d733
 800d1e4:	2b7a      	cmp	r3, #122	; 0x7a
 800d1e6:	f300 82f3 	bgt.w	800d7d0 <HandleMSG+0x6f4>
 800d1ea:	2b60      	cmp	r3, #96	; 0x60
 800d1ec:	da91      	bge.n	800d112 <HandleMSG+0x36>
 800d1ee:	e2ef      	b.n	800d7d0 <HandleMSG+0x6f4>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2b03      	cmp	r3, #3
 800d1f6:	d001      	beq.n	800d1fc <HandleMSG+0x120>
      {
        return 0;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	e2ed      	b.n	800d7d8 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7ff ff3c 	bl	800d07a <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2203      	movs	r2, #3
 800d206:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f7ff fe01 	bl	800ce10 <UART_SendMsg>
      break;
 800d20e:	e2e2      	b.n	800d7d6 <HandleMSG+0x6fa>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	2b03      	cmp	r3, #3
 800d216:	d001      	beq.n	800d21c <HandleMSG+0x140>
      {
        return 0;
 800d218:	2300      	movs	r3, #0
 800d21a:	e2dd      	b.n	800d7d8 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f7ff ff2c 	bl	800d07a <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2203      	movs	r2, #3
 800d226:	601a      	str	r2, [r3, #0]
      break;
 800d228:	e2d5      	b.n	800d7d6 <HandleMSG+0x6fa>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	2b03      	cmp	r3, #3
 800d230:	d001      	beq.n	800d236 <HandleMSG+0x15a>
      {
        return 0;
 800d232:	2300      	movs	r3, #0
 800d234:	e2d0      	b.n	800d7d8 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f7ff ff1f 	bl	800d07a <BUILD_REPLY_HEADER>

      Get_PresentationString(ps, &ps_len);
 800d23c:	f107 020c 	add.w	r2, r7, #12
 800d240:	f107 0310 	add.w	r3, r7, #16
 800d244:	4611      	mov	r1, r2
 800d246:	4618      	mov	r0, r3
 800d248:	f000 fb22 	bl	800d890 <Get_PresentationString>

      i = 0;
 800d24c:	2300      	movs	r3, #0
 800d24e:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 800d250:	e00d      	b.n	800d26e <HandleMSG+0x192>
      {
        Msg->Data[3U + i] = ps[i];
 800d252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d254:	3303      	adds	r3, #3
 800d256:	f107 0110 	add.w	r1, r7, #16
 800d25a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d25c:	440a      	add	r2, r1
 800d25e:	7811      	ldrb	r1, [r2, #0]
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	4413      	add	r3, r2
 800d264:	460a      	mov	r2, r1
 800d266:	711a      	strb	r2, [r3, #4]
        i++;
 800d268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d26a:	3301      	adds	r3, #1
 800d26c:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d272:	429a      	cmp	r2, r3
 800d274:	d3ed      	bcc.n	800d252 <HandleMSG+0x176>
      }

      Msg->Len = 3U + i;
 800d276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d278:	1cda      	adds	r2, r3, #3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f7ff fdc6 	bl	800ce10 <UART_SendMsg>
      break;
 800d284:	e2a7      	b.n	800d7d6 <HandleMSG+0x6fa>

    case CMD_PRESSURE_Init:
      if (Msg->Len < 3U)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	2b02      	cmp	r3, #2
 800d28c:	d801      	bhi.n	800d292 <HandleMSG+0x1b6>
      {
        return 0;
 800d28e:	2300      	movs	r3, #0
 800d290:	e2a2      	b.n	800d7d8 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f7ff fef1 	bl	800d07a <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], PRESS_UNICLEO_ID, 4);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	3307      	adds	r3, #7
 800d29c:	2204      	movs	r2, #4
 800d29e:	2103      	movs	r1, #3
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f000 fe48 	bl	800df36 <Serialize_s32>
      Msg->Len = 3 + 4;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2207      	movs	r2, #7
 800d2aa:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f7ff fdaf 	bl	800ce10 <UART_SendMsg>
      break;
 800d2b2:	e290      	b.n	800d7d6 <HandleMSG+0x6fa>

    case CMD_HUMIDITY_TEMPERATURE_Init:
      if (Msg->Len < 3U)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2b02      	cmp	r3, #2
 800d2ba:	d801      	bhi.n	800d2c0 <HandleMSG+0x1e4>
      {
        return 0;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	e28b      	b.n	800d7d8 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f7ff feda 	bl	800d07a <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], HUM_TEMP_UNICLEO_ID, 4);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	3307      	adds	r3, #7
 800d2ca:	2204      	movs	r2, #4
 800d2cc:	2101      	movs	r1, #1
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 fe31 	bl	800df36 <Serialize_s32>
      Msg->Len = 3 + 4;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2207      	movs	r2, #7
 800d2d8:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f7ff fd98 	bl	800ce10 <UART_SendMsg>
      break;
 800d2e0:	e279      	b.n	800d7d6 <HandleMSG+0x6fa>

    case CMD_ACCELERO_GYRO_Init:
      if (Msg->Len < 3U)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2b02      	cmp	r3, #2
 800d2e8:	d801      	bhi.n	800d2ee <HandleMSG+0x212>
      {
        return 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	e274      	b.n	800d7d8 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f7ff fec3 	bl	800d07a <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	3307      	adds	r3, #7
 800d2f8:	2204      	movs	r2, #4
 800d2fa:	2103      	movs	r1, #3
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f000 fe1a 	bl	800df36 <Serialize_s32>
      Msg->Len = 3 + 4;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2207      	movs	r2, #7
 800d306:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f7ff fd81 	bl	800ce10 <UART_SendMsg>
      break;
 800d30e:	e262      	b.n	800d7d6 <HandleMSG+0x6fa>

    case CMD_MAGNETO_Init:
      if (Msg->Len < 3U)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	2b02      	cmp	r3, #2
 800d316:	d801      	bhi.n	800d31c <HandleMSG+0x240>
      {
        return 0;
 800d318:	2300      	movs	r3, #0
 800d31a:	e25d      	b.n	800d7d8 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f7ff feac 	bl	800d07a <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	3307      	adds	r3, #7
 800d326:	2204      	movs	r2, #4
 800d328:	2102      	movs	r1, #2
 800d32a:	4618      	mov	r0, r3
 800d32c:	f000 fe03 	bl	800df36 <Serialize_s32>
      Msg->Len = 3 + 4;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2207      	movs	r2, #7
 800d334:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f7ff fd6a 	bl	800ce10 <UART_SendMsg>
      break;
 800d33c:	e24b      	b.n	800d7d6 <HandleMSG+0x6fa>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2b02      	cmp	r3, #2
 800d344:	d801      	bhi.n	800d34a <HandleMSG+0x26e>
      {
        return 0;
 800d346:	2300      	movs	r3, #0
 800d348:	e246      	b.n	800d7d8 <HandleMSG+0x6fc>
      }

      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	3307      	adds	r3, #7
 800d34e:	2104      	movs	r1, #4
 800d350:	4618      	mov	r0, r3
 800d352:	f000 fdca 	bl	800deea <Deserialize>
 800d356:	4603      	mov	r3, r0
 800d358:	4a4d      	ldr	r2, [pc, #308]	; (800d490 <HandleMSG+0x3b4>)
 800d35a:	6013      	str	r3, [r2, #0]

      /* Start enabled sensors */
      if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800d35c:	4b4c      	ldr	r3, [pc, #304]	; (800d490 <HandleMSG+0x3b4>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f003 0301 	and.w	r3, r3, #1
 800d364:	2b01      	cmp	r3, #1
 800d366:	d101      	bne.n	800d36c <HandleMSG+0x290>
      {
        BSP_SENSOR_PRESS_Enable();
 800d368:	f000 fb16 	bl	800d998 <BSP_SENSOR_PRESS_Enable>
      }

      if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800d36c:	4b48      	ldr	r3, [pc, #288]	; (800d490 <HandleMSG+0x3b4>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f003 0302 	and.w	r3, r3, #2
 800d374:	2b02      	cmp	r3, #2
 800d376:	d101      	bne.n	800d37c <HandleMSG+0x2a0>
      {
        BSP_SENSOR_TEMP_Enable();
 800d378:	f000 fb16 	bl	800d9a8 <BSP_SENSOR_TEMP_Enable>
      }

      if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800d37c:	4b44      	ldr	r3, [pc, #272]	; (800d490 <HandleMSG+0x3b4>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f003 0304 	and.w	r3, r3, #4
 800d384:	2b04      	cmp	r3, #4
 800d386:	d101      	bne.n	800d38c <HandleMSG+0x2b0>
      {
        BSP_SENSOR_HUM_Enable();
 800d388:	f000 fb16 	bl	800d9b8 <BSP_SENSOR_HUM_Enable>
      }

      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800d38c:	4b40      	ldr	r3, [pc, #256]	; (800d490 <HandleMSG+0x3b4>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f003 0310 	and.w	r3, r3, #16
 800d394:	2b10      	cmp	r3, #16
 800d396:	d101      	bne.n	800d39c <HandleMSG+0x2c0>
      {
        BSP_SENSOR_ACC_Enable();
 800d398:	f000 fae6 	bl	800d968 <BSP_SENSOR_ACC_Enable>
      }

      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800d39c:	4b3c      	ldr	r3, [pc, #240]	; (800d490 <HandleMSG+0x3b4>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f003 0320 	and.w	r3, r3, #32
 800d3a4:	2b20      	cmp	r3, #32
 800d3a6:	d101      	bne.n	800d3ac <HandleMSG+0x2d0>
      {
        BSP_SENSOR_GYR_Enable();
 800d3a8:	f000 fae6 	bl	800d978 <BSP_SENSOR_GYR_Enable>
      }

      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800d3ac:	4b38      	ldr	r3, [pc, #224]	; (800d490 <HandleMSG+0x3b4>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3b4:	2b40      	cmp	r3, #64	; 0x40
 800d3b6:	d101      	bne.n	800d3bc <HandleMSG+0x2e0>
      {
        BSP_SENSOR_MAG_Enable();
 800d3b8:	f000 fae6 	bl	800d988 <BSP_SENSOR_MAG_Enable>
      }

      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 800d3bc:	4835      	ldr	r0, [pc, #212]	; (800d494 <HandleMSG+0x3b8>)
 800d3be:	f7fd faaf 	bl	800a920 <HAL_TIM_Base_Start_IT>
      DataLoggerActive = 1;
 800d3c2:	4b35      	ldr	r3, [pc, #212]	; (800d498 <HandleMSG+0x3bc>)
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	701a      	strb	r2, [r3, #0]

      DataStreamingDest = Msg->Data[1];
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	795a      	ldrb	r2, [r3, #5]
 800d3cc:	4b33      	ldr	r3, [pc, #204]	; (800d49c <HandleMSG+0x3c0>)
 800d3ce:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f7ff fe52 	bl	800d07a <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2203      	movs	r2, #3
 800d3da:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f7ff fd17 	bl	800ce10 <UART_SendMsg>
      break;
 800d3e2:	e1f8      	b.n	800d7d6 <HandleMSG+0x6fa>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2b02      	cmp	r3, #2
 800d3ea:	d801      	bhi.n	800d3f0 <HandleMSG+0x314>
      {
        return 0;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	e1f3      	b.n	800d7d8 <HandleMSG+0x6fc>
      }

      DataLoggerActive = 0;
 800d3f0:	4b29      	ldr	r3, [pc, #164]	; (800d498 <HandleMSG+0x3bc>)
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	701a      	strb	r2, [r3, #0]
      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 800d3f6:	4827      	ldr	r0, [pc, #156]	; (800d494 <HandleMSG+0x3b8>)
 800d3f8:	f7fd fb02 	bl	800aa00 <HAL_TIM_Base_Stop_IT>

      /* Disable all sensors */
      BSP_SENSOR_ACC_Disable();
 800d3fc:	f000 fae4 	bl	800d9c8 <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 800d400:	f000 faea 	bl	800d9d8 <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 800d404:	f000 faf0 	bl	800d9e8 <BSP_SENSOR_MAG_Disable>
      BSP_SENSOR_PRESS_Disable();
 800d408:	f000 faf6 	bl	800d9f8 <BSP_SENSOR_PRESS_Disable>
      BSP_SENSOR_TEMP_Disable();
 800d40c:	f000 fafc 	bl	800da08 <BSP_SENSOR_TEMP_Disable>
      BSP_SENSOR_HUM_Disable();
 800d410:	f000 fb02 	bl	800da18 <BSP_SENSOR_HUM_Disable>

      SensorsEnabled = 0;
 800d414:	4b1e      	ldr	r3, [pc, #120]	; (800d490 <HandleMSG+0x3b4>)
 800d416:	2200      	movs	r2, #0
 800d418:	601a      	str	r2, [r3, #0]
      UseOfflineData = 0;
 800d41a:	4b21      	ldr	r3, [pc, #132]	; (800d4a0 <HandleMSG+0x3c4>)
 800d41c:	2200      	movs	r2, #0
 800d41e:	701a      	strb	r2, [r3, #0]

      BUILD_REPLY_HEADER(Msg);
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f7ff fe2a 	bl	800d07a <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f7ff fcf2 	bl	800ce10 <UART_SendMsg>
      break;
 800d42c:	e1d3      	b.n	800d7d6 <HandleMSG+0x6fa>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2b02      	cmp	r3, #2
 800d434:	d801      	bhi.n	800d43a <HandleMSG+0x35e>
      {
        return 0;
 800d436:	2300      	movs	r3, #0
 800d438:	e1ce      	b.n	800d7d8 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f7ff fe1d 	bl	800d07a <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2203      	movs	r2, #3
 800d444:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	79d8      	ldrb	r0, [r3, #7]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	7a19      	ldrb	r1, [r3, #8]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	7a5b      	ldrb	r3, [r3, #9]
 800d452:	461a      	mov	r2, r3
 800d454:	f000 f9f2 	bl	800d83c <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	7a98      	ldrb	r0, [r3, #10]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	7ad9      	ldrb	r1, [r3, #11]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	7b1a      	ldrb	r2, [r3, #12]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	7b5b      	ldrb	r3, [r3, #13]
 800d468:	f000 f9be 	bl	800d7e8 <RTC_DateRegulate>
      UART_SendMsg(Msg);
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f7ff fccf 	bl	800ce10 <UART_SendMsg>
      break;
 800d472:	e1b0      	b.n	800d7d6 <HandleMSG+0x6fa>

    case CMD_Offline_Data:
      if (Msg->Len < 55U)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2b36      	cmp	r3, #54	; 0x36
 800d47a:	d801      	bhi.n	800d480 <HandleMSG+0x3a4>
      {
        return 0;
 800d47c:	2300      	movs	r3, #0
 800d47e:	e1ab      	b.n	800d7d8 <HandleMSG+0x6fc>
      }

      msg_offset = 4;
 800d480:	2304      	movs	r3, #4
 800d482:	657b      	str	r3, [r7, #84]	; 0x54
      msg_count = (uint32_t)Msg->Data[3];
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	79db      	ldrb	r3, [r3, #7]
 800d488:	653b      	str	r3, [r7, #80]	; 0x50

      for (i = 0; i < msg_count; i++)
 800d48a:	2300      	movs	r3, #0
 800d48c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d48e:	e11a      	b.n	800d6c6 <HandleMSG+0x5ea>
 800d490:	200007b4 	.word	0x200007b4
 800d494:	20001604 	.word	0x20001604
 800d498:	200007b0 	.word	0x200007b0
 800d49c:	20000180 	.word	0x20000180
 800d4a0:	200007b9 	.word	0x200007b9
      {
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 800d4a4:	4ba6      	ldr	r3, [pc, #664]	; (800d740 <HandleMSG+0x664>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2234      	movs	r2, #52	; 0x34
 800d4aa:	fb02 f303 	mul.w	r3, r2, r3
 800d4ae:	4aa5      	ldr	r2, [pc, #660]	; (800d744 <HandleMSG+0x668>)
 800d4b0:	4413      	add	r3, r2
 800d4b2:	6879      	ldr	r1, [r7, #4]
 800d4b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d4b6:	440a      	add	r2, r1
 800d4b8:	3204      	adds	r2, #4
 800d4ba:	7812      	ldrb	r2, [r2, #0]
 800d4bc:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 800d4be:	4ba0      	ldr	r3, [pc, #640]	; (800d740 <HandleMSG+0x664>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2234      	movs	r2, #52	; 0x34
 800d4c4:	fb02 f303 	mul.w	r3, r2, r3
 800d4c8:	4a9e      	ldr	r2, [pc, #632]	; (800d744 <HandleMSG+0x668>)
 800d4ca:	4413      	add	r3, r2
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d4d0:	3201      	adds	r2, #1
 800d4d2:	6879      	ldr	r1, [r7, #4]
 800d4d4:	440a      	add	r2, r1
 800d4d6:	3204      	adds	r2, #4
 800d4d8:	7812      	ldrb	r2, [r2, #0]
 800d4da:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 800d4dc:	4b98      	ldr	r3, [pc, #608]	; (800d740 <HandleMSG+0x664>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2234      	movs	r2, #52	; 0x34
 800d4e2:	fb02 f303 	mul.w	r3, r2, r3
 800d4e6:	4a97      	ldr	r2, [pc, #604]	; (800d744 <HandleMSG+0x668>)
 800d4e8:	4413      	add	r3, r2
 800d4ea:	3302      	adds	r3, #2
 800d4ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d4ee:	3202      	adds	r2, #2
 800d4f0:	6879      	ldr	r1, [r7, #4]
 800d4f2:	440a      	add	r2, r1
 800d4f4:	3204      	adds	r2, #4
 800d4f6:	7812      	ldrb	r2, [r2, #0]
 800d4f8:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 800d4fa:	4b91      	ldr	r3, [pc, #580]	; (800d740 <HandleMSG+0x664>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	2234      	movs	r2, #52	; 0x34
 800d500:	fb02 f303 	mul.w	r3, r2, r3
 800d504:	4a8f      	ldr	r2, [pc, #572]	; (800d744 <HandleMSG+0x668>)
 800d506:	4413      	add	r3, r2
 800d508:	3303      	adds	r3, #3
 800d50a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d50c:	3203      	adds	r2, #3
 800d50e:	6879      	ldr	r1, [r7, #4]
 800d510:	440a      	add	r2, r1
 800d512:	3204      	adds	r2, #4
 800d514:	7812      	ldrb	r2, [r2, #0]
 800d516:	701a      	strb	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 800d518:	4b89      	ldr	r3, [pc, #548]	; (800d740 <HandleMSG+0x664>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2234      	movs	r2, #52	; 0x34
 800d51e:	fb02 f303 	mul.w	r3, r2, r3
 800d522:	4a88      	ldr	r2, [pc, #544]	; (800d744 <HandleMSG+0x668>)
 800d524:	4413      	add	r3, r2
 800d526:	3304      	adds	r3, #4
 800d528:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d52a:	3204      	adds	r2, #4
 800d52c:	6879      	ldr	r1, [r7, #4]
 800d52e:	440a      	add	r2, r1
 800d530:	3204      	adds	r2, #4
 800d532:	6812      	ldr	r2, [r2, #0]
 800d534:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 800d536:	4b82      	ldr	r3, [pc, #520]	; (800d740 <HandleMSG+0x664>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2234      	movs	r2, #52	; 0x34
 800d53c:	fb02 f303 	mul.w	r3, r2, r3
 800d540:	3308      	adds	r3, #8
 800d542:	4a80      	ldr	r2, [pc, #512]	; (800d744 <HandleMSG+0x668>)
 800d544:	4413      	add	r3, r2
 800d546:	3304      	adds	r3, #4
 800d548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d54a:	3208      	adds	r2, #8
 800d54c:	6879      	ldr	r1, [r7, #4]
 800d54e:	440a      	add	r2, r1
 800d550:	3204      	adds	r2, #4
 800d552:	6812      	ldr	r2, [r2, #0]
 800d554:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 800d556:	4b7a      	ldr	r3, [pc, #488]	; (800d740 <HandleMSG+0x664>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2234      	movs	r2, #52	; 0x34
 800d55c:	fb02 f303 	mul.w	r3, r2, r3
 800d560:	3308      	adds	r3, #8
 800d562:	4a78      	ldr	r2, [pc, #480]	; (800d744 <HandleMSG+0x668>)
 800d564:	4413      	add	r3, r2
 800d566:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d568:	320c      	adds	r2, #12
 800d56a:	6879      	ldr	r1, [r7, #4]
 800d56c:	440a      	add	r2, r1
 800d56e:	3204      	adds	r2, #4
 800d570:	6812      	ldr	r2, [r2, #0]
 800d572:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 800d574:	4b72      	ldr	r3, [pc, #456]	; (800d740 <HandleMSG+0x664>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2234      	movs	r2, #52	; 0x34
 800d57a:	fb02 f303 	mul.w	r3, r2, r3
 800d57e:	3310      	adds	r3, #16
 800d580:	4a70      	ldr	r2, [pc, #448]	; (800d744 <HandleMSG+0x668>)
 800d582:	4413      	add	r3, r2
 800d584:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d586:	3210      	adds	r2, #16
 800d588:	6879      	ldr	r1, [r7, #4]
 800d58a:	440a      	add	r2, r1
 800d58c:	3204      	adds	r2, #4
 800d58e:	6812      	ldr	r2, [r2, #0]
 800d590:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 800d592:	4b6b      	ldr	r3, [pc, #428]	; (800d740 <HandleMSG+0x664>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2234      	movs	r2, #52	; 0x34
 800d598:	fb02 f303 	mul.w	r3, r2, r3
 800d59c:	3310      	adds	r3, #16
 800d59e:	4a69      	ldr	r2, [pc, #420]	; (800d744 <HandleMSG+0x668>)
 800d5a0:	4413      	add	r3, r2
 800d5a2:	3304      	adds	r3, #4
 800d5a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5a6:	3214      	adds	r2, #20
 800d5a8:	6879      	ldr	r1, [r7, #4]
 800d5aa:	440a      	add	r2, r1
 800d5ac:	3204      	adds	r2, #4
 800d5ae:	6812      	ldr	r2, [r2, #0]
 800d5b0:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 800d5b2:	4b63      	ldr	r3, [pc, #396]	; (800d740 <HandleMSG+0x664>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2234      	movs	r2, #52	; 0x34
 800d5b8:	fb02 f303 	mul.w	r3, r2, r3
 800d5bc:	3318      	adds	r3, #24
 800d5be:	4a61      	ldr	r2, [pc, #388]	; (800d744 <HandleMSG+0x668>)
 800d5c0:	4413      	add	r3, r2
 800d5c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5c4:	3218      	adds	r2, #24
 800d5c6:	6879      	ldr	r1, [r7, #4]
 800d5c8:	440a      	add	r2, r1
 800d5ca:	3204      	adds	r2, #4
 800d5cc:	6812      	ldr	r2, [r2, #0]
 800d5ce:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 800d5d0:	4b5b      	ldr	r3, [pc, #364]	; (800d740 <HandleMSG+0x664>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2234      	movs	r2, #52	; 0x34
 800d5d6:	fb02 f303 	mul.w	r3, r2, r3
 800d5da:	3318      	adds	r3, #24
 800d5dc:	4a59      	ldr	r2, [pc, #356]	; (800d744 <HandleMSG+0x668>)
 800d5de:	4413      	add	r3, r2
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5e4:	321c      	adds	r2, #28
 800d5e6:	6879      	ldr	r1, [r7, #4]
 800d5e8:	440a      	add	r2, r1
 800d5ea:	3204      	adds	r2, #4
 800d5ec:	6812      	ldr	r2, [r2, #0]
 800d5ee:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 800d5f0:	4b53      	ldr	r3, [pc, #332]	; (800d740 <HandleMSG+0x664>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	2234      	movs	r2, #52	; 0x34
 800d5f6:	fb02 f303 	mul.w	r3, r2, r3
 800d5fa:	3320      	adds	r3, #32
 800d5fc:	4a51      	ldr	r2, [pc, #324]	; (800d744 <HandleMSG+0x668>)
 800d5fe:	4413      	add	r3, r2
 800d600:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d602:	3220      	adds	r2, #32
 800d604:	6879      	ldr	r1, [r7, #4]
 800d606:	440a      	add	r2, r1
 800d608:	3204      	adds	r2, #4
 800d60a:	6812      	ldr	r2, [r2, #0]
 800d60c:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 800d60e:	4b4c      	ldr	r3, [pc, #304]	; (800d740 <HandleMSG+0x664>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2234      	movs	r2, #52	; 0x34
 800d614:	fb02 f303 	mul.w	r3, r2, r3
 800d618:	3320      	adds	r3, #32
 800d61a:	4a4a      	ldr	r2, [pc, #296]	; (800d744 <HandleMSG+0x668>)
 800d61c:	4413      	add	r3, r2
 800d61e:	3304      	adds	r3, #4
 800d620:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d622:	3224      	adds	r2, #36	; 0x24
 800d624:	6879      	ldr	r1, [r7, #4]
 800d626:	440a      	add	r2, r1
 800d628:	3204      	adds	r2, #4
 800d62a:	6812      	ldr	r2, [r2, #0]
 800d62c:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 800d62e:	4b44      	ldr	r3, [pc, #272]	; (800d740 <HandleMSG+0x664>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2234      	movs	r2, #52	; 0x34
 800d634:	fb02 f303 	mul.w	r3, r2, r3
 800d638:	3328      	adds	r3, #40	; 0x28
 800d63a:	4a42      	ldr	r2, [pc, #264]	; (800d744 <HandleMSG+0x668>)
 800d63c:	4413      	add	r3, r2
 800d63e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d640:	3228      	adds	r2, #40	; 0x28
 800d642:	6879      	ldr	r1, [r7, #4]
 800d644:	440a      	add	r2, r1
 800d646:	3204      	adds	r2, #4
 800d648:	6812      	ldr	r2, [r2, #0]
 800d64a:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 800d64c:	4b3c      	ldr	r3, [pc, #240]	; (800d740 <HandleMSG+0x664>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2234      	movs	r2, #52	; 0x34
 800d652:	fb02 f303 	mul.w	r3, r2, r3
 800d656:	3328      	adds	r3, #40	; 0x28
 800d658:	4a3a      	ldr	r2, [pc, #232]	; (800d744 <HandleMSG+0x668>)
 800d65a:	4413      	add	r3, r2
 800d65c:	3304      	adds	r3, #4
 800d65e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d660:	322c      	adds	r2, #44	; 0x2c
 800d662:	6879      	ldr	r1, [r7, #4]
 800d664:	440a      	add	r2, r1
 800d666:	3204      	adds	r2, #4
 800d668:	6812      	ldr	r2, [r2, #0]
 800d66a:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 800d66c:	4b34      	ldr	r3, [pc, #208]	; (800d740 <HandleMSG+0x664>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2234      	movs	r2, #52	; 0x34
 800d672:	fb02 f303 	mul.w	r3, r2, r3
 800d676:	3330      	adds	r3, #48	; 0x30
 800d678:	4a32      	ldr	r2, [pc, #200]	; (800d744 <HandleMSG+0x668>)
 800d67a:	4413      	add	r3, r2
 800d67c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d67e:	3230      	adds	r2, #48	; 0x30
 800d680:	6879      	ldr	r1, [r7, #4]
 800d682:	440a      	add	r2, r1
 800d684:	3204      	adds	r2, #4
 800d686:	6812      	ldr	r2, [r2, #0]
 800d688:	601a      	str	r2, [r3, #0]

        msg_offset += 52;
 800d68a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d68c:	3334      	adds	r3, #52	; 0x34
 800d68e:	657b      	str	r3, [r7, #84]	; 0x54

        OfflineDataCount++;
 800d690:	4b2d      	ldr	r3, [pc, #180]	; (800d748 <HandleMSG+0x66c>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	3301      	adds	r3, #1
 800d696:	4a2c      	ldr	r2, [pc, #176]	; (800d748 <HandleMSG+0x66c>)
 800d698:	6013      	str	r3, [r2, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 800d69a:	4b2b      	ldr	r3, [pc, #172]	; (800d748 <HandleMSG+0x66c>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2b08      	cmp	r3, #8
 800d6a0:	dd02      	ble.n	800d6a8 <HandleMSG+0x5cc>
        {
          OfflineDataCount = OFFLINE_DATA_SIZE;
 800d6a2:	4b29      	ldr	r3, [pc, #164]	; (800d748 <HandleMSG+0x66c>)
 800d6a4:	2208      	movs	r2, #8
 800d6a6:	601a      	str	r2, [r3, #0]
        }

        OfflineDataWriteIndex++;
 800d6a8:	4b25      	ldr	r3, [pc, #148]	; (800d740 <HandleMSG+0x664>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	4a24      	ldr	r2, [pc, #144]	; (800d740 <HandleMSG+0x664>)
 800d6b0:	6013      	str	r3, [r2, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 800d6b2:	4b23      	ldr	r3, [pc, #140]	; (800d740 <HandleMSG+0x664>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	2b07      	cmp	r3, #7
 800d6b8:	dd02      	ble.n	800d6c0 <HandleMSG+0x5e4>
        {
          OfflineDataWriteIndex = 0;
 800d6ba:	4b21      	ldr	r3, [pc, #132]	; (800d740 <HandleMSG+0x664>)
 800d6bc:	2200      	movs	r2, #0
 800d6be:	601a      	str	r2, [r3, #0]
      for (i = 0; i < msg_count; i++)
 800d6c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800d6c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	f4ff aeea 	bcc.w	800d4a4 <HandleMSG+0x3c8>
        }
      }

      SensorReadRequest = 1;
 800d6d0:	4b1e      	ldr	r3, [pc, #120]	; (800d74c <HandleMSG+0x670>)
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	701a      	strb	r2, [r3, #0]

      /* Mark Msg as read */
      BUILD_REPLY_HEADER(Msg);
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f7ff fccf 	bl	800d07a <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2203      	movs	r2, #3
 800d6e0:	601a      	str	r2, [r3, #0]
      break;
 800d6e2:	e078      	b.n	800d7d6 <HandleMSG+0x6fa>

    case CMD_Use_Offline_Data:
      if (Msg->Len < 4U)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b03      	cmp	r3, #3
 800d6ea:	d801      	bhi.n	800d6f0 <HandleMSG+0x614>
      {
        return 0;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	e073      	b.n	800d7d8 <HandleMSG+0x6fc>
      }

      if (Msg->Data[3] == 1U)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	79db      	ldrb	r3, [r3, #7]
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d10e      	bne.n	800d716 <HandleMSG+0x63a>
      {
        UseOfflineData = 1U;
 800d6f8:	4b15      	ldr	r3, [pc, #84]	; (800d750 <HandleMSG+0x674>)
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 800d6fe:	4b15      	ldr	r3, [pc, #84]	; (800d754 <HandleMSG+0x678>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4a15      	ldr	r2, [pc, #84]	; (800d758 <HandleMSG+0x67c>)
 800d704:	6013      	str	r3, [r2, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 800d706:	4b13      	ldr	r3, [pc, #76]	; (800d754 <HandleMSG+0x678>)
 800d708:	f04f 32ff 	mov.w	r2, #4294967295
 800d70c:	601a      	str	r2, [r3, #0]
        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 800d70e:	4813      	ldr	r0, [pc, #76]	; (800d75c <HandleMSG+0x680>)
 800d710:	f7fd f976 	bl	800aa00 <HAL_TIM_Base_Stop_IT>
 800d714:	e006      	b.n	800d724 <HandleMSG+0x648>
      }
      else
      {
        UseOfflineData = 0U;
 800d716:	4b0e      	ldr	r3, [pc, #56]	; (800d750 <HandleMSG+0x674>)
 800d718:	2200      	movs	r2, #0
 800d71a:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 800d71c:	4b0e      	ldr	r3, [pc, #56]	; (800d758 <HandleMSG+0x67c>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a0c      	ldr	r2, [pc, #48]	; (800d754 <HandleMSG+0x678>)
 800d722:	6013      	str	r3, [r2, #0]
      }

      BUILD_REPLY_HEADER(Msg);
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f7ff fca8 	bl	800d07a <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f7ff fb70 	bl	800ce10 <UART_SendMsg>
      break;
 800d730:	e051      	b.n	800d7d6 <HandleMSG+0x6fa>

    case CMD_Get_App_Info:
      if (Msg->Len < 3U)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2b02      	cmp	r3, #2
 800d738:	d812      	bhi.n	800d760 <HandleMSG+0x684>
      {
        return 0;
 800d73a:	2300      	movs	r3, #0
 800d73c:	e04c      	b.n	800d7d8 <HandleMSG+0x6fc>
 800d73e:	bf00      	nop
 800d740:	200007c0 	.word	0x200007c0
 800d744:	200017a4 	.word	0x200017a4
 800d748:	200007c4 	.word	0x200007c4
 800d74c:	200007b8 	.word	0x200007b8
 800d750:	200007b9 	.word	0x200007b9
 800d754:	200007b4 	.word	0x200007b4
 800d758:	20000c20 	.word	0x20000c20
 800d75c:	20001604 	.word	0x20001604
      }

      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	3307      	adds	r3, #7
 800d764:	4a1e      	ldr	r2, [pc, #120]	; (800d7e0 <HandleMSG+0x704>)
 800d766:	6812      	ldr	r2, [r2, #0]
 800d768:	4611      	mov	r1, r2
 800d76a:	2204      	movs	r2, #4
 800d76c:	4618      	mov	r0, r3
 800d76e:	f000 fbe2 	bl	800df36 <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	330b      	adds	r3, #11
 800d776:	2201      	movs	r2, #1
 800d778:	2130      	movs	r1, #48	; 0x30
 800d77a:	4618      	mov	r0, r3
 800d77c:	f000 fbdb 	bl	800df36 <Serialize_s32>

      BUILD_REPLY_HEADER(Msg);
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f7ff fc7a 	bl	800d07a <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2208      	movs	r2, #8
 800d78a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f7ff fb3f 	bl	800ce10 <UART_SendMsg>
      break;
 800d792:	e020      	b.n	800d7d6 <HandleMSG+0x6fa>

    case CMD_ChangeSF:
      if (Msg->Len < 3U)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2b02      	cmp	r3, #2
 800d79a:	d801      	bhi.n	800d7a0 <HandleMSG+0x6c4>
      {
        return 0;
 800d79c:	2300      	movs	r3, #0
 800d79e:	e01b      	b.n	800d7d8 <HandleMSG+0x6fc>
      }

      Enabled6X = Msg->Data[3];
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	79da      	ldrb	r2, [r3, #7]
 800d7a4:	4b0f      	ldr	r3, [pc, #60]	; (800d7e4 <HandleMSG+0x708>)
 800d7a6:	701a      	strb	r2, [r3, #0]

      if (Enabled6X == 1U)
 800d7a8:	4b0e      	ldr	r3, [pc, #56]	; (800d7e4 <HandleMSG+0x708>)
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d104      	bne.n	800d7ba <HandleMSG+0x6de>
      {
        MotionFX_manager_stop_9X();
 800d7b0:	f000 fa86 	bl	800dcc0 <MotionFX_manager_stop_9X>
        MotionFX_manager_start_6X();
 800d7b4:	f000 fa66 	bl	800dc84 <MotionFX_manager_start_6X>
 800d7b8:	e003      	b.n	800d7c2 <HandleMSG+0x6e6>
      }
      else
      {
        MotionFX_manager_stop_6X();
 800d7ba:	f000 fa6d 	bl	800dc98 <MotionFX_manager_stop_6X>
        MotionFX_manager_start_9X();
 800d7be:	f000 fa75 	bl	800dcac <MotionFX_manager_start_9X>
      }

      BUILD_REPLY_HEADER(Msg);
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f7ff fc59 	bl	800d07a <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f7ff fb21 	bl	800ce10 <UART_SendMsg>
      break;
 800d7ce:	e002      	b.n	800d7d6 <HandleMSG+0x6fa>

    default:
      ret = 0;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 800d7d4:	bf00      	nop
  }

  return ret;
 800d7d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3760      	adds	r7, #96	; 0x60
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	2000017c 	.word	0x2000017c
 800d7e4:	200007c8 	.word	0x200007c8

0800d7e8 <RTC_DateRegulate>:
 * @param  d the day value to be set
 * @param  dw the day-week value to be set
 * @retval None
 */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 800d7e8:	b590      	push	{r4, r7, lr}
 800d7ea:	b085      	sub	sp, #20
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	4608      	mov	r0, r1
 800d7f2:	4611      	mov	r1, r2
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	4623      	mov	r3, r4
 800d7f8:	71fb      	strb	r3, [r7, #7]
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	71bb      	strb	r3, [r7, #6]
 800d7fe:	460b      	mov	r3, r1
 800d800:	717b      	strb	r3, [r7, #5]
 800d802:	4613      	mov	r3, r2
 800d804:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 800d806:	79fb      	ldrb	r3, [r7, #7]
 800d808:	73fb      	strb	r3, [r7, #15]
  sdatestructure.Month   = m;
 800d80a:	79bb      	ldrb	r3, [r7, #6]
 800d80c:	737b      	strb	r3, [r7, #13]
  sdatestructure.Date    = d;
 800d80e:	797b      	ldrb	r3, [r7, #5]
 800d810:	73bb      	strb	r3, [r7, #14]
  sdatestructure.WeekDay = dw;
 800d812:	793b      	ldrb	r3, [r7, #4]
 800d814:	733b      	strb	r3, [r7, #12]

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 800d816:	f107 030c 	add.w	r3, r7, #12
 800d81a:	2200      	movs	r2, #0
 800d81c:	4619      	mov	r1, r3
 800d81e:	4806      	ldr	r0, [pc, #24]	; (800d838 <RTC_DateRegulate+0x50>)
 800d820:	f7fc fe80 	bl	800a524 <HAL_RTC_SetDate>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	d001      	beq.n	800d82e <RTC_DateRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 800d82a:	f7f3 fceb 	bl	8001204 <Error_Handler>
  }
}
 800d82e:	bf00      	nop
 800d830:	3714      	adds	r7, #20
 800d832:	46bd      	mov	sp, r7
 800d834:	bd90      	pop	{r4, r7, pc}
 800d836:	bf00      	nop
 800d838:	20001650 	.word	0x20001650

0800d83c <RTC_TimeRegulate>:
 * @param  mm the minute value to be set
 * @param  ss the second value to be set
 * @retval None
 */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b088      	sub	sp, #32
 800d840:	af00      	add	r7, sp, #0
 800d842:	4603      	mov	r3, r0
 800d844:	71fb      	strb	r3, [r7, #7]
 800d846:	460b      	mov	r3, r1
 800d848:	71bb      	strb	r3, [r7, #6]
 800d84a:	4613      	mov	r3, r2
 800d84c:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 800d84e:	79fb      	ldrb	r3, [r7, #7]
 800d850:	733b      	strb	r3, [r7, #12]
  stimestructure.Minutes        = mm;
 800d852:	79bb      	ldrb	r3, [r7, #6]
 800d854:	737b      	strb	r3, [r7, #13]
  stimestructure.Seconds        = ss;
 800d856:	797b      	ldrb	r3, [r7, #5]
 800d858:	73bb      	strb	r3, [r7, #14]
  stimestructure.SubSeconds     = 0;
 800d85a:	2300      	movs	r3, #0
 800d85c:	613b      	str	r3, [r7, #16]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 800d85e:	2300      	movs	r3, #0
 800d860:	73fb      	strb	r3, [r7, #15]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d862:	2300      	movs	r3, #0
 800d864:	61bb      	str	r3, [r7, #24]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d866:	2300      	movs	r3, #0
 800d868:	61fb      	str	r3, [r7, #28]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 800d86a:	f107 030c 	add.w	r3, r7, #12
 800d86e:	2200      	movs	r2, #0
 800d870:	4619      	mov	r1, r3
 800d872:	4806      	ldr	r0, [pc, #24]	; (800d88c <RTC_TimeRegulate+0x50>)
 800d874:	f7fc fd5d 	bl	800a332 <HAL_RTC_SetTime>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d001      	beq.n	800d882 <RTC_TimeRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 800d87e:	f7f3 fcc1 	bl	8001204 <Error_Handler>
  }
}
 800d882:	bf00      	nop
 800d884:	3720      	adds	r7, #32
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	20001650 	.word	0x20001650

0800d890 <Get_PresentationString>:
 * @param  PresentationString the Presentation string
 * @param  Length the length of Presentation string
 * @retval None
 */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 800d890:	b5b0      	push	{r4, r5, r7, lr}
 800d892:	b09e      	sub	sp, #120	; 0x78
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	6039      	str	r1, [r7, #0]
  const uint8_t string_pointer_shift = strlen("ST MotionXX v"); /* Shift string pointer by this amount */
 800d89a:	230d      	movs	r3, #13
 800d89c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  const char ps[] = {"MEMS shield demo,4,"FW_VERSION",%s,"BOARD_NAME};
 800d8a4:	4b17      	ldr	r3, [pc, #92]	; (800d904 <Get_PresentationString+0x74>)
 800d8a6:	f107 0408 	add.w	r4, r7, #8
 800d8aa:	461d      	mov	r5, r3
 800d8ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d8b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d8b4:	682b      	ldr	r3, [r5, #0]
 800d8b6:	6023      	str	r3, [r4, #0]

  MotionFX_manager_get_version(lib_version_string, &lib_version_len);
 800d8b8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d8bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d8c0:	4611      	mov	r1, r2
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f000 fa06 	bl	800dcd4 <MotionFX_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0 resp. ST MotionXXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 800d8c8:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800d8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	da06      	bge.n	800d8e0 <Get_PresentationString+0x50>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
 800d8d2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d8d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d8da:	4413      	add	r3, r2
 800d8dc:	677b      	str	r3, [r7, #116]	; 0x74
 800d8de:	e002      	b.n	800d8e6 <Get_PresentationString+0x56>
  }
  else
  {
    lib_version_num = lib_version_string;
 800d8e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d8e4:	677b      	str	r3, [r7, #116]	; 0x74
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 800d8e6:	f107 0208 	add.w	r2, r7, #8
 800d8ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8ec:	2140      	movs	r1, #64	; 0x40
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f00c fd12 	bl	801a318 <sniprintf>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	601a      	str	r2, [r3, #0]
}
 800d8fc:	bf00      	nop
 800d8fe:	3778      	adds	r7, #120	; 0x78
 800d900:	46bd      	mov	sp, r7
 800d902:	bdb0      	pop	{r4, r5, r7, pc}
 800d904:	0801ab98 	.word	0x0801ab98

0800d908 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800d90c:	2102      	movs	r1, #2
 800d90e:	2000      	movs	r0, #0
 800d910:	f7f8 fd12 	bl	8006338 <IKS01A2_MOTION_SENSOR_Init>
}
 800d914:	bf00      	nop
 800d916:	bd80      	pop	{r7, pc}

0800d918 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 800d91c:	2101      	movs	r1, #1
 800d91e:	2000      	movs	r0, #0
 800d920:	f7f8 fd0a 	bl	8006338 <IKS01A2_MOTION_SENSOR_Init>
}
 800d924:	bf00      	nop
 800d926:	bd80      	pop	{r7, pc}

0800d928 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800d92c:	2104      	movs	r1, #4
 800d92e:	2002      	movs	r0, #2
 800d930:	f7f8 fd02 	bl	8006338 <IKS01A2_MOTION_SENSOR_Init>
}
 800d934:	bf00      	nop
 800d936:	bd80      	pop	{r7, pc}

0800d938 <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800d93c:	2102      	movs	r1, #2
 800d93e:	2001      	movs	r0, #1
 800d940:	f7f8 f9fc 	bl	8005d3c <IKS01A2_ENV_SENSOR_Init>
}
 800d944:	bf00      	nop
 800d946:	bd80      	pop	{r7, pc}

0800d948 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 800d94c:	2101      	movs	r1, #1
 800d94e:	2000      	movs	r0, #0
 800d950:	f7f8 f9f4 	bl	8005d3c <IKS01A2_ENV_SENSOR_Init>
}
 800d954:	bf00      	nop
 800d956:	bd80      	pop	{r7, pc}

0800d958 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_HUMIDITY);
 800d95c:	2104      	movs	r1, #4
 800d95e:	2000      	movs	r0, #0
 800d960:	f7f8 f9ec 	bl	8005d3c <IKS01A2_ENV_SENSOR_Init>
}
 800d964:	bf00      	nop
 800d966:	bd80      	pop	{r7, pc}

0800d968 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800d96c:	2102      	movs	r1, #2
 800d96e:	2000      	movs	r0, #0
 800d970:	f7f8 fdde 	bl	8006530 <IKS01A2_MOTION_SENSOR_Enable>
}
 800d974:	bf00      	nop
 800d976:	bd80      	pop	{r7, pc}

0800d978 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 800d97c:	2101      	movs	r1, #1
 800d97e:	2000      	movs	r0, #0
 800d980:	f7f8 fdd6 	bl	8006530 <IKS01A2_MOTION_SENSOR_Enable>
}
 800d984:	bf00      	nop
 800d986:	bd80      	pop	{r7, pc}

0800d988 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800d98c:	2104      	movs	r1, #4
 800d98e:	2002      	movs	r0, #2
 800d990:	f7f8 fdce 	bl	8006530 <IKS01A2_MOTION_SENSOR_Enable>
}
 800d994:	bf00      	nop
 800d996:	bd80      	pop	{r7, pc}

0800d998 <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800d99c:	2102      	movs	r1, #2
 800d99e:	2001      	movs	r0, #1
 800d9a0:	f7f8 fa8c 	bl	8005ebc <IKS01A2_ENV_SENSOR_Enable>
}
 800d9a4:	bf00      	nop
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 800d9ac:	2101      	movs	r1, #1
 800d9ae:	2000      	movs	r0, #0
 800d9b0:	f7f8 fa84 	bl	8005ebc <IKS01A2_ENV_SENSOR_Enable>
}
 800d9b4:	bf00      	nop
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_HUMIDITY);
 800d9bc:	2104      	movs	r1, #4
 800d9be:	2000      	movs	r0, #0
 800d9c0:	f7f8 fa7c 	bl	8005ebc <IKS01A2_ENV_SENSOR_Enable>
}
 800d9c4:	bf00      	nop
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800d9cc:	2102      	movs	r1, #2
 800d9ce:	2000      	movs	r0, #0
 800d9d0:	f7f8 fdf0 	bl	80065b4 <IKS01A2_MOTION_SENSOR_Disable>
}
 800d9d4:	bf00      	nop
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 800d9dc:	2101      	movs	r1, #1
 800d9de:	2000      	movs	r0, #0
 800d9e0:	f7f8 fde8 	bl	80065b4 <IKS01A2_MOTION_SENSOR_Disable>
}
 800d9e4:	bf00      	nop
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800d9ec:	2104      	movs	r1, #4
 800d9ee:	2002      	movs	r0, #2
 800d9f0:	f7f8 fde0 	bl	80065b4 <IKS01A2_MOTION_SENSOR_Disable>
}
 800d9f4:	bf00      	nop
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <BSP_SENSOR_PRESS_Disable>:
  * @brief  Disables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Disable(void)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Disable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800d9fc:	2102      	movs	r1, #2
 800d9fe:	2001      	movs	r0, #1
 800da00:	f7f8 fa9e 	bl	8005f40 <IKS01A2_ENV_SENSOR_Disable>
}
 800da04:	bf00      	nop
 800da06:	bd80      	pop	{r7, pc}

0800da08 <BSP_SENSOR_TEMP_Disable>:
  * @brief  Disables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Disable(void)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Disable(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 800da0c:	2101      	movs	r1, #1
 800da0e:	2000      	movs	r0, #0
 800da10:	f7f8 fa96 	bl	8005f40 <IKS01A2_ENV_SENSOR_Disable>
}
 800da14:	bf00      	nop
 800da16:	bd80      	pop	{r7, pc}

0800da18 <BSP_SENSOR_HUM_Disable>:
  * @brief  Disables humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Disable(void)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Disable(IKS01A2_HTS221_0, ENV_HUMIDITY);
 800da1c:	2104      	movs	r1, #4
 800da1e:	2000      	movs	r0, #0
 800da20:	f7f8 fa8e 	bl	8005f40 <IKS01A2_ENV_SENSOR_Disable>
}
 800da24:	bf00      	nop
 800da26:	bd80      	pop	{r7, pc}

0800da28 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	2102      	movs	r1, #2
 800da34:	2000      	movs	r0, #0
 800da36:	f7f8 fdff 	bl	8006638 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800da3a:	bf00      	nop
 800da3c:	3708      	adds	r7, #8
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800da42:	b580      	push	{r7, lr}
 800da44:	b082      	sub	sp, #8
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	2101      	movs	r1, #1
 800da4e:	2000      	movs	r0, #0
 800da50:	f7f8 fdf2 	bl	8006638 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800da54:	bf00      	nop
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	2104      	movs	r1, #4
 800da68:	2002      	movs	r0, #2
 800da6a:	f7f8 fde5 	bl	8006638 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800da6e:	bf00      	nop
 800da70:	3708      	adds	r7, #8
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <BSP_SENSOR_PRESS_GetValue>:
  * @brief  Get pressure sensor data
  * @param  Value pointer to pressure value
  * @retval None
  */
void BSP_SENSOR_PRESS_GetValue(float *Value)
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b082      	sub	sp, #8
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_LPS22HB_0, ENV_PRESSURE, Value);
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	2102      	movs	r1, #2
 800da82:	2001      	movs	r0, #1
 800da84:	f7f8 fa9e 	bl	8005fc4 <IKS01A2_ENV_SENSOR_GetValue>
}
 800da88:	bf00      	nop
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <BSP_SENSOR_TEMP_GetValue>:
  * @brief  Get temperature sensor data
  * @param  Value pointer to temperature value
  * @retval None
  */
void BSP_SENSOR_TEMP_GetValue(float *Value)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_TEMPERATURE, Value);
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	2101      	movs	r1, #1
 800da9c:	2000      	movs	r0, #0
 800da9e:	f7f8 fa91 	bl	8005fc4 <IKS01A2_ENV_SENSOR_GetValue>
}
 800daa2:	bf00      	nop
 800daa4:	3708      	adds	r7, #8
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <BSP_SENSOR_HUM_GetValue>:
  * @brief  Get humidity sensor data
  * @param  Value pointer to humidity value
  * @retval None
  */
void BSP_SENSOR_HUM_GetValue(float *Value)
{
 800daaa:	b580      	push	{r7, lr}
 800daac:	b082      	sub	sp, #8
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_HUMIDITY, Value);
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	2104      	movs	r1, #4
 800dab6:	2000      	movs	r0, #0
 800dab8:	f7f8 fa84 	bl	8005fc4 <IKS01A2_ENV_SENSOR_GetValue>
}
 800dabc:	bf00      	nop
 800dabe:	3708      	adds	r7, #8
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 800dace:	ed97 0a01 	vldr	s0, [r7, #4]
 800dad2:	2102      	movs	r1, #2
 800dad4:	2000      	movs	r0, #0
 800dad6:	f7f8 fdf3 	bl	80066c0 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 800dada:	bf00      	nop
 800dadc:	3708      	adds	r7, #8
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b082      	sub	sp, #8
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	2102      	movs	r1, #2
 800daee:	2000      	movs	r0, #0
 800daf0:	f7f8 fe2c 	bl	800674c <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 800daf4:	bf00      	nop
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	226e      	movs	r2, #110	; 0x6e
 800db08:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	3301      	adds	r3, #1
 800db0e:	2277      	movs	r2, #119	; 0x77
 800db10:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	3302      	adds	r3, #2
 800db16:	2275      	movs	r2, #117	; 0x75
 800db18:	701a      	strb	r2, [r3, #0]
}
 800db1a:	bf00      	nop
 800db1c:	370c      	adds	r7, #12
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr

0800db26 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 800db26:	b480      	push	{r7}
 800db28:	b083      	sub	sp, #12
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	226e      	movs	r2, #110	; 0x6e
 800db32:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	3301      	adds	r3, #1
 800db38:	2277      	movs	r2, #119	; 0x77
 800db3a:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	3302      	adds	r3, #2
 800db40:	2275      	movs	r2, #117	; 0x75
 800db42:	701a      	strb	r2, [r3, #0]
}
 800db44:	bf00      	nop
 800db46:	370c      	adds	r7, #12
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	226e      	movs	r2, #110	; 0x6e
 800db5c:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	3301      	adds	r3, #1
 800db62:	2265      	movs	r2, #101	; 0x65
 800db64:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	3302      	adds	r3, #2
 800db6a:	2275      	movs	r2, #117	; 0x75
 800db6c:	701a      	strb	r2, [r3, #0]
}
 800db6e:	bf00      	nop
 800db70:	370c      	adds	r7, #12
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr
	...

0800db7c <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 800db80:	f009 fea6 	bl	80178d0 <MotionFX_GetStateSize>
 800db84:	4603      	mov	r3, r0
 800db86:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 800db8a:	d901      	bls.n	800db90 <MotionFX_manager_init+0x14>
    Error_Handler();
 800db8c:	f7f3 fb3a 	bl	8001204 <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 800db90:	4821      	ldr	r0, [pc, #132]	; (800dc18 <MotionFX_manager_init+0x9c>)
 800db92:	f009 fea1 	bl	80178d8 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 800db96:	4b21      	ldr	r3, [pc, #132]	; (800dc1c <MotionFX_manager_init+0xa0>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4619      	mov	r1, r3
 800db9c:	481e      	ldr	r0, [pc, #120]	; (800dc18 <MotionFX_manager_init+0x9c>)
 800db9e:	f009 ff7f 	bl	8017aa0 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 800dba2:	4b1e      	ldr	r3, [pc, #120]	; (800dc1c <MotionFX_manager_init+0xa0>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	331d      	adds	r3, #29
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7ff ffa7 	bl	800dafc <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 800dbae:	4b1b      	ldr	r3, [pc, #108]	; (800dc1c <MotionFX_manager_init+0xa0>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	3321      	adds	r3, #33	; 0x21
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7ff ffb6 	bl	800db26 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 800dbba:	4b18      	ldr	r3, [pc, #96]	; (800dc1c <MotionFX_manager_init+0xa0>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	3325      	adds	r3, #37	; 0x25
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7ff ffc5 	bl	800db50 <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 800dbc6:	4b15      	ldr	r3, [pc, #84]	; (800dc1c <MotionFX_manager_init+0xa0>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4a15      	ldr	r2, [pc, #84]	; (800dc20 <MotionFX_manager_init+0xa4>)
 800dbcc:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 800dbce:	4b13      	ldr	r3, [pc, #76]	; (800dc1c <MotionFX_manager_init+0xa0>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a14      	ldr	r2, [pc, #80]	; (800dc24 <MotionFX_manager_init+0xa8>)
 800dbd4:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 800dbd6:	4b11      	ldr	r3, [pc, #68]	; (800dc1c <MotionFX_manager_init+0xa0>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4a13      	ldr	r2, [pc, #76]	; (800dc28 <MotionFX_manager_init+0xac>)
 800dbdc:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 800dbde:	4b0f      	ldr	r3, [pc, #60]	; (800dc1c <MotionFX_manager_init+0xa0>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 800dbe8:	4b0c      	ldr	r3, [pc, #48]	; (800dc1c <MotionFX_manager_init+0xa0>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2201      	movs	r2, #1
 800dbee:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 800dbf0:	4b0a      	ldr	r3, [pc, #40]	; (800dc1c <MotionFX_manager_init+0xa0>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 800dbf8:	4b08      	ldr	r3, [pc, #32]	; (800dc1c <MotionFX_manager_init+0xa0>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	4806      	ldr	r0, [pc, #24]	; (800dc18 <MotionFX_manager_init+0x9c>)
 800dc00:	f009 ff04 	bl	8017a0c <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 800dc04:	2100      	movs	r1, #0
 800dc06:	4804      	ldr	r0, [pc, #16]	; (800dc18 <MotionFX_manager_init+0x9c>)
 800dc08:	f009 ff86 	bl	8017b18 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	4802      	ldr	r0, [pc, #8]	; (800dc18 <MotionFX_manager_init+0x9c>)
 800dc10:	f009 ffa2 	bl	8017b58 <MotionFX_enable_9X>
}
 800dc14:	bf00      	nop
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	20000c58 	.word	0x20000c58
 800dc1c:	20000184 	.word	0x20000184
 800dc20:	3ac88a48 	.word	0x3ac88a48
 800dc24:	3b83126f 	.word	0x3b83126f
 800dc28:	3b449ba6 	.word	0x3b449ba6

0800dc2c <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b086      	sub	sp, #24
 800dc30:	af02      	add	r7, sp, #8
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	ed87 0a01 	vstr	s0, [r7, #4]
  if (discardedCount == sampleToDiscard)
 800dc3a:	4b0f      	ldr	r3, [pc, #60]	; (800dc78 <MotionFX_manager_run+0x4c>)
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	4b0f      	ldr	r3, [pc, #60]	; (800dc7c <MotionFX_manager_run+0x50>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d10e      	bne.n	800dc64 <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 800dc46:	1d3b      	adds	r3, r7, #4
 800dc48:	68fa      	ldr	r2, [r7, #12]
 800dc4a:	68b9      	ldr	r1, [r7, #8]
 800dc4c:	480c      	ldr	r0, [pc, #48]	; (800dc80 <MotionFX_manager_run+0x54>)
 800dc4e:	f009 ffb3 	bl	8017bb8 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 800dc52:	1d3b      	adds	r3, r7, #4
 800dc54:	2200      	movs	r2, #0
 800dc56:	9200      	str	r2, [sp, #0]
 800dc58:	68fa      	ldr	r2, [r7, #12]
 800dc5a:	68b9      	ldr	r1, [r7, #8]
 800dc5c:	4808      	ldr	r0, [pc, #32]	; (800dc80 <MotionFX_manager_run+0x54>)
 800dc5e:	f009 ff9b 	bl	8017b98 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 800dc62:	e004      	b.n	800dc6e <MotionFX_manager_run+0x42>
    discardedCount++;
 800dc64:	4b04      	ldr	r3, [pc, #16]	; (800dc78 <MotionFX_manager_run+0x4c>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	4a03      	ldr	r2, [pc, #12]	; (800dc78 <MotionFX_manager_run+0x4c>)
 800dc6c:	6013      	str	r3, [r2, #0]
}
 800dc6e:	bf00      	nop
 800dc70:	3710      	adds	r7, #16
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	bf00      	nop
 800dc78:	20000c54 	.word	0x20000c54
 800dc7c:	20000188 	.word	0x20000188
 800dc80:	20000c58 	.word	0x20000c58

0800dc84 <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 800dc88:	2101      	movs	r1, #1
 800dc8a:	4802      	ldr	r0, [pc, #8]	; (800dc94 <MotionFX_manager_start_6X+0x10>)
 800dc8c:	f009 ff44 	bl	8017b18 <MotionFX_enable_6X>
}
 800dc90:	bf00      	nop
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	20000c58 	.word	0x20000c58

0800dc98 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	4802      	ldr	r0, [pc, #8]	; (800dca8 <MotionFX_manager_stop_6X+0x10>)
 800dca0:	f009 ff3a 	bl	8017b18 <MotionFX_enable_6X>
}
 800dca4:	bf00      	nop
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	20000c58 	.word	0x20000c58

0800dcac <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 800dcb0:	2101      	movs	r1, #1
 800dcb2:	4802      	ldr	r0, [pc, #8]	; (800dcbc <MotionFX_manager_start_9X+0x10>)
 800dcb4:	f009 ff50 	bl	8017b58 <MotionFX_enable_9X>
}
 800dcb8:	bf00      	nop
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	20000c58 	.word	0x20000c58

0800dcc0 <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	4802      	ldr	r0, [pc, #8]	; (800dcd0 <MotionFX_manager_stop_9X+0x10>)
 800dcc8:	f009 ff46 	bl	8017b58 <MotionFX_enable_9X>
}
 800dccc:	bf00      	nop
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	20000c58 	.word	0x20000c58

0800dcd4 <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
  *length = (int)MotionFX_GetLibVersion(version);
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f00a fbb0 	bl	8018444 <MotionFX_GetLibVersion>
 800dce4:	4603      	mov	r3, r0
 800dce6:	461a      	mov	r2, r3
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	601a      	str	r2, [r3, #0]
}
 800dcec:	bf00      	nop
 800dcee:	3708      	adds	r7, #8
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f00a f942 	bl	8017f88 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 800dd04:	6838      	ldr	r0, [r7, #0]
 800dd06:	f00a fb61 	bl	80183cc <MotionFX_MagCal_getParams>
}
 800dd0a:	bf00      	nop
 800dd0c:	3708      	adds	r7, #8
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b082      	sub	sp, #8
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 800dd1a:	2101      	movs	r1, #1
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f00a f89d 	bl	8017e5c <MotionFX_MagCal_init>
}
 800dd22:	bf00      	nop
 800dd24:	3708      	adds	r7, #8
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b082      	sub	sp, #8
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 800dd32:	2100      	movs	r1, #0
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f00a f891 	bl	8017e5c <MotionFX_MagCal_init>
}
 800dd3a:	bf00      	nop
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <ByteStuffCopyByte>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 800dd42:	b480      	push	{r7}
 800dd44:	b085      	sub	sp, #20
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 800dd4e:	2302      	movs	r3, #2
 800dd50:	60fb      	str	r3, [r7, #12]

  switch (Source)
 800dd52:	78fb      	ldrb	r3, [r7, #3]
 800dd54:	2bf0      	cmp	r3, #240	; 0xf0
 800dd56:	d002      	beq.n	800dd5e <ByteStuffCopyByte+0x1c>
 800dd58:	2bf1      	cmp	r3, #241	; 0xf1
 800dd5a:	d008      	beq.n	800dd6e <ByteStuffCopyByte+0x2c>
 800dd5c:	e00f      	b.n	800dd7e <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	22f1      	movs	r2, #241	; 0xf1
 800dd62:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	3301      	adds	r3, #1
 800dd68:	22f2      	movs	r2, #242	; 0xf2
 800dd6a:	701a      	strb	r2, [r3, #0]
      break;
 800dd6c:	e00d      	b.n	800dd8a <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	22f1      	movs	r2, #241	; 0xf1
 800dd72:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	3301      	adds	r3, #1
 800dd78:	22f1      	movs	r2, #241	; 0xf1
 800dd7a:	701a      	strb	r2, [r3, #0]
      break;
 800dd7c:	e005      	b.n	800dd8a <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	78fa      	ldrb	r2, [r7, #3]
 800dd82:	701a      	strb	r2, [r3, #0]
      ret = 1;
 800dd84:	2301      	movs	r3, #1
 800dd86:	60fb      	str	r3, [r7, #12]
      break;
 800dd88:	bf00      	nop
  }

  return ret;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3714      	adds	r7, #20
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr

0800dd98 <ByteStuffCopy>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 800dda2:	2300      	movs	r3, #0
 800dda4:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 800dda6:	2300      	movs	r3, #0
 800dda8:	60fb      	str	r3, [r7, #12]
 800ddaa:	e011      	b.n	800ddd0 <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	18d0      	adds	r0, r2, r3
 800ddb2:	683a      	ldr	r2, [r7, #0]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	4413      	add	r3, r2
 800ddb8:	3304      	adds	r3, #4
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	f7ff ffc0 	bl	800dd42 <ByteStuffCopyByte>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	60fb      	str	r3, [r7, #12]
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68fa      	ldr	r2, [r7, #12]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d3e8      	bcc.n	800ddac <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	4413      	add	r3, r2
 800dde0:	22f0      	movs	r2, #240	; 0xf0
 800dde2:	701a      	strb	r2, [r3, #0]
  count++;
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	3301      	adds	r3, #1
 800dde8:	60bb      	str	r3, [r7, #8]
  return count;
 800ddea:	68bb      	ldr	r3, [r7, #8]
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3710      	adds	r7, #16
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <ReverseByteStuffCopyByte2>:
 * @param  Source1 input data
 * @param  Dest the destination data
 * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
 */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b083      	sub	sp, #12
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	603a      	str	r2, [r7, #0]
 800ddfe:	71fb      	strb	r3, [r7, #7]
 800de00:	460b      	mov	r3, r1
 800de02:	71bb      	strb	r3, [r7, #6]
  if (Source0 == (uint8_t)TMsg_BS)
 800de04:	79fb      	ldrb	r3, [r7, #7]
 800de06:	2bf1      	cmp	r3, #241	; 0xf1
 800de08:	d111      	bne.n	800de2e <ReverseByteStuffCopyByte2+0x3a>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 800de0a:	79bb      	ldrb	r3, [r7, #6]
 800de0c:	2bf1      	cmp	r3, #241	; 0xf1
 800de0e:	d104      	bne.n	800de1a <ReverseByteStuffCopyByte2+0x26>
    {
      *Dest = TMsg_BS;
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	22f1      	movs	r2, #241	; 0xf1
 800de14:	701a      	strb	r2, [r3, #0]
      return 2;
 800de16:	2302      	movs	r3, #2
 800de18:	e00d      	b.n	800de36 <ReverseByteStuffCopyByte2+0x42>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 800de1a:	79bb      	ldrb	r3, [r7, #6]
 800de1c:	2bf2      	cmp	r3, #242	; 0xf2
 800de1e:	d104      	bne.n	800de2a <ReverseByteStuffCopyByte2+0x36>
    {
      *Dest = TMsg_EOF;
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	22f0      	movs	r2, #240	; 0xf0
 800de24:	701a      	strb	r2, [r3, #0]
      return 2;
 800de26:	2302      	movs	r3, #2
 800de28:	e005      	b.n	800de36 <ReverseByteStuffCopyByte2+0x42>
    }

    return 0; // invalid sequence
 800de2a:	2300      	movs	r3, #0
 800de2c:	e003      	b.n	800de36 <ReverseByteStuffCopyByte2+0x42>
  }
  else
  {
    *Dest = Source0;
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	79fa      	ldrb	r2, [r7, #7]
 800de32:	701a      	strb	r2, [r3, #0]
    return 1;
 800de34:	2301      	movs	r3, #1
  }
}
 800de36:	4618      	mov	r0, r3
 800de38:	370c      	adds	r7, #12
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr

0800de42 <CHK_ComputeAndAdd>:
 * @brief  Compute and add checksum
 * @param  Msg pointer to the message
 * @retval None
 */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 800de42:	b480      	push	{r7}
 800de44:	b085      	sub	sp, #20
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 800de4a:	2300      	movs	r3, #0
 800de4c:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 800de4e:	2300      	movs	r3, #0
 800de50:	60bb      	str	r3, [r7, #8]
 800de52:	e00a      	b.n	800de6a <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	4413      	add	r3, r2
 800de5a:	3304      	adds	r3, #4
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	7bfa      	ldrb	r2, [r7, #15]
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	3301      	adds	r3, #1
 800de68:	60bb      	str	r3, [r7, #8]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	68ba      	ldr	r2, [r7, #8]
 800de70:	429a      	cmp	r2, r3
 800de72:	d3ef      	bcc.n	800de54 <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 800de74:	687a      	ldr	r2, [r7, #4]
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	4413      	add	r3, r2
 800de7a:	3304      	adds	r3, #4
 800de7c:	7bfa      	ldrb	r2, [r7, #15]
 800de7e:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	1c5a      	adds	r2, r3, #1
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	601a      	str	r2, [r3, #0]
}
 800de8a:	bf00      	nop
 800de8c:	3714      	adds	r7, #20
 800de8e:	46bd      	mov	sp, r7
 800de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de94:	4770      	bx	lr

0800de96 <CHK_CheckAndRemove>:
 * @brief  Compute and remove checksum
 * @param  Msg pointer to the message
 * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
 */
int CHK_CheckAndRemove(TMsg *Msg)
{
 800de96:	b480      	push	{r7}
 800de98:	b085      	sub	sp, #20
 800de9a:	af00      	add	r7, sp, #0
 800de9c:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 800de9e:	2300      	movs	r3, #0
 800dea0:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 800dea2:	2300      	movs	r3, #0
 800dea4:	60bb      	str	r3, [r7, #8]
 800dea6:	e00a      	b.n	800debe <CHK_CheckAndRemove+0x28>
  {
    chk += Msg->Data[i];
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	4413      	add	r3, r2
 800deae:	3304      	adds	r3, #4
 800deb0:	781a      	ldrb	r2, [r3, #0]
 800deb2:	7bfb      	ldrb	r3, [r7, #15]
 800deb4:	4413      	add	r3, r2
 800deb6:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	3301      	adds	r3, #1
 800debc:	60bb      	str	r3, [r7, #8]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	68ba      	ldr	r2, [r7, #8]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d3ef      	bcc.n	800dea8 <CHK_CheckAndRemove+0x12>
  }

  Msg->Len--;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	1e5a      	subs	r2, r3, #1
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 800ded2:	7bfb      	ldrb	r3, [r7, #15]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	bf0c      	ite	eq
 800ded8:	2301      	moveq	r3, #1
 800deda:	2300      	movne	r3, #0
 800dedc:	b2db      	uxtb	r3, r3
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3714      	adds	r7, #20
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr

0800deea <Deserialize>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval Rebuild unsigned int variable
 */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 800deea:	b480      	push	{r7}
 800deec:	b085      	sub	sp, #20
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
 800def2:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	3b01      	subs	r3, #1
 800def8:	603b      	str	r3, [r7, #0]
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	4413      	add	r3, r2
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 800df04:	e00d      	b.n	800df22 <Deserialize+0x38>
  {
    app <<= 8;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	021b      	lsls	r3, r3, #8
 800df0a:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	3b01      	subs	r3, #1
 800df10:	603b      	str	r3, [r7, #0]
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	4413      	add	r3, r2
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	461a      	mov	r2, r3
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	4413      	add	r3, r2
 800df20:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d1ee      	bne.n	800df06 <Deserialize+0x1c>
  }

  return app;
 800df28:	68fb      	ldr	r3, [r7, #12]
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3714      	adds	r7, #20
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr

0800df36 <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 800df36:	b480      	push	{r7}
 800df38:	b087      	sub	sp, #28
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	60f8      	str	r0, [r7, #12]
 800df3e:	60b9      	str	r1, [r7, #8]
 800df40:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 800df42:	2300      	movs	r3, #0
 800df44:	617b      	str	r3, [r7, #20]
 800df46:	e00f      	b.n	800df68 <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 800df4c:	68fa      	ldr	r2, [r7, #12]
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	4413      	add	r3, r2
 800df52:	693a      	ldr	r2, [r7, #16]
 800df54:	b2d2      	uxtb	r2, r2
 800df56:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	0a1b      	lsrs	r3, r3, #8
 800df5c:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	3301      	adds	r3, #1
 800df66:	617b      	str	r3, [r7, #20]
 800df68:	697a      	ldr	r2, [r7, #20]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d3eb      	bcc.n	800df48 <Serialize_s32+0x12>
  }
}
 800df70:	bf00      	nop
 800df72:	bf00      	nop
 800df74:	371c      	adds	r7, #28
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr
	...

0800df80 <DataHist_parameters>:
 800df80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800df86:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800df88:	7020      	strb	r0, [r4, #0]
 800df8a:	6808      	ldr	r0, [r1, #0]
 800df8c:	6060      	str	r0, [r4, #4]
 800df8e:	6848      	ldr	r0, [r1, #4]
 800df90:	60a0      	str	r0, [r4, #8]
 800df92:	6888      	ldr	r0, [r1, #8]
 800df94:	60e0      	str	r0, [r4, #12]
 800df96:	68c8      	ldr	r0, [r1, #12]
 800df98:	6120      	str	r0, [r4, #16]
 800df9a:	6908      	ldr	r0, [r1, #16]
 800df9c:	6160      	str	r0, [r4, #20]
 800df9e:	6948      	ldr	r0, [r1, #20]
 800dfa0:	61a0      	str	r0, [r4, #24]
 800dfa2:	6988      	ldr	r0, [r1, #24]
 800dfa4:	61e0      	str	r0, [r4, #28]
 800dfa6:	69c8      	ldr	r0, [r1, #28]
 800dfa8:	6220      	str	r0, [r4, #32]
 800dfaa:	6a09      	ldr	r1, [r1, #32]
 800dfac:	6261      	str	r1, [r4, #36]	; 0x24
 800dfae:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800dfb2:	8811      	ldrh	r1, [r2, #0]
 800dfb4:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800dfb8:	8521      	strh	r1, [r4, #40]	; 0x28
 800dfba:	f102 0c80 	add.w	ip, r2, #128	; 0x80
 800dfbe:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800dfc2:	f04f 0e00 	mov.w	lr, #0
 800dfc6:	f1ac 0278 	sub.w	r2, ip, #120	; 0x78
 800dfca:	4641      	mov	r1, r8
 800dfcc:	f852 0b04 	ldr.w	r0, [r2], #4
 800dfd0:	f841 0b04 	str.w	r0, [r1], #4
 800dfd4:	4562      	cmp	r2, ip
 800dfd6:	d1f9      	bne.n	800dfcc <DataHist_parameters+0x4c>
 800dfd8:	f10e 0e1e 	add.w	lr, lr, #30
 800dfdc:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800dfe0:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800dfe4:	f102 0c78 	add.w	ip, r2, #120	; 0x78
 800dfe8:	d1ed      	bne.n	800dfc6 <DataHist_parameters+0x46>
 800dfea:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800dfee:	881a      	ldrh	r2, [r3, #0]
 800dff0:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800dff4:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800dff8:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800dffc:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 800e000:	f04f 0c00 	mov.w	ip, #0
 800e004:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800e008:	4672      	mov	r2, lr
 800e00a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e00e:	f842 1b04 	str.w	r1, [r2], #4
 800e012:	4283      	cmp	r3, r0
 800e014:	d1f9      	bne.n	800e00a <DataHist_parameters+0x8a>
 800e016:	f10c 0c1e 	add.w	ip, ip, #30
 800e01a:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
 800e01e:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800e022:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800e026:	d1ed      	bne.n	800e004 <DataHist_parameters+0x84>
 800e028:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800e02c:	883b      	ldrh	r3, [r7, #0]
 800e02e:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800e032:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800e036:	3780      	adds	r7, #128	; 0x80
 800e038:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800e03c:	2000      	movs	r0, #0
 800e03e:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800e042:	4662      	mov	r2, ip
 800e044:	f853 1b04 	ldr.w	r1, [r3], #4
 800e048:	f842 1b04 	str.w	r1, [r2], #4
 800e04c:	42bb      	cmp	r3, r7
 800e04e:	d1f9      	bne.n	800e044 <DataHist_parameters+0xc4>
 800e050:	301e      	adds	r0, #30
 800e052:	285a      	cmp	r0, #90	; 0x5a
 800e054:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800e058:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800e05c:	d1ef      	bne.n	800e03e <DataHist_parameters+0xbe>
 800e05e:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800e062:	8833      	ldrh	r3, [r6, #0]
 800e064:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800e068:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800e06c:	3680      	adds	r6, #128	; 0x80
 800e06e:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 800e072:	2000      	movs	r0, #0
 800e074:	f1a6 0378 	sub.w	r3, r6, #120	; 0x78
 800e078:	463a      	mov	r2, r7
 800e07a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e07e:	f842 1b04 	str.w	r1, [r2], #4
 800e082:	429e      	cmp	r6, r3
 800e084:	d1f9      	bne.n	800e07a <DataHist_parameters+0xfa>
 800e086:	301e      	adds	r0, #30
 800e088:	285a      	cmp	r0, #90	; 0x5a
 800e08a:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800e08e:	f106 0678 	add.w	r6, r6, #120	; 0x78
 800e092:	d1ef      	bne.n	800e074 <DataHist_parameters+0xf4>
 800e094:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800e098:	69aa      	ldr	r2, [r5, #24]
 800e09a:	f8c3 c004 	str.w	ip, [r3, #4]
 800e09e:	782b      	ldrb	r3, [r5, #0]
 800e0a0:	f884 35e8 	strb.w	r3, [r4, #1512]	; 0x5e8
 800e0a4:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800e0a8:	619a      	str	r2, [r3, #24]
 800e0aa:	686a      	ldr	r2, [r5, #4]
 800e0ac:	605a      	str	r2, [r3, #4]
 800e0ae:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800e0b2:	68a9      	ldr	r1, [r5, #8]
 800e0b4:	6011      	str	r1, [r2, #0]
 800e0b6:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800e0ba:	68e9      	ldr	r1, [r5, #12]
 800e0bc:	6011      	str	r1, [r2, #0]
 800e0be:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800e0c2:	6929      	ldr	r1, [r5, #16]
 800e0c4:	6011      	str	r1, [r2, #0]
 800e0c6:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800e0ca:	6969      	ldr	r1, [r5, #20]
 800e0cc:	6011      	str	r1, [r2, #0]
 800e0ce:	69ea      	ldr	r2, [r5, #28]
 800e0d0:	61da      	str	r2, [r3, #28]
 800e0d2:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 800e0d6:	6a2a      	ldr	r2, [r5, #32]
 800e0d8:	601a      	str	r2, [r3, #0]
 800e0da:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800e0de:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e0e0:	601a      	str	r2, [r3, #0]
 800e0e2:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800e0e6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e0e8:	601a      	str	r2, [r3, #0]
 800e0ea:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800e0ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e0f0:	6023      	str	r3, [r4, #0]
 800e0f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0f6:	bf00      	nop

0800e0f8 <rotVect>:
 800e0f8:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800e0fc:	ed92 5a01 	vldr	s10, [r2, #4]
 800e100:	edd2 5a00 	vldr	s11, [r2]
 800e104:	ed92 6a02 	vldr	s12, [r2, #8]
 800e108:	ee07 3a90 	vmov	s15, r3
 800e10c:	f991 3000 	ldrsb.w	r3, [r1]
 800e110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e114:	ee06 3a90 	vmov	s13, r3
 800e118:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e11c:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800e120:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e124:	ee07 3a10 	vmov	s14, r3
 800e128:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800e12c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e130:	eee7 7a06 	vfma.f32	s15, s14, s12
 800e134:	edc0 7a00 	vstr	s15, [r0]
 800e138:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800e13c:	ed92 5a01 	vldr	s10, [r2, #4]
 800e140:	edd2 5a00 	vldr	s11, [r2]
 800e144:	ed92 6a02 	vldr	s12, [r2, #8]
 800e148:	ee07 3a90 	vmov	s15, r3
 800e14c:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800e150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e154:	ee06 3a90 	vmov	s13, r3
 800e158:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e15c:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800e160:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e164:	ee07 3a10 	vmov	s14, r3
 800e168:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800e16c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e170:	eee7 7a06 	vfma.f32	s15, s14, s12
 800e174:	edc0 7a01 	vstr	s15, [r0, #4]
 800e178:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800e17c:	ed92 5a01 	vldr	s10, [r2, #4]
 800e180:	edd2 5a00 	vldr	s11, [r2]
 800e184:	ed92 6a02 	vldr	s12, [r2, #8]
 800e188:	ee07 3a90 	vmov	s15, r3
 800e18c:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800e190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e194:	ee06 3a90 	vmov	s13, r3
 800e198:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e19c:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800e1a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e1a4:	ee07 3a10 	vmov	s14, r3
 800e1a8:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800e1ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e1b0:	eee7 7a06 	vfma.f32	s15, s14, s12
 800e1b4:	edc0 7a02 	vstr	s15, [r0, #8]
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop

0800e1bc <findAxis>:
 800e1bc:	f990 3000 	ldrsb.w	r3, [r0]
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d027      	beq.n	800e214 <findAxis+0x58>
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	d00e      	beq.n	800e1e6 <findAxis+0x2a>
 800e1c8:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d053      	beq.n	800e278 <findAxis+0xbc>
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	d048      	beq.n	800e266 <findAxis+0xaa>
 800e1d4:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d053      	beq.n	800e284 <findAxis+0xc8>
 800e1dc:	3301      	adds	r3, #1
 800e1de:	d104      	bne.n	800e1ea <findAxis+0x2e>
 800e1e0:	2364      	movs	r3, #100	; 0x64
 800e1e2:	700b      	strb	r3, [r1, #0]
 800e1e4:	e001      	b.n	800e1ea <findAxis+0x2e>
 800e1e6:	2377      	movs	r3, #119	; 0x77
 800e1e8:	700b      	strb	r3, [r1, #0]
 800e1ea:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d016      	beq.n	800e220 <findAxis+0x64>
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	d02e      	beq.n	800e254 <findAxis+0x98>
 800e1f6:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d039      	beq.n	800e272 <findAxis+0xb6>
 800e1fe:	3301      	adds	r3, #1
 800e200:	d034      	beq.n	800e26c <findAxis+0xb0>
 800e202:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800e206:	2b01      	cmp	r3, #1
 800e208:	d03f      	beq.n	800e28a <findAxis+0xce>
 800e20a:	3301      	adds	r3, #1
 800e20c:	d10a      	bne.n	800e224 <findAxis+0x68>
 800e20e:	2364      	movs	r3, #100	; 0x64
 800e210:	704b      	strb	r3, [r1, #1]
 800e212:	e007      	b.n	800e224 <findAxis+0x68>
 800e214:	2365      	movs	r3, #101	; 0x65
 800e216:	700b      	strb	r3, [r1, #0]
 800e218:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d1e8      	bne.n	800e1f2 <findAxis+0x36>
 800e220:	2365      	movs	r3, #101	; 0x65
 800e222:	704b      	strb	r3, [r1, #1]
 800e224:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d010      	beq.n	800e24e <findAxis+0x92>
 800e22c:	3301      	adds	r3, #1
 800e22e:	d014      	beq.n	800e25a <findAxis+0x9e>
 800e230:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800e234:	2b01      	cmp	r3, #1
 800e236:	d022      	beq.n	800e27e <findAxis+0xc2>
 800e238:	3301      	adds	r3, #1
 800e23a:	d011      	beq.n	800e260 <findAxis+0xa4>
 800e23c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800e240:	2b01      	cmp	r3, #1
 800e242:	d025      	beq.n	800e290 <findAxis+0xd4>
 800e244:	3301      	adds	r3, #1
 800e246:	bf04      	itt	eq
 800e248:	2364      	moveq	r3, #100	; 0x64
 800e24a:	708b      	strbeq	r3, [r1, #2]
 800e24c:	4770      	bx	lr
 800e24e:	2365      	movs	r3, #101	; 0x65
 800e250:	708b      	strb	r3, [r1, #2]
 800e252:	4770      	bx	lr
 800e254:	2377      	movs	r3, #119	; 0x77
 800e256:	704b      	strb	r3, [r1, #1]
 800e258:	e7e4      	b.n	800e224 <findAxis+0x68>
 800e25a:	2377      	movs	r3, #119	; 0x77
 800e25c:	708b      	strb	r3, [r1, #2]
 800e25e:	4770      	bx	lr
 800e260:	2373      	movs	r3, #115	; 0x73
 800e262:	708b      	strb	r3, [r1, #2]
 800e264:	4770      	bx	lr
 800e266:	2373      	movs	r3, #115	; 0x73
 800e268:	700b      	strb	r3, [r1, #0]
 800e26a:	e7be      	b.n	800e1ea <findAxis+0x2e>
 800e26c:	2373      	movs	r3, #115	; 0x73
 800e26e:	704b      	strb	r3, [r1, #1]
 800e270:	e7d8      	b.n	800e224 <findAxis+0x68>
 800e272:	236e      	movs	r3, #110	; 0x6e
 800e274:	704b      	strb	r3, [r1, #1]
 800e276:	e7d5      	b.n	800e224 <findAxis+0x68>
 800e278:	236e      	movs	r3, #110	; 0x6e
 800e27a:	700b      	strb	r3, [r1, #0]
 800e27c:	e7b5      	b.n	800e1ea <findAxis+0x2e>
 800e27e:	236e      	movs	r3, #110	; 0x6e
 800e280:	708b      	strb	r3, [r1, #2]
 800e282:	4770      	bx	lr
 800e284:	2375      	movs	r3, #117	; 0x75
 800e286:	700b      	strb	r3, [r1, #0]
 800e288:	e7af      	b.n	800e1ea <findAxis+0x2e>
 800e28a:	2375      	movs	r3, #117	; 0x75
 800e28c:	704b      	strb	r3, [r1, #1]
 800e28e:	e7c9      	b.n	800e224 <findAxis+0x68>
 800e290:	2375      	movs	r3, #117	; 0x75
 800e292:	708b      	strb	r3, [r1, #2]
 800e294:	4770      	bx	lr
 800e296:	bf00      	nop

0800e298 <findDirection>:
 800e298:	b5d0      	push	{r4, r6, r7, lr}
 800e29a:	ed2d 8b04 	vpush	{d8-d9}
 800e29e:	eef0 8ac0 	vabs.f32	s17, s0
 800e2a2:	eeb0 8ae0 	vabs.f32	s16, s1
 800e2a6:	eef4 8ac8 	vcmpe.f32	s17, s16
 800e2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	eeb0 9ac1 	vabs.f32	s18, s2
 800e2b4:	dd36      	ble.n	800e324 <findDirection+0x8c>
 800e2b6:	eef4 8ac9 	vcmpe.f32	s17, s18
 800e2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2be:	dd31      	ble.n	800e324 <findDirection+0x8c>
 800e2c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c8:	ee18 0a90 	vmov	r0, s17
 800e2cc:	f340 8094 	ble.w	800e3f8 <findDirection+0x160>
 800e2d0:	f7f2 f932 	bl	8000538 <__aeabi_f2d>
 800e2d4:	4606      	mov	r6, r0
 800e2d6:	ee18 0a10 	vmov	r0, s16
 800e2da:	460f      	mov	r7, r1
 800e2dc:	f7f2 f92c 	bl	8000538 <__aeabi_f2d>
 800e2e0:	a387      	add	r3, pc, #540	; (adr r3, 800e500 <findDirection+0x268>)
 800e2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e6:	f7f2 f97f 	bl	80005e8 <__aeabi_dmul>
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	4630      	mov	r0, r6
 800e2f0:	4639      	mov	r1, r7
 800e2f2:	f7f2 fc09 	bl	8000b08 <__aeabi_dcmpgt>
 800e2f6:	b188      	cbz	r0, 800e31c <findDirection+0x84>
 800e2f8:	ee19 0a10 	vmov	r0, s18
 800e2fc:	f7f2 f91c 	bl	8000538 <__aeabi_f2d>
 800e300:	a37f      	add	r3, pc, #508	; (adr r3, 800e500 <findDirection+0x268>)
 800e302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e306:	f7f2 f96f 	bl	80005e8 <__aeabi_dmul>
 800e30a:	4602      	mov	r2, r0
 800e30c:	460b      	mov	r3, r1
 800e30e:	4630      	mov	r0, r6
 800e310:	4639      	mov	r1, r7
 800e312:	f7f2 fbf9 	bl	8000b08 <__aeabi_dcmpgt>
 800e316:	2800      	cmp	r0, #0
 800e318:	bf18      	it	ne
 800e31a:	2404      	movne	r4, #4
 800e31c:	ecbd 8b04 	vpop	{d8-d9}
 800e320:	4620      	mov	r0, r4
 800e322:	bdd0      	pop	{r4, r6, r7, pc}
 800e324:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800e328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e32c:	dd32      	ble.n	800e394 <findDirection+0xfc>
 800e32e:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800e332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e336:	ee18 0a10 	vmov	r0, s16
 800e33a:	f340 8086 	ble.w	800e44a <findDirection+0x1b2>
 800e33e:	f7f2 f8fb 	bl	8000538 <__aeabi_f2d>
 800e342:	4606      	mov	r6, r0
 800e344:	ee18 0a90 	vmov	r0, s17
 800e348:	460f      	mov	r7, r1
 800e34a:	f7f2 f8f5 	bl	8000538 <__aeabi_f2d>
 800e34e:	a36c      	add	r3, pc, #432	; (adr r3, 800e500 <findDirection+0x268>)
 800e350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e354:	f7f2 f948 	bl	80005e8 <__aeabi_dmul>
 800e358:	4602      	mov	r2, r0
 800e35a:	460b      	mov	r3, r1
 800e35c:	4630      	mov	r0, r6
 800e35e:	4639      	mov	r1, r7
 800e360:	f7f2 fbd2 	bl	8000b08 <__aeabi_dcmpgt>
 800e364:	2800      	cmp	r0, #0
 800e366:	d0d9      	beq.n	800e31c <findDirection+0x84>
 800e368:	ee19 0a10 	vmov	r0, s18
 800e36c:	f7f2 f8e4 	bl	8000538 <__aeabi_f2d>
 800e370:	a363      	add	r3, pc, #396	; (adr r3, 800e500 <findDirection+0x268>)
 800e372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e376:	f7f2 f937 	bl	80005e8 <__aeabi_dmul>
 800e37a:	4602      	mov	r2, r0
 800e37c:	460b      	mov	r3, r1
 800e37e:	4630      	mov	r0, r6
 800e380:	4639      	mov	r1, r7
 800e382:	f7f2 fbc1 	bl	8000b08 <__aeabi_dcmpgt>
 800e386:	ecbd 8b04 	vpop	{d8-d9}
 800e38a:	2800      	cmp	r0, #0
 800e38c:	bf18      	it	ne
 800e38e:	2401      	movne	r4, #1
 800e390:	4620      	mov	r0, r4
 800e392:	bdd0      	pop	{r4, r6, r7, pc}
 800e394:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800e398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e39c:	ee19 0a10 	vmov	r0, s18
 800e3a0:	dd7f      	ble.n	800e4a2 <findDirection+0x20a>
 800e3a2:	f7f2 f8c9 	bl	8000538 <__aeabi_f2d>
 800e3a6:	4606      	mov	r6, r0
 800e3a8:	ee18 0a10 	vmov	r0, s16
 800e3ac:	460f      	mov	r7, r1
 800e3ae:	f7f2 f8c3 	bl	8000538 <__aeabi_f2d>
 800e3b2:	a353      	add	r3, pc, #332	; (adr r3, 800e500 <findDirection+0x268>)
 800e3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b8:	f7f2 f916 	bl	80005e8 <__aeabi_dmul>
 800e3bc:	4602      	mov	r2, r0
 800e3be:	460b      	mov	r3, r1
 800e3c0:	4630      	mov	r0, r6
 800e3c2:	4639      	mov	r1, r7
 800e3c4:	f7f2 fba0 	bl	8000b08 <__aeabi_dcmpgt>
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	d0a7      	beq.n	800e31c <findDirection+0x84>
 800e3cc:	ee18 0a90 	vmov	r0, s17
 800e3d0:	f7f2 f8b2 	bl	8000538 <__aeabi_f2d>
 800e3d4:	a34a      	add	r3, pc, #296	; (adr r3, 800e500 <findDirection+0x268>)
 800e3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3da:	f7f2 f905 	bl	80005e8 <__aeabi_dmul>
 800e3de:	4602      	mov	r2, r0
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	4630      	mov	r0, r6
 800e3e4:	4639      	mov	r1, r7
 800e3e6:	f7f2 fb8f 	bl	8000b08 <__aeabi_dcmpgt>
 800e3ea:	ecbd 8b04 	vpop	{d8-d9}
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	bf18      	it	ne
 800e3f2:	2400      	movne	r4, #0
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	bdd0      	pop	{r4, r6, r7, pc}
 800e3f8:	f7f2 f89e 	bl	8000538 <__aeabi_f2d>
 800e3fc:	4606      	mov	r6, r0
 800e3fe:	ee18 0a10 	vmov	r0, s16
 800e402:	460f      	mov	r7, r1
 800e404:	f7f2 f898 	bl	8000538 <__aeabi_f2d>
 800e408:	a33d      	add	r3, pc, #244	; (adr r3, 800e500 <findDirection+0x268>)
 800e40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40e:	f7f2 f8eb 	bl	80005e8 <__aeabi_dmul>
 800e412:	4602      	mov	r2, r0
 800e414:	460b      	mov	r3, r1
 800e416:	4630      	mov	r0, r6
 800e418:	4639      	mov	r1, r7
 800e41a:	f7f2 fb75 	bl	8000b08 <__aeabi_dcmpgt>
 800e41e:	2800      	cmp	r0, #0
 800e420:	f43f af7c 	beq.w	800e31c <findDirection+0x84>
 800e424:	ee19 0a10 	vmov	r0, s18
 800e428:	f7f2 f886 	bl	8000538 <__aeabi_f2d>
 800e42c:	a334      	add	r3, pc, #208	; (adr r3, 800e500 <findDirection+0x268>)
 800e42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e432:	f7f2 f8d9 	bl	80005e8 <__aeabi_dmul>
 800e436:	4602      	mov	r2, r0
 800e438:	460b      	mov	r3, r1
 800e43a:	4630      	mov	r0, r6
 800e43c:	4639      	mov	r1, r7
 800e43e:	f7f2 fb63 	bl	8000b08 <__aeabi_dcmpgt>
 800e442:	2800      	cmp	r0, #0
 800e444:	bf18      	it	ne
 800e446:	2405      	movne	r4, #5
 800e448:	e768      	b.n	800e31c <findDirection+0x84>
 800e44a:	f7f2 f875 	bl	8000538 <__aeabi_f2d>
 800e44e:	4606      	mov	r6, r0
 800e450:	ee18 0a90 	vmov	r0, s17
 800e454:	460f      	mov	r7, r1
 800e456:	f7f2 f86f 	bl	8000538 <__aeabi_f2d>
 800e45a:	a329      	add	r3, pc, #164	; (adr r3, 800e500 <findDirection+0x268>)
 800e45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e460:	f7f2 f8c2 	bl	80005e8 <__aeabi_dmul>
 800e464:	4602      	mov	r2, r0
 800e466:	460b      	mov	r3, r1
 800e468:	4630      	mov	r0, r6
 800e46a:	4639      	mov	r1, r7
 800e46c:	f7f2 fb4c 	bl	8000b08 <__aeabi_dcmpgt>
 800e470:	2800      	cmp	r0, #0
 800e472:	f43f af53 	beq.w	800e31c <findDirection+0x84>
 800e476:	ee19 0a10 	vmov	r0, s18
 800e47a:	f7f2 f85d 	bl	8000538 <__aeabi_f2d>
 800e47e:	a320      	add	r3, pc, #128	; (adr r3, 800e500 <findDirection+0x268>)
 800e480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e484:	f7f2 f8b0 	bl	80005e8 <__aeabi_dmul>
 800e488:	4602      	mov	r2, r0
 800e48a:	460b      	mov	r3, r1
 800e48c:	4630      	mov	r0, r6
 800e48e:	4639      	mov	r1, r7
 800e490:	f7f2 fb3a 	bl	8000b08 <__aeabi_dcmpgt>
 800e494:	ecbd 8b04 	vpop	{d8-d9}
 800e498:	2800      	cmp	r0, #0
 800e49a:	bf18      	it	ne
 800e49c:	2403      	movne	r4, #3
 800e49e:	4620      	mov	r0, r4
 800e4a0:	bdd0      	pop	{r4, r6, r7, pc}
 800e4a2:	f7f2 f849 	bl	8000538 <__aeabi_f2d>
 800e4a6:	4606      	mov	r6, r0
 800e4a8:	ee18 0a10 	vmov	r0, s16
 800e4ac:	460f      	mov	r7, r1
 800e4ae:	f7f2 f843 	bl	8000538 <__aeabi_f2d>
 800e4b2:	a313      	add	r3, pc, #76	; (adr r3, 800e500 <findDirection+0x268>)
 800e4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b8:	f7f2 f896 	bl	80005e8 <__aeabi_dmul>
 800e4bc:	4602      	mov	r2, r0
 800e4be:	460b      	mov	r3, r1
 800e4c0:	4630      	mov	r0, r6
 800e4c2:	4639      	mov	r1, r7
 800e4c4:	f7f2 fb20 	bl	8000b08 <__aeabi_dcmpgt>
 800e4c8:	2800      	cmp	r0, #0
 800e4ca:	f43f af27 	beq.w	800e31c <findDirection+0x84>
 800e4ce:	ee18 0a90 	vmov	r0, s17
 800e4d2:	f7f2 f831 	bl	8000538 <__aeabi_f2d>
 800e4d6:	a30a      	add	r3, pc, #40	; (adr r3, 800e500 <findDirection+0x268>)
 800e4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4dc:	f7f2 f884 	bl	80005e8 <__aeabi_dmul>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	4639      	mov	r1, r7
 800e4e8:	f7f2 fb0e 	bl	8000b08 <__aeabi_dcmpgt>
 800e4ec:	ecbd 8b04 	vpop	{d8-d9}
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	bf18      	it	ne
 800e4f4:	2402      	movne	r4, #2
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	bdd0      	pop	{r4, r6, r7, pc}
 800e4fa:	bf00      	nop
 800e4fc:	f3af 8000 	nop.w
 800e500:	e0000000 	.word	0xe0000000
 800e504:	3ff6b851 	.word	0x3ff6b851

0800e508 <updateOrientation>:
 800e508:	b410      	push	{r4}
 800e50a:	2300      	movs	r3, #0
 800e50c:	6003      	str	r3, [r0, #0]
 800e50e:	6043      	str	r3, [r0, #4]
 800e510:	7203      	strb	r3, [r0, #8]
 800e512:	780c      	ldrb	r4, [r1, #0]
 800e514:	784a      	ldrb	r2, [r1, #1]
 800e516:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800e51a:	2b17      	cmp	r3, #23
 800e51c:	bf98      	it	ls
 800e51e:	3420      	addls	r4, #32
 800e520:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800e524:	bf98      	it	ls
 800e526:	b2e4      	uxtbls	r4, r4
 800e528:	2b17      	cmp	r3, #23
 800e52a:	788b      	ldrb	r3, [r1, #2]
 800e52c:	bf98      	it	ls
 800e52e:	3220      	addls	r2, #32
 800e530:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800e534:	bf98      	it	ls
 800e536:	b2d2      	uxtbls	r2, r2
 800e538:	2917      	cmp	r1, #23
 800e53a:	bf98      	it	ls
 800e53c:	3320      	addls	r3, #32
 800e53e:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800e542:	bf98      	it	ls
 800e544:	b2db      	uxtbls	r3, r3
 800e546:	2c13      	cmp	r4, #19
 800e548:	d80d      	bhi.n	800e566 <updateOrientation+0x5e>
 800e54a:	e8df f004 	tbb	[pc, r4]
 800e54e:	0a36      	.short	0x0a36
 800e550:	0c0c0c0c 	.word	0x0c0c0c0c
 800e554:	0c0c0c0c 	.word	0x0c0c0c0c
 800e558:	0c0c0c39 	.word	0x0c0c0c39
 800e55c:	3f0c3c0c 	.word	0x3f0c3c0c
 800e560:	420c      	.short	0x420c
 800e562:	2101      	movs	r1, #1
 800e564:	7001      	strb	r1, [r0, #0]
 800e566:	3a64      	subs	r2, #100	; 0x64
 800e568:	2a13      	cmp	r2, #19
 800e56a:	d80d      	bhi.n	800e588 <updateOrientation+0x80>
 800e56c:	e8df f002 	tbb	[pc, r2]
 800e570:	0c0c0a34 	.word	0x0c0c0a34
 800e574:	0c0c0c0c 	.word	0x0c0c0c0c
 800e578:	0c370c0c 	.word	0x0c370c0c
 800e57c:	3a0c0c0c 	.word	0x3a0c0c0c
 800e580:	400c3d0c 	.word	0x400c3d0c
 800e584:	2201      	movs	r2, #1
 800e586:	7042      	strb	r2, [r0, #1]
 800e588:	3b64      	subs	r3, #100	; 0x64
 800e58a:	2b13      	cmp	r3, #19
 800e58c:	d80d      	bhi.n	800e5aa <updateOrientation+0xa2>
 800e58e:	e8df f003 	tbb	[pc, r3]
 800e592:	320a      	.short	0x320a
 800e594:	0c0c0c0c 	.word	0x0c0c0c0c
 800e598:	0c0c0c0c 	.word	0x0c0c0c0c
 800e59c:	0c0c0c37 	.word	0x0c0c0c37
 800e5a0:	410c3c0c 	.word	0x410c3c0c
 800e5a4:	0f0c      	.short	0x0f0c
 800e5a6:	23ff      	movs	r3, #255	; 0xff
 800e5a8:	7203      	strb	r3, [r0, #8]
 800e5aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5ae:	4770      	bx	lr
 800e5b0:	23ff      	movs	r3, #255	; 0xff
 800e5b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5b6:	7083      	strb	r3, [r0, #2]
 800e5b8:	4770      	bx	lr
 800e5ba:	21ff      	movs	r1, #255	; 0xff
 800e5bc:	7181      	strb	r1, [r0, #6]
 800e5be:	e7d2      	b.n	800e566 <updateOrientation+0x5e>
 800e5c0:	2101      	movs	r1, #1
 800e5c2:	70c1      	strb	r1, [r0, #3]
 800e5c4:	e7cf      	b.n	800e566 <updateOrientation+0x5e>
 800e5c6:	21ff      	movs	r1, #255	; 0xff
 800e5c8:	70c1      	strb	r1, [r0, #3]
 800e5ca:	e7cc      	b.n	800e566 <updateOrientation+0x5e>
 800e5cc:	2101      	movs	r1, #1
 800e5ce:	7181      	strb	r1, [r0, #6]
 800e5d0:	e7c9      	b.n	800e566 <updateOrientation+0x5e>
 800e5d2:	21ff      	movs	r1, #255	; 0xff
 800e5d4:	7001      	strb	r1, [r0, #0]
 800e5d6:	e7c6      	b.n	800e566 <updateOrientation+0x5e>
 800e5d8:	22ff      	movs	r2, #255	; 0xff
 800e5da:	71c2      	strb	r2, [r0, #7]
 800e5dc:	e7d4      	b.n	800e588 <updateOrientation+0x80>
 800e5de:	2201      	movs	r2, #1
 800e5e0:	7102      	strb	r2, [r0, #4]
 800e5e2:	e7d1      	b.n	800e588 <updateOrientation+0x80>
 800e5e4:	22ff      	movs	r2, #255	; 0xff
 800e5e6:	7102      	strb	r2, [r0, #4]
 800e5e8:	e7ce      	b.n	800e588 <updateOrientation+0x80>
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	71c2      	strb	r2, [r0, #7]
 800e5ee:	e7cb      	b.n	800e588 <updateOrientation+0x80>
 800e5f0:	22ff      	movs	r2, #255	; 0xff
 800e5f2:	7042      	strb	r2, [r0, #1]
 800e5f4:	e7c8      	b.n	800e588 <updateOrientation+0x80>
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5fc:	7083      	strb	r3, [r0, #2]
 800e5fe:	4770      	bx	lr
 800e600:	2301      	movs	r3, #1
 800e602:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e606:	7143      	strb	r3, [r0, #5]
 800e608:	4770      	bx	lr
 800e60a:	23ff      	movs	r3, #255	; 0xff
 800e60c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e610:	7143      	strb	r3, [r0, #5]
 800e612:	4770      	bx	lr
 800e614:	2301      	movs	r3, #1
 800e616:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e61a:	7203      	strb	r3, [r0, #8]
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop

0800e620 <qmult>:
 800e620:	ed91 2a03 	vldr	s4, [r1, #12]
 800e624:	ed90 3a01 	vldr	s6, [r0, #4]
 800e628:	edd0 5a02 	vldr	s11, [r0, #8]
 800e62c:	edd1 4a01 	vldr	s9, [r1, #4]
 800e630:	ed90 4a00 	vldr	s8, [r0]
 800e634:	edd1 3a00 	vldr	s7, [r1]
 800e638:	ed91 5a02 	vldr	s10, [r1, #8]
 800e63c:	edd0 2a03 	vldr	s5, [r0, #12]
 800e640:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800e644:	ee62 6a03 	vmul.f32	s13, s4, s6
 800e648:	ee22 7a25 	vmul.f32	s14, s4, s11
 800e64c:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800e650:	eea4 6a02 	vfma.f32	s12, s8, s4
 800e654:	eee4 6a05 	vfma.f32	s13, s8, s10
 800e658:	eea3 7a23 	vfma.f32	s14, s6, s7
 800e65c:	eee4 7a63 	vfms.f32	s15, s8, s7
 800e660:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800e664:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800e668:	eea5 7a22 	vfma.f32	s14, s10, s5
 800e66c:	eee2 7a22 	vfma.f32	s15, s4, s5
 800e670:	eea3 6a45 	vfms.f32	s12, s6, s10
 800e674:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800e678:	eea4 7a64 	vfms.f32	s14, s8, s9
 800e67c:	eee5 7a65 	vfms.f32	s15, s10, s11
 800e680:	ed82 6a00 	vstr	s12, [r2]
 800e684:	edc2 6a01 	vstr	s13, [r2, #4]
 800e688:	ed82 7a02 	vstr	s14, [r2, #8]
 800e68c:	edc2 7a03 	vstr	s15, [r2, #12]
 800e690:	4770      	bx	lr
 800e692:	bf00      	nop

0800e694 <MEMS_setMagIndexToOne>:
 800e694:	291f      	cmp	r1, #31
 800e696:	b430      	push	{r4, r5}
 800e698:	d920      	bls.n	800e6dc <MEMS_setMagIndexToOne+0x48>
 800e69a:	6885      	ldr	r5, [r0, #8]
 800e69c:	3920      	subs	r1, #32
 800e69e:	2401      	movs	r4, #1
 800e6a0:	fa04 f101 	lsl.w	r1, r4, r1
 800e6a4:	ea21 0105 	bic.w	r1, r1, r5
 800e6a8:	4069      	eors	r1, r5
 800e6aa:	2a1f      	cmp	r2, #31
 800e6ac:	6081      	str	r1, [r0, #8]
 800e6ae:	d91f      	bls.n	800e6f0 <MEMS_setMagIndexToOne+0x5c>
 800e6b0:	6901      	ldr	r1, [r0, #16]
 800e6b2:	f1a2 0420 	sub.w	r4, r2, #32
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	40a2      	lsls	r2, r4
 800e6ba:	ea22 0201 	bic.w	r2, r2, r1
 800e6be:	404a      	eors	r2, r1
 800e6c0:	2b1f      	cmp	r3, #31
 800e6c2:	6102      	str	r2, [r0, #16]
 800e6c4:	d91e      	bls.n	800e704 <MEMS_setMagIndexToOne+0x70>
 800e6c6:	69c2      	ldr	r2, [r0, #28]
 800e6c8:	f1a3 0120 	sub.w	r1, r3, #32
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	408b      	lsls	r3, r1
 800e6d0:	ea23 0302 	bic.w	r3, r3, r2
 800e6d4:	4053      	eors	r3, r2
 800e6d6:	bc30      	pop	{r4, r5}
 800e6d8:	61c3      	str	r3, [r0, #28]
 800e6da:	4770      	bx	lr
 800e6dc:	68c5      	ldr	r5, [r0, #12]
 800e6de:	2401      	movs	r4, #1
 800e6e0:	fa04 f101 	lsl.w	r1, r4, r1
 800e6e4:	ea21 0105 	bic.w	r1, r1, r5
 800e6e8:	4069      	eors	r1, r5
 800e6ea:	2a1f      	cmp	r2, #31
 800e6ec:	60c1      	str	r1, [r0, #12]
 800e6ee:	d8df      	bhi.n	800e6b0 <MEMS_setMagIndexToOne+0x1c>
 800e6f0:	6944      	ldr	r4, [r0, #20]
 800e6f2:	2101      	movs	r1, #1
 800e6f4:	fa01 f202 	lsl.w	r2, r1, r2
 800e6f8:	ea22 0204 	bic.w	r2, r2, r4
 800e6fc:	4062      	eors	r2, r4
 800e6fe:	2b1f      	cmp	r3, #31
 800e700:	6142      	str	r2, [r0, #20]
 800e702:	d8e0      	bhi.n	800e6c6 <MEMS_setMagIndexToOne+0x32>
 800e704:	6981      	ldr	r1, [r0, #24]
 800e706:	2201      	movs	r2, #1
 800e708:	fa02 f303 	lsl.w	r3, r2, r3
 800e70c:	ea23 0301 	bic.w	r3, r3, r1
 800e710:	404b      	eors	r3, r1
 800e712:	bc30      	pop	{r4, r5}
 800e714:	6183      	str	r3, [r0, #24]
 800e716:	4770      	bx	lr

0800e718 <getRotationMatrix>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	4605      	mov	r5, r0
 800e71c:	460c      	mov	r4, r1
 800e71e:	4610      	mov	r0, r2
 800e720:	2100      	movs	r1, #0
 800e722:	2224      	movs	r2, #36	; 0x24
 800e724:	f00b fdf0 	bl	801a308 <memset>
 800e728:	edd5 5a00 	vldr	s11, [r5]
 800e72c:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800e854 <getRotationMatrix+0x13c>
 800e730:	edc0 5a02 	vstr	s11, [r0, #8]
 800e734:	ed95 7a01 	vldr	s14, [r5, #4]
 800e738:	ed80 7a05 	vstr	s14, [r0, #20]
 800e73c:	ed95 5a02 	vldr	s10, [r5, #8]
 800e740:	ed80 5a08 	vstr	s10, [r0, #32]
 800e744:	ed94 4a02 	vldr	s8, [r4, #8]
 800e748:	edd4 3a01 	vldr	s7, [r4, #4]
 800e74c:	edd4 4a00 	vldr	s9, [r4]
 800e750:	ee67 7a44 	vnmul.f32	s15, s14, s8
 800e754:	ee65 6ae3 	vnmul.f32	s13, s11, s7
 800e758:	eee3 7a85 	vfma.f32	s15, s7, s10
 800e75c:	4603      	mov	r3, r0
 800e75e:	eee4 6a87 	vfma.f32	s13, s9, s14
 800e762:	eeb0 7ae7 	vabs.f32	s14, s15
 800e766:	eeb4 7ac3 	vcmpe.f32	s14, s6
 800e76a:	ee25 6a64 	vnmul.f32	s12, s10, s9
 800e76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e772:	eea4 6a25 	vfma.f32	s12, s8, s11
 800e776:	bfdc      	itt	le
 800e778:	eec7 5a83 	vdivle.f32	s11, s15, s6
 800e77c:	eeb0 7a43 	vmovle.f32	s14, s6
 800e780:	eeb0 5ac6 	vabs.f32	s10, s12
 800e784:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800e788:	edc0 6a06 	vstr	s13, [r0, #24]
 800e78c:	bfd4      	ite	le
 800e78e:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 800e792:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 800e796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e79a:	ed80 6a03 	vstr	s12, [r0, #12]
 800e79e:	edc0 7a00 	vstr	s15, [r0]
 800e7a2:	d447      	bmi.n	800e834 <getRotationMatrix+0x11c>
 800e7a4:	eec6 5a07 	vdiv.f32	s11, s12, s14
 800e7a8:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800e7ac:	eef0 5a66 	vmov.f32	s11, s13
 800e7b0:	edd3 6a06 	vldr	s13, [r3, #24]
 800e7b4:	eeb0 5ae6 	vabs.f32	s10, s13
 800e7b8:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800e7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7c0:	d543      	bpl.n	800e84a <getRotationMatrix+0x132>
 800e7c2:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800e7c6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800e7ca:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800e7ce:	eeb0 7a45 	vmov.f32	s14, s10
 800e7d2:	eea5 4aa4 	vfma.f32	s8, s11, s9
 800e7d6:	eef0 5a44 	vmov.f32	s11, s8
 800e7da:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800e7de:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800e7e2:	ee65 5a07 	vmul.f32	s11, s10, s14
 800e7e6:	edd3 3a08 	vldr	s7, [r3, #32]
 800e7ea:	edd3 4a02 	vldr	s9, [r3, #8]
 800e7ee:	ed93 4a05 	vldr	s8, [r3, #20]
 800e7f2:	ee83 7a25 	vdiv.f32	s14, s6, s11
 800e7f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e7fa:	ee26 6a07 	vmul.f32	s12, s12, s14
 800e7fe:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e802:	ee66 5a63 	vnmul.f32	s11, s12, s7
 800e806:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 800e80a:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 800e80e:	eea3 5aa7 	vfma.f32	s10, s7, s15
 800e812:	eee4 5a07 	vfma.f32	s11, s8, s14
 800e816:	eee6 6a24 	vfma.f32	s13, s12, s9
 800e81a:	edc3 7a00 	vstr	s15, [r3]
 800e81e:	ed83 6a03 	vstr	s12, [r3, #12]
 800e822:	ed83 7a06 	vstr	s14, [r3, #24]
 800e826:	ed83 5a04 	vstr	s10, [r3, #16]
 800e82a:	edc3 5a01 	vstr	s11, [r3, #4]
 800e82e:	edc3 6a07 	vstr	s13, [r3, #28]
 800e832:	bd38      	pop	{r3, r4, r5, pc}
 800e834:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800e838:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800e83c:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800e840:	eeb0 7a45 	vmov.f32	s14, s10
 800e844:	eee6 5aa4 	vfma.f32	s11, s13, s9
 800e848:	e7b2      	b.n	800e7b0 <getRotationMatrix+0x98>
 800e84a:	ee86 5a87 	vdiv.f32	s10, s13, s14
 800e84e:	eee5 5a05 	vfma.f32	s11, s10, s10
 800e852:	e7c2      	b.n	800e7da <getRotationMatrix+0xc2>
 800e854:	00000000 	.word	0x00000000

0800e858 <b_dcm2q>:
 800e858:	ed90 5a08 	vldr	s10, [r0, #32]
 800e85c:	edd0 7a00 	vldr	s15, [r0]
 800e860:	edd0 6a04 	vldr	s13, [r0, #16]
 800e864:	ee37 7a85 	vadd.f32	s14, s15, s10
 800e868:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800e86c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e870:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800e874:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800e878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e87c:	bfc5      	ittet	gt
 800e87e:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800e882:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800e886:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800e994 <b_dcm2q+0x13c>
 800e88a:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800e88e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800e892:	ee35 6a47 	vsub.f32	s12, s10, s14
 800e896:	ee35 7a07 	vadd.f32	s14, s10, s14
 800e89a:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800e89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a2:	bfc5      	ittet	gt
 800e8a4:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800e8a8:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800e8ac:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800e994 <b_dcm2q+0x13c>
 800e8b0:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800e8b4:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800e8b8:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800e8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c0:	dd5b      	ble.n	800e97a <b_dcm2q+0x122>
 800e8c2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800e8c6:	ee37 7a24 	vadd.f32	s14, s14, s9
 800e8ca:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800e8ce:	eef1 4ac7 	vsqrt.f32	s9, s14
 800e8d2:	ee64 4a84 	vmul.f32	s9, s9, s8
 800e8d6:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e8da:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e8de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e8e2:	edd0 6a07 	vldr	s13, [r0, #28]
 800e8e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ee:	bf85      	ittet	hi
 800e8f0:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800e8f4:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800e8f8:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800e994 <b_dcm2q+0x13c>
 800e8fc:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800e900:	edd0 7a05 	vldr	s15, [r0, #20]
 800e904:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e908:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e910:	d43c      	bmi.n	800e98c <b_dcm2q+0x134>
 800e912:	bfd8      	it	le
 800e914:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800e918:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e91c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e920:	ed81 7a00 	vstr	s14, [r1]
 800e924:	edd0 7a06 	vldr	s15, [r0, #24]
 800e928:	ed90 7a02 	vldr	s14, [r0, #8]
 800e92c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e930:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e938:	d425      	bmi.n	800e986 <b_dcm2q+0x12e>
 800e93a:	bfd8      	it	le
 800e93c:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800e940:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e944:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800e948:	edc1 5a01 	vstr	s11, [r1, #4]
 800e94c:	edd0 7a01 	vldr	s15, [r0, #4]
 800e950:	ed90 7a03 	vldr	s14, [r0, #12]
 800e954:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e958:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e960:	d40e      	bmi.n	800e980 <b_dcm2q+0x128>
 800e962:	bfd8      	it	le
 800e964:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800e968:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e96c:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e970:	edc1 4a03 	vstr	s9, [r1, #12]
 800e974:	ed81 6a02 	vstr	s12, [r1, #8]
 800e978:	4770      	bx	lr
 800e97a:	eddf 4a06 	vldr	s9, [pc, #24]	; 800e994 <b_dcm2q+0x13c>
 800e97e:	e7aa      	b.n	800e8d6 <b_dcm2q+0x7e>
 800e980:	eeb1 6a46 	vneg.f32	s12, s12
 800e984:	e7f0      	b.n	800e968 <b_dcm2q+0x110>
 800e986:	eef1 5a65 	vneg.f32	s11, s11
 800e98a:	e7d9      	b.n	800e940 <b_dcm2q+0xe8>
 800e98c:	eeb1 7a47 	vneg.f32	s14, s14
 800e990:	e7c2      	b.n	800e918 <b_dcm2q+0xc0>
 800e992:	bf00      	nop
 800e994:	00000000 	.word	0x00000000

0800e998 <q2hpr>:
 800e998:	b510      	push	{r4, lr}
 800e99a:	ed90 7a00 	vldr	s14, [r0]
 800e99e:	edd0 6a01 	vldr	s13, [r0, #4]
 800e9a2:	edd0 7a02 	vldr	s15, [r0, #8]
 800e9a6:	ed90 5a03 	vldr	s10, [r0, #12]
 800e9aa:	ed2d 8b0a 	vpush	{d8-d12}
 800e9ae:	ee27 0a27 	vmul.f32	s0, s14, s15
 800e9b2:	ee27 8a26 	vmul.f32	s16, s14, s13
 800e9b6:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800e9ba:	ee67 0a07 	vmul.f32	s1, s14, s14
 800e9be:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800e9c2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e9c6:	ee27 7a05 	vmul.f32	s14, s14, s10
 800e9ca:	ee66 6a85 	vmul.f32	s13, s13, s10
 800e9ce:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e9d2:	ee78 aa08 	vadd.f32	s21, s16, s16
 800e9d6:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800e9da:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800e9de:	ee30 ca00 	vadd.f32	s24, s0, s0
 800e9e2:	ee36 ba06 	vadd.f32	s22, s12, s12
 800e9e6:	ee77 8a07 	vadd.f32	s17, s14, s14
 800e9ea:	ee75 baa5 	vadd.f32	s23, s11, s11
 800e9ee:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800e9f2:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800e9f6:	460c      	mov	r4, r1
 800e9f8:	bb8a      	cbnz	r2, 800ea5e <q2hpr+0xc6>
 800e9fa:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800e9fe:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800ea02:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800ea06:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800ea0a:	f009 ffaf 	bl	801896c <atan2f>
 800ea0e:	eeb0 8a40 	vmov.f32	s16, s0
 800ea12:	ed84 8a00 	vstr	s16, [r4]
 800ea16:	ee38 0aab 	vadd.f32	s0, s17, s23
 800ea1a:	f009 ff75 	bl	8018908 <asinf>
 800ea1e:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800ea22:	eef0 8a40 	vmov.f32	s17, s0
 800ea26:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800ea2a:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800ea2e:	f009 ff9d 	bl	801896c <atan2f>
 800ea32:	eef1 8a68 	vneg.f32	s17, s17
 800ea36:	eeb0 9a40 	vmov.f32	s18, s0
 800ea3a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ea3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea42:	ed84 9a02 	vstr	s18, [r4, #8]
 800ea46:	edc4 8a01 	vstr	s17, [r4, #4]
 800ea4a:	d505      	bpl.n	800ea58 <q2hpr+0xc0>
 800ea4c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800eaa4 <q2hpr+0x10c>
 800ea50:	ee38 8a00 	vadd.f32	s16, s16, s0
 800ea54:	ed84 8a00 	vstr	s16, [r4]
 800ea58:	ecbd 8b0a 	vpop	{d8-d12}
 800ea5c:	bd10      	pop	{r4, pc}
 800ea5e:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800ea62:	f009 ff51 	bl	8018908 <asinf>
 800ea66:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800ea6a:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800ea6e:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800ea72:	eeb0 9a40 	vmov.f32	s18, s0
 800ea76:	ee38 0aab 	vadd.f32	s0, s17, s23
 800ea7a:	f009 ff77 	bl	801896c <atan2f>
 800ea7e:	ee3a 8a88 	vadd.f32	s16, s21, s16
 800ea82:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800ea86:	eef0 8a40 	vmov.f32	s17, s0
 800ea8a:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800ea8e:	eeb1 0a48 	vneg.f32	s0, s16
 800ea92:	f009 ff6b 	bl	801896c <atan2f>
 800ea96:	eef1 8a68 	vneg.f32	s17, s17
 800ea9a:	eeb0 8a40 	vmov.f32	s16, s0
 800ea9e:	ed84 0a00 	vstr	s0, [r4]
 800eaa2:	e7ca      	b.n	800ea3a <q2hpr+0xa2>
 800eaa4:	40c90fdb 	.word	0x40c90fdb

0800eaa8 <llEvaluate.constprop.0>:
 800eaa8:	edd2 0a00 	vldr	s1, [r2]
 800eaac:	ed90 1a00 	vldr	s2, [r0]
 800eab0:	edd0 1a04 	vldr	s3, [r0, #16]
 800eab4:	edd2 5a01 	vldr	s11, [r2, #4]
 800eab8:	ed90 6a08 	vldr	s12, [r0, #32]
 800eabc:	ed90 2a05 	vldr	s4, [r0, #20]
 800eac0:	ed92 7a02 	vldr	s14, [r2, #8]
 800eac4:	ed90 3a09 	vldr	s6, [r0, #36]	; 0x24
 800eac8:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 800eacc:	edd0 2a0c 	vldr	s5, [r0, #48]	; 0x30
 800ead0:	edd2 7a03 	vldr	s15, [r2, #12]
 800ead4:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
 800ead8:	edd0 4a0e 	vldr	s9, [r0, #56]	; 0x38
 800eadc:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 800eae0:	eec0 6a81 	vdiv.f32	s13, s1, s2
 800eae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae8:	b084      	sub	sp, #16
 800eaea:	f10d 0810 	add.w	r8, sp, #16
 800eaee:	2704      	movs	r7, #4
 800eaf0:	f101 0510 	add.w	r5, r1, #16
 800eaf4:	2f04      	cmp	r7, #4
 800eaf6:	4686      	mov	lr, r0
 800eaf8:	f04f 0c03 	mov.w	ip, #3
 800eafc:	b27b      	sxtb	r3, r7
 800eafe:	eee1 5ae6 	vfms.f32	s11, s3, s13
 800eb02:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800eb06:	ee85 6a82 	vdiv.f32	s12, s11, s4
 800eb0a:	eee6 7ae2 	vfms.f32	s15, s13, s5
 800eb0e:	eea6 7a43 	vfms.f32	s14, s12, s6
 800eb12:	edcd 6a00 	vstr	s13, [sp]
 800eb16:	eec7 6a04 	vdiv.f32	s13, s14, s8
 800eb1a:	eee6 7a63 	vfms.f32	s15, s12, s7
 800eb1e:	ed8d 6a01 	vstr	s12, [sp, #4]
 800eb22:	eee6 7ae4 	vfms.f32	s15, s13, s9
 800eb26:	edcd 6a02 	vstr	s13, [sp, #8]
 800eb2a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800eb2e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800eb32:	ed78 7a01 	vldmdb	r8!, {s15}
 800eb36:	ed65 7a01 	vstmdb	r5!, {s15}
 800eb3a:	d029      	beq.n	800eb90 <llEvaluate.constprop.0+0xe8>
 800eb3c:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800eb40:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800eb44:	4432      	add	r2, r6
 800eb46:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800eb4a:	edd2 6a00 	vldr	s13, [r2]
 800eb4e:	ed94 7a00 	vldr	s14, [r4]
 800eb52:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800eb56:	3301      	adds	r3, #1
 800eb58:	b2da      	uxtb	r2, r3
 800eb5a:	2a04      	cmp	r2, #4
 800eb5c:	b25b      	sxtb	r3, r3
 800eb5e:	edc5 7a00 	vstr	s15, [r5]
 800eb62:	d1ed      	bne.n	800eb40 <llEvaluate.constprop.0+0x98>
 800eb64:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800eb68:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800eb6c:	f01c 0fff 	tst.w	ip, #255	; 0xff
 800eb70:	ed85 7a00 	vstr	s14, [r5]
 800eb74:	d013      	beq.n	800eb9e <llEvaluate.constprop.0+0xf6>
 800eb76:	3f01      	subs	r7, #1
 800eb78:	b2ff      	uxtb	r7, r7
 800eb7a:	ed78 7a01 	vldmdb	r8!, {s15}
 800eb7e:	2f04      	cmp	r7, #4
 800eb80:	f1ae 0e14 	sub.w	lr, lr, #20
 800eb84:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eb88:	b27b      	sxtb	r3, r7
 800eb8a:	ed65 7a01 	vstmdb	r5!, {s15}
 800eb8e:	d1d5      	bne.n	800eb3c <llEvaluate.constprop.0+0x94>
 800eb90:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800eb94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800eb98:	ed85 7a00 	vstr	s14, [r5]
 800eb9c:	e7eb      	b.n	800eb76 <llEvaluate.constprop.0+0xce>
 800eb9e:	b004      	add	sp, #16
 800eba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eba4 <MEMS_updateMagBufferIndex>:
 800eba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eba8:	ed2d 8b02 	vpush	{d8}
 800ebac:	7804      	ldrb	r4, [r0, #0]
 800ebae:	7842      	ldrb	r2, [r0, #1]
 800ebb0:	4606      	mov	r6, r0
 800ebb2:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	4294      	cmp	r4, r2
 800ebba:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800ebbe:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800ebc2:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	460d      	mov	r5, r1
 800ebca:	f100 0001 	add.w	r0, r0, #1
 800ebce:	f000 8083 	beq.w	800ecd8 <MEMS_updateMagBufferIndex+0x134>
 800ebd2:	1b00      	subs	r0, r0, r4
 800ebd4:	fb90 f8f2 	sdiv	r8, r0, r2
 800ebd8:	fb02 0018 	mls	r0, r2, r8, r0
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	bfb6      	itet	lt
 800ebe0:	eb02 0800 	addlt.w	r8, r2, r0
 800ebe4:	fa0f f880 	sxthge.w	r8, r0
 800ebe8:	fa0f f888 	sxthlt.w	r8, r8
 800ebec:	b934      	cbnz	r4, 800ebfc <MEMS_updateMagBufferIndex+0x58>
 800ebee:	23ff      	movs	r3, #255	; 0xff
 800ebf0:	70b3      	strb	r3, [r6, #2]
 800ebf2:	b003      	add	sp, #12
 800ebf4:	ecbd 8b02 	vpop	{d8}
 800ebf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebfc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ec00:	2700      	movs	r7, #0
 800ec02:	ee87 8a80 	vdiv.f32	s16, s15, s0
 800ec06:	463b      	mov	r3, r7
 800ec08:	e000      	b.n	800ec0c <MEMS_updateMagBufferIndex+0x68>
 800ec0a:	7872      	ldrb	r2, [r6, #1]
 800ec0c:	4443      	add	r3, r8
 800ec0e:	fb93 f4f2 	sdiv	r4, r3, r2
 800ec12:	fb02 3314 	mls	r3, r2, r4, r3
 800ec16:	b2dc      	uxtb	r4, r3
 800ec18:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800ec1c:	3701      	adds	r7, #1
 800ec1e:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 800ec22:	fb92 f3f5 	sdiv	r3, r2, r5
 800ec26:	fb05 2313 	mls	r3, r5, r3, r2
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	bfb8      	it	lt
 800ec2e:	195b      	addlt	r3, r3, r5
 800ec30:	b21b      	sxth	r3, r3
 800ec32:	ee00 3a10 	vmov	s0, r3
 800ec36:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800ec3a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ec3e:	f009 fd6b 	bl	8018718 <roundf>
 800ec42:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800ec46:	fb92 f3f5 	sdiv	r3, r2, r5
 800ec4a:	fb05 2313 	mls	r3, r5, r3, r2
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	bfb8      	it	lt
 800ec52:	195b      	addlt	r3, r3, r5
 800ec54:	b21b      	sxth	r3, r3
 800ec56:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ec5a:	ee00 3a10 	vmov	s0, r3
 800ec5e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800ec62:	edcd 7a01 	vstr	s15, [sp, #4]
 800ec66:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ec6a:	f009 fd55 	bl	8018718 <roundf>
 800ec6e:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 800ec72:	fb92 f3f5 	sdiv	r3, r2, r5
 800ec76:	fb05 2313 	mls	r3, r5, r3, r2
 800ec7a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ec7e:	18ea      	adds	r2, r5, r3
 800ec80:	b219      	sxth	r1, r3
 800ec82:	b212      	sxth	r2, r2
 800ec84:	f89d 9004 	ldrb.w	r9, [sp, #4]
 800ec88:	edcd 7a01 	vstr	s15, [sp, #4]
 800ec8c:	ee00 1a10 	vmov	s0, r1
 800ec90:	ee07 2a90 	vmov	s15, r2
 800ec94:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800ec98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800eca2:	bfb8      	it	lt
 800eca4:	ee27 0a88 	vmullt.f32	s0, s15, s16
 800eca8:	f009 fd36 	bl	8018718 <roundf>
 800ecac:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ecb0:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800ecb4:	edcd 7a01 	vstr	s15, [sp, #4]
 800ecb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ecbc:	4622      	mov	r2, r4
 800ecbe:	4649      	mov	r1, r9
 800ecc0:	4630      	mov	r0, r6
 800ecc2:	f7ff fce7 	bl	800e694 <MEMS_setMagIndexToOne>
 800ecc6:	7832      	ldrb	r2, [r6, #0]
 800ecc8:	b2fb      	uxtb	r3, r7
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d89d      	bhi.n	800ec0a <MEMS_updateMagBufferIndex+0x66>
 800ecce:	b003      	add	sp, #12
 800ecd0:	ecbd 8b02 	vpop	{d8}
 800ecd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecd8:	fb90 f8f4 	sdiv	r8, r0, r4
 800ecdc:	fb04 0018 	mls	r0, r4, r8, r0
 800ece0:	fa0f f880 	sxth.w	r8, r0
 800ece4:	e782      	b.n	800ebec <MEMS_updateMagBufferIndex+0x48>
 800ece6:	bf00      	nop

0800ece8 <getMagStats.constprop.0>:
 800ece8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ecee:	2400      	movs	r4, #0
 800ecf0:	4607      	mov	r7, r0
 800ecf2:	6034      	str	r4, [r6, #0]
 800ecf4:	601c      	str	r4, [r3, #0]
 800ecf6:	7800      	ldrb	r0, [r0, #0]
 800ecf8:	787d      	ldrb	r5, [r7, #1]
 800ecfa:	f997 4002 	ldrsb.w	r4, [r7, #2]
 800ecfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ed02:	42a8      	cmp	r0, r5
 800ed04:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800ed08:	f000 80c0 	beq.w	800ee8c <getMagStats.constprop.0+0x1a4>
 800ed0c:	3401      	adds	r4, #1
 800ed0e:	eba4 0c00 	sub.w	ip, r4, r0
 800ed12:	fb9c f4f5 	sdiv	r4, ip, r5
 800ed16:	fb05 c414 	mls	r4, r5, r4, ip
 800ed1a:	2c00      	cmp	r4, #0
 800ed1c:	bfb8      	it	lt
 800ed1e:	1964      	addlt	r4, r4, r5
 800ed20:	b224      	sxth	r4, r4
 800ed22:	ee04 0a90 	vmov	s9, r0
 800ed26:	ed9f 5a60 	vldr	s10, [pc, #384]	; 800eea8 <getMagStats.constprop.0+0x1c0>
 800ed2a:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800ed2e:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ed32:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800ed36:	2800      	cmp	r0, #0
 800ed38:	f000 80b2 	beq.w	800eea0 <getMagStats.constprop.0+0x1b8>
 800ed3c:	3801      	subs	r0, #1
 800ed3e:	fa54 fc80 	uxtab	ip, r4, r0
 800ed42:	f8b1 9000 	ldrh.w	r9, [r1]
 800ed46:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800ed4a:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800ed4e:	ed9f 3a57 	vldr	s6, [pc, #348]	; 800eeac <getMagStats.constprop.0+0x1c4>
 800ed52:	2000      	movs	r0, #0
 800ed54:	e002      	b.n	800ed5c <getMagStats.constprop.0+0x74>
 800ed56:	ed93 3a00 	vldr	s6, [r3]
 800ed5a:	3401      	adds	r4, #1
 800ed5c:	fb94 f1f5 	sdiv	r1, r4, r5
 800ed60:	fb05 4111 	mls	r1, r5, r1, r4
 800ed64:	b2c9      	uxtb	r1, r1
 800ed66:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800ed6a:	edd2 3a00 	vldr	s7, [r2]
 800ed6e:	f8b1 a022 	ldrh.w	sl, [r1, #34]	; 0x22
 800ed72:	f8b1 b024 	ldrh.w	fp, [r1, #36]	; 0x24
 800ed76:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 800ed78:	ed92 4a04 	vldr	s8, [r2, #16]
 800ed7c:	ed92 6a08 	vldr	s12, [r2, #32]
 800ed80:	ebaa 0a09 	sub.w	sl, sl, r9
 800ed84:	ebab 0b08 	sub.w	fp, fp, r8
 800ed88:	fa0f fa8a 	sxth.w	sl, sl
 800ed8c:	ee07 aa10 	vmov	s14, sl
 800ed90:	fa0f fa8b 	sxth.w	sl, fp
 800ed94:	ee06 aa90 	vmov	s13, sl
 800ed98:	eba1 010e 	sub.w	r1, r1, lr
 800ed9c:	b209      	sxth	r1, r1
 800ed9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eda2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800eda6:	ee07 1a90 	vmov	s15, r1
 800edaa:	ee27 7a23 	vmul.f32	s14, s14, s7
 800edae:	ee66 6a84 	vmul.f32	s13, s13, s8
 800edb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edb6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800edba:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800edbe:	ee67 7a86 	vmul.f32	s15, s15, s12
 800edc2:	ee16 1a90 	vmov	r1, s13
 800edc6:	ee17 aa10 	vmov	sl, s14
 800edca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800edce:	fb11 f101 	smulbb	r1, r1, r1
 800edd2:	fa0f fa8a 	sxth.w	sl, sl
 800edd6:	fb0a 1a0a 	mla	sl, sl, sl, r1
 800edda:	ee17 1a90 	vmov	r1, s15
 800edde:	b209      	sxth	r1, r1
 800ede0:	fb01 a101 	mla	r1, r1, r1, sl
 800ede4:	ee07 1a90 	vmov	s15, r1
 800ede8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edec:	f100 0a01 	add.w	sl, r0, #1
 800edf0:	eef1 6ae7 	vsqrt.f32	s13, s15
 800edf4:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800edf8:	ee17 1a90 	vmov	r1, s15
 800edfc:	b209      	sxth	r1, r1
 800edfe:	ee07 1a10 	vmov	s14, r1
 800ee02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ee06:	ee77 7a45 	vsub.f32	s15, s14, s10
 800ee0a:	ee37 7a03 	vadd.f32	s14, s14, s6
 800ee0e:	eef0 7ae7 	vabs.f32	s15, s15
 800ee12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee16:	ed83 7a00 	vstr	s14, [r3]
 800ee1a:	ee17 1a90 	vmov	r1, s15
 800ee1e:	b209      	sxth	r1, r1
 800ee20:	fb01 fb01 	mul.w	fp, r1, r1
 800ee24:	ee07 ba90 	vmov	s15, fp
 800ee28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee2c:	ee07 1a90 	vmov	s15, r1
 800ee30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee34:	eef4 5ae7 	vcmpe.f32	s11, s15
 800ee38:	edd6 7a00 	vldr	s15, [r6]
 800ee3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee40:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ee44:	bf48      	it	mi
 800ee46:	fa5f f08a 	uxtbmi.w	r0, sl
 800ee4a:	45a4      	cmp	ip, r4
 800ee4c:	edc6 7a00 	vstr	s15, [r6]
 800ee50:	d181      	bne.n	800ed56 <getMagStats.constprop.0+0x6e>
 800ee52:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800ee56:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800eeb0 <getMagStats.constprop.0+0x1c8>
 800ee5a:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 800ee5e:	eef1 7ae6 	vsqrt.f32	s15, s13
 800ee62:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ee66:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ee6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee6e:	bfb8      	it	lt
 800ee70:	eef0 7a47 	vmovlt.f32	s15, s14
 800ee74:	edc6 7a00 	vstr	s15, [r6]
 800ee78:	edd3 7a00 	vldr	s15, [r3]
 800ee7c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ee80:	eec0 7a24 	vdiv.f32	s15, s0, s9
 800ee84:	edc3 7a00 	vstr	s15, [r3]
 800ee88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee8c:	1c65      	adds	r5, r4, #1
 800ee8e:	fb95 f4f0 	sdiv	r4, r5, r0
 800ee92:	fb00 5414 	mls	r4, r0, r4, r5
 800ee96:	ee04 0a90 	vmov	s9, r0
 800ee9a:	b224      	sxth	r4, r4
 800ee9c:	4605      	mov	r5, r0
 800ee9e:	e742      	b.n	800ed26 <getMagStats.constprop.0+0x3e>
 800eea0:	edd6 7a00 	vldr	s15, [r6]
 800eea4:	e7d5      	b.n	800ee52 <getMagStats.constprop.0+0x16a>
 800eea6:	bf00      	nop
 800eea8:	423c0000 	.word	0x423c0000
 800eeac:	00000000 	.word	0x00000000
 800eeb0:	3f59999a 	.word	0x3f59999a

0800eeb4 <MFX_emptyAttitude>:
 800eeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeb8:	ed2d 8b10 	vpush	{d8-d15}
 800eebc:	f6ad 6d34 	subw	sp, sp, #3636	; 0xe34
 800eec0:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 800eec4:	f04f 0a00 	mov.w	sl, #0
 800eec8:	4fef      	ldr	r7, [pc, #956]	; (800f288 <MFX_emptyAttitude+0x3d4>)
 800eeca:	f8c4 a008 	str.w	sl, [r4, #8]
 800eece:	e9c4 aa00 	strd	sl, sl, [r4]
 800eed2:	f837 3b04 	ldrh.w	r3, [r7], #4
 800eed6:	f8ad 36a8 	strh.w	r3, [sp, #1704]	; 0x6a8
 800eeda:	f88d a6aa 	strb.w	sl, [sp, #1706]	; 0x6aa
 800eede:	4680      	mov	r8, r0
 800eee0:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 800eee4:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 800eee8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800eeec:	0c1b      	lsrs	r3, r3, #16
 800eeee:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 800eef2:	ab27      	add	r3, sp, #156	; 0x9c
 800eef4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800eef8:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 800eefc:	ab2d      	add	r3, sp, #180	; 0xb4
 800eefe:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800ef02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ef06:	ab30      	add	r3, sp, #192	; 0xc0
 800ef08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ef0c:	ab33      	add	r3, sp, #204	; 0xcc
 800ef0e:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 800ef12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ef16:	f04f 0c00 	mov.w	ip, #0
 800ef1a:	ab36      	add	r3, sp, #216	; 0xd8
 800ef1c:	f04f 0b00 	mov.w	fp, #0
 800ef20:	e9cd bc22 	strd	fp, ip, [sp, #136]	; 0x88
 800ef24:	e9cd bc24 	strd	fp, ip, [sp, #144]	; 0x90
 800ef28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ef2c:	4628      	mov	r0, r5
 800ef2e:	2224      	movs	r2, #36	; 0x24
 800ef30:	f00b f9ea 	bl	801a308 <memset>
 800ef34:	4651      	mov	r1, sl
 800ef36:	4620      	mov	r0, r4
 800ef38:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800ef3c:	ed9f bad3 	vldr	s22, [pc, #844]	; 800f28c <MFX_emptyAttitude+0x3d8>
 800ef40:	eddf ead3 	vldr	s29, [pc, #844]	; 800f290 <MFX_emptyAttitude+0x3dc>
 800ef44:	f00b f9e0 	bl	801a308 <memset>
 800ef48:	edd5 4a00 	vldr	s9, [r5]
 800ef4c:	ed95 5a01 	vldr	s10, [r5, #4]
 800ef50:	edd5 5a02 	vldr	s11, [r5, #8]
 800ef54:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 800ef58:	edcd 4a0b 	vstr	s9, [sp, #44]	; 0x2c
 800ef5c:	ed8d 5a3d 	vstr	s10, [sp, #244]	; 0xf4
 800ef60:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 800ef64:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 800ef68:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 800ef6c:	edcd ea45 	vstr	s29, [sp, #276]	; 0x114
 800ef70:	edcd ea4f 	vstr	s29, [sp, #316]	; 0x13c
 800ef74:	edcd ea59 	vstr	s29, [sp, #356]	; 0x164
 800ef78:	ed8d ba46 	vstr	s22, [sp, #280]	; 0x118
 800ef7c:	ed8d ba47 	vstr	s22, [sp, #284]	; 0x11c
 800ef80:	ed8d ba48 	vstr	s22, [sp, #288]	; 0x120
 800ef84:	ed8d ba49 	vstr	s22, [sp, #292]	; 0x124
 800ef88:	ed8d ba4a 	vstr	s22, [sp, #296]	; 0x128
 800ef8c:	ed8d ba4b 	vstr	s22, [sp, #300]	; 0x12c
 800ef90:	ed8d ba4c 	vstr	s22, [sp, #304]	; 0x130
 800ef94:	ed8d ba4d 	vstr	s22, [sp, #308]	; 0x134
 800ef98:	ed8d ba4e 	vstr	s22, [sp, #312]	; 0x138
 800ef9c:	ed8d ba50 	vstr	s22, [sp, #320]	; 0x140
 800efa0:	ed8d ba51 	vstr	s22, [sp, #324]	; 0x144
 800efa4:	ed8d ba52 	vstr	s22, [sp, #328]	; 0x148
 800efa8:	ed8d ba53 	vstr	s22, [sp, #332]	; 0x14c
 800efac:	ed8d ba54 	vstr	s22, [sp, #336]	; 0x150
 800efb0:	ed8d ba55 	vstr	s22, [sp, #340]	; 0x154
 800efb4:	ed8d ba56 	vstr	s22, [sp, #344]	; 0x158
 800efb8:	ed8d ba57 	vstr	s22, [sp, #348]	; 0x15c
 800efbc:	ed8d ba58 	vstr	s22, [sp, #352]	; 0x160
 800efc0:	ed8d ba5a 	vstr	s22, [sp, #360]	; 0x168
 800efc4:	ed8d ba5b 	vstr	s22, [sp, #364]	; 0x16c
 800efc8:	ed8d ba5c 	vstr	s22, [sp, #368]	; 0x170
 800efcc:	ed95 6a03 	vldr	s12, [r5, #12]
 800efd0:	edd5 6a04 	vldr	s13, [r5, #16]
 800efd4:	ed95 7a05 	vldr	s14, [r5, #20]
 800efd8:	ed8d 6a3f 	vstr	s12, [sp, #252]	; 0xfc
 800efdc:	ed8d 6a08 	vstr	s12, [sp, #32]
 800efe0:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800efe4:	edcd 6a07 	vstr	s13, [sp, #28]
 800efe8:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 800efec:	ed8d 7a06 	vstr	s14, [sp, #24]
 800eff0:	ed8d ba5d 	vstr	s22, [sp, #372]	; 0x174
 800eff4:	ed8d ba5e 	vstr	s22, [sp, #376]	; 0x178
 800eff8:	ed8d ba5f 	vstr	s22, [sp, #380]	; 0x17c
 800effc:	edcd ea63 	vstr	s29, [sp, #396]	; 0x18c
 800f000:	edcd ea6d 	vstr	s29, [sp, #436]	; 0x1b4
 800f004:	edcd ea77 	vstr	s29, [sp, #476]	; 0x1dc
 800f008:	ed8d ba60 	vstr	s22, [sp, #384]	; 0x180
 800f00c:	ed8d ba61 	vstr	s22, [sp, #388]	; 0x184
 800f010:	ed8d ba62 	vstr	s22, [sp, #392]	; 0x188
 800f014:	ed8d ba64 	vstr	s22, [sp, #400]	; 0x190
 800f018:	ed8d ba65 	vstr	s22, [sp, #404]	; 0x194
 800f01c:	ed8d ba66 	vstr	s22, [sp, #408]	; 0x198
 800f020:	ed8d ba67 	vstr	s22, [sp, #412]	; 0x19c
 800f024:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 800f028:	ed8d ba69 	vstr	s22, [sp, #420]	; 0x1a4
 800f02c:	ed8d ba6a 	vstr	s22, [sp, #424]	; 0x1a8
 800f030:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 800f034:	ed8d ba6c 	vstr	s22, [sp, #432]	; 0x1b0
 800f038:	ed8d ba6e 	vstr	s22, [sp, #440]	; 0x1b8
 800f03c:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 800f040:	ed8d ba70 	vstr	s22, [sp, #448]	; 0x1c0
 800f044:	ed8d ba71 	vstr	s22, [sp, #452]	; 0x1c4
 800f048:	ed8d ba72 	vstr	s22, [sp, #456]	; 0x1c8
 800f04c:	ed8d ba73 	vstr	s22, [sp, #460]	; 0x1cc
 800f050:	edd5 7a06 	vldr	s15, [r5, #24]
 800f054:	edd5 fa07 	vldr	s31, [r5, #28]
 800f058:	ed95 fa08 	vldr	s30, [r5, #32]
 800f05c:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800f060:	edcd 7a05 	vstr	s15, [sp, #20]
 800f064:	ed8d ba74 	vstr	s22, [sp, #464]	; 0x1d0
 800f068:	ed8d ba75 	vstr	s22, [sp, #468]	; 0x1d4
 800f06c:	ed8d ba76 	vstr	s22, [sp, #472]	; 0x1d8
 800f070:	ed8d ba78 	vstr	s22, [sp, #480]	; 0x1e0
 800f074:	ed8d ba79 	vstr	s22, [sp, #484]	; 0x1e4
 800f078:	ed8d ba7a 	vstr	s22, [sp, #488]	; 0x1e8
 800f07c:	edcd ea81 	vstr	s29, [sp, #516]	; 0x204
 800f080:	edcd ea8b 	vstr	s29, [sp, #556]	; 0x22c
 800f084:	edcd fa43 	vstr	s31, [sp, #268]	; 0x10c
 800f088:	ed8d fa44 	vstr	s30, [sp, #272]	; 0x110
 800f08c:	ed8d ba7b 	vstr	s22, [sp, #492]	; 0x1ec
 800f090:	ed8d ba7c 	vstr	s22, [sp, #496]	; 0x1f0
 800f094:	ed8d ba7d 	vstr	s22, [sp, #500]	; 0x1f4
 800f098:	ed8d ba7e 	vstr	s22, [sp, #504]	; 0x1f8
 800f09c:	ed8d ba7f 	vstr	s22, [sp, #508]	; 0x1fc
 800f0a0:	ed8d ba80 	vstr	s22, [sp, #512]	; 0x200
 800f0a4:	ed8d ba82 	vstr	s22, [sp, #520]	; 0x208
 800f0a8:	ed8d ba83 	vstr	s22, [sp, #524]	; 0x20c
 800f0ac:	ed8d ba84 	vstr	s22, [sp, #528]	; 0x210
 800f0b0:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
 800f0b4:	ed8d ba86 	vstr	s22, [sp, #536]	; 0x218
 800f0b8:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
 800f0bc:	ed8d ba88 	vstr	s22, [sp, #544]	; 0x220
 800f0c0:	ed8d ba89 	vstr	s22, [sp, #548]	; 0x224
 800f0c4:	ed8d ba8a 	vstr	s22, [sp, #552]	; 0x228
 800f0c8:	ed8d ba8c 	vstr	s22, [sp, #560]	; 0x230
 800f0cc:	ed8d ba8d 	vstr	s22, [sp, #564]	; 0x234
 800f0d0:	ed8d ba8e 	vstr	s22, [sp, #568]	; 0x238
 800f0d4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f0d6:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800f0da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f0de:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f0e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	f8cc 3000 	str.w	r3, [ip]
 800f0ea:	4651      	mov	r1, sl
 800f0ec:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800f0f6:	ed8d ba8f 	vstr	s22, [sp, #572]	; 0x23c
 800f0fa:	ed8d ba90 	vstr	s22, [sp, #576]	; 0x240
 800f0fe:	ed8d ba91 	vstr	s22, [sp, #580]	; 0x244
 800f102:	ed8d ba92 	vstr	s22, [sp, #584]	; 0x248
 800f106:	f00b f8ff 	bl	801a308 <memset>
 800f10a:	4621      	mov	r1, r4
 800f10c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f110:	a898      	add	r0, sp, #608	; 0x260
 800f112:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f116:	f8ad 7258 	strh.w	r7, [sp, #600]	; 0x258
 800f11a:	f00b f8e7 	bl	801a2ec <memcpy>
 800f11e:	4651      	mov	r1, sl
 800f120:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f124:	4620      	mov	r0, r4
 800f126:	f50d 66a7 	add.w	r6, sp, #1336	; 0x538
 800f12a:	ed8d 8a97 	vstr	s16, [sp, #604]	; 0x25c
 800f12e:	f00b f8eb 	bl	801a308 <memset>
 800f132:	4621      	mov	r1, r4
 800f134:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f138:	a8f4      	add	r0, sp, #976	; 0x3d0
 800f13a:	f8ad 73c8 	strh.w	r7, [sp, #968]	; 0x3c8
 800f13e:	f00b f8d5 	bl	801a2ec <memcpy>
 800f142:	4651      	mov	r1, sl
 800f144:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f148:	4620      	mov	r0, r4
 800f14a:	ed8d 8af3 	vstr	s16, [sp, #972]	; 0x3cc
 800f14e:	f00b f8db 	bl	801a308 <memset>
 800f152:	4621      	mov	r1, r4
 800f154:	8037      	strh	r7, [r6, #0]
 800f156:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f15a:	f50d 60a8 	add.w	r0, sp, #1344	; 0x540
 800f15e:	f00b f8c5 	bl	801a2ec <memcpy>
 800f162:	4651      	mov	r1, sl
 800f164:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f168:	4620      	mov	r0, r4
 800f16a:	ed86 8a01 	vstr	s16, [r6, #4]
 800f16e:	f00b f8cb 	bl	801a308 <memset>
 800f172:	4621      	mov	r1, r4
 800f174:	802f      	strh	r7, [r5, #0]
 800f176:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f17a:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
 800f17e:	f00b f8b5 	bl	801a2ec <memcpy>
 800f182:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 800f186:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 800f18a:	2701      	movs	r7, #1
 800f18c:	9600      	str	r6, [sp, #0]
 800f18e:	9403      	str	r4, [sp, #12]
 800f190:	eddf 3a40 	vldr	s7, [pc, #256]	; 800f294 <MFX_emptyAttitude+0x3e0>
 800f194:	ed9f 4a40 	vldr	s8, [pc, #256]	; 800f298 <MFX_emptyAttitude+0x3e4>
 800f198:	ed85 8a01 	vstr	s16, [r5, #4]
 800f19c:	483f      	ldr	r0, [pc, #252]	; (800f29c <MFX_emptyAttitude+0x3e8>)
 800f19e:	4d40      	ldr	r5, [pc, #256]	; (800f2a0 <MFX_emptyAttitude+0x3ec>)
 800f1a0:	f8df e120 	ldr.w	lr, [pc, #288]	; 800f2c4 <MFX_emptyAttitude+0x410>
 800f1a4:	951c      	str	r5, [sp, #112]	; 0x70
 800f1a6:	abf2      	add	r3, sp, #968	; 0x3c8
 800f1a8:	aa96      	add	r2, sp, #600	; 0x258
 800f1aa:	a90d      	add	r1, sp, #52	; 0x34
 800f1ac:	9017      	str	r0, [sp, #92]	; 0x5c
 800f1ae:	4d3d      	ldr	r5, [pc, #244]	; (800f2a4 <MFX_emptyAttitude+0x3f0>)
 800f1b0:	edcd 3a18 	vstr	s7, [sp, #96]	; 0x60
 800f1b4:	4638      	mov	r0, r7
 800f1b6:	ae27      	add	r6, sp, #156	; 0x9c
 800f1b8:	ed8d 4a19 	vstr	s8, [sp, #100]	; 0x64
 800f1bc:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 800f1c0:	951b      	str	r5, [sp, #108]	; 0x6c
 800f1c2:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
 800f1c6:	ed8d ba1d 	vstr	s22, [sp, #116]	; 0x74
 800f1ca:	ed8d ba1e 	vstr	s22, [sp, #120]	; 0x78
 800f1ce:	ed8d ba1f 	vstr	s22, [sp, #124]	; 0x7c
 800f1d2:	ed8d ba20 	vstr	s22, [sp, #128]	; 0x80
 800f1d6:	ed8d ba21 	vstr	s22, [sp, #132]	; 0x84
 800f1da:	f7fe fed1 	bl	800df80 <DataHist_parameters>
 800f1de:	ce07      	ldmia	r6!, {r0, r1, r2}
 800f1e0:	4b31      	ldr	r3, [pc, #196]	; (800f2a8 <MFX_emptyAttitude+0x3f4>)
 800f1e2:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 800f1e6:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800f1ea:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 800f1ee:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 800f1f2:	f8c8 300c 	str.w	r3, [r8, #12]
 800f1f6:	4b2d      	ldr	r3, [pc, #180]	; (800f2ac <MFX_emptyAttitude+0x3f8>)
 800f1f8:	f8c8 3014 	str.w	r3, [r8, #20]
 800f1fc:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
 800f200:	eddf 2a2b 	vldr	s5, [pc, #172]	; 800f2b0 <MFX_emptyAttitude+0x3fc>
 800f204:	ed9f 3a2b 	vldr	s6, [pc, #172]	; 800f2b4 <MFX_emptyAttitude+0x400>
 800f208:	eddf 3a2b 	vldr	s7, [pc, #172]	; 800f2b8 <MFX_emptyAttitude+0x404>
 800f20c:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800f2bc <MFX_emptyAttitude+0x408>
 800f210:	ed9f 4a2b 	vldr	s8, [pc, #172]	; 800f2c0 <MFX_emptyAttitude+0x40c>
 800f214:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 800f218:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800f2c8 <MFX_emptyAttitude+0x414>
 800f21c:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800f2cc <MFX_emptyAttitude+0x418>
 800f220:	edc8 2a06 	vstr	s5, [r8, #24]
 800f224:	f04f 0b00 	mov.w	fp, #0
 800f228:	f04f 0c00 	mov.w	ip, #0
 800f22c:	e9c8 bc16 	strd	fp, ip, [r8, #88]	; 0x58
 800f230:	e9c8 bc18 	strd	fp, ip, [r8, #96]	; 0x60
 800f234:	e9c8 bc1a 	strd	fp, ip, [r8, #104]	; 0x68
 800f238:	ad2d      	add	r5, sp, #180	; 0xb4
 800f23a:	469b      	mov	fp, r3
 800f23c:	f8df c090 	ldr.w	ip, [pc, #144]	; 800f2d0 <MFX_emptyAttitude+0x41c>
 800f240:	ed88 3a07 	vstr	s6, [r8, #28]
 800f244:	f240 1301 	movw	r3, #257	; 0x101
 800f248:	edc8 3a08 	vstr	s7, [r8, #32]
 800f24c:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 800f250:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 800f254:	ed88 2a0b 	vstr	s4, [r8, #44]	; 0x2c
 800f258:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
 800f25c:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
 800f260:	f8a8 6070 	strh.w	r6, [r8, #112]	; 0x70
 800f264:	f888 b072 	strb.w	fp, [r8, #114]	; 0x72
 800f268:	f8c8 0080 	str.w	r0, [r8, #128]	; 0x80
 800f26c:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
 800f270:	f8c8 3000 	str.w	r3, [r8]
 800f274:	f8a8 3004 	strh.w	r3, [r8, #4]
 800f278:	ed88 8a02 	vstr	s16, [r8, #8]
 800f27c:	ed88 8a04 	vstr	s16, [r8, #16]
 800f280:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800f284:	e028      	b.n	800f2d8 <MFX_emptyAttitude+0x424>
 800f286:	bf00      	nop
 800f288:	0801abbc 	.word	0x0801abbc
 800f28c:	00000000 	.word	0x00000000
 800f290:	447a0000 	.word	0x447a0000
 800f294:	3e93ffa3 	.word	0x3e93ffa3
 800f298:	3e5cec8f 	.word	0x3e5cec8f
 800f29c:	3ea25c13 	.word	0x3ea25c13
 800f2a0:	40a00000 	.word	0x40a00000
 800f2a4:	3d57bb3d 	.word	0x3d57bb3d
 800f2a8:	01010100 	.word	0x01010100
 800f2ac:	41200000 	.word	0x41200000
 800f2b0:	3a9d4952 	.word	0x3a9d4952
 800f2b4:	3ac49ba6 	.word	0x3ac49ba6
 800f2b8:	3b03126f 	.word	0x3b03126f
 800f2bc:	402ab021 	.word	0x402ab021
 800f2c0:	3a83126f 	.word	0x3a83126f
 800f2c4:	3e006d36 	.word	0x3e006d36
 800f2c8:	3f639581 	.word	0x3f639581
 800f2cc:	3f13f7cf 	.word	0x3f13f7cf
 800f2d0:	3f2ac083 	.word	0x3f2ac083
 800f2d4:	3f4ccccd 	.word	0x3f4ccccd
 800f2d8:	cd07      	ldmia	r5!, {r0, r1, r2}
 800f2da:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 800f2de:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 800f2e2:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 800f2e6:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 800f2ea:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800f2ee:	ab33      	add	r3, sp, #204	; 0xcc
 800f2f0:	f8c8 0098 	str.w	r0, [r8, #152]	; 0x98
 800f2f4:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 800f2f8:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 800f2fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f2fe:	ab36      	add	r3, sp, #216	; 0xd8
 800f300:	f8c8 00a4 	str.w	r0, [r8, #164]	; 0xa4
 800f304:	f8c8 10a8 	str.w	r1, [r8, #168]	; 0xa8
 800f308:	f8c8 20ac 	str.w	r2, [r8, #172]	; 0xac
 800f30c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f30e:	ed1f 4a0f 	vldr	s8, [pc, #-60]	; 800f2d4 <MFX_emptyAttitude+0x420>
 800f312:	4bd6      	ldr	r3, [pc, #856]	; (800f66c <MFX_emptyAttitude+0x7b8>)
 800f314:	f8c8 00b0 	str.w	r0, [r8, #176]	; 0xb0
 800f318:	f04f 5b7c 	mov.w	fp, #1056964608	; 0x3f000000
 800f31c:	f8c8 10b4 	str.w	r1, [r8, #180]	; 0xb4
 800f320:	f8c8 20b8 	str.w	r2, [r8, #184]	; 0xb8
 800f324:	ed88 4a65 	vstr	s8, [r8, #404]	; 0x194
 800f328:	f8c8 b198 	str.w	fp, [r8, #408]	; 0x198
 800f32c:	f8c8 319c 	str.w	r3, [r8, #412]	; 0x19c
 800f330:	ed88 ba64 	vstr	s22, [r8, #400]	; 0x190
 800f334:	ed88 ba30 	vstr	s22, [r8, #192]	; 0xc0
 800f338:	ed88 ba4a 	vstr	s22, [r8, #296]	; 0x128
 800f33c:	ed88 ba31 	vstr	s22, [r8, #196]	; 0xc4
 800f340:	ed88 ba4b 	vstr	s22, [r8, #300]	; 0x12c
 800f344:	ed88 ba32 	vstr	s22, [r8, #200]	; 0xc8
 800f348:	ed88 ba4c 	vstr	s22, [r8, #304]	; 0x130
 800f34c:	ed88 ba33 	vstr	s22, [r8, #204]	; 0xcc
 800f350:	ed88 ba4d 	vstr	s22, [r8, #308]	; 0x134
 800f354:	ed88 ba34 	vstr	s22, [r8, #208]	; 0xd0
 800f358:	ed88 ba4e 	vstr	s22, [r8, #312]	; 0x138
 800f35c:	ed88 ba35 	vstr	s22, [r8, #212]	; 0xd4
 800f360:	ed88 ba4f 	vstr	s22, [r8, #316]	; 0x13c
 800f364:	ed88 ba36 	vstr	s22, [r8, #216]	; 0xd8
 800f368:	ed88 ba50 	vstr	s22, [r8, #320]	; 0x140
 800f36c:	ed88 ba37 	vstr	s22, [r8, #220]	; 0xdc
 800f370:	ed88 ba51 	vstr	s22, [r8, #324]	; 0x144
 800f374:	ed88 ba38 	vstr	s22, [r8, #224]	; 0xe0
 800f378:	ed88 ba52 	vstr	s22, [r8, #328]	; 0x148
 800f37c:	ed88 ba39 	vstr	s22, [r8, #228]	; 0xe4
 800f380:	ed88 ba53 	vstr	s22, [r8, #332]	; 0x14c
 800f384:	ed88 ba3a 	vstr	s22, [r8, #232]	; 0xe8
 800f388:	ed88 ba54 	vstr	s22, [r8, #336]	; 0x150
 800f38c:	ed88 ba3b 	vstr	s22, [r8, #236]	; 0xec
 800f390:	ed88 ba55 	vstr	s22, [r8, #340]	; 0x154
 800f394:	ed88 ba3c 	vstr	s22, [r8, #240]	; 0xf0
 800f398:	ed88 ba56 	vstr	s22, [r8, #344]	; 0x158
 800f39c:	ed88 ba3d 	vstr	s22, [r8, #244]	; 0xf4
 800f3a0:	ed88 ba57 	vstr	s22, [r8, #348]	; 0x15c
 800f3a4:	ed88 ba3e 	vstr	s22, [r8, #248]	; 0xf8
 800f3a8:	ed88 ba58 	vstr	s22, [r8, #352]	; 0x160
 800f3ac:	ed88 ba3f 	vstr	s22, [r8, #252]	; 0xfc
 800f3b0:	ed88 ba59 	vstr	s22, [r8, #356]	; 0x164
 800f3b4:	ed88 ba40 	vstr	s22, [r8, #256]	; 0x100
 800f3b8:	ed88 ba5a 	vstr	s22, [r8, #360]	; 0x168
 800f3bc:	ed88 ba41 	vstr	s22, [r8, #260]	; 0x104
 800f3c0:	ed88 ba5b 	vstr	s22, [r8, #364]	; 0x16c
 800f3c4:	ed88 ba42 	vstr	s22, [r8, #264]	; 0x108
 800f3c8:	ed88 ba5c 	vstr	s22, [r8, #368]	; 0x170
 800f3cc:	eddd 4a0b 	vldr	s9, [sp, #44]	; 0x2c
 800f3d0:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 800f3d4:	edc8 4a6c 	vstr	s9, [r8, #432]	; 0x1b0
 800f3d8:	ed88 5a6d 	vstr	s10, [r8, #436]	; 0x1b4
 800f3dc:	ed88 ba43 	vstr	s22, [r8, #268]	; 0x10c
 800f3e0:	ed88 ba5d 	vstr	s22, [r8, #372]	; 0x174
 800f3e4:	ed88 ba44 	vstr	s22, [r8, #272]	; 0x110
 800f3e8:	ed88 ba5e 	vstr	s22, [r8, #376]	; 0x178
 800f3ec:	ed88 ba45 	vstr	s22, [r8, #276]	; 0x114
 800f3f0:	ed88 ba5f 	vstr	s22, [r8, #380]	; 0x17c
 800f3f4:	ed88 ba46 	vstr	s22, [r8, #280]	; 0x118
 800f3f8:	ed88 ba60 	vstr	s22, [r8, #384]	; 0x180
 800f3fc:	ed88 ba47 	vstr	s22, [r8, #284]	; 0x11c
 800f400:	ed88 ba61 	vstr	s22, [r8, #388]	; 0x184
 800f404:	ed88 ba48 	vstr	s22, [r8, #288]	; 0x120
 800f408:	ed88 ba62 	vstr	s22, [r8, #392]	; 0x188
 800f40c:	ed88 ba49 	vstr	s22, [r8, #292]	; 0x124
 800f410:	ed88 ba63 	vstr	s22, [r8, #396]	; 0x18c
 800f414:	f888 a1a4 	strb.w	sl, [r8, #420]	; 0x1a4
 800f418:	f8c8 a1a6 	str.w	sl, [r8, #422]	; 0x1a6
 800f41c:	edc8 ea75 	vstr	s29, [r8, #468]	; 0x1d4
 800f420:	ed88 ba76 	vstr	s22, [r8, #472]	; 0x1d8
 800f424:	ed88 ba77 	vstr	s22, [r8, #476]	; 0x1dc
 800f428:	ed88 ba78 	vstr	s22, [r8, #480]	; 0x1e0
 800f42c:	ed88 ba79 	vstr	s22, [r8, #484]	; 0x1e4
 800f430:	ed88 ba7a 	vstr	s22, [r8, #488]	; 0x1e8
 800f434:	ed88 ba7b 	vstr	s22, [r8, #492]	; 0x1ec
 800f438:	ed88 ba7c 	vstr	s22, [r8, #496]	; 0x1f0
 800f43c:	ed88 ba7d 	vstr	s22, [r8, #500]	; 0x1f4
 800f440:	ed88 ba7e 	vstr	s22, [r8, #504]	; 0x1f8
 800f444:	edc8 ea7f 	vstr	s29, [r8, #508]	; 0x1fc
 800f448:	ed88 ba80 	vstr	s22, [r8, #512]	; 0x200
 800f44c:	ed88 ba81 	vstr	s22, [r8, #516]	; 0x204
 800f450:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 800f454:	ed9d 6a08 	vldr	s12, [sp, #32]
 800f458:	eddd 6a07 	vldr	s13, [sp, #28]
 800f45c:	edc8 5a6e 	vstr	s11, [r8, #440]	; 0x1b8
 800f460:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800f464:	f8c8 c1a0 	str.w	ip, [r8, #416]	; 0x1a0
 800f468:	ed88 6a6f 	vstr	s12, [r8, #444]	; 0x1bc
 800f46c:	edc8 6a70 	vstr	s13, [r8, #448]	; 0x1c0
 800f470:	ed88 ba82 	vstr	s22, [r8, #520]	; 0x208
 800f474:	ed88 ba83 	vstr	s22, [r8, #524]	; 0x20c
 800f478:	ed88 ba84 	vstr	s22, [r8, #528]	; 0x210
 800f47c:	ed88 ba85 	vstr	s22, [r8, #532]	; 0x214
 800f480:	ed88 ba86 	vstr	s22, [r8, #536]	; 0x218
 800f484:	ed88 ba87 	vstr	s22, [r8, #540]	; 0x21c
 800f488:	ed88 ba88 	vstr	s22, [r8, #544]	; 0x220
 800f48c:	edc8 ea89 	vstr	s29, [r8, #548]	; 0x224
 800f490:	ed88 ba8a 	vstr	s22, [r8, #552]	; 0x228
 800f494:	ed88 ba8b 	vstr	s22, [r8, #556]	; 0x22c
 800f498:	ed88 ba8c 	vstr	s22, [r8, #560]	; 0x230
 800f49c:	ed88 ba8d 	vstr	s22, [r8, #564]	; 0x234
 800f4a0:	ed88 ba8e 	vstr	s22, [r8, #568]	; 0x238
 800f4a4:	ed88 ba8f 	vstr	s22, [r8, #572]	; 0x23c
 800f4a8:	ed88 ba90 	vstr	s22, [r8, #576]	; 0x240
 800f4ac:	ed88 ba91 	vstr	s22, [r8, #580]	; 0x244
 800f4b0:	ed88 ba92 	vstr	s22, [r8, #584]	; 0x248
 800f4b4:	edc8 ea93 	vstr	s29, [r8, #588]	; 0x24c
 800f4b8:	ed88 ba94 	vstr	s22, [r8, #592]	; 0x250
 800f4bc:	ed88 ba95 	vstr	s22, [r8, #596]	; 0x254
 800f4c0:	ed88 ba96 	vstr	s22, [r8, #600]	; 0x258
 800f4c4:	ed88 ba97 	vstr	s22, [r8, #604]	; 0x25c
 800f4c8:	ed88 ba98 	vstr	s22, [r8, #608]	; 0x260
 800f4cc:	ed88 ba99 	vstr	s22, [r8, #612]	; 0x264
 800f4d0:	ed88 ba9a 	vstr	s22, [r8, #616]	; 0x268
 800f4d4:	ed88 ba9b 	vstr	s22, [r8, #620]	; 0x26c
 800f4d8:	ed9d 7a06 	vldr	s14, [sp, #24]
 800f4dc:	eddd 7a05 	vldr	s15, [sp, #20]
 800f4e0:	ed88 7a71 	vstr	s14, [r8, #452]	; 0x1c4
 800f4e4:	f508 7e46 	add.w	lr, r8, #792	; 0x318
 800f4e8:	f50d 6649 	add.w	r6, sp, #3216	; 0xc90
 800f4ec:	f50d 6532 	add.w	r5, sp, #2848	; 0xb20
 800f4f0:	edc8 7a72 	vstr	s15, [r8, #456]	; 0x1c8
 800f4f4:	ed88 ba9c 	vstr	s22, [r8, #624]	; 0x270
 800f4f8:	edc8 ea9d 	vstr	s29, [r8, #628]	; 0x274
 800f4fc:	ed88 ba9e 	vstr	s22, [r8, #632]	; 0x278
 800f500:	ed88 ba9f 	vstr	s22, [r8, #636]	; 0x27c
 800f504:	ed88 baa0 	vstr	s22, [r8, #640]	; 0x280
 800f508:	ed88 baa1 	vstr	s22, [r8, #644]	; 0x284
 800f50c:	ed88 baa2 	vstr	s22, [r8, #648]	; 0x288
 800f510:	ed88 baa3 	vstr	s22, [r8, #652]	; 0x28c
 800f514:	ed88 baa4 	vstr	s22, [r8, #656]	; 0x290
 800f518:	ed88 baa5 	vstr	s22, [r8, #660]	; 0x294
 800f51c:	ed88 baa6 	vstr	s22, [r8, #664]	; 0x298
 800f520:	edc8 eaa7 	vstr	s29, [r8, #668]	; 0x29c
 800f524:	ed88 baa8 	vstr	s22, [r8, #672]	; 0x2a0
 800f528:	ed88 baa9 	vstr	s22, [r8, #676]	; 0x2a4
 800f52c:	ed88 baaa 	vstr	s22, [r8, #680]	; 0x2a8
 800f530:	ed88 baab 	vstr	s22, [r8, #684]	; 0x2ac
 800f534:	ed88 baac 	vstr	s22, [r8, #688]	; 0x2b0
 800f538:	ed88 baad 	vstr	s22, [r8, #692]	; 0x2b4
 800f53c:	ed88 baae 	vstr	s22, [r8, #696]	; 0x2b8
 800f540:	ed88 baaf 	vstr	s22, [r8, #700]	; 0x2bc
 800f544:	ed88 bab0 	vstr	s22, [r8, #704]	; 0x2c0
 800f548:	edc8 eab1 	vstr	s29, [r8, #708]	; 0x2c4
 800f54c:	ed88 bab2 	vstr	s22, [r8, #712]	; 0x2c8
 800f550:	ed88 bab3 	vstr	s22, [r8, #716]	; 0x2cc
 800f554:	edc8 fa73 	vstr	s31, [r8, #460]	; 0x1cc
 800f558:	ed88 bab4 	vstr	s22, [r8, #720]	; 0x2d0
 800f55c:	ed88 bab5 	vstr	s22, [r8, #724]	; 0x2d4
 800f560:	ed88 bab6 	vstr	s22, [r8, #728]	; 0x2d8
 800f564:	ed88 bab7 	vstr	s22, [r8, #732]	; 0x2dc
 800f568:	7820      	ldrb	r0, [r4, #0]
 800f56a:	f888 71ac 	strb.w	r7, [r8, #428]	; 0x1ac
 800f56e:	f50d 6460 	add.w	r4, sp, #3584	; 0xe00
 800f572:	ed88 bab8 	vstr	s22, [r8, #736]	; 0x2e0
 800f576:	ed88 bab9 	vstr	s22, [r8, #740]	; 0x2e4
 800f57a:	ed88 baba 	vstr	s22, [r8, #744]	; 0x2e8
 800f57e:	edc8 eabb 	vstr	s29, [r8, #748]	; 0x2ec
 800f582:	ed88 babc 	vstr	s22, [r8, #752]	; 0x2f0
 800f586:	ed88 fa74 	vstr	s30, [r8, #464]	; 0x1d0
 800f58a:	ed88 babd 	vstr	s22, [r8, #756]	; 0x2f4
 800f58e:	ed88 babe 	vstr	s22, [r8, #760]	; 0x2f8
 800f592:	ed88 babf 	vstr	s22, [r8, #764]	; 0x2fc
 800f596:	ed88 bac0 	vstr	s22, [r8, #768]	; 0x300
 800f59a:	ed88 bac1 	vstr	s22, [r8, #772]	; 0x304
 800f59e:	ed88 bac2 	vstr	s22, [r8, #776]	; 0x308
 800f5a2:	edc8 eac5 	vstr	s29, [r8, #788]	; 0x314
 800f5a6:	ed88 bac3 	vstr	s22, [r8, #780]	; 0x30c
 800f5aa:	ed88 bac4 	vstr	s22, [r8, #784]	; 0x310
 800f5ae:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 800f5b2:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800f5b6:	f50d 6204 	add.w	r2, sp, #2112	; 0x840
 800f5ba:	f60d 011c 	addw	r1, sp, #2076	; 0x81c
 800f5be:	f8cd e00c 	str.w	lr, [sp, #12]
 800f5c2:	9500      	str	r5, [sp, #0]
 800f5c4:	f7fe fcdc 	bl	800df80 <DataHist_parameters>
 800f5c8:	f608 123c 	addw	r2, r8, #2364	; 0x93c
 800f5cc:	f608 1334 	addw	r3, r8, #2356	; 0x934
 800f5d0:	9205      	str	r2, [sp, #20]
 800f5d2:	f508 6b13 	add.w	fp, r8, #2352	; 0x930
 800f5d6:	ed8b ba00 	vstr	s22, [fp]
 800f5da:	f608 1154 	addw	r1, r8, #2388	; 0x954
 800f5de:	ed83 ba00 	vstr	s22, [r3]
 800f5e2:	9b05      	ldr	r3, [sp, #20]
 800f5e4:	9106      	str	r1, [sp, #24]
 800f5e6:	f608 1938 	addw	r9, r8, #2360	; 0x938
 800f5ea:	ed89 ba00 	vstr	s22, [r9]
 800f5ee:	f508 6217 	add.w	r2, r8, #2416	; 0x970
 800f5f2:	ed83 8a00 	vstr	s16, [r3]
 800f5f6:	9b06      	ldr	r3, [sp, #24]
 800f5f8:	9207      	str	r2, [sp, #28]
 800f5fa:	f508 6e14 	add.w	lr, r8, #2368	; 0x940
 800f5fe:	f608 1c5c 	addw	ip, r8, #2396	; 0x95c
 800f602:	f608 1744 	addw	r7, r8, #2372	; 0x944
 800f606:	f508 6616 	add.w	r6, r8, #2400	; 0x960
 800f60a:	f608 1548 	addw	r5, r8, #2376	; 0x948
 800f60e:	f608 1464 	addw	r4, r8, #2404	; 0x964
 800f612:	ed8e ba00 	vstr	s22, [lr]
 800f616:	ed8c ba00 	vstr	s22, [ip]
 800f61a:	ed87 ba00 	vstr	s22, [r7]
 800f61e:	ed86 ba00 	vstr	s22, [r6]
 800f622:	ed85 ba00 	vstr	s22, [r5]
 800f626:	ed84 ba00 	vstr	s22, [r4]
 800f62a:	f8c8 a94c 	str.w	sl, [r8, #2380]	; 0x94c
 800f62e:	f8a8 a950 	strh.w	sl, [r8, #2384]	; 0x950
 800f632:	ed83 ba00 	vstr	s22, [r3]
 800f636:	9b07      	ldr	r3, [sp, #28]
 800f638:	f608 1058 	addw	r0, r8, #2392	; 0x958
 800f63c:	f608 1168 	addw	r1, r8, #2408	; 0x968
 800f640:	ed80 8a00 	vstr	s16, [r0]
 800f644:	f608 126c 	addw	r2, r8, #2412	; 0x96c
 800f648:	ed81 ba00 	vstr	s22, [r1]
 800f64c:	ed83 ba00 	vstr	s22, [r3]
 800f650:	230a      	movs	r3, #10
 800f652:	ed82 ba00 	vstr	s22, [r2]
 800f656:	f888 a978 	strb.w	sl, [r8, #2424]	; 0x978
 800f65a:	f8c8 3974 	str.w	r3, [r8, #2420]	; 0x974
 800f65e:	f60d 6d34 	addw	sp, sp, #3636	; 0xe34
 800f662:	ecbd 8b10 	vpop	{d8-d15}
 800f666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f66a:	bf00      	nop
 800f66c:	3f333333 	.word	0x3f333333

0800f670 <output_update>:
 800f670:	ed90 7a00 	vldr	s14, [r0]
 800f674:	edd0 7a01 	vldr	s15, [r0, #4]
 800f678:	ed90 5a03 	vldr	s10, [r0, #12]
 800f67c:	edd0 5a02 	vldr	s11, [r0, #8]
 800f680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f684:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f688:	ee27 6a07 	vmul.f32	s12, s14, s14
 800f68c:	ee67 6a05 	vmul.f32	s13, s14, s10
 800f690:	ee36 6a24 	vadd.f32	s12, s12, s9
 800f694:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800f698:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f69c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f6a0:	ee36 6a06 	vadd.f32	s12, s12, s12
 800f6a4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f6a8:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800f6ac:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f6b0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f6b4:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800f6b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f6bc:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800f6c0:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f6c4:	460f      	mov	r7, r1
 800f6c6:	4615      	mov	r5, r2
 800f6c8:	461e      	mov	r6, r3
 800f6ca:	f1bc 0f00 	cmp.w	ip, #0
 800f6ce:	d146      	bne.n	800f75e <output_update+0xee>
 800f6d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f6d4:	eef1 6a66 	vneg.f32	s13, s13
 800f6d8:	edc3 7a01 	vstr	s15, [r3, #4]
 800f6dc:	edc3 6a00 	vstr	s13, [r3]
 800f6e0:	ed83 5a02 	vstr	s10, [r3, #8]
 800f6e4:	4662      	mov	r2, ip
 800f6e6:	4629      	mov	r1, r5
 800f6e8:	4604      	mov	r4, r0
 800f6ea:	f7ff f955 	bl	800e998 <q2hpr>
 800f6ee:	edd5 6a01 	vldr	s13, [r5, #4]
 800f6f2:	ed95 7a00 	vldr	s14, [r5]
 800f6f6:	edd5 7a02 	vldr	s15, [r5, #8]
 800f6fa:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800f80c <output_update+0x19c>
 800f6fe:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f702:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800f706:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800f70a:	ed85 7a00 	vstr	s14, [r5]
 800f70e:	edc5 6a01 	vstr	s13, [r5, #4]
 800f712:	edc5 7a02 	vstr	s15, [r5, #8]
 800f716:	ed97 7a01 	vldr	s14, [r7, #4]
 800f71a:	edd6 7a00 	vldr	s15, [r6]
 800f71e:	6822      	ldr	r2, [r4, #0]
 800f720:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f724:	edc8 7a00 	vstr	s15, [r8]
 800f728:	ed97 7a00 	vldr	s14, [r7]
 800f72c:	edd6 7a01 	vldr	s15, [r6, #4]
 800f730:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f734:	edc8 7a01 	vstr	s15, [r8, #4]
 800f738:	edd6 7a02 	vldr	s15, [r6, #8]
 800f73c:	ed97 7a02 	vldr	s14, [r7, #8]
 800f740:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f744:	edc8 7a02 	vstr	s15, [r8, #8]
 800f748:	edd4 7a02 	vldr	s15, [r4, #8]
 800f74c:	6863      	ldr	r3, [r4, #4]
 800f74e:	6023      	str	r3, [r4, #0]
 800f750:	eef1 7a67 	vneg.f32	s15, s15
 800f754:	6062      	str	r2, [r4, #4]
 800f756:	edc4 7a02 	vstr	s15, [r4, #8]
 800f75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f75e:	f1bc 0f01 	cmp.w	ip, #1
 800f762:	d015      	beq.n	800f790 <output_update+0x120>
 800f764:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800f80c <output_update+0x19c>
 800f768:	edd2 6a00 	vldr	s13, [r2]
 800f76c:	ed92 7a01 	vldr	s14, [r2, #4]
 800f770:	edd2 7a02 	vldr	s15, [r2, #8]
 800f774:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f778:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f77c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f780:	edc2 6a00 	vstr	s13, [r2]
 800f784:	ed82 7a01 	vstr	s14, [r2, #4]
 800f788:	edc2 7a02 	vstr	s15, [r2, #8]
 800f78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f790:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f794:	ee36 6a65 	vsub.f32	s12, s12, s11
 800f798:	eef1 6a66 	vneg.f32	s13, s13
 800f79c:	edc3 7a00 	vstr	s15, [r3]
 800f7a0:	ed83 6a02 	vstr	s12, [r3, #8]
 800f7a4:	edc3 6a01 	vstr	s13, [r3, #4]
 800f7a8:	4662      	mov	r2, ip
 800f7aa:	4629      	mov	r1, r5
 800f7ac:	f7ff f8f4 	bl	800e998 <q2hpr>
 800f7b0:	edd5 6a00 	vldr	s13, [r5]
 800f7b4:	ed95 7a01 	vldr	s14, [r5, #4]
 800f7b8:	edd5 7a02 	vldr	s15, [r5, #8]
 800f7bc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800f80c <output_update+0x19c>
 800f7c0:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f7c4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f7c8:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f7cc:	ed85 7a01 	vstr	s14, [r5, #4]
 800f7d0:	edc5 6a00 	vstr	s13, [r5]
 800f7d4:	edc5 7a02 	vstr	s15, [r5, #8]
 800f7d8:	ed97 7a00 	vldr	s14, [r7]
 800f7dc:	edd6 7a00 	vldr	s15, [r6]
 800f7e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f7e4:	edc8 7a00 	vstr	s15, [r8]
 800f7e8:	ed97 7a01 	vldr	s14, [r7, #4]
 800f7ec:	edd6 7a01 	vldr	s15, [r6, #4]
 800f7f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f7f4:	edc8 7a01 	vstr	s15, [r8, #4]
 800f7f8:	edd6 7a02 	vldr	s15, [r6, #8]
 800f7fc:	ed97 7a02 	vldr	s14, [r7, #8]
 800f800:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f804:	edc8 7a02 	vstr	s15, [r8, #8]
 800f808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f80c:	42652ee1 	.word	0x42652ee1

0800f810 <kalman_3gyro.constprop.0>:
 800f810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f814:	ed2d 8b10 	vpush	{d8-d15}
 800f818:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800f81c:	edd2 9a02 	vldr	s19, [r2, #8]
 800f820:	edd2 8a03 	vldr	s17, [r2, #12]
 800f824:	edd2 6a04 	vldr	s13, [r2, #16]
 800f828:	ed92 6a05 	vldr	s12, [r2, #20]
 800f82c:	6854      	ldr	r4, [r2, #4]
 800f82e:	f2ad 7dcc 	subw	sp, sp, #1996	; 0x7cc
 800f832:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800f836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f83a:	4683      	mov	fp, r0
 800f83c:	edd2 7a00 	vldr	s15, [r2]
 800f840:	48e3      	ldr	r0, [pc, #908]	; (800fbd0 <kalman_3gyro.constprop.0+0x3c0>)
 800f842:	9108      	str	r1, [sp, #32]
 800f844:	904a      	str	r0, [sp, #296]	; 0x128
 800f846:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800f84a:	460d      	mov	r5, r1
 800f84c:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
 800f850:	2100      	movs	r1, #0
 800f852:	9328      	str	r3, [sp, #160]	; 0xa0
 800f854:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800f858:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
 800f85c:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 800f860:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 800f864:	ed8d 7a7a 	vstr	s14, [sp, #488]	; 0x1e8
 800f868:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800f86c:	edcd 7a43 	vstr	s15, [sp, #268]	; 0x10c
 800f870:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800f874:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 800f878:	ed8d 6a79 	vstr	s12, [sp, #484]	; 0x1e4
 800f87c:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 800f880:	946f      	str	r4, [sp, #444]	; 0x1bc
 800f882:	9470      	str	r4, [sp, #448]	; 0x1c0
 800f884:	9471      	str	r4, [sp, #452]	; 0x1c4
 800f886:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 800f88a:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800f88e:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800f892:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800f896:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800f89a:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800f89e:	eeb0 8a60 	vmov.f32	s16, s1
 800f8a2:	ed8d 0a46 	vstr	s0, [sp, #280]	; 0x118
 800f8a6:	ed8d 0a47 	vstr	s0, [sp, #284]	; 0x11c
 800f8aa:	ed8d 1a07 	vstr	s2, [sp, #28]
 800f8ae:	f00a fd2b 	bl	801a308 <memset>
 800f8b2:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 800f8b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f8ba:	600b      	str	r3, [r1, #0]
 800f8bc:	f20d 61f4 	addw	r1, sp, #1780	; 0x6f4
 800f8c0:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800f8c4:	600b      	str	r3, [r1, #0]
 800f8c6:	f50d 61e5 	add.w	r1, sp, #1832	; 0x728
 800f8ca:	600b      	str	r3, [r1, #0]
 800f8cc:	f20d 715c 	addw	r1, sp, #1884	; 0x75c
 800f8d0:	600b      	str	r3, [r1, #0]
 800f8d2:	f50d 61f2 	add.w	r1, sp, #1936	; 0x790
 800f8d6:	600b      	str	r3, [r1, #0]
 800f8d8:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
 800f8dc:	600b      	str	r3, [r1, #0]
 800f8de:	2a00      	cmp	r2, #0
 800f8e0:	f001 82c2 	beq.w	8010e68 <kalman_3gyro.constprop.0+0x1658>
 800f8e4:	ed95 5a02 	vldr	s10, [r5, #8]
 800f8e8:	edd5 5a01 	vldr	s11, [r5, #4]
 800f8ec:	ed95 3a00 	vldr	s6, [r5]
 800f8f0:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800f8f4:	ee65 4aa7 	vmul.f32	s9, s11, s15
 800f8f8:	ee35 4a05 	vadd.f32	s8, s10, s10
 800f8fc:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800f900:	ee25 5a27 	vmul.f32	s10, s10, s15
 800f904:	ee63 7a27 	vmul.f32	s15, s6, s15
 800f908:	ee33 3a03 	vadd.f32	s6, s6, s6
 800f90c:	9b08      	ldr	r3, [sp, #32]
 800f90e:	f20d 621c 	addw	r2, sp, #1564	; 0x61c
 800f912:	ed82 4a00 	vstr	s8, [r2]
 800f916:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 800f91a:	edc2 4a00 	vstr	s9, [r2]
 800f91e:	ed93 6a05 	vldr	s12, [r3, #20]
 800f922:	edd3 6a04 	vldr	s13, [r3, #16]
 800f926:	ed93 7a03 	vldr	s14, [r3, #12]
 800f92a:	edcd 6a51 	vstr	s13, [sp, #324]	; 0x144
 800f92e:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 800f932:	ed82 5a00 	vstr	s10, [r2]
 800f936:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 800f93a:	ed82 3a00 	vstr	s6, [r2]
 800f93e:	eef1 3a46 	vneg.f32	s7, s12
 800f942:	f50d 62cf 	add.w	r2, sp, #1656	; 0x678
 800f946:	edc2 5a00 	vstr	s11, [r2]
 800f94a:	eeb1 4a66 	vneg.f32	s8, s13
 800f94e:	ee33 5aa3 	vadd.f32	s10, s7, s7
 800f952:	f20d 627c 	addw	r2, sp, #1660	; 0x67c
 800f956:	edc2 7a00 	vstr	s15, [r2]
 800f95a:	ee34 3a04 	vadd.f32	s6, s8, s8
 800f95e:	f20d 6254 	addw	r2, sp, #1620	; 0x654
 800f962:	eef1 4a47 	vneg.f32	s9, s14
 800f966:	ed82 5a00 	vstr	s10, [r2]
 800f96a:	f20d 612c 	addw	r1, sp, #1580	; 0x62c
 800f96e:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800f972:	ed81 3a00 	vstr	s6, [r1]
 800f976:	ee74 5aa4 	vadd.f32	s11, s9, s9
 800f97a:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 800f97e:	ed81 5a00 	vstr	s10, [r1]
 800f982:	ee77 7a07 	vadd.f32	s15, s14, s14
 800f986:	f50d 61d1 	add.w	r1, sp, #1672	; 0x688
 800f98a:	edc1 5a00 	vstr	s11, [r1]
 800f98e:	f20d 615c 	addw	r1, sp, #1628	; 0x65c
 800f992:	edc1 7a00 	vstr	s15, [r1]
 800f996:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
 800f99a:	2300      	movs	r3, #0
 800f99c:	600b      	str	r3, [r1, #0]
 800f99e:	f20d 614c 	addw	r1, sp, #1612	; 0x64c
 800f9a2:	ee76 2a06 	vadd.f32	s5, s12, s12
 800f9a6:	600b      	str	r3, [r1, #0]
 800f9a8:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 800f9ac:	f50d 62c5 	add.w	r2, sp, #1576	; 0x628
 800f9b0:	600b      	str	r3, [r1, #0]
 800f9b2:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 800f9b6:	edc2 2a00 	vstr	s5, [r2]
 800f9ba:	600b      	str	r3, [r1, #0]
 800f9bc:	f50d 61cb 	add.w	r1, sp, #1624	; 0x658
 800f9c0:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800f9c4:	600b      	str	r3, [r1, #0]
 800f9c6:	f20d 618c 	addw	r1, sp, #1676	; 0x68c
 800f9ca:	a87b      	add	r0, sp, #492	; 0x1ec
 800f9cc:	600b      	str	r3, [r1, #0]
 800f9ce:	2230      	movs	r2, #48	; 0x30
 800f9d0:	2100      	movs	r1, #0
 800f9d2:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800f9d6:	934b      	str	r3, [sp, #300]	; 0x12c
 800f9d8:	934f      	str	r3, [sp, #316]	; 0x13c
 800f9da:	9353      	str	r3, [sp, #332]	; 0x14c
 800f9dc:	edcd 3a4e 	vstr	s7, [sp, #312]	; 0x138
 800f9e0:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 800f9e4:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800f9e8:	edcd 4a52 	vstr	s9, [sp, #328]	; 0x148
 800f9ec:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 800f9f0:	942c      	str	r4, [sp, #176]	; 0xb0
 800f9f2:	f00a fc89 	bl	801a308 <memset>
 800f9f6:	eddb 6a06 	vldr	s13, [fp, #24]
 800f9fa:	ed9b 7a07 	vldr	s14, [fp, #28]
 800f9fe:	eddb 7a08 	vldr	s15, [fp, #32]
 800fa02:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 800fa06:	ee68 6a26 	vmul.f32	s13, s16, s13
 800fa0a:	ee28 7a07 	vmul.f32	s14, s16, s14
 800fa0e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800fa12:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800fa16:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800fa1a:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	f043 84a8 	bne.w	8013374 <kalman_3gyro.constprop.0+0x3b64>
 800fa24:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	f043 81e7 	bne.w	8012dfc <kalman_3gyro.constprop.0+0x35ec>
 800fa2e:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 800fa32:	9304      	str	r3, [sp, #16]
 800fa34:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 800fa38:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800fa3c:	9310      	str	r3, [sp, #64]	; 0x40
 800fa3e:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800fa42:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800fa46:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 800fa4a:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa4c:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 800fa50:	edd0 7a00 	vldr	s15, [r0]
 800fa54:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 800fa58:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 800fa5c:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 800fa60:	ed93 6a00 	vldr	s12, [r3]
 800fa64:	ed91 7a00 	vldr	s14, [r1]
 800fa68:	edd2 6a00 	vldr	s13, [r2]
 800fa6c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800fa70:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fa74:	2300      	movs	r3, #0
 800fa76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa7a:	ed8d 7a37 	vstr	s14, [sp, #220]	; 0xdc
 800fa7e:	edcd 6a38 	vstr	s13, [sp, #224]	; 0xe0
 800fa82:	ed8d 6a39 	vstr	s12, [sp, #228]	; 0xe4
 800fa86:	933a      	str	r3, [sp, #232]	; 0xe8
 800fa88:	933b      	str	r3, [sp, #236]	; 0xec
 800fa8a:	933c      	str	r3, [sp, #240]	; 0xf0
 800fa8c:	933d      	str	r3, [sp, #244]	; 0xf4
 800fa8e:	d14e      	bne.n	800fb2e <kalman_3gyro.constprop.0+0x31e>
 800fa90:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fa94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa98:	d149      	bne.n	800fb2e <kalman_3gyro.constprop.0+0x31e>
 800fa9a:	eef5 6a40 	vcmp.f32	s13, #0.0
 800fa9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faa2:	d144      	bne.n	800fb2e <kalman_3gyro.constprop.0+0x31e>
 800faa4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800faa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faac:	d13f      	bne.n	800fb2e <kalman_3gyro.constprop.0+0x31e>
 800faae:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800fab0:	9336      	str	r3, [sp, #216]	; 0xd8
 800fab2:	7802      	ldrb	r2, [r0, #0]
 800fab4:	9337      	str	r3, [sp, #220]	; 0xdc
 800fab6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800faba:	9338      	str	r3, [sp, #224]	; 0xe0
 800fabc:	2300      	movs	r3, #0
 800fabe:	ed90 7a03 	vldr	s14, [r0, #12]
 800fac2:	edd0 6a01 	vldr	s13, [r0, #4]
 800fac6:	edd0 7a02 	vldr	s15, [r0, #8]
 800faca:	9139      	str	r1, [sp, #228]	; 0xe4
 800facc:	f88b 31ac 	strb.w	r3, [fp, #428]	; 0x1ac
 800fad0:	2a00      	cmp	r2, #0
 800fad2:	f003 8568 	beq.w	80135a6 <kalman_3gyro.constprop.0+0x3d96>
 800fad6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fada:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800fade:	eee7 7a07 	vfma.f32	s15, s14, s14
 800fae2:	eef1 6ae7 	vsqrt.f32	s13, s15
 800fae6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800faea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800faee:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 800faf2:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 800faf6:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800fafa:	2100      	movs	r1, #0
 800fafc:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 800fb00:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 800fb04:	f00a fc00 	bl	801a308 <memset>
 800fb08:	4b32      	ldr	r3, [pc, #200]	; (800fbd4 <kalman_3gyro.constprop.0+0x3c4>)
 800fb0a:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 800fb0e:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 800fb12:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 800fb16:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 800fb1a:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 800fb1e:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 800fb22:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 800fb26:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 800fb2a:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 800fb2e:	9b08      	ldr	r3, [sp, #32]
 800fb30:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800fbd8 <kalman_3gyro.constprop.0+0x3c8>
 800fb34:	ed93 7a01 	vldr	s14, [r3, #4]
 800fb38:	edd3 5a00 	vldr	s11, [r3]
 800fb3c:	edd3 7a02 	vldr	s15, [r3, #8]
 800fb40:	ee67 6a07 	vmul.f32	s13, s14, s14
 800fb44:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800fb48:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800fb4c:	eef4 6ac6 	vcmpe.f32	s13, s12
 800fb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb54:	f101 8127 	bmi.w	8010da6 <kalman_3gyro.constprop.0+0x1596>
 800fb58:	eeb1 9ae6 	vsqrt.f32	s18, s13
 800fb5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb60:	ee79 6a66 	vsub.f32	s13, s18, s13
 800fb64:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 800fb68:	eef0 6ae6 	vabs.f32	s13, s13
 800fb6c:	ee76 aaea 	vsub.f32	s21, s13, s21
 800fb70:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800fb74:	ed93 5a04 	vldr	s10, [r3, #16]
 800fb78:	ed93 3a03 	vldr	s6, [r3, #12]
 800fb7c:	edd3 1a05 	vldr	s3, [r3, #20]
 800fb80:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800fbd8 <kalman_3gyro.constprop.0+0x3c8>
 800fb84:	9b04      	ldr	r3, [sp, #16]
 800fb86:	ed95 ca00 	vldr	s24, [r5]
 800fb8a:	ed93 ba00 	vldr	s22, [r3]
 800fb8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb92:	ee86 2a89 	vdiv.f32	s4, s13, s18
 800fb96:	f20b 43bc 	addw	r3, fp, #1212	; 0x4bc
 800fb9a:	461e      	mov	r6, r3
 800fb9c:	f20b 652c 	addw	r5, fp, #1580	; 0x62c
 800fba0:	9502      	str	r5, [sp, #8]
 800fba2:	f50b 619d 	add.w	r1, fp, #1256	; 0x4e8
 800fba6:	f20b 4aec 	addw	sl, fp, #1260	; 0x4ec
 800fbaa:	9327      	str	r3, [sp, #156]	; 0x9c
 800fbac:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 800fbb0:	f50b 639c 	add.w	r3, fp, #1248	; 0x4e0
 800fbb4:	f20b 44c4 	addw	r4, fp, #1220	; 0x4c4
 800fbb8:	f20b 40dc 	addw	r0, fp, #1244	; 0x4dc
 800fbbc:	f50b 6299 	add.w	r2, fp, #1224	; 0x4c8
 800fbc0:	9501      	str	r5, [sp, #4]
 800fbc2:	ee65 6a05 	vmul.f32	s13, s10, s10
 800fbc6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800fbca:	eee3 6a03 	vfma.f32	s13, s6, s6
 800fbce:	e009      	b.n	800fbe4 <kalman_3gyro.constprop.0+0x3d4>
 800fbd0:	3a9d4952 	.word	0x3a9d4952
 800fbd4:	40a00000 	.word	0x40a00000
 800fbd8:	3c23d70a 	.word	0x3c23d70a
 800fbdc:	3dcccccd 	.word	0x3dcccccd
 800fbe0:	4b000000 	.word	0x4b000000
 800fbe4:	f20b 4ccc 	addw	ip, fp, #1228	; 0x4cc
 800fbe8:	f20b 45e4 	addw	r5, fp, #1252	; 0x4e4
 800fbec:	ee25 8a82 	vmul.f32	s16, s11, s4
 800fbf0:	eee1 6aa1 	vfma.f32	s13, s3, s3
 800fbf4:	950c      	str	r5, [sp, #48]	; 0x30
 800fbf6:	f50b 69c7 	add.w	r9, fp, #1592	; 0x638
 800fbfa:	ee67 fa02 	vmul.f32	s31, s14, s4
 800fbfe:	eef4 6ac6 	vcmpe.f32	s13, s12
 800fc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc06:	bf58      	it	pl
 800fc08:	eeb1 aae6 	vsqrtpl.f32	s20, s13
 800fc0c:	f20b 6e5c 	addw	lr, fp, #1628	; 0x65c
 800fc10:	f20b 6534 	addw	r5, fp, #1588	; 0x634
 800fc14:	bf48      	it	mi
 800fc16:	ed1f aa0f 	vldrmi	s20, [pc, #-60]	; 800fbdc <kalman_3gyro.constprop.0+0x3cc>
 800fc1a:	ed96 6a00 	vldr	s12, [r6]
 800fc1e:	edda 4a00 	vldr	s9, [sl]
 800fc22:	ed93 fa00 	vldr	s30, [r3]
 800fc26:	ed90 ea00 	vldr	s28, [r0]
 800fc2a:	edd4 3a00 	vldr	s7, [r4]
 800fc2e:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 800fc32:	eec4 6a0a 	vdiv.f32	s13, s8, s20
 800fc36:	f20b 76a4 	addw	r6, fp, #1956	; 0x7a4
 800fc3a:	9617      	str	r6, [sp, #92]	; 0x5c
 800fc3c:	f20b 76bc 	addw	r6, fp, #1980	; 0x7bc
 800fc40:	961a      	str	r6, [sp, #104]	; 0x68
 800fc42:	f20b 769c 	addw	r6, fp, #1948	; 0x79c
 800fc46:	9611      	str	r6, [sp, #68]	; 0x44
 800fc48:	f50b 66f5 	add.w	r6, fp, #1960	; 0x7a8
 800fc4c:	9618      	str	r6, [sp, #96]	; 0x60
 800fc4e:	9e02      	ldr	r6, [sp, #8]
 800fc50:	f50b 63c6 	add.w	r3, fp, #1584	; 0x630
 800fc54:	9303      	str	r3, [sp, #12]
 800fc56:	f20b 604c 	addw	r0, fp, #1612	; 0x64c
 800fc5a:	ee27 2a82 	vmul.f32	s4, s15, s4
 800fc5e:	ee23 3a26 	vmul.f32	s6, s6, s13
 800fc62:	ee25 5a26 	vmul.f32	s10, s10, s13
 800fc66:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800fc6a:	edd1 6a00 	vldr	s13, [r1]
 800fc6e:	edcd fa2e 	vstr	s31, [sp, #184]	; 0xb8
 800fc72:	ed8d 3a30 	vstr	s6, [sp, #192]	; 0xc0
 800fc76:	ed8d 5a31 	vstr	s10, [sp, #196]	; 0xc4
 800fc7a:	edcd 6a05 	vstr	s13, [sp, #20]
 800fc7e:	ed8d 6a06 	vstr	s12, [sp, #24]
 800fc82:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800fc86:	ed92 6a00 	vldr	s12, [r2]
 800fc8a:	ed8d 2a2f 	vstr	s4, [sp, #188]	; 0xbc
 800fc8e:	edcd 1a32 	vstr	s3, [sp, #200]	; 0xc8
 800fc92:	edd6 2a00 	vldr	s5, [r6]
 800fc96:	eddc 4a00 	vldr	s9, [ip]
 800fc9a:	9e01      	ldr	r6, [sp, #4]
 800fc9c:	edd0 ca00 	vldr	s25, [r0]
 800fca0:	ed96 1a00 	vldr	s2, [r6]
 800fca4:	9803      	ldr	r0, [sp, #12]
 800fca6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fca8:	edcd 4a0a 	vstr	s9, [sp, #40]	; 0x28
 800fcac:	f50b 6c9e 	add.w	ip, fp, #1264	; 0x4f0
 800fcb0:	eddc 0a00 	vldr	s1, [ip]
 800fcb4:	ed96 da00 	vldr	s26, [r6]
 800fcb8:	edd0 4a00 	vldr	s9, [r0]
 800fcbc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fcbe:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 800fcc2:	f50b 6cf8 	add.w	ip, fp, #1984	; 0x7c0
 800fcc6:	eec4 da0c 	vdiv.f32	s27, s8, s24
 800fcca:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800fcce:	f20b 7ccc 	addw	ip, fp, #1996	; 0x7cc
 800fcd2:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800fcd6:	f50b 6cf4 	add.w	ip, fp, #1952	; 0x7a0
 800fcda:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800fcde:	f20b 7cac 	addw	ip, fp, #1964	; 0x7ac
 800fce2:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800fce6:	f50b 6cf9 	add.w	ip, fp, #1992	; 0x7c8
 800fcea:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 800fcee:	f20b 7cc4 	addw	ip, fp, #1988	; 0x7c4
 800fcf2:	f20b 6354 	addw	r3, fp, #1620	; 0x654
 800fcf6:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800fcfa:	f50b 64cb 	add.w	r4, fp, #1624	; 0x658
 800fcfe:	edd6 4a00 	vldr	s9, [r6]
 800fd02:	edd9 6a00 	vldr	s13, [r9]
 800fd06:	edde ba00 	vldr	s23, [lr]
 800fd0a:	ed95 4a00 	vldr	s8, [r5]
 800fd0e:	ed94 0a00 	vldr	s0, [r4]
 800fd12:	edcd 2a14 	vstr	s5, [sp, #80]	; 0x50
 800fd16:	f50b 6cfa 	add.w	ip, fp, #2000	; 0x7d0
 800fd1a:	f20b 613c 	addw	r1, fp, #1596	; 0x63c
 800fd1e:	f50b 62cc 	add.w	r2, fp, #1632	; 0x660
 800fd22:	f50b 69ca 	add.w	r9, fp, #1616	; 0x650
 800fd26:	edd9 ea00 	vldr	s29, [r9]
 800fd2a:	edd1 2a00 	vldr	s5, [r1]
 800fd2e:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 800fd32:	edcd ca0c 	vstr	s25, [sp, #48]	; 0x30
 800fd36:	ed92 1a00 	vldr	s2, [r2]
 800fd3a:	edd3 ca00 	vldr	s25, [r3]
 800fd3e:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800fd42:	edcd 4a24 	vstr	s9, [sp, #144]	; 0x90
 800fd46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd48:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800fd4a:	edd3 4a00 	vldr	s9, [r3]
 800fd4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd50:	edcd 4a23 	vstr	s9, [sp, #140]	; 0x8c
 800fd54:	ee25 5a2f 	vmul.f32	s10, s10, s31
 800fd58:	edd3 fa00 	vldr	s31, [r3]
 800fd5c:	eef0 4a6f 	vmov.f32	s9, s31
 800fd60:	edd6 fa00 	vldr	s31, [r6]
 800fd64:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800fd66:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 800fd6a:	eea3 5a08 	vfma.f32	s10, s6, s16
 800fd6e:	ed96 3a00 	vldr	s6, [r6]
 800fd72:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800fd74:	ed8d 3a26 	vstr	s6, [sp, #152]	; 0x98
 800fd78:	ee25 8aad 	vmul.f32	s16, s11, s27
 800fd7c:	eddd 5a06 	vldr	s11, [sp, #24]
 800fd80:	edd6 fa00 	vldr	s31, [r6]
 800fd84:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800fd86:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 800fd8a:	ee95 6a83 	vfnms.f32	s12, s11, s6
 800fd8e:	eddd 5a14 	vldr	s11, [sp, #80]	; 0x50
 800fd92:	eed5 6a83 	vfnms.f32	s13, s11, s6
 800fd96:	eddd 5a26 	vldr	s11, [sp, #152]	; 0x98
 800fd9a:	eed5 fa83 	vfnms.f32	s31, s11, s6
 800fd9e:	edd8 5a00 	vldr	s11, [r8]
 800fda2:	eed5 3a83 	vfnms.f32	s7, s11, s6
 800fda6:	eef0 5a44 	vmov.f32	s11, s8
 800fdaa:	ed97 4a00 	vldr	s8, [r7]
 800fdae:	ee76 6aae 	vadd.f32	s13, s13, s29
 800fdb2:	eed4 5a03 	vfnms.f32	s11, s8, s6
 800fdb6:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 800fdba:	ed9d 4a24 	vldr	s8, [sp, #144]	; 0x90
 800fdbe:	eede 2a83 	vfnms.f32	s5, s29, s6
 800fdc2:	ee94 4a83 	vfnms.f32	s8, s9, s6
 800fdc6:	ee73 3a8e 	vadd.f32	s7, s7, s28
 800fdca:	eddd 4a0a 	vldr	s9, [sp, #40]	; 0x28
 800fdce:	ed9d ea0b 	vldr	s28, [sp, #44]	; 0x2c
 800fdd2:	eede 4a03 	vfnms.f32	s9, s28, s6
 800fdd6:	ed9d ea0c 	vldr	s28, [sp, #48]	; 0x30
 800fdda:	ee72 2aac 	vadd.f32	s5, s5, s25
 800fdde:	ee75 5a8e 	vadd.f32	s11, s11, s28
 800fde2:	edd6 ca00 	vldr	s25, [r6]
 800fde6:	ed9d ea25 	vldr	s28, [sp, #148]	; 0x94
 800fdea:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800fdec:	ee34 4a0e 	vadd.f32	s8, s8, s28
 800fdf0:	ed96 ea00 	vldr	s28, [r6]
 800fdf4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800fdf6:	ee74 4a8d 	vadd.f32	s9, s9, s26
 800fdfa:	ed96 da00 	vldr	s26, [r6]
 800fdfe:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800fe00:	ee7f faac 	vadd.f32	s31, s31, s25
 800fe04:	edd6 ca00 	vldr	s25, [r6]
 800fe08:	eedd ca03 	vfnms.f32	s25, s26, s6
 800fe0c:	ed9d da09 	vldr	s26, [sp, #36]	; 0x24
 800fe10:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800fe12:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800fe16:	eeeb 6a83 	vfma.f32	s13, s23, s6
 800fe1a:	eee0 5a03 	vfma.f32	s11, s0, s6
 800fe1e:	eddd ba05 	vldr	s23, [sp, #20]
 800fe22:	ed96 0a00 	vldr	s0, [r6]
 800fe26:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800fe28:	ee36 6a0f 	vadd.f32	s12, s12, s30
 800fe2c:	eeee fa03 	vfma.f32	s31, s28, s6
 800fe30:	eead 6a03 	vfma.f32	s12, s26, s6
 800fe34:	eeeb 3a83 	vfma.f32	s7, s23, s6
 800fe38:	eea0 4a03 	vfma.f32	s8, s0, s6
 800fe3c:	eddd ba23 	vldr	s23, [sp, #140]	; 0x8c
 800fe40:	ed1f 0a9a 	vldr	s0, [pc, #-616]	; 800fbdc <kalman_3gyro.constprop.0+0x3cc>
 800fe44:	eee1 2a03 	vfma.f32	s5, s2, s6
 800fe48:	ee2c ca00 	vmul.f32	s24, s24, s0
 800fe4c:	ee6b ba80 	vmul.f32	s23, s23, s0
 800fe50:	ed96 1a00 	vldr	s2, [r6]
 800fe54:	ee2b 0a00 	vmul.f32	s0, s22, s0
 800fe58:	eee0 4a83 	vfma.f32	s9, s1, s6
 800fe5c:	ee26 6a0c 	vmul.f32	s12, s12, s24
 800fe60:	ee6f faab 	vmul.f32	s31, s31, s23
 800fe64:	ee3c 1a81 	vadd.f32	s2, s25, s2
 800fe68:	ee60 6a26 	vmul.f32	s13, s0, s13
 800fe6c:	eddc 0a00 	vldr	s1, [ip]
 800fe70:	ee63 3a8c 	vmul.f32	s7, s7, s24
 800fe74:	ee24 4a2b 	vmul.f32	s8, s8, s23
 800fe78:	ee60 5a25 	vmul.f32	s11, s0, s11
 800fe7c:	eea0 1a83 	vfma.f32	s2, s1, s6
 800fe80:	ee26 6a06 	vmul.f32	s12, s12, s12
 800fe84:	ee6f faaf 	vmul.f32	s31, s31, s31
 800fe88:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800fe8c:	eea3 6aa3 	vfma.f32	s12, s7, s7
 800fe90:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800fe94:	eee4 fa04 	vfma.f32	s31, s8, s8
 800fe98:	ee64 4a8c 	vmul.f32	s9, s9, s24
 800fe9c:	ee21 1a2b 	vmul.f32	s2, s2, s23
 800fea0:	ee60 2a22 	vmul.f32	s5, s0, s5
 800fea4:	eea4 6aa4 	vfma.f32	s12, s9, s9
 800fea8:	eee1 fa01 	vfma.f32	s31, s2, s2
 800feac:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800feb0:	eea1 5a82 	vfma.f32	s10, s3, s4
 800feb4:	ed5f 5ab6 	vldr	s11, [pc, #-728]	; 800fbe0 <kalman_3gyro.constprop.0+0x3d0>
 800feb8:	eef0 4ac8 	vabs.f32	s9, s16
 800febc:	eef4 4ae5 	vcmpe.f32	s9, s11
 800fec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fec4:	ee27 ea2d 	vmul.f32	s28, s14, s27
 800fec8:	eeb1 dac6 	vsqrt.f32	s26, s12
 800fecc:	eef1 caef 	vsqrt.f32	s25, s31
 800fed0:	eef1 bae6 	vsqrt.f32	s23, s13
 800fed4:	ee67 daad 	vmul.f32	s27, s15, s27
 800fed8:	eeb0 ca45 	vmov.f32	s24, s10
 800fedc:	d517      	bpl.n	800ff0e <kalman_3gyro.constprop.0+0x6fe>
 800fede:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fee2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feea:	f2c1 806f 	blt.w	8010fcc <kalman_3gyro.constprop.0+0x17bc>
 800feee:	ee78 7a27 	vadd.f32	s15, s16, s15
 800fef2:	ee17 0a90 	vmov	r0, s15
 800fef6:	f7f0 fb1f 	bl	8000538 <__aeabi_f2d>
 800fefa:	ec41 0b10 	vmov	d0, r0, r1
 800fefe:	f008 fb4b 	bl	8018598 <floor>
 800ff02:	ec51 0b10 	vmov	r0, r1, d0
 800ff06:	f7f0 fe1f 	bl	8000b48 <__aeabi_d2f>
 800ff0a:	ee08 0a10 	vmov	s16, r0
 800ff0e:	ed5f 7acc 	vldr	s15, [pc, #-816]	; 800fbe0 <kalman_3gyro.constprop.0+0x3d0>
 800ff12:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 800ff16:	eef0 6ace 	vabs.f32	s13, s28
 800ff1a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ff1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff22:	d517      	bpl.n	800ff54 <kalman_3gyro.constprop.0+0x744>
 800ff24:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ff28:	eeb4 eae7 	vcmpe.f32	s28, s15
 800ff2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff30:	f2c1 8040 	blt.w	8010fb4 <kalman_3gyro.constprop.0+0x17a4>
 800ff34:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800ff38:	ee17 0a90 	vmov	r0, s15
 800ff3c:	f7f0 fafc 	bl	8000538 <__aeabi_f2d>
 800ff40:	ec41 0b10 	vmov	d0, r0, r1
 800ff44:	f008 fb28 	bl	8018598 <floor>
 800ff48:	ec51 0b10 	vmov	r0, r1, d0
 800ff4c:	f7f0 fdfc 	bl	8000b48 <__aeabi_d2f>
 800ff50:	ee0e 0a10 	vmov	s28, r0
 800ff54:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 800fbe0 <kalman_3gyro.constprop.0+0x3d0>
 800ff58:	ed8d ea34 	vstr	s28, [sp, #208]	; 0xd0
 800ff5c:	eeb0 7aed 	vabs.f32	s14, s27
 800ff60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff68:	d517      	bpl.n	800ff9a <kalman_3gyro.constprop.0+0x78a>
 800ff6a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ff6e:	eef4 dae7 	vcmpe.f32	s27, s15
 800ff72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff76:	f2c1 8011 	blt.w	8010f9c <kalman_3gyro.constprop.0+0x178c>
 800ff7a:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800ff7e:	ee17 0a90 	vmov	r0, s15
 800ff82:	f7f0 fad9 	bl	8000538 <__aeabi_f2d>
 800ff86:	ec41 0b10 	vmov	d0, r0, r1
 800ff8a:	f008 fb05 	bl	8018598 <floor>
 800ff8e:	ec51 0b10 	vmov	r0, r1, d0
 800ff92:	f7f0 fdd9 	bl	8000b48 <__aeabi_d2f>
 800ff96:	ee0d 0a90 	vmov	s27, r0
 800ff9a:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 800ff9e:	edcd da35 	vstr	s27, [sp, #212]	; 0xd4
 800ffa2:	1e61      	subs	r1, r4, #1
 800ffa4:	b249      	sxtb	r1, r1
 800ffa6:	2900      	cmp	r1, #0
 800ffa8:	dd1a      	ble.n	800ffe0 <kalman_3gyro.constprop.0+0x7d0>
 800ffaa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ffae:	1ea0      	subs	r0, r4, #2
 800ffb0:	0089      	lsls	r1, r1, #2
 800ffb2:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 800ffb6:	b2c0      	uxtb	r0, r0
 800ffb8:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 800ffbc:	440a      	add	r2, r1
 800ffbe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ffc2:	445b      	add	r3, fp
 800ffc4:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 800ffc8:	6819      	ldr	r1, [r3, #0]
 800ffca:	6858      	ldr	r0, [r3, #4]
 800ffcc:	60d9      	str	r1, [r3, #12]
 800ffce:	6899      	ldr	r1, [r3, #8]
 800ffd0:	6118      	str	r0, [r3, #16]
 800ffd2:	6159      	str	r1, [r3, #20]
 800ffd4:	3b0c      	subs	r3, #12
 800ffd6:	4293      	cmp	r3, r2
 800ffd8:	d1f6      	bne.n	800ffc8 <kalman_3gyro.constprop.0+0x7b8>
 800ffda:	9b04      	ldr	r3, [sp, #16]
 800ffdc:	ed93 ba00 	vldr	s22, [r3]
 800ffe0:	ed88 8a00 	vstr	s16, [r8]
 800ffe4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ffe8:	ee87 8a8b 	vdiv.f32	s16, s15, s22
 800ffec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ffee:	ed83 ea00 	vstr	s28, [r3]
 800fff2:	9b01      	ldr	r3, [sp, #4]
 800fff4:	eddf 7aa5 	vldr	s15, [pc, #660]	; 801028c <kalman_3gyro.constprop.0+0xa7c>
 800fff8:	edc3 da00 	vstr	s27, [r3]
 800fffc:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 8010000:	3301      	adds	r3, #1
 8010002:	b2db      	uxtb	r3, r3
 8010004:	429c      	cmp	r4, r3
 8010006:	bf28      	it	cs
 8010008:	461c      	movcs	r4, r3
 801000a:	9b08      	ldr	r3, [sp, #32]
 801000c:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 8010010:	edd3 da03 	vldr	s27, [r3, #12]
 8010014:	ed93 ba04 	vldr	s22, [r3, #16]
 8010018:	edd3 6a05 	vldr	s13, [r3, #20]
 801001c:	ee68 da2d 	vmul.f32	s27, s16, s27
 8010020:	ee28 ba0b 	vmul.f32	s22, s16, s22
 8010024:	eeb0 7aed 	vabs.f32	s14, s27
 8010028:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801002c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010030:	ee28 8a26 	vmul.f32	s16, s16, s13
 8010034:	d517      	bpl.n	8010066 <kalman_3gyro.constprop.0+0x856>
 8010036:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801003a:	eef4 dae7 	vcmpe.f32	s27, s15
 801003e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010042:	f2c0 879f 	blt.w	8010f84 <kalman_3gyro.constprop.0+0x1774>
 8010046:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 801004a:	ee17 0a90 	vmov	r0, s15
 801004e:	f7f0 fa73 	bl	8000538 <__aeabi_f2d>
 8010052:	ec41 0b10 	vmov	d0, r0, r1
 8010056:	f008 fa9f 	bl	8018598 <floor>
 801005a:	ec51 0b10 	vmov	r0, r1, d0
 801005e:	f7f0 fd73 	bl	8000b48 <__aeabi_d2f>
 8010062:	ee0d 0a90 	vmov	s27, r0
 8010066:	eddf 7a89 	vldr	s15, [pc, #548]	; 801028c <kalman_3gyro.constprop.0+0xa7c>
 801006a:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 801006e:	eeb0 7acb 	vabs.f32	s14, s22
 8010072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801007a:	d517      	bpl.n	80100ac <kalman_3gyro.constprop.0+0x89c>
 801007c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010080:	eeb4 bae7 	vcmpe.f32	s22, s15
 8010084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010088:	f2c0 8770 	blt.w	8010f6c <kalman_3gyro.constprop.0+0x175c>
 801008c:	ee7b 7a27 	vadd.f32	s15, s22, s15
 8010090:	ee17 0a90 	vmov	r0, s15
 8010094:	f7f0 fa50 	bl	8000538 <__aeabi_f2d>
 8010098:	ec41 0b10 	vmov	d0, r0, r1
 801009c:	f008 fa7c 	bl	8018598 <floor>
 80100a0:	ec51 0b10 	vmov	r0, r1, d0
 80100a4:	f7f0 fd50 	bl	8000b48 <__aeabi_d2f>
 80100a8:	ee0b 0a10 	vmov	s22, r0
 80100ac:	eddf 7a77 	vldr	s15, [pc, #476]	; 801028c <kalman_3gyro.constprop.0+0xa7c>
 80100b0:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 80100b4:	eeb0 7ac8 	vabs.f32	s14, s16
 80100b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c0:	d517      	bpl.n	80100f2 <kalman_3gyro.constprop.0+0x8e2>
 80100c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80100c6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80100ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ce:	f2c0 8741 	blt.w	8010f54 <kalman_3gyro.constprop.0+0x1744>
 80100d2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80100d6:	ee17 0a90 	vmov	r0, s15
 80100da:	f7f0 fa2d 	bl	8000538 <__aeabi_f2d>
 80100de:	ec41 0b10 	vmov	d0, r0, r1
 80100e2:	f008 fa59 	bl	8018598 <floor>
 80100e6:	ec51 0b10 	vmov	r0, r1, d0
 80100ea:	f7f0 fd2d 	bl	8000b48 <__aeabi_d2f>
 80100ee:	ee08 0a10 	vmov	s16, r0
 80100f2:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 80100f6:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 80100fa:	1e61      	subs	r1, r4, #1
 80100fc:	b249      	sxtb	r1, r1
 80100fe:	2900      	cmp	r1, #0
 8010100:	dd17      	ble.n	8010132 <kalman_3gyro.constprop.0+0x922>
 8010102:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010106:	1ea2      	subs	r2, r4, #2
 8010108:	0089      	lsls	r1, r1, #2
 801010a:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 801010e:	b2d2      	uxtb	r2, r2
 8010110:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 8010114:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010118:	4401      	add	r1, r0
 801011a:	445b      	add	r3, fp
 801011c:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 8010120:	681a      	ldr	r2, [r3, #0]
 8010122:	6858      	ldr	r0, [r3, #4]
 8010124:	60da      	str	r2, [r3, #12]
 8010126:	689a      	ldr	r2, [r3, #8]
 8010128:	6118      	str	r0, [r3, #16]
 801012a:	615a      	str	r2, [r3, #20]
 801012c:	3b0c      	subs	r3, #12
 801012e:	4299      	cmp	r1, r3
 8010130:	d1f6      	bne.n	8010120 <kalman_3gyro.constprop.0+0x910>
 8010132:	9b02      	ldr	r3, [sp, #8]
 8010134:	edc7 da00 	vstr	s27, [r7]
 8010138:	ed83 ba00 	vstr	s22, [r3]
 801013c:	9b03      	ldr	r3, [sp, #12]
 801013e:	eddf 7a53 	vldr	s15, [pc, #332]	; 801028c <kalman_3gyro.constprop.0+0xa7c>
 8010142:	ed83 8a00 	vstr	s16, [r3]
 8010146:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 801014a:	3301      	adds	r3, #1
 801014c:	b2db      	uxtb	r3, r3
 801014e:	429c      	cmp	r4, r3
 8010150:	bf28      	it	cs
 8010152:	461c      	movcs	r4, r3
 8010154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010156:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 801015a:	ed93 7a00 	vldr	s14, [r3]
 801015e:	9b08      	ldr	r3, [sp, #32]
 8010160:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010164:	ee86 8a07 	vdiv.f32	s16, s12, s14
 8010168:	edd3 da06 	vldr	s27, [r3, #24]
 801016c:	ed93 ba07 	vldr	s22, [r3, #28]
 8010170:	edd3 6a08 	vldr	s13, [r3, #32]
 8010174:	ee68 da2d 	vmul.f32	s27, s16, s27
 8010178:	ee28 ba0b 	vmul.f32	s22, s16, s22
 801017c:	eeb0 7aed 	vabs.f32	s14, s27
 8010180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010188:	ee28 8a26 	vmul.f32	s16, s16, s13
 801018c:	d517      	bpl.n	80101be <kalman_3gyro.constprop.0+0x9ae>
 801018e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010192:	eef4 dae7 	vcmpe.f32	s27, s15
 8010196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801019a:	f2c0 86cf 	blt.w	8010f3c <kalman_3gyro.constprop.0+0x172c>
 801019e:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 80101a2:	ee17 0a90 	vmov	r0, s15
 80101a6:	f7f0 f9c7 	bl	8000538 <__aeabi_f2d>
 80101aa:	ec41 0b10 	vmov	d0, r0, r1
 80101ae:	f008 f9f3 	bl	8018598 <floor>
 80101b2:	ec51 0b10 	vmov	r0, r1, d0
 80101b6:	f7f0 fcc7 	bl	8000b48 <__aeabi_d2f>
 80101ba:	ee0d 0a90 	vmov	s27, r0
 80101be:	eddf 7a33 	vldr	s15, [pc, #204]	; 801028c <kalman_3gyro.constprop.0+0xa7c>
 80101c2:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 80101c6:	eeb0 7acb 	vabs.f32	s14, s22
 80101ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80101ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101d2:	d517      	bpl.n	8010204 <kalman_3gyro.constprop.0+0x9f4>
 80101d4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80101d8:	eeb4 bae7 	vcmpe.f32	s22, s15
 80101dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101e0:	f2c0 86a0 	blt.w	8010f24 <kalman_3gyro.constprop.0+0x1714>
 80101e4:	ee7b 7a27 	vadd.f32	s15, s22, s15
 80101e8:	ee17 0a90 	vmov	r0, s15
 80101ec:	f7f0 f9a4 	bl	8000538 <__aeabi_f2d>
 80101f0:	ec41 0b10 	vmov	d0, r0, r1
 80101f4:	f008 f9d0 	bl	8018598 <floor>
 80101f8:	ec51 0b10 	vmov	r0, r1, d0
 80101fc:	f7f0 fca4 	bl	8000b48 <__aeabi_d2f>
 8010200:	ee0b 0a10 	vmov	s22, r0
 8010204:	eddf 7a21 	vldr	s15, [pc, #132]	; 801028c <kalman_3gyro.constprop.0+0xa7c>
 8010208:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 801020c:	eeb0 7ac8 	vabs.f32	s14, s16
 8010210:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010218:	d517      	bpl.n	801024a <kalman_3gyro.constprop.0+0xa3a>
 801021a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801021e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010226:	f2c0 8671 	blt.w	8010f0c <kalman_3gyro.constprop.0+0x16fc>
 801022a:	ee78 7a27 	vadd.f32	s15, s16, s15
 801022e:	ee17 0a90 	vmov	r0, s15
 8010232:	f7f0 f981 	bl	8000538 <__aeabi_f2d>
 8010236:	ec41 0b10 	vmov	d0, r0, r1
 801023a:	f008 f9ad 	bl	8018598 <floor>
 801023e:	ec51 0b10 	vmov	r0, r1, d0
 8010242:	f7f0 fc81 	bl	8000b48 <__aeabi_d2f>
 8010246:	ee08 0a10 	vmov	s16, r0
 801024a:	f89b 4791 	ldrb.w	r4, [fp, #1937]	; 0x791
 801024e:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 8010252:	1e63      	subs	r3, r4, #1
 8010254:	b25b      	sxtb	r3, r3
 8010256:	2b00      	cmp	r3, #0
 8010258:	dd1c      	ble.n	8010294 <kalman_3gyro.constprop.0+0xa84>
 801025a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801025e:	1ea2      	subs	r2, r4, #2
 8010260:	0099      	lsls	r1, r3, #2
 8010262:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 8010266:	b2d2      	uxtb	r2, r2
 8010268:	f201 738c 	addw	r3, r1, #1932	; 0x78c
 801026c:	4408      	add	r0, r1
 801026e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010272:	445b      	add	r3, fp
 8010274:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 8010278:	681a      	ldr	r2, [r3, #0]
 801027a:	6859      	ldr	r1, [r3, #4]
 801027c:	60da      	str	r2, [r3, #12]
 801027e:	689a      	ldr	r2, [r3, #8]
 8010280:	6119      	str	r1, [r3, #16]
 8010282:	615a      	str	r2, [r3, #20]
 8010284:	3b0c      	subs	r3, #12
 8010286:	4283      	cmp	r3, r0
 8010288:	d1f6      	bne.n	8010278 <kalman_3gyro.constprop.0+0xa68>
 801028a:	e003      	b.n	8010294 <kalman_3gyro.constprop.0+0xa84>
 801028c:	4b000000 	.word	0x4b000000
 8010290:	00000000 	.word	0x00000000
 8010294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010296:	edc3 da00 	vstr	s27, [r3]
 801029a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801029c:	ed83 ba00 	vstr	s22, [r3]
 80102a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80102a2:	ed83 8a00 	vstr	s16, [r3]
 80102a6:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 80102aa:	3301      	adds	r3, #1
 80102ac:	b2db      	uxtb	r3, r3
 80102ae:	429c      	cmp	r4, r3
 80102b0:	bf28      	it	cs
 80102b2:	461c      	movcs	r4, r3
 80102b4:	f88b 4790 	strb.w	r4, [fp, #1936]	; 0x790
 80102b8:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 80102bc:	aa54      	add	r2, sp, #336	; 0x150
 80102be:	a92d      	add	r1, sp, #180	; 0xb4
 80102c0:	a830      	add	r0, sp, #192	; 0xc0
 80102c2:	461c      	mov	r4, r3
 80102c4:	9314      	str	r3, [sp, #80]	; 0x50
 80102c6:	f7fe fa27 	bl	800e718 <getRotationMatrix>
 80102ca:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 80102ce:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 80102d2:	6820      	ldr	r0, [r4, #0]
 80102d4:	6861      	ldr	r1, [r4, #4]
 80102d6:	68a2      	ldr	r2, [r4, #8]
 80102d8:	68e3      	ldr	r3, [r4, #12]
 80102da:	4635      	mov	r5, r6
 80102dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80102de:	3410      	adds	r4, #16
 80102e0:	42bc      	cmp	r4, r7
 80102e2:	462e      	mov	r6, r5
 80102e4:	d1f5      	bne.n	80102d2 <kalman_3gyro.constprop.0+0xac2>
 80102e6:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 80102ea:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 80102ee:	6820      	ldr	r0, [r4, #0]
 80102f0:	6028      	str	r0, [r5, #0]
 80102f2:	eef0 7ae7 	vabs.f32	s15, s15
 80102f6:	eeb0 7ac7 	vabs.f32	s14, s14
 80102fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80102fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010302:	f140 85a4 	bpl.w	8010e4e <kalman_3gyro.constprop.0+0x163e>
 8010306:	2303      	movs	r3, #3
 8010308:	2706      	movs	r7, #6
 801030a:	e9cd 3701 	strd	r3, r7, [sp, #4]
 801030e:	2604      	movs	r6, #4
 8010310:	2400      	movs	r4, #0
 8010312:	eef0 7a47 	vmov.f32	s15, s14
 8010316:	4632      	mov	r2, r6
 8010318:	46a2      	mov	sl, r4
 801031a:	2107      	movs	r1, #7
 801031c:	f04f 0c01 	mov.w	ip, #1
 8010320:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 8010324:	eeb0 7ac7 	vabs.f32	s14, s14
 8010328:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801032c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010330:	f340 85ae 	ble.w	8010e90 <kalman_3gyro.constprop.0+0x1680>
 8010334:	2304      	movs	r3, #4
 8010336:	2007      	movs	r0, #7
 8010338:	2108      	movs	r1, #8
 801033a:	9301      	str	r3, [sp, #4]
 801033c:	461c      	mov	r4, r3
 801033e:	9002      	str	r0, [sp, #8]
 8010340:	460a      	mov	r2, r1
 8010342:	2306      	movs	r3, #6
 8010344:	2003      	movs	r0, #3
 8010346:	2605      	movs	r6, #5
 8010348:	f04f 0800 	mov.w	r8, #0
 801034c:	f04f 0a01 	mov.w	sl, #1
 8010350:	f04f 0c02 	mov.w	ip, #2
 8010354:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8010356:	442c      	add	r4, r5
 8010358:	442a      	add	r2, r5
 801035a:	edd4 6a00 	vldr	s13, [r4]
 801035e:	ed92 7a00 	vldr	s14, [r2]
 8010362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010366:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 801036a:	eb02 048a 	add.w	r4, r2, sl, lsl #2
 801036e:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 8010372:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8010376:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 801037a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 801037e:	970c      	str	r7, [sp, #48]	; 0x30
 8010380:	9f01      	ldr	r7, [sp, #4]
 8010382:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8010386:	00b6      	lsls	r6, r6, #2
 8010388:	960a      	str	r6, [sp, #40]	; 0x28
 801038a:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 801038e:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 8010392:	edc4 7a00 	vstr	s15, [r4]
 8010396:	edd2 7a00 	vldr	s15, [r2]
 801039a:	ed99 7a00 	vldr	s14, [r9]
 801039e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80103a2:	ea4f 028a 	mov.w	r2, sl, lsl #2
 80103a6:	9204      	str	r2, [sp, #16]
 80103a8:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80103ac:	9205      	str	r2, [sp, #20]
 80103ae:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80103b2:	9209      	str	r2, [sp, #36]	; 0x24
 80103b4:	00ba      	lsls	r2, r7, #2
 80103b6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80103b8:	9206      	str	r2, [sp, #24]
 80103ba:	0080      	lsls	r0, r0, #2
 80103bc:	9003      	str	r0, [sp, #12]
 80103be:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 80103c2:	0089      	lsls	r1, r1, #2
 80103c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80103c6:	edc9 6a00 	vstr	s13, [r9]
 80103ca:	ed94 6a00 	vldr	s12, [r4]
 80103ce:	ed97 7a00 	vldr	s14, [r7]
 80103d2:	edd5 7a00 	vldr	s15, [r5]
 80103d6:	9902      	ldr	r1, [sp, #8]
 80103d8:	9a02      	ldr	r2, [sp, #8]
 80103da:	eee6 7a47 	vfms.f32	s15, s12, s14
 80103de:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 80103e2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 80103e6:	0092      	lsls	r2, r2, #2
 80103e8:	edc5 7a00 	vstr	s15, [r5]
 80103ec:	ed97 7a00 	vldr	s14, [r7]
 80103f0:	edde 7a00 	vldr	s15, [lr]
 80103f4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80103f8:	009b      	lsls	r3, r3, #2
 80103fa:	edce 7a00 	vstr	s15, [lr]
 80103fe:	edd0 5a00 	vldr	s11, [r0]
 8010402:	ed91 7a00 	vldr	s14, [r1]
 8010406:	eea6 7a65 	vfms.f32	s14, s12, s11
 801040a:	eef0 7ae7 	vabs.f32	s15, s15
 801040e:	ed81 7a00 	vstr	s14, [r1]
 8010412:	ed90 6a00 	vldr	s12, [r0]
 8010416:	ed96 7a00 	vldr	s14, [r6]
 801041a:	eea6 7ac6 	vfms.f32	s14, s13, s12
 801041e:	ed86 7a00 	vstr	s14, [r6]
 8010422:	ed95 7a00 	vldr	s14, [r5]
 8010426:	eeb0 7ac7 	vabs.f32	s14, s14
 801042a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801042e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010432:	dd10      	ble.n	8010456 <kalman_3gyro.constprop.0+0xc46>
 8010434:	4652      	mov	r2, sl
 8010436:	46c2      	mov	sl, r8
 8010438:	4690      	mov	r8, r2
 801043a:	461a      	mov	r2, r3
 801043c:	9b01      	ldr	r3, [sp, #4]
 801043e:	9902      	ldr	r1, [sp, #8]
 8010440:	9803      	ldr	r0, [sp, #12]
 8010442:	9006      	str	r0, [sp, #24]
 8010444:	009b      	lsls	r3, r3, #2
 8010446:	9303      	str	r3, [sp, #12]
 8010448:	008b      	lsls	r3, r1, #2
 801044a:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801044e:	9105      	str	r1, [sp, #20]
 8010450:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8010454:	9104      	str	r1, [sp, #16]
 8010456:	9903      	ldr	r1, [sp, #12]
 8010458:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 801045c:	4401      	add	r1, r0
 801045e:	460c      	mov	r4, r1
 8010460:	9906      	ldr	r1, [sp, #24]
 8010462:	ed94 7a00 	vldr	s14, [r4]
 8010466:	4401      	add	r1, r0
 8010468:	edd1 7a00 	vldr	s15, [r1]
 801046c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8010470:	4608      	mov	r0, r1
 8010472:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8010476:	440a      	add	r2, r1
 8010478:	440b      	add	r3, r1
 801047a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801047c:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8010480:	4429      	add	r1, r5
 8010482:	460d      	mov	r5, r1
 8010484:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010486:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 801048a:	4431      	add	r1, r6
 801048c:	468e      	mov	lr, r1
 801048e:	ed84 3a00 	vstr	s6, [r4]
 8010492:	ed92 7a00 	vldr	s14, [r2]
 8010496:	edd3 7a00 	vldr	s15, [r3]
 801049a:	9904      	ldr	r1, [sp, #16]
 801049c:	eee3 7a47 	vfms.f32	s15, s6, s14
 80104a0:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 80104a4:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 80104a8:	440e      	add	r6, r1
 80104aa:	1879      	adds	r1, r7, r1
 80104ac:	edc3 7a00 	vstr	s15, [r3]
 80104b0:	9101      	str	r1, [sp, #4]
 80104b2:	9b05      	ldr	r3, [sp, #20]
 80104b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80104b6:	edd2 0a00 	vldr	s1, [r2]
 80104ba:	ed95 1a00 	vldr	s2, [r5]
 80104be:	ed9e 2a00 	vldr	s4, [lr]
 80104c2:	f5a6 66cf 	sub.w	r6, r6, #1656	; 0x678
 80104c6:	edd6 6a00 	vldr	s13, [r6]
 80104ca:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 80104ce:	1874      	adds	r4, r6, r1
 80104d0:	18f7      	adds	r7, r6, r3
 80104d2:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 80104d6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80104da:	eb06 0903 	add.w	r9, r6, r3
 80104de:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 80104e2:	ee82 0aa7 	vdiv.f32	s0, s5, s15
 80104e6:	eb03 068c 	add.w	r6, r3, ip, lsl #2
 80104ea:	4633      	mov	r3, r6
 80104ec:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 80104f0:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80104f4:	f20d 4cd4 	addw	ip, sp, #1236	; 0x4d4
 80104f8:	448c      	add	ip, r1
 80104fa:	9901      	ldr	r1, [sp, #4]
 80104fc:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 8010500:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 8010504:	ed94 7a00 	vldr	s14, [r4]
 8010508:	ed93 6a00 	vldr	s12, [r3]
 801050c:	edd0 7a00 	vldr	s15, [r0]
 8010510:	ed99 8a00 	vldr	s16, [r9]
 8010514:	ed91 ba00 	vldr	s22, [r1]
 8010518:	ed97 4a00 	vldr	s8, [r7]
 801051c:	edd6 4a00 	vldr	s9, [r6]
 8010520:	eddc da00 	vldr	s27, [ip]
 8010524:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 8010528:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 801052c:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8010530:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 8010534:	46a2      	mov	sl, r4
 8010536:	4613      	mov	r3, r2
 8010538:	eec2 1aa7 	vdiv.f32	s3, s5, s15
 801053c:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 8010540:	f5aa 6acc 	sub.w	sl, sl, #1632	; 0x660
 8010544:	f2a2 626c 	subw	r2, r2, #1644	; 0x66c
 8010548:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 801054c:	eeeb 6a47 	vfms.f32	s13, s22, s14
 8010550:	eea8 4a47 	vfms.f32	s8, s16, s14
 8010554:	ed94 5a00 	vldr	s10, [r4]
 8010558:	edda 3a00 	vldr	s7, [sl]
 801055c:	edd2 5a00 	vldr	s11, [r2]
 8010560:	edd3 7a00 	vldr	s15, [r3]
 8010564:	eeab 5a64 	vfms.f32	s10, s22, s9
 8010568:	eee8 5a64 	vfms.f32	s11, s16, s9
 801056c:	eee6 3a4b 	vfms.f32	s7, s12, s22
 8010570:	eee6 7a48 	vfms.f32	s15, s12, s16
 8010574:	eea6 4ac3 	vfms.f32	s8, s13, s6
 8010578:	ee82 8aad 	vdiv.f32	s16, s5, s27
 801057c:	eee3 5a45 	vfms.f32	s11, s6, s10
 8010580:	eee3 7a63 	vfms.f32	s15, s6, s7
 8010584:	ee20 4a04 	vmul.f32	s8, s0, s8
 8010588:	ee60 5a25 	vmul.f32	s11, s0, s11
 801058c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010590:	eee0 6ac4 	vfms.f32	s13, s1, s8
 8010594:	eea0 5ae5 	vfms.f32	s10, s1, s11
 8010598:	eee7 3ae0 	vfms.f32	s7, s15, s1
 801059c:	eea1 7a44 	vfms.f32	s14, s2, s8
 80105a0:	ee61 6aa6 	vmul.f32	s13, s3, s13
 80105a4:	eee1 4a65 	vfms.f32	s9, s2, s11
 80105a8:	eea7 6ac1 	vfms.f32	s12, s15, s2
 80105ac:	ee21 5a85 	vmul.f32	s10, s3, s10
 80105b0:	eea2 7a66 	vfms.f32	s14, s4, s13
 80105b4:	ee63 1aa1 	vmul.f32	s3, s7, s3
 80105b8:	eee2 4a45 	vfms.f32	s9, s4, s10
 80105bc:	eea1 6ac2 	vfms.f32	s12, s3, s4
 80105c0:	ee28 7a07 	vmul.f32	s14, s16, s14
 80105c4:	ee37 3a85 	vadd.f32	s6, s15, s10
 80105c8:	ee68 4a24 	vmul.f32	s9, s16, s9
 80105cc:	ee26 8a08 	vmul.f32	s16, s12, s16
 80105d0:	ee37 6a43 	vsub.f32	s12, s14, s6
 80105d4:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
 80105d8:	eeb4 6ae3 	vcmpe.f32	s12, s7
 80105dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105e0:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 80105e4:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 80105e8:	edcd 5a50 	vstr	s11, [sp, #320]	; 0x140
 80105ec:	ee75 5ae1 	vsub.f32	s11, s11, s3
 80105f0:	bfc8      	it	gt
 80105f2:	ee76 2a22 	vaddgt.f32	s5, s12, s5
 80105f6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80105fa:	bfcc      	ite	gt
 80105fc:	eef1 3ae2 	vsqrtgt.f32	s7, s5
 8010600:	ed5f 3add 	vldrle	s7, [pc, #-884]	; 8010290 <kalman_3gyro.constprop.0+0xa80>
 8010604:	ed8d 7a4b 	vstr	s14, [sp, #300]	; 0x12c
 8010608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801060c:	edcd 4a4e 	vstr	s9, [sp, #312]	; 0x138
 8010610:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 8010614:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 8010618:	edcd 1a52 	vstr	s3, [sp, #328]	; 0x148
 801061c:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 8010620:	f100 84e4 	bmi.w	8010fec <kalman_3gyro.constprop.0+0x17dc>
 8010624:	bfd8      	it	le
 8010626:	ee63 3aa5 	vmulle.f32	s7, s7, s11
 801062a:	ee37 6a87 	vadd.f32	s12, s15, s14
 801062e:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 8010632:	ee35 6a46 	vsub.f32	s12, s10, s12
 8010636:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801063a:	eeb4 6ac3 	vcmpe.f32	s12, s6
 801063e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010642:	ee63 5aa5 	vmul.f32	s11, s7, s11
 8010646:	ee38 4a44 	vsub.f32	s8, s16, s8
 801064a:	bf84      	itt	hi
 801064c:	eef7 3a00 	vmovhi.f32	s7, #112	; 0x3f800000  1.0
 8010650:	ee36 6a23 	vaddhi.f32	s12, s12, s7
 8010654:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 8010658:	bf8c      	ite	hi
 801065a:	eef1 3ac6 	vsqrthi.f32	s7, s12
 801065e:	eddf 3ae0 	vldrls	s7, [pc, #896]	; 80109e0 <kalman_3gyro.constprop.0+0x11d0>
 8010662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010666:	f100 84bd 	bmi.w	8010fe4 <kalman_3gyro.constprop.0+0x17d4>
 801066a:	bfd8      	it	le
 801066c:	ee63 3a84 	vmulle.f32	s7, s7, s8
 8010670:	ee37 7a05 	vadd.f32	s14, s14, s10
 8010674:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8010678:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801067c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010688:	bf84      	itt	hi
 801068a:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 801068e:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 8010692:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010696:	bf8c      	ite	hi
 8010698:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 801069c:	ed9f 7ad0 	vldrls	s14, [pc, #832]	; 80109e0 <kalman_3gyro.constprop.0+0x11d0>
 80106a0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80106a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106a8:	ee63 3a86 	vmul.f32	s7, s7, s12
 80106ac:	f102 8399 	bmi.w	8012de2 <kalman_3gyro.constprop.0+0x35d2>
 80106b0:	bfd8      	it	le
 80106b2:	ee27 7a26 	vmulle.f32	s14, s14, s13
 80106b6:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 80106ba:	1e53      	subs	r3, r2, #1
 80106bc:	b25b      	sxtb	r3, r3
 80106be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80106c8:	dd1c      	ble.n	8010704 <kalman_3gyro.constprop.0+0xef4>
 80106ca:	3a02      	subs	r2, #2
 80106cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80106d0:	b2d2      	uxtb	r2, r2
 80106d2:	f1ab 000c 	sub.w	r0, fp, #12
 80106d6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80106da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80106de:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 80106e2:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 80106e6:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 80106ea:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 80106ee:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 80106f2:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 80106f6:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 80106fa:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 80106fe:	3b0c      	subs	r3, #12
 8010700:	4283      	cmp	r3, r0
 8010702:	d1f0      	bne.n	80106e6 <kalman_3gyro.constprop.0+0xed6>
 8010704:	eddd 6a07 	vldr	s13, [sp, #28]
 8010708:	4ab6      	ldr	r2, [pc, #728]	; (80109e4 <kalman_3gyro.constprop.0+0x11d4>)
 801070a:	4bb7      	ldr	r3, [pc, #732]	; (80109e8 <kalman_3gyro.constprop.0+0x11d8>)
 801070c:	ed92 8a00 	vldr	s16, [r2]
 8010710:	ed93 ba00 	vldr	s22, [r3]
 8010714:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 8010718:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801071c:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8010720:	f20d 214b 	addw	r1, sp, #587	; 0x24b
 8010724:	f1c1 0101 	rsb	r1, r1, #1
 8010728:	910c      	str	r1, [sp, #48]	; 0x30
 801072a:	a92d      	add	r1, sp, #180	; 0xb4
 801072c:	e9cd b10a 	strd	fp, r1, [sp, #40]	; 0x28
 8010730:	9123      	str	r1, [sp, #140]	; 0x8c
 8010732:	2100      	movs	r1, #0
 8010734:	9109      	str	r1, [sp, #36]	; 0x24
 8010736:	f50d 7913 	add.w	r9, sp, #588	; 0x24c
 801073a:	f50d 7a64 	add.w	sl, sp, #912	; 0x390
 801073e:	ee75 5aa5 	vadd.f32	s11, s11, s11
 8010742:	ee73 7aa3 	vadd.f32	s15, s7, s7
 8010746:	ee37 7a07 	vadd.f32	s14, s14, s14
 801074a:	ee65 5aa6 	vmul.f32	s11, s11, s13
 801074e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010752:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010756:	edcb 5ad2 	vstr	s11, [fp, #840]	; 0x348
 801075a:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 801075e:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 8010762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010766:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010768:	3301      	adds	r3, #1
 801076a:	9309      	str	r3, [sp, #36]	; 0x24
 801076c:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8010770:	f20d 234b 	addw	r3, sp, #587	; 0x24b
 8010774:	18e0      	adds	r0, r4, r3
 8010776:	f803 0f01 	strb.w	r0, [r3, #1]!
 801077a:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 801077e:	f841 0b04 	str.w	r0, [r1], #4
 8010782:	f20d 2069 	addw	r0, sp, #617	; 0x269
 8010786:	4298      	cmp	r0, r3
 8010788:	f102 020c 	add.w	r2, r2, #12
 801078c:	d1f2      	bne.n	8010774 <kalman_3gyro.constprop.0+0xf64>
 801078e:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8010792:	ed93 7a00 	vldr	s14, [r3]
 8010796:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 801079a:	edd3 7a00 	vldr	s15, [r3]
 801079e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80107a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107a6:	bf84      	itt	hi
 80107a8:	f44f 7381 	movhi.w	r3, #258	; 0x102
 80107ac:	f8a9 3000 	strhhi.w	r3, [r9]
 80107b0:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 80107b4:	ed93 7a00 	vldr	s14, [r3]
 80107b8:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 80107bc:	edd3 7a00 	vldr	s15, [r3]
 80107c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80107c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c8:	bf84      	itt	hi
 80107ca:	f44f 7341 	movhi.w	r3, #772	; 0x304
 80107ce:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 80107d2:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 80107d6:	ed93 7a00 	vldr	s14, [r3]
 80107da:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 80107de:	edd3 7a00 	vldr	s15, [r3]
 80107e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80107e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ea:	bf84      	itt	hi
 80107ec:	f240 5306 	movwhi	r3, #1286	; 0x506
 80107f0:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 80107f4:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 80107f8:	ed93 7a00 	vldr	s14, [r3]
 80107fc:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 8010800:	edd3 7a00 	vldr	s15, [r3]
 8010804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801080c:	bf84      	itt	hi
 801080e:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 8010812:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 8010816:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 801081a:	ed93 7a00 	vldr	s14, [r3]
 801081e:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 8010822:	edd3 7a00 	vldr	s15, [r3]
 8010826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801082a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801082e:	bf84      	itt	hi
 8010830:	f640 130a 	movwhi	r3, #2314	; 0x90a
 8010834:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 8010838:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 801083c:	ed93 7a00 	vldr	s14, [r3]
 8010840:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 8010844:	edd3 7a00 	vldr	s15, [r3]
 8010848:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801084c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010850:	bf84      	itt	hi
 8010852:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 8010856:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 801085a:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 801085e:	ed93 7a00 	vldr	s14, [r3]
 8010862:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 8010866:	edd3 7a00 	vldr	s15, [r3]
 801086a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801086e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010872:	bf84      	itt	hi
 8010874:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 8010878:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 801087c:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 8010880:	ed93 7a00 	vldr	s14, [r3]
 8010884:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 8010888:	edd3 7a00 	vldr	s15, [r3]
 801088c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010894:	bf84      	itt	hi
 8010896:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 801089a:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 801089e:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 80108a2:	ed93 7a00 	vldr	s14, [r3]
 80108a6:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 80108aa:	edd3 7a00 	vldr	s15, [r3]
 80108ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80108b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b6:	bf84      	itt	hi
 80108b8:	f241 1312 	movwhi	r3, #4370	; 0x1112
 80108bc:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 80108c0:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 80108c4:	ed93 7a00 	vldr	s14, [r3]
 80108c8:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 80108cc:	edd3 7a00 	vldr	s15, [r3]
 80108d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80108d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d8:	bf84      	itt	hi
 80108da:	f241 3314 	movwhi	r3, #4884	; 0x1314
 80108de:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 80108e2:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 80108e6:	ed93 7a00 	vldr	s14, [r3]
 80108ea:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 80108ee:	edd3 7a00 	vldr	s15, [r3]
 80108f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80108f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108fa:	bf84      	itt	hi
 80108fc:	f241 5316 	movwhi	r3, #5398	; 0x1516
 8010900:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 8010904:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 8010908:	ed93 7a00 	vldr	s14, [r3]
 801090c:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 8010910:	edd3 7a00 	vldr	s15, [r3]
 8010914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801091c:	bf84      	itt	hi
 801091e:	f241 7318 	movwhi	r3, #5912	; 0x1718
 8010922:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 8010926:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 801092a:	ed93 7a00 	vldr	s14, [r3]
 801092e:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 8010932:	edd3 7a00 	vldr	s15, [r3]
 8010936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801093a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801093e:	bf84      	itt	hi
 8010940:	f641 131a 	movwhi	r3, #6426	; 0x191a
 8010944:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 8010948:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 801094c:	ed93 7a00 	vldr	s14, [r3]
 8010950:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 8010954:	edd3 7a00 	vldr	s15, [r3]
 8010958:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801095c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010960:	bf84      	itt	hi
 8010962:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 8010966:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 801096a:	f20d 5344 	addw	r3, sp, #1348	; 0x544
 801096e:	ed93 7a00 	vldr	s14, [r3]
 8010972:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
 8010976:	edd3 7a00 	vldr	s15, [r3]
 801097a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801097e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010982:	bf84      	itt	hi
 8010984:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 8010988:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 801098c:	221e      	movs	r2, #30
 801098e:	2101      	movs	r1, #1
 8010990:	4650      	mov	r0, sl
 8010992:	f009 fcb9 	bl	801a308 <memset>
 8010996:	2304      	movs	r3, #4
 8010998:	9307      	str	r3, [sp, #28]
 801099a:	2302      	movs	r3, #2
 801099c:	9305      	str	r3, [sp, #20]
 801099e:	9b05      	ldr	r3, [sp, #20]
 80109a0:	9306      	str	r3, [sp, #24]
 80109a2:	1c5f      	adds	r7, r3, #1
 80109a4:	005b      	lsls	r3, r3, #1
 80109a6:	9305      	str	r3, [sp, #20]
 80109a8:	f04f 0b01 	mov.w	fp, #1
 80109ac:	9b05      	ldr	r3, [sp, #20]
 80109ae:	f8cd b004 	str.w	fp, [sp, #4]
 80109b2:	445b      	add	r3, fp
 80109b4:	2b1f      	cmp	r3, #31
 80109b6:	bfa8      	it	ge
 80109b8:	231f      	movge	r3, #31
 80109ba:	465a      	mov	r2, fp
 80109bc:	eba3 0802 	sub.w	r8, r3, r2
 80109c0:	f1b8 0f00 	cmp.w	r8, #0
 80109c4:	469b      	mov	fp, r3
 80109c6:	f107 35ff 	add.w	r5, r7, #4294967295
 80109ca:	dd44      	ble.n	8010a56 <kalman_3gyro.constprop.0+0x1246>
 80109cc:	f10b 33ff 	add.w	r3, fp, #4294967295
 80109d0:	9302      	str	r3, [sp, #8]
 80109d2:	f1ab 0302 	sub.w	r3, fp, #2
 80109d6:	e9cd 8303 	strd	r8, r3, [sp, #12]
 80109da:	4616      	mov	r6, r2
 80109dc:	2400      	movs	r4, #0
 80109de:	e00f      	b.n	8010a00 <kalman_3gyro.constprop.0+0x11f0>
 80109e0:	00000000 	.word	0x00000000
 80109e4:	20001f88 	.word	0x20001f88
 80109e8:	20001f98 	.word	0x20001f98
 80109ec:	3f333333 	.word	0x3f333333
 80109f0:	3f4ccccd 	.word	0x3f4ccccd
 80109f4:	3f666666 	.word	0x3f666666
 80109f8:	3ecccccc 	.word	0x3ecccccc
 80109fc:	3dcccccd 	.word	0x3dcccccd
 8010a00:	1e71      	subs	r1, r6, #1
 8010a02:	f919 0005 	ldrsb.w	r0, [r9, r5]
 8010a06:	f919 2001 	ldrsb.w	r2, [r9, r1]
 8010a0a:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8010a0e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010a12:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8010a16:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8010a1a:	ed1e 7a01 	vldr	s14, [lr, #-4]
 8010a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a26:	f105 0c02 	add.w	ip, r5, #2
 8010a2a:	f105 0801 	add.w	r8, r5, #1
 8010a2e:	f240 81d3 	bls.w	8010dd8 <kalman_3gyro.constprop.0+0x15c8>
 8010a32:	45e3      	cmp	fp, ip
 8010a34:	f80a 0004 	strb.w	r0, [sl, r4]
 8010a38:	f000 81bf 	beq.w	8010dba <kalman_3gyro.constprop.0+0x15aa>
 8010a3c:	4645      	mov	r5, r8
 8010a3e:	9b03      	ldr	r3, [sp, #12]
 8010a40:	3401      	adds	r4, #1
 8010a42:	42a3      	cmp	r3, r4
 8010a44:	dcdc      	bgt.n	8010a00 <kalman_3gyro.constprop.0+0x11f0>
 8010a46:	4698      	mov	r8, r3
 8010a48:	9b01      	ldr	r3, [sp, #4]
 8010a4a:	1e58      	subs	r0, r3, #1
 8010a4c:	4448      	add	r0, r9
 8010a4e:	4642      	mov	r2, r8
 8010a50:	4651      	mov	r1, sl
 8010a52:	f009 fc4b 	bl	801a2ec <memcpy>
 8010a56:	9b06      	ldr	r3, [sp, #24]
 8010a58:	eb0b 0703 	add.w	r7, fp, r3
 8010a5c:	2f1e      	cmp	r7, #30
 8010a5e:	dda5      	ble.n	80109ac <kalman_3gyro.constprop.0+0x119c>
 8010a60:	9b07      	ldr	r3, [sp, #28]
 8010a62:	3b01      	subs	r3, #1
 8010a64:	9307      	str	r3, [sp, #28]
 8010a66:	d19a      	bne.n	801099e <kalman_3gyro.constprop.0+0x118e>
 8010a68:	f999 200e 	ldrsb.w	r2, [r9, #14]
 8010a6c:	f999 300f 	ldrsb.w	r3, [r9, #15]
 8010a70:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8010a74:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010a78:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010a7c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8010a80:	ed13 7a01 	vldr	s14, [r3, #-4]
 8010a84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a8c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010a90:	460a      	mov	r2, r1
 8010a92:	bf4c      	ite	mi
 8010a94:	2201      	movmi	r2, #1
 8010a96:	2200      	movpl	r2, #0
 8010a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a9c:	bf4c      	ite	mi
 8010a9e:	2301      	movmi	r3, #1
 8010aa0:	2300      	movpl	r3, #0
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	f000 81b4 	beq.w	8010e10 <kalman_3gyro.constprop.0+0x1600>
 8010aa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010aac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ab6:	ece3 7a01 	vstmia	r3!, {s15}
 8010aba:	930b      	str	r3, [sp, #44]	; 0x2c
 8010abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010abe:	3304      	adds	r3, #4
 8010ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8010ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ac4:	2b03      	cmp	r3, #3
 8010ac6:	f47f ae4c 	bne.w	8010762 <kalman_3gyro.constprop.0+0xf52>
 8010aca:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8010ace:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 8010ad2:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 8010ad6:	ed5f 4a3b 	vldr	s9, [pc, #-236]	; 80109ec <kalman_3gyro.constprop.0+0x11dc>
 8010ada:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 8010ade:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 80109f0 <kalman_3gyro.constprop.0+0x11e0>
 8010ae2:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 8010ae6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010aea:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8010aee:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8010af2:	ee2c 5aa6 	vmul.f32	s10, s25, s13
 8010af6:	eee6 7a06 	vfma.f32	s15, s12, s12
 8010afa:	ee6d 5a26 	vmul.f32	s11, s26, s13
 8010afe:	eeb0 6a67 	vmov.f32	s12, s15
 8010b02:	edcd 7a03 	vstr	s15, [sp, #12]
 8010b06:	ee6b 7aa6 	vmul.f32	s15, s23, s13
 8010b0a:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 8010b0e:	eeb1 4ac6 	vsqrt.f32	s8, s12
 8010b12:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8010b16:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 8010b1a:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 8010b1e:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8010b22:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8010b26:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 8010b2a:	eec5 5a27 	vdiv.f32	s11, s10, s15
 8010b2e:	ee2c 5aa4 	vmul.f32	s10, s25, s9
 8010b32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010b36:	eeab 5aa7 	vfma.f32	s10, s23, s15
 8010b3a:	ee64 7a27 	vmul.f32	s15, s8, s15
 8010b3e:	ee25 7a07 	vmul.f32	s14, s10, s14
 8010b42:	ed8d 5a02 	vstr	s10, [sp, #8]
 8010b46:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 8010b4a:	edcd 5a40 	vstr	s11, [sp, #256]	; 0x100
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	f040 81a4 	bne.w	8010e9c <kalman_3gyro.constprop.0+0x168c>
 8010b54:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 8010b58:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 8010b5c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8010b60:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 8010b64:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8010b68:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8010b6c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8010b70:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 8010b74:	f8c8 3020 	str.w	r3, [r8, #32]
 8010b78:	ed88 7a07 	vstr	s14, [r8, #28]
 8010b7c:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 8010b80:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 8010b84:	ed93 7a00 	vldr	s14, [r3]
 8010b88:	ed92 8a00 	vldr	s16, [r2]
 8010b8c:	eddb ea02 	vldr	s29, [fp, #8]
 8010b90:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 8010b94:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 8010b98:	ed92 5a00 	vldr	s10, [r2]
 8010b9c:	ee28 8a07 	vmul.f32	s16, s16, s14
 8010ba0:	ed93 7a00 	vldr	s14, [r3]
 8010ba4:	eea5 8a07 	vfma.f32	s16, s10, s14
 8010ba8:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 8010bac:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 8010bb0:	ed92 5a00 	vldr	s10, [r2]
 8010bb4:	ed93 7a00 	vldr	s14, [r3]
 8010bb8:	eea5 8a07 	vfma.f32	s16, s10, s14
 8010bbc:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 8010bc0:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 8010bc4:	ed92 5a00 	vldr	s10, [r2]
 8010bc8:	ed93 7a00 	vldr	s14, [r3]
 8010bcc:	eea5 8a07 	vfma.f32	s16, s10, s14
 8010bd0:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 8010bd4:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 8010bd8:	ed92 5a00 	vldr	s10, [r2]
 8010bdc:	ed93 7a00 	vldr	s14, [r3]
 8010be0:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8010be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be8:	eea5 8a07 	vfma.f32	s16, s10, s14
 8010bec:	f340 8232 	ble.w	8011054 <kalman_3gyro.constprop.0+0x1844>
 8010bf0:	ed9b 7a30 	vldr	s14, [fp, #192]	; 0xc0
 8010bf4:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bfc:	f100 815e 	bmi.w	8010ebc <kalman_3gyro.constprop.0+0x16ac>
 8010c00:	ed9b ba31 	vldr	s22, [fp, #196]	; 0xc4
 8010c04:	ed9b 7a4a 	vldr	s14, [fp, #296]	; 0x128
 8010c08:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c10:	f142 84bd 	bpl.w	801358e <kalman_3gyro.constprop.0+0x3d7e>
 8010c14:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 8010c18:	eeb4 5ac8 	vcmpe.f32	s10, s16
 8010c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c20:	f342 850a 	ble.w	8013638 <kalman_3gyro.constprop.0+0x3e28>
 8010c24:	eddb 2a4c 	vldr	s5, [fp, #304]	; 0x130
 8010c28:	eef4 2ac8 	vcmpe.f32	s5, s16
 8010c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c30:	f342 86c5 	ble.w	80139be <kalman_3gyro.constprop.0+0x41ae>
 8010c34:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 8010c38:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 8010c3c:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 8010c40:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010c44:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010c48:	ee32 7ac7 	vsub.f32	s14, s5, s14
 8010c4c:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010c50:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010c54:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c5c:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010c60:	f202 86c5 	bhi.w	80139ee <kalman_3gyro.constprop.0+0x41de>
 8010c64:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 8010c68:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c70:	f342 86c5 	ble.w	80139fe <kalman_3gyro.constprop.0+0x41ee>
 8010c74:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 8010c78:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 8010c7c:	ee38 3a64 	vsub.f32	s6, s16, s9
 8010c80:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010c84:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010c88:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010c8c:	ee84 ea87 	vdiv.f32	s28, s9, s14
 8010c90:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010c94:	ed9b 7a52 	vldr	s14, [fp, #328]	; 0x148
 8010c98:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ca0:	f202 86c5 	bhi.w	8013a2e <kalman_3gyro.constprop.0+0x421e>
 8010ca4:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 8010ca8:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cb0:	f343 8371 	ble.w	8014396 <kalman_3gyro.constprop.0+0x4b86>
 8010cb4:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 8010cb8:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 8010cbc:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010cc0:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010cc4:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010cc8:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010ccc:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010cd0:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010cd4:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 8010cd8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce0:	f202 86c5 	bhi.w	8013a6e <kalman_3gyro.constprop.0+0x425e>
 8010ce4:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 8010ce8:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cf0:	f343 8359 	ble.w	80143a6 <kalman_3gyro.constprop.0+0x4b96>
 8010cf4:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 8010cf8:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 8010cfc:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010d00:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010d04:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010d08:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010d0c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010d10:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010d14:	ed9b 7a5a 	vldr	s14, [fp, #360]	; 0x168
 8010d18:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d20:	f2c2 86c5 	blt.w	8013aae <kalman_3gyro.constprop.0+0x429e>
 8010d24:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 8010d28:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d30:	f143 832d 	bpl.w	801438e <kalman_3gyro.constprop.0+0x4b7e>
 8010d34:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 8010d38:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 8010d3c:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010d40:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010d44:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010d48:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010d4c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010d50:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010d54:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 8010d58:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d60:	f2c2 86c5 	blt.w	8013aee <kalman_3gyro.constprop.0+0x42de>
 8010d64:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 8010d68:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d70:	f142 86c5 	bpl.w	8013afe <kalman_3gyro.constprop.0+0x42ee>
 8010d74:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 8010d78:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 8010d7c:	ee78 3a64 	vsub.f32	s7, s16, s9
 8010d80:	ee35 5a44 	vsub.f32	s10, s10, s8
 8010d84:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010d88:	ee25 5a23 	vmul.f32	s10, s10, s7
 8010d8c:	ee85 ea07 	vdiv.f32	s28, s10, s14
 8010d90:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010d94:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8010d98:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8010d9c:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010da0:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8010da4:	e15a      	b.n	801105c <kalman_3gyro.constprop.0+0x184c>
 8010da6:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 80109f4 <kalman_3gyro.constprop.0+0x11e4>
 8010daa:	ed5f aaed 	vldr	s21, [pc, #-948]	; 80109f8 <kalman_3gyro.constprop.0+0x11e8>
 8010dae:	ed1f 9aed 	vldr	s18, [pc, #-948]	; 80109fc <kalman_3gyro.constprop.0+0x11ec>
 8010db2:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 8010db6:	f7fe bedd 	b.w	800fb74 <kalman_3gyro.constprop.0+0x364>
 8010dba:	1c60      	adds	r0, r4, #1
 8010dbc:	42be      	cmp	r6, r7
 8010dbe:	eba7 0206 	sub.w	r2, r7, r6
 8010dc2:	4449      	add	r1, r9
 8010dc4:	4450      	add	r0, sl
 8010dc6:	f6bf ae39 	bge.w	8010a3c <kalman_3gyro.constprop.0+0x122c>
 8010dca:	443c      	add	r4, r7
 8010dcc:	1ba4      	subs	r4, r4, r6
 8010dce:	f009 fa8d 	bl	801a2ec <memcpy>
 8010dd2:	463e      	mov	r6, r7
 8010dd4:	4645      	mov	r5, r8
 8010dd6:	e632      	b.n	8010a3e <kalman_3gyro.constprop.0+0x122e>
 8010dd8:	3601      	adds	r6, #1
 8010dda:	42be      	cmp	r6, r7
 8010ddc:	f80a 2004 	strb.w	r2, [sl, r4]
 8010de0:	f47f ae2d 	bne.w	8010a3e <kalman_3gyro.constprop.0+0x122e>
 8010de4:	9b02      	ldr	r3, [sp, #8]
 8010de6:	f105 0801 	add.w	r8, r5, #1
 8010dea:	1c60      	adds	r0, r4, #1
 8010dec:	45c3      	cmp	fp, r8
 8010dee:	eba3 0205 	sub.w	r2, r3, r5
 8010df2:	eb09 0105 	add.w	r1, r9, r5
 8010df6:	4450      	add	r0, sl
 8010df8:	f77f ae21 	ble.w	8010a3e <kalman_3gyro.constprop.0+0x122e>
 8010dfc:	f009 fa76 	bl	801a2ec <memcpy>
 8010e00:	9b02      	ldr	r3, [sp, #8]
 8010e02:	441c      	add	r4, r3
 8010e04:	9b04      	ldr	r3, [sp, #16]
 8010e06:	1b5a      	subs	r2, r3, r5
 8010e08:	1b64      	subs	r4, r4, r5
 8010e0a:	eb02 0508 	add.w	r5, r2, r8
 8010e0e:	e616      	b.n	8010a3e <kalman_3gyro.constprop.0+0x122e>
 8010e10:	eef4 7a48 	vcmp.f32	s15, s16
 8010e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e18:	f43f ae46 	beq.w	8010aa8 <kalman_3gyro.constprop.0+0x1298>
 8010e1c:	eef4 7a4b 	vcmp.f32	s15, s22
 8010e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e24:	f43f ae40 	beq.w	8010aa8 <kalman_3gyro.constprop.0+0x1298>
 8010e28:	eeb4 7a48 	vcmp.f32	s14, s16
 8010e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e30:	f43f ae3a 	beq.w	8010aa8 <kalman_3gyro.constprop.0+0x1298>
 8010e34:	eeb4 7a4b 	vcmp.f32	s14, s22
 8010e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e3c:	f43f ae34 	beq.w	8010aa8 <kalman_3gyro.constprop.0+0x1298>
 8010e40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010e44:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010e48:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010e4c:	e632      	b.n	8010ab4 <kalman_3gyro.constprop.0+0x12a4>
 8010e4e:	2304      	movs	r3, #4
 8010e50:	9301      	str	r3, [sp, #4]
 8010e52:	2200      	movs	r2, #0
 8010e54:	461c      	mov	r4, r3
 8010e56:	2307      	movs	r3, #7
 8010e58:	4694      	mov	ip, r2
 8010e5a:	2106      	movs	r1, #6
 8010e5c:	9302      	str	r3, [sp, #8]
 8010e5e:	2603      	movs	r6, #3
 8010e60:	f04f 0a01 	mov.w	sl, #1
 8010e64:	f7ff ba5c 	b.w	8010320 <kalman_3gyro.constprop.0+0xb10>
 8010e68:	9a08      	ldr	r2, [sp, #32]
 8010e6a:	eddf 7a62 	vldr	s15, [pc, #392]	; 8010ff4 <kalman_3gyro.constprop.0+0x17e4>
 8010e6e:	eddf 5a62 	vldr	s11, [pc, #392]	; 8010ff8 <kalman_3gyro.constprop.0+0x17e8>
 8010e72:	ed9f 5a62 	vldr	s10, [pc, #392]	; 8010ffc <kalman_3gyro.constprop.0+0x17ec>
 8010e76:	4b62      	ldr	r3, [pc, #392]	; (8011000 <kalman_3gyro.constprop.0+0x17f0>)
 8010e78:	edc2 7a00 	vstr	s15, [r2]
 8010e7c:	eeb0 4a65 	vmov.f32	s8, s11
 8010e80:	eeb0 3a67 	vmov.f32	s6, s15
 8010e84:	eef0 4a45 	vmov.f32	s9, s10
 8010e88:	6053      	str	r3, [r2, #4]
 8010e8a:	6093      	str	r3, [r2, #8]
 8010e8c:	f7fe bd3e 	b.w	800f90c <kalman_3gyro.constprop.0+0xfc>
 8010e90:	2308      	movs	r3, #8
 8010e92:	2005      	movs	r0, #5
 8010e94:	f04f 0802 	mov.w	r8, #2
 8010e98:	f7ff ba5c 	b.w	8010354 <kalman_3gyro.constprop.0+0xb44>
 8010e9c:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 8010ea6:	ed88 7a07 	vstr	s14, [r8, #28]
 8010eaa:	ed88 7a08 	vstr	s14, [r8, #32]
 8010eae:	ed88 7a09 	vstr	s14, [r8, #36]	; 0x24
 8010eb2:	ed88 7a0a 	vstr	s14, [r8, #40]	; 0x28
 8010eb6:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
 8010eba:	e65f      	b.n	8010b7c <kalman_3gyro.constprop.0+0x136c>
 8010ebc:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 8010ec0:	eeb4 5ac8 	vcmpe.f32	s10, s16
 8010ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec8:	f342 83b2 	ble.w	8013630 <kalman_3gyro.constprop.0+0x3e20>
 8010ecc:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed4:	f2c2 86e9 	blt.w	8013caa <kalman_3gyro.constprop.0+0x449a>
 8010ed8:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 8010edc:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ee4:	f342 8712 	ble.w	8013d0c <kalman_3gyro.constprop.0+0x44fc>
 8010ee8:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 8010eec:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 8010ef0:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010ef4:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010ef8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010efc:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010f00:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010f04:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010f08:	f002 bed8 	b.w	8013cbc <kalman_3gyro.constprop.0+0x44ac>
 8010f0c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010f10:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f18:	f342 84bd 	ble.w	8013896 <kalman_3gyro.constprop.0+0x4086>
 8010f1c:	ed9f 8a39 	vldr	s16, [pc, #228]	; 8011004 <kalman_3gyro.constprop.0+0x17f4>
 8010f20:	f7ff b993 	b.w	801024a <kalman_3gyro.constprop.0+0xa3a>
 8010f24:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010f28:	eeb4 bac7 	vcmpe.f32	s22, s14
 8010f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f30:	f342 849f 	ble.w	8013872 <kalman_3gyro.constprop.0+0x4062>
 8010f34:	ed9f ba33 	vldr	s22, [pc, #204]	; 8011004 <kalman_3gyro.constprop.0+0x17f4>
 8010f38:	f7ff b964 	b.w	8010204 <kalman_3gyro.constprop.0+0x9f4>
 8010f3c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010f40:	eef4 dac7 	vcmpe.f32	s27, s14
 8010f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f48:	f342 84b7 	ble.w	80138ba <kalman_3gyro.constprop.0+0x40aa>
 8010f4c:	eddf da2d 	vldr	s27, [pc, #180]	; 8011004 <kalman_3gyro.constprop.0+0x17f4>
 8010f50:	f7ff b935 	b.w	80101be <kalman_3gyro.constprop.0+0x9ae>
 8010f54:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010f58:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f60:	f342 8475 	ble.w	801384e <kalman_3gyro.constprop.0+0x403e>
 8010f64:	ed9f 8a27 	vldr	s16, [pc, #156]	; 8011004 <kalman_3gyro.constprop.0+0x17f4>
 8010f68:	f7ff b8c3 	b.w	80100f2 <kalman_3gyro.constprop.0+0x8e2>
 8010f6c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010f70:	eeb4 bac7 	vcmpe.f32	s22, s14
 8010f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f78:	f342 83a0 	ble.w	80136bc <kalman_3gyro.constprop.0+0x3eac>
 8010f7c:	ed9f ba21 	vldr	s22, [pc, #132]	; 8011004 <kalman_3gyro.constprop.0+0x17f4>
 8010f80:	f7ff b894 	b.w	80100ac <kalman_3gyro.constprop.0+0x89c>
 8010f84:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010f88:	eef4 dac7 	vcmpe.f32	s27, s14
 8010f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f90:	f342 8382 	ble.w	8013698 <kalman_3gyro.constprop.0+0x3e88>
 8010f94:	eddf da1b 	vldr	s27, [pc, #108]	; 8011004 <kalman_3gyro.constprop.0+0x17f4>
 8010f98:	f7ff b865 	b.w	8010066 <kalman_3gyro.constprop.0+0x856>
 8010f9c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010fa0:	eef4 dac7 	vcmpe.f32	s27, s14
 8010fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa8:	f342 8364 	ble.w	8013674 <kalman_3gyro.constprop.0+0x3e64>
 8010fac:	eddf da15 	vldr	s27, [pc, #84]	; 8011004 <kalman_3gyro.constprop.0+0x17f4>
 8010fb0:	f7fe bff3 	b.w	800ff9a <kalman_3gyro.constprop.0+0x78a>
 8010fb4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010fb8:	eeb4 eac7 	vcmpe.f32	s28, s14
 8010fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fc0:	f342 8346 	ble.w	8013650 <kalman_3gyro.constprop.0+0x3e40>
 8010fc4:	ed9f ea0f 	vldr	s28, [pc, #60]	; 8011004 <kalman_3gyro.constprop.0+0x17f4>
 8010fc8:	f7fe bfc4 	b.w	800ff54 <kalman_3gyro.constprop.0+0x744>
 8010fcc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010fd0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd8:	f342 839e 	ble.w	8013718 <kalman_3gyro.constprop.0+0x3f08>
 8010fdc:	ed9f 8a09 	vldr	s16, [pc, #36]	; 8011004 <kalman_3gyro.constprop.0+0x17f4>
 8010fe0:	f7fe bf95 	b.w	800ff0e <kalman_3gyro.constprop.0+0x6fe>
 8010fe4:	eef1 3a63 	vneg.f32	s7, s7
 8010fe8:	f7ff bb42 	b.w	8010670 <kalman_3gyro.constprop.0+0xe60>
 8010fec:	eef1 3a63 	vneg.f32	s7, s7
 8010ff0:	f7ff bb1b 	b.w	801062a <kalman_3gyro.constprop.0+0xe1a>
 8010ff4:	00000000 	.word	0x00000000
 8010ff8:	3fb33333 	.word	0x3fb33333
 8010ffc:	bfb33333 	.word	0xbfb33333
 8011000:	3f333333 	.word	0x3f333333
 8011004:	80000000 	.word	0x80000000
 8011008:	3fb77778 	.word	0x3fb77778
 801100c:	3f99999a 	.word	0x3f99999a
 8011010:	3f4ccccd 	.word	0x3f4ccccd
 8011014:	42d40000 	.word	0x42d40000
 8011018:	46979000 	.word	0x46979000
 801101c:	4415c000 	.word	0x4415c000
 8011020:	3ba3d70a 	.word	0x3ba3d70a
 8011024:	3b449ba6 	.word	0x3b449ba6
 8011028:	3c75c28f 	.word	0x3c75c28f
 801102c:	3c23d70a 	.word	0x3c23d70a
 8011030:	3d4cccc0 	.word	0x3d4cccc0
 8011034:	43480000 	.word	0x43480000
 8011038:	3d4ccccd 	.word	0x3d4ccccd
 801103c:	3cf5c28f 	.word	0x3cf5c28f
 8011040:	3eb33334 	.word	0x3eb33334
 8011044:	3f933333 	.word	0x3f933333
 8011048:	4247ffff 	.word	0x4247ffff
 801104c:	3dcccccd 	.word	0x3dcccccd
 8011050:	3e4ccccd 	.word	0x3e4ccccd
 8011054:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 8011058:	eeb0 ba4e 	vmov.f32	s22, s28
 801105c:	eddb da74 	vldr	s27, [fp, #464]	; 0x1d0
 8011060:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 8011064:	ed5f 4a07 	vldr	s9, [pc, #-28]	; 801104c <kalman_3gyro.constprop.0+0x183c>
 8011068:	ee79 da6d 	vsub.f32	s27, s18, s27
 801106c:	ee3c 5a47 	vsub.f32	s10, s24, s14
 8011070:	eef0 daed 	vabs.f32	s27, s27
 8011074:	eeb0 5ac5 	vabs.f32	s10, s10
 8011078:	ee35 5a2d 	vadd.f32	s10, s10, s27
 801107c:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8011080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011084:	f340 821c 	ble.w	80114c0 <kalman_3gyro.constprop.0+0x1cb0>
 8011088:	ed1f 4a21 	vldr	s8, [pc, #-132]	; 8011008 <kalman_3gyro.constprop.0+0x17f8>
 801108c:	eeb4 5ac4 	vcmpe.f32	s10, s8
 8011090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011094:	f302 828b 	bgt.w	80135ae <kalman_3gyro.constprop.0+0x3d9e>
 8011098:	ee35 5a64 	vsub.f32	s10, s10, s9
 801109c:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 80110a0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80110a4:	eee5 4a04 	vfma.f32	s9, s10, s8
 80110a8:	eeb0 5a64 	vmov.f32	s10, s9
 80110ac:	eeb4 5aea 	vcmpe.f32	s10, s21
 80110b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110b4:	f89b 3000 	ldrb.w	r3, [fp]
 80110b8:	bfb8      	it	lt
 80110ba:	eeb0 5a6a 	vmovlt.f32	s10, s21
 80110be:	ed8d 5a01 	vstr	s10, [sp, #4]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	f000 81f9 	beq.w	80114ba <kalman_3gyro.constprop.0+0x1caa>
 80110c8:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	f000 81de 	beq.w	801148e <kalman_3gyro.constprop.0+0x1c7e>
 80110d2:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 80110d6:	2300      	movs	r3, #0
 80110d8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80110dc:	eeb0 6a61 	vmov.f32	s12, s3
 80110e0:	eea7 6a47 	vfms.f32	s12, s14, s14
 80110e4:	9908      	ldr	r1, [sp, #32]
 80110e6:	eddd 3a37 	vldr	s7, [sp, #220]	; 0xdc
 80110ea:	ed9d 5a38 	vldr	s10, [sp, #224]	; 0xe0
 80110ee:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 80110f2:	eddd 6a39 	vldr	s13, [sp, #228]	; 0xe4
 80110f6:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 80110fa:	eef1 0ac6 	vsqrt.f32	s1, s12
 80110fe:	2200      	movs	r2, #0
 8011100:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 8011104:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 8011108:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 801110c:	9233      	str	r2, [sp, #204]	; 0xcc
 801110e:	ee23 6aa3 	vmul.f32	s12, s7, s7
 8011112:	ee23 4a85 	vmul.f32	s8, s7, s10
 8011116:	ee36 2a06 	vadd.f32	s4, s12, s12
 801111a:	ee25 6a05 	vmul.f32	s12, s10, s10
 801111e:	ee22 1aa2 	vmul.f32	s2, s5, s5
 8011122:	ee36 6a06 	vadd.f32	s12, s12, s12
 8011126:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801112a:	ee63 4aa6 	vmul.f32	s9, s7, s13
 801112e:	ee34 4a04 	vadd.f32	s8, s8, s8
 8011132:	eeb0 3a42 	vmov.f32	s6, s4
 8011136:	ee22 0aa6 	vmul.f32	s0, s5, s13
 801113a:	eea1 3a25 	vfma.f32	s6, s2, s11
 801113e:	eef0 aa46 	vmov.f32	s21, s12
 8011142:	ee62 3aa3 	vmul.f32	s7, s5, s7
 8011146:	eee1 aa25 	vfma.f32	s21, s2, s11
 801114a:	ee74 4aa4 	vadd.f32	s9, s9, s9
 801114e:	ee65 6a26 	vmul.f32	s13, s10, s13
 8011152:	ee22 5a85 	vmul.f32	s10, s5, s10
 8011156:	eef0 2a44 	vmov.f32	s5, s8
 801115a:	eee0 2a25 	vfma.f32	s5, s0, s11
 801115e:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011162:	eeb0 fa64 	vmov.f32	s30, s9
 8011166:	eea0 4a65 	vfms.f32	s8, s0, s11
 801116a:	ee71 fac3 	vsub.f32	s31, s3, s6
 801116e:	ee95 fa25 	vfnms.f32	s30, s10, s11
 8011172:	eeb0 1a6a 	vmov.f32	s2, s21
 8011176:	eef0 aa66 	vmov.f32	s21, s13
 801117a:	eee3 aaa5 	vfma.f32	s21, s7, s11
 801117e:	ee31 1ac1 	vsub.f32	s2, s3, s2
 8011182:	ee2f 0a87 	vmul.f32	s0, s31, s14
 8011186:	ee32 6a06 	vadd.f32	s12, s4, s12
 801118a:	ee22 2a87 	vmul.f32	s4, s5, s14
 801118e:	eea0 0a84 	vfma.f32	s0, s1, s8
 8011192:	eea0 2a81 	vfma.f32	s4, s1, s2
 8011196:	ee2f 7a07 	vmul.f32	s14, s30, s14
 801119a:	eed3 6aa5 	vfnms.f32	s13, s7, s11
 801119e:	eef0 3a64 	vmov.f32	s7, s9
 80111a2:	eee5 3a65 	vfms.f32	s7, s10, s11
 80111a6:	eee5 4a25 	vfma.f32	s9, s10, s11
 80111aa:	ee33 3a61 	vsub.f32	s6, s6, s3
 80111ae:	edd1 5a02 	vldr	s11, [r1, #8]
 80111b2:	ed91 5a05 	vldr	s10, [r1, #20]
 80111b6:	edcd fa53 	vstr	s31, [sp, #332]	; 0x14c
 80111ba:	ee31 6ac6 	vsub.f32	s12, s3, s12
 80111be:	eea0 7aaa 	vfma.f32	s14, s1, s21
 80111c2:	edd1 1a01 	vldr	s3, [r1, #4]
 80111c6:	edd1 fa00 	vldr	s31, [r1]
 80111ca:	ed8d 4a52 	vstr	s8, [sp, #328]	; 0x148
 80111ce:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80111d2:	ee31 2ac2 	vsub.f32	s4, s3, s4
 80111d6:	edd1 5a03 	vldr	s11, [r1, #12]
 80111da:	edd1 1a04 	vldr	s3, [r1, #16]
 80111de:	ed1f 4a75 	vldr	s8, [pc, #-468]	; 801100c <kalman_3gyro.constprop.0+0x17fc>
 80111e2:	edcd 2a50 	vstr	s5, [sp, #320]	; 0x140
 80111e6:	ee33 3a05 	vadd.f32	s6, s6, s10
 80111ea:	ee71 2ae2 	vsub.f32	s5, s3, s5
 80111ee:	ee73 3aa5 	vadd.f32	s7, s7, s11
 80111f2:	ee3f 7ac7 	vsub.f32	s14, s31, s14
 80111f6:	eef4 7ac4 	vcmpe.f32	s15, s8
 80111fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111fe:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
 8011202:	ed8d 0a7d 	vstr	s0, [sp, #500]	; 0x1f4
 8011206:	ed8d 1a4f 	vstr	s2, [sp, #316]	; 0x13c
 801120a:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 801120e:	ed8d 2a7c 	vstr	s4, [sp, #496]	; 0x1f0
 8011212:	ed8d fa4d 	vstr	s30, [sp, #308]	; 0x134
 8011216:	edcd aa4c 	vstr	s21, [sp, #304]	; 0x130
 801121a:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 801121e:	ed8d 7a7b 	vstr	s14, [sp, #492]	; 0x1ec
 8011222:	edcd 2a2e 	vstr	s5, [sp, #184]	; 0xb8
 8011226:	edcd 2a7f 	vstr	s5, [sp, #508]	; 0x1fc
 801122a:	edcd 4a51 	vstr	s9, [sp, #324]	; 0x144
 801122e:	edcd 3a2d 	vstr	s7, [sp, #180]	; 0xb4
 8011232:	edcd 3a7e 	vstr	s7, [sp, #504]	; 0x1f8
 8011236:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 801123a:	ed8d 3a80 	vstr	s6, [sp, #512]	; 0x200
 801123e:	ed8d ca84 	vstr	s24, [sp, #528]	; 0x210
 8011242:	ed8d aa85 	vstr	s20, [sp, #532]	; 0x214
 8011246:	ed8d 9a86 	vstr	s18, [sp, #536]	; 0x218
 801124a:	d506      	bpl.n	801125a <kalman_3gyro.constprop.0+0x1a4a>
 801124c:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 8011010 <kalman_3gyro.constprop.0+0x1800>
 8011250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011258:	dc01      	bgt.n	801125e <kalman_3gyro.constprop.0+0x1a4e>
 801125a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801125e:	ee7a 7a67 	vsub.f32	s15, s20, s15
 8011262:	eef0 7ae7 	vabs.f32	s15, s15
 8011266:	ee77 7aab 	vadd.f32	s15, s15, s23
 801126a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011272:	f340 8141 	ble.w	80114f8 <kalman_3gyro.constprop.0+0x1ce8>
 8011276:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801127a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011282:	f142 8198 	bpl.w	80135b6 <kalman_3gyro.constprop.0+0x3da6>
 8011286:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 8011020 <kalman_3gyro.constprop.0+0x1810>
 801128a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801128e:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 801102c <kalman_3gyro.constprop.0+0x181c>
 8011292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011296:	eef4 7ac7 	vcmpe.f32	s15, s14
 801129a:	f102 8221 	bmi.w	80136e0 <kalman_3gyro.constprop.0+0x3ed0>
 801129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112a2:	f142 8221 	bpl.w	80136e8 <kalman_3gyro.constprop.0+0x3ed8>
 80112a6:	ed1f 7aa0 	vldr	s14, [pc, #-640]	; 8011028 <kalman_3gyro.constprop.0+0x1818>
 80112aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112b2:	f282 84a4 	bge.w	8013bfe <kalman_3gyro.constprop.0+0x43ee>
 80112b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112ba:	ed5f 6aa0 	vldr	s13, [pc, #-640]	; 801103c <kalman_3gyro.constprop.0+0x182c>
 80112be:	eef4 7ae6 	vcmpe.f32	s15, s13
 80112c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c6:	f2c2 84b0 	blt.w	8013c2a <kalman_3gyro.constprop.0+0x441a>
 80112ca:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 8011038 <kalman_3gyro.constprop.0+0x1828>
 80112ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d6:	f142 84b0 	bpl.w	8013c3a <kalman_3gyro.constprop.0+0x442a>
 80112da:	ed5f 6aa8 	vldr	s13, [pc, #-672]	; 801103c <kalman_3gyro.constprop.0+0x182c>
 80112de:	ed1f 6aa6 	vldr	s12, [pc, #-664]	; 8011048 <kalman_3gyro.constprop.0+0x1838>
 80112e2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80112e6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80112ea:	ee66 6a87 	vmul.f32	s13, s13, s14
 80112ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80112f2:	eea6 7a86 	vfma.f32	s14, s13, s12
 80112f6:	ed5f 6aab 	vldr	s13, [pc, #-684]	; 801104c <kalman_3gyro.constprop.0+0x183c>
 80112fa:	eef4 7ae6 	vcmpe.f32	s15, s13
 80112fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011302:	f2c2 84b0 	blt.w	8013c66 <kalman_3gyro.constprop.0+0x4456>
 8011306:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 8011050 <kalman_3gyro.constprop.0+0x1840>
 801130a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011312:	f142 84b0 	bpl.w	8013c76 <kalman_3gyro.constprop.0+0x4466>
 8011316:	ed5f 6ab3 	vldr	s13, [pc, #-716]	; 801104c <kalman_3gyro.constprop.0+0x183c>
 801131a:	ed1f 7ac2 	vldr	s14, [pc, #-776]	; 8011014 <kalman_3gyro.constprop.0+0x1804>
 801131e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011322:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8011326:	ee66 6a87 	vmul.f32	s13, s13, s14
 801132a:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 801132e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011332:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011336:	eef4 7ae6 	vcmpe.f32	s15, s13
 801133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801133e:	db0d      	blt.n	801135c <kalman_3gyro.constprop.0+0x1b4c>
 8011340:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011344:	ed1f 6acc 	vldr	s12, [pc, #-816]	; 8011018 <kalman_3gyro.constprop.0+0x1808>
 8011348:	ed1f 7acc 	vldr	s14, [pc, #-816]	; 801101c <kalman_3gyro.constprop.0+0x180c>
 801134c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011350:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011354:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011358:	eea6 7a86 	vfma.f32	s14, s13, s12
 801135c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011360:	ee77 6a26 	vadd.f32	s13, s14, s13
 8011364:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011368:	eec6 4a26 	vdiv.f32	s9, s12, s13
 801136c:	ed1f 6ad2 	vldr	s12, [pc, #-840]	; 8011028 <kalman_3gyro.constprop.0+0x1818>
 8011370:	ed5f 3ad5 	vldr	s7, [pc, #-852]	; 8011020 <kalman_3gyro.constprop.0+0x1810>
 8011374:	ed5f 6ad3 	vldr	s13, [pc, #-844]	; 801102c <kalman_3gyro.constprop.0+0x181c>
 8011378:	ed1f 4ad6 	vldr	s8, [pc, #-856]	; 8011024 <kalman_3gyro.constprop.0+0x1814>
 801137c:	eef4 4ac6 	vcmpe.f32	s9, s12
 8011380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011384:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011388:	bfb8      	it	lt
 801138a:	eef0 4a46 	vmovlt.f32	s9, s12
 801138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011392:	ee24 4a84 	vmul.f32	s8, s9, s8
 8011396:	ee24 6aa6 	vmul.f32	s12, s9, s13
 801139a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801139e:	f142 841f 	bpl.w	8013be0 <kalman_3gyro.constprop.0+0x43d0>
 80113a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a6:	f2c2 841f 	blt.w	8013be8 <kalman_3gyro.constprop.0+0x43d8>
 80113aa:	ed5f 6ae1 	vldr	s13, [pc, #-900]	; 8011028 <kalman_3gyro.constprop.0+0x1818>
 80113ae:	eef4 7ae6 	vcmpe.f32	s15, s13
 80113b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b6:	f142 83ba 	bpl.w	8013b2e <kalman_3gyro.constprop.0+0x431e>
 80113ba:	ed5f 3ae4 	vldr	s7, [pc, #-912]	; 801102c <kalman_3gyro.constprop.0+0x181c>
 80113be:	ed5f 2ae4 	vldr	s5, [pc, #-912]	; 8011030 <kalman_3gyro.constprop.0+0x1820>
 80113c2:	ed1f 3ae4 	vldr	s6, [pc, #-912]	; 8011034 <kalman_3gyro.constprop.0+0x1824>
 80113c6:	ee77 3ae3 	vsub.f32	s7, s15, s7
 80113ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80113ce:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80113d2:	eee3 6a83 	vfma.f32	s13, s7, s6
 80113d6:	eeb0 ca66 	vmov.f32	s24, s13
 80113da:	ed5f 6ae8 	vldr	s13, [pc, #-928]	; 801103c <kalman_3gyro.constprop.0+0x182c>
 80113de:	eef4 7ae6 	vcmpe.f32	s15, s13
 80113e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e6:	f2c2 83ba 	blt.w	8013b5e <kalman_3gyro.constprop.0+0x434e>
 80113ea:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 8011038 <kalman_3gyro.constprop.0+0x1828>
 80113ee:	eef4 7ae6 	vcmpe.f32	s15, s13
 80113f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f6:	f142 83ba 	bpl.w	8013b6e <kalman_3gyro.constprop.0+0x435e>
 80113fa:	ed5f 3af0 	vldr	s7, [pc, #-960]	; 801103c <kalman_3gyro.constprop.0+0x182c>
 80113fe:	ed5f 2af0 	vldr	s5, [pc, #-960]	; 8011040 <kalman_3gyro.constprop.0+0x1830>
 8011402:	ed1f 3aef 	vldr	s6, [pc, #-956]	; 8011048 <kalman_3gyro.constprop.0+0x1838>
 8011406:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 8011044 <kalman_3gyro.constprop.0+0x1834>
 801140a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 801140e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8011412:	eee3 6a83 	vfma.f32	s13, s7, s6
 8011416:	eeb0 ca66 	vmov.f32	s24, s13
 801141a:	ed5f 6af4 	vldr	s13, [pc, #-976]	; 801104c <kalman_3gyro.constprop.0+0x183c>
 801141e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011426:	f2c2 83ba 	blt.w	8013b9e <kalman_3gyro.constprop.0+0x438e>
 801142a:	ed5f 6af7 	vldr	s13, [pc, #-988]	; 8011050 <kalman_3gyro.constprop.0+0x1840>
 801142e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011436:	f142 83ba 	bpl.w	8013bae <kalman_3gyro.constprop.0+0x439e>
 801143a:	eddf 3a23 	vldr	s7, [pc, #140]	; 80114c8 <kalman_3gyro.constprop.0+0x1cb8>
 801143e:	eddf 6a23 	vldr	s13, [pc, #140]	; 80114cc <kalman_3gyro.constprop.0+0x1cbc>
 8011442:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8011446:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
 801144a:	ee63 3aa6 	vmul.f32	s7, s7, s13
 801144e:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 8011452:	eee3 6a83 	vfma.f32	s13, s7, s6
 8011456:	eeb0 ca66 	vmov.f32	s24, s13
 801145a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801145e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011466:	f2c2 80b0 	blt.w	80135ca <kalman_3gyro.constprop.0+0x3dba>
 801146a:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 801146e:	ee37 3ae3 	vsub.f32	s6, s15, s7
 8011472:	eddf 3a17 	vldr	s7, [pc, #92]	; 80114d0 <kalman_3gyro.constprop.0+0x1cc0>
 8011476:	eddf 6a17 	vldr	s13, [pc, #92]	; 80114d4 <kalman_3gyro.constprop.0+0x1cc4>
 801147a:	ee63 3a23 	vmul.f32	s7, s6, s7
 801147e:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 8011482:	eee3 6a83 	vfma.f32	s13, s7, s6
 8011486:	eeb0 ca66 	vmov.f32	s24, s13
 801148a:	f002 b89e 	b.w	80135ca <kalman_3gyro.constprop.0+0x3dba>
 801148e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011492:	ed9b 6a05 	vldr	s12, [fp, #20]
 8011496:	ee75 5aa6 	vadd.f32	s11, s11, s13
 801149a:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 801149e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80114a2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80114a6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80114aa:	ee66 6a26 	vmul.f32	s13, s12, s13
 80114ae:	eef4 7ae6 	vcmpe.f32	s15, s13
 80114b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114b6:	f102 8246 	bmi.w	8013946 <kalman_3gyro.constprop.0+0x4136>
 80114ba:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 80114be:	e60b      	b.n	80110d8 <kalman_3gyro.constprop.0+0x18c8>
 80114c0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80114c4:	e5f2      	b.n	80110ac <kalman_3gyro.constprop.0+0x189c>
 80114c6:	bf00      	nop
 80114c8:	3dcccccd 	.word	0x3dcccccd
 80114cc:	410c0000 	.word	0x410c0000
 80114d0:	42c80000 	.word	0x42c80000
 80114d4:	424a0000 	.word	0x424a0000
 80114d8:	3c23d70a 	.word	0x3c23d70a
 80114dc:	3b449ba6 	.word	0x3b449ba6
 80114e0:	3fb33333 	.word	0x3fb33333
 80114e4:	3ecccccd 	.word	0x3ecccccd
 80114e8:	3f8f5c29 	.word	0x3f8f5c29
 80114ec:	3f59999a 	.word	0x3f59999a
 80114f0:	3e4ccccd 	.word	0x3e4ccccd
 80114f4:	3f99999a 	.word	0x3f99999a
 80114f8:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 80114fc:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 80114d8 <kalman_3gyro.constprop.0+0x1cc8>
 8011500:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 80114dc <kalman_3gyro.constprop.0+0x1ccc>
 8011504:	eeb0 7a4c 	vmov.f32	s14, s24
 8011508:	eef0 4a4c 	vmov.f32	s9, s24
 801150c:	eddd 6a01 	vldr	s13, [sp, #4]
 8011510:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 8011514:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 8011518:	ed9d 2a72 	vldr	s4, [sp, #456]	; 0x1c8
 801151c:	ed8d 4a48 	vstr	s8, [sp, #288]	; 0x120
 8011520:	ee66 aa8b 	vmul.f32	s21, s13, s22
 8011524:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 8011528:	ed9d ba71 	vldr	s22, [sp, #452]	; 0x1c4
 801152c:	ed9d 4a0d 	vldr	s8, [sp, #52]	; 0x34
 8011530:	f89b 200c 	ldrb.w	r2, [fp, #12]
 8011534:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 8011538:	ee76 3aa6 	vadd.f32	s7, s13, s13
 801153c:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 8011540:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 8011544:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011548:	ee2a 3a83 	vmul.f32	s6, s21, s6
 801154c:	ee62 2aaa 	vmul.f32	s5, s5, s21
 8011550:	ee63 3a87 	vmul.f32	s7, s7, s14
 8011554:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011558:	ee6b aa2a 	vmul.f32	s21, s22, s21
 801155c:	ee2e ea02 	vmul.f32	s28, s28, s4
 8011560:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 8011564:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 8011568:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 801156c:	ed8d 4a7a 	vstr	s8, [sp, #488]	; 0x1e8
 8011570:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 8011574:	edcd 2a70 	vstr	s5, [sp, #448]	; 0x1c0
 8011578:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 801157c:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 8011580:	2a00      	cmp	r2, #0
 8011582:	f001 8411 	beq.w	8012da8 <kalman_3gyro.constprop.0+0x3598>
 8011586:	ee77 2a07 	vadd.f32	s5, s14, s14
 801158a:	ed9d 4a29 	vldr	s8, [sp, #164]	; 0xa4
 801158e:	f89b 100e 	ldrb.w	r1, [fp, #14]
 8011592:	f89b 200d 	ldrb.w	r2, [fp, #13]
 8011596:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 801159a:	ee24 4a24 	vmul.f32	s8, s8, s9
 801159e:	ee27 ea0e 	vmul.f32	s28, s14, s28
 80115a2:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80115a6:	ee29 7a87 	vmul.f32	s14, s19, s14
 80115aa:	ee26 6a24 	vmul.f32	s12, s12, s9
 80115ae:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 80115b2:	ed8d 4a42 	vstr	s8, [sp, #264]	; 0x108
 80115b6:	ed8d 4a43 	vstr	s8, [sp, #268]	; 0x10c
 80115ba:	ed8d 4a44 	vstr	s8, [sp, #272]	; 0x110
 80115be:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 80115c2:	ed8d 7a73 	vstr	s14, [sp, #460]	; 0x1cc
 80115c6:	ed8d 7a74 	vstr	s14, [sp, #464]	; 0x1d0
 80115ca:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 80115ce:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 80115d2:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 80115d6:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 80115da:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 80115de:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 80115e2:	b159      	cbz	r1, 80115fc <kalman_3gyro.constprop.0+0x1dec>
 80115e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80115e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80115ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115f0:	dd04      	ble.n	80115fc <kalman_3gyro.constprop.0+0x1dec>
 80115f2:	2000      	movs	r0, #0
 80115f4:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 80115f8:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 80115fc:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8011600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011604:	dd09      	ble.n	801161a <kalman_3gyro.constprop.0+0x1e0a>
 8011606:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 801160a:	eef4 7ac8 	vcmpe.f32	s15, s16
 801160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011612:	db02      	blt.n	801161a <kalman_3gyro.constprop.0+0x1e0a>
 8011614:	2b00      	cmp	r3, #0
 8011616:	f002 8001 	beq.w	801361c <kalman_3gyro.constprop.0+0x3e0c>
 801161a:	b132      	cbz	r2, 801162a <kalman_3gyro.constprop.0+0x1e1a>
 801161c:	f240 1001 	movw	r0, #257	; 0x101
 8011620:	2301      	movs	r3, #1
 8011622:	f8ad 00a8 	strh.w	r0, [sp, #168]	; 0xa8
 8011626:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 801162a:	2301      	movs	r3, #1
 801162c:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8011630:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8011634:	ed5f 7a56 	vldr	s15, [pc, #-344]	; 80114e0 <kalman_3gyro.constprop.0+0x1cd0>
 8011638:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011640:	dc09      	bgt.n	8011656 <kalman_3gyro.constprop.0+0x1e46>
 8011642:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 80114e4 <kalman_3gyro.constprop.0+0x1cd4>
 8011646:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801164e:	d402      	bmi.n	8011656 <kalman_3gyro.constprop.0+0x1e46>
 8011650:	2a00      	cmp	r2, #0
 8011652:	f042 80e4 	bne.w	801381e <kalman_3gyro.constprop.0+0x400e>
 8011656:	2300      	movs	r3, #0
 8011658:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 801165c:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8011660:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8011664:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8011668:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 80114e8 <kalman_3gyro.constprop.0+0x1cd8>
 801166c:	eeb4 aae7 	vcmpe.f32	s20, s15
 8011670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011674:	dc09      	bgt.n	801168a <kalman_3gyro.constprop.0+0x1e7a>
 8011676:	ed5f 7a63 	vldr	s15, [pc, #-396]	; 80114ec <kalman_3gyro.constprop.0+0x1cdc>
 801167a:	eeb4 aae7 	vcmpe.f32	s20, s15
 801167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011682:	d402      	bmi.n	801168a <kalman_3gyro.constprop.0+0x1e7a>
 8011684:	2900      	cmp	r1, #0
 8011686:	f042 8097 	bne.w	80137b8 <kalman_3gyro.constprop.0+0x3fa8>
 801168a:	2300      	movs	r3, #0
 801168c:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 8011690:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 8011694:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8011698:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
 801169c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80116a0:	eef4 dae7 	vcmpe.f32	s27, s15
 80116a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116a8:	f341 836b 	ble.w	8012d82 <kalman_3gyro.constprop.0+0x3572>
 80116ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80116b0:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 80116b4:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 80116b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80116bc:	2300      	movs	r3, #0
 80116be:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80116c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116c6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80116ca:	eef4 dac7 	vcmpe.f32	s27, s14
 80116ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116d2:	bfc4      	itt	gt
 80116d4:	f88d 30b1 	strbgt.w	r3, [sp, #177]	; 0xb1
 80116d8:	f88d 30b3 	strbgt.w	r3, [sp, #179]	; 0xb3
 80116dc:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 80116e0:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 80116e4:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 80116e8:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 80116ec:	2b0e      	cmp	r3, #14
 80116ee:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 80116f2:	dc02      	bgt.n	80116fa <kalman_3gyro.constprop.0+0x1eea>
 80116f4:	3305      	adds	r3, #5
 80116f6:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 80116fa:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80116fe:	eef4 7acd 	vcmpe.f32	s15, s26
 8011702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011706:	f340 82e9 	ble.w	8011cdc <kalman_3gyro.constprop.0+0x24cc>
 801170a:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 801170e:	eef4 7aeb 	vcmpe.f32	s15, s23
 8011712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011716:	f340 82e1 	ble.w	8011cdc <kalman_3gyro.constprop.0+0x24cc>
 801171a:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 801171e:	eef4 7aec 	vcmpe.f32	s15, s25
 8011722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011726:	f340 82d9 	ble.w	8011cdc <kalman_3gyro.constprop.0+0x24cc>
 801172a:	9b08      	ldr	r3, [sp, #32]
 801172c:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 80114f0 <kalman_3gyro.constprop.0+0x1ce0>
 8011730:	ed93 7a06 	vldr	s14, [r3, #24]
 8011734:	eef0 6ac7 	vabs.f32	s13, s14
 8011738:	eef4 6ae7 	vcmpe.f32	s13, s15
 801173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011740:	f140 82cc 	bpl.w	8011cdc <kalman_3gyro.constprop.0+0x24cc>
 8011744:	edd3 6a07 	vldr	s13, [r3, #28]
 8011748:	eeb0 6ae6 	vabs.f32	s12, s13
 801174c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011754:	f140 82c2 	bpl.w	8011cdc <kalman_3gyro.constprop.0+0x24cc>
 8011758:	ed93 6a08 	vldr	s12, [r3, #32]
 801175c:	eef0 4ac6 	vabs.f32	s9, s12
 8011760:	eef4 4ae7 	vcmpe.f32	s9, s15
 8011764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011768:	f140 82b8 	bpl.w	8011cdc <kalman_3gyro.constprop.0+0x24cc>
 801176c:	ed5f 7a9f 	vldr	s15, [pc, #-636]	; 80114f4 <kalman_3gyro.constprop.0+0x1ce4>
 8011770:	eef0 5ae5 	vabs.f32	s11, s11
 8011774:	eef4 5ae7 	vcmpe.f32	s11, s15
 8011778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801177c:	f140 82ae 	bpl.w	8011cdc <kalman_3gyro.constprop.0+0x24cc>
 8011780:	eef0 1ae1 	vabs.f32	s3, s3
 8011784:	eef4 1ae7 	vcmpe.f32	s3, s15
 8011788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801178c:	f140 82a6 	bpl.w	8011cdc <kalman_3gyro.constprop.0+0x24cc>
 8011790:	eeb0 5ac5 	vabs.f32	s10, s10
 8011794:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8011798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801179c:	f140 829e 	bpl.w	8011cdc <kalman_3gyro.constprop.0+0x24cc>
 80117a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80117a2:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 80117a6:	edd3 5a00 	vldr	s11, [r3]
 80117aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117ac:	991d      	ldr	r1, [sp, #116]	; 0x74
 80117ae:	ed93 5a00 	vldr	s10, [r3]
 80117b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80117b4:	eef4 5ac5 	vcmpe.f32	s11, s10
 80117b8:	2a09      	cmp	r2, #9
 80117ba:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 80117be:	ed93 4a00 	vldr	s8, [r3]
 80117c2:	edd4 3a00 	vldr	s7, [r4]
 80117c6:	bf8c      	ite	hi
 80117c8:	230a      	movhi	r3, #10
 80117ca:	2305      	movls	r3, #5
 80117cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117d0:	bfb4      	ite	lt
 80117d2:	eef0 7a45 	vmovlt.f32	s15, s10
 80117d6:	eef0 7a65 	vmovge.f32	s15, s11
 80117da:	bf8c      	ite	hi
 80117dc:	eef0 4a45 	vmovhi.f32	s9, s10
 80117e0:	eef0 4a65 	vmovls.f32	s9, s11
 80117e4:	eef4 7ae3 	vcmpe.f32	s15, s7
 80117e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ec:	eef4 4ae3 	vcmpe.f32	s9, s7
 80117f0:	bfb8      	it	lt
 80117f2:	eef0 7a63 	vmovlt.f32	s15, s7
 80117f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117fa:	bf88      	it	hi
 80117fc:	eef0 4a63 	vmovhi.f32	s9, s7
 8011800:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011808:	ee35 5a85 	vadd.f32	s10, s11, s10
 801180c:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011810:	edd1 5a00 	vldr	s11, [r1]
 8011814:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011816:	bfb8      	it	lt
 8011818:	eef0 7a44 	vmovlt.f32	s15, s8
 801181c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011820:	bf88      	it	hi
 8011822:	eef0 4a44 	vmovhi.f32	s9, s8
 8011826:	eef4 7ae5 	vcmpe.f32	s15, s11
 801182a:	ee35 5a23 	vadd.f32	s10, s10, s7
 801182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011832:	eef4 4ae5 	vcmpe.f32	s9, s11
 8011836:	bfb8      	it	lt
 8011838:	eef0 7a65 	vmovlt.f32	s15, s11
 801183c:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011844:	bf88      	it	hi
 8011846:	eef0 4a65 	vmovhi.f32	s9, s11
 801184a:	2b05      	cmp	r3, #5
 801184c:	ee35 5a25 	vadd.f32	s10, s10, s11
 8011850:	edd1 5a00 	vldr	s11, [r1]
 8011854:	d065      	beq.n	8011922 <kalman_3gyro.constprop.0+0x2112>
 8011856:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 801185a:	edd1 3a00 	vldr	s7, [r1]
 801185e:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 8011862:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011866:	ed91 4a00 	vldr	s8, [r1]
 801186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801186e:	eef4 4ae3 	vcmpe.f32	s9, s7
 8011872:	bfb8      	it	lt
 8011874:	eef0 7a63 	vmovlt.f32	s15, s7
 8011878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801187c:	bf88      	it	hi
 801187e:	eef0 4a63 	vmovhi.f32	s9, s7
 8011882:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011886:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 801188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801188e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011892:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011896:	edd1 3a00 	vldr	s7, [r1]
 801189a:	bfb8      	it	lt
 801189c:	eef0 7a44 	vmovlt.f32	s15, s8
 80118a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a4:	bf88      	it	hi
 80118a6:	eef0 4a44 	vmovhi.f32	s9, s8
 80118aa:	eef4 7ae3 	vcmpe.f32	s15, s7
 80118ae:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 80118b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118b6:	ee35 5a04 	vadd.f32	s10, s10, s8
 80118ba:	eef4 4ae3 	vcmpe.f32	s9, s7
 80118be:	ed91 4a00 	vldr	s8, [r1]
 80118c2:	bfb8      	it	lt
 80118c4:	eef0 7a63 	vmovlt.f32	s15, s7
 80118c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118cc:	bf88      	it	hi
 80118ce:	eef0 4a63 	vmovhi.f32	s9, s7
 80118d2:	eef4 7ac4 	vcmpe.f32	s15, s8
 80118d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118da:	eef4 4ac4 	vcmpe.f32	s9, s8
 80118de:	ee35 5a23 	vadd.f32	s10, s10, s7
 80118e2:	bfb8      	it	lt
 80118e4:	eef0 7a44 	vmovlt.f32	s15, s8
 80118e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ec:	bf88      	it	hi
 80118ee:	eef0 4a44 	vmovhi.f32	s9, s8
 80118f2:	2b0a      	cmp	r3, #10
 80118f4:	ee35 5a04 	vadd.f32	s10, s10, s8
 80118f8:	d113      	bne.n	8011922 <kalman_3gyro.constprop.0+0x2112>
 80118fa:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 80118fe:	ed91 4a00 	vldr	s8, [r1]
 8011902:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801190a:	eef4 4ac4 	vcmpe.f32	s9, s8
 801190e:	bfb8      	it	lt
 8011910:	eef0 7a44 	vmovlt.f32	s15, s8
 8011914:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191c:	bf88      	it	hi
 801191e:	eef0 4a44 	vmovhi.f32	s9, s8
 8011922:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8011926:	eddf 4ae7 	vldr	s9, [pc, #924]	; 8011cc4 <kalman_3gyro.constprop.0+0x24b4>
 801192a:	ed9f 4ae7 	vldr	s8, [pc, #924]	; 8011cc8 <kalman_3gyro.constprop.0+0x24b8>
 801192e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011932:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011936:	eef4 7ae4 	vcmpe.f32	s15, s9
 801193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801193e:	f300 81cd 	bgt.w	8011cdc <kalman_3gyro.constprop.0+0x24cc>
 8011942:	eef0 7ac5 	vabs.f32	s15, s10
 8011946:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801194a:	ed9f 5ae0 	vldr	s10, [pc, #896]	; 8011ccc <kalman_3gyro.constprop.0+0x24bc>
 801194e:	eef4 7ac5 	vcmpe.f32	s15, s10
 8011952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011956:	f300 81c1 	bgt.w	8011cdc <kalman_3gyro.constprop.0+0x24cc>
 801195a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801195c:	ed91 5a00 	vldr	s10, [r1]
 8011960:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011962:	ed91 4a00 	vldr	s8, [r1]
 8011966:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011968:	eeb4 5ac4 	vcmpe.f32	s10, s8
 801196c:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 8011970:	ed90 3a00 	vldr	s6, [r0]
 8011974:	edd1 3a00 	vldr	s7, [r1]
 8011978:	991e      	ldr	r1, [sp, #120]	; 0x78
 801197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801197e:	bfb4      	ite	lt
 8011980:	eef0 7a44 	vmovlt.f32	s15, s8
 8011984:	eef0 7a45 	vmovge.f32	s15, s10
 8011988:	bf8c      	ite	hi
 801198a:	eef0 4a44 	vmovhi.f32	s9, s8
 801198e:	eef0 4a45 	vmovls.f32	s9, s10
 8011992:	eef4 7ac3 	vcmpe.f32	s15, s6
 8011996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801199a:	eef4 4ac3 	vcmpe.f32	s9, s6
 801199e:	bfb8      	it	lt
 80119a0:	eef0 7a43 	vmovlt.f32	s15, s6
 80119a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a8:	bf88      	it	hi
 80119aa:	eef0 4a43 	vmovhi.f32	s9, s6
 80119ae:	eef4 7ae3 	vcmpe.f32	s15, s7
 80119b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b6:	ee35 5a04 	vadd.f32	s10, s10, s8
 80119ba:	eef4 4ae3 	vcmpe.f32	s9, s7
 80119be:	ed91 4a00 	vldr	s8, [r1]
 80119c2:	bfb8      	it	lt
 80119c4:	eef0 7a63 	vmovlt.f32	s15, s7
 80119c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119cc:	bf88      	it	hi
 80119ce:	eef0 4a63 	vmovhi.f32	s9, s7
 80119d2:	eef4 7ac4 	vcmpe.f32	s15, s8
 80119d6:	ee35 5a03 	vadd.f32	s10, s10, s6
 80119da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119de:	eef4 4ac4 	vcmpe.f32	s9, s8
 80119e2:	ee35 5a23 	vadd.f32	s10, s10, s7
 80119e6:	bfb8      	it	lt
 80119e8:	eef0 7a44 	vmovlt.f32	s15, s8
 80119ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119f0:	bf88      	it	hi
 80119f2:	eef0 4a44 	vmovhi.f32	s9, s8
 80119f6:	2b05      	cmp	r3, #5
 80119f8:	ee35 5a04 	vadd.f32	s10, s10, s8
 80119fc:	d065      	beq.n	8011aca <kalman_3gyro.constprop.0+0x22ba>
 80119fe:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 8011a02:	edd1 3a00 	vldr	s7, [r1]
 8011a06:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 8011a0a:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011a0e:	ed91 4a00 	vldr	s8, [r1]
 8011a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a16:	eef4 4ae3 	vcmpe.f32	s9, s7
 8011a1a:	bfb8      	it	lt
 8011a1c:	eef0 7a63 	vmovlt.f32	s15, s7
 8011a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a24:	bf88      	it	hi
 8011a26:	eef0 4a63 	vmovhi.f32	s9, s7
 8011a2a:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011a2e:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8011a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a36:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011a3a:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011a3e:	edd1 3a00 	vldr	s7, [r1]
 8011a42:	bfb8      	it	lt
 8011a44:	eef0 7a44 	vmovlt.f32	s15, s8
 8011a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a4c:	bf88      	it	hi
 8011a4e:	eef0 4a44 	vmovhi.f32	s9, s8
 8011a52:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011a56:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 8011a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a5e:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011a62:	eef4 4ae3 	vcmpe.f32	s9, s7
 8011a66:	ed91 4a00 	vldr	s8, [r1]
 8011a6a:	bfb8      	it	lt
 8011a6c:	eef0 7a63 	vmovlt.f32	s15, s7
 8011a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a74:	bf88      	it	hi
 8011a76:	eef0 4a63 	vmovhi.f32	s9, s7
 8011a7a:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a82:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011a86:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011a8a:	bfb8      	it	lt
 8011a8c:	eef0 7a44 	vmovlt.f32	s15, s8
 8011a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a94:	bf88      	it	hi
 8011a96:	eef0 4a44 	vmovhi.f32	s9, s8
 8011a9a:	2b0a      	cmp	r3, #10
 8011a9c:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011aa0:	d113      	bne.n	8011aca <kalman_3gyro.constprop.0+0x22ba>
 8011aa2:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 8011aa6:	ed91 4a00 	vldr	s8, [r1]
 8011aaa:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ab2:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011ab6:	bfb8      	it	lt
 8011ab8:	eef0 7a44 	vmovlt.f32	s15, s8
 8011abc:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ac4:	bf88      	it	hi
 8011ac6:	eef0 4a44 	vmovhi.f32	s9, s8
 8011aca:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8011ace:	eddf 4a7d 	vldr	s9, [pc, #500]	; 8011cc4 <kalman_3gyro.constprop.0+0x24b4>
 8011ad2:	ed9f 4a7d 	vldr	s8, [pc, #500]	; 8011cc8 <kalman_3gyro.constprop.0+0x24b8>
 8011ad6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011ada:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011ade:	eef4 7ae4 	vcmpe.f32	s15, s9
 8011ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae6:	f300 80f9 	bgt.w	8011cdc <kalman_3gyro.constprop.0+0x24cc>
 8011aea:	eef0 7ac5 	vabs.f32	s15, s10
 8011aee:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011af2:	ed9f 5a76 	vldr	s10, [pc, #472]	; 8011ccc <kalman_3gyro.constprop.0+0x24bc>
 8011af6:	eef4 7ac5 	vcmpe.f32	s15, s10
 8011afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011afe:	f300 80ed 	bgt.w	8011cdc <kalman_3gyro.constprop.0+0x24cc>
 8011b02:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011b04:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8011b06:	edd1 4a00 	vldr	s9, [r1]
 8011b0a:	9919      	ldr	r1, [sp, #100]	; 0x64
 8011b0c:	ed91 3a00 	vldr	s6, [r1]
 8011b10:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011b12:	eef4 4ac3 	vcmpe.f32	s9, s6
 8011b16:	ed91 4a00 	vldr	s8, [r1]
 8011b1a:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 8011b1e:	edd1 3a00 	vldr	s7, [r1]
 8011b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b26:	bfb4      	ite	lt
 8011b28:	eef0 7a43 	vmovlt.f32	s15, s6
 8011b2c:	eef0 7a64 	vmovge.f32	s15, s9
 8011b30:	bf8c      	ite	hi
 8011b32:	eeb0 5a43 	vmovhi.f32	s10, s6
 8011b36:	eeb0 5a64 	vmovls.f32	s10, s9
 8011b3a:	eef4 3ae7 	vcmpe.f32	s7, s15
 8011b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b42:	eef4 3ac5 	vcmpe.f32	s7, s10
 8011b46:	bfa8      	it	ge
 8011b48:	eef0 7a63 	vmovge.f32	s15, s7
 8011b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b50:	bf98      	it	ls
 8011b52:	eeb0 5a63 	vmovls.f32	s10, s7
 8011b56:	eeb4 4ae7 	vcmpe.f32	s8, s15
 8011b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b5e:	ee34 3a83 	vadd.f32	s6, s9, s6
 8011b62:	eeb4 4ac5 	vcmpe.f32	s8, s10
 8011b66:	edd5 4a00 	vldr	s9, [r5]
 8011b6a:	bfa8      	it	ge
 8011b6c:	eef0 7a44 	vmovge.f32	s15, s8
 8011b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b74:	bf98      	it	ls
 8011b76:	eeb0 5a44 	vmovls.f32	s10, s8
 8011b7a:	eef4 7ae4 	vcmpe.f32	s15, s9
 8011b7e:	ee73 3a83 	vadd.f32	s7, s7, s6
 8011b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b86:	eef4 4ac5 	vcmpe.f32	s9, s10
 8011b8a:	bfb8      	it	lt
 8011b8c:	eef0 7a64 	vmovlt.f32	s15, s9
 8011b90:	ee34 4a23 	vadd.f32	s8, s8, s7
 8011b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b98:	bf98      	it	ls
 8011b9a:	eeb0 5a64 	vmovls.f32	s10, s9
 8011b9e:	2b05      	cmp	r3, #5
 8011ba0:	ee74 4a84 	vadd.f32	s9, s9, s8
 8011ba4:	d065      	beq.n	8011c72 <kalman_3gyro.constprop.0+0x2462>
 8011ba6:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 8011baa:	ed95 4a00 	vldr	s8, [r5]
 8011bae:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 8011bb2:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011bb6:	ed95 3a00 	vldr	s6, [r5]
 8011bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bbe:	eeb4 5ac4 	vcmpe.f32	s10, s8
 8011bc2:	bfb8      	it	lt
 8011bc4:	eef0 7a44 	vmovlt.f32	s15, s8
 8011bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bcc:	bf88      	it	hi
 8011bce:	eeb0 5a44 	vmovhi.f32	s10, s8
 8011bd2:	eef4 7ac3 	vcmpe.f32	s15, s6
 8011bd6:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 8011bda:	edd5 3a00 	vldr	s7, [r5]
 8011bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011be2:	eeb4 5ac3 	vcmpe.f32	s10, s6
 8011be6:	bfb8      	it	lt
 8011be8:	eef0 7a43 	vmovlt.f32	s15, s6
 8011bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bf0:	bf88      	it	hi
 8011bf2:	eeb0 5a43 	vmovhi.f32	s10, s6
 8011bf6:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011bfa:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 8011bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c02:	ee34 4a24 	vadd.f32	s8, s8, s9
 8011c06:	eeb4 5ae3 	vcmpe.f32	s10, s7
 8011c0a:	edd5 4a00 	vldr	s9, [r5]
 8011c0e:	bfb8      	it	lt
 8011c10:	eef0 7a63 	vmovlt.f32	s15, s7
 8011c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c18:	bf88      	it	hi
 8011c1a:	eeb0 5a63 	vmovhi.f32	s10, s7
 8011c1e:	eef4 7ae4 	vcmpe.f32	s15, s9
 8011c22:	ee34 4a03 	vadd.f32	s8, s8, s6
 8011c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c2a:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8011c2e:	bfb8      	it	lt
 8011c30:	eef0 7a64 	vmovlt.f32	s15, s9
 8011c34:	ee34 4a23 	vadd.f32	s8, s8, s7
 8011c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c3c:	bf88      	it	hi
 8011c3e:	eeb0 5a64 	vmovhi.f32	s10, s9
 8011c42:	2b0a      	cmp	r3, #10
 8011c44:	ee74 4a24 	vadd.f32	s9, s8, s9
 8011c48:	d113      	bne.n	8011c72 <kalman_3gyro.constprop.0+0x2462>
 8011c4a:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 8011c4e:	ed93 4a00 	vldr	s8, [r3]
 8011c52:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c5a:	eeb4 5ac4 	vcmpe.f32	s10, s8
 8011c5e:	bfb8      	it	lt
 8011c60:	eef0 7a44 	vmovlt.f32	s15, s8
 8011c64:	ee74 4a84 	vadd.f32	s9, s9, s8
 8011c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c6c:	bf88      	it	hi
 8011c6e:	eeb0 5a44 	vmovhi.f32	s10, s8
 8011c72:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8011c76:	ed9f 4a13 	vldr	s8, [pc, #76]	; 8011cc4 <kalman_3gyro.constprop.0+0x24b4>
 8011c7a:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8011cc8 <kalman_3gyro.constprop.0+0x24b8>
 8011c7e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011c82:	ee64 4a85 	vmul.f32	s9, s9, s10
 8011c86:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c8e:	dc25      	bgt.n	8011cdc <kalman_3gyro.constprop.0+0x24cc>
 8011c90:	eef0 7ae4 	vabs.f32	s15, s9
 8011c94:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8011c98:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8011ccc <kalman_3gyro.constprop.0+0x24bc>
 8011c9c:	eef4 5ae7 	vcmpe.f32	s11, s15
 8011ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ca4:	dc1a      	bgt.n	8011cdc <kalman_3gyro.constprop.0+0x24cc>
 8011ca6:	f89b 5005 	ldrb.w	r5, [fp, #5]
 8011caa:	2d00      	cmp	r5, #0
 8011cac:	f000 80e0 	beq.w	8011e70 <kalman_3gyro.constprop.0+0x2660>
 8011cb0:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	f002 8439 	beq.w	801452c <kalman_3gyro.constprop.0+0x4d1c>
 8011cba:	2201      	movs	r2, #1
 8011cbc:	462b      	mov	r3, r5
 8011cbe:	9201      	str	r2, [sp, #4]
 8011cc0:	e01c      	b.n	8011cfc <kalman_3gyro.constprop.0+0x24ec>
 8011cc2:	bf00      	nop
 8011cc4:	3be56041 	.word	0x3be56041
 8011cc8:	3dcccccd 	.word	0x3dcccccd
 8011ccc:	3e333333 	.word	0x3e333333
 8011cd0:	3d088889 	.word	0x3d088889
 8011cd4:	42480000 	.word	0x42480000
 8011cd8:	00000000 	.word	0x00000000
 8011cdc:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8011ce0:	2100      	movs	r1, #0
 8011ce2:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 8011ce6:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	f000 80c1 	beq.w	8011e72 <kalman_3gyro.constprop.0+0x2662>
 8011cf0:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8011cf4:	2a01      	cmp	r2, #1
 8011cf6:	f001 8615 	beq.w	8013924 <kalman_3gyro.constprop.0+0x4114>
 8011cfa:	9101      	str	r1, [sp, #4]
 8011cfc:	2b02      	cmp	r3, #2
 8011cfe:	f041 87d2 	bne.w	8013ca6 <kalman_3gyro.constprop.0+0x4496>
 8011d02:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8011d06:	eecd 6a27 	vdiv.f32	s13, s26, s15
 8011d0a:	f240 1301 	movw	r3, #257	; 0x101
 8011d0e:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 8011d12:	2301      	movs	r3, #1
 8011d14:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8011d18:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8011d1c:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8011d20:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 8011d24:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8011d28:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 8011d2c:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
 8011d30:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 8011d34:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 8011d38:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
 8011d3c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011d40:	eef4 7ac8 	vcmpe.f32	s15, s16
 8011d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d48:	f2c2 809a 	blt.w	8013e80 <kalman_3gyro.constprop.0+0x4670>
 8011d4c:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8011d50:	2a00      	cmp	r2, #0
 8011d52:	f002 83db 	beq.w	801450c <kalman_3gyro.constprop.0+0x4cfc>
 8011d56:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8011d60:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011d64:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 8011d68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011d6c:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8011d70:	f002 84da 	beq.w	8014728 <kalman_3gyro.constprop.0+0x4f18>
 8011d74:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8011d78:	f002 80d0 	beq.w	8013f1c <kalman_3gyro.constprop.0+0x470c>
 8011d7c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011d80:	2a00      	cmp	r2, #0
 8011d82:	f042 80d0 	bne.w	8013f26 <kalman_3gyro.constprop.0+0x4716>
 8011d86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011d88:	a830      	add	r0, sp, #192	; 0xc0
 8011d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8011d8e:	4613      	mov	r3, r2
 8011d90:	edd2 7a00 	vldr	s15, [r2]
 8011d94:	3101      	adds	r1, #1
 8011d96:	330c      	adds	r3, #12
 8011d98:	3204      	adds	r2, #4
 8011d9a:	461c      	mov	r4, r3
 8011d9c:	ed94 7a00 	vldr	s14, [r4]
 8011da0:	330c      	adds	r3, #12
 8011da2:	4598      	cmp	r8, r3
 8011da4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011da8:	d1f7      	bne.n	8011d9a <kalman_3gyro.constprop.0+0x258a>
 8011daa:	2902      	cmp	r1, #2
 8011dac:	ece0 7a01 	vstmia	r0!, {s15}
 8011db0:	f108 0804 	add.w	r8, r8, #4
 8011db4:	d1eb      	bne.n	8011d8e <kalman_3gyro.constprop.0+0x257e>
 8011db6:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8011cd0 <kalman_3gyro.constprop.0+0x24c0>
 8011dba:	ed9d 4a30 	vldr	s8, [sp, #192]	; 0xc0
 8011dbe:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 8011dc2:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8011dc6:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8011dc8:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 8011dcc:	ee24 4a27 	vmul.f32	s8, s8, s15
 8011dd0:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8011dd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011dd8:	460a      	mov	r2, r1
 8011dda:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 8011dde:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 8011de2:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 8011de6:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 8011dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011df2:	f103 030c 	add.w	r3, r3, #12
 8011df6:	bf88      	it	hi
 8011df8:	eef0 7a47 	vmovhi.f32	s15, s14
 8011dfc:	4293      	cmp	r3, r2
 8011dfe:	d1f2      	bne.n	8011de6 <kalman_3gyro.constprop.0+0x25d6>
 8011e00:	1d1a      	adds	r2, r3, #4
 8011e02:	4290      	cmp	r0, r2
 8011e04:	ece4 7a01 	vstmia	r4!, {s15}
 8011e08:	d1e9      	bne.n	8011dde <kalman_3gyro.constprop.0+0x25ce>
 8011e0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011e0c:	ed9d 5a2d 	vldr	s10, [sp, #180]	; 0xb4
 8011e10:	edd3 7a00 	vldr	s15, [r3]
 8011e14:	eddd 5a2e 	vldr	s11, [sp, #184]	; 0xb8
 8011e18:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 8011e1c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8011e20:	ee97 5a84 	vfnms.f32	s10, s15, s8
 8011e24:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 8011e28:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 8011e2c:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 8011e30:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 8011e34:	ed8d 6a32 	vstr	s12, [sp, #200]	; 0xc8
 8011e38:	b14b      	cbz	r3, 8011e4e <kalman_3gyro.constprop.0+0x263e>
 8011e3a:	ed9d 7a03 	vldr	s14, [sp, #12]
 8011e3e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8011e42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e4a:	f102 8553 	bmi.w	80148f4 <kalman_3gyro.constprop.0+0x50e4>
 8011e4e:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 8011e52:	2a1e      	cmp	r2, #30
 8011e54:	f002 84dd 	beq.w	8014812 <kalman_3gyro.constprop.0+0x5002>
 8011e58:	1c53      	adds	r3, r2, #1
 8011e5a:	2aff      	cmp	r2, #255	; 0xff
 8011e5c:	bf14      	ite	ne
 8011e5e:	b2db      	uxtbne	r3, r3
 8011e60:	23ff      	moveq	r3, #255	; 0xff
 8011e62:	2200      	movs	r2, #0
 8011e64:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 8011e68:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011e6c:	9b01      	ldr	r3, [sp, #4]
 8011e6e:	e012      	b.n	8011e96 <kalman_3gyro.constprop.0+0x2686>
 8011e70:	2301      	movs	r3, #1
 8011e72:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 8011e76:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 8011e7a:	9181      	str	r1, [sp, #516]	; 0x204
 8011e7c:	9282      	str	r2, [sp, #520]	; 0x208
 8011e7e:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8011e82:	9183      	str	r1, [sp, #524]	; 0x20c
 8011e84:	2200      	movs	r2, #0
 8011e86:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 8011e8a:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 8011e8e:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011e92:	f88b 2001 	strb.w	r2, [fp, #1]
 8011e96:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 8011cd4 <kalman_3gyro.constprop.0+0x24c4>
 8011e9a:	eeb4 cae7 	vcmpe.f32	s24, s15
 8011e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ea2:	f2c0 875f 	blt.w	8012d64 <kalman_3gyro.constprop.0+0x3554>
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 8011eac:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 8011eb0:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 8011eb4:	2b01      	cmp	r3, #1
 8011eb6:	d125      	bne.n	8011f04 <kalman_3gyro.constprop.0+0x26f4>
 8011eb8:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 8011ebc:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 8011ec0:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 8011ec4:	eddd 6a42 	vldr	s13, [sp, #264]	; 0x108
 8011ec8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8011ecc:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 8011ed0:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 8011ed4:	ee25 5a24 	vmul.f32	s10, s10, s9
 8011ed8:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8011edc:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011ee0:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011ee4:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011ee8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011eec:	ed8d 5a72 	vstr	s10, [sp, #456]	; 0x1c8
 8011ef0:	edcd 5a73 	vstr	s11, [sp, #460]	; 0x1cc
 8011ef4:	ed8d 6a74 	vstr	s12, [sp, #464]	; 0x1d0
 8011ef8:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 8011efc:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8011f00:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 8011f04:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8011f08:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 8011f0c:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 8011f10:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 8011f14:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 8011f18:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 8011f1c:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 8011f20:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 8011f24:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 8011f28:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 8011f2c:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 8011f30:	ed9d 0a44 	vldr	s0, [sp, #272]	; 0x110
 8011f34:	eddd 0a45 	vldr	s1, [sp, #276]	; 0x114
 8011f38:	ed9d 1a46 	vldr	s2, [sp, #280]	; 0x118
 8011f3c:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
 8011f40:	ed9d 2a48 	vldr	s4, [sp, #288]	; 0x120
 8011f44:	eddd 2a49 	vldr	s5, [sp, #292]	; 0x124
 8011f48:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 8011f4c:	eee7 3a07 	vfma.f32	s7, s14, s14
 8011f50:	f50b 73ea 	add.w	r3, fp, #468	; 0x1d4
 8011f54:	9301      	str	r3, [sp, #4]
 8011f56:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 8011f5a:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 8011f5e:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8011f62:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 8011f66:	f50d 64c3 	add.w	r4, sp, #1560	; 0x618
 8011f6a:	eea8 3a08 	vfma.f32	s6, s16, s16
 8011f6e:	2500      	movs	r5, #0
 8011f70:	eea0 4a00 	vfma.f32	s8, s0, s0
 8011f74:	eee0 4aa0 	vfma.f32	s9, s1, s1
 8011f78:	eea1 5a01 	vfma.f32	s10, s2, s2
 8011f7c:	eee1 5aa1 	vfma.f32	s11, s3, s3
 8011f80:	eea2 6a02 	vfma.f32	s12, s4, s4
 8011f84:	eee2 6aa2 	vfma.f32	s13, s5, s5
 8011f88:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 8011f8c:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 8011f90:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011f94:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 8011f98:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 8011f9c:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 8011fa0:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 8011fa4:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 8011fa8:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 8011fac:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 8011fb0:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 8011fb4:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 8011fb8:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 8011fbc:	ed9d 4a70 	vldr	s8, [sp, #448]	; 0x1c0
 8011fc0:	eddd 4a71 	vldr	s9, [sp, #452]	; 0x1c4
 8011fc4:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 8011fc8:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 8011fcc:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 8011fd0:	eddd 6a78 	vldr	s13, [sp, #480]	; 0x1e0
 8011fd4:	ed9d 7a79 	vldr	s14, [sp, #484]	; 0x1e4
 8011fd8:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 8011fdc:	ed1f 8ac2 	vldr	s16, [pc, #-776]	; 8011cd8 <kalman_3gyro.constprop.0+0x24c8>
 8011fe0:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8011fe4:	ee24 4a04 	vmul.f32	s8, s8, s8
 8011fe8:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8011fec:	ee25 5a05 	vmul.f32	s10, s10, s10
 8011ff0:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8011ff4:	ee26 6a06 	vmul.f32	s12, s12, s12
 8011ff8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011ffc:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012000:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012004:	ed8d 4a88 	vstr	s8, [sp, #544]	; 0x220
 8012008:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 801200c:	edcd 8a8e 	vstr	s17, [sp, #568]	; 0x238
 8012010:	edcd 8a8f 	vstr	s17, [sp, #572]	; 0x23c
 8012014:	edcd 4a89 	vstr	s9, [sp, #548]	; 0x224
 8012018:	ed8d 5a8a 	vstr	s10, [sp, #552]	; 0x228
 801201c:	edcd 5a8b 	vstr	s11, [sp, #556]	; 0x22c
 8012020:	ed8d 6a8c 	vstr	s12, [sp, #560]	; 0x230
 8012024:	edcd 6a90 	vstr	s13, [sp, #576]	; 0x240
 8012028:	ed8d 7a91 	vstr	s14, [sp, #580]	; 0x244
 801202c:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 8012030:	e005      	b.n	801203e <kalman_3gyro.constprop.0+0x282e>
 8012032:	3501      	adds	r5, #1
 8012034:	2d0c      	cmp	r5, #12
 8012036:	f104 0404 	add.w	r4, r4, #4
 801203a:	f000 84fe 	beq.w	8012a3a <kalman_3gyro.constprop.0+0x322a>
 801203e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012042:	2b00      	cmp	r3, #0
 8012044:	d0f5      	beq.n	8012032 <kalman_3gyro.constprop.0+0x2822>
 8012046:	edd4 da00 	vldr	s27, [r4]
 801204a:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 801204e:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 8012052:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 8012056:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 801205a:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 801205e:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 8012062:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 8012066:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 801206a:	9b01      	ldr	r3, [sp, #4]
 801206c:	ed89 8a00 	vstr	s16, [r9]
 8012070:	ed89 8a01 	vstr	s16, [r9, #4]
 8012074:	ed89 8a02 	vstr	s16, [r9, #8]
 8012078:	ed89 8a03 	vstr	s16, [r9, #12]
 801207c:	ed89 8a04 	vstr	s16, [r9, #16]
 8012080:	ed89 8a05 	vstr	s16, [r9, #20]
 8012084:	ed89 8a06 	vstr	s16, [r9, #24]
 8012088:	ed89 8a07 	vstr	s16, [r9, #28]
 801208c:	ed89 8a08 	vstr	s16, [r9, #32]
 8012090:	464e      	mov	r6, r9
 8012092:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 8012096:	464a      	mov	r2, r9
 8012098:	ecb3 7a01 	vldmia	r3!, {s14}
 801209c:	ecf2 7a01 	vldmia	r2!, {s15}
 80120a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80120a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a8:	d006      	beq.n	80120b8 <kalman_3gyro.constprop.0+0x28a8>
 80120aa:	eef5 da40 	vcmp.f32	s27, #0.0
 80120ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120b2:	bf18      	it	ne
 80120b4:	eeed 7a87 	vfmane.f32	s15, s27, s14
 80120b8:	ed93 7a08 	vldr	s14, [r3, #32]
 80120bc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80120c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c4:	d006      	beq.n	80120d4 <kalman_3gyro.constprop.0+0x28c4>
 80120c6:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80120ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ce:	bf18      	it	ne
 80120d0:	eeee 7a07 	vfmane.f32	s15, s28, s14
 80120d4:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80120d8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80120dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120e0:	d006      	beq.n	80120f0 <kalman_3gyro.constprop.0+0x28e0>
 80120e2:	eef5 ea40 	vcmp.f32	s29, #0.0
 80120e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ea:	bf18      	it	ne
 80120ec:	eeee 7a87 	vfmane.f32	s15, s29, s14
 80120f0:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80120f4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80120f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120fc:	d006      	beq.n	801210c <kalman_3gyro.constprop.0+0x28fc>
 80120fe:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8012102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012106:	bf18      	it	ne
 8012108:	eeef 7a07 	vfmane.f32	s15, s30, s14
 801210c:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8012110:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012118:	d006      	beq.n	8012128 <kalman_3gyro.constprop.0+0x2918>
 801211a:	eef5 fa40 	vcmp.f32	s31, #0.0
 801211e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012122:	bf18      	it	ne
 8012124:	eeef 7a87 	vfmane.f32	s15, s31, s14
 8012128:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 801212c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012134:	d006      	beq.n	8012144 <kalman_3gyro.constprop.0+0x2934>
 8012136:	eef5 6a40 	vcmp.f32	s13, #0.0
 801213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801213e:	bf18      	it	ne
 8012140:	eee6 7a87 	vfmane.f32	s15, s13, s14
 8012144:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8012148:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801214c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012150:	d006      	beq.n	8012160 <kalman_3gyro.constprop.0+0x2950>
 8012152:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801215a:	bf18      	it	ne
 801215c:	eee6 7a07 	vfmane.f32	s15, s12, s14
 8012160:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8012164:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801216c:	d006      	beq.n	801217c <kalman_3gyro.constprop.0+0x296c>
 801216e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012176:	bf18      	it	ne
 8012178:	eee5 7a87 	vfmane.f32	s15, s11, s14
 801217c:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 8012180:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012188:	d006      	beq.n	8012198 <kalman_3gyro.constprop.0+0x2988>
 801218a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801218e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012192:	bf18      	it	ne
 8012194:	eee5 7a07 	vfmane.f32	s15, s10, s14
 8012198:	428b      	cmp	r3, r1
 801219a:	ed42 7a01 	vstr	s15, [r2, #-4]
 801219e:	f47f af7b 	bne.w	8012098 <kalman_3gyro.constprop.0+0x2888>
 80121a2:	eef5 da40 	vcmp.f32	s27, #0.0
 80121a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121aa:	edd9 8a00 	vldr	s17, [r9]
 80121ae:	f040 8543 	bne.w	8012c38 <kalman_3gyro.constprop.0+0x3428>
 80121b2:	eef0 7a6d 	vmov.f32	s15, s27
 80121b6:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80121ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121be:	ed99 9a01 	vldr	s18, [r9, #4]
 80121c2:	d006      	beq.n	80121d2 <kalman_3gyro.constprop.0+0x29c2>
 80121c4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80121c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121cc:	bf18      	it	ne
 80121ce:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 80121d2:	eef5 ea40 	vcmp.f32	s29, #0.0
 80121d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121da:	edd9 aa02 	vldr	s21, [r9, #8]
 80121de:	d006      	beq.n	80121ee <kalman_3gyro.constprop.0+0x29de>
 80121e0:	eef5 aa40 	vcmp.f32	s21, #0.0
 80121e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121e8:	bf18      	it	ne
 80121ea:	eeea 7aae 	vfmane.f32	s15, s21, s29
 80121ee:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80121f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f6:	edd9 ba03 	vldr	s23, [r9, #12]
 80121fa:	d006      	beq.n	801220a <kalman_3gyro.constprop.0+0x29fa>
 80121fc:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012204:	bf18      	it	ne
 8012206:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 801220a:	eef5 fa40 	vcmp.f32	s31, #0.0
 801220e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012212:	edd9 ca04 	vldr	s25, [r9, #16]
 8012216:	d006      	beq.n	8012226 <kalman_3gyro.constprop.0+0x2a16>
 8012218:	eef5 ca40 	vcmp.f32	s25, #0.0
 801221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012220:	bf18      	it	ne
 8012222:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 8012226:	eef5 6a40 	vcmp.f32	s13, #0.0
 801222a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801222e:	ed99 ca05 	vldr	s24, [r9, #20]
 8012232:	d006      	beq.n	8012242 <kalman_3gyro.constprop.0+0x2a32>
 8012234:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801223c:	bf18      	it	ne
 801223e:	eeec 7a26 	vfmane.f32	s15, s24, s13
 8012242:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801224a:	ed99 da06 	vldr	s26, [r9, #24]
 801224e:	d006      	beq.n	801225e <kalman_3gyro.constprop.0+0x2a4e>
 8012250:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012258:	bf18      	it	ne
 801225a:	eeed 7a06 	vfmane.f32	s15, s26, s12
 801225e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012266:	ed99 aa07 	vldr	s20, [r9, #28]
 801226a:	d006      	beq.n	801227a <kalman_3gyro.constprop.0+0x2a6a>
 801226c:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012274:	bf18      	it	ne
 8012276:	eeea 7a25 	vfmane.f32	s15, s20, s11
 801227a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801227e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012282:	ed99 ba08 	vldr	s22, [r9, #32]
 8012286:	d006      	beq.n	8012296 <kalman_3gyro.constprop.0+0x2a86>
 8012288:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012290:	bf18      	it	ne
 8012292:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 8012296:	ab87      	add	r3, sp, #540	; 0x21c
 8012298:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 801229c:	ed92 7a00 	vldr	s14, [r2]
 80122a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80122a4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80122a8:	eec4 7a87 	vdiv.f32	s15, s9, s14
 80122ac:	2d05      	cmp	r5, #5
 80122ae:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80122b2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80122b6:	ee29 9a27 	vmul.f32	s18, s18, s15
 80122ba:	ee6a aaa7 	vmul.f32	s21, s21, s15
 80122be:	ee6b baa7 	vmul.f32	s23, s23, s15
 80122c2:	ee6c caa7 	vmul.f32	s25, s25, s15
 80122c6:	ee2c ca27 	vmul.f32	s24, s24, s15
 80122ca:	ee2d da27 	vmul.f32	s26, s26, s15
 80122ce:	ee2a aa27 	vmul.f32	s20, s20, s15
 80122d2:	ee2b ba27 	vmul.f32	s22, s22, s15
 80122d6:	edc9 8a00 	vstr	s17, [r9]
 80122da:	ed89 9a01 	vstr	s18, [r9, #4]
 80122de:	edc9 aa02 	vstr	s21, [r9, #8]
 80122e2:	edc9 ba03 	vstr	s23, [r9, #12]
 80122e6:	edc9 ca04 	vstr	s25, [r9, #16]
 80122ea:	ed89 ca05 	vstr	s24, [r9, #20]
 80122ee:	ed89 da06 	vstr	s26, [r9, #24]
 80122f2:	ed89 aa07 	vstr	s20, [r9, #28]
 80122f6:	ed89 ba08 	vstr	s22, [r9, #32]
 80122fa:	f340 8497 	ble.w	8012c2c <kalman_3gyro.constprop.0+0x341c>
 80122fe:	eef5 da40 	vcmp.f32	s27, #0.0
 8012302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012306:	f000 8510 	beq.w	8012d2a <kalman_3gyro.constprop.0+0x351a>
 801230a:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 801230e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012316:	d001      	beq.n	801231c <kalman_3gyro.constprop.0+0x2b0c>
 8012318:	ee67 7aad 	vmul.f32	s15, s15, s27
 801231c:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8012320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012324:	d008      	beq.n	8012338 <kalman_3gyro.constprop.0+0x2b28>
 8012326:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 801232a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801232e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012332:	bf18      	it	ne
 8012334:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 8012338:	eef5 ea40 	vcmp.f32	s29, #0.0
 801233c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012340:	d008      	beq.n	8012354 <kalman_3gyro.constprop.0+0x2b44>
 8012342:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 8012346:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801234a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801234e:	bf18      	it	ne
 8012350:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8012354:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8012358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801235c:	d008      	beq.n	8012370 <kalman_3gyro.constprop.0+0x2b60>
 801235e:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 8012362:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801236a:	bf18      	it	ne
 801236c:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8012370:	eef5 fa40 	vcmp.f32	s31, #0.0
 8012374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012378:	d008      	beq.n	801238c <kalman_3gyro.constprop.0+0x2b7c>
 801237a:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 801237e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012386:	bf18      	it	ne
 8012388:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 801238c:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012394:	d008      	beq.n	80123a8 <kalman_3gyro.constprop.0+0x2b98>
 8012396:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 801239a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801239e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a2:	bf18      	it	ne
 80123a4:	eee7 7a26 	vfmane.f32	s15, s14, s13
 80123a8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80123ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b0:	d008      	beq.n	80123c4 <kalman_3gyro.constprop.0+0x2bb4>
 80123b2:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 80123b6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80123ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123be:	bf18      	it	ne
 80123c0:	eee7 7a06 	vfmane.f32	s15, s14, s12
 80123c4:	eef5 5a40 	vcmp.f32	s11, #0.0
 80123c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123cc:	d008      	beq.n	80123e0 <kalman_3gyro.constprop.0+0x2bd0>
 80123ce:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 80123d2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80123d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123da:	bf18      	it	ne
 80123dc:	eee7 7a25 	vfmane.f32	s15, s14, s11
 80123e0:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80123e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e8:	d008      	beq.n	80123fc <kalman_3gyro.constprop.0+0x2bec>
 80123ea:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 80123ee:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80123f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123f6:	bf18      	it	ne
 80123f8:	eee7 7a05 	vfmane.f32	s15, s14, s10
 80123fc:	aa7b      	add	r2, sp, #492	; 0x1ec
 80123fe:	4413      	add	r3, r2
 8012400:	edd3 9a00 	vldr	s19, [r3]
 8012404:	ee79 9ae7 	vsub.f32	s19, s19, s15
 8012408:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801240c:	2100      	movs	r1, #0
 801240e:	4650      	mov	r0, sl
 8012410:	ed8d 5a05 	vstr	s10, [sp, #20]
 8012414:	edcd 5a04 	vstr	s11, [sp, #16]
 8012418:	ed8d 6a03 	vstr	s12, [sp, #12]
 801241c:	edcd 6a02 	vstr	s13, [sp, #8]
 8012420:	f007 ff72 	bl	801a308 <memset>
 8012424:	ed9d 5a05 	vldr	s10, [sp, #20]
 8012428:	eddd 5a04 	vldr	s11, [sp, #16]
 801242c:	ed9d 6a03 	vldr	s12, [sp, #12]
 8012430:	eddd 6a02 	vldr	s13, [sp, #8]
 8012434:	4651      	mov	r1, sl
 8012436:	f109 0224 	add.w	r2, r9, #36	; 0x24
 801243a:	4653      	mov	r3, sl
 801243c:	ecf6 7a01 	vldmia	r6!, {s15}
 8012440:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012448:	d062      	beq.n	8012510 <kalman_3gyro.constprop.0+0x2d00>
 801244a:	eef5 da40 	vcmp.f32	s27, #0.0
 801244e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012452:	d005      	beq.n	8012460 <kalman_3gyro.constprop.0+0x2c50>
 8012454:	ed93 7a00 	vldr	s14, [r3]
 8012458:	eead 7aa7 	vfma.f32	s14, s27, s15
 801245c:	ed83 7a00 	vstr	s14, [r3]
 8012460:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8012464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012468:	d005      	beq.n	8012476 <kalman_3gyro.constprop.0+0x2c66>
 801246a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801246e:	eeae 7a27 	vfma.f32	s14, s28, s15
 8012472:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 8012476:	eef5 ea40 	vcmp.f32	s29, #0.0
 801247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801247e:	d005      	beq.n	801248c <kalman_3gyro.constprop.0+0x2c7c>
 8012480:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8012484:	eeae 7aa7 	vfma.f32	s14, s29, s15
 8012488:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 801248c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8012490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012494:	d005      	beq.n	80124a2 <kalman_3gyro.constprop.0+0x2c92>
 8012496:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 801249a:	eeaf 7a27 	vfma.f32	s14, s30, s15
 801249e:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 80124a2:	eef5 fa40 	vcmp.f32	s31, #0.0
 80124a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124aa:	d005      	beq.n	80124b8 <kalman_3gyro.constprop.0+0x2ca8>
 80124ac:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80124b0:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 80124b4:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 80124b8:	eef5 6a40 	vcmp.f32	s13, #0.0
 80124bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124c0:	d005      	beq.n	80124ce <kalman_3gyro.constprop.0+0x2cbe>
 80124c2:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 80124c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80124ca:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 80124ce:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80124d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124d6:	d005      	beq.n	80124e4 <kalman_3gyro.constprop.0+0x2cd4>
 80124d8:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 80124dc:	eea6 7a27 	vfma.f32	s14, s12, s15
 80124e0:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 80124e4:	eef5 5a40 	vcmp.f32	s11, #0.0
 80124e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ec:	d005      	beq.n	80124fa <kalman_3gyro.constprop.0+0x2cea>
 80124ee:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 80124f2:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80124f6:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 80124fa:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80124fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012502:	d005      	beq.n	8012510 <kalman_3gyro.constprop.0+0x2d00>
 8012504:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 8012508:	eea5 7a27 	vfma.f32	s14, s10, s15
 801250c:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 8012510:	4296      	cmp	r6, r2
 8012512:	f103 0304 	add.w	r3, r3, #4
 8012516:	d191      	bne.n	801243c <kalman_3gyro.constprop.0+0x2c2c>
 8012518:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 801251c:	4656      	mov	r6, sl
 801251e:	463b      	mov	r3, r7
 8012520:	2208      	movs	r2, #8
 8012522:	2000      	movs	r0, #0
 8012524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012528:	e074      	b.n	8012614 <kalman_3gyro.constprop.0+0x2e04>
 801252a:	edd6 7a00 	vldr	s15, [r6]
 801252e:	ed83 8a01 	vstr	s16, [r3, #4]
 8012532:	eef1 7a67 	vneg.f32	s15, s15
 8012536:	2801      	cmp	r0, #1
 8012538:	edc6 7a00 	vstr	s15, [r6]
 801253c:	f1a2 0c07 	sub.w	ip, r2, #7
 8012540:	f000 831e 	beq.w	8012b80 <kalman_3gyro.constprop.0+0x3370>
 8012544:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8012548:	eddc 7a00 	vldr	s15, [ip]
 801254c:	ed83 8a02 	vstr	s16, [r3, #8]
 8012550:	eef1 7a67 	vneg.f32	s15, s15
 8012554:	2802      	cmp	r0, #2
 8012556:	edcc 7a00 	vstr	s15, [ip]
 801255a:	f1a2 0c06 	sub.w	ip, r2, #6
 801255e:	f000 82f8 	beq.w	8012b52 <kalman_3gyro.constprop.0+0x3342>
 8012562:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8012566:	eddc 7a00 	vldr	s15, [ip]
 801256a:	ed83 8a03 	vstr	s16, [r3, #12]
 801256e:	eef1 7a67 	vneg.f32	s15, s15
 8012572:	2803      	cmp	r0, #3
 8012574:	edcc 7a00 	vstr	s15, [ip]
 8012578:	f1a2 0c05 	sub.w	ip, r2, #5
 801257c:	d170      	bne.n	8012660 <kalman_3gyro.constprop.0+0x2e50>
 801257e:	edd6 7a03 	vldr	s15, [r6, #12]
 8012582:	ed83 8a04 	vstr	s16, [r3, #16]
 8012586:	ee77 7a67 	vsub.f32	s15, s14, s15
 801258a:	f1a2 0e04 	sub.w	lr, r2, #4
 801258e:	edc6 7a03 	vstr	s15, [r6, #12]
 8012592:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012596:	edde 7a00 	vldr	s15, [lr]
 801259a:	ed83 8a05 	vstr	s16, [r3, #20]
 801259e:	eef1 7a67 	vneg.f32	s15, s15
 80125a2:	f1a2 0c03 	sub.w	ip, r2, #3
 80125a6:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 80125aa:	edce 7a00 	vstr	s15, [lr]
 80125ae:	eddc 7a00 	vldr	s15, [ip]
 80125b2:	ed83 8a06 	vstr	s16, [r3, #24]
 80125b6:	eef1 7a67 	vneg.f32	s15, s15
 80125ba:	edcc 7a00 	vstr	s15, [ip]
 80125be:	f1a2 0c02 	sub.w	ip, r2, #2
 80125c2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 80125c6:	eddc 7a00 	vldr	s15, [ip]
 80125ca:	ed83 8a07 	vstr	s16, [r3, #28]
 80125ce:	eef1 7a67 	vneg.f32	s15, s15
 80125d2:	2807      	cmp	r0, #7
 80125d4:	edcc 7a00 	vstr	s15, [ip]
 80125d8:	f102 3cff 	add.w	ip, r2, #4294967295
 80125dc:	f040 80a2 	bne.w	8012724 <kalman_3gyro.constprop.0+0x2f14>
 80125e0:	edd6 7a07 	vldr	s15, [r6, #28]
 80125e4:	ed83 8a08 	vstr	s16, [r3, #32]
 80125e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80125ec:	edc6 7a07 	vstr	s15, [r6, #28]
 80125f0:	eb0a 0c82 	add.w	ip, sl, r2, lsl #2
 80125f4:	eddc 7a00 	vldr	s15, [ip]
 80125f8:	3001      	adds	r0, #1
 80125fa:	eef1 7a67 	vneg.f32	s15, s15
 80125fe:	2809      	cmp	r0, #9
 8012600:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8012604:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8012608:	f102 0209 	add.w	r2, r2, #9
 801260c:	edcc 7a00 	vstr	s15, [ip]
 8012610:	f000 809f 	beq.w	8012752 <kalman_3gyro.constprop.0+0x2f42>
 8012614:	ed83 8a00 	vstr	s16, [r3]
 8012618:	2800      	cmp	r0, #0
 801261a:	d186      	bne.n	801252a <kalman_3gyro.constprop.0+0x2d1a>
 801261c:	edda 7a00 	vldr	s15, [sl]
 8012620:	ed83 8a01 	vstr	s16, [r3, #4]
 8012624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012628:	f1a2 0e07 	sub.w	lr, r2, #7
 801262c:	edc6 7a00 	vstr	s15, [r6]
 8012630:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012634:	edde 7a00 	vldr	s15, [lr]
 8012638:	ed83 8a02 	vstr	s16, [r3, #8]
 801263c:	eef1 7a67 	vneg.f32	s15, s15
 8012640:	f1a2 0c06 	sub.w	ip, r2, #6
 8012644:	edce 7a00 	vstr	s15, [lr]
 8012648:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 801264c:	eddc 7a00 	vldr	s15, [ip]
 8012650:	ed83 8a03 	vstr	s16, [r3, #12]
 8012654:	eef1 7a67 	vneg.f32	s15, s15
 8012658:	edcc 7a00 	vstr	s15, [ip]
 801265c:	f1a2 0c05 	sub.w	ip, r2, #5
 8012660:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8012664:	eddc 7a00 	vldr	s15, [ip]
 8012668:	ed83 8a04 	vstr	s16, [r3, #16]
 801266c:	eef1 7a67 	vneg.f32	s15, s15
 8012670:	2804      	cmp	r0, #4
 8012672:	edcc 7a00 	vstr	s15, [ip]
 8012676:	f1a2 0c04 	sub.w	ip, r2, #4
 801267a:	d031      	beq.n	80126e0 <kalman_3gyro.constprop.0+0x2ed0>
 801267c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8012680:	eddc 7a00 	vldr	s15, [ip]
 8012684:	ed83 8a05 	vstr	s16, [r3, #20]
 8012688:	eef1 7a67 	vneg.f32	s15, s15
 801268c:	2805      	cmp	r0, #5
 801268e:	edcc 7a00 	vstr	s15, [ip]
 8012692:	f1a2 0c03 	sub.w	ip, r2, #3
 8012696:	f000 8245 	beq.w	8012b24 <kalman_3gyro.constprop.0+0x3314>
 801269a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 801269e:	eddc 7a00 	vldr	s15, [ip]
 80126a2:	ed83 8a06 	vstr	s16, [r3, #24]
 80126a6:	eef1 7a67 	vneg.f32	s15, s15
 80126aa:	2806      	cmp	r0, #6
 80126ac:	edcc 7a00 	vstr	s15, [ip]
 80126b0:	f1a2 0c02 	sub.w	ip, r2, #2
 80126b4:	d185      	bne.n	80125c2 <kalman_3gyro.constprop.0+0x2db2>
 80126b6:	edd6 7a06 	vldr	s15, [r6, #24]
 80126ba:	ed83 8a07 	vstr	s16, [r3, #28]
 80126be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80126c2:	f102 3cff 	add.w	ip, r2, #4294967295
 80126c6:	edc6 7a06 	vstr	s15, [r6, #24]
 80126ca:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 80126ce:	eddc 7a00 	vldr	s15, [ip]
 80126d2:	ed83 8a08 	vstr	s16, [r3, #32]
 80126d6:	eef1 7a67 	vneg.f32	s15, s15
 80126da:	edcc 7a00 	vstr	s15, [ip]
 80126de:	e787      	b.n	80125f0 <kalman_3gyro.constprop.0+0x2de0>
 80126e0:	edd6 7a04 	vldr	s15, [r6, #16]
 80126e4:	ed83 8a05 	vstr	s16, [r3, #20]
 80126e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80126ec:	f1a2 0e03 	sub.w	lr, r2, #3
 80126f0:	edc6 7a04 	vstr	s15, [r6, #16]
 80126f4:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 80126f8:	edde 7a00 	vldr	s15, [lr]
 80126fc:	ed83 8a06 	vstr	s16, [r3, #24]
 8012700:	eef1 7a67 	vneg.f32	s15, s15
 8012704:	f1a2 0c02 	sub.w	ip, r2, #2
 8012708:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 801270c:	edce 7a00 	vstr	s15, [lr]
 8012710:	eddc 7a00 	vldr	s15, [ip]
 8012714:	ed83 8a07 	vstr	s16, [r3, #28]
 8012718:	eef1 7a67 	vneg.f32	s15, s15
 801271c:	edcc 7a00 	vstr	s15, [ip]
 8012720:	f102 3cff 	add.w	ip, r2, #4294967295
 8012724:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8012728:	eddc 7a00 	vldr	s15, [ip]
 801272c:	ed83 8a08 	vstr	s16, [r3, #32]
 8012730:	eef1 7a67 	vneg.f32	s15, s15
 8012734:	2808      	cmp	r0, #8
 8012736:	edcc 7a00 	vstr	s15, [ip]
 801273a:	f47f af59 	bne.w	80125f0 <kalman_3gyro.constprop.0+0x2de0>
 801273e:	ed96 7a08 	vldr	s14, [r6, #32]
 8012742:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012746:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801274a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801274e:	edc2 7a00 	vstr	s15, [r2]
 8012752:	2000      	movs	r0, #0
 8012754:	f50b 76a2 	add.w	r6, fp, #324	; 0x144
 8012758:	ecb1 3a01 	vldmia	r1!, {s6}
 801275c:	edd1 3a08 	vldr	s7, [r1, #32]
 8012760:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 8012764:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 8012768:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 801276c:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 8012770:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 8012774:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 8012778:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 801277c:	465a      	mov	r2, fp
 801277e:	463b      	mov	r3, r7
 8012780:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8012784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012788:	d00c      	beq.n	80127a4 <kalman_3gyro.constprop.0+0x2f94>
 801278a:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 801278e:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012796:	d005      	beq.n	80127a4 <kalman_3gyro.constprop.0+0x2f94>
 8012798:	edd3 7a00 	vldr	s15, [r3]
 801279c:	eee3 7a22 	vfma.f32	s15, s6, s5
 80127a0:	edc3 7a00 	vstr	s15, [r3]
 80127a4:	eef5 3a40 	vcmp.f32	s7, #0.0
 80127a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ac:	d00c      	beq.n	80127c8 <kalman_3gyro.constprop.0+0x2fb8>
 80127ae:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 80127b2:	eef5 2a40 	vcmp.f32	s5, #0.0
 80127b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ba:	d005      	beq.n	80127c8 <kalman_3gyro.constprop.0+0x2fb8>
 80127bc:	edd3 7a00 	vldr	s15, [r3]
 80127c0:	eee3 7aa2 	vfma.f32	s15, s7, s5
 80127c4:	edc3 7a00 	vstr	s15, [r3]
 80127c8:	eeb5 4a40 	vcmp.f32	s8, #0.0
 80127cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127d0:	d00c      	beq.n	80127ec <kalman_3gyro.constprop.0+0x2fdc>
 80127d2:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 80127d6:	eef5 2a40 	vcmp.f32	s5, #0.0
 80127da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127de:	d005      	beq.n	80127ec <kalman_3gyro.constprop.0+0x2fdc>
 80127e0:	edd3 7a00 	vldr	s15, [r3]
 80127e4:	eee4 7a22 	vfma.f32	s15, s8, s5
 80127e8:	edc3 7a00 	vstr	s15, [r3]
 80127ec:	eef5 4a40 	vcmp.f32	s9, #0.0
 80127f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127f4:	d00c      	beq.n	8012810 <kalman_3gyro.constprop.0+0x3000>
 80127f6:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 80127fa:	eef5 2a40 	vcmp.f32	s5, #0.0
 80127fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012802:	d005      	beq.n	8012810 <kalman_3gyro.constprop.0+0x3000>
 8012804:	edd3 7a00 	vldr	s15, [r3]
 8012808:	eee4 7aa2 	vfma.f32	s15, s9, s5
 801280c:	edc3 7a00 	vstr	s15, [r3]
 8012810:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012818:	d00c      	beq.n	8012834 <kalman_3gyro.constprop.0+0x3024>
 801281a:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 801281e:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012826:	d005      	beq.n	8012834 <kalman_3gyro.constprop.0+0x3024>
 8012828:	edd3 7a00 	vldr	s15, [r3]
 801282c:	eee5 7a22 	vfma.f32	s15, s10, s5
 8012830:	edc3 7a00 	vstr	s15, [r3]
 8012834:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801283c:	d00c      	beq.n	8012858 <kalman_3gyro.constprop.0+0x3048>
 801283e:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 8012842:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801284a:	d005      	beq.n	8012858 <kalman_3gyro.constprop.0+0x3048>
 801284c:	edd3 7a00 	vldr	s15, [r3]
 8012850:	eee5 7aa2 	vfma.f32	s15, s11, s5
 8012854:	edc3 7a00 	vstr	s15, [r3]
 8012858:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801285c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012860:	d00c      	beq.n	801287c <kalman_3gyro.constprop.0+0x306c>
 8012862:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 8012866:	eef5 2a40 	vcmp.f32	s5, #0.0
 801286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801286e:	d005      	beq.n	801287c <kalman_3gyro.constprop.0+0x306c>
 8012870:	edd3 7a00 	vldr	s15, [r3]
 8012874:	eee6 7a22 	vfma.f32	s15, s12, s5
 8012878:	edc3 7a00 	vstr	s15, [r3]
 801287c:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012884:	d00c      	beq.n	80128a0 <kalman_3gyro.constprop.0+0x3090>
 8012886:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 801288a:	eef5 2a40 	vcmp.f32	s5, #0.0
 801288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012892:	d005      	beq.n	80128a0 <kalman_3gyro.constprop.0+0x3090>
 8012894:	edd3 7a00 	vldr	s15, [r3]
 8012898:	eee6 7aa2 	vfma.f32	s15, s13, s5
 801289c:	edc3 7a00 	vstr	s15, [r3]
 80128a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80128a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a8:	d00c      	beq.n	80128c4 <kalman_3gyro.constprop.0+0x30b4>
 80128aa:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 80128ae:	eef5 2a40 	vcmp.f32	s5, #0.0
 80128b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b6:	d005      	beq.n	80128c4 <kalman_3gyro.constprop.0+0x30b4>
 80128b8:	edd3 7a00 	vldr	s15, [r3]
 80128bc:	eee7 7a22 	vfma.f32	s15, s14, s5
 80128c0:	edc3 7a00 	vstr	s15, [r3]
 80128c4:	3224      	adds	r2, #36	; 0x24
 80128c6:	4296      	cmp	r6, r2
 80128c8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80128cc:	f47f af58 	bne.w	8012780 <kalman_3gyro.constprop.0+0x2f70>
 80128d0:	3001      	adds	r0, #1
 80128d2:	2809      	cmp	r0, #9
 80128d4:	f107 0704 	add.w	r7, r7, #4
 80128d8:	f47f af3e 	bne.w	8012758 <kalman_3gyro.constprop.0+0x2f48>
 80128dc:	9801      	ldr	r0, [sp, #4]
 80128de:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80128e2:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80128e6:	f007 fd01 	bl	801a2ec <memcpy>
 80128ea:	eef5 8a40 	vcmp.f32	s17, #0.0
 80128ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128f2:	f000 817c 	beq.w	8012bee <kalman_3gyro.constprop.0+0x33de>
 80128f6:	eef5 9a40 	vcmp.f32	s19, #0.0
 80128fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128fe:	f000 8176 	beq.w	8012bee <kalman_3gyro.constprop.0+0x33de>
 8012902:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801290a:	ee69 8aa8 	vmul.f32	s17, s19, s17
 801290e:	f040 8212 	bne.w	8012d36 <kalman_3gyro.constprop.0+0x3526>
 8012912:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801291a:	f000 8177 	beq.w	8012c0c <kalman_3gyro.constprop.0+0x33fc>
 801291e:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012926:	ee29 7aaa 	vmul.f32	s14, s19, s21
 801292a:	f040 81cb 	bne.w	8012cc4 <kalman_3gyro.constprop.0+0x34b4>
 801292e:	eef0 ba47 	vmov.f32	s23, s14
 8012932:	eef0 aa49 	vmov.f32	s21, s18
 8012936:	eef5 ca40 	vcmp.f32	s25, #0.0
 801293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801293e:	f000 8138 	beq.w	8012bb2 <kalman_3gyro.constprop.0+0x33a2>
 8012942:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801294a:	f000 824e 	beq.w	8012dea <kalman_3gyro.constprop.0+0x35da>
 801294e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012956:	ee29 7aac 	vmul.f32	s14, s19, s25
 801295a:	eef0 7a48 	vmov.f32	s15, s16
 801295e:	f040 81c5 	bne.w	8012cec <kalman_3gyro.constprop.0+0x34dc>
 8012962:	eeb0 ca47 	vmov.f32	s24, s14
 8012966:	eef0 ca67 	vmov.f32	s25, s15
 801296a:	eeb5 da40 	vcmp.f32	s26, #0.0
 801296e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012972:	f000 8179 	beq.w	8012c68 <kalman_3gyro.constprop.0+0x3458>
 8012976:	eef5 9a40 	vcmp.f32	s19, #0.0
 801297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801297e:	f000 8125 	beq.w	8012bcc <kalman_3gyro.constprop.0+0x33bc>
 8012982:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801298a:	ee29 7a8d 	vmul.f32	s14, s19, s26
 801298e:	eef0 7a48 	vmov.f32	s15, s16
 8012992:	f040 81be 	bne.w	8012d12 <kalman_3gyro.constprop.0+0x3502>
 8012996:	eeb0 aa47 	vmov.f32	s20, s14
 801299a:	eeb0 da67 	vmov.f32	s26, s15
 801299e:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80129a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a6:	f000 811f 	beq.w	8012be8 <kalman_3gyro.constprop.0+0x33d8>
 80129aa:	eef5 9a40 	vcmp.f32	s19, #0.0
 80129ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129b2:	f000 821d 	beq.w	8012df0 <kalman_3gyro.constprop.0+0x35e0>
 80129b6:	eef0 7a48 	vmov.f32	s15, s16
 80129ba:	ee2b ba29 	vmul.f32	s22, s22, s19
 80129be:	eef0 9a67 	vmov.f32	s19, s15
 80129c2:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 80129c6:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 80129ca:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 80129ce:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 80129d2:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 80129d6:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 80129da:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 80129de:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 80129e2:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 80129e6:	ee73 8aa8 	vadd.f32	s17, s7, s17
 80129ea:	ee74 aa2a 	vadd.f32	s21, s8, s21
 80129ee:	ee74 baab 	vadd.f32	s23, s9, s23
 80129f2:	ee75 ca2c 	vadd.f32	s25, s10, s25
 80129f6:	ee35 ca8c 	vadd.f32	s24, s11, s24
 80129fa:	ee36 da0d 	vadd.f32	s26, s12, s26
 80129fe:	ee36 aa8a 	vadd.f32	s20, s13, s20
 8012a02:	ee77 9a29 	vadd.f32	s19, s14, s19
 8012a06:	ee37 ba8b 	vadd.f32	s22, s15, s22
 8012a0a:	3501      	adds	r5, #1
 8012a0c:	2d0c      	cmp	r5, #12
 8012a0e:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 8012a12:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 8012a16:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 8012a1a:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 8012a1e:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 8012a22:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 8012a26:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 8012a2a:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 8012a2e:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 8012a32:	f104 0404 	add.w	r4, r4, #4
 8012a36:	f47f ab02 	bne.w	801203e <kalman_3gyro.constprop.0+0x282e>
 8012a3a:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 8012a3e:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 8012a42:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 8012a46:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8012a4a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012a4e:	eee6 7a06 	vfma.f32	s15, s12, s12
 8012a52:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012a56:	eef4 7ae5 	vcmpe.f32	s15, s11
 8012a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a5e:	f100 81b5 	bmi.w	8012dcc <kalman_3gyro.constprop.0+0x35bc>
 8012a62:	eef1 4ae7 	vsqrt.f32	s9, s15
 8012a66:	ed9f 5ae4 	vldr	s10, [pc, #912]	; 8012df8 <kalman_3gyro.constprop.0+0x35e8>
 8012a6a:	eec5 7aa4 	vdiv.f32	s15, s11, s9
 8012a6e:	ee67 4a86 	vmul.f32	s9, s15, s12
 8012a72:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8012a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012a7a:	f8dd 3834 	ldr.w	r3, [sp, #2100]	; 0x834
 8012a7e:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 8012a82:	aa36      	add	r2, sp, #216	; 0xd8
 8012a84:	edc3 4a00 	vstr	s9, [r3]
 8012a88:	edc3 5a01 	vstr	s11, [r3, #4]
 8012a8c:	edc3 7a02 	vstr	s15, [r3, #8]
 8012a90:	ed83 5a03 	vstr	s10, [r3, #12]
 8012a94:	4618      	mov	r0, r3
 8012a96:	4611      	mov	r1, r2
 8012a98:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 8012a9c:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
 8012aa0:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 8012aa4:	f7fb fdbc 	bl	800e620 <qmult>
 8012aa8:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 8012aac:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 8012ab0:	eddd 6a38 	vldr	s13, [sp, #224]	; 0xe0
 8012ab4:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 8012ab8:	f8dd 3830 	ldr.w	r3, [sp, #2096]	; 0x830
 8012abc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012abe:	ee66 7a06 	vmul.f32	s15, s12, s12
 8012ac2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8012ac6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8012aca:	ae54      	add	r6, sp, #336	; 0x150
 8012acc:	af5c      	add	r7, sp, #368	; 0x170
 8012ace:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8012ad2:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012ad6:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8012ada:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8012ade:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8012ae2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8012ae6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012aea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012aee:	edc3 5a00 	vstr	s11, [r3]
 8012af2:	ed83 6a01 	vstr	s12, [r3, #4]
 8012af6:	edc3 6a02 	vstr	s13, [r3, #8]
 8012afa:	ed83 7a03 	vstr	s14, [r3, #12]
 8012afe:	4634      	mov	r4, r6
 8012b00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b02:	42bc      	cmp	r4, r7
 8012b04:	6028      	str	r0, [r5, #0]
 8012b06:	6069      	str	r1, [r5, #4]
 8012b08:	60aa      	str	r2, [r5, #8]
 8012b0a:	60eb      	str	r3, [r5, #12]
 8012b0c:	4626      	mov	r6, r4
 8012b0e:	f105 0510 	add.w	r5, r5, #16
 8012b12:	d1f4      	bne.n	8012afe <kalman_3gyro.constprop.0+0x32ee>
 8012b14:	6820      	ldr	r0, [r4, #0]
 8012b16:	6028      	str	r0, [r5, #0]
 8012b18:	f20d 7dcc 	addw	sp, sp, #1996	; 0x7cc
 8012b1c:	ecbd 8b10 	vpop	{d8-d15}
 8012b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b24:	edd6 7a05 	vldr	s15, [r6, #20]
 8012b28:	ed83 8a06 	vstr	s16, [r3, #24]
 8012b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b30:	f1a2 0e02 	sub.w	lr, r2, #2
 8012b34:	edc6 7a05 	vstr	s15, [r6, #20]
 8012b38:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012b3c:	edde 7a00 	vldr	s15, [lr]
 8012b40:	ed83 8a07 	vstr	s16, [r3, #28]
 8012b44:	eef1 7a67 	vneg.f32	s15, s15
 8012b48:	f102 3cff 	add.w	ip, r2, #4294967295
 8012b4c:	edce 7a00 	vstr	s15, [lr]
 8012b50:	e5bb      	b.n	80126ca <kalman_3gyro.constprop.0+0x2eba>
 8012b52:	edd6 7a02 	vldr	s15, [r6, #8]
 8012b56:	ed83 8a03 	vstr	s16, [r3, #12]
 8012b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b5e:	f1a2 0c05 	sub.w	ip, r2, #5
 8012b62:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8012b66:	edc6 7a02 	vstr	s15, [r6, #8]
 8012b6a:	eddc 7a00 	vldr	s15, [ip]
 8012b6e:	ed83 8a04 	vstr	s16, [r3, #16]
 8012b72:	eef1 7a67 	vneg.f32	s15, s15
 8012b76:	edcc 7a00 	vstr	s15, [ip]
 8012b7a:	f1a2 0c04 	sub.w	ip, r2, #4
 8012b7e:	e57d      	b.n	801267c <kalman_3gyro.constprop.0+0x2e6c>
 8012b80:	edd6 7a01 	vldr	s15, [r6, #4]
 8012b84:	ed83 8a02 	vstr	s16, [r3, #8]
 8012b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b8c:	f1a2 0c06 	sub.w	ip, r2, #6
 8012b90:	edc6 7a01 	vstr	s15, [r6, #4]
 8012b94:	e558      	b.n	8012648 <kalman_3gyro.constprop.0+0x2e38>
 8012b96:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b9e:	ee69 7aab 	vmul.f32	s15, s19, s23
 8012ba2:	eeb0 7a48 	vmov.f32	s14, s16
 8012ba6:	f040 8097 	bne.w	8012cd8 <kalman_3gyro.constprop.0+0x34c8>
 8012baa:	eef0 ca67 	vmov.f32	s25, s15
 8012bae:	eef0 ba47 	vmov.f32	s23, s14
 8012bb2:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bba:	f43f aed6 	beq.w	801296a <kalman_3gyro.constprop.0+0x315a>
 8012bbe:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bc6:	d142      	bne.n	8012c4e <kalman_3gyro.constprop.0+0x343e>
 8012bc8:	eeb0 ca69 	vmov.f32	s24, s19
 8012bcc:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd4:	f040 80ba 	bne.w	8012d4c <kalman_3gyro.constprop.0+0x353c>
 8012bd8:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012be0:	eeb0 da4a 	vmov.f32	s26, s20
 8012be4:	f47f aee1 	bne.w	80129aa <kalman_3gyro.constprop.0+0x319a>
 8012be8:	eef0 9a4b 	vmov.f32	s19, s22
 8012bec:	e6e9      	b.n	80129c2 <kalman_3gyro.constprop.0+0x31b2>
 8012bee:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bf6:	d051      	beq.n	8012c9c <kalman_3gyro.constprop.0+0x348c>
 8012bf8:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c00:	f040 8097 	bne.w	8012d32 <kalman_3gyro.constprop.0+0x3522>
 8012c04:	eef0 aa69 	vmov.f32	s21, s19
 8012c08:	eef0 8a69 	vmov.f32	s17, s19
 8012c0c:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c14:	f43f ae8f 	beq.w	8012936 <kalman_3gyro.constprop.0+0x3126>
 8012c18:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c20:	d1b9      	bne.n	8012b96 <kalman_3gyro.constprop.0+0x3386>
 8012c22:	eef0 ca69 	vmov.f32	s25, s19
 8012c26:	eef0 ba69 	vmov.f32	s23, s19
 8012c2a:	e7c2      	b.n	8012bb2 <kalman_3gyro.constprop.0+0x33a2>
 8012c2c:	aa7b      	add	r2, sp, #492	; 0x1ec
 8012c2e:	4413      	add	r3, r2
 8012c30:	edd3 9a00 	vldr	s19, [r3]
 8012c34:	f7ff bbe8 	b.w	8012408 <kalman_3gyro.constprop.0+0x2bf8>
 8012c38:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c40:	bf14      	ite	ne
 8012c42:	ee68 7aad 	vmulne.f32	s15, s17, s27
 8012c46:	eef0 7a68 	vmoveq.f32	s15, s17
 8012c4a:	f7ff bab4 	b.w	80121b6 <kalman_3gyro.constprop.0+0x29a6>
 8012c4e:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c56:	ee69 7a8c 	vmul.f32	s15, s19, s24
 8012c5a:	eeb0 7a48 	vmov.f32	s14, s16
 8012c5e:	d14e      	bne.n	8012cfe <kalman_3gyro.constprop.0+0x34ee>
 8012c60:	eeb0 da67 	vmov.f32	s26, s15
 8012c64:	eeb0 ca47 	vmov.f32	s24, s14
 8012c68:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c70:	f43f ae95 	beq.w	801299e <kalman_3gyro.constprop.0+0x318e>
 8012c74:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c7c:	f000 84bd 	beq.w	80135fa <kalman_3gyro.constprop.0+0x3dea>
 8012c80:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c88:	ee69 7a8a 	vmul.f32	s15, s19, s20
 8012c8c:	eeb0 7a48 	vmov.f32	s14, s16
 8012c90:	d148      	bne.n	8012d24 <kalman_3gyro.constprop.0+0x3514>
 8012c92:	eef0 9a67 	vmov.f32	s19, s15
 8012c96:	eeb0 aa47 	vmov.f32	s20, s14
 8012c9a:	e692      	b.n	80129c2 <kalman_3gyro.constprop.0+0x31b2>
 8012c9c:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ca4:	d05b      	beq.n	8012d5e <kalman_3gyro.constprop.0+0x354e>
 8012ca6:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cae:	d0a9      	beq.n	8012c04 <kalman_3gyro.constprop.0+0x33f4>
 8012cb0:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb8:	ee29 7aaa 	vmul.f32	s14, s19, s21
 8012cbc:	eef0 8a49 	vmov.f32	s17, s18
 8012cc0:	f43f ae35 	beq.w	801292e <kalman_3gyro.constprop.0+0x311e>
 8012cc4:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ccc:	ee69 7aab 	vmul.f32	s15, s19, s23
 8012cd0:	eef0 aa49 	vmov.f32	s21, s18
 8012cd4:	f43f af69 	beq.w	8012baa <kalman_3gyro.constprop.0+0x339a>
 8012cd8:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce0:	eef0 ba47 	vmov.f32	s23, s14
 8012ce4:	ee29 7aac 	vmul.f32	s14, s19, s25
 8012ce8:	f43f ae3b 	beq.w	8012962 <kalman_3gyro.constprop.0+0x3152>
 8012cec:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf4:	eef0 ca67 	vmov.f32	s25, s15
 8012cf8:	ee69 7a8c 	vmul.f32	s15, s19, s24
 8012cfc:	d0b0      	beq.n	8012c60 <kalman_3gyro.constprop.0+0x3450>
 8012cfe:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d06:	eeb0 ca47 	vmov.f32	s24, s14
 8012d0a:	ee29 7a8d 	vmul.f32	s14, s19, s26
 8012d0e:	f43f ae42 	beq.w	8012996 <kalman_3gyro.constprop.0+0x3186>
 8012d12:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d1a:	eeb0 da67 	vmov.f32	s26, s15
 8012d1e:	ee69 7a8a 	vmul.f32	s15, s19, s20
 8012d22:	d0b6      	beq.n	8012c92 <kalman_3gyro.constprop.0+0x3482>
 8012d24:	eeb0 aa47 	vmov.f32	s20, s14
 8012d28:	e647      	b.n	80129ba <kalman_3gyro.constprop.0+0x31aa>
 8012d2a:	eef0 7a6d 	vmov.f32	s15, s27
 8012d2e:	f7ff baf5 	b.w	801231c <kalman_3gyro.constprop.0+0x2b0c>
 8012d32:	eef0 8a48 	vmov.f32	s17, s16
 8012d36:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d3e:	ee29 9a29 	vmul.f32	s18, s18, s19
 8012d42:	f47f adec 	bne.w	801291e <kalman_3gyro.constprop.0+0x310e>
 8012d46:	eef0 aa49 	vmov.f32	s21, s18
 8012d4a:	e75f      	b.n	8012c0c <kalman_3gyro.constprop.0+0x33fc>
 8012d4c:	ed9f ba2a 	vldr	s22, [pc, #168]	; 8012df8 <kalman_3gyro.constprop.0+0x35e8>
 8012d50:	eef0 9a48 	vmov.f32	s19, s16
 8012d54:	eeb0 aa48 	vmov.f32	s20, s16
 8012d58:	eeb0 da48 	vmov.f32	s26, s16
 8012d5c:	e631      	b.n	80129c2 <kalman_3gyro.constprop.0+0x31b2>
 8012d5e:	eef0 8a6a 	vmov.f32	s17, s21
 8012d62:	e753      	b.n	8012c0c <kalman_3gyro.constprop.0+0x33fc>
 8012d64:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 8012d68:	2a31      	cmp	r2, #49	; 0x31
 8012d6a:	f63f a8a3 	bhi.w	8011eb4 <kalman_3gyro.constprop.0+0x26a4>
 8012d6e:	2100      	movs	r1, #0
 8012d70:	3201      	adds	r2, #1
 8012d72:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 8012d76:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 8012d7a:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8012d7e:	f7ff b899 	b.w	8011eb4 <kalman_3gyro.constprop.0+0x26a4>
 8012d82:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	f340 8423 	ble.w	80135d2 <kalman_3gyro.constprop.0+0x3dc2>
 8012d8c:	3b01      	subs	r3, #1
 8012d8e:	2200      	movs	r2, #0
 8012d90:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 8012d94:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 8012d98:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 8012d9c:	f88d 20b1 	strb.w	r2, [sp, #177]	; 0xb1
 8012da0:	f88d 20b3 	strb.w	r2, [sp, #179]	; 0xb3
 8012da4:	f7fe bca9 	b.w	80116fa <kalman_3gyro.constprop.0+0x1eea>
 8012da8:	f89b 200d 	ldrb.w	r2, [fp, #13]
 8012dac:	f89b 100e 	ldrb.w	r1, [fp, #14]
 8012db0:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8012db4:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 8012db8:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 8012dbc:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 8012dc0:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 8012dc4:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 8012dc8:	f7fe bc18 	b.w	80115fc <kalman_3gyro.constprop.0+0x1dec>
 8012dcc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8012dd0:	eef0 4a46 	vmov.f32	s9, s12
 8012dd4:	eeb1 5ae5 	vsqrt.f32	s10, s11
 8012dd8:	eef0 7a47 	vmov.f32	s15, s14
 8012ddc:	eef0 5a66 	vmov.f32	s11, s13
 8012de0:	e64b      	b.n	8012a7a <kalman_3gyro.constprop.0+0x326a>
 8012de2:	eeb1 7a47 	vneg.f32	s14, s14
 8012de6:	f7fd bc66 	b.w	80106b6 <kalman_3gyro.constprop.0+0xea6>
 8012dea:	eef0 ca69 	vmov.f32	s25, s19
 8012dee:	e6e0      	b.n	8012bb2 <kalman_3gyro.constprop.0+0x33a2>
 8012df0:	eeb0 ba69 	vmov.f32	s22, s19
 8012df4:	e5e5      	b.n	80129c2 <kalman_3gyro.constprop.0+0x31b2>
 8012df6:	bf00      	nop
 8012df8:	00000000 	.word	0x00000000
 8012dfc:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 8012e00:	49dc      	ldr	r1, [pc, #880]	; (8013174 <kalman_3gyro.constprop.0+0x3964>)
 8012e02:	4bdd      	ldr	r3, [pc, #884]	; (8013178 <kalman_3gyro.constprop.0+0x3968>)
 8012e04:	4add      	ldr	r2, [pc, #884]	; (801317c <kalman_3gyro.constprop.0+0x396c>)
 8012e06:	2000      	movs	r0, #0
 8012e08:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 8012e0c:	6029      	str	r1, [r5, #0]
 8012e0e:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 8012e12:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 8012e16:	6002      	str	r2, [r0, #0]
 8012e18:	600b      	str	r3, [r1, #0]
 8012e1a:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 8012e1e:	9004      	str	r0, [sp, #16]
 8012e20:	9110      	str	r1, [sp, #64]	; 0x40
 8012e22:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	f000 80b4 	beq.w	8012f94 <kalman_3gyro.constprop.0+0x3784>
 8012e2c:	240c      	movs	r4, #12
 8012e2e:	eddf bad4 	vldr	s23, [pc, #848]	; 8013180 <kalman_3gyro.constprop.0+0x3970>
 8012e32:	ed9f bad4 	vldr	s22, [pc, #848]	; 8013184 <kalman_3gyro.constprop.0+0x3974>
 8012e36:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 8013188 <kalman_3gyro.constprop.0+0x3978>
 8012e3a:	ed9f aad4 	vldr	s20, [pc, #848]	; 801318c <kalman_3gyro.constprop.0+0x397c>
 8012e3e:	eddf aad4 	vldr	s21, [pc, #848]	; 8013190 <kalman_3gyro.constprop.0+0x3980>
 8012e42:	9f08      	ldr	r7, [sp, #32]
 8012e44:	fb14 8403 	smlabb	r4, r4, r3, r8
 8012e48:	4646      	mov	r6, r8
 8012e4a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8012e4e:	e06b      	b.n	8012f28 <kalman_3gyro.constprop.0+0x3718>
 8012e50:	eeb4 7aca 	vcmpe.f32	s14, s20
 8012e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e58:	f300 815a 	bgt.w	8013110 <kalman_3gyro.constprop.0+0x3900>
 8012e5c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8012e60:	ee17 0a90 	vmov	r0, s15
 8012e64:	f7ed fb68 	bl	8000538 <__aeabi_f2d>
 8012e68:	ec41 0b10 	vmov	d0, r0, r1
 8012e6c:	f005 fb10 	bl	8018490 <ceil>
 8012e70:	ec51 0b10 	vmov	r0, r1, d0
 8012e74:	f7ed fe68 	bl	8000b48 <__aeabi_d2f>
 8012e78:	ee07 0a90 	vmov	s15, r0
 8012e7c:	edc6 7a00 	vstr	s15, [r6]
 8012e80:	ed97 7a01 	vldr	s14, [r7, #4]
 8012e84:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8012e88:	eef0 6ae7 	vabs.f32	s13, s15
 8012e8c:	eef4 6acb 	vcmpe.f32	s13, s22
 8012e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e94:	d51b      	bpl.n	8012ece <kalman_3gyro.constprop.0+0x36be>
 8012e96:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8012e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e9e:	f280 8120 	bge.w	80130e2 <kalman_3gyro.constprop.0+0x38d2>
 8012ea2:	eeb4 7aca 	vcmpe.f32	s14, s20
 8012ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eaa:	f300 812e 	bgt.w	801310a <kalman_3gyro.constprop.0+0x38fa>
 8012eae:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8012eb2:	ee17 0a90 	vmov	r0, s15
 8012eb6:	f7ed fb3f 	bl	8000538 <__aeabi_f2d>
 8012eba:	ec41 0b10 	vmov	d0, r0, r1
 8012ebe:	f005 fae7 	bl	8018490 <ceil>
 8012ec2:	ec51 0b10 	vmov	r0, r1, d0
 8012ec6:	f7ed fe3f 	bl	8000b48 <__aeabi_d2f>
 8012eca:	ee07 0a90 	vmov	s15, r0
 8012ece:	edc6 7a01 	vstr	s15, [r6, #4]
 8012ed2:	ed97 7a02 	vldr	s14, [r7, #8]
 8012ed6:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8012eda:	eef0 6ae7 	vabs.f32	s13, s15
 8012ede:	eef4 6acb 	vcmpe.f32	s13, s22
 8012ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ee6:	d51a      	bpl.n	8012f1e <kalman_3gyro.constprop.0+0x370e>
 8012ee8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8012eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ef0:	da3b      	bge.n	8012f6a <kalman_3gyro.constprop.0+0x375a>
 8012ef2:	eeb4 7aca 	vcmpe.f32	s14, s20
 8012ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012efa:	f300 8103 	bgt.w	8013104 <kalman_3gyro.constprop.0+0x38f4>
 8012efe:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8012f02:	ee17 0a90 	vmov	r0, s15
 8012f06:	f7ed fb17 	bl	8000538 <__aeabi_f2d>
 8012f0a:	ec41 0b10 	vmov	d0, r0, r1
 8012f0e:	f005 fabf 	bl	8018490 <ceil>
 8012f12:	ec51 0b10 	vmov	r0, r1, d0
 8012f16:	f7ed fe17 	bl	8000b48 <__aeabi_d2f>
 8012f1a:	ee07 0a90 	vmov	s15, r0
 8012f1e:	edc6 7a02 	vstr	s15, [r6, #8]
 8012f22:	360c      	adds	r6, #12
 8012f24:	42b4      	cmp	r4, r6
 8012f26:	d035      	beq.n	8012f94 <kalman_3gyro.constprop.0+0x3784>
 8012f28:	ed97 7a00 	vldr	s14, [r7]
 8012f2c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8012f30:	eef0 6ae7 	vabs.f32	s13, s15
 8012f34:	eef4 6acb 	vcmpe.f32	s13, s22
 8012f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f3c:	d59e      	bpl.n	8012e7c <kalman_3gyro.constprop.0+0x366c>
 8012f3e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8012f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f46:	db83      	blt.n	8012e50 <kalman_3gyro.constprop.0+0x3640>
 8012f48:	ee77 7a89 	vadd.f32	s15, s15, s18
 8012f4c:	ee17 0a90 	vmov	r0, s15
 8012f50:	f7ed faf2 	bl	8000538 <__aeabi_f2d>
 8012f54:	ec41 0b10 	vmov	d0, r0, r1
 8012f58:	f005 fb1e 	bl	8018598 <floor>
 8012f5c:	ec51 0b10 	vmov	r0, r1, d0
 8012f60:	f7ed fdf2 	bl	8000b48 <__aeabi_d2f>
 8012f64:	ee07 0a90 	vmov	s15, r0
 8012f68:	e788      	b.n	8012e7c <kalman_3gyro.constprop.0+0x366c>
 8012f6a:	ee77 7a89 	vadd.f32	s15, s15, s18
 8012f6e:	360c      	adds	r6, #12
 8012f70:	ee17 0a90 	vmov	r0, s15
 8012f74:	f7ed fae0 	bl	8000538 <__aeabi_f2d>
 8012f78:	ec41 0b10 	vmov	d0, r0, r1
 8012f7c:	f005 fb0c 	bl	8018598 <floor>
 8012f80:	ec51 0b10 	vmov	r0, r1, d0
 8012f84:	f7ed fde0 	bl	8000b48 <__aeabi_d2f>
 8012f88:	ee07 0a90 	vmov	s15, r0
 8012f8c:	ed46 7a01 	vstr	s15, [r6, #-4]
 8012f90:	42b4      	cmp	r4, r6
 8012f92:	d1c9      	bne.n	8012f28 <kalman_3gyro.constprop.0+0x3718>
 8012f94:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 8012f98:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	f000 80cf 	beq.w	8013140 <kalman_3gyro.constprop.0+0x3930>
 8012fa2:	240c      	movs	r4, #12
 8012fa4:	eddf ba7b 	vldr	s23, [pc, #492]	; 8013194 <kalman_3gyro.constprop.0+0x3984>
 8012fa8:	ed9f ba76 	vldr	s22, [pc, #472]	; 8013184 <kalman_3gyro.constprop.0+0x3974>
 8012fac:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 8013198 <kalman_3gyro.constprop.0+0x3988>
 8012fb0:	ed9f aa7a 	vldr	s20, [pc, #488]	; 801319c <kalman_3gyro.constprop.0+0x398c>
 8012fb4:	eddf aa76 	vldr	s21, [pc, #472]	; 8013190 <kalman_3gyro.constprop.0+0x3980>
 8012fb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012fbc:	fb14 7403 	smlabb	r4, r4, r3, r7
 8012fc0:	463e      	mov	r6, r7
 8012fc2:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8012fc6:	e06b      	b.n	80130a0 <kalman_3gyro.constprop.0+0x3890>
 8012fc8:	eeb4 7aca 	vcmpe.f32	s14, s20
 8012fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fd0:	f300 81a2 	bgt.w	8013318 <kalman_3gyro.constprop.0+0x3b08>
 8012fd4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8012fd8:	ee17 0a90 	vmov	r0, s15
 8012fdc:	f7ed faac 	bl	8000538 <__aeabi_f2d>
 8012fe0:	ec41 0b10 	vmov	d0, r0, r1
 8012fe4:	f005 fa54 	bl	8018490 <ceil>
 8012fe8:	ec51 0b10 	vmov	r0, r1, d0
 8012fec:	f7ed fdac 	bl	8000b48 <__aeabi_d2f>
 8012ff0:	ee07 0a90 	vmov	s15, r0
 8012ff4:	edc6 7a00 	vstr	s15, [r6]
 8012ff8:	ed99 7a04 	vldr	s14, [r9, #16]
 8012ffc:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013000:	eef0 6ae7 	vabs.f32	s13, s15
 8013004:	eef4 6acb 	vcmpe.f32	s13, s22
 8013008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801300c:	d51b      	bpl.n	8013046 <kalman_3gyro.constprop.0+0x3836>
 801300e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013016:	f280 8168 	bge.w	80132ea <kalman_3gyro.constprop.0+0x3ada>
 801301a:	eeb4 7aca 	vcmpe.f32	s14, s20
 801301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013022:	f300 8176 	bgt.w	8013312 <kalman_3gyro.constprop.0+0x3b02>
 8013026:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801302a:	ee17 0a90 	vmov	r0, s15
 801302e:	f7ed fa83 	bl	8000538 <__aeabi_f2d>
 8013032:	ec41 0b10 	vmov	d0, r0, r1
 8013036:	f005 fa2b 	bl	8018490 <ceil>
 801303a:	ec51 0b10 	vmov	r0, r1, d0
 801303e:	f7ed fd83 	bl	8000b48 <__aeabi_d2f>
 8013042:	ee07 0a90 	vmov	s15, r0
 8013046:	edc6 7a01 	vstr	s15, [r6, #4]
 801304a:	ed99 7a05 	vldr	s14, [r9, #20]
 801304e:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013052:	eef0 6ae7 	vabs.f32	s13, s15
 8013056:	eef4 6acb 	vcmpe.f32	s13, s22
 801305a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801305e:	d51a      	bpl.n	8013096 <kalman_3gyro.constprop.0+0x3886>
 8013060:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013068:	da55      	bge.n	8013116 <kalman_3gyro.constprop.0+0x3906>
 801306a:	eeb4 7aca 	vcmpe.f32	s14, s20
 801306e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013072:	f300 814b 	bgt.w	801330c <kalman_3gyro.constprop.0+0x3afc>
 8013076:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801307a:	ee17 0a90 	vmov	r0, s15
 801307e:	f7ed fa5b 	bl	8000538 <__aeabi_f2d>
 8013082:	ec41 0b10 	vmov	d0, r0, r1
 8013086:	f005 fa03 	bl	8018490 <ceil>
 801308a:	ec51 0b10 	vmov	r0, r1, d0
 801308e:	f7ed fd5b 	bl	8000b48 <__aeabi_d2f>
 8013092:	ee07 0a90 	vmov	s15, r0
 8013096:	edc6 7a02 	vstr	s15, [r6, #8]
 801309a:	360c      	adds	r6, #12
 801309c:	42b4      	cmp	r4, r6
 801309e:	d04f      	beq.n	8013140 <kalman_3gyro.constprop.0+0x3930>
 80130a0:	ed99 7a03 	vldr	s14, [r9, #12]
 80130a4:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80130a8:	eef0 6ae7 	vabs.f32	s13, s15
 80130ac:	eef4 6acb 	vcmpe.f32	s13, s22
 80130b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130b4:	d59e      	bpl.n	8012ff4 <kalman_3gyro.constprop.0+0x37e4>
 80130b6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80130ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130be:	db83      	blt.n	8012fc8 <kalman_3gyro.constprop.0+0x37b8>
 80130c0:	ee77 7a89 	vadd.f32	s15, s15, s18
 80130c4:	ee17 0a90 	vmov	r0, s15
 80130c8:	f7ed fa36 	bl	8000538 <__aeabi_f2d>
 80130cc:	ec41 0b10 	vmov	d0, r0, r1
 80130d0:	f005 fa62 	bl	8018598 <floor>
 80130d4:	ec51 0b10 	vmov	r0, r1, d0
 80130d8:	f7ed fd36 	bl	8000b48 <__aeabi_d2f>
 80130dc:	ee07 0a90 	vmov	s15, r0
 80130e0:	e788      	b.n	8012ff4 <kalman_3gyro.constprop.0+0x37e4>
 80130e2:	ee77 7a89 	vadd.f32	s15, s15, s18
 80130e6:	ee17 0a90 	vmov	r0, s15
 80130ea:	f7ed fa25 	bl	8000538 <__aeabi_f2d>
 80130ee:	ec41 0b10 	vmov	d0, r0, r1
 80130f2:	f005 fa51 	bl	8018598 <floor>
 80130f6:	ec51 0b10 	vmov	r0, r1, d0
 80130fa:	f7ed fd25 	bl	8000b48 <__aeabi_d2f>
 80130fe:	ee07 0a90 	vmov	s15, r0
 8013102:	e6e4      	b.n	8012ece <kalman_3gyro.constprop.0+0x36be>
 8013104:	eef0 7a6a 	vmov.f32	s15, s21
 8013108:	e709      	b.n	8012f1e <kalman_3gyro.constprop.0+0x370e>
 801310a:	eef0 7a6a 	vmov.f32	s15, s21
 801310e:	e6de      	b.n	8012ece <kalman_3gyro.constprop.0+0x36be>
 8013110:	eef0 7a6a 	vmov.f32	s15, s21
 8013114:	e6b2      	b.n	8012e7c <kalman_3gyro.constprop.0+0x366c>
 8013116:	ee77 7a89 	vadd.f32	s15, s15, s18
 801311a:	360c      	adds	r6, #12
 801311c:	ee17 0a90 	vmov	r0, s15
 8013120:	f7ed fa0a 	bl	8000538 <__aeabi_f2d>
 8013124:	ec41 0b10 	vmov	d0, r0, r1
 8013128:	f005 fa36 	bl	8018598 <floor>
 801312c:	ec51 0b10 	vmov	r0, r1, d0
 8013130:	f7ed fd0a 	bl	8000b48 <__aeabi_d2f>
 8013134:	ee07 0a90 	vmov	s15, r0
 8013138:	ed46 7a01 	vstr	s15, [r6, #-4]
 801313c:	42b4      	cmp	r4, r6
 801313e:	d1af      	bne.n	80130a0 <kalman_3gyro.constprop.0+0x3890>
 8013140:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 8013144:	2b00      	cmp	r3, #0
 8013146:	f43c ac7e 	beq.w	800fa46 <kalman_3gyro.constprop.0+0x236>
 801314a:	f50b 66f3 	add.w	r6, fp, #1944	; 0x798
 801314e:	240c      	movs	r4, #12
 8013150:	eddf ba13 	vldr	s23, [pc, #76]	; 80131a0 <kalman_3gyro.constprop.0+0x3990>
 8013154:	ed9f ba0b 	vldr	s22, [pc, #44]	; 8013184 <kalman_3gyro.constprop.0+0x3974>
 8013158:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80131a4 <kalman_3gyro.constprop.0+0x3994>
 801315c:	ed9f aa12 	vldr	s20, [pc, #72]	; 80131a8 <kalman_3gyro.constprop.0+0x3998>
 8013160:	eddf aa0b 	vldr	s21, [pc, #44]	; 8013190 <kalman_3gyro.constprop.0+0x3980>
 8013164:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013168:	960f      	str	r6, [sp, #60]	; 0x3c
 801316a:	fb14 6403 	smlabb	r4, r4, r3, r6
 801316e:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8013172:	e099      	b.n	80132a8 <kalman_3gyro.constprop.0+0x3a98>
 8013174:	3a7001e0 	.word	0x3a7001e0
 8013178:	3a8c0118 	.word	0x3a8c0118
 801317c:	3a000100 	.word	0x3a000100
 8013180:	44888777 	.word	0x44888777
 8013184:	4b000000 	.word	0x4b000000
 8013188:	39f001e1 	.word	0x39f001e1
 801318c:	b9f001e1 	.word	0xb9f001e1
 8013190:	80000000 	.word	0x80000000
 8013194:	44fffe00 	.word	0x44fffe00
 8013198:	39800100 	.word	0x39800100
 801319c:	b9800100 	.word	0xb9800100
 80131a0:	446a0ccd 	.word	0x446a0ccd
 80131a4:	3a0c0118 	.word	0x3a0c0118
 80131a8:	ba0c0118 	.word	0xba0c0118
 80131ac:	bf666666 	.word	0xbf666666
 80131b0:	3d072b02 	.word	0x3d072b02
 80131b4:	3cb43958 	.word	0x3cb43958
 80131b8:	3cf5c28f 	.word	0x3cf5c28f
 80131bc:	3d75c28f 	.word	0x3d75c28f
 80131c0:	3d23d70a 	.word	0x3d23d70a
 80131c4:	3ca3d70a 	.word	0x3ca3d70a
 80131c8:	3d4ccccd 	.word	0x3d4ccccd
 80131cc:	3d8f5c29 	.word	0x3d8f5c29
 80131d0:	eeb4 7aca 	vcmpe.f32	s14, s20
 80131d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d8:	f300 80c6 	bgt.w	8013368 <kalman_3gyro.constprop.0+0x3b58>
 80131dc:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80131e0:	ee17 0a90 	vmov	r0, s15
 80131e4:	f7ed f9a8 	bl	8000538 <__aeabi_f2d>
 80131e8:	ec41 0b10 	vmov	d0, r0, r1
 80131ec:	f005 f950 	bl	8018490 <ceil>
 80131f0:	ec51 0b10 	vmov	r0, r1, d0
 80131f4:	f7ed fca8 	bl	8000b48 <__aeabi_d2f>
 80131f8:	ee07 0a90 	vmov	s15, r0
 80131fc:	edc6 7a00 	vstr	s15, [r6]
 8013200:	ed99 7a07 	vldr	s14, [r9, #28]
 8013204:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013208:	eef0 6ae7 	vabs.f32	s13, s15
 801320c:	eef4 6acb 	vcmpe.f32	s13, s22
 8013210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013214:	d51b      	bpl.n	801324e <kalman_3gyro.constprop.0+0x3a3e>
 8013216:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801321e:	f280 808f 	bge.w	8013340 <kalman_3gyro.constprop.0+0x3b30>
 8013222:	eeb4 7aca 	vcmpe.f32	s14, s20
 8013226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801322a:	f300 809a 	bgt.w	8013362 <kalman_3gyro.constprop.0+0x3b52>
 801322e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013232:	ee17 0a90 	vmov	r0, s15
 8013236:	f7ed f97f 	bl	8000538 <__aeabi_f2d>
 801323a:	ec41 0b10 	vmov	d0, r0, r1
 801323e:	f005 f927 	bl	8018490 <ceil>
 8013242:	ec51 0b10 	vmov	r0, r1, d0
 8013246:	f7ed fc7f 	bl	8000b48 <__aeabi_d2f>
 801324a:	ee07 0a90 	vmov	s15, r0
 801324e:	edc6 7a01 	vstr	s15, [r6, #4]
 8013252:	ed99 7a08 	vldr	s14, [r9, #32]
 8013256:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801325a:	eef0 6ae7 	vabs.f32	s13, s15
 801325e:	eef4 6acb 	vcmpe.f32	s13, s22
 8013262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013266:	d519      	bpl.n	801329c <kalman_3gyro.constprop.0+0x3a8c>
 8013268:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013270:	da55      	bge.n	801331e <kalman_3gyro.constprop.0+0x3b0e>
 8013272:	eeb4 7aca 	vcmpe.f32	s14, s20
 8013276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801327a:	dc78      	bgt.n	801336e <kalman_3gyro.constprop.0+0x3b5e>
 801327c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013280:	ee17 0a90 	vmov	r0, s15
 8013284:	f7ed f958 	bl	8000538 <__aeabi_f2d>
 8013288:	ec41 0b10 	vmov	d0, r0, r1
 801328c:	f005 f900 	bl	8018490 <ceil>
 8013290:	ec51 0b10 	vmov	r0, r1, d0
 8013294:	f7ed fc58 	bl	8000b48 <__aeabi_d2f>
 8013298:	ee07 0a90 	vmov	s15, r0
 801329c:	edc6 7a02 	vstr	s15, [r6, #8]
 80132a0:	360c      	adds	r6, #12
 80132a2:	42b4      	cmp	r4, r6
 80132a4:	f43c abd2 	beq.w	800fa4c <kalman_3gyro.constprop.0+0x23c>
 80132a8:	ed99 7a06 	vldr	s14, [r9, #24]
 80132ac:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80132b0:	eef0 6ae7 	vabs.f32	s13, s15
 80132b4:	eef4 6acb 	vcmpe.f32	s13, s22
 80132b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132bc:	d59e      	bpl.n	80131fc <kalman_3gyro.constprop.0+0x39ec>
 80132be:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80132c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132c6:	db83      	blt.n	80131d0 <kalman_3gyro.constprop.0+0x39c0>
 80132c8:	ee77 7a89 	vadd.f32	s15, s15, s18
 80132cc:	ee17 0a90 	vmov	r0, s15
 80132d0:	f7ed f932 	bl	8000538 <__aeabi_f2d>
 80132d4:	ec41 0b10 	vmov	d0, r0, r1
 80132d8:	f005 f95e 	bl	8018598 <floor>
 80132dc:	ec51 0b10 	vmov	r0, r1, d0
 80132e0:	f7ed fc32 	bl	8000b48 <__aeabi_d2f>
 80132e4:	ee07 0a90 	vmov	s15, r0
 80132e8:	e788      	b.n	80131fc <kalman_3gyro.constprop.0+0x39ec>
 80132ea:	ee77 7a89 	vadd.f32	s15, s15, s18
 80132ee:	ee17 0a90 	vmov	r0, s15
 80132f2:	f7ed f921 	bl	8000538 <__aeabi_f2d>
 80132f6:	ec41 0b10 	vmov	d0, r0, r1
 80132fa:	f005 f94d 	bl	8018598 <floor>
 80132fe:	ec51 0b10 	vmov	r0, r1, d0
 8013302:	f7ed fc21 	bl	8000b48 <__aeabi_d2f>
 8013306:	ee07 0a90 	vmov	s15, r0
 801330a:	e69c      	b.n	8013046 <kalman_3gyro.constprop.0+0x3836>
 801330c:	eef0 7a6a 	vmov.f32	s15, s21
 8013310:	e6c1      	b.n	8013096 <kalman_3gyro.constprop.0+0x3886>
 8013312:	eef0 7a6a 	vmov.f32	s15, s21
 8013316:	e696      	b.n	8013046 <kalman_3gyro.constprop.0+0x3836>
 8013318:	eef0 7a6a 	vmov.f32	s15, s21
 801331c:	e66a      	b.n	8012ff4 <kalman_3gyro.constprop.0+0x37e4>
 801331e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013322:	ee17 0a90 	vmov	r0, s15
 8013326:	f7ed f907 	bl	8000538 <__aeabi_f2d>
 801332a:	ec41 0b10 	vmov	d0, r0, r1
 801332e:	f005 f933 	bl	8018598 <floor>
 8013332:	ec51 0b10 	vmov	r0, r1, d0
 8013336:	f7ed fc07 	bl	8000b48 <__aeabi_d2f>
 801333a:	ee07 0a90 	vmov	s15, r0
 801333e:	e7ad      	b.n	801329c <kalman_3gyro.constprop.0+0x3a8c>
 8013340:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013344:	ee17 0a90 	vmov	r0, s15
 8013348:	f7ed f8f6 	bl	8000538 <__aeabi_f2d>
 801334c:	ec41 0b10 	vmov	d0, r0, r1
 8013350:	f005 f922 	bl	8018598 <floor>
 8013354:	ec51 0b10 	vmov	r0, r1, d0
 8013358:	f7ed fbf6 	bl	8000b48 <__aeabi_d2f>
 801335c:	ee07 0a90 	vmov	s15, r0
 8013360:	e775      	b.n	801324e <kalman_3gyro.constprop.0+0x3a3e>
 8013362:	eef0 7a6a 	vmov.f32	s15, s21
 8013366:	e772      	b.n	801324e <kalman_3gyro.constprop.0+0x3a3e>
 8013368:	eef0 7a6a 	vmov.f32	s15, s21
 801336c:	e746      	b.n	80131fc <kalman_3gyro.constprop.0+0x39ec>
 801336e:	eef0 7a6a 	vmov.f32	s15, s21
 8013372:	e793      	b.n	801329c <kalman_3gyro.constprop.0+0x3a8c>
 8013374:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8013376:	7813      	ldrb	r3, [r2, #0]
 8013378:	ed92 7a03 	vldr	s14, [r2, #12]
 801337c:	edd2 6a01 	vldr	s13, [r2, #4]
 8013380:	edd2 7a02 	vldr	s15, [r2, #8]
 8013384:	2200      	movs	r2, #0
 8013386:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 801338a:	2b00      	cmp	r3, #0
 801338c:	f040 813b 	bne.w	8013606 <kalman_3gyro.constprop.0+0x3df6>
 8013390:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 80131ac <kalman_3gyro.constprop.0+0x399c>
 8013394:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 8013398:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 801339c:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 80133a0:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 80133a4:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80133a8:	2100      	movs	r1, #0
 80133aa:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 80133ae:	f006 ffab 	bl	801a308 <memset>
 80133b2:	eddb 7a02 	vldr	s15, [fp, #8]
 80133b6:	ed5f 5a82 	vldr	s11, [pc, #-520]	; 80131b0 <kalman_3gyro.constprop.0+0x39a0>
 80133ba:	ed1f 6a82 	vldr	s12, [pc, #-520]	; 80131b4 <kalman_3gyro.constprop.0+0x39a4>
 80133be:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 80131b8 <kalman_3gyro.constprop.0+0x39a8>
 80133c2:	ed5f 4a82 	vldr	s9, [pc, #-520]	; 80131bc <kalman_3gyro.constprop.0+0x39ac>
 80133c6:	ed5f 3a82 	vldr	s7, [pc, #-520]	; 80131c0 <kalman_3gyro.constprop.0+0x39b0>
 80133ca:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 80131c4 <kalman_3gyro.constprop.0+0x39b4>
 80133ce:	ed1f 5a82 	vldr	s10, [pc, #-520]	; 80131c8 <kalman_3gyro.constprop.0+0x39b8>
 80133d2:	ed1f 4a82 	vldr	s8, [pc, #-520]	; 80131cc <kalman_3gyro.constprop.0+0x39bc>
 80133d6:	4bd9      	ldr	r3, [pc, #868]	; (801373c <kalman_3gyro.constprop.0+0x3f2c>)
 80133d8:	49d9      	ldr	r1, [pc, #868]	; (8013740 <kalman_3gyro.constprop.0+0x3f30>)
 80133da:	4dda      	ldr	r5, [pc, #872]	; (8013744 <kalman_3gyro.constprop.0+0x3f34>)
 80133dc:	ed9f 3ada 	vldr	s6, [pc, #872]	; 8013748 <kalman_3gyro.constprop.0+0x3f38>
 80133e0:	48da      	ldr	r0, [pc, #872]	; (801374c <kalman_3gyro.constprop.0+0x3f3c>)
 80133e2:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 80133e6:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80133ea:	ee27 6a86 	vmul.f32	s12, s15, s12
 80133ee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80133f2:	edcb 5a34 	vstr	s11, [fp, #208]	; 0xd0
 80133f6:	eddf 5ad6 	vldr	s11, [pc, #856]	; 8013750 <kalman_3gyro.constprop.0+0x3f40>
 80133fa:	ed8b 6a4e 	vstr	s12, [fp, #312]	; 0x138
 80133fe:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8013402:	ee67 3aa3 	vmul.f32	s7, s15, s7
 8013406:	edcb 6a50 	vstr	s13, [fp, #320]	; 0x140
 801340a:	ed9f 6ad2 	vldr	s12, [pc, #840]	; 8013754 <kalman_3gyro.constprop.0+0x3f44>
 801340e:	eddf 6ad2 	vldr	s13, [pc, #840]	; 8013758 <kalman_3gyro.constprop.0+0x3f48>
 8013412:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 8013416:	ee27 7a87 	vmul.f32	s14, s15, s14
 801341a:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801341e:	ee27 5a85 	vmul.f32	s10, s15, s10
 8013422:	ee27 4a84 	vmul.f32	s8, s15, s8
 8013426:	ee27 6a86 	vmul.f32	s12, s15, s12
 801342a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801342e:	2200      	movs	r2, #0
 8013430:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 8013434:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 8013438:	edcb 4a38 	vstr	s9, [fp, #224]	; 0xe0
 801343c:	4cc7      	ldr	r4, [pc, #796]	; (801375c <kalman_3gyro.constprop.0+0x3f4c>)
 801343e:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 8013442:	f8cb 10d4 	str.w	r1, [fp, #212]	; 0xd4
 8013446:	eddf 3ac6 	vldr	s7, [pc, #792]	; 8013760 <kalman_3gyro.constprop.0+0x3f50>
 801344a:	49c6      	ldr	r1, [pc, #792]	; (8013764 <kalman_3gyro.constprop.0+0x3f54>)
 801344c:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
 8013450:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 8013454:	eddf 4ac4 	vldr	s9, [pc, #784]	; 8013768 <kalman_3gyro.constprop.0+0x3f58>
 8013458:	4bc4      	ldr	r3, [pc, #784]	; (801376c <kalman_3gyro.constprop.0+0x3f5c>)
 801345a:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 801345e:	f8cb 2128 	str.w	r2, [fp, #296]	; 0x128
 8013462:	f8cb 513c 	str.w	r5, [fp, #316]	; 0x13c
 8013466:	4ac2      	ldr	r2, [pc, #776]	; (8013770 <kalman_3gyro.constprop.0+0x3f60>)
 8013468:	f8cb 4144 	str.w	r4, [fp, #324]	; 0x144
 801346c:	f8cb 014c 	str.w	r0, [fp, #332]	; 0x14c
 8013470:	f8cb 10ec 	str.w	r1, [fp, #236]	; 0xec
 8013474:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8013478:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 801347c:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8013480:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8013484:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8013488:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 801348c:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8013490:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8013494:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8013498:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 801349c:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 80134a0:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 80134a4:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 80134a8:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 80134ac:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 80134b0:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 80134b4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80134b8:	ee67 4aa4 	vmul.f32	s9, s15, s9
 80134bc:	4cad      	ldr	r4, [pc, #692]	; (8013774 <kalman_3gyro.constprop.0+0x3f64>)
 80134be:	48ae      	ldr	r0, [pc, #696]	; (8013778 <kalman_3gyro.constprop.0+0x3f68>)
 80134c0:	49ae      	ldr	r1, [pc, #696]	; (801377c <kalman_3gyro.constprop.0+0x3f6c>)
 80134c2:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 80134c6:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 80134ca:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 80134ce:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 80134d2:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 80134d6:	ee27 6a83 	vmul.f32	s12, s15, s6
 80134da:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 80134de:	f8cb 2154 	str.w	r2, [fp, #340]	; 0x154
 80134e2:	ee67 6aa5 	vmul.f32	s13, s15, s11
 80134e6:	f8cb 210c 	str.w	r2, [fp, #268]	; 0x10c
 80134ea:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80134ee:	4aa4      	ldr	r2, [pc, #656]	; (8013780 <kalman_3gyro.constprop.0+0x3f70>)
 80134f0:	f8cb 40fc 	str.w	r4, [fp, #252]	; 0xfc
 80134f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80134f8:	f8cb 0164 	str.w	r0, [fp, #356]	; 0x164
 80134fc:	f8cb 1174 	str.w	r1, [fp, #372]	; 0x174
 8013500:	f8cb 219c 	str.w	r2, [fp, #412]	; 0x19c
 8013504:	4e9f      	ldr	r6, [pc, #636]	; (8013784 <kalman_3gyro.constprop.0+0x3f74>)
 8013506:	4da0      	ldr	r5, [pc, #640]	; (8013788 <kalman_3gyro.constprop.0+0x3f78>)
 8013508:	49a0      	ldr	r1, [pc, #640]	; (801378c <kalman_3gyro.constprop.0+0x3f7c>)
 801350a:	4aa1      	ldr	r2, [pc, #644]	; (8013790 <kalman_3gyro.constprop.0+0x3f80>)
 801350c:	f8cb 317c 	str.w	r3, [fp, #380]	; 0x17c
 8013510:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
 8013514:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8013518:	f8cb 311c 	str.w	r3, [fp, #284]	; 0x11c
 801351c:	f8cb 3124 	str.w	r3, [fp, #292]	; 0x124
 8013520:	ed8b 3a3d 	vstr	s6, [fp, #244]	; 0xf4
 8013524:	ed8b 6a42 	vstr	s12, [fp, #264]	; 0x108
 8013528:	ed8b 6a5c 	vstr	s12, [fp, #368]	; 0x170
 801352c:	edcb 5a66 	vstr	s11, [fp, #408]	; 0x198
 8013530:	edcb 6a44 	vstr	s13, [fp, #272]	; 0x110
 8013534:	edcb 6a5e 	vstr	s13, [fp, #376]	; 0x178
 8013538:	edcb 3a65 	vstr	s7, [fp, #404]	; 0x194
 801353c:	edcb 7a46 	vstr	s15, [fp, #280]	; 0x118
 8013540:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 8013544:	f8cb 615c 	str.w	r6, [fp, #348]	; 0x15c
 8013548:	f8cb 516c 	str.w	r5, [fp, #364]	; 0x16c
 801354c:	f8cb 4104 	str.w	r4, [fp, #260]	; 0x104
 8013550:	f8cb 0114 	str.w	r0, [fp, #276]	; 0x114
 8013554:	f8cb 1184 	str.w	r1, [fp, #388]	; 0x184
 8013558:	f8cb 218c 	str.w	r2, [fp, #396]	; 0x18c
 801355c:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 8013560:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8013564:	b973      	cbnz	r3, 8013584 <kalman_3gyro.constprop.0+0x3d74>
 8013566:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 801356a:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 801356e:	6811      	ldr	r1, [r2, #0]
 8013570:	681a      	ldr	r2, [r3, #0]
 8013572:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 8013576:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 8013580:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 8013584:	2300      	movs	r3, #0
 8013586:	f88b 3001 	strb.w	r3, [fp, #1]
 801358a:	f7fc ba4b 	b.w	800fa24 <kalman_3gyro.constprop.0+0x214>
 801358e:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8013592:	ed9b ea4b 	vldr	s28, [fp, #300]	; 0x12c
 8013596:	ee27 7a0b 	vmul.f32	s14, s14, s22
 801359a:	ee69 9a8e 	vmul.f32	s19, s19, s28
 801359e:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 80135a2:	f7fd bd5b 	b.w	801105c <kalman_3gyro.constprop.0+0x184c>
 80135a6:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8013794 <kalman_3gyro.constprop.0+0x3f84>
 80135aa:	f7fc ba9e 	b.w	800faea <kalman_3gyro.constprop.0+0x2da>
 80135ae:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 80135b2:	f7fd bd7b 	b.w	80110ac <kalman_3gyro.constprop.0+0x189c>
 80135b6:	ed9f 6a78 	vldr	s12, [pc, #480]	; 8013798 <kalman_3gyro.constprop.0+0x3f88>
 80135ba:	ed9f 4a78 	vldr	s8, [pc, #480]	; 801379c <kalman_3gyro.constprop.0+0x3f8c>
 80135be:	eddf 4a78 	vldr	s9, [pc, #480]	; 80137a0 <kalman_3gyro.constprop.0+0x3f90>
 80135c2:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80137a4 <kalman_3gyro.constprop.0+0x3f94>
 80135c6:	ed9f ca78 	vldr	s24, [pc, #480]	; 80137a8 <kalman_3gyro.constprop.0+0x3f98>
 80135ca:	ee68 8a8c 	vmul.f32	s17, s17, s24
 80135ce:	f7fd bf9d 	b.w	801150c <kalman_3gyro.constprop.0+0x1cfc>
 80135d2:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 80135d6:	2a00      	cmp	r2, #0
 80135d8:	f340 8181 	ble.w	80138de <kalman_3gyro.constprop.0+0x40ce>
 80135dc:	ed9d 7a02 	vldr	s14, [sp, #8]
 80135e0:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 80135e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80135e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ec:	f340 8177 	ble.w	80138de <kalman_3gyro.constprop.0+0x40ce>
 80135f0:	3a01      	subs	r2, #1
 80135f2:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 80135f6:	f7fe b880 	b.w	80116fa <kalman_3gyro.constprop.0+0x1eea>
 80135fa:	eeb0 aa69 	vmov.f32	s20, s19
 80135fe:	eeb0 ba69 	vmov.f32	s22, s19
 8013602:	f7ff b9de 	b.w	80129c2 <kalman_3gyro.constprop.0+0x31b2>
 8013606:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801360a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801360e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013612:	eef1 6ae7 	vsqrt.f32	s13, s15
 8013616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801361a:	e6bb      	b.n	8013394 <kalman_3gyro.constprop.0+0x3b84>
 801361c:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8013620:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8013624:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8013628:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 801362c:	f7fe b802 	b.w	8011634 <kalman_3gyro.constprop.0+0x1e24>
 8013630:	ed9b ba49 	vldr	s22, [fp, #292]	; 0x124
 8013634:	f7fd bae6 	b.w	8010c04 <kalman_3gyro.constprop.0+0x13f4>
 8013638:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 801363c:	ed9b ea63 	vldr	s28, [fp, #396]	; 0x18c
 8013640:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8013644:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8013648:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 801364c:	f7fd bd06 	b.w	801105c <kalman_3gyro.constprop.0+0x184c>
 8013650:	ee7e 7a67 	vsub.f32	s15, s28, s15
 8013654:	ee17 0a90 	vmov	r0, s15
 8013658:	f7ec ff6e 	bl	8000538 <__aeabi_f2d>
 801365c:	ec41 0b10 	vmov	d0, r0, r1
 8013660:	f004 ff16 	bl	8018490 <ceil>
 8013664:	ec51 0b10 	vmov	r0, r1, d0
 8013668:	f7ed fa6e 	bl	8000b48 <__aeabi_d2f>
 801366c:	ee0e 0a10 	vmov	s28, r0
 8013670:	f7fc bc70 	b.w	800ff54 <kalman_3gyro.constprop.0+0x744>
 8013674:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8013678:	ee17 0a90 	vmov	r0, s15
 801367c:	f7ec ff5c 	bl	8000538 <__aeabi_f2d>
 8013680:	ec41 0b10 	vmov	d0, r0, r1
 8013684:	f004 ff04 	bl	8018490 <ceil>
 8013688:	ec51 0b10 	vmov	r0, r1, d0
 801368c:	f7ed fa5c 	bl	8000b48 <__aeabi_d2f>
 8013690:	ee0d 0a90 	vmov	s27, r0
 8013694:	f7fc bc81 	b.w	800ff9a <kalman_3gyro.constprop.0+0x78a>
 8013698:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 801369c:	ee17 0a90 	vmov	r0, s15
 80136a0:	f7ec ff4a 	bl	8000538 <__aeabi_f2d>
 80136a4:	ec41 0b10 	vmov	d0, r0, r1
 80136a8:	f004 fef2 	bl	8018490 <ceil>
 80136ac:	ec51 0b10 	vmov	r0, r1, d0
 80136b0:	f7ed fa4a 	bl	8000b48 <__aeabi_d2f>
 80136b4:	ee0d 0a90 	vmov	s27, r0
 80136b8:	f7fc bcd5 	b.w	8010066 <kalman_3gyro.constprop.0+0x856>
 80136bc:	ee7b 7a67 	vsub.f32	s15, s22, s15
 80136c0:	ee17 0a90 	vmov	r0, s15
 80136c4:	f7ec ff38 	bl	8000538 <__aeabi_f2d>
 80136c8:	ec41 0b10 	vmov	d0, r0, r1
 80136cc:	f004 fee0 	bl	8018490 <ceil>
 80136d0:	ec51 0b10 	vmov	r0, r1, d0
 80136d4:	f7ed fa38 	bl	8000b48 <__aeabi_d2f>
 80136d8:	ee0b 0a10 	vmov	s22, r0
 80136dc:	f7fc bce6 	b.w	80100ac <kalman_3gyro.constprop.0+0x89c>
 80136e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136e4:	f6fd addf 	blt.w	80112a6 <kalman_3gyro.constprop.0+0x1a96>
 80136e8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80137a0 <kalman_3gyro.constprop.0+0x3f90>
 80136ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80136f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136f4:	f140 8283 	bpl.w	8013bfe <kalman_3gyro.constprop.0+0x43ee>
 80136f8:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80137ac <kalman_3gyro.constprop.0+0x3f9c>
 80136fc:	eddf 4a2c 	vldr	s9, [pc, #176]	; 80137b0 <kalman_3gyro.constprop.0+0x3fa0>
 8013700:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80137b4 <kalman_3gyro.constprop.0+0x3fa4>
 8013704:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013708:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801370c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8013710:	eea6 7a86 	vfma.f32	s14, s13, s12
 8013714:	f7fd bdd1 	b.w	80112ba <kalman_3gyro.constprop.0+0x1aaa>
 8013718:	ee78 7a67 	vsub.f32	s15, s16, s15
 801371c:	ee17 0a90 	vmov	r0, s15
 8013720:	f7ec ff0a 	bl	8000538 <__aeabi_f2d>
 8013724:	ec41 0b10 	vmov	d0, r0, r1
 8013728:	f004 feb2 	bl	8018490 <ceil>
 801372c:	ec51 0b10 	vmov	r0, r1, d0
 8013730:	f7ed fa0a 	bl	8000b48 <__aeabi_d2f>
 8013734:	ee08 0a10 	vmov	s16, r0
 8013738:	f7fc bbe9 	b.w	800ff0e <kalman_3gyro.constprop.0+0x6fe>
 801373c:	3eb33333 	.word	0x3eb33333
 8013740:	3ee66666 	.word	0x3ee66666
 8013744:	3f866666 	.word	0x3f866666
 8013748:	3ecccccd 	.word	0x3ecccccd
 801374c:	3f933333 	.word	0x3f933333
 8013750:	3dcccccd 	.word	0x3dcccccd
 8013754:	3e4ccccd 	.word	0x3e4ccccd
 8013758:	3e99999a 	.word	0x3e99999a
 801375c:	3f8ccccd 	.word	0x3f8ccccd
 8013760:	3f4ccccd 	.word	0x3f4ccccd
 8013764:	3ebd70a4 	.word	0x3ebd70a4
 8013768:	3f666666 	.word	0x3f666666
 801376c:	40a00000 	.word	0x40a00000
 8013770:	3f99999a 	.word	0x3f99999a
 8013774:	3f19999a 	.word	0x3f19999a
 8013778:	3fb9999a 	.word	0x3fb9999a
 801377c:	3fe66666 	.word	0x3fe66666
 8013780:	3f333333 	.word	0x3f333333
 8013784:	3fa66666 	.word	0x3fa66666
 8013788:	3fcccccd 	.word	0x3fcccccd
 801378c:	40200000 	.word	0x40200000
 8013790:	40400000 	.word	0x40400000
 8013794:	bf666666 	.word	0xbf666666
 8013798:	391d4951 	.word	0x391d4951
 801379c:	383cbe62 	.word	0x383cbe62
 80137a0:	3c75c28f 	.word	0x3c75c28f
 80137a4:	469c3e00 	.word	0x469c3e00
 80137a8:	43168000 	.word	0x43168000
 80137ac:	3c23d70a 	.word	0x3c23d70a
 80137b0:	3f19999a 	.word	0x3f19999a
 80137b4:	43480000 	.word	0x43480000
 80137b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80137bc:	ee3a aa47 	vsub.f32	s20, s20, s14
 80137c0:	eef0 7aca 	vabs.f32	s15, s20
 80137c4:	ee2a aa0a 	vmul.f32	s20, s20, s20
 80137c8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80137cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137d0:	eeb4 aac7 	vcmpe.f32	s20, s14
 80137d4:	bfb8      	it	lt
 80137d6:	eef0 7a66 	vmovlt.f32	s15, s13
 80137da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137de:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 80137e2:	f77d af5b 	ble.w	801169c <kalman_3gyro.constprop.0+0x1e8c>
 80137e6:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 80137ea:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80137ee:	eeb4 aac7 	vcmpe.f32	s20, s14
 80137f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137f6:	f77d af51 	ble.w	801169c <kalman_3gyro.constprop.0+0x1e8c>
 80137fa:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 80137fe:	ed9d 7a74 	vldr	s14, [sp, #464]	; 0x1d0
 8013802:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8013806:	ee66 6a8a 	vmul.f32	s13, s13, s20
 801380a:	ee27 aa0a 	vmul.f32	s20, s14, s20
 801380e:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 8013812:	edcd 6a73 	vstr	s13, [sp, #460]	; 0x1cc
 8013816:	ed8d aa74 	vstr	s20, [sp, #464]	; 0x1d0
 801381a:	f7fd bf3f 	b.w	801169c <kalman_3gyro.constprop.0+0x1e8c>
 801381e:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 8013822:	2a01      	cmp	r2, #1
 8013824:	d002      	beq.n	801382c <kalman_3gyro.constprop.0+0x401c>
 8013826:	2b01      	cmp	r3, #1
 8013828:	f47d af1e 	bne.w	8011668 <kalman_3gyro.constprop.0+0x1e58>
 801382c:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8013830:	eef4 7ac3 	vcmpe.f32	s15, s6
 8013834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013838:	bfa8      	it	ge
 801383a:	eeb0 3a67 	vmovge.f32	s6, s15
 801383e:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 8013842:	ed8d 3a70 	vstr	s6, [sp, #448]	; 0x1c0
 8013846:	ed8d 3a71 	vstr	s6, [sp, #452]	; 0x1c4
 801384a:	f7fd bf0d 	b.w	8011668 <kalman_3gyro.constprop.0+0x1e58>
 801384e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8013852:	ee17 0a90 	vmov	r0, s15
 8013856:	f7ec fe6f 	bl	8000538 <__aeabi_f2d>
 801385a:	ec41 0b10 	vmov	d0, r0, r1
 801385e:	f004 fe17 	bl	8018490 <ceil>
 8013862:	ec51 0b10 	vmov	r0, r1, d0
 8013866:	f7ed f96f 	bl	8000b48 <__aeabi_d2f>
 801386a:	ee08 0a10 	vmov	s16, r0
 801386e:	f7fc bc40 	b.w	80100f2 <kalman_3gyro.constprop.0+0x8e2>
 8013872:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8013876:	ee17 0a90 	vmov	r0, s15
 801387a:	f7ec fe5d 	bl	8000538 <__aeabi_f2d>
 801387e:	ec41 0b10 	vmov	d0, r0, r1
 8013882:	f004 fe05 	bl	8018490 <ceil>
 8013886:	ec51 0b10 	vmov	r0, r1, d0
 801388a:	f7ed f95d 	bl	8000b48 <__aeabi_d2f>
 801388e:	ee0b 0a10 	vmov	s22, r0
 8013892:	f7fc bcb7 	b.w	8010204 <kalman_3gyro.constprop.0+0x9f4>
 8013896:	ee78 7a67 	vsub.f32	s15, s16, s15
 801389a:	ee17 0a90 	vmov	r0, s15
 801389e:	f7ec fe4b 	bl	8000538 <__aeabi_f2d>
 80138a2:	ec41 0b10 	vmov	d0, r0, r1
 80138a6:	f004 fdf3 	bl	8018490 <ceil>
 80138aa:	ec51 0b10 	vmov	r0, r1, d0
 80138ae:	f7ed f94b 	bl	8000b48 <__aeabi_d2f>
 80138b2:	ee08 0a10 	vmov	s16, r0
 80138b6:	f7fc bcc8 	b.w	801024a <kalman_3gyro.constprop.0+0xa3a>
 80138ba:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80138be:	ee17 0a90 	vmov	r0, s15
 80138c2:	f7ec fe39 	bl	8000538 <__aeabi_f2d>
 80138c6:	ec41 0b10 	vmov	d0, r0, r1
 80138ca:	f004 fde1 	bl	8018490 <ceil>
 80138ce:	ec51 0b10 	vmov	r0, r1, d0
 80138d2:	f7ed f939 	bl	8000b48 <__aeabi_d2f>
 80138d6:	ee0d 0a90 	vmov	s27, r0
 80138da:	f7fc bc70 	b.w	80101be <kalman_3gyro.constprop.0+0x9ae>
 80138de:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 80138e2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80138e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80138ea:	eeb4 7aeb 	vcmpe.f32	s14, s23
 80138ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138f2:	f77d af02 	ble.w	80116fa <kalman_3gyro.constprop.0+0x1eea>
 80138f6:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 80138fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138fe:	eef4 7aec 	vcmpe.f32	s15, s25
 8013902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013906:	f77d aef8 	ble.w	80116fa <kalman_3gyro.constprop.0+0x1eea>
 801390a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801390e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013912:	eef4 7acd 	vcmpe.f32	s15, s26
 8013916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801391a:	f140 8711 	bpl.w	8014740 <kalman_3gyro.constprop.0+0x4f30>
 801391e:	3303      	adds	r3, #3
 8013920:	f7ff ba35 	b.w	8012d8e <kalman_3gyro.constprop.0+0x357e>
 8013924:	460b      	mov	r3, r1
 8013926:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 801392a:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 801392e:	9181      	str	r1, [sp, #516]	; 0x204
 8013930:	9282      	str	r2, [sp, #520]	; 0x208
 8013932:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8013936:	9183      	str	r1, [sp, #524]	; 0x20c
 8013938:	2200      	movs	r2, #0
 801393a:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 801393e:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8013942:	f7fe baa8 	b.w	8011e96 <kalman_3gyro.constprop.0+0x2686>
 8013946:	a936      	add	r1, sp, #216	; 0xd8
 8013948:	a854      	add	r0, sp, #336	; 0x150
 801394a:	f7fa ff85 	bl	800e858 <b_dcm2q>
 801394e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8013952:	4619      	mov	r1, r3
 8013954:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 8013958:	ed8b ca72 	vstr	s24, [fp, #456]	; 0x1c8
 801395c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8013960:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8013964:	f006 fcd0 	bl	801a308 <memset>
 8013968:	4bd8      	ldr	r3, [pc, #864]	; (8013ccc <kalman_3gyro.constprop.0+0x44bc>)
 801396a:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 801396e:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8013972:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8013976:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 801397a:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 801397e:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8013982:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8013986:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 801398a:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 801398e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013990:	781a      	ldrb	r2, [r3, #0]
 8013992:	ee07 2a90 	vmov	s15, r2
 8013996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801399a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801399e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139a2:	f040 84dc 	bne.w	801435e <kalman_3gyro.constprop.0+0x4b4e>
 80139a6:	eeb0 7a4c 	vmov.f32	s14, s24
 80139aa:	2300      	movs	r3, #0
 80139ac:	f88b 3000 	strb.w	r3, [fp]
 80139b0:	eddb ea02 	vldr	s29, [fp, #8]
 80139b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80139b8:	2301      	movs	r3, #1
 80139ba:	f7fd bb8d 	b.w	80110d8 <kalman_3gyro.constprop.0+0x18c8>
 80139be:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 80139c2:	eef4 4ac8 	vcmpe.f32	s9, s16
 80139c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ca:	f340 85da 	ble.w	8014582 <kalman_3gyro.constprop.0+0x4d72>
 80139ce:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 80139d2:	ed9b 7a4f 	vldr	s14, [fp, #316]	; 0x13c
 80139d6:	ee78 3a62 	vsub.f32	s7, s16, s5
 80139da:	ee37 7a44 	vsub.f32	s14, s14, s8
 80139de:	ee74 4ae2 	vsub.f32	s9, s9, s5
 80139e2:	ee27 7a23 	vmul.f32	s14, s14, s7
 80139e6:	ee87 ea24 	vdiv.f32	s28, s14, s9
 80139ea:	ee3e ea04 	vadd.f32	s28, s28, s8
 80139ee:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 80139f2:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80139f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139fa:	f63d a94b 	bhi.w	8010c94 <kalman_3gyro.constprop.0+0x1484>
 80139fe:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 8013a02:	eef4 4ac8 	vcmpe.f32	s9, s16
 8013a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a0a:	f340 84bc 	ble.w	8014386 <kalman_3gyro.constprop.0+0x4b76>
 8013a0e:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 8013a12:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 8013a16:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013a1a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013a1e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013a22:	ee24 4a03 	vmul.f32	s8, s8, s6
 8013a26:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8013a2a:	ee3e ea23 	vadd.f32	s28, s28, s7
 8013a2e:	ed9b 7a54 	vldr	s14, [fp, #336]	; 0x150
 8013a32:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a3a:	f63d a94b 	bhi.w	8010cd4 <kalman_3gyro.constprop.0+0x14c4>
 8013a3e:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 8013a42:	eef4 4ac8 	vcmpe.f32	s9, s16
 8013a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a4a:	f340 84a8 	ble.w	801439e <kalman_3gyro.constprop.0+0x4b8e>
 8013a4e:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 8013a52:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 8013a56:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013a5a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013a5e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013a62:	ee24 4a03 	vmul.f32	s8, s8, s6
 8013a66:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8013a6a:	ee3e ea23 	vadd.f32	s28, s28, s7
 8013a6e:	ed9b 7a58 	vldr	s14, [fp, #352]	; 0x160
 8013a72:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a7a:	f63d a94b 	bhi.w	8010d14 <kalman_3gyro.constprop.0+0x1504>
 8013a7e:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 8013a82:	eef4 4ac8 	vcmpe.f32	s9, s16
 8013a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a8a:	f340 8490 	ble.w	80143ae <kalman_3gyro.constprop.0+0x4b9e>
 8013a8e:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 8013a92:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 8013a96:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013a9a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013a9e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013aa2:	ee24 4a03 	vmul.f32	s8, s8, s6
 8013aa6:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8013aaa:	ee3e ea23 	vadd.f32	s28, s28, s7
 8013aae:	ed9b 7a5c 	vldr	s14, [fp, #368]	; 0x170
 8013ab2:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aba:	f6fd a94b 	blt.w	8010d54 <kalman_3gyro.constprop.0+0x1544>
 8013abe:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 8013ac2:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8013ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aca:	f57d a94b 	bpl.w	8010d64 <kalman_3gyro.constprop.0+0x1554>
 8013ace:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 8013ad2:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 8013ad6:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013ada:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013ade:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8013ae2:	ee24 7a03 	vmul.f32	s14, s8, s6
 8013ae6:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8013aea:	ee3e ea23 	vadd.f32	s28, s28, s7
 8013aee:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 8013af2:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013afa:	f6fd a94b 	blt.w	8010d94 <kalman_3gyro.constprop.0+0x1584>
 8013afe:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8013b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b06:	f57d a945 	bpl.w	8010d94 <kalman_3gyro.constprop.0+0x1584>
 8013b0a:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 8013b0e:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 8013b12:	ee78 3a47 	vsub.f32	s7, s16, s14
 8013b16:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8013b1a:	ee35 7a47 	vsub.f32	s14, s10, s14
 8013b1e:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8013b22:	ee85 ea07 	vdiv.f32	s28, s10, s14
 8013b26:	ee3e ea04 	vadd.f32	s28, s28, s8
 8013b2a:	f7fd b933 	b.w	8010d94 <kalman_3gyro.constprop.0+0x1584>
 8013b2e:	eddf 6a68 	vldr	s13, [pc, #416]	; 8013cd0 <kalman_3gyro.constprop.0+0x44c0>
 8013b32:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b3a:	f57d ac56 	bpl.w	80113ea <kalman_3gyro.constprop.0+0x1bda>
 8013b3e:	eddf 3a65 	vldr	s7, [pc, #404]	; 8013cd4 <kalman_3gyro.constprop.0+0x44c4>
 8013b42:	eddf 2a65 	vldr	s5, [pc, #404]	; 8013cd8 <kalman_3gyro.constprop.0+0x44c8>
 8013b46:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8013cdc <kalman_3gyro.constprop.0+0x44cc>
 8013b4a:	eddf 6a65 	vldr	s13, [pc, #404]	; 8013ce0 <kalman_3gyro.constprop.0+0x44d0>
 8013b4e:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8013b52:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8013b56:	eee3 6a83 	vfma.f32	s13, s7, s6
 8013b5a:	eeb0 ca66 	vmov.f32	s24, s13
 8013b5e:	eddf 6a61 	vldr	s13, [pc, #388]	; 8013ce4 <kalman_3gyro.constprop.0+0x44d4>
 8013b62:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b6a:	f6fd ac56 	blt.w	801141a <kalman_3gyro.constprop.0+0x1c0a>
 8013b6e:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8013ce8 <kalman_3gyro.constprop.0+0x44d8>
 8013b72:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b7a:	f57d ac56 	bpl.w	801142a <kalman_3gyro.constprop.0+0x1c1a>
 8013b7e:	eddf 3a59 	vldr	s7, [pc, #356]	; 8013ce4 <kalman_3gyro.constprop.0+0x44d4>
 8013b82:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8013b86:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8013b8a:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8013b8e:	eeb3 3a04 	vmov.f32	s6, #52	; 0x41a00000  20.0
 8013b92:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8013b96:	eee3 6a83 	vfma.f32	s13, s7, s6
 8013b9a:	eeb0 ca66 	vmov.f32	s24, s13
 8013b9e:	eddf 6a53 	vldr	s13, [pc, #332]	; 8013cec <kalman_3gyro.constprop.0+0x44dc>
 8013ba2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013baa:	f6fd ac56 	blt.w	801145a <kalman_3gyro.constprop.0+0x1c4a>
 8013bae:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8013bb2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bba:	f57d ac56 	bpl.w	801146a <kalman_3gyro.constprop.0+0x1c5a>
 8013bbe:	eddf 3a4b 	vldr	s7, [pc, #300]	; 8013cec <kalman_3gyro.constprop.0+0x44dc>
 8013bc2:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8013cf0 <kalman_3gyro.constprop.0+0x44e0>
 8013bc6:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 8013cf4 <kalman_3gyro.constprop.0+0x44e4>
 8013bca:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8013bce:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8013bd2:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8013bd6:	eee3 6a83 	vfma.f32	s13, s7, s6
 8013bda:	eeb0 ca66 	vmov.f32	s24, s13
 8013bde:	e4f4      	b.n	80135ca <kalman_3gyro.constprop.0+0x3dba>
 8013be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be4:	f57d abe1 	bpl.w	80113aa <kalman_3gyro.constprop.0+0x1b9a>
 8013be8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8013cd4 <kalman_3gyro.constprop.0+0x44c4>
 8013bec:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bf4:	da9b      	bge.n	8013b2e <kalman_3gyro.constprop.0+0x431e>
 8013bf6:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8013bfa:	f7fd bbee 	b.w	80113da <kalman_3gyro.constprop.0+0x1bca>
 8013bfe:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013cd0 <kalman_3gyro.constprop.0+0x44c0>
 8013c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c0a:	f57d ab5e 	bpl.w	80112ca <kalman_3gyro.constprop.0+0x1aba>
 8013c0e:	eddf 6a31 	vldr	s13, [pc, #196]	; 8013cd4 <kalman_3gyro.constprop.0+0x44c4>
 8013c12:	eddf 4a39 	vldr	s9, [pc, #228]	; 8013cf8 <kalman_3gyro.constprop.0+0x44e8>
 8013c16:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8013cdc <kalman_3gyro.constprop.0+0x44cc>
 8013c1a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013cfc <kalman_3gyro.constprop.0+0x44ec>
 8013c1e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013c22:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8013c26:	eea6 7a86 	vfma.f32	s14, s13, s12
 8013c2a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8013ce4 <kalman_3gyro.constprop.0+0x44d4>
 8013c2e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c36:	f6fd ab5e 	blt.w	80112f6 <kalman_3gyro.constprop.0+0x1ae6>
 8013c3a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8013ce8 <kalman_3gyro.constprop.0+0x44d8>
 8013c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c46:	f57d ab5e 	bpl.w	8011306 <kalman_3gyro.constprop.0+0x1af6>
 8013c4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8013ce4 <kalman_3gyro.constprop.0+0x44d4>
 8013c4e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013c52:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8013c56:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013c5a:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8013c5e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8013c62:	eea6 7a86 	vfma.f32	s14, s13, s12
 8013c66:	eddf 6a21 	vldr	s13, [pc, #132]	; 8013cec <kalman_3gyro.constprop.0+0x44dc>
 8013c6a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c72:	f6fd ab5e 	blt.w	8011332 <kalman_3gyro.constprop.0+0x1b22>
 8013c76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013c7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c82:	f57d ab5d 	bpl.w	8011340 <kalman_3gyro.constprop.0+0x1b30>
 8013c86:	eddf 6a19 	vldr	s13, [pc, #100]	; 8013cec <kalman_3gyro.constprop.0+0x44dc>
 8013c8a:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8013d00 <kalman_3gyro.constprop.0+0x44f0>
 8013c8e:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8013cf4 <kalman_3gyro.constprop.0+0x44e4>
 8013c92:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8013d04 <kalman_3gyro.constprop.0+0x44f4>
 8013c96:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013c9a:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8013c9e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8013ca2:	f7fd bb5b 	b.w	801135c <kalman_3gyro.constprop.0+0x1b4c>
 8013ca6:	9b01      	ldr	r3, [sp, #4]
 8013ca8:	e63d      	b.n	8013926 <kalman_3gyro.constprop.0+0x4116>
 8013caa:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 8013cae:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cb6:	da2b      	bge.n	8013d10 <kalman_3gyro.constprop.0+0x4500>
 8013cb8:	ed9f ba13 	vldr	s22, [pc, #76]	; 8013d08 <kalman_3gyro.constprop.0+0x44f8>
 8013cbc:	ed9b 7a34 	vldr	s14, [fp, #208]	; 0xd0
 8013cc0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cc8:	db3a      	blt.n	8013d40 <kalman_3gyro.constprop.0+0x4530>
 8013cca:	e386      	b.n	80143da <kalman_3gyro.constprop.0+0x4bca>
 8013ccc:	40a00000 	.word	0x40a00000
 8013cd0:	3cf5c28f 	.word	0x3cf5c28f
 8013cd4:	3c75c28f 	.word	0x3c75c28f
 8013cd8:	3dccccd0 	.word	0x3dccccd0
 8013cdc:	42855556 	.word	0x42855556
 8013ce0:	3f866666 	.word	0x3f866666
 8013ce4:	3d4ccccd 	.word	0x3d4ccccd
 8013ce8:	3dcccccd 	.word	0x3dcccccd
 8013cec:	3e4ccccd 	.word	0x3e4ccccd
 8013cf0:	42200000 	.word	0x42200000
 8013cf4:	40555555 	.word	0x40555555
 8013cf8:	3ecccccc 	.word	0x3ecccccc
 8013cfc:	3fcccccd 	.word	0x3fcccccd
 8013d00:	43f00000 	.word	0x43f00000
 8013d04:	42ee0000 	.word	0x42ee0000
 8013d08:	00000000 	.word	0x00000000
 8013d0c:	eeb0 7a64 	vmov.f32	s14, s9
 8013d10:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 8013d14:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8013d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d1c:	f140 8359 	bpl.w	80143d2 <kalman_3gyro.constprop.0+0x4bc2>
 8013d20:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 8013d24:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 8013d28:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013d2c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013d30:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013d34:	ee64 4a03 	vmul.f32	s9, s8, s6
 8013d38:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8013d3c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8013d40:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
 8013d44:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d4c:	f2c0 835d 	blt.w	801440a <kalman_3gyro.constprop.0+0x4bfa>
 8013d50:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 8013d54:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8013d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d5c:	f140 8402 	bpl.w	8014564 <kalman_3gyro.constprop.0+0x4d54>
 8013d60:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 8013d64:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 8013d68:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013d6c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013d70:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013d74:	ee64 4a03 	vmul.f32	s9, s8, s6
 8013d78:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8013d7c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8013d80:	ed9b 7a3a 	vldr	s14, [fp, #232]	; 0xe8
 8013d84:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d8c:	f200 835d 	bhi.w	801444a <kalman_3gyro.constprop.0+0x4c3a>
 8013d90:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 8013d94:	eef4 4ac8 	vcmpe.f32	s9, s16
 8013d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d9c:	f340 83e8 	ble.w	8014570 <kalman_3gyro.constprop.0+0x4d60>
 8013da0:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 8013da4:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 8013da8:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013dac:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013db0:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013db4:	ee64 4a03 	vmul.f32	s9, s8, s6
 8013db8:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8013dbc:	ee3b ba23 	vadd.f32	s22, s22, s7
 8013dc0:	ed9b 7a3e 	vldr	s14, [fp, #248]	; 0xf8
 8013dc4:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dcc:	f200 835d 	bhi.w	801448a <kalman_3gyro.constprop.0+0x4c7a>
 8013dd0:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 8013dd4:	eef4 4ac8 	vcmpe.f32	s9, s16
 8013dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ddc:	f340 83b4 	ble.w	8014548 <kalman_3gyro.constprop.0+0x4d38>
 8013de0:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 8013de4:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 8013de8:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013dec:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013df0:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013df4:	ee64 4a03 	vmul.f32	s9, s8, s6
 8013df8:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8013dfc:	ee3b ba23 	vadd.f32	s22, s22, s7
 8013e00:	ed9b 7a42 	vldr	s14, [fp, #264]	; 0x108
 8013e04:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e0c:	f2c0 835c 	blt.w	80144c8 <kalman_3gyro.constprop.0+0x4cb8>
 8013e10:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8013e14:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8013e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e1c:	f140 835c 	bpl.w	80144d8 <kalman_3gyro.constprop.0+0x4cc8>
 8013e20:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 8013e24:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8013e28:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013e2c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013e30:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8013e34:	ee24 7a03 	vmul.f32	s14, s8, s6
 8013e38:	ee87 ba24 	vdiv.f32	s22, s14, s9
 8013e3c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8013e40:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 8013e44:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e4c:	f6fc aeda 	blt.w	8010c04 <kalman_3gyro.constprop.0+0x13f4>
 8013e50:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8013e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e58:	f57c aed4 	bpl.w	8010c04 <kalman_3gyro.constprop.0+0x13f4>
 8013e5c:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 8013e60:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 8013e64:	ee78 3a47 	vsub.f32	s7, s16, s14
 8013e68:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8013e6c:	ee35 7a47 	vsub.f32	s14, s10, s14
 8013e70:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8013e74:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8013e78:	ee3b ba04 	vadd.f32	s22, s22, s8
 8013e7c:	f7fc bec2 	b.w	8010c04 <kalman_3gyro.constprop.0+0x13f4>
 8013e80:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8013e84:	eef4 7acd 	vcmpe.f32	s15, s26
 8013e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e8c:	dd2c      	ble.n	8013ee8 <kalman_3gyro.constprop.0+0x46d8>
 8013e8e:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8013e92:	eef4 7aeb 	vcmpe.f32	s15, s23
 8013e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e9a:	dd25      	ble.n	8013ee8 <kalman_3gyro.constprop.0+0x46d8>
 8013e9c:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8013ea0:	eef4 7aec 	vcmpe.f32	s15, s25
 8013ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ea8:	dd1e      	ble.n	8013ee8 <kalman_3gyro.constprop.0+0x46d8>
 8013eaa:	eddd 5a03 	vldr	s11, [sp, #12]
 8013eae:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8013eb2:	eef4 5ae7 	vcmpe.f32	s11, s15
 8013eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eba:	d515      	bpl.n	8013ee8 <kalman_3gyro.constprop.0+0x46d8>
 8013ebc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013ec0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013ec4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8013ec8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ed0:	d50a      	bpl.n	8013ee8 <kalman_3gyro.constprop.0+0x46d8>
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013ed8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013edc:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8013ee0:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8013ee4:	f7fd bf4c 	b.w	8011d80 <kalman_3gyro.constprop.0+0x2570>
 8013ee8:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 8013eec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef4:	dd0b      	ble.n	8013f0e <kalman_3gyro.constprop.0+0x46fe>
 8013ef6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8013efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f02:	f100 843f 	bmi.w	8014784 <kalman_3gyro.constprop.0+0x4f74>
 8013f06:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8013f0a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013f0e:	2300      	movs	r3, #0
 8013f10:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8013f14:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8013f18:	f7fd bf32 	b.w	8011d80 <kalman_3gyro.constprop.0+0x2570>
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013f22:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 8013f26:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 8013f2a:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 8013f2e:	edd2 5a00 	vldr	s11, [r2]
 8013f32:	ed93 7a00 	vldr	s14, [r3]
 8013f36:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 8013f3a:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 8013f3e:	ed92 5a00 	vldr	s10, [r2]
 8013f42:	edd3 6a00 	vldr	s13, [r3]
 8013f46:	ee25 4aa5 	vmul.f32	s8, s11, s11
 8013f4a:	ee67 4a07 	vmul.f32	s9, s14, s14
 8013f4e:	eea5 4a05 	vfma.f32	s8, s10, s10
 8013f52:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 8013f56:	f20b 611c 	addw	r1, fp, #1564	; 0x61c
 8013f5a:	eee6 4aa6 	vfma.f32	s9, s13, s13
 8013f5e:	aa5d      	add	r2, sp, #372	; 0x174
 8013f60:	a833      	add	r0, sp, #204	; 0xcc
 8013f62:	ed91 6a00 	vldr	s12, [r1]
 8013f66:	edd3 7a00 	vldr	s15, [r3]
 8013f6a:	eea6 4a06 	vfma.f32	s8, s12, s12
 8013f6e:	a92d      	add	r1, sp, #180	; 0xb4
 8013f70:	ad5d      	add	r5, sp, #372	; 0x174
 8013f72:	eee7 4aa7 	vfma.f32	s9, s15, s15
 8013f76:	ac66      	add	r4, sp, #408	; 0x198
 8013f78:	eef1 2ac4 	vsqrt.f32	s5, s8
 8013f7c:	eeb1 3ae4 	vsqrt.f32	s6, s9
 8013f80:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8013f84:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 8013f88:	eec3 4a83 	vdiv.f32	s9, s7, s6
 8013f8c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8013f90:	ee27 7a24 	vmul.f32	s14, s14, s9
 8013f94:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8013f98:	ee65 5a84 	vmul.f32	s11, s11, s8
 8013f9c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8013fa0:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8013fa4:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
 8013fa8:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8013fac:	ed8d 5a2d 	vstr	s10, [sp, #180]	; 0xb4
 8013fb0:	edcd 5a2e 	vstr	s11, [sp, #184]	; 0xb8
 8013fb4:	ed8d 6a2f 	vstr	s12, [sp, #188]	; 0xbc
 8013fb8:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 8013fbc:	f7fa fbac 	bl	800e718 <getRotationMatrix>
 8013fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fc8:	682e      	ldr	r6, [r5, #0]
 8013fca:	6026      	str	r6, [r4, #0]
 8013fcc:	ad66      	add	r5, sp, #408	; 0x198
 8013fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fd0:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8013fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fda:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 8013fde:	ed9d 7a67 	vldr	s14, [sp, #412]	; 0x19c
 8013fe2:	6026      	str	r6, [r4, #0]
 8013fe4:	eef0 7ae7 	vabs.f32	s15, s15
 8013fe8:	eeb0 7ac7 	vabs.f32	s14, s14
 8013fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ff4:	f100 81df 	bmi.w	80143b6 <kalman_3gyro.constprop.0+0x4ba6>
 8013ff8:	2307      	movs	r3, #7
 8013ffa:	f04f 0c04 	mov.w	ip, #4
 8013ffe:	9305      	str	r3, [sp, #20]
 8014000:	2300      	movs	r3, #0
 8014002:	4662      	mov	r2, ip
 8014004:	2003      	movs	r0, #3
 8014006:	2706      	movs	r7, #6
 8014008:	f04f 0e01 	mov.w	lr, #1
 801400c:	9304      	str	r3, [sp, #16]
 801400e:	ed9d 7a68 	vldr	s14, [sp, #416]	; 0x1a0
 8014012:	eeb0 7ac7 	vabs.f32	s14, s14
 8014016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801401a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801401e:	f340 8296 	ble.w	801454e <kalman_3gyro.constprop.0+0x4d3e>
 8014022:	2306      	movs	r3, #6
 8014024:	930a      	str	r3, [sp, #40]	; 0x28
 8014026:	2307      	movs	r3, #7
 8014028:	9305      	str	r3, [sp, #20]
 801402a:	2300      	movs	r3, #0
 801402c:	2708      	movs	r7, #8
 801402e:	f04f 0c04 	mov.w	ip, #4
 8014032:	9302      	str	r3, [sp, #8]
 8014034:	2302      	movs	r3, #2
 8014036:	9707      	str	r7, [sp, #28]
 8014038:	4662      	mov	r2, ip
 801403a:	2005      	movs	r0, #5
 801403c:	f04f 0e01 	mov.w	lr, #1
 8014040:	9304      	str	r3, [sp, #16]
 8014042:	ab66      	add	r3, sp, #408	; 0x198
 8014044:	441a      	add	r2, r3
 8014046:	9b07      	ldr	r3, [sp, #28]
 8014048:	edd2 6a00 	vldr	s13, [r2]
 801404c:	9a02      	ldr	r2, [sp, #8]
 801404e:	a966      	add	r1, sp, #408	; 0x198
 8014050:	440b      	add	r3, r1
 8014052:	ed93 7a00 	vldr	s14, [r3]
 8014056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801405a:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 801405e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8014062:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8014066:	9a04      	ldr	r2, [sp, #16]
 8014068:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 801406c:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8014070:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014074:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8014078:	0080      	lsls	r0, r0, #2
 801407a:	900e      	str	r0, [sp, #56]	; 0x38
 801407c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801407e:	940d      	str	r4, [sp, #52]	; 0x34
 8014080:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8014084:	edc3 7a00 	vstr	s15, [r3]
 8014088:	ed96 7a00 	vldr	s14, [r6]
 801408c:	edd1 7a00 	vldr	s15, [r1]
 8014090:	930c      	str	r3, [sp, #48]	; 0x30
 8014092:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014096:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 801409a:	0080      	lsls	r0, r0, #2
 801409c:	9006      	str	r0, [sp, #24]
 801409e:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 80140a2:	00bf      	lsls	r7, r7, #2
 80140a4:	9711      	str	r7, [sp, #68]	; 0x44
 80140a6:	9f05      	ldr	r7, [sp, #20]
 80140a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140aa:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80140ae:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 80140b2:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 80140b6:	009b      	lsls	r3, r3, #2
 80140b8:	9307      	str	r3, [sp, #28]
 80140ba:	9b02      	ldr	r3, [sp, #8]
 80140bc:	edc6 6a00 	vstr	s13, [r6]
 80140c0:	009b      	lsls	r3, r3, #2
 80140c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80140c4:	9b04      	ldr	r3, [sp, #16]
 80140c6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80140c8:	009b      	lsls	r3, r3, #2
 80140ca:	9312      	str	r3, [sp, #72]	; 0x48
 80140cc:	9b05      	ldr	r3, [sp, #20]
 80140ce:	ed96 7a00 	vldr	s14, [r6]
 80140d2:	009b      	lsls	r3, r3, #2
 80140d4:	9309      	str	r3, [sp, #36]	; 0x24
 80140d6:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 80140da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140dc:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 80140e0:	ed93 6a00 	vldr	s12, [r3]
 80140e4:	edd2 7a00 	vldr	s15, [r2]
 80140e8:	eee6 7a47 	vfms.f32	s15, s12, s14
 80140ec:	ea4f 058e 	mov.w	r5, lr, lsl #2
 80140f0:	950a      	str	r5, [sp, #40]	; 0x28
 80140f2:	ea4f 058c 	mov.w	r5, ip, lsl #2
 80140f6:	edc2 7a00 	vstr	s15, [r2]
 80140fa:	ed96 7a00 	vldr	s14, [r6]
 80140fe:	edd4 7a00 	vldr	s15, [r4]
 8014102:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8014106:	edc4 7a00 	vstr	s15, [r4]
 801410a:	edd0 5a00 	vldr	s11, [r0]
 801410e:	ed97 7a00 	vldr	s14, [r7]
 8014112:	eea6 7a65 	vfms.f32	s14, s12, s11
 8014116:	eef0 7ae7 	vabs.f32	s15, s15
 801411a:	ed87 7a00 	vstr	s14, [r7]
 801411e:	ed90 6a00 	vldr	s12, [r0]
 8014122:	ed91 7a00 	vldr	s14, [r1]
 8014126:	eea6 7ac6 	vfms.f32	s14, s13, s12
 801412a:	ed81 7a00 	vstr	s14, [r1]
 801412e:	ed92 7a00 	vldr	s14, [r2]
 8014132:	eeb0 7ac7 	vabs.f32	s14, s14
 8014136:	eef4 7ac7 	vcmpe.f32	s15, s14
 801413a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801413e:	dd12      	ble.n	8014166 <kalman_3gyro.constprop.0+0x4956>
 8014140:	9a07      	ldr	r2, [sp, #28]
 8014142:	9f05      	ldr	r7, [sp, #20]
 8014144:	9806      	ldr	r0, [sp, #24]
 8014146:	9209      	str	r2, [sp, #36]	; 0x24
 8014148:	4673      	mov	r3, lr
 801414a:	f8dd e008 	ldr.w	lr, [sp, #8]
 801414e:	9302      	str	r3, [sp, #8]
 8014150:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8014154:	009b      	lsls	r3, r3, #2
 8014156:	9206      	str	r2, [sp, #24]
 8014158:	930b      	str	r3, [sp, #44]	; 0x2c
 801415a:	00ba      	lsls	r2, r7, #2
 801415c:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8014160:	4605      	mov	r5, r0
 8014162:	9207      	str	r2, [sp, #28]
 8014164:	930a      	str	r3, [sp, #40]	; 0x28
 8014166:	9b06      	ldr	r3, [sp, #24]
 8014168:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801416a:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 801416e:	4413      	add	r3, r2
 8014170:	461c      	mov	r4, r3
 8014172:	462b      	mov	r3, r5
 8014174:	4413      	add	r3, r2
 8014176:	ed94 7a00 	vldr	s14, [r4]
 801417a:	edd3 7a00 	vldr	s15, [r3]
 801417e:	ee87 2a27 	vdiv.f32	s4, s14, s15
 8014182:	4618      	mov	r0, r3
 8014184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014186:	4413      	add	r3, r2
 8014188:	461a      	mov	r2, r3
 801418a:	9b07      	ldr	r3, [sp, #28]
 801418c:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8014190:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8014194:	440b      	add	r3, r1
 8014196:	4619      	mov	r1, r3
 8014198:	442e      	add	r6, r5
 801419a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801419c:	9607      	str	r6, [sp, #28]
 801419e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80141a0:	ed84 2a00 	vstr	s4, [r4]
 80141a4:	442b      	add	r3, r5
 80141a6:	f50d 67f9 	add.w	r7, sp, #1992	; 0x7c8
 80141aa:	9306      	str	r3, [sp, #24]
 80141ac:	19bb      	adds	r3, r7, r6
 80141ae:	ed92 7a00 	vldr	s14, [r2]
 80141b2:	edd1 7a00 	vldr	s15, [r1]
 80141b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80141b8:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 80141bc:	edd3 3a00 	vldr	s7, [r3]
 80141c0:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 80141c4:	eee2 7a47 	vfms.f32	s15, s4, s14
 80141c8:	4423      	add	r3, r4
 80141ca:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 80141ce:	ed93 5a00 	vldr	s10, [r3]
 80141d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80141d4:	edc1 7a00 	vstr	s15, [r1]
 80141d8:	462f      	mov	r7, r5
 80141da:	f50d 65f9 	add.w	r5, sp, #1992	; 0x7c8
 80141de:	4629      	mov	r1, r5
 80141e0:	eb05 0c03 	add.w	ip, r5, r3
 80141e4:	9d04      	ldr	r5, [sp, #16]
 80141e6:	ed92 1a00 	vldr	s2, [r2]
 80141ea:	4437      	add	r7, r6
 80141ec:	9705      	str	r7, [sp, #20]
 80141ee:	eb01 068e 	add.w	r6, r1, lr, lsl #2
 80141f2:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 80141f6:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80141fa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80141fe:	4419      	add	r1, r3
 8014200:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8014204:	ee80 4aa7 	vdiv.f32	s8, s1, s15
 8014208:	191c      	adds	r4, r3, r4
 801420a:	9b02      	ldr	r3, [sp, #8]
 801420c:	9104      	str	r1, [sp, #16]
 801420e:	f50d 61f9 	add.w	r1, sp, #1992	; 0x7c8
 8014212:	9409      	str	r4, [sp, #36]	; 0x24
 8014214:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8014218:	463d      	mov	r5, r7
 801421a:	9904      	ldr	r1, [sp, #16]
 801421c:	46b6      	mov	lr, r6
 801421e:	4623      	mov	r3, r4
 8014220:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8014224:	f5ac 6ccf 	sub.w	ip, ip, #1656	; 0x678
 8014228:	edd0 7a00 	vldr	s15, [r0]
 801422c:	9805      	ldr	r0, [sp, #20]
 801422e:	ed91 0a00 	vldr	s0, [r1]
 8014232:	ed90 8a00 	vldr	s16, [r0]
 8014236:	eddc 4a00 	vldr	s9, [ip]
 801423a:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 801423e:	f5ae 6ecc 	sub.w	lr, lr, #1632	; 0x660
 8014242:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 8014246:	f2a7 676c 	subw	r7, r7, #1644	; 0x66c
 801424a:	f5a5 65cc 	sub.w	r5, r5, #1632	; 0x660
 801424e:	eec0 2aa7 	vdiv.f32	s5, s1, s15
 8014252:	a85d      	add	r0, sp, #372	; 0x174
 8014254:	a93e      	add	r1, sp, #248	; 0xf8
 8014256:	edd7 5a00 	vldr	s11, [r7]
 801425a:	ed96 6a00 	vldr	s12, [r6]
 801425e:	9a06      	ldr	r2, [sp, #24]
 8014260:	ed95 7a00 	vldr	s14, [r5]
 8014264:	edd4 6a00 	vldr	s13, [r4]
 8014268:	ed93 3a00 	vldr	s6, [r3]
 801426c:	edde 7a00 	vldr	s15, [lr]
 8014270:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014272:	edd2 1a00 	vldr	s3, [r2]
 8014276:	9e07      	ldr	r6, [sp, #28]
 8014278:	eee8 3a45 	vfms.f32	s7, s16, s10
 801427c:	eee0 4a45 	vfms.f32	s9, s0, s10
 8014280:	eea8 6a65 	vfms.f32	s12, s16, s11
 8014284:	eee7 7a48 	vfms.f32	s15, s14, s16
 8014288:	eee0 6a65 	vfms.f32	s13, s0, s11
 801428c:	eea7 3a40 	vfms.f32	s6, s14, s0
 8014290:	ed94 0a00 	vldr	s0, [r4]
 8014294:	eea2 3a67 	vfms.f32	s6, s4, s15
 8014298:	eee3 4ac2 	vfms.f32	s9, s7, s4
 801429c:	eee2 6a46 	vfms.f32	s13, s4, s12
 80142a0:	ee80 2a80 	vdiv.f32	s4, s1, s0
 80142a4:	ee64 6a26 	vmul.f32	s13, s8, s13
 80142a8:	ee64 4a24 	vmul.f32	s9, s8, s9
 80142ac:	ee24 4a03 	vmul.f32	s8, s8, s6
 80142b0:	eea1 6a66 	vfms.f32	s12, s2, s13
 80142b4:	eee4 3ac1 	vfms.f32	s7, s9, s2
 80142b8:	eee4 7a41 	vfms.f32	s15, s8, s2
 80142bc:	eee1 5ae6 	vfms.f32	s11, s3, s13
 80142c0:	eea4 5ae1 	vfms.f32	s10, s9, s3
 80142c4:	eea4 7a61 	vfms.f32	s14, s8, s3
 80142c8:	ed96 3a00 	vldr	s6, [r6]
 80142cc:	edcd 6a62 	vstr	s13, [sp, #392]	; 0x188
 80142d0:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80142d4:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80142d8:	ee22 6a86 	vmul.f32	s12, s5, s12
 80142dc:	eea7 7ac3 	vfms.f32	s14, s15, s6
 80142e0:	eea3 5ac3 	vfms.f32	s10, s7, s6
 80142e4:	eee3 5a46 	vfms.f32	s11, s6, s12
 80142e8:	ee27 7a02 	vmul.f32	s14, s14, s4
 80142ec:	ee22 5a05 	vmul.f32	s10, s4, s10
 80142f0:	ee62 5a25 	vmul.f32	s11, s4, s11
 80142f4:	ed8d 7a63 	vstr	s14, [sp, #396]	; 0x18c
 80142f8:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 80142fc:	edcd 4a5f 	vstr	s9, [sp, #380]	; 0x17c
 8014300:	edcd 3a5e 	vstr	s7, [sp, #376]	; 0x178
 8014304:	ed8d 5a5d 	vstr	s10, [sp, #372]	; 0x174
 8014308:	edcd 5a60 	vstr	s11, [sp, #384]	; 0x180
 801430c:	ed8d 6a61 	vstr	s12, [sp, #388]	; 0x184
 8014310:	ed8d 4a65 	vstr	s8, [sp, #404]	; 0x194
 8014314:	f7fa faa0 	bl	800e858 <b_dcm2q>
 8014318:	eddd 6a3f 	vldr	s13, [sp, #252]	; 0xfc
 801431c:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 8014320:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 8014324:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 8014328:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801432c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8014330:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014334:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8014338:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 801433c:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 8014340:	2b00      	cmp	r3, #0
 8014342:	f43d ad20 	beq.w	8011d86 <kalman_3gyro.constprop.0+0x2576>
 8014346:	2200      	movs	r2, #0
 8014348:	9b01      	ldr	r3, [sp, #4]
 801434a:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 801434e:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 8014352:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 8014356:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801435a:	f7fd bd9c 	b.w	8011e96 <kalman_3gyro.constprop.0+0x2686>
 801435e:	edd3 7a02 	vldr	s15, [r3, #8]
 8014362:	ed93 7a01 	vldr	s14, [r3, #4]
 8014366:	edd3 6a03 	vldr	s13, [r3, #12]
 801436a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801436e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014372:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8014376:	eeb1 6ae7 	vsqrt.f32	s12, s15
 801437a:	ee86 7a86 	vdiv.f32	s14, s13, s12
 801437e:	ed8b 7a72 	vstr	s14, [fp, #456]	; 0x1c8
 8014382:	f7ff bb12 	b.w	80139aa <kalman_3gyro.constprop.0+0x419a>
 8014386:	eeb0 7a64 	vmov.f32	s14, s9
 801438a:	f7fc bc8b 	b.w	8010ca4 <kalman_3gyro.constprop.0+0x1494>
 801438e:	eeb0 7a64 	vmov.f32	s14, s9
 8014392:	f7ff bb94 	b.w	8013abe <kalman_3gyro.constprop.0+0x42ae>
 8014396:	eeb0 7a64 	vmov.f32	s14, s9
 801439a:	f7ff bb50 	b.w	8013a3e <kalman_3gyro.constprop.0+0x422e>
 801439e:	eeb0 7a64 	vmov.f32	s14, s9
 80143a2:	f7fc bc9f 	b.w	8010ce4 <kalman_3gyro.constprop.0+0x14d4>
 80143a6:	eeb0 7a64 	vmov.f32	s14, s9
 80143aa:	f7ff bb68 	b.w	8013a7e <kalman_3gyro.constprop.0+0x426e>
 80143ae:	eeb0 7a64 	vmov.f32	s14, s9
 80143b2:	f7fc bcb7 	b.w	8010d24 <kalman_3gyro.constprop.0+0x1514>
 80143b6:	2200      	movs	r2, #0
 80143b8:	2004      	movs	r0, #4
 80143ba:	2301      	movs	r3, #1
 80143bc:	2406      	movs	r4, #6
 80143be:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80143c2:	9007      	str	r0, [sp, #28]
 80143c4:	eef0 7a47 	vmov.f32	s15, s14
 80143c8:	4696      	mov	lr, r2
 80143ca:	f04f 0c03 	mov.w	ip, #3
 80143ce:	2707      	movs	r7, #7
 80143d0:	e61d      	b.n	801400e <kalman_3gyro.constprop.0+0x47fe>
 80143d2:	ed9f bae2 	vldr	s22, [pc, #904]	; 801475c <kalman_3gyro.constprop.0+0x4f4c>
 80143d6:	eeb0 7a64 	vmov.f32	s14, s9
 80143da:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 80143de:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80143e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143e6:	f140 80b9 	bpl.w	801455c <kalman_3gyro.constprop.0+0x4d4c>
 80143ea:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 80143ee:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 80143f2:	ee38 3a47 	vsub.f32	s6, s16, s14
 80143f6:	ee34 4a63 	vsub.f32	s8, s8, s7
 80143fa:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80143fe:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014402:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8014406:	ee3b ba23 	vadd.f32	s22, s22, s7
 801440a:	ed9b 7a38 	vldr	s14, [fp, #224]	; 0xe0
 801440e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8014412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014416:	f6ff acb3 	blt.w	8013d80 <kalman_3gyro.constprop.0+0x4570>
 801441a:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 801441e:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8014422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014426:	f140 80a0 	bpl.w	801456a <kalman_3gyro.constprop.0+0x4d5a>
 801442a:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 801442e:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 8014432:	ee38 3a47 	vsub.f32	s6, s16, s14
 8014436:	ee34 4a63 	vsub.f32	s8, s8, s7
 801443a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801443e:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014442:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8014446:	ee3b ba23 	vadd.f32	s22, s22, s7
 801444a:	ed9b 7a3c 	vldr	s14, [fp, #240]	; 0xf0
 801444e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8014452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014456:	f63f acb3 	bhi.w	8013dc0 <kalman_3gyro.constprop.0+0x45b0>
 801445a:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 801445e:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014466:	f340 8086 	ble.w	8014576 <kalman_3gyro.constprop.0+0x4d66>
 801446a:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 801446e:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 8014472:	ee38 3a47 	vsub.f32	s6, s16, s14
 8014476:	ee34 4a63 	vsub.f32	s8, s8, s7
 801447a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801447e:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014482:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8014486:	ee3b ba23 	vadd.f32	s22, s22, s7
 801448a:	ed9b 7a40 	vldr	s14, [fp, #256]	; 0x100
 801448e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8014492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014496:	f63f acb3 	bhi.w	8013e00 <kalman_3gyro.constprop.0+0x45f0>
 801449a:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 801449e:	eef4 4ac8 	vcmpe.f32	s9, s16
 80144a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144a6:	dd69      	ble.n	801457c <kalman_3gyro.constprop.0+0x4d6c>
 80144a8:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 80144ac:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 80144b0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80144b4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80144b8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80144bc:	ee64 4a03 	vmul.f32	s9, s8, s6
 80144c0:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80144c4:	ee3b ba23 	vadd.f32	s22, s22, s7
 80144c8:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 80144cc:	eef4 4ac8 	vcmpe.f32	s9, s16
 80144d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144d4:	f63f acb4 	bhi.w	8013e40 <kalman_3gyro.constprop.0+0x4630>
 80144d8:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 80144dc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80144e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e4:	f77f acb4 	ble.w	8013e50 <kalman_3gyro.constprop.0+0x4640>
 80144e8:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 80144ec:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 80144f0:	ee78 3a64 	vsub.f32	s7, s16, s9
 80144f4:	ee35 5a44 	vsub.f32	s10, s10, s8
 80144f8:	ee37 7a64 	vsub.f32	s14, s14, s9
 80144fc:	ee25 5a23 	vmul.f32	s10, s10, s7
 8014500:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8014504:	ee3b ba04 	vadd.f32	s22, s22, s8
 8014508:	f7fc bb7c 	b.w	8010c04 <kalman_3gyro.constprop.0+0x13f4>
 801450c:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8014510:	eddf 7a93 	vldr	s15, [pc, #588]	; 8014760 <kalman_3gyro.constprop.0+0x4f50>
 8014514:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8014764 <kalman_3gyro.constprop.0+0x4f54>
 8014518:	3301      	adds	r3, #1
 801451a:	b29b      	uxth	r3, r3
 801451c:	2b31      	cmp	r3, #49	; 0x31
 801451e:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8014522:	bf98      	it	ls
 8014524:	eef0 7a47 	vmovls.f32	s15, s14
 8014528:	f7fd bc1c 	b.w	8011d64 <kalman_3gyro.constprop.0+0x2554>
 801452c:	2a0a      	cmp	r2, #10
 801452e:	d02c      	beq.n	801458a <kalman_3gyro.constprop.0+0x4d7a>
 8014530:	2100      	movs	r1, #0
 8014532:	3201      	adds	r2, #1
 8014534:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8014538:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 801453c:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8014540:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 8014544:	f7fd bca7 	b.w	8011e96 <kalman_3gyro.constprop.0+0x2686>
 8014548:	eeb0 7a64 	vmov.f32	s14, s9
 801454c:	e7a5      	b.n	801449a <kalman_3gyro.constprop.0+0x4c8a>
 801454e:	2305      	movs	r3, #5
 8014550:	2108      	movs	r1, #8
 8014552:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
 8014556:	2302      	movs	r3, #2
 8014558:	9302      	str	r3, [sp, #8]
 801455a:	e572      	b.n	8014042 <kalman_3gyro.constprop.0+0x4832>
 801455c:	eeb0 7a64 	vmov.f32	s14, s9
 8014560:	f7ff bbf6 	b.w	8013d50 <kalman_3gyro.constprop.0+0x4540>
 8014564:	eeb0 7a64 	vmov.f32	s14, s9
 8014568:	e757      	b.n	801441a <kalman_3gyro.constprop.0+0x4c0a>
 801456a:	eeb0 7a64 	vmov.f32	s14, s9
 801456e:	e40f      	b.n	8013d90 <kalman_3gyro.constprop.0+0x4580>
 8014570:	eeb0 7a64 	vmov.f32	s14, s9
 8014574:	e771      	b.n	801445a <kalman_3gyro.constprop.0+0x4c4a>
 8014576:	eeb0 7a64 	vmov.f32	s14, s9
 801457a:	e429      	b.n	8013dd0 <kalman_3gyro.constprop.0+0x45c0>
 801457c:	eeb0 7a64 	vmov.f32	s14, s9
 8014580:	e446      	b.n	8013e10 <kalman_3gyro.constprop.0+0x4600>
 8014582:	ed9f ea76 	vldr	s28, [pc, #472]	; 801475c <kalman_3gyro.constprop.0+0x4f4c>
 8014586:	f7fc bb6d 	b.w	8010c64 <kalman_3gyro.constprop.0+0x1454>
 801458a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801458c:	ed94 3a00 	vldr	s6, [r4]
 8014590:	edd2 5a00 	vldr	s11, [r2]
 8014594:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014596:	edd0 3a00 	vldr	s7, [r0]
 801459a:	ed92 1a00 	vldr	s2, [r2]
 801459e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80145a0:	ed91 4a00 	vldr	s8, [r1]
 80145a4:	edd2 4a00 	vldr	s9, [r2]
 80145a8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80145aa:	ed8d 7a81 	vstr	s14, [sp, #516]	; 0x204
 80145ae:	ed92 2a00 	vldr	s4, [r2]
 80145b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80145b4:	edcd 6a82 	vstr	s13, [sp, #520]	; 0x208
 80145b8:	edd2 7a00 	vldr	s15, [r2]
 80145bc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80145be:	edd2 2a00 	vldr	s5, [r2]
 80145c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80145c4:	ee75 5a81 	vadd.f32	s11, s11, s2
 80145c8:	edd2 1a00 	vldr	s3, [r2]
 80145cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80145ce:	ee74 4a82 	vadd.f32	s9, s9, s4
 80145d2:	ee75 5a83 	vadd.f32	s11, s11, s6
 80145d6:	ed92 3a00 	vldr	s6, [r2]
 80145da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80145dc:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80145e0:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80145e4:	edd2 3a00 	vldr	s7, [r2]
 80145e8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80145ea:	ee77 7a84 	vadd.f32	s15, s15, s8
 80145ee:	ed92 4a00 	vldr	s8, [r2]
 80145f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80145f4:	ee74 4a83 	vadd.f32	s9, s9, s6
 80145f8:	ed92 2a00 	vldr	s4, [r2]
 80145fc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80145fe:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 8014602:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8014606:	edd2 2a00 	vldr	s5, [r2]
 801460a:	ed91 3a00 	vldr	s6, [r1]
 801460e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014612:	ee74 4a82 	vadd.f32	s9, s9, s4
 8014616:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 801461a:	ee75 5a84 	vadd.f32	s11, s11, s8
 801461e:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 8014622:	ed90 4a00 	vldr	s8, [r0]
 8014626:	edd2 3a00 	vldr	s7, [r2]
 801462a:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 801462e:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 8014632:	ed91 2a00 	vldr	s4, [r1]
 8014636:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 801463a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 801463e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8014642:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 8014646:	ee75 5a84 	vadd.f32	s11, s11, s8
 801464a:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 801464e:	ed90 4a00 	vldr	s8, [r0]
 8014652:	edd2 2a00 	vldr	s5, [r2]
 8014656:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 801465a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801465e:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 8014662:	edd1 3a00 	vldr	s7, [r1]
 8014666:	ed90 3a00 	vldr	s6, [r0]
 801466a:	ee74 4a82 	vadd.f32	s9, s9, s4
 801466e:	ee75 5a84 	vadd.f32	s11, s11, s8
 8014672:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 8014676:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 801467a:	ed92 4a00 	vldr	s8, [r2]
 801467e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8014682:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8014686:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 801468a:	edd0 3a00 	vldr	s7, [r0]
 801468e:	edd4 2a00 	vldr	s5, [r4]
 8014692:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8014696:	ee75 5a83 	vadd.f32	s11, s11, s6
 801469a:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 801469e:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 80146a2:	ed91 3a00 	vldr	s6, [r1]
 80146a6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80146aa:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80146ae:	ed92 4a00 	vldr	s8, [r2]
 80146b2:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 80146b6:	f60b 0404 	addw	r4, fp, #2052	; 0x804
 80146ba:	edd4 3a00 	vldr	s7, [r4]
 80146be:	f60b 010c 	addw	r1, fp, #2060	; 0x80c
 80146c2:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80146c6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80146ca:	ee74 4a83 	vadd.f32	s9, s9, s6
 80146ce:	ed91 4a00 	vldr	s8, [r1]
 80146d2:	ee75 5aa3 	vadd.f32	s11, s11, s7
 80146d6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80146da:	ee64 4a85 	vmul.f32	s9, s9, s10
 80146de:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
 80146e2:	ee65 5a85 	vmul.f32	s11, s11, s10
 80146e6:	edc1 4a00 	vstr	s9, [r1]
 80146ea:	ee67 7a85 	vmul.f32	s15, s15, s10
 80146ee:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80146f2:	edc1 5a00 	vstr	s11, [r1]
 80146f6:	f240 1501 	movw	r5, #257	; 0x101
 80146fa:	3201      	adds	r2, #1
 80146fc:	f20d 41dc 	addw	r1, sp, #1244	; 0x4dc
 8014700:	f8ad 50ae 	strh.w	r5, [sp, #174]	; 0xae
 8014704:	edc1 7a00 	vstr	s15, [r1]
 8014708:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801470c:	2800      	cmp	r0, #0
 801470e:	f43d abc2 	beq.w	8011e96 <kalman_3gyro.constprop.0+0x2686>
 8014712:	2200      	movs	r2, #0
 8014714:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 8014718:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 801471c:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 8014720:	f88b 2001 	strb.w	r2, [fp, #1]
 8014724:	f7fd bbb7 	b.w	8011e96 <kalman_3gyro.constprop.0+0x2686>
 8014728:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801472c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014730:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8014734:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8014738:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 801473c:	f7fd bb20 	b.w	8011d80 <kalman_3gyro.constprop.0+0x2570>
 8014740:	2a00      	cmp	r2, #0
 8014742:	f340 80c1 	ble.w	80148c8 <kalman_3gyro.constprop.0+0x50b8>
 8014746:	2300      	movs	r3, #0
 8014748:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 801474c:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8014750:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8014754:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8014758:	f7fc bfcf 	b.w	80116fa <kalman_3gyro.constprop.0+0x1eea>
 801475c:	00000000 	.word	0x00000000
 8014760:	3e4cccce 	.word	0x3e4cccce
 8014764:	3eaaaaab 	.word	0x3eaaaaab
 8014768:	3e999998 	.word	0x3e999998
 801476c:	3f99999a 	.word	0x3f99999a
 8014770:	3dccccd0 	.word	0x3dccccd0
 8014774:	3f8ccccd 	.word	0x3f8ccccd
 8014778:	3e4ccccd 	.word	0x3e4ccccd
 801477c:	3d088889 	.word	0x3d088889
 8014780:	3d0d3dcb 	.word	0x3d0d3dcb
 8014784:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014788:	eef4 7ac7 	vcmpe.f32	s15, s14
 801478c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014790:	d55b      	bpl.n	801484a <kalman_3gyro.constprop.0+0x503a>
 8014792:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8014770 <kalman_3gyro.constprop.0+0x4f60>
 8014796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801479a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801479e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80147a2:	eef0 5a66 	vmov.f32	s11, s13
 80147a6:	eee7 5a06 	vfma.f32	s11, s14, s12
 80147aa:	eef4 7ae6 	vcmpe.f32	s15, s13
 80147ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147b2:	eeb0 7a65 	vmov.f32	s14, s11
 80147b6:	db5b      	blt.n	8014870 <kalman_3gyro.constprop.0+0x5060>
 80147b8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80147bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80147c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147c4:	d55b      	bpl.n	801487e <kalman_3gyro.constprop.0+0x506e>
 80147c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80147ca:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80147ce:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 8014768 <kalman_3gyro.constprop.0+0x4f58>
 80147d2:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 801476c <kalman_3gyro.constprop.0+0x4f5c>
 80147d6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80147da:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80147de:	eef4 7ae6 	vcmpe.f32	s15, s13
 80147e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147e6:	db5b      	blt.n	80148a0 <kalman_3gyro.constprop.0+0x5090>
 80147e8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80147ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80147f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f4:	d55b      	bpl.n	80148ae <kalman_3gyro.constprop.0+0x509e>
 80147f6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80147fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80147fe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014802:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014806:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801480a:	ee68 8a87 	vmul.f32	s17, s17, s14
 801480e:	f7ff bb7e 	b.w	8013f0e <kalman_3gyro.constprop.0+0x46fe>
 8014812:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8014816:	2b27      	cmp	r3, #39	; 0x27
 8014818:	f200 80c3 	bhi.w	80149a2 <kalman_3gyro.constprop.0+0x5192>
 801481c:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8014820:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8014824:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8014828:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 801482c:	2201      	movs	r2, #1
 801482e:	4413      	add	r3, r2
 8014830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014834:	bf14      	ite	ne
 8014836:	b29b      	uxthne	r3, r3
 8014838:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 801483c:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8014840:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8014844:	9b01      	ldr	r3, [sp, #4]
 8014846:	f7fd bb26 	b.w	8011e96 <kalman_3gyro.constprop.0+0x2686>
 801484a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801484e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014856:	d5af      	bpl.n	80147b8 <kalman_3gyro.constprop.0+0x4fa8>
 8014858:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801485c:	ed1f 6a3c 	vldr	s12, [pc, #-240]	; 8014770 <kalman_3gyro.constprop.0+0x4f60>
 8014860:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 8014774 <kalman_3gyro.constprop.0+0x4f64>
 8014864:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014868:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801486c:	eea6 7a86 	vfma.f32	s14, s13, s12
 8014870:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014874:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801487c:	dbad      	blt.n	80147da <kalman_3gyro.constprop.0+0x4fca>
 801487e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8014882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801488a:	d5ad      	bpl.n	80147e8 <kalman_3gyro.constprop.0+0x4fd8>
 801488c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014890:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8014894:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014898:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801489c:	eea6 7a86 	vfma.f32	s14, s13, s12
 80148a0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80148a4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80148a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ac:	dbad      	blt.n	801480a <kalman_3gyro.constprop.0+0x4ffa>
 80148ae:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80148b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80148b6:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8014778 <kalman_3gyro.constprop.0+0x4f68>
 80148ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80148be:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80148c2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80148c6:	e7a0      	b.n	801480a <kalman_3gyro.constprop.0+0x4ffa>
 80148c8:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 80148cc:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 80148d0:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 80148d4:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 80148d8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80148dc:	ee27 7a06 	vmul.f32	s14, s14, s12
 80148e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80148e4:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 80148e8:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 80148ec:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 80148f0:	f7fc bf03 	b.w	80116fa <kalman_3gyro.constprop.0+0x1eea>
 80148f4:	ed1f 4a5f 	vldr	s8, [pc, #-380]	; 801477c <kalman_3gyro.constprop.0+0x4f6c>
 80148f8:	ed5f 4a5f 	vldr	s9, [pc, #-380]	; 8014780 <kalman_3gyro.constprop.0+0x4f70>
 80148fc:	ac33      	add	r4, sp, #204	; 0xcc
 80148fe:	f04f 30ff 	mov.w	r0, #4294967295
 8014902:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 8014906:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 801490a:	eef0 7a66 	vmov.f32	s15, s13
 801490e:	3001      	adds	r0, #1
 8014910:	461a      	mov	r2, r3
 8014912:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 8014916:	320c      	adds	r2, #12
 8014918:	428a      	cmp	r2, r1
 801491a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801491e:	d1f8      	bne.n	8014912 <kalman_3gyro.constprop.0+0x5102>
 8014920:	ee27 7a84 	vmul.f32	s14, s15, s8
 8014924:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8014928:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801492c:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 8014930:	330c      	adds	r3, #12
 8014932:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014936:	428b      	cmp	r3, r1
 8014938:	eee7 6aa7 	vfma.f32	s13, s15, s15
 801493c:	d1f6      	bne.n	801492c <kalman_3gyro.constprop.0+0x511c>
 801493e:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8014942:	2802      	cmp	r0, #2
 8014944:	f103 0104 	add.w	r1, r3, #4
 8014948:	ece4 6a01 	vstmia	r4!, {s13}
 801494c:	d1d9      	bne.n	8014902 <kalman_3gyro.constprop.0+0x50f2>
 801494e:	eddd 6a34 	vldr	s13, [sp, #208]	; 0xd0
 8014952:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 8014956:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 801495a:	eef1 3ae7 	vsqrt.f32	s7, s15
 801495e:	eeb1 4ae6 	vsqrt.f32	s8, s13
 8014962:	eef1 4ac7 	vsqrt.f32	s9, s14
 8014966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801496a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 801496e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014972:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 8014976:	eef4 7ae6 	vcmpe.f32	s15, s13
 801497a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801497e:	ed8d 4a34 	vstr	s8, [sp, #208]	; 0xd0
 8014982:	edcd 4a35 	vstr	s9, [sp, #212]	; 0xd4
 8014986:	f57d aa62 	bpl.w	8011e4e <kalman_3gyro.constprop.0+0x263e>
 801498a:	2200      	movs	r2, #0
 801498c:	9b01      	ldr	r3, [sp, #4]
 801498e:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8014992:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8014996:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 801499a:	f88b 2001 	strb.w	r2, [fp, #1]
 801499e:	f7fd ba7a 	b.w	8011e96 <kalman_3gyro.constprop.0+0x2686>
 80149a2:	9b08      	ldr	r3, [sp, #32]
 80149a4:	6999      	ldr	r1, [r3, #24]
 80149a6:	69da      	ldr	r2, [r3, #28]
 80149a8:	6a1b      	ldr	r3, [r3, #32]
 80149aa:	9181      	str	r1, [sp, #516]	; 0x204
 80149ac:	9282      	str	r2, [sp, #520]	; 0x208
 80149ae:	9383      	str	r3, [sp, #524]	; 0x20c
 80149b0:	e73a      	b.n	8014828 <kalman_3gyro.constprop.0+0x5018>
 80149b2:	bf00      	nop
 80149b4:	0000      	movs	r0, r0
	...

080149b8 <iNemoEngine_API_Update>:
 80149b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149bc:	ed2d 8b0c 	vpush	{d8-d13}
 80149c0:	4604      	mov	r4, r0
 80149c2:	b0c1      	sub	sp, #260	; 0x104
 80149c4:	460d      	mov	r5, r1
 80149c6:	4617      	mov	r7, r2
 80149c8:	eeb0 8a40 	vmov.f32	s16, s0
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	f000 8253 	beq.w	8014e78 <iNemoEngine_API_Update+0x4c0>
 80149d2:	461e      	mov	r6, r3
 80149d4:	463b      	mov	r3, r7
 80149d6:	f894 c978 	ldrb.w	ip, [r4, #2424]	; 0x978
 80149da:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 80149de:	6859      	ldr	r1, [r3, #4]
 80149e0:	689a      	ldr	r2, [r3, #8]
 80149e2:	ab33      	add	r3, sp, #204	; 0xcc
 80149e4:	c307      	stmia	r3!, {r0, r1, r2}
 80149e6:	6879      	ldr	r1, [r7, #4]
 80149e8:	68ba      	ldr	r2, [r7, #8]
 80149ea:	6838      	ldr	r0, [r7, #0]
 80149ec:	ab30      	add	r3, sp, #192	; 0xc0
 80149ee:	c307      	stmia	r3!, {r0, r1, r2}
 80149f0:	f857 0f18 	ldr.w	r0, [r7, #24]!
 80149f4:	6879      	ldr	r1, [r7, #4]
 80149f6:	68ba      	ldr	r2, [r7, #8]
 80149f8:	ab36      	add	r3, sp, #216	; 0xd8
 80149fa:	c307      	stmia	r3!, {r0, r1, r2}
 80149fc:	f1bc 0f00 	cmp.w	ip, #0
 8014a00:	d005      	beq.n	8014a0e <iNemoEngine_API_Update+0x56>
 8014a02:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8014a06:	7923      	ldrb	r3, [r4, #4]
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	f080 829b 	bcs.w	8014f44 <iNemoEngine_API_Update+0x58c>
 8014a0e:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 8014a12:	f10d 0a14 	add.w	sl, sp, #20
 8014a16:	2300      	movs	r3, #0
 8014a18:	4649      	mov	r1, r9
 8014a1a:	4650      	mov	r0, sl
 8014a1c:	aa33      	add	r2, sp, #204	; 0xcc
 8014a1e:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8014a22:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8014a26:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8014a2a:	f7f9 fb65 	bl	800e0f8 <rotVect>
 8014a2e:	aa36      	add	r2, sp, #216	; 0xd8
 8014a30:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8014a34:	a808      	add	r0, sp, #32
 8014a36:	f7f9 fb5f 	bl	800e0f8 <rotVect>
 8014a3a:	aa30      	add	r2, sp, #192	; 0xc0
 8014a3c:	4640      	mov	r0, r8
 8014a3e:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8014a42:	f7f9 fb59 	bl	800e0f8 <rotVect>
 8014a46:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8014a4a:	b923      	cbnz	r3, 8014a56 <iNemoEngine_API_Update+0x9e>
 8014a4c:	4b8c      	ldr	r3, [pc, #560]	; (8014c80 <iNemoEngine_API_Update+0x2c8>)
 8014a4e:	930c      	str	r3, [sp, #48]	; 0x30
 8014a50:	2200      	movs	r2, #0
 8014a52:	920b      	str	r2, [sp, #44]	; 0x2c
 8014a54:	930d      	str	r3, [sp, #52]	; 0x34
 8014a56:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8014a5a:	2f09      	cmp	r7, #9
 8014a5c:	d851      	bhi.n	8014b02 <iNemoEngine_API_Update+0x14a>
 8014a5e:	ed9d ba06 	vldr	s22, [sp, #24]
 8014a62:	eddd ba05 	vldr	s23, [sp, #20]
 8014a66:	eddd aa07 	vldr	s21, [sp, #28]
 8014a6a:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 8014a6e:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8014a72:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8014a76:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8014a7a:	ee17 0a90 	vmov	r0, s15
 8014a7e:	f7eb fd5b 	bl	8000538 <__aeabi_f2d>
 8014a82:	ec41 0b10 	vmov	d0, r0, r1
 8014a86:	f003 fed9 	bl	801883c <sqrt>
 8014a8a:	ec51 0b10 	vmov	r0, r1, d0
 8014a8e:	f7ec f85b 	bl	8000b48 <__aeabi_d2f>
 8014a92:	ee07 0a90 	vmov	s15, r0
 8014a96:	ee8c 7a27 	vdiv.f32	s14, s24, s15
 8014a9a:	eddd 9a0c 	vldr	s19, [sp, #48]	; 0x30
 8014a9e:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 8014aa2:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 8014aa6:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8014aaa:	ee6b ba87 	vmul.f32	s23, s23, s14
 8014aae:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8014ab2:	ee2b ba07 	vmul.f32	s22, s22, s14
 8014ab6:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8014aba:	ee6a aa87 	vmul.f32	s21, s21, s14
 8014abe:	ee17 0a90 	vmov	r0, s15
 8014ac2:	edcd ba05 	vstr	s23, [sp, #20]
 8014ac6:	ed8d ba06 	vstr	s22, [sp, #24]
 8014aca:	edcd aa07 	vstr	s21, [sp, #28]
 8014ace:	f7eb fd33 	bl	8000538 <__aeabi_f2d>
 8014ad2:	ec41 0b10 	vmov	d0, r0, r1
 8014ad6:	f003 feb1 	bl	801883c <sqrt>
 8014ada:	ec51 0b10 	vmov	r0, r1, d0
 8014ade:	f7ec f833 	bl	8000b48 <__aeabi_d2f>
 8014ae2:	ee07 0a90 	vmov	s15, r0
 8014ae6:	eecc 7a27 	vdiv.f32	s15, s24, s15
 8014aea:	ee2a aa27 	vmul.f32	s20, s20, s15
 8014aee:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8014af2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014af6:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
 8014afa:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
 8014afe:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 8014b02:	7923      	ldrb	r3, [r4, #4]
 8014b04:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	f080 80dd 	bcs.w	8014cc8 <iNemoEngine_API_Update+0x310>
 8014b0e:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8014b12:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8014b16:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8014b1a:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8014b1e:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8014b22:	3701      	adds	r7, #1
 8014b24:	aa33      	add	r2, sp, #204	; 0xcc
 8014b26:	4649      	mov	r1, r9
 8014b28:	4640      	mov	r0, r8
 8014b2a:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8014b2e:	9303      	str	r3, [sp, #12]
 8014b30:	f7f9 fae2 	bl	800e0f8 <rotVect>
 8014b34:	9b03      	ldr	r3, [sp, #12]
 8014b36:	f8db 1000 	ldr.w	r1, [fp]
 8014b3a:	6818      	ldr	r0, [r3, #0]
 8014b3c:	f8da 2000 	ldr.w	r2, [sl]
 8014b40:	6833      	ldr	r3, [r6, #0]
 8014b42:	61ab      	str	r3, [r5, #24]
 8014b44:	60e8      	str	r0, [r5, #12]
 8014b46:	6129      	str	r1, [r5, #16]
 8014b48:	616a      	str	r2, [r5, #20]
 8014b4a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014b4e:	9301      	str	r3, [sp, #4]
 8014b50:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8014b54:	4641      	mov	r1, r8
 8014b56:	9300      	str	r3, [sp, #0]
 8014b58:	462a      	mov	r2, r5
 8014b5a:	f105 031c 	add.w	r3, r5, #28
 8014b5e:	f105 000c 	add.w	r0, r5, #12
 8014b62:	f7fa fd85 	bl	800f670 <output_update>
 8014b66:	ed95 8a00 	vldr	s16, [r5]
 8014b6a:	edd5 9a01 	vldr	s19, [r5, #4]
 8014b6e:	eeb0 0a48 	vmov.f32	s0, s16
 8014b72:	f003 fdf7 	bl	8018764 <sinf>
 8014b76:	eddf 7a43 	vldr	s15, [pc, #268]	; 8014c84 <iNemoEngine_API_Update+0x2cc>
 8014b7a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8014c88 <iNemoEngine_API_Update+0x2d0>
 8014b7e:	ee60 8a00 	vmul.f32	s17, s0, s0
 8014b82:	eef0 6ae9 	vabs.f32	s13, s19
 8014b86:	eee8 7aa7 	vfma.f32	s15, s17, s15
 8014b8a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b92:	eef0 8a67 	vmov.f32	s17, s15
 8014b96:	d56e      	bpl.n	8014c76 <iNemoEngine_API_Update+0x2be>
 8014b98:	eeb0 0a69 	vmov.f32	s0, s19
 8014b9c:	f003 fe24 	bl	80187e8 <tanf>
 8014ba0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014ba4:	eea0 9a28 	vfma.f32	s18, s0, s17
 8014ba8:	eef1 7ac9 	vsqrt.f32	s15, s18
 8014bac:	eddf 6a37 	vldr	s13, [pc, #220]	; 8014c8c <iNemoEngine_API_Update+0x2d4>
 8014bb0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8014ca0 <iNemoEngine_API_Update+0x2e8>
 8014bb4:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8014bb8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014bbc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bc4:	bf88      	it	hi
 8014bc6:	eef0 7a66 	vmovhi.f32	s15, s13
 8014bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bd2:	bfb8      	it	lt
 8014bd4:	eef0 7a47 	vmovlt.f32	s15, s14
 8014bd8:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8014bdc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014be0:	4c2b      	ldr	r4, [pc, #172]	; (8014c90 <iNemoEngine_API_Update+0x2d8>)
 8014be2:	bba3      	cbnz	r3, 8014c4e <iNemoEngine_API_Update+0x296>
 8014be4:	6820      	ldr	r0, [r4, #0]
 8014be6:	edd5 0a08 	vldr	s1, [r5, #32]
 8014bea:	ed95 0a07 	vldr	s0, [r5, #28]
 8014bee:	edd5 9a03 	vldr	s19, [r5, #12]
 8014bf2:	ed95 aa04 	vldr	s20, [r5, #16]
 8014bf6:	ed95 9a05 	vldr	s18, [r5, #20]
 8014bfa:	edd5 8a06 	vldr	s17, [r5, #24]
 8014bfe:	f7f9 fb4b 	bl	800e298 <findDirection>
 8014c02:	6020      	str	r0, [r4, #0]
 8014c04:	2805      	cmp	r0, #5
 8014c06:	f200 833d 	bhi.w	8015284 <iNemoEngine_API_Update+0x8cc>
 8014c0a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8014c0e:	000a      	.short	0x000a
 8014c10:	00060137 	.word	0x00060137
 8014c14:	00060169 	.word	0x00060169
 8014c18:	000a      	.short	0x000a
 8014c1a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8014c94 <iNemoEngine_API_Update+0x2dc>
 8014c1e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8014c22:	eddf 7a28 	vldr	s15, [pc, #160]	; 8014cc4 <iNemoEngine_API_Update+0x30c>
 8014c26:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c2e:	bfa8      	it	ge
 8014c30:	ee38 8a67 	vsubge.f32	s16, s16, s15
 8014c34:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c3c:	f100 8111 	bmi.w	8014e62 <iNemoEngine_API_Update+0x4aa>
 8014c40:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 8014c44:	b041      	add	sp, #260	; 0x104
 8014c46:	ecbd 8b0c 	vpop	{d8-d13}
 8014c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c4e:	ed95 9a05 	vldr	s18, [r5, #20]
 8014c52:	6820      	ldr	r0, [r4, #0]
 8014c54:	edd5 0a07 	vldr	s1, [r5, #28]
 8014c58:	ed95 0a08 	vldr	s0, [r5, #32]
 8014c5c:	edd5 9a04 	vldr	s19, [r5, #16]
 8014c60:	ed95 aa03 	vldr	s20, [r5, #12]
 8014c64:	edd5 8a06 	vldr	s17, [r5, #24]
 8014c68:	eeb1 1a41 	vneg.f32	s2, s2
 8014c6c:	eeb1 9a49 	vneg.f32	s18, s18
 8014c70:	f7f9 fb12 	bl	800e298 <findDirection>
 8014c74:	e7c5      	b.n	8014c02 <iNemoEngine_API_Update+0x24a>
 8014c76:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014c98 <iNemoEngine_API_Update+0x2e0>
 8014c7a:	eea8 9aa7 	vfma.f32	s18, s17, s15
 8014c7e:	e793      	b.n	8014ba8 <iNemoEngine_API_Update+0x1f0>
 8014c80:	3f333333 	.word	0x3f333333
 8014c84:	00000000 	.word	0x00000000
 8014c88:	3fbc430e 	.word	0x3fbc430e
 8014c8c:	40490fdb 	.word	0x40490fdb
 8014c90:	20000218 	.word	0x20000218
 8014c94:	43340000 	.word	0x43340000
 8014c98:	42c6ab07 	.word	0x42c6ab07
 8014c9c:	3c03126f 	.word	0x3c03126f
 8014ca0:	3c8efa35 	.word	0x3c8efa35
 8014ca4:	3e4ccccd 	.word	0x3e4ccccd
 8014ca8:	3fb50481 	.word	0x3fb50481
 8014cac:	3ed93dd9 	.word	0x3ed93dd9
 8014cb0:	3b656042 	.word	0x3b656042
 8014cb4:	42c80000 	.word	0x42c80000
 8014cb8:	3a83126f 	.word	0x3a83126f
 8014cbc:	3d4ccccd 	.word	0x3d4ccccd
 8014cc0:	3f333333 	.word	0x3f333333
 8014cc4:	43b40000 	.word	0x43b40000
 8014cc8:	ee07 3a90 	vmov	s15, r3
 8014ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014cd0:	ed5f 5a0e 	vldr	s11, [pc, #-56]	; 8014c9c <iNemoEngine_API_Update+0x2e4>
 8014cd4:	ed1f 4a0e 	vldr	s8, [pc, #-56]	; 8014ca0 <iNemoEngine_API_Update+0x2e8>
 8014cd8:	ed1f 3a0b 	vldr	s6, [pc, #-44]	; 8014cb0 <iNemoEngine_API_Update+0x2f8>
 8014cdc:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8014cac <iNemoEngine_API_Update+0x2f4>
 8014ce0:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 8014ca8 <iNemoEngine_API_Update+0x2f0>
 8014ce4:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8014ca4 <iNemoEngine_API_Update+0x2ec>
 8014ce8:	ee27 1a88 	vmul.f32	s2, s15, s16
 8014cec:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 8014cf0:	ee85 5a81 	vdiv.f32	s10, s11, s2
 8014cf4:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8014cf8:	2700      	movs	r7, #0
 8014cfa:	f8a4 7950 	strh.w	r7, [r4, #2384]	; 0x950
 8014cfe:	f04f 0c00 	mov.w	ip, #0
 8014d02:	f504 6716 	add.w	r7, r4, #2400	; 0x960
 8014d06:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8014d0a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8014d0e:	edd3 5a00 	vldr	s11, [r3]
 8014d12:	f8c3 c000 	str.w	ip, [r3]
 8014d16:	eef1 7ac5 	vsqrt.f32	s15, s10
 8014d1a:	f604 1364 	addw	r3, r4, #2404	; 0x964
 8014d1e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8014d22:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8014d26:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8014d2a:	edd7 4a00 	vldr	s9, [r7]
 8014d2e:	f8c7 c000 	str.w	ip, [r7]
 8014d32:	ed93 5a00 	vldr	s10, [r3]
 8014d36:	f8c3 c000 	str.w	ip, [r3]
 8014d3a:	7963      	ldrb	r3, [r4, #5]
 8014d3c:	ee64 4a84 	vmul.f32	s9, s9, s8
 8014d40:	ee25 5a04 	vmul.f32	s10, s10, s8
 8014d44:	ee65 5a84 	vmul.f32	s11, s11, s8
 8014d48:	2b01      	cmp	r3, #1
 8014d4a:	eec3 3a27 	vdiv.f32	s7, s6, s15
 8014d4e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8014d52:	ee27 6a86 	vmul.f32	s12, s15, s12
 8014d56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014d5a:	edcd 4a2b 	vstr	s9, [sp, #172]	; 0xac
 8014d5e:	ed8d 5a2c 	vstr	s10, [sp, #176]	; 0xb0
 8014d62:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 8014d66:	f000 812e 	beq.w	8014fc6 <iNemoEngine_API_Update+0x60e>
 8014d6a:	2b02      	cmp	r3, #2
 8014d6c:	f000 8122 	beq.w	8014fb4 <iNemoEngine_API_Update+0x5fc>
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	f000 80ef 	beq.w	8014f54 <iNemoEngine_API_Update+0x59c>
 8014d76:	edd4 0a05 	vldr	s1, [r4, #20]
 8014d7a:	ed1f 5a32 	vldr	s10, [pc, #-200]	; 8014cb4 <iNemoEngine_API_Update+0x2fc>
 8014d7e:	ed1f 0a32 	vldr	s0, [pc, #-200]	; 8014cb8 <iNemoEngine_API_Update+0x300>
 8014d82:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8014d86:	ee60 0a85 	vmul.f32	s1, s1, s10
 8014d8a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014d8e:	8863      	ldrh	r3, [r4, #2]
 8014d90:	1e5a      	subs	r2, r3, #1
 8014d92:	2a12      	cmp	r2, #18
 8014d94:	f200 80e7 	bhi.w	8014f66 <iNemoEngine_API_Update+0x5ae>
 8014d98:	3301      	adds	r3, #1
 8014d9a:	b21a      	sxth	r2, r3
 8014d9c:	b29b      	uxth	r3, r3
 8014d9e:	2b03      	cmp	r3, #3
 8014da0:	8062      	strh	r2, [r4, #2]
 8014da2:	f240 8115 	bls.w	8014fd0 <iNemoEngine_API_Update+0x618>
 8014da6:	ee05 2a90 	vmov	s11, r2
 8014daa:	ed1f 5a3c 	vldr	s10, [pc, #-240]	; 8014cbc <iNemoEngine_API_Update+0x304>
 8014dae:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014db2:	ee65 5a85 	vmul.f32	s11, s11, s10
 8014db6:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8014dba:	eec3 7aa5 	vdiv.f32	s15, s7, s11
 8014dbe:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 8014dc2:	ed1f 5a41 	vldr	s10, [pc, #-260]	; 8014cc0 <iNemoEngine_API_Update+0x308>
 8014dc6:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 8014dca:	ee26 6a24 	vmul.f32	s12, s12, s9
 8014dce:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014dd2:	ee26 6a25 	vmul.f32	s12, s12, s11
 8014dd6:	ee27 7a05 	vmul.f32	s14, s14, s10
 8014dda:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8014dde:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8014de2:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 8014de6:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8014dea:	aa1a      	add	r2, sp, #104	; 0x68
 8014dec:	af16      	add	r7, sp, #88	; 0x58
 8014dee:	e9cd 7200 	strd	r7, r2, [sp]
 8014df2:	ab12      	add	r3, sp, #72	; 0x48
 8014df4:	aa1e      	add	r2, sp, #120	; 0x78
 8014df6:	4641      	mov	r1, r8
 8014df8:	4620      	mov	r0, r4
 8014dfa:	f7fa fd09 	bl	800f810 <kalman_3gyro.constprop.0>
 8014dfe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014e00:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 8014e04:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 8014e08:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 8014e0c:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 8014e10:	f8c7 a000 	str.w	sl, [r7]
 8014e14:	f604 1744 	addw	r7, r4, #2372	; 0x944
 8014e18:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8014e1c:	f8c7 e000 	str.w	lr, [r7]
 8014e20:	f604 1748 	addw	r7, r4, #2376	; 0x948
 8014e24:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8014e28:	f8c7 c000 	str.w	ip, [r7]
 8014e2c:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8014e30:	6030      	str	r0, [r6, #0]
 8014e32:	60f3      	str	r3, [r6, #12]
 8014e34:	6071      	str	r1, [r6, #4]
 8014e36:	60b2      	str	r2, [r6, #8]
 8014e38:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8014e3c:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8014e40:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8014e44:	9819      	ldr	r0, [sp, #100]	; 0x64
 8014e46:	ed94 9a75 	vldr	s18, [r4, #468]	; 0x1d4
 8014e4a:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8014e4e:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8014e52:	edc3 7a00 	vstr	s15, [r3]
 8014e56:	f8cb e000 	str.w	lr, [fp]
 8014e5a:	f8ca c000 	str.w	ip, [sl]
 8014e5e:	6030      	str	r0, [r6, #0]
 8014e60:	e65f      	b.n	8014b22 <iNemoEngine_API_Update+0x16a>
 8014e62:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8014cc4 <iNemoEngine_API_Update+0x30c>
 8014e66:	ee38 8a27 	vadd.f32	s16, s16, s15
 8014e6a:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 8014e6e:	b041      	add	sp, #260	; 0x104
 8014e70:	ecbd 8b0c 	vpop	{d8-d13}
 8014e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e78:	ae0e      	add	r6, sp, #56	; 0x38
 8014e7a:	e5ab      	b.n	80149d4 <iNemoEngine_API_Update+0x1c>
 8014e7c:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8014e80:	ee69 8a28 	vmul.f32	s17, s18, s17
 8014e84:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8014e88:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8014e8c:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8014e90:	eee9 7a49 	vfms.f32	s15, s18, s18
 8014e94:	ee17 0a90 	vmov	r0, s15
 8014e98:	f7eb fb4e 	bl	8000538 <__aeabi_f2d>
 8014e9c:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8014ea0:	4602      	mov	r2, r0
 8014ea2:	460b      	mov	r3, r1
 8014ea4:	ee17 0a90 	vmov	r0, s15
 8014ea8:	ec43 2b18 	vmov	d8, r2, r3
 8014eac:	f7eb fb44 	bl	8000538 <__aeabi_f2d>
 8014eb0:	eeb0 1a48 	vmov.f32	s2, s16
 8014eb4:	eef0 1a68 	vmov.f32	s3, s17
 8014eb8:	ec41 0b10 	vmov	d0, r0, r1
 8014ebc:	f003 fcbc 	bl	8018838 <atan2>
 8014ec0:	a3f3      	add	r3, pc, #972	; (adr r3, 8015290 <iNemoEngine_API_Update+0x8d8>)
 8014ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ec6:	ec51 0b10 	vmov	r0, r1, d0
 8014eca:	f7eb fb8d 	bl	80005e8 <__aeabi_dmul>
 8014ece:	4bf2      	ldr	r3, [pc, #968]	; (8015298 <iNemoEngine_API_Update+0x8e0>)
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	f7eb f9d1 	bl	8000278 <__aeabi_dsub>
 8014ed6:	f7eb fe37 	bl	8000b48 <__aeabi_d2f>
 8014eda:	ee08 0a10 	vmov	s16, r0
 8014ede:	e6a0      	b.n	8014c22 <iNemoEngine_API_Update+0x26a>
 8014ee0:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8014ee4:	ee69 8a28 	vmul.f32	s17, s18, s17
 8014ee8:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8014eec:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8014ef0:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8014ef4:	eee9 7a49 	vfms.f32	s15, s18, s18
 8014ef8:	ee17 0a90 	vmov	r0, s15
 8014efc:	f7eb fb1c 	bl	8000538 <__aeabi_f2d>
 8014f00:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8014f04:	4602      	mov	r2, r0
 8014f06:	460b      	mov	r3, r1
 8014f08:	ee17 0a90 	vmov	r0, s15
 8014f0c:	ec43 2b18 	vmov	d8, r2, r3
 8014f10:	f7eb fb12 	bl	8000538 <__aeabi_f2d>
 8014f14:	eeb0 1a48 	vmov.f32	s2, s16
 8014f18:	eef0 1a68 	vmov.f32	s3, s17
 8014f1c:	ec41 0b10 	vmov	d0, r0, r1
 8014f20:	f003 fc8a 	bl	8018838 <atan2>
 8014f24:	a3da      	add	r3, pc, #872	; (adr r3, 8015290 <iNemoEngine_API_Update+0x8d8>)
 8014f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f2a:	ec51 0b10 	vmov	r0, r1, d0
 8014f2e:	f7eb fb5b 	bl	80005e8 <__aeabi_dmul>
 8014f32:	4bd9      	ldr	r3, [pc, #868]	; (8015298 <iNemoEngine_API_Update+0x8e0>)
 8014f34:	2200      	movs	r2, #0
 8014f36:	f7eb f9a1 	bl	800027c <__adddf3>
 8014f3a:	f7eb fe05 	bl	8000b48 <__aeabi_d2f>
 8014f3e:	ee08 0a10 	vmov	s16, r0
 8014f42:	e66e      	b.n	8014c22 <iNemoEngine_API_Update+0x26a>
 8014f44:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	dd44      	ble.n	8014fd6 <iNemoEngine_API_Update+0x61e>
 8014f4c:	3b01      	subs	r3, #1
 8014f4e:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 8014f52:	e55c      	b.n	8014a0e <iNemoEngine_API_Update+0x56>
 8014f54:	8863      	ldrh	r3, [r4, #2]
 8014f56:	eddf 0ad1 	vldr	s1, [pc, #836]	; 801529c <iNemoEngine_API_Update+0x8e4>
 8014f5a:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 80152a0 <iNemoEngine_API_Update+0x8e8>
 8014f5e:	1e5a      	subs	r2, r3, #1
 8014f60:	2a12      	cmp	r2, #18
 8014f62:	f67f af19 	bls.w	8014d98 <iNemoEngine_API_Update+0x3e0>
 8014f66:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 8014f6a:	eddf 2ace 	vldr	s5, [pc, #824]	; 80152a4 <iNemoEngine_API_Update+0x8ec>
 8014f6e:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 8014f72:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8014f76:	ee34 4a22 	vadd.f32	s8, s8, s5
 8014f7a:	ee64 7aa6 	vmul.f32	s15, s9, s13
 8014f7e:	eec3 4a84 	vdiv.f32	s9, s7, s8
 8014f82:	2300      	movs	r3, #0
 8014f84:	8063      	strh	r3, [r4, #2]
 8014f86:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 8014f8a:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 8014f8e:	ed9f 3ac6 	vldr	s6, [pc, #792]	; 80152a8 <iNemoEngine_API_Update+0x8f0>
 8014f92:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
 8014f96:	ee65 6a26 	vmul.f32	s13, s10, s13
 8014f9a:	ee25 6a86 	vmul.f32	s12, s11, s12
 8014f9e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8014fa2:	edcd 4a1e 	vstr	s9, [sp, #120]	; 0x78
 8014fa6:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8014faa:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 8014fae:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8014fb2:	e71a      	b.n	8014dea <iNemoEngine_API_Update+0x432>
 8014fb4:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8014fb8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014fbc:	edd4 0a05 	vldr	s1, [r4, #20]
 8014fc0:	ed9f 0aba 	vldr	s0, [pc, #744]	; 80152ac <iNemoEngine_API_Update+0x8f4>
 8014fc4:	e6e3      	b.n	8014d8e <iNemoEngine_API_Update+0x3d6>
 8014fc6:	edd4 0a05 	vldr	s1, [r4, #20]
 8014fca:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 80152b0 <iNemoEngine_API_Update+0x8f8>
 8014fce:	e6de      	b.n	8014d8e <iNemoEngine_API_Update+0x3d6>
 8014fd0:	eddf 5ab8 	vldr	s11, [pc, #736]	; 80152b4 <iNemoEngine_API_Update+0x8fc>
 8014fd4:	e6ef      	b.n	8014db6 <iNemoEngine_API_Update+0x3fe>
 8014fd6:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 8014fda:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 8014fde:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 8014fe2:	ed97 5a00 	vldr	s10, [r7]
 8014fe6:	ed92 da00 	vldr	s26, [r2]
 8014fea:	ed93 6a00 	vldr	s12, [r3]
 8014fee:	ed9f 0aab 	vldr	s0, [pc, #684]	; 801529c <iNemoEngine_API_Update+0x8e4>
 8014ff2:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 8014ff6:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 8014ffa:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 8014ffe:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 8015002:	ed91 3a00 	vldr	s6, [r1]
 8015006:	ed92 1a00 	vldr	s2, [r2]
 801500a:	ed97 7a00 	vldr	s14, [r7]
 801500e:	edd3 3a00 	vldr	s7, [r3]
 8015012:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 8015016:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 801501a:	eeb8 4a00 	vmov.f32	s8, #128	; 0xc0000000 -2.0
 801501e:	ed91 ba00 	vldr	s22, [r1]
 8015022:	edd0 6a00 	vldr	s13, [r0]
 8015026:	f504 619d 	add.w	r1, r4, #1256	; 0x4e8
 801502a:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
 801502e:	edd1 aa00 	vldr	s21, [r1]
 8015032:	ed92 2a00 	vldr	s4, [r2]
 8015036:	ee96 7a04 	vfnms.f32	s14, s12, s8
 801503a:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 801503e:	f504 61c5 	add.w	r1, r4, #1576	; 0x628
 8015042:	eed1 3a04 	vfnms.f32	s7, s2, s8
 8015046:	f204 6234 	addw	r2, r4, #1588	; 0x634
 801504a:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
 801504e:	edd0 7a00 	vldr	s15, [r0]
 8015052:	edd2 1a00 	vldr	s3, [r2]
 8015056:	ed93 ca00 	vldr	s24, [r3]
 801505a:	eed5 6a04 	vfnms.f32	s13, s10, s8
 801505e:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 8015062:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
 8015066:	ed91 5a00 	vldr	s10, [r1]
 801506a:	edd0 5a00 	vldr	s11, [r0]
 801506e:	edd7 9a00 	vldr	s19, [r7]
 8015072:	f204 6024 	addw	r0, r4, #1572	; 0x624
 8015076:	eed5 1a04 	vfnms.f32	s3, s10, s8
 801507a:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
 801507e:	f504 67f3 	add.w	r7, r4, #1944	; 0x798
 8015082:	edd0 2a00 	vldr	s5, [r0]
 8015086:	edd3 0a00 	vldr	s1, [r3]
 801508a:	f204 70a4 	addw	r0, r4, #1956	; 0x7a4
 801508e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015092:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8015096:	edd7 7a00 	vldr	s15, [r7]
 801509a:	edd0 5a00 	vldr	s11, [r0]
 801509e:	f504 63cb 	add.w	r3, r4, #1624	; 0x658
 80150a2:	f504 6ac6 	add.w	sl, r4, #1584	; 0x630
 80150a6:	f204 693c 	addw	r9, r4, #1596	; 0x63c
 80150aa:	ed93 6a00 	vldr	s12, [r3]
 80150ae:	edda ba00 	vldr	s23, [sl]
 80150b2:	ed99 5a00 	vldr	s10, [r9]
 80150b6:	ee76 6a83 	vadd.f32	s13, s13, s6
 80150ba:	f204 4ccc 	addw	ip, r4, #1228	; 0x4cc
 80150be:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
 80150c2:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 80150c6:	eed7 5a84 	vfnms.f32	s11, s15, s8
 80150ca:	f504 68cc 	add.w	r8, r4, #1632	; 0x660
 80150ce:	f204 6e54 	addw	lr, r4, #1620	; 0x654
 80150d2:	eddc 4a00 	vldr	s9, [ip]
 80150d6:	edd3 7a00 	vldr	s15, [r3]
 80150da:	ed98 1a00 	vldr	s2, [r8]
 80150de:	edde 8a00 	vldr	s17, [lr]
 80150e2:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 80150e6:	f504 61f9 	add.w	r1, r4, #1992	; 0x7c8
 80150ea:	f204 72bc 	addw	r2, r4, #1980	; 0x7bc
 80150ee:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 80150f2:	f204 6b4c 	addw	fp, r4, #1612	; 0x64c
 80150f6:	ee9b 5a84 	vfnms.f32	s10, s23, s8
 80150fa:	f504 68f8 	add.w	r8, r4, #1984	; 0x7c0
 80150fe:	f204 7ecc 	addw	lr, r4, #1996	; 0x7cc
 8015102:	ed9c aa00 	vldr	s20, [ip]
 8015106:	eeed 6a03 	vfma.f32	s13, s26, s6
 801510a:	f504 67f4 	add.w	r7, r4, #1952	; 0x7a0
 801510e:	f204 7cac 	addw	ip, r4, #1964	; 0x7ac
 8015112:	ed92 da00 	vldr	s26, [r2]
 8015116:	eeab 7a03 	vfma.f32	s14, s22, s6
 801511a:	f204 70c4 	addw	r0, r4, #1988	; 0x7c4
 801511e:	ed91 ba00 	vldr	s22, [r1]
 8015122:	eef0 ca61 	vmov.f32	s25, s3
 8015126:	eddb 1a00 	vldr	s3, [fp]
 801512a:	edd3 ba00 	vldr	s23, [r3]
 801512e:	f9b4 2976 	ldrsh.w	r2, [r4, #2422]	; 0x976
 8015132:	eedb 7a84 	vfnms.f32	s15, s23, s8
 8015136:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 801513a:	1c53      	adds	r3, r2, #1
 801513c:	eeea 3a83 	vfma.f32	s7, s21, s6
 8015140:	ee7c 1aa1 	vadd.f32	s3, s25, s3
 8015144:	edd8 aa00 	vldr	s21, [r8]
 8015148:	eee6 1a03 	vfma.f32	s3, s12, s6
 801514c:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8015150:	ed9e 6a00 	vldr	s12, [lr]
 8015154:	edd7 aa00 	vldr	s21, [r7]
 8015158:	eee6 7a03 	vfma.f32	s15, s12, s6
 801515c:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 8015160:	ed9c 6a00 	vldr	s12, [ip]
 8015164:	eedc 4a04 	vfnms.f32	s9, s24, s8
 8015168:	ee9a 6a84 	vfnms.f32	s12, s21, s8
 801516c:	ee75 5a8d 	vadd.f32	s11, s11, s26
 8015170:	ee2a 4a00 	vmul.f32	s8, s20, s0
 8015174:	ee22 2a00 	vmul.f32	s4, s4, s0
 8015178:	ee62 2a80 	vmul.f32	s5, s5, s0
 801517c:	eeeb 5a03 	vfma.f32	s11, s22, s6
 8015180:	ed90 0a00 	vldr	s0, [r0]
 8015184:	ee64 7a27 	vmul.f32	s15, s8, s15
 8015188:	ee36 6a00 	vadd.f32	s12, s12, s0
 801518c:	ee74 4aa9 	vadd.f32	s9, s9, s19
 8015190:	ed91 0a00 	vldr	s0, [r1]
 8015194:	ee35 5a28 	vadd.f32	s10, s10, s17
 8015198:	ee66 6a82 	vmul.f32	s13, s13, s4
 801519c:	ee22 7a87 	vmul.f32	s14, s5, s14
 80151a0:	ee64 5a25 	vmul.f32	s11, s8, s11
 80151a4:	eee0 4a83 	vfma.f32	s9, s1, s6
 80151a8:	f604 1068 	addw	r0, r4, #2408	; 0x968
 80151ac:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 80151b0:	eea1 5a03 	vfma.f32	s10, s2, s6
 80151b4:	eea0 6a03 	vfma.f32	s12, s0, s6
 80151b8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80151bc:	ee63 3a82 	vmul.f32	s7, s7, s4
 80151c0:	ee27 7a07 	vmul.f32	s14, s14, s14
 80151c4:	ee62 1aa1 	vmul.f32	s3, s5, s3
 80151c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80151cc:	eee3 6aa3 	vfma.f32	s13, s7, s7
 80151d0:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80151d4:	eea1 7aa1 	vfma.f32	s14, s3, s3
 80151d8:	ee24 6a06 	vmul.f32	s12, s8, s12
 80151dc:	ee62 4a24 	vmul.f32	s9, s4, s9
 80151e0:	ee22 5a85 	vmul.f32	s10, s5, s10
 80151e4:	eee4 6aa4 	vfma.f32	s13, s9, s9
 80151e8:	eea5 7a05 	vfma.f32	s14, s10, s10
 80151ec:	eee6 7a06 	vfma.f32	s15, s12, s12
 80151f0:	eeb1 6ae6 	vsqrt.f32	s12, s13
 80151f4:	eef1 6ac7 	vsqrt.f32	s13, s14
 80151f8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80151fc:	ee07 3a90 	vmov	s15, r3
 8015200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015204:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015208:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 801520c:	b21b      	sxth	r3, r3
 801520e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8015212:	ee07 2a90 	vmov	s15, r2
 8015216:	ed90 4a00 	vldr	s8, [r0]
 801521a:	edd1 4a00 	vldr	s9, [r1]
 801521e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8015222:	edd7 7a00 	vldr	s15, [r7]
 8015226:	eee5 6a84 	vfma.f32	s13, s11, s8
 801522a:	eea7 6aa5 	vfma.f32	s12, s15, s11
 801522e:	eea5 7aa4 	vfma.f32	s14, s11, s9
 8015232:	ee66 7a05 	vmul.f32	s15, s12, s10
 8015236:	ee66 6a85 	vmul.f32	s13, s13, s10
 801523a:	ee27 7a05 	vmul.f32	s14, s14, s10
 801523e:	edc7 7a00 	vstr	s15, [r7]
 8015242:	edc0 6a00 	vstr	s13, [r0]
 8015246:	ed81 7a00 	vstr	s14, [r1]
 801524a:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 801524e:	f47f abde 	bne.w	8014a0e <iNemoEngine_API_Update+0x56>
 8015252:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015256:	ee66 6a86 	vmul.f32	s13, s13, s12
 801525a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801525e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015262:	2300      	movs	r3, #0
 8015264:	2200      	movs	r2, #0
 8015266:	edc4 6a07 	vstr	s13, [r4, #28]
 801526a:	ed84 7a08 	vstr	s14, [r4, #32]
 801526e:	edc4 7a06 	vstr	s15, [r4, #24]
 8015272:	603b      	str	r3, [r7, #0]
 8015274:	6003      	str	r3, [r0, #0]
 8015276:	600b      	str	r3, [r1, #0]
 8015278:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 801527c:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8015280:	f7ff bbc5 	b.w	8014a0e <iNemoEngine_API_Update+0x56>
 8015284:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80152b8 <iNemoEngine_API_Update+0x900>
 8015288:	e4da      	b.n	8014c40 <iNemoEngine_API_Update+0x288>
 801528a:	bf00      	nop
 801528c:	f3af 8000 	nop.w
 8015290:	20000000 	.word	0x20000000
 8015294:	404ca5dc 	.word	0x404ca5dc
 8015298:	40568000 	.word	0x40568000
 801529c:	3dcccccd 	.word	0x3dcccccd
 80152a0:	3a83126f 	.word	0x3a83126f
 80152a4:	358637bd 	.word	0x358637bd
 80152a8:	3f333333 	.word	0x3f333333
 80152ac:	3727c5ac 	.word	0x3727c5ac
 80152b0:	3ac49ba6 	.word	0x3ac49ba6
 80152b4:	3e4ccccd 	.word	0x3e4ccccd
 80152b8:	00000000 	.word	0x00000000

080152bc <MEMS_getSensorData_I16>:
 80152bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152c0:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 80152c4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80152c8:	68c5      	ldr	r5, [r0, #12]
 80152ca:	4596      	cmp	lr, r2
 80152cc:	fa1f f882 	uxth.w	r8, r2
 80152d0:	d94d      	bls.n	801536e <MEMS_getSensorData_I16+0xb2>
 80152d2:	f10e 33ff 	add.w	r3, lr, #4294967295
 80152d6:	fb04 5313 	mls	r3, r4, r3, r5
 80152da:	ebae 0c02 	sub.w	ip, lr, r2
 80152de:	f8a1 8004 	strh.w	r8, [r1, #4]
 80152e2:	600b      	str	r3, [r1, #0]
 80152e4:	fa5f fc8c 	uxtb.w	ip, ip
 80152e8:	4647      	mov	r7, r8
 80152ea:	f1b8 0f00 	cmp.w	r8, #0
 80152ee:	d017      	beq.n	8015320 <MEMS_getSensorData_I16+0x64>
 80152f0:	688e      	ldr	r6, [r1, #8]
 80152f2:	6905      	ldr	r5, [r0, #16]
 80152f4:	2300      	movs	r3, #0
 80152f6:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 80152fa:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 80152fe:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8015302:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8015306:	f8d4 9002 	ldr.w	r9, [r4, #2]
 801530a:	f8c1 9002 	str.w	r9, [r1, #2]
 801530e:	3301      	adds	r3, #1
 8015310:	88e4      	ldrh	r4, [r4, #6]
 8015312:	80cc      	strh	r4, [r1, #6]
 8015314:	b2d9      	uxtb	r1, r3
 8015316:	42b9      	cmp	r1, r7
 8015318:	460b      	mov	r3, r1
 801531a:	d3ec      	bcc.n	80152f6 <MEMS_getSensorData_I16+0x3a>
 801531c:	45c6      	cmp	lr, r8
 801531e:	d934      	bls.n	801538a <MEMS_getSensorData_I16+0xce>
 8015320:	ebae 0308 	sub.w	r3, lr, r8
 8015324:	b29b      	uxth	r3, r3
 8015326:	8103      	strh	r3, [r0, #8]
 8015328:	f1bc 0f00 	cmp.w	ip, #0
 801532c:	d01d      	beq.n	801536a <MEMS_getSensorData_I16+0xae>
 801532e:	6903      	ldr	r3, [r0, #16]
 8015330:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015334:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8015338:	f103 000a 	add.w	r0, r3, #10
 801533c:	fa5f fc8c 	uxtb.w	ip, ip
 8015340:	3202      	adds	r2, #2
 8015342:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 8015346:	3302      	adds	r3, #2
 8015348:	2400      	movs	r4, #0
 801534a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801534e:	f803 1c02 	strb.w	r1, [r3, #-2]
 8015352:	6811      	ldr	r1, [r2, #0]
 8015354:	6019      	str	r1, [r3, #0]
 8015356:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801535a:	8099      	strh	r1, [r3, #4]
 801535c:	3308      	adds	r3, #8
 801535e:	4283      	cmp	r3, r0
 8015360:	f802 4c02 	strb.w	r4, [r2, #-2]
 8015364:	f102 0208 	add.w	r2, r2, #8
 8015368:	d1ef      	bne.n	801534a <MEMS_getSensorData_I16+0x8e>
 801536a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801536e:	f10e 33ff 	add.w	r3, lr, #4294967295
 8015372:	fb04 5313 	mls	r3, r4, r3, r5
 8015376:	f8a1 e004 	strh.w	lr, [r1, #4]
 801537a:	600b      	str	r3, [r1, #0]
 801537c:	f1be 0f00 	cmp.w	lr, #0
 8015380:	d005      	beq.n	801538e <MEMS_getSensorData_I16+0xd2>
 8015382:	4677      	mov	r7, lr
 8015384:	f04f 0c00 	mov.w	ip, #0
 8015388:	e7b2      	b.n	80152f0 <MEMS_getSensorData_I16+0x34>
 801538a:	2300      	movs	r3, #0
 801538c:	e7cb      	b.n	8015326 <MEMS_getSensorData_I16+0x6a>
 801538e:	f8a0 e008 	strh.w	lr, [r0, #8]
 8015392:	e7ea      	b.n	801536a <MEMS_getSensorData_I16+0xae>

08015394 <MEMS_SolveLinearEq>:
 8015394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015398:	ed2d 8b0c 	vpush	{d8-d13}
 801539c:	4617      	mov	r7, r2
 801539e:	2400      	movs	r4, #0
 80153a0:	b0a9      	sub	sp, #164	; 0xa4
 80153a2:	2200      	movs	r2, #0
 80153a4:	601a      	str	r2, [r3, #0]
 80153a6:	460d      	mov	r5, r1
 80153a8:	2240      	movs	r2, #64	; 0x40
 80153aa:	4621      	mov	r1, r4
 80153ac:	4680      	mov	r8, r0
 80153ae:	603c      	str	r4, [r7, #0]
 80153b0:	607c      	str	r4, [r7, #4]
 80153b2:	60bc      	str	r4, [r7, #8]
 80153b4:	60fc      	str	r4, [r7, #12]
 80153b6:	a808      	add	r0, sp, #32
 80153b8:	461e      	mov	r6, r3
 80153ba:	eeb0 8a40 	vmov.f32	s16, s0
 80153be:	e9cd 4400 	strd	r4, r4, [sp]
 80153c2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80153c6:	f004 ff9f 	bl	801a308 <memset>
 80153ca:	4621      	mov	r1, r4
 80153cc:	a818      	add	r0, sp, #96	; 0x60
 80153ce:	2240      	movs	r2, #64	; 0x40
 80153d0:	f004 ff9a 	bl	801a308 <memset>
 80153d4:	edd5 2a03 	vldr	s5, [r5, #12]
 80153d8:	eddf 7ae4 	vldr	s15, [pc, #912]	; 801576c <MEMS_SolveLinearEq+0x3d8>
 80153dc:	eef4 2ae7 	vcmpe.f32	s5, s15
 80153e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153e4:	d47e      	bmi.n	80154e4 <MEMS_SolveLinearEq+0x150>
 80153e6:	f898 1000 	ldrb.w	r1, [r8]
 80153ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 80153ee:	f998 3002 	ldrsb.w	r3, [r8, #2]
 80153f2:	4291      	cmp	r1, r2
 80153f4:	d07c      	beq.n	80154f0 <MEMS_SolveLinearEq+0x15c>
 80153f6:	3301      	adds	r3, #1
 80153f8:	1a58      	subs	r0, r3, r1
 80153fa:	fb90 f3f2 	sdiv	r3, r0, r2
 80153fe:	fb02 0313 	mls	r3, r2, r3, r0
 8015402:	2b00      	cmp	r3, #0
 8015404:	bfb8      	it	lt
 8015406:	189b      	addlt	r3, r3, r2
 8015408:	b21b      	sxth	r3, r3
 801540a:	2900      	cmp	r1, #0
 801540c:	f000 81d6 	beq.w	80157bc <MEMS_SolveLinearEq+0x428>
 8015410:	3901      	subs	r1, #1
 8015412:	b2c9      	uxtb	r1, r1
 8015414:	3101      	adds	r1, #1
 8015416:	edd5 3a00 	vldr	s7, [r5]
 801541a:	ed95 4a01 	vldr	s8, [r5, #4]
 801541e:	edd5 4a02 	vldr	s9, [r5, #8]
 8015422:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8015426:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 8015770 <MEMS_SolveLinearEq+0x3dc>
 801542a:	4419      	add	r1, r3
 801542c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8015430:	fb93 f4f2 	sdiv	r4, r3, r2
 8015434:	fb02 3414 	mls	r4, r2, r4, r3
 8015438:	b2e4      	uxtb	r4, r4
 801543a:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 801543e:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 8015442:	ee07 0a90 	vmov	s15, r0
 8015446:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801544a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801544e:	ee06 0a10 	vmov	s12, r0
 8015452:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015456:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 801545a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801545e:	ee77 6ac4 	vsub.f32	s13, s15, s8
 8015462:	ee26 6a08 	vmul.f32	s12, s12, s16
 8015466:	ee07 0a10 	vmov	s14, r0
 801546a:	ee36 5a63 	vsub.f32	s10, s12, s7
 801546e:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8015472:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015476:	eee5 6a05 	vfma.f32	s13, s10, s10
 801547a:	ee27 7a08 	vmul.f32	s14, s14, s16
 801547e:	ee33 6ac6 	vsub.f32	s12, s7, s12
 8015482:	ee74 aac7 	vsub.f32	s21, s9, s14
 8015486:	ee37 7a64 	vsub.f32	s14, s14, s9
 801548a:	ee74 7a67 	vsub.f32	s15, s8, s15
 801548e:	eee7 6a07 	vfma.f32	s13, s14, s14
 8015492:	eef4 6ac2 	vcmpe.f32	s13, s4
 8015496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801549a:	d531      	bpl.n	8015500 <MEMS_SolveLinearEq+0x16c>
 801549c:	3301      	adds	r3, #1
 801549e:	4299      	cmp	r1, r3
 80154a0:	d1c6      	bne.n	8015430 <MEMS_SolveLinearEq+0x9c>
 80154a2:	eef0 7a65 	vmov.f32	s15, s11
 80154a6:	2101      	movs	r1, #1
 80154a8:	4608      	mov	r0, r1
 80154aa:	2200      	movs	r2, #0
 80154ac:	e006      	b.n	80154bc <MEMS_SolveLinearEq+0x128>
 80154ae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80154b2:	ac28      	add	r4, sp, #160	; 0xa0
 80154b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80154b8:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 80154bc:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 80154c0:	3001      	adds	r0, #1
 80154c2:	ac28      	add	r4, sp, #160	; 0xa0
 80154c4:	b2c0      	uxtb	r0, r0
 80154c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80154ca:	2804      	cmp	r0, #4
 80154cc:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 80154d0:	4613      	mov	r3, r2
 80154d2:	d1ec      	bne.n	80154ae <MEMS_SolveLinearEq+0x11a>
 80154d4:	1c48      	adds	r0, r1, #1
 80154d6:	b2c0      	uxtb	r0, r0
 80154d8:	2804      	cmp	r0, #4
 80154da:	d076      	beq.n	80155ca <MEMS_SolveLinearEq+0x236>
 80154dc:	460b      	mov	r3, r1
 80154de:	460a      	mov	r2, r1
 80154e0:	4601      	mov	r1, r0
 80154e2:	e7e4      	b.n	80154ae <MEMS_SolveLinearEq+0x11a>
 80154e4:	2000      	movs	r0, #0
 80154e6:	b029      	add	sp, #164	; 0xa4
 80154e8:	ecbd 8b0c 	vpop	{d8-d13}
 80154ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154f0:	1c5a      	adds	r2, r3, #1
 80154f2:	fb92 f3f1 	sdiv	r3, r2, r1
 80154f6:	fb01 2313 	mls	r3, r1, r3, r2
 80154fa:	b21b      	sxth	r3, r3
 80154fc:	460a      	mov	r2, r1
 80154fe:	e784      	b.n	801540a <MEMS_SolveLinearEq+0x76>
 8015500:	eef1 cae6 	vsqrt.f32	s25, s13
 8015504:	3301      	adds	r3, #1
 8015506:	428b      	cmp	r3, r1
 8015508:	ed9d ca00 	vldr	s24, [sp]
 801550c:	eddd ba08 	vldr	s23, [sp, #32]
 8015510:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
 8015514:	ed9d aa01 	vldr	s20, [sp, #4]
 8015518:	eddd 9a02 	vldr	s19, [sp, #8]
 801551c:	ed9d 9a0d 	vldr	s18, [sp, #52]	; 0x34
 8015520:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 8015524:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
 8015528:	ed9d 0a03 	vldr	s0, [sp, #12]
 801552c:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 8015530:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 8015534:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
 8015538:	ed9d da17 	vldr	s26, [sp, #92]	; 0x5c
 801553c:	eec1 6aac 	vdiv.f32	s13, s3, s25
 8015540:	ee3d da21 	vadd.f32	s26, s26, s3
 8015544:	ee26 7a26 	vmul.f32	s14, s12, s13
 8015548:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801554c:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 8015550:	ee72 aaec 	vsub.f32	s21, s5, s25
 8015554:	eee7 5a27 	vfma.f32	s11, s14, s15
 8015558:	eea7 ba26 	vfma.f32	s22, s14, s13
 801555c:	eee7 8aa6 	vfma.f32	s17, s15, s13
 8015560:	eeaa ca87 	vfma.f32	s24, s21, s14
 8015564:	eee7 ba07 	vfma.f32	s23, s14, s14
 8015568:	eeaa aaa7 	vfma.f32	s20, s21, s15
 801556c:	eeea 9aa6 	vfma.f32	s19, s21, s13
 8015570:	eea7 9aa7 	vfma.f32	s18, s15, s15
 8015574:	eea6 3aa6 	vfma.f32	s6, s13, s13
 8015578:	ee3c 6ae2 	vsub.f32	s12, s25, s5
 801557c:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8015580:	ee30 6a06 	vadd.f32	s12, s0, s12
 8015584:	ee71 7a67 	vsub.f32	s15, s2, s15
 8015588:	ee75 6a66 	vsub.f32	s13, s10, s13
 801558c:	ed8d da17 	vstr	s26, [sp, #92]	; 0x5c
 8015590:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8015594:	ed8d ca00 	vstr	s24, [sp]
 8015598:	edcd ba08 	vstr	s23, [sp, #32]
 801559c:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
 80155a0:	ed8d aa01 	vstr	s20, [sp, #4]
 80155a4:	edcd 9a02 	vstr	s19, [sp, #8]
 80155a8:	ed8d 9a0d 	vstr	s18, [sp, #52]	; 0x34
 80155ac:	edcd 8a0e 	vstr	s17, [sp, #56]	; 0x38
 80155b0:	ed8d 6a03 	vstr	s12, [sp, #12]
 80155b4:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 80155b8:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 80155bc:	ed8d 3a12 	vstr	s6, [sp, #72]	; 0x48
 80155c0:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 80155c4:	f47f af34 	bne.w	8015430 <MEMS_SolveLinearEq+0x9c>
 80155c8:	e76b      	b.n	80154a2 <MEMS_SolveLinearEq+0x10e>
 80155ca:	2240      	movs	r2, #64	; 0x40
 80155cc:	2100      	movs	r1, #0
 80155ce:	a818      	add	r0, sp, #96	; 0x60
 80155d0:	f004 fe9a 	bl	801a308 <memset>
 80155d4:	ab08      	add	r3, sp, #32
 80155d6:	ed9f 5a67 	vldr	s10, [pc, #412]	; 8015774 <MEMS_SolveLinearEq+0x3e0>
 80155da:	4618      	mov	r0, r3
 80155dc:	aa18      	add	r2, sp, #96	; 0x60
 80155de:	2100      	movs	r1, #0
 80155e0:	b24c      	sxtb	r4, r1
 80155e2:	2900      	cmp	r1, #0
 80155e4:	f000 80b5 	beq.w	8015752 <MEMS_SolveLinearEq+0x3be>
 80155e8:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 80155ec:	eeb0 7ae7 	vabs.f32	s14, s15
 80155f0:	eeb4 7ac5 	vcmpe.f32	s14, s10
 80155f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155f8:	f53f af74 	bmi.w	80154e4 <MEMS_SolveLinearEq+0x150>
 80155fc:	ed93 7a00 	vldr	s14, [r3]
 8015600:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015604:	2c01      	cmp	r4, #1
 8015606:	edc2 6a00 	vstr	s13, [r2]
 801560a:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 801560e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015612:	f000 80b5 	beq.w	8015780 <MEMS_SolveLinearEq+0x3ec>
 8015616:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 801561a:	eeb0 7ac6 	vabs.f32	s14, s12
 801561e:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8015622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015626:	f53f af5d 	bmi.w	80154e4 <MEMS_SolveLinearEq+0x150>
 801562a:	ed93 7a01 	vldr	s14, [r3, #4]
 801562e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015632:	2c02      	cmp	r4, #2
 8015634:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8015638:	edc2 7a01 	vstr	s15, [r2, #4]
 801563c:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8015640:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 8015644:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015648:	eea6 7a26 	vfma.f32	s14, s12, s13
 801564c:	f000 80a7 	beq.w	801579e <MEMS_SolveLinearEq+0x40a>
 8015650:	eddd 4a22 	vldr	s9, [sp, #136]	; 0x88
 8015654:	eeb0 6ae4 	vabs.f32	s12, s9
 8015658:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801565c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015660:	f53f af40 	bmi.w	80154e4 <MEMS_SolveLinearEq+0x150>
 8015664:	edd3 5a02 	vldr	s11, [r3, #8]
 8015668:	ed90 6a00 	vldr	s12, [r0]
 801566c:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8015670:	eec7 5a24 	vdiv.f32	s11, s14, s9
 8015674:	edc2 5a02 	vstr	s11, [r2, #8]
 8015678:	ed9d 4a25 	vldr	s8, [sp, #148]	; 0x94
 801567c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8015680:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8015684:	ee67 7a84 	vmul.f32	s15, s15, s8
 8015688:	eee4 7aa6 	vfma.f32	s15, s9, s13
 801568c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8015690:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8015694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015698:	f77f af24 	ble.w	80154e4 <MEMS_SolveLinearEq+0x150>
 801569c:	ee76 7a67 	vsub.f32	s15, s12, s15
 80156a0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80156a4:	ed82 7a03 	vstr	s14, [r2, #12]
 80156a8:	3101      	adds	r1, #1
 80156aa:	2904      	cmp	r1, #4
 80156ac:	f103 0310 	add.w	r3, r3, #16
 80156b0:	f102 0210 	add.w	r2, r2, #16
 80156b4:	f100 0014 	add.w	r0, r0, #20
 80156b8:	d192      	bne.n	80155e0 <MEMS_SolveLinearEq+0x24c>
 80156ba:	466a      	mov	r2, sp
 80156bc:	4639      	mov	r1, r7
 80156be:	a818      	add	r0, sp, #96	; 0x60
 80156c0:	f7f9 f9f2 	bl	800eaa8 <llEvaluate.constprop.0>
 80156c4:	4b2c      	ldr	r3, [pc, #176]	; (8015778 <MEMS_SolveLinearEq+0x3e4>)
 80156c6:	6033      	str	r3, [r6, #0]
 80156c8:	f10d 0910 	add.w	r9, sp, #16
 80156cc:	46e8      	mov	r8, sp
 80156ce:	f10d 0b0c 	add.w	fp, sp, #12
 80156d2:	2400      	movs	r4, #0
 80156d4:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 80156d8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80156dc:	e9cd 4400 	strd	r4, r4, [sp]
 80156e0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80156e4:	466a      	mov	r2, sp
 80156e6:	f848 ab04 	str.w	sl, [r8], #4
 80156ea:	a904      	add	r1, sp, #16
 80156ec:	a818      	add	r0, sp, #96	; 0x60
 80156ee:	f7f9 f9db 	bl	800eaa8 <llEvaluate.constprop.0>
 80156f2:	ecf9 7a01 	vldmia	r9!, {s15}
 80156f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80156fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156fe:	dd23      	ble.n	8015748 <MEMS_SolveLinearEq+0x3b4>
 8015700:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8015704:	edd6 7a00 	vldr	s15, [r6]
 8015708:	eef4 7ac7 	vcmpe.f32	s15, s14
 801570c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015710:	bfb8      	it	lt
 8015712:	eef0 7a47 	vmovlt.f32	s15, s14
 8015716:	45c3      	cmp	fp, r8
 8015718:	edc6 7a00 	vstr	s15, [r6]
 801571c:	d1de      	bne.n	80156dc <MEMS_SolveLinearEq+0x348>
 801571e:	edd5 7a03 	vldr	s15, [r5, #12]
 8015722:	ed97 7a03 	vldr	s14, [r7, #12]
 8015726:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 801572a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801572e:	2001      	movs	r0, #1
 8015730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015738:	bf48      	it	mi
 801573a:	edc7 7a03 	vstrmi	s15, [r7, #12]
 801573e:	b029      	add	sp, #164	; 0xa4
 8015740:	ecbd 8b0c 	vpop	{d8-d13}
 8015744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015748:	45c3      	cmp	fp, r8
 801574a:	ed86 0a00 	vstr	s0, [r6]
 801574e:	d1c5      	bne.n	80156dc <MEMS_SolveLinearEq+0x348>
 8015750:	e7e5      	b.n	801571e <MEMS_SolveLinearEq+0x38a>
 8015752:	edd0 7a00 	vldr	s15, [r0]
 8015756:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801575a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801575e:	f77f aec1 	ble.w	80154e4 <MEMS_SolveLinearEq+0x150>
 8015762:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8015766:	ed82 7a00 	vstr	s14, [r2]
 801576a:	e79d      	b.n	80156a8 <MEMS_SolveLinearEq+0x314>
 801576c:	3dcccccd 	.word	0x3dcccccd
 8015770:	2b8cbccb 	.word	0x2b8cbccb
 8015774:	358637bd 	.word	0x358637bd
 8015778:	3dcccccd 	.word	0x3dcccccd
 801577c:	00000000 	.word	0x00000000
 8015780:	ed90 7a00 	vldr	s14, [r0]
 8015784:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801578c:	f77f aeaa 	ble.w	80154e4 <MEMS_SolveLinearEq+0x150>
 8015790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015794:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8015798:	ed82 7a01 	vstr	s14, [r2, #4]
 801579c:	e784      	b.n	80156a8 <MEMS_SolveLinearEq+0x314>
 801579e:	edd0 7a00 	vldr	s15, [r0]
 80157a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80157a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157aa:	f77f ae9b 	ble.w	80154e4 <MEMS_SolveLinearEq+0x150>
 80157ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80157b2:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80157b6:	ed82 7a02 	vstr	s14, [r2, #8]
 80157ba:	e775      	b.n	80156a8 <MEMS_SolveLinearEq+0x314>
 80157bc:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 801577c <MEMS_SolveLinearEq+0x3e8>
 80157c0:	e671      	b.n	80154a6 <MEMS_SolveLinearEq+0x112>
 80157c2:	bf00      	nop

080157c4 <MEMS_EIG3>:
 80157c4:	edd0 6a02 	vldr	s13, [r0, #8]
 80157c8:	ed90 7a01 	vldr	s14, [r0, #4]
 80157cc:	edd0 4a04 	vldr	s9, [r0, #16]
 80157d0:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8015920 <MEMS_EIG3+0x15c>
 80157d4:	ee66 7aa6 	vmul.f32	s15, s13, s13
 80157d8:	b510      	push	{r4, lr}
 80157da:	eee7 7a07 	vfma.f32	s15, s14, s14
 80157de:	460c      	mov	r4, r1
 80157e0:	ed2d 8b04 	vpush	{d8-d9}
 80157e4:	eee4 7aa4 	vfma.f32	s15, s9, s9
 80157e8:	b08a      	sub	sp, #40	; 0x28
 80157ea:	eef4 7ac6 	vcmpe.f32	s15, s12
 80157ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157f2:	d509      	bpl.n	8015808 <MEMS_EIG3+0x44>
 80157f4:	6803      	ldr	r3, [r0, #0]
 80157f6:	600b      	str	r3, [r1, #0]
 80157f8:	68c3      	ldr	r3, [r0, #12]
 80157fa:	604b      	str	r3, [r1, #4]
 80157fc:	6943      	ldr	r3, [r0, #20]
 80157fe:	608b      	str	r3, [r1, #8]
 8015800:	b00a      	add	sp, #40	; 0x28
 8015802:	ecbd 8b04 	vpop	{d8-d9}
 8015806:	bd10      	pop	{r4, pc}
 8015808:	ed90 4a00 	vldr	s8, [r0]
 801580c:	edd0 5a03 	vldr	s11, [r0, #12]
 8015810:	edd0 2a05 	vldr	s5, [r0, #20]
 8015814:	eddf 9a43 	vldr	s19, [pc, #268]	; 8015924 <MEMS_EIG3+0x160>
 8015818:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8015928 <MEMS_EIG3+0x164>
 801581c:	ee34 8a25 	vadd.f32	s16, s8, s11
 8015820:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 8015824:	ee38 8a22 	vadd.f32	s16, s16, s5
 8015828:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801582c:	ee28 8a29 	vmul.f32	s16, s16, s19
 8015830:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 8015834:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8015838:	ee34 4a48 	vsub.f32	s8, s8, s16
 801583c:	ee25 5aa5 	vmul.f32	s10, s11, s11
 8015840:	ee72 2ac8 	vsub.f32	s5, s5, s16
 8015844:	eea4 5a04 	vfma.f32	s10, s8, s8
 8015848:	eea7 5aa3 	vfma.f32	s10, s15, s7
 801584c:	eef0 7a45 	vmov.f32	s15, s10
 8015850:	eee2 7aa2 	vfma.f32	s15, s5, s5
 8015854:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015858:	eef1 8ae7 	vsqrt.f32	s17, s15
 801585c:	ee80 6a28 	vdiv.f32	s12, s0, s17
 8015860:	ee82 5aa8 	vdiv.f32	s10, s5, s17
 8015864:	eec4 2a28 	vdiv.f32	s5, s8, s17
 8015868:	ee66 6a26 	vmul.f32	s13, s12, s13
 801586c:	ee65 5a86 	vmul.f32	s11, s11, s12
 8015870:	ee26 7a07 	vmul.f32	s14, s12, s14
 8015874:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 8015878:	ee26 6a24 	vmul.f32	s12, s12, s9
 801587c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015880:	ee66 4a46 	vnmul.f32	s9, s12, s12
 8015884:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015888:	eee5 4a85 	vfma.f32	s9, s11, s10
 801588c:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8015890:	eee4 7aa2 	vfma.f32	s15, s9, s5
 8015894:	eea6 5a26 	vfma.f32	s10, s12, s13
 8015898:	eee5 7a07 	vfma.f32	s15, s10, s14
 801589c:	eef4 7ac3 	vcmpe.f32	s15, s6
 80158a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158a4:	d909      	bls.n	80158ba <MEMS_EIG3+0xf6>
 80158a6:	eef4 7ae3 	vcmpe.f32	s15, s7
 80158aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158ae:	db22      	blt.n	80158f6 <MEMS_EIG3+0x132>
 80158b0:	eeb0 9a40 	vmov.f32	s18, s0
 80158b4:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 801592c <MEMS_EIG3+0x168>
 80158b8:	e003      	b.n	80158c2 <MEMS_EIG3+0xfe>
 80158ba:	ed9f 9a1d 	vldr	s18, [pc, #116]	; 8015930 <MEMS_EIG3+0x16c>
 80158be:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80158c2:	ee78 8aa8 	vadd.f32	s17, s17, s17
 80158c6:	eef0 7a48 	vmov.f32	s15, s16
 80158ca:	eeb0 7a48 	vmov.f32	s14, s16
 80158ce:	eee8 7a89 	vfma.f32	s15, s17, s18
 80158d2:	eea8 7a80 	vfma.f32	s14, s17, s0
 80158d6:	edc4 7a00 	vstr	s15, [r4]
 80158da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80158de:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80158e2:	eed8 7a26 	vfnms.f32	s15, s16, s13
 80158e6:	ed84 7a02 	vstr	s14, [r4, #8]
 80158ea:	edc4 7a01 	vstr	s15, [r4, #4]
 80158ee:	b00a      	add	sp, #40	; 0x28
 80158f0:	ecbd 8b04 	vpop	{d8-d9}
 80158f4:	bd10      	pop	{r4, pc}
 80158f6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80158fa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80158fe:	f002 ffd1 	bl	80188a4 <acosf>
 8015902:	ee60 9a29 	vmul.f32	s19, s0, s19
 8015906:	eeb0 0a69 	vmov.f32	s0, s19
 801590a:	f002 fec5 	bl	8018698 <cosf>
 801590e:	eeb0 9a40 	vmov.f32	s18, s0
 8015912:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8015934 <MEMS_EIG3+0x170>
 8015916:	ee39 0a80 	vadd.f32	s0, s19, s0
 801591a:	f002 febd 	bl	8018698 <cosf>
 801591e:	e7d0      	b.n	80158c2 <MEMS_EIG3+0xfe>
 8015920:	358637bd 	.word	0x358637bd
 8015924:	3eaaaaab 	.word	0x3eaaaaab
 8015928:	3e2aaaab 	.word	0x3e2aaaab
 801592c:	bf000001 	.word	0xbf000001
 8015930:	3effffff 	.word	0x3effffff
 8015934:	40060a92 	.word	0x40060a92

08015938 <MEMS_runMagCal>:
 8015938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801593c:	ed2d 8b0a 	vpush	{d8-d12}
 8015940:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8015944:	2282      	movs	r2, #130	; 0x82
 8015946:	ab36      	add	r3, sp, #216	; 0xd8
 8015948:	460c      	mov	r4, r1
 801594a:	9105      	str	r1, [sp, #20]
 801594c:	4683      	mov	fp, r0
 801594e:	4608      	mov	r0, r1
 8015950:	a917      	add	r1, sp, #92	; 0x5c
 8015952:	9319      	str	r3, [sp, #100]	; 0x64
 8015954:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8015958:	f7ff fcb0 	bl	80152bc <MEMS_getSensorData_I16>
 801595c:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 8015960:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8015964:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015966:	9209      	str	r2, [sp, #36]	; 0x24
 8015968:	f108 31ff 	add.w	r1, r8, #4294967295
 801596c:	9106      	str	r1, [sp, #24]
 801596e:	fb01 2103 	mla	r1, r1, r3, r2
 8015972:	9108      	str	r1, [sp, #32]
 8015974:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
 8015978:	f1b8 0f00 	cmp.w	r8, #0
 801597c:	f000 8417 	beq.w	80161ae <MEMS_runMagCal+0x876>
 8015980:	f8db 3008 	ldr.w	r3, [fp, #8]
 8015984:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015988:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 801598c:	fb02 f203 	mul.w	r2, r2, r3
 8015990:	31a0      	adds	r1, #160	; 0xa0
 8015992:	4291      	cmp	r1, r2
 8015994:	f080 8411 	bcs.w	80161ba <MEMS_runMagCal+0x882>
 8015998:	3b00      	subs	r3, #0
 801599a:	bf18      	it	ne
 801599c:	2301      	movne	r3, #1
 801599e:	e9cb 3301 	strd	r3, r3, [fp, #4]
 80159a2:	2200      	movs	r2, #0
 80159a4:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 80159a8:	f8cb 200c 	str.w	r2, [fp, #12]
 80159ac:	2300      	movs	r3, #0
 80159ae:	e9cb 3325 	strd	r3, r3, [fp, #148]	; 0x94
 80159b2:	e9cb 3327 	strd	r3, r3, [fp, #156]	; 0x9c
 80159b6:	e9cb 3329 	strd	r3, r3, [fp, #164]	; 0xa4
 80159ba:	22ff      	movs	r2, #255	; 0xff
 80159bc:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 80159c0:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80159c4:	4cd5      	ldr	r4, [pc, #852]	; (8015d1c <MEMS_runMagCal+0x3e4>)
 80159c6:	eddf 7ad8 	vldr	s15, [pc, #864]	; 8015d28 <MEMS_runMagCal+0x3f0>
 80159ca:	9b05      	ldr	r3, [sp, #20]
 80159cc:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 80159d0:	edd3 5a01 	vldr	s11, [r3, #4]
 80159d4:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 80159d8:	4652      	mov	r2, sl
 80159da:	2a03      	cmp	r2, #3
 80159dc:	f647 75ff 	movw	r5, #32767	; 0x7fff
 80159e0:	bf28      	it	cs
 80159e2:	2203      	movcs	r2, #3
 80159e4:	2100      	movs	r1, #0
 80159e6:	9207      	str	r2, [sp, #28]
 80159e8:	eeb0 0a67 	vmov.f32	s0, s15
 80159ec:	464b      	mov	r3, r9
 80159ee:	9402      	str	r4, [sp, #8]
 80159f0:	4627      	mov	r7, r4
 80159f2:	9503      	str	r5, [sp, #12]
 80159f4:	462e      	mov	r6, r5
 80159f6:	460a      	mov	r2, r1
 80159f8:	9404      	str	r4, [sp, #16]
 80159fa:	7818      	ldrb	r0, [r3, #0]
 80159fc:	3201      	adds	r2, #1
 80159fe:	b292      	uxth	r2, r2
 8015a00:	2800      	cmp	r0, #0
 8015a02:	d04b      	beq.n	8015a9c <MEMS_runMagCal+0x164>
 8015a04:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8015a08:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8015a0c:	eddb 3a18 	vldr	s7, [fp, #96]	; 0x60
 8015a10:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8015a14:	ed9b 4a17 	vldr	s8, [fp, #92]	; 0x5c
 8015a18:	ed9b 5a1a 	vldr	s10, [fp, #104]	; 0x68
 8015a1c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8015a20:	9c02      	ldr	r4, [sp, #8]
 8015a22:	ed9b 6a19 	vldr	s12, [fp, #100]	; 0x64
 8015a26:	eddb 6a22 	vldr	s13, [fp, #136]	; 0x88
 8015a2a:	ee07 ea90 	vmov	s15, lr
 8015a2e:	ee07 ca10 	vmov	s14, ip
 8015a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015a3a:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8015a3e:	ee37 7a44 	vsub.f32	s14, s14, s8
 8015a42:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015a46:	ee27 7a05 	vmul.f32	s14, s14, s10
 8015a4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015a4e:	4574      	cmp	r4, lr
 8015a50:	eee7 7a07 	vfma.f32	s15, s14, s14
 8015a54:	bfb8      	it	lt
 8015a56:	4674      	movlt	r4, lr
 8015a58:	9402      	str	r4, [sp, #8]
 8015a5a:	ee07 0a10 	vmov	s14, r0
 8015a5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015a62:	9c03      	ldr	r4, [sp, #12]
 8015a64:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015a68:	ee77 7a46 	vsub.f32	s15, s14, s12
 8015a6c:	4574      	cmp	r4, lr
 8015a6e:	bfa8      	it	ge
 8015a70:	4674      	movge	r4, lr
 8015a72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015a76:	4567      	cmp	r7, ip
 8015a78:	9403      	str	r4, [sp, #12]
 8015a7a:	9c04      	ldr	r4, [sp, #16]
 8015a7c:	bfb8      	it	lt
 8015a7e:	4667      	movlt	r7, ip
 8015a80:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8015a84:	4566      	cmp	r6, ip
 8015a86:	bfa8      	it	ge
 8015a88:	4666      	movge	r6, ip
 8015a8a:	4284      	cmp	r4, r0
 8015a8c:	bfb8      	it	lt
 8015a8e:	4604      	movlt	r4, r0
 8015a90:	3101      	adds	r1, #1
 8015a92:	4285      	cmp	r5, r0
 8015a94:	b249      	sxtb	r1, r1
 8015a96:	9404      	str	r4, [sp, #16]
 8015a98:	bfa8      	it	ge
 8015a9a:	4605      	movge	r5, r0
 8015a9c:	9807      	ldr	r0, [sp, #28]
 8015a9e:	4282      	cmp	r2, r0
 8015aa0:	f103 0308 	add.w	r3, r3, #8
 8015aa4:	d9a9      	bls.n	80159fa <MEMS_runMagCal+0xc2>
 8015aa6:	4590      	cmp	r8, r2
 8015aa8:	9c04      	ldr	r4, [sp, #16]
 8015aaa:	f240 8767 	bls.w	801697c <MEMS_runMagCal+0x1044>
 8015aae:	ebaa 0a02 	sub.w	sl, sl, r2
 8015ab2:	fa12 fa8a 	uxtah	sl, r2, sl
 8015ab6:	f109 0308 	add.w	r3, r9, #8
 8015aba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015abe:	9307      	str	r3, [sp, #28]
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 8015ac6:	9304      	str	r3, [sp, #16]
 8015ac8:	7813      	ldrb	r3, [r2, #0]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	f000 8096 	beq.w	8015bfc <MEMS_runMagCal+0x2c4>
 8015ad0:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8015ad4:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8015ad8:	f932 ac16 	ldrsh.w	sl, [r2, #-22]
 8015adc:	f932 8c1e 	ldrsh.w	r8, [r2, #-30]
 8015ae0:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 8015ae4:	eddb 6a18 	vldr	s13, [fp, #96]	; 0x60
 8015ae8:	f932 9c1c 	ldrsh.w	r9, [r2, #-28]
 8015aec:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 8015af0:	eddb 3a17 	vldr	s7, [fp, #92]	; 0x5c
 8015af4:	ed9b 6a1a 	vldr	s12, [fp, #104]	; 0x68
 8015af8:	ed9b 3a1e 	vldr	s6, [fp, #120]	; 0x78
 8015afc:	ed9b 4a19 	vldr	s8, [fp, #100]	; 0x64
 8015b00:	eddb 4a22 	vldr	s9, [fp, #136]	; 0x88
 8015b04:	ebae 0808 	sub.w	r8, lr, r8
 8015b08:	eba0 000a 	sub.w	r0, r0, sl
 8015b0c:	ee07 ca10 	vmov	s14, ip
 8015b10:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8015b14:	ee07 0a90 	vmov	s15, r0
 8015b18:	f932 ac14 	ldrsh.w	sl, [r2, #-20]
 8015b1c:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8015b20:	f932 8c1a 	ldrsh.w	r8, [r2, #-26]
 8015b24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015b28:	eba3 030a 	sub.w	r3, r3, sl
 8015b2c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015b34:	ee06 ea90 	vmov	s13, lr
 8015b38:	ebac 0909 	sub.w	r9, ip, r9
 8015b3c:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8015b40:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 8015b44:	eef0 7ae7 	vabs.f32	s15, s15
 8015b48:	ee06 9a90 	vmov	s13, r9
 8015b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015b50:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b58:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8015b5c:	f932 9c12 	ldrsh.w	r9, [r2, #-18]
 8015b60:	eef0 6ae6 	vabs.f32	s13, s13
 8015b64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015b68:	eba0 0808 	sub.w	r8, r0, r8
 8015b6c:	ee06 0a90 	vmov	s13, r0
 8015b70:	eba3 0309 	sub.w	r3, r3, r9
 8015b74:	ee35 5a63 	vsub.f32	s10, s10, s7
 8015b78:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 8015b7c:	ee25 5a06 	vmul.f32	s10, s10, s12
 8015b80:	9b02      	ldr	r3, [sp, #8]
 8015b82:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8015b86:	4577      	cmp	r7, lr
 8015b88:	ee27 7a03 	vmul.f32	s14, s14, s6
 8015b8c:	ee06 8a90 	vmov	s13, r8
 8015b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015b94:	bfb8      	it	lt
 8015b96:	4677      	movlt	r7, lr
 8015b98:	4576      	cmp	r6, lr
 8015b9a:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015b9e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015ba2:	bfa8      	it	ge
 8015ba4:	4676      	movge	r6, lr
 8015ba6:	4563      	cmp	r3, ip
 8015ba8:	bfb8      	it	lt
 8015baa:	4663      	movlt	r3, ip
 8015bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015bb0:	eea5 7a05 	vfma.f32	s14, s10, s10
 8015bb4:	9302      	str	r3, [sp, #8]
 8015bb6:	9b03      	ldr	r3, [sp, #12]
 8015bb8:	eef0 6ae6 	vabs.f32	s13, s13
 8015bbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015bc0:	4563      	cmp	r3, ip
 8015bc2:	ee36 6a44 	vsub.f32	s12, s12, s8
 8015bc6:	bfa8      	it	ge
 8015bc8:	4663      	movge	r3, ip
 8015bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015bce:	4284      	cmp	r4, r0
 8015bd0:	ee37 0a00 	vadd.f32	s0, s14, s0
 8015bd4:	bfb8      	it	lt
 8015bd6:	4604      	movlt	r4, r0
 8015bd8:	ee26 7a24 	vmul.f32	s14, s12, s9
 8015bdc:	4285      	cmp	r5, r0
 8015bde:	bfa8      	it	ge
 8015be0:	4605      	movge	r5, r0
 8015be2:	9303      	str	r3, [sp, #12]
 8015be4:	ee17 0a90 	vmov	r0, s15
 8015be8:	9b04      	ldr	r3, [sp, #16]
 8015bea:	eea7 0a07 	vfma.f32	s0, s14, s14
 8015bee:	4283      	cmp	r3, r0
 8015bf0:	f101 0101 	add.w	r1, r1, #1
 8015bf4:	bf38      	it	cc
 8015bf6:	4603      	movcc	r3, r0
 8015bf8:	b249      	sxtb	r1, r1
 8015bfa:	9304      	str	r3, [sp, #16]
 8015bfc:	9b07      	ldr	r3, [sp, #28]
 8015bfe:	3208      	adds	r2, #8
 8015c00:	4293      	cmp	r3, r2
 8015c02:	f47f af61 	bne.w	8015ac8 <MEMS_runMagCal+0x190>
 8015c06:	2900      	cmp	r1, #0
 8015c08:	f000 86b6 	beq.w	8016978 <MEMS_runMagCal+0x1040>
 8015c0c:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8015c10:	f280 82df 	bge.w	80161d2 <MEMS_runMagCal+0x89a>
 8015c14:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 8015c18:	f2c0 82db 	blt.w	80161d2 <MEMS_runMagCal+0x89a>
 8015c1c:	9b02      	ldr	r3, [sp, #8]
 8015c1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015c22:	f280 82d6 	bge.w	80161d2 <MEMS_runMagCal+0x89a>
 8015c26:	9a03      	ldr	r2, [sp, #12]
 8015c28:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 8015c2c:	f2c0 82d1 	blt.w	80161d2 <MEMS_runMagCal+0x89a>
 8015c30:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8015c34:	f280 82cd 	bge.w	80161d2 <MEMS_runMagCal+0x89a>
 8015c38:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 8015c3c:	f2c0 82c9 	blt.w	80161d2 <MEMS_runMagCal+0x89a>
 8015c40:	ee07 1a90 	vmov	s15, r1
 8015c44:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015c48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015c4c:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8015c50:	1bbe      	subs	r6, r7, r6
 8015c52:	1a9f      	subs	r7, r3, r2
 8015c54:	42be      	cmp	r6, r7
 8015c56:	4633      	mov	r3, r6
 8015c58:	eba4 0405 	sub.w	r4, r4, r5
 8015c5c:	bfb8      	it	lt
 8015c5e:	463b      	movlt	r3, r7
 8015c60:	42a3      	cmp	r3, r4
 8015c62:	bfb8      	it	lt
 8015c64:	4623      	movlt	r3, r4
 8015c66:	eec7 6a25 	vdiv.f32	s13, s14, s11
 8015c6a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8015c6e:	ee07 3a10 	vmov	s14, r3
 8015c72:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8015d20 <MEMS_runMagCal+0x3e8>
 8015c76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015c7e:	ee25 0a80 	vmul.f32	s0, s11, s0
 8015c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c8a:	f100 82a2 	bmi.w	80161d2 <MEMS_runMagCal+0x89a>
 8015c8e:	eddd 7a04 	vldr	s15, [sp, #16]
 8015c92:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8015d24 <MEMS_runMagCal+0x3ec>
 8015c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015c9a:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8015c9e:	eef4 5ac6 	vcmpe.f32	s11, s12
 8015ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ca6:	f300 8294 	bgt.w	80161d2 <MEMS_runMagCal+0x89a>
 8015caa:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8015cae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015cb2:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cba:	f301 81f8 	bgt.w	80170ae <MEMS_runMagCal+0x1776>
 8015cbe:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8015cc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015cc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cce:	f340 8552 	ble.w	8016776 <MEMS_runMagCal+0xe3e>
 8015cd2:	ee07 6a90 	vmov	s15, r6
 8015cd6:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8015cda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015cde:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ce6:	f340 8546 	ble.w	8016776 <MEMS_runMagCal+0xe3e>
 8015cea:	ee07 7a90 	vmov	s15, r7
 8015cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015cf2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cfa:	f140 853c 	bpl.w	8016776 <MEMS_runMagCal+0xe3e>
 8015cfe:	ee07 4a90 	vmov	s15, r4
 8015d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d06:	2300      	movs	r3, #0
 8015d08:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d10:	9303      	str	r3, [sp, #12]
 8015d12:	bf48      	it	mi
 8015d14:	2301      	movmi	r3, #1
 8015d16:	9307      	str	r3, [sp, #28]
 8015d18:	f000 bd30 	b.w	801677c <MEMS_runMagCal+0xe44>
 8015d1c:	ffff8000 	.word	0xffff8000
 8015d20:	43020000 	.word	0x43020000
 8015d24:	447a0000 	.word	0x447a0000
 8015d28:	00000000 	.word	0x00000000
 8015d2c:	41f00001 	.word	0x41f00001
 8015d30:	400ccccd 	.word	0x400ccccd
 8015d34:	3dcccccd 	.word	0x3dcccccd
 8015d38:	423c0000 	.word	0x423c0000
 8015d3c:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8015d28 <MEMS_runMagCal+0x3f0>
 8015d40:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 8015d2c <MEMS_runMagCal+0x3f4>
 8015d44:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8015d48:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d50:	dc10      	bgt.n	8015d74 <MEMS_runMagCal+0x43c>
 8015d52:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8015d30 <MEMS_runMagCal+0x3f8>
 8015d56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d5e:	dc09      	bgt.n	8015d74 <MEMS_runMagCal+0x43c>
 8015d60:	ed94 9a03 	vldr	s18, [r4, #12]
 8015d64:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 8015d34 <MEMS_runMagCal+0x3fc>
 8015d68:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8015d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d70:	f201 8527 	bhi.w	80177c2 <MEMS_runMagCal+0x1e8a>
 8015d74:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 8015d38 <MEMS_runMagCal+0x400>
 8015d78:	edd4 6a03 	vldr	s13, [r4, #12]
 8015d7c:	ed94 5a00 	vldr	s10, [r4]
 8015d80:	edd4 5a01 	vldr	s11, [r4, #4]
 8015d84:	ed94 6a02 	vldr	s12, [r4, #8]
 8015d88:	edc4 7a06 	vstr	s15, [r4, #24]
 8015d8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015d90:	ad2e      	add	r5, sp, #184	; 0xb8
 8015d92:	2300      	movs	r3, #0
 8015d94:	e9c5 3300 	strd	r3, r3, [r5]
 8015d98:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8015d9c:	60ab      	str	r3, [r5, #8]
 8015d9e:	61ab      	str	r3, [r5, #24]
 8015da0:	4be7      	ldr	r3, [pc, #924]	; (8016140 <MEMS_runMagCal+0x808>)
 8015da2:	9311      	str	r3, [sp, #68]	; 0x44
 8015da4:	ee85 0a08 	vdiv.f32	s0, s10, s16
 8015da8:	eec5 9a88 	vdiv.f32	s19, s11, s16
 8015dac:	ee86 aa08 	vdiv.f32	s20, s12, s16
 8015db0:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8015db4:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8015db8:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8015dbc:	eef0 6a67 	vmov.f32	s13, s15
 8015dc0:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8015dc4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8015dc8:	ee39 9a46 	vsub.f32	s18, s18, s12
 8015dcc:	eddf 6add 	vldr	s13, [pc, #884]	; 8016144 <MEMS_runMagCal+0x80c>
 8015dd0:	ed9f 6add 	vldr	s12, [pc, #884]	; 8016148 <MEMS_runMagCal+0x810>
 8015dd4:	ee77 6a66 	vsub.f32	s13, s14, s13
 8015dd8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015ddc:	eef0 6ae6 	vabs.f32	s13, s13
 8015de0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015de4:	eef4 6ac6 	vcmpe.f32	s13, s12
 8015de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dec:	eef0 7ae7 	vabs.f32	s15, s15
 8015df0:	f101 84dd 	bmi.w	80177ae <MEMS_runMagCal+0x1e76>
 8015df4:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 801614c <MEMS_runMagCal+0x814>
 8015df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e00:	f281 8438 	bge.w	8017674 <MEMS_runMagCal+0x1d3c>
 8015e04:	eddf 7ad2 	vldr	s15, [pc, #840]	; 8016150 <MEMS_runMagCal+0x818>
 8015e08:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8015e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e10:	f101 8430 	bmi.w	8017674 <MEMS_runMagCal+0x1d3c>
 8015e14:	f002 fc80 	bl	8018718 <roundf>
 8015e18:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015e1c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8015e20:	ee17 3a90 	vmov	r3, s15
 8015e24:	eeb0 0a69 	vmov.f32	s0, s19
 8015e28:	f8a9 3000 	strh.w	r3, [r9]
 8015e2c:	f002 fc74 	bl	8018718 <roundf>
 8015e30:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015e34:	eeb0 0a4a 	vmov.f32	s0, s20
 8015e38:	ee17 3a90 	vmov	r3, s15
 8015e3c:	f8a9 3002 	strh.w	r3, [r9, #2]
 8015e40:	f002 fc6a 	bl	8018718 <roundf>
 8015e44:	eddd 7a08 	vldr	s15, [sp, #32]
 8015e48:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 8015e4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015e50:	ee16 3a90 	vmov	r3, s13
 8015e54:	eddf 7abf 	vldr	s15, [pc, #764]	; 8016154 <MEMS_runMagCal+0x81c>
 8015e58:	f8a9 3004 	strh.w	r3, [r9, #4]
 8015e5c:	ee27 0a27 	vmul.f32	s0, s14, s15
 8015e60:	f002 fc5a 	bl	8018718 <roundf>
 8015e64:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8015e68:	ae0f      	add	r6, sp, #60	; 0x3c
 8015e6a:	ed8b 0a01 	vstr	s0, [fp, #4]
 8015e6e:	ab10      	add	r3, sp, #64	; 0x40
 8015e70:	ee1c 0a10 	vmov	r0, s24
 8015e74:	eeb0 0a48 	vmov.f32	s0, s16
 8015e78:	4649      	mov	r1, r9
 8015e7a:	9600      	str	r6, [sp, #0]
 8015e7c:	aa2d      	add	r2, sp, #180	; 0xb4
 8015e7e:	f7f8 ff33 	bl	800ece8 <getMagStats.constprop.0>
 8015e82:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8015e86:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8016158 <MEMS_runMagCal+0x820>
 8015e8a:	461f      	mov	r7, r3
 8015e8c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8015e90:	005b      	lsls	r3, r3, #1
 8015e92:	ee07 3a90 	vmov	s15, r3
 8015e96:	ee07 0a10 	vmov	s14, r0
 8015e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015ea2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015ea6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eae:	dc0f      	bgt.n	8015ed0 <MEMS_runMagCal+0x598>
 8015eb0:	ed96 7a00 	vldr	s14, [r6]
 8015eb4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015eb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ec0:	bfc3      	ittte	gt
 8015ec2:	f89b 3040 	ldrbgt.w	r3, [fp, #64]	; 0x40
 8015ec6:	fab3 f383 	clzgt	r3, r3
 8015eca:	095b      	lsrgt	r3, r3, #5
 8015ecc:	2301      	movle	r3, #1
 8015ece:	9303      	str	r3, [sp, #12]
 8015ed0:	ed96 0a00 	vldr	s0, [r6]
 8015ed4:	f8db 6004 	ldr.w	r6, [fp, #4]
 8015ed8:	9620      	str	r6, [sp, #128]	; 0x80
 8015eda:	ee28 0a80 	vmul.f32	s0, s17, s0
 8015ede:	ee80 0a09 	vdiv.f32	s0, s0, s18
 8015ee2:	f002 fc19 	bl	8018718 <roundf>
 8015ee6:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 8015eea:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8015eee:	ee17 3a10 	vmov	r3, s14
 8015ef2:	ee28 0aa7 	vmul.f32	s0, s17, s15
 8015ef6:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8015efa:	f002 fc0d 	bl	8018718 <roundf>
 8015efe:	ed9f 6a97 	vldr	s12, [pc, #604]	; 801615c <MEMS_runMagCal+0x824>
 8015f02:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 8015f06:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8015f0a:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 8015f0e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8015f12:	f8d9 0000 	ldr.w	r0, [r9]
 8015f16:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
 8015f1a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015f1e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015f22:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015f26:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8015f2a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8015f2e:	ee16 2a90 	vmov	r2, s13
 8015f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015f36:	eebc 6ac0 	vcvt.u32.f32	s12, s0
 8015f3a:	f1b8 0f01 	cmp.w	r8, #1
 8015f3e:	fa1f fc82 	uxth.w	ip, r2
 8015f42:	bf08      	it	eq
 8015f44:	23ff      	moveq	r3, #255	; 0xff
 8015f46:	ee17 2a10 	vmov	r2, s14
 8015f4a:	ee17 1a90 	vmov	r1, s15
 8015f4e:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 8015f52:	ee16 0a10 	vmov	r0, s12
 8015f56:	bf08      	it	eq
 8015f58:	f88d 3084 	strbeq.w	r3, [sp, #132]	; 0x84
 8015f5c:	9b03      	ldr	r3, [sp, #12]
 8015f5e:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
 8015f62:	b292      	uxth	r2, r2
 8015f64:	b289      	uxth	r1, r1
 8015f66:	2000      	movs	r0, #0
 8015f68:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
 8015f6c:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8015f70:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 8015f74:	f88b 0000 	strb.w	r0, [fp]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	f000 8118 	beq.w	80161ae <MEMS_runMagCal+0x876>
 8015f7e:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8015f82:	f88b 0001 	strb.w	r0, [fp, #1]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	f041 80fd 	bne.w	8017186 <MEMS_runMagCal+0x184e>
 8015f8c:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8015f90:	ad0e      	add	r5, sp, #56	; 0x38
 8015f92:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 8015f96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015f9a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8015f9e:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
 8015fa2:	f8cb 6008 	str.w	r6, [fp, #8]
 8015fa6:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 8015faa:	f8bd 608e 	ldrh.w	r6, [sp, #142]	; 0x8e
 8015fae:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8016160 <MEMS_runMagCal+0x828>
 8015fb2:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
 8015fb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015fba:	fb00 f404 	mul.w	r4, r0, r4
 8015fbe:	ee05 4a90 	vmov	s11, r4
 8015fc2:	fb00 f406 	mul.w	r4, r0, r6
 8015fc6:	fb00 f00e 	mul.w	r0, r0, lr
 8015fca:	ee06 0a10 	vmov	s12, r0
 8015fce:	f9bd 0086 	ldrsh.w	r0, [sp, #134]	; 0x86
 8015fd2:	f8cb 204c 	str.w	r2, [fp, #76]	; 0x4c
 8015fd6:	ee03 0a90 	vmov	s7, r0
 8015fda:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
 8015fde:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
 8015fe2:	ee05 4a10 	vmov	s10, r4
 8015fe6:	ee04 0a10 	vmov	s8, r0
 8015fea:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	; 0x8a
 8015fee:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015ff2:	ee04 0a90 	vmov	s9, r0
 8015ff6:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015ffa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015ffe:	f8dc 0000 	ldr.w	r0, [ip]
 8016002:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 8016006:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801600a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801600e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016012:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8016016:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801601a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801601e:	2001      	movs	r0, #1
 8016020:	24ff      	movs	r4, #255	; 0xff
 8016022:	edcb 5a1a 	vstr	s11, [fp, #104]	; 0x68
 8016026:	ed8b 5a1e 	vstr	s10, [fp, #120]	; 0x78
 801602a:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 801602e:	edcb 3a17 	vstr	s7, [fp, #92]	; 0x5c
 8016032:	ed8b 4a18 	vstr	s8, [fp, #96]	; 0x60
 8016036:	edcb 4a19 	vstr	s9, [fp, #100]	; 0x64
 801603a:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
 801603e:	f88b 0059 	strb.w	r0, [fp, #89]	; 0x59
 8016042:	f88b 4012 	strb.w	r4, [fp, #18]
 8016046:	2f00      	cmp	r7, #0
 8016048:	f001 82c8 	beq.w	80175dc <MEMS_runMagCal+0x1ca4>
 801604c:	9b05      	ldr	r3, [sp, #20]
 801604e:	ed9f 3a47 	vldr	s6, [pc, #284]	; 801616c <MEMS_runMagCal+0x834>
 8016052:	ed93 0a01 	vldr	s0, [r3, #4]
 8016056:	f89b 1011 	ldrb.w	r1, [fp, #17]
 801605a:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 801605e:	2200      	movs	r2, #0
 8016060:	ee20 3a03 	vmul.f32	s6, s0, s6
 8016064:	f04f 34ff 	mov.w	r4, #4294967295
 8016068:	4616      	mov	r6, r2
 801606a:	fb96 f3f0 	sdiv	r3, r6, r0
 801606e:	fb00 6313 	mls	r3, r0, r3, r6
 8016072:	b2db      	uxtb	r3, r3
 8016074:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016078:	1c66      	adds	r6, r4, #1
 801607a:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 801607e:	ee07 4a90 	vmov	s15, r4
 8016082:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8016086:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801608a:	ee06 4a90 	vmov	s13, r4
 801608e:	fb96 f4f1 	sdiv	r4, r6, r1
 8016092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016096:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801609a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801609e:	ee07 3a10 	vmov	s14, r3
 80160a2:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80160a6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80160aa:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80160ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80160b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80160b6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80160ba:	fb01 6414 	mls	r4, r1, r4, r6
 80160be:	b264      	sxtb	r4, r4
 80160c0:	ee37 7a64 	vsub.f32	s14, s14, s9
 80160c4:	3201      	adds	r2, #1
 80160c6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80160ca:	b212      	sxth	r2, r2
 80160cc:	eee7 7a07 	vfma.f32	s15, s14, s14
 80160d0:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 80160d4:	42ba      	cmp	r2, r7
 80160d6:	4616      	mov	r6, r2
 80160d8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80160dc:	ee67 7a03 	vmul.f32	s15, s14, s6
 80160e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80160e4:	ee17 ca90 	vmov	ip, s15
 80160e8:	f8a3 c014 	strh.w	ip, [r3, #20]
 80160ec:	dbbd      	blt.n	801606a <MEMS_runMagCal+0x732>
 80160ee:	f88b 4012 	strb.w	r4, [fp, #18]
 80160f2:	428f      	cmp	r7, r1
 80160f4:	bf28      	it	cs
 80160f6:	460f      	movcs	r7, r1
 80160f8:	f88b 7010 	strb.w	r7, [fp, #16]
 80160fc:	ee1c 0a10 	vmov	r0, s24
 8016100:	9500      	str	r5, [sp, #0]
 8016102:	4642      	mov	r2, r8
 8016104:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8016108:	ab0d      	add	r3, sp, #52	; 0x34
 801610a:	f7f8 fded 	bl	800ece8 <getMagStats.constprop.0>
 801610e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8016164 <MEMS_runMagCal+0x82c>
 8016112:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8016116:	edd5 6a00 	vldr	s13, [r5]
 801611a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801611e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8016122:	eef0 7ae7 	vabs.f32	s15, s15
 8016126:	eef4 7ac7 	vcmpe.f32	s15, s14
 801612a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801612e:	d525      	bpl.n	801617c <MEMS_runMagCal+0x844>
 8016130:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016138:	f101 8257 	bmi.w	80175ea <MEMS_runMagCal+0x1cb2>
 801613c:	e01e      	b.n	801617c <MEMS_runMagCal+0x844>
 801613e:	bf00      	nop
 8016140:	41f00001 	.word	0x41f00001
 8016144:	3f8ccccd 	.word	0x3f8ccccd
 8016148:	3f266666 	.word	0x3f266666
 801614c:	3eb33333 	.word	0x3eb33333
 8016150:	3f19999a 	.word	0x3f19999a
 8016154:	3a83126f 	.word	0x3a83126f
 8016158:	3c23d70a 	.word	0x3c23d70a
 801615c:	447a0000 	.word	0x447a0000
 8016160:	358637bd 	.word	0x358637bd
 8016164:	423c0000 	.word	0x423c0000
 8016168:	4423d666 	.word	0x4423d666
 801616c:	42c80000 	.word	0x42c80000
 8016170:	427c0000 	.word	0x427c0000
 8016174:	3f666666 	.word	0x3f666666
 8016178:	3eaaaaab 	.word	0x3eaaaaab
 801617c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8016180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016188:	d507      	bpl.n	801619a <MEMS_runMagCal+0x862>
 801618a:	eef4 6a47 	vcmp.f32	s13, s14
 801618e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016192:	9b03      	ldr	r3, [sp, #12]
 8016194:	bf48      	it	mi
 8016196:	2302      	movmi	r3, #2
 8016198:	9303      	str	r3, [sp, #12]
 801619a:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801619e:	9a03      	ldr	r2, [sp, #12]
 80161a0:	f88b 2058 	strb.w	r2, [fp, #88]	; 0x58
 80161a4:	2bc8      	cmp	r3, #200	; 0xc8
 80161a6:	d902      	bls.n	80161ae <MEMS_runMagCal+0x876>
 80161a8:	2302      	movs	r3, #2
 80161aa:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80161ae:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 80161b2:	ecbd 8b0a 	vpop	{d8-d12}
 80161b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161ba:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80161be:	4291      	cmp	r1, r2
 80161c0:	f4ff abea 	bcc.w	8015998 <MEMS_runMagCal+0x60>
 80161c4:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	f47f abf9 	bne.w	80159c0 <MEMS_runMagCal+0x88>
 80161ce:	f7ff bbed 	b.w	80159ac <MEMS_runMagCal+0x74>
 80161d2:	2702      	movs	r7, #2
 80161d4:	2300      	movs	r3, #0
 80161d6:	9307      	str	r3, [sp, #28]
 80161d8:	9303      	str	r3, [sp, #12]
 80161da:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 8016168 <MEMS_runMagCal+0x830>
 80161de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80161e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161e6:	f140 8260 	bpl.w	80166aa <MEMS_runMagCal+0xd72>
 80161ea:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 801616c <MEMS_runMagCal+0x834>
 80161ee:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80161f2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80161f6:	2b01      	cmp	r3, #1
 80161f8:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 80161fc:	d911      	bls.n	8016222 <MEMS_runMagCal+0x8ea>
 80161fe:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016202:	ee17 3a90 	vmov	r3, s15
 8016206:	b29b      	uxth	r3, r3
 8016208:	2bc7      	cmp	r3, #199	; 0xc7
 801620a:	f201 8359 	bhi.w	80178c0 <MEMS_runMagCal+0x1f88>
 801620e:	2300      	movs	r3, #0
 8016210:	22ff      	movs	r2, #255	; 0xff
 8016212:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8016216:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 801621a:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 801621e:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8016222:	2f00      	cmp	r7, #0
 8016224:	f040 824d 	bne.w	80166c2 <MEMS_runMagCal+0xd8a>
 8016228:	f99b 3012 	ldrsb.w	r3, [fp, #18]
 801622c:	2b00      	cmp	r3, #0
 801622e:	f2c0 839e 	blt.w	801696e <MEMS_runMagCal+0x1036>
 8016232:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8016236:	1c5a      	adds	r2, r3, #1
 8016238:	fbb2 f3f6 	udiv	r3, r2, r6
 801623c:	fb06 2313 	mls	r3, r6, r3, r2
 8016240:	b25b      	sxtb	r3, r3
 8016242:	461d      	mov	r5, r3
 8016244:	f89b 4010 	ldrb.w	r4, [fp, #16]
 8016248:	f88b 3012 	strb.w	r3, [fp, #18]
 801624c:	3401      	adds	r4, #1
 801624e:	42b4      	cmp	r4, r6
 8016250:	bfa8      	it	ge
 8016252:	4634      	movge	r4, r6
 8016254:	fa5f f884 	uxtb.w	r8, r4
 8016258:	f88b 8010 	strb.w	r8, [fp, #16]
 801625c:	f002 fa5c 	bl	8018718 <roundf>
 8016260:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8016264:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
 8016268:	ee10 2a10 	vmov	r2, s0
 801626c:	829a      	strh	r2, [r3, #20]
 801626e:	2f00      	cmp	r7, #0
 8016270:	f040 8227 	bne.w	80166c2 <MEMS_runMagCal+0xd8a>
 8016274:	f8db 200c 	ldr.w	r2, [fp, #12]
 8016278:	b122      	cbz	r2, 8016284 <MEMS_runMagCal+0x94c>
 801627a:	9908      	ldr	r1, [sp, #32]
 801627c:	f502 6396 	add.w	r3, r2, #1200	; 0x4b0
 8016280:	4299      	cmp	r1, r3
 8016282:	d394      	bcc.n	80161ae <MEMS_runMagCal+0x876>
 8016284:	9b03      	ldr	r3, [sp, #12]
 8016286:	2b01      	cmp	r3, #1
 8016288:	d091      	beq.n	80161ae <MEMS_runMagCal+0x876>
 801628a:	f89b 7058 	ldrb.w	r7, [fp, #88]	; 0x58
 801628e:	1ebb      	subs	r3, r7, #2
 8016290:	2b01      	cmp	r3, #1
 8016292:	f240 8232 	bls.w	80166fa <MEMS_runMagCal+0xdc2>
 8016296:	9b05      	ldr	r3, [sp, #20]
 8016298:	ed5f 7a4b 	vldr	s15, [pc, #-300]	; 8016170 <MEMS_runMagCal+0x838>
 801629c:	ed93 8a01 	vldr	s16, [r3, #4]
 80162a0:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 80162a4:	9a06      	ldr	r2, [sp, #24]
 80162a6:	f8db 6090 	ldr.w	r6, [fp, #144]	; 0x90
 80162aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80162b0:	eec7 8a08 	vdiv.f32	s17, s14, s16
 80162b4:	fb02 1404 	mla	r4, r2, r4, r1
 80162b8:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80162bc:	f10b 028c 	add.w	r2, fp, #140	; 0x8c
 80162c0:	3310      	adds	r3, #16
 80162c2:	42a3      	cmp	r3, r4
 80162c4:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 80162c8:	ee28 9a89 	vmul.f32	s18, s17, s18
 80162cc:	ee0c 2a10 	vmov	s24, r2
 80162d0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80162d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80162d8:	ee17 2a90 	vmov	r2, s15
 80162dc:	fa1f f982 	uxth.w	r9, r2
 80162e0:	f080 81fe 	bcs.w	80166e0 <MEMS_runMagCal+0xda8>
 80162e4:	f242 3328 	movw	r3, #9000	; 0x2328
 80162e8:	429c      	cmp	r4, r3
 80162ea:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 80162ee:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
 80162f2:	f99b 208e 	ldrsb.w	r2, [fp, #142]	; 0x8e
 80162f6:	bf1a      	itte	ne
 80162f8:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 80162fc:	3c28      	subne	r4, #40	; 0x28
 80162fe:	2400      	moveq	r4, #0
 8016300:	42a8      	cmp	r0, r5
 8016302:	f102 0201 	add.w	r2, r2, #1
 8016306:	f000 8727 	beq.w	8017158 <MEMS_runMagCal+0x1820>
 801630a:	1a12      	subs	r2, r2, r0
 801630c:	fb92 f1f5 	sdiv	r1, r2, r5
 8016310:	fb05 2211 	mls	r2, r5, r1, r2
 8016314:	2a00      	cmp	r2, #0
 8016316:	bfb8      	it	lt
 8016318:	1952      	addlt	r2, r2, r5
 801631a:	b211      	sxth	r1, r2
 801631c:	b358      	cbz	r0, 8016376 <MEMS_runMagCal+0xa3e>
 801631e:	3801      	subs	r0, #1
 8016320:	b280      	uxth	r0, r0
 8016322:	3001      	adds	r0, #1
 8016324:	1b36      	subs	r6, r6, r4
 8016326:	9f03      	ldr	r7, [sp, #12]
 8016328:	b2b6      	uxth	r6, r6
 801632a:	4408      	add	r0, r1
 801632c:	e002      	b.n	8016334 <MEMS_runMagCal+0x9fc>
 801632e:	3101      	adds	r1, #1
 8016330:	4281      	cmp	r1, r0
 8016332:	d01b      	beq.n	801636c <MEMS_runMagCal+0xa34>
 8016334:	fb91 f3f5 	sdiv	r3, r1, r5
 8016338:	fb05 1313 	mls	r3, r5, r3, r1
 801633c:	b2db      	uxtb	r3, r3
 801633e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016342:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8016346:	4432      	add	r2, r6
 8016348:	b212      	sxth	r2, r2
 801634a:	2a00      	cmp	r2, #0
 801634c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8016350:	daed      	bge.n	801632e <MEMS_runMagCal+0x9f6>
 8016352:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8016356:	1e5a      	subs	r2, r3, #1
 8016358:	2b00      	cmp	r3, #0
 801635a:	f000 8306 	beq.w	801696a <MEMS_runMagCal+0x1032>
 801635e:	3101      	adds	r1, #1
 8016360:	4281      	cmp	r1, r0
 8016362:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8016366:	f04f 0701 	mov.w	r7, #1
 801636a:	d1e3      	bne.n	8016334 <MEMS_runMagCal+0x9fc>
 801636c:	2f01      	cmp	r7, #1
 801636e:	f001 80ea 	beq.w	8017546 <MEMS_runMagCal+0x1c0e>
 8016372:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 8016376:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
 801637a:	2800      	cmp	r0, #0
 801637c:	f000 81b6 	beq.w	80166ec <MEMS_runMagCal+0xdb4>
 8016380:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8016384:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016386:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801638a:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 801638e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8016392:	3308      	adds	r3, #8
 8016394:	441c      	add	r4, r3
 8016396:	42a2      	cmp	r2, r4
 8016398:	f200 86e6 	bhi.w	8017168 <MEMS_runMagCal+0x1830>
 801639c:	9b07      	ldr	r3, [sp, #28]
 801639e:	b923      	cbnz	r3, 80163aa <MEMS_runMagCal+0xa72>
 80163a0:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80163a4:	2b0a      	cmp	r3, #10
 80163a6:	f240 81a5 	bls.w	80166f4 <MEMS_runMagCal+0xdbc>
 80163aa:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80163ae:	9302      	str	r3, [sp, #8]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	f000 819f 	beq.w	80166f4 <MEMS_runMagCal+0xdbc>
 80163b6:	ee29 aa09 	vmul.f32	s20, s18, s18
 80163ba:	ed5f 6a92 	vldr	s13, [pc, #-584]	; 8016174 <MEMS_runMagCal+0x83c>
 80163be:	ed1f 7a92 	vldr	s14, [pc, #-584]	; 8016178 <MEMS_runMagCal+0x840>
 80163c2:	9b03      	ldr	r3, [sp, #12]
 80163c4:	9309      	str	r3, [sp, #36]	; 0x24
 80163c6:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 80163ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80163ce:	2100      	movs	r1, #0
 80163d0:	ee2a aa26 	vmul.f32	s20, s20, s13
 80163d4:	ee28 8a07 	vmul.f32	s16, s16, s14
 80163d8:	ee69 9a29 	vmul.f32	s19, s18, s19
 80163dc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80163e0:	468a      	mov	sl, r1
 80163e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80163e4:	f812 303a 	ldrb.w	r3, [r2, sl, lsl #3]
 80163e8:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	f000 80e2 	beq.w	80165b6 <MEMS_runMagCal+0xc7e>
 80163f2:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80163f6:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 80163fa:	ee07 4a90 	vmov	s15, r4
 80163fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016402:	eef0 7ae7 	vabs.f32	s15, s15
 8016406:	eef4 7ae8 	vcmpe.f32	s15, s17
 801640a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801640e:	f100 820b 	bmi.w	8016828 <MEMS_runMagCal+0xef0>
 8016412:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8016416:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 801641a:	2f00      	cmp	r7, #0
 801641c:	f000 8223 	beq.w	8016866 <MEMS_runMagCal+0xf2e>
 8016420:	f9bb 23a6 	ldrsh.w	r2, [fp, #934]	; 0x3a6
 8016424:	f9bb 03a4 	ldrsh.w	r0, [fp, #932]	; 0x3a4
 8016428:	f9bb 33a8 	ldrsh.w	r3, [fp, #936]	; 0x3a8
 801642c:	1b52      	subs	r2, r2, r5
 801642e:	fb02 f102 	mul.w	r1, r2, r2
 8016432:	1b02      	subs	r2, r0, r4
 8016434:	fb02 1202 	mla	r2, r2, r2, r1
 8016438:	1b9b      	subs	r3, r3, r6
 801643a:	fb03 2303 	mla	r3, r3, r3, r2
 801643e:	ee07 3a90 	vmov	s15, r3
 8016442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016446:	eeb4 aae7 	vcmpe.f32	s20, s15
 801644a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801644e:	f300 80b2 	bgt.w	80165b6 <MEMS_runMagCal+0xc7e>
 8016452:	fb94 f3f9 	sdiv	r3, r4, r9
 8016456:	fb09 4313 	mls	r3, r9, r3, r4
 801645a:	2b00      	cmp	r3, #0
 801645c:	bfb8      	it	lt
 801645e:	444b      	addlt	r3, r9
 8016460:	b21b      	sxth	r3, r3
 8016462:	ee00 3a10 	vmov	s0, r3
 8016466:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801646a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801646e:	f002 f953 	bl	8018718 <roundf>
 8016472:	fb95 f3f9 	sdiv	r3, r5, r9
 8016476:	fb09 5313 	mls	r3, r9, r3, r5
 801647a:	2b00      	cmp	r3, #0
 801647c:	bfb8      	it	lt
 801647e:	444b      	addlt	r3, r9
 8016480:	b21b      	sxth	r3, r3
 8016482:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016486:	ee00 3a10 	vmov	s0, r3
 801648a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801648e:	edcd 7a04 	vstr	s15, [sp, #16]
 8016492:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016496:	f002 f93f 	bl	8018718 <roundf>
 801649a:	fb96 f3f9 	sdiv	r3, r6, r9
 801649e:	fb09 6313 	mls	r3, r9, r3, r6
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	bfb8      	it	lt
 80164a6:	444b      	addlt	r3, r9
 80164a8:	b21b      	sxth	r3, r3
 80164aa:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80164ae:	ee00 3a10 	vmov	s0, r3
 80164b2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80164b6:	f89d 8010 	ldrb.w	r8, [sp, #16]
 80164ba:	edcd 7a04 	vstr	s15, [sp, #16]
 80164be:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80164c2:	9204      	str	r2, [sp, #16]
 80164c4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80164c8:	f002 f926 	bl	8018718 <roundf>
 80164cc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80164d0:	f1b8 0f1f 	cmp.w	r8, #31
 80164d4:	edcd 7a06 	vstr	s15, [sp, #24]
 80164d8:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80164dc:	9106      	str	r1, [sp, #24]
 80164de:	e9db 3225 	ldrd	r3, r2, [fp, #148]	; 0x94
 80164e2:	f240 823d 	bls.w	8016960 <MEMS_runMagCal+0x1028>
 80164e6:	f1a8 0220 	sub.w	r2, r8, #32
 80164ea:	2101      	movs	r1, #1
 80164ec:	fa01 f202 	lsl.w	r2, r1, r2
 80164f0:	401a      	ands	r2, r3
 80164f2:	9804      	ldr	r0, [sp, #16]
 80164f4:	281f      	cmp	r0, #31
 80164f6:	e9db 3127 	ldrd	r3, r1, [fp, #156]	; 0x9c
 80164fa:	f240 821f 	bls.w	801693c <MEMS_runMagCal+0x1004>
 80164fe:	f1a0 0120 	sub.w	r1, r0, #32
 8016502:	2001      	movs	r0, #1
 8016504:	fa00 f101 	lsl.w	r1, r0, r1
 8016508:	ea01 0c03 	and.w	ip, r1, r3
 801650c:	9906      	ldr	r1, [sp, #24]
 801650e:	291f      	cmp	r1, #31
 8016510:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8016514:	f240 821e 	bls.w	8016954 <MEMS_runMagCal+0x101c>
 8016518:	f1a1 0020 	sub.w	r0, r1, #32
 801651c:	2101      	movs	r1, #1
 801651e:	fa01 f000 	lsl.w	r0, r1, r0
 8016522:	4003      	ands	r3, r0
 8016524:	2b00      	cmp	r3, #0
 8016526:	f040 812b 	bne.w	8016780 <MEMS_runMagCal+0xe48>
 801652a:	ea52 030c 	orrs.w	r3, r2, ip
 801652e:	f040 812c 	bne.w	801678a <MEMS_runMagCal+0xe52>
 8016532:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 8016536:	930a      	str	r3, [sp, #40]	; 0x28
 8016538:	461a      	mov	r2, r3
 801653a:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 801653e:	3301      	adds	r3, #1
 8016540:	4694      	mov	ip, r2
 8016542:	930b      	str	r3, [sp, #44]	; 0x2c
 8016544:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016546:	fb92 f3fc 	sdiv	r3, r2, ip
 801654a:	3701      	adds	r7, #1
 801654c:	4567      	cmp	r7, ip
 801654e:	bfa8      	it	ge
 8016550:	4667      	movge	r7, ip
 8016552:	fb0c 2c13 	mls	ip, ip, r3, r2
 8016556:	b2ff      	uxtb	r7, r7
 8016558:	fa4f fc8c 	sxtb.w	ip, ip
 801655c:	9905      	ldr	r1, [sp, #20]
 801655e:	f88b c08e 	strb.w	ip, [fp, #142]	; 0x8e
 8016562:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8016566:	f88b 708c 	strb.w	r7, [fp, #140]	; 0x8c
 801656a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801656c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8016570:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 8016574:	1a9b      	subs	r3, r3, r2
 8016576:	fb01 330a 	mla	r3, r1, sl, r3
 801657a:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 801657e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016580:	f8ac 40ae 	strh.w	r4, [ip, #174]	; 0xae
 8016584:	429f      	cmp	r7, r3
 8016586:	f8ac 50b0 	strh.w	r5, [ip, #176]	; 0xb0
 801658a:	f8ac 60b2 	strh.w	r6, [ip, #178]	; 0xb2
 801658e:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 8016592:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 8016596:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 801659a:	f000 8758 	beq.w	801744e <MEMS_runMagCal+0x1b16>
 801659e:	9b06      	ldr	r3, [sp, #24]
 80165a0:	9a04      	ldr	r2, [sp, #16]
 80165a2:	ee1c 0a10 	vmov	r0, s24
 80165a6:	4641      	mov	r1, r8
 80165a8:	f7f8 f874 	bl	800e694 <MEMS_setMagIndexToOne>
 80165ac:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80165b0:	9302      	str	r3, [sp, #8]
 80165b2:	2301      	movs	r3, #1
 80165b4:	9309      	str	r3, [sp, #36]	; 0x24
 80165b6:	9b02      	ldr	r3, [sp, #8]
 80165b8:	f10a 0a01 	add.w	sl, sl, #1
 80165bc:	fa0f fa8a 	sxth.w	sl, sl
 80165c0:	459a      	cmp	sl, r3
 80165c2:	4651      	mov	r1, sl
 80165c4:	f6ff af0d 	blt.w	80163e2 <MEMS_runMagCal+0xaaa>
 80165c8:	f89b 3000 	ldrb.w	r3, [fp]
 80165cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80165ce:	431a      	orrs	r2, r3
 80165d0:	b2d3      	uxtb	r3, r2
 80165d2:	f88b 3000 	strb.w	r3, [fp]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	f43f ade9 	beq.w	80161ae <MEMS_runMagCal+0x876>
 80165dc:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80165e0:	9306      	str	r3, [sp, #24]
 80165e2:	2b19      	cmp	r3, #25
 80165e4:	f67f ade3 	bls.w	80161ae <MEMS_runMagCal+0x876>
 80165e8:	f8db 3008 	ldr.w	r3, [fp, #8]
 80165ec:	9309      	str	r3, [sp, #36]	; 0x24
 80165ee:	b123      	cbz	r3, 80165fa <MEMS_runMagCal+0xcc2>
 80165f0:	f8db 3004 	ldr.w	r3, [fp, #4]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	f040 8583 	bne.w	8017100 <MEMS_runMagCal+0x17c8>
 80165fa:	9b07      	ldr	r3, [sp, #28]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	f040 872f 	bne.w	8017460 <MEMS_runMagCal+0x1b28>
 8016602:	9b05      	ldr	r3, [sp, #20]
 8016604:	9903      	ldr	r1, [sp, #12]
 8016606:	ed93 8a01 	vldr	s16, [r3, #4]
 801660a:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 801660e:	9302      	str	r3, [sp, #8]
 8016610:	2600      	movs	r6, #0
 8016612:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 8016616:	9304      	str	r3, [sp, #16]
 8016618:	f04f 0a01 	mov.w	sl, #1
 801661c:	e9db 8e25 	ldrd	r8, lr, [fp, #148]	; 0x94
 8016620:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
 8016624:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
 8016628:	9624      	str	r6, [sp, #144]	; 0x90
 801662a:	4657      	mov	r7, sl
 801662c:	460b      	mov	r3, r1
 801662e:	460c      	mov	r4, r1
 8016630:	e013      	b.n	801665a <MEMS_runMagCal+0xd22>
 8016632:	f1b9 0f00 	cmp.w	r9, #0
 8016636:	bf18      	it	ne
 8016638:	3101      	addne	r1, #1
 801663a:	2d00      	cmp	r5, #0
 801663c:	bf18      	it	ne
 801663e:	3401      	addne	r4, #1
 8016640:	2a00      	cmp	r2, #0
 8016642:	bf18      	it	ne
 8016644:	3301      	addne	r3, #1
 8016646:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 801664a:	b2c9      	uxtb	r1, r1
 801664c:	b2e4      	uxtb	r4, r4
 801664e:	b2db      	uxtb	r3, r3
 8016650:	f000 81a2 	beq.w	8016998 <MEMS_runMagCal+0x1060>
 8016654:	3601      	adds	r6, #1
 8016656:	fa5f fa8c 	uxtb.w	sl, ip
 801665a:	9804      	ldr	r0, [sp, #16]
 801665c:	f1a6 0220 	sub.w	r2, r6, #32
 8016660:	fa07 f202 	lsl.w	r2, r7, r2
 8016664:	ea02 0500 	and.w	r5, r2, r0
 8016668:	9802      	ldr	r0, [sp, #8]
 801666a:	2e1f      	cmp	r6, #31
 801666c:	ea08 0902 	and.w	r9, r8, r2
 8016670:	f10a 0c01 	add.w	ip, sl, #1
 8016674:	ea02 0200 	and.w	r2, r2, r0
 8016678:	fa07 f006 	lsl.w	r0, r7, r6
 801667c:	d8d9      	bhi.n	8016632 <MEMS_runMagCal+0xcfa>
 801667e:	e9db 2528 	ldrd	r2, r5, [fp, #160]	; 0xa0
 8016682:	ea00 0902 	and.w	r9, r0, r2
 8016686:	4005      	ands	r5, r0
 8016688:	ea0e 0000 	and.w	r0, lr, r0
 801668c:	f1b9 0f00 	cmp.w	r9, #0
 8016690:	bf18      	it	ne
 8016692:	3401      	addne	r4, #1
 8016694:	2d00      	cmp	r5, #0
 8016696:	bf0c      	ite	eq
 8016698:	461d      	moveq	r5, r3
 801669a:	1c5d      	addne	r5, r3, #1
 801669c:	2800      	cmp	r0, #0
 801669e:	bf18      	it	ne
 80166a0:	3101      	addne	r1, #1
 80166a2:	b2e4      	uxtb	r4, r4
 80166a4:	b2eb      	uxtb	r3, r5
 80166a6:	b2c9      	uxtb	r1, r1
 80166a8:	e7d4      	b.n	8016654 <MEMS_runMagCal+0xd1c>
 80166aa:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80166ae:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8016984 <MEMS_runMagCal+0x104c>
 80166b2:	2b01      	cmp	r3, #1
 80166b4:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 80166b8:	f63f ada9 	bhi.w	801620e <MEMS_runMagCal+0x8d6>
 80166bc:	2f00      	cmp	r7, #0
 80166be:	f43f adb3 	beq.w	8016228 <MEMS_runMagCal+0x8f0>
 80166c2:	9908      	ldr	r1, [sp, #32]
 80166c4:	f8cb 100c 	str.w	r1, [fp, #12]
 80166c8:	2200      	movs	r2, #0
 80166ca:	23ff      	movs	r3, #255	; 0xff
 80166cc:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 80166d0:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 80166d4:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 80166d8:	ecbd 8b0a 	vpop	{d8-d12}
 80166dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166e0:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 80166e4:	4634      	mov	r4, r6
 80166e6:	2800      	cmp	r0, #0
 80166e8:	f47f ae4a 	bne.w	8016380 <MEMS_runMagCal+0xa48>
 80166ec:	9b07      	ldr	r3, [sp, #28]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	f47f ae5b 	bne.w	80163aa <MEMS_runMagCal+0xa72>
 80166f4:	9b03      	ldr	r3, [sp, #12]
 80166f6:	9309      	str	r3, [sp, #36]	; 0x24
 80166f8:	e766      	b.n	80165c8 <MEMS_runMagCal+0xc90>
 80166fa:	45b0      	cmp	r8, r6
 80166fc:	f000 86b9 	beq.w	8017472 <MEMS_runMagCal+0x1b3a>
 8016700:	2f03      	cmp	r7, #3
 8016702:	f47f adc8 	bne.w	8016296 <MEMS_runMagCal+0x95e>
 8016706:	ee07 2a90 	vmov	s15, r2
 801670a:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8016988 <MEMS_runMagCal+0x1050>
 801670e:	ed9b 7a01 	vldr	s14, [fp, #4]
 8016712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016716:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801671a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801671e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016726:	f77f adb6 	ble.w	8016296 <MEMS_runMagCal+0x95e>
 801672a:	f8db 3008 	ldr.w	r3, [fp, #8]
 801672e:	2b00      	cmp	r3, #0
 8016730:	f43f adb1 	beq.w	8016296 <MEMS_runMagCal+0x95e>
 8016734:	eddd 7a08 	vldr	s15, [sp, #32]
 8016738:	330a      	adds	r3, #10
 801673a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801673e:	ee07 3a90 	vmov	s15, r3
 8016742:	ee67 6a26 	vmul.f32	s13, s14, s13
 8016746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801674a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801674e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016752:	f77f ada0 	ble.w	8016296 <MEMS_runMagCal+0x95e>
 8016756:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801675a:	2b00      	cmp	r3, #0
 801675c:	f47f ad9b 	bne.w	8016296 <MEMS_runMagCal+0x95e>
 8016760:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8016764:	2b00      	cmp	r3, #0
 8016766:	f43f ad22 	beq.w	80161ae <MEMS_runMagCal+0x876>
 801676a:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 801676e:	2bff      	cmp	r3, #255	; 0xff
 8016770:	f47f ad1d 	bne.w	80161ae <MEMS_runMagCal+0x876>
 8016774:	e58f      	b.n	8016296 <MEMS_runMagCal+0x95e>
 8016776:	2300      	movs	r3, #0
 8016778:	9307      	str	r3, [sp, #28]
 801677a:	9303      	str	r3, [sp, #12]
 801677c:	2700      	movs	r7, #0
 801677e:	e52c      	b.n	80161da <MEMS_runMagCal+0x8a2>
 8016780:	b11a      	cbz	r2, 801678a <MEMS_runMagCal+0xe52>
 8016782:	f1bc 0f00 	cmp.w	ip, #0
 8016786:	f47f af16 	bne.w	80165b6 <MEMS_runMagCal+0xc7e>
 801678a:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 801678e:	930a      	str	r3, [sp, #40]	; 0x28
 8016790:	461a      	mov	r2, r3
 8016792:	4297      	cmp	r7, r2
 8016794:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8016798:	f000 848f 	beq.w	80170ba <MEMS_runMagCal+0x1782>
 801679c:	3301      	adds	r3, #1
 801679e:	4611      	mov	r1, r2
 80167a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80167a2:	1bdb      	subs	r3, r3, r7
 80167a4:	fb93 f2f2 	sdiv	r2, r3, r2
 80167a8:	fb01 3212 	mls	r2, r1, r2, r3
 80167ac:	2a00      	cmp	r2, #0
 80167ae:	bfbc      	itt	lt
 80167b0:	460b      	movlt	r3, r1
 80167b2:	18d2      	addlt	r2, r2, r3
 80167b4:	468c      	mov	ip, r1
 80167b6:	b212      	sxth	r2, r2
 80167b8:	f107 3eff 	add.w	lr, r7, #4294967295
 80167bc:	fa5f fe8e 	uxtb.w	lr, lr
 80167c0:	f10e 0e01 	add.w	lr, lr, #1
 80167c4:	4496      	add	lr, r2
 80167c6:	e002      	b.n	80167ce <MEMS_runMagCal+0xe96>
 80167c8:	4572      	cmp	r2, lr
 80167ca:	f43f aebb 	beq.w	8016544 <MEMS_runMagCal+0xc0c>
 80167ce:	fb92 f3fc 	sdiv	r3, r2, ip
 80167d2:	fb0c 2313 	mls	r3, ip, r3, r2
 80167d6:	b2db      	uxtb	r3, r3
 80167d8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80167dc:	3201      	adds	r2, #1
 80167de:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 80167e2:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 80167e6:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80167ea:	1a20      	subs	r0, r4, r0
 80167ec:	1a69      	subs	r1, r5, r1
 80167ee:	ee07 0a90 	vmov	s15, r0
 80167f2:	ee06 1a90 	vmov	s13, r1
 80167f6:	1af3      	subs	r3, r6, r3
 80167f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80167fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016800:	ee07 3a10 	vmov	s14, r3
 8016804:	eef0 7ae7 	vabs.f32	s15, s15
 8016808:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801680c:	eef0 6ae6 	vabs.f32	s13, s13
 8016810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016814:	eeb0 7ac7 	vabs.f32	s14, s14
 8016818:	ee77 7a87 	vadd.f32	s15, s15, s14
 801681c:	eef4 9ae7 	vcmpe.f32	s19, s15
 8016820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016824:	ddd0      	ble.n	80167c8 <MEMS_runMagCal+0xe90>
 8016826:	e6c6      	b.n	80165b6 <MEMS_runMagCal+0xc7e>
 8016828:	ee07 5a90 	vmov	s15, r5
 801682c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016830:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8016834:	eef0 7ae7 	vabs.f32	s15, s15
 8016838:	eef4 8ae7 	vcmpe.f32	s17, s15
 801683c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016840:	f77f ade9 	ble.w	8016416 <MEMS_runMagCal+0xade>
 8016844:	ee07 6a90 	vmov	s15, r6
 8016848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801684c:	eef0 7ae7 	vabs.f32	s15, s15
 8016850:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016858:	f73f aead 	bgt.w	80165b6 <MEMS_runMagCal+0xc7e>
 801685c:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8016860:	2f00      	cmp	r7, #0
 8016862:	f47f addd 	bne.w	8016420 <MEMS_runMagCal+0xae8>
 8016866:	fb94 f2f9 	sdiv	r2, r4, r9
 801686a:	f04f 0301 	mov.w	r3, #1
 801686e:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8016872:	9b05      	ldr	r3, [sp, #20]
 8016874:	f88b 708e 	strb.w	r7, [fp, #142]	; 0x8e
 8016878:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 801687c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801687e:	f8ab 40ae 	strh.w	r4, [fp, #174]	; 0xae
 8016882:	fb09 4212 	mls	r2, r9, r2, r4
 8016886:	2a00      	cmp	r2, #0
 8016888:	fb01 3300 	mla	r3, r1, r0, r3
 801688c:	bfb8      	it	lt
 801688e:	444a      	addlt	r2, r9
 8016890:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
 8016894:	b213      	sxth	r3, r2
 8016896:	ee00 3a10 	vmov	s0, r3
 801689a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801689e:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 80168a2:	f8ab 50b0 	strh.w	r5, [fp, #176]	; 0xb0
 80168a6:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 80168aa:	f8ab 60b2 	strh.w	r6, [fp, #178]	; 0xb2
 80168ae:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 80168b2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80168b6:	f8ab 70ac 	strh.w	r7, [fp, #172]	; 0xac
 80168ba:	f001 ff2d 	bl	8018718 <roundf>
 80168be:	fb95 f3f9 	sdiv	r3, r5, r9
 80168c2:	fb09 5513 	mls	r5, r9, r3, r5
 80168c6:	2d00      	cmp	r5, #0
 80168c8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80168cc:	bfb8      	it	lt
 80168ce:	444d      	addlt	r5, r9
 80168d0:	b22d      	sxth	r5, r5
 80168d2:	edcd 7a02 	vstr	s15, [sp, #8]
 80168d6:	ee07 5a90 	vmov	s15, r5
 80168da:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80168de:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80168e2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80168e6:	f001 ff17 	bl	8018718 <roundf>
 80168ea:	fb96 f3f9 	sdiv	r3, r6, r9
 80168ee:	fb09 6613 	mls	r6, r9, r3, r6
 80168f2:	2e00      	cmp	r6, #0
 80168f4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80168f8:	bfb8      	it	lt
 80168fa:	444e      	addlt	r6, r9
 80168fc:	b236      	sxth	r6, r6
 80168fe:	edcd 7a02 	vstr	s15, [sp, #8]
 8016902:	ee07 6a90 	vmov	s15, r6
 8016906:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801690a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801690e:	9204      	str	r2, [sp, #16]
 8016910:	2301      	movs	r3, #1
 8016912:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016916:	9309      	str	r3, [sp, #36]	; 0x24
 8016918:	f001 fefe 	bl	8018718 <roundf>
 801691c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016920:	9a04      	ldr	r2, [sp, #16]
 8016922:	edcd 7a02 	vstr	s15, [sp, #8]
 8016926:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801692a:	ee1c 0a10 	vmov	r0, s24
 801692e:	4621      	mov	r1, r4
 8016930:	f7f7 feb0 	bl	800e694 <MEMS_setMagIndexToOne>
 8016934:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8016938:	9302      	str	r3, [sp, #8]
 801693a:	e63c      	b.n	80165b6 <MEMS_runMagCal+0xc7e>
 801693c:	4603      	mov	r3, r0
 801693e:	2001      	movs	r0, #1
 8016940:	fa00 f303 	lsl.w	r3, r0, r3
 8016944:	ea01 0c03 	and.w	ip, r1, r3
 8016948:	9906      	ldr	r1, [sp, #24]
 801694a:	291f      	cmp	r1, #31
 801694c:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8016950:	f63f ade2 	bhi.w	8016518 <MEMS_runMagCal+0xbe0>
 8016954:	460b      	mov	r3, r1
 8016956:	2101      	movs	r1, #1
 8016958:	fa01 f303 	lsl.w	r3, r1, r3
 801695c:	4003      	ands	r3, r0
 801695e:	e5e1      	b.n	8016524 <MEMS_runMagCal+0xbec>
 8016960:	2301      	movs	r3, #1
 8016962:	fa03 f308 	lsl.w	r3, r3, r8
 8016966:	401a      	ands	r2, r3
 8016968:	e5c3      	b.n	80164f2 <MEMS_runMagCal+0xbba>
 801696a:	2701      	movs	r7, #1
 801696c:	e4df      	b.n	801632e <MEMS_runMagCal+0x9f6>
 801696e:	2500      	movs	r5, #0
 8016970:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8016974:	462b      	mov	r3, r5
 8016976:	e465      	b.n	8016244 <MEMS_runMagCal+0x90c>
 8016978:	460f      	mov	r7, r1
 801697a:	e42b      	b.n	80161d4 <MEMS_runMagCal+0x89c>
 801697c:	2300      	movs	r3, #0
 801697e:	9304      	str	r3, [sp, #16]
 8016980:	f7ff b941 	b.w	8015c06 <MEMS_runMagCal+0x2ce>
 8016984:	477fff00 	.word	0x477fff00
 8016988:	3a83126f 	.word	0x3a83126f
 801698c:	42340000 	.word	0x42340000
 8016990:	3faccccd 	.word	0x3faccccd
 8016994:	00000000 	.word	0x00000000
 8016998:	2905      	cmp	r1, #5
 801699a:	f240 8383 	bls.w	80170a4 <MEMS_runMagCal+0x176c>
 801699e:	2c05      	cmp	r4, #5
 80169a0:	f240 8380 	bls.w	80170a4 <MEMS_runMagCal+0x176c>
 80169a4:	2b05      	cmp	r3, #5
 80169a6:	f240 837d 	bls.w	80170a4 <MEMS_runMagCal+0x176c>
 80169aa:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80169ae:	f89b a08d 	ldrb.w	sl, [fp, #141]	; 0x8d
 80169b2:	9302      	str	r3, [sp, #8]
 80169b4:	9b06      	ldr	r3, [sp, #24]
 80169b6:	4553      	cmp	r3, sl
 80169b8:	f000 85f1 	beq.w	801759e <MEMS_runMagCal+0x1c66>
 80169bc:	461a      	mov	r2, r3
 80169be:	9b02      	ldr	r3, [sp, #8]
 80169c0:	3301      	adds	r3, #1
 80169c2:	9304      	str	r3, [sp, #16]
 80169c4:	1a9b      	subs	r3, r3, r2
 80169c6:	fb93 f2fa 	sdiv	r2, r3, sl
 80169ca:	fb0a 3212 	mls	r2, sl, r2, r3
 80169ce:	2a00      	cmp	r2, #0
 80169d0:	bfb8      	it	lt
 80169d2:	4452      	addlt	r2, sl
 80169d4:	46d1      	mov	r9, sl
 80169d6:	b212      	sxth	r2, r2
 80169d8:	9906      	ldr	r1, [sp, #24]
 80169da:	eb0b 03c2 	add.w	r3, fp, r2, lsl #3
 80169de:	f101 38ff 	add.w	r8, r1, #4294967295
 80169e2:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 80169e6:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 80169ea:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 80169ee:	fa5f f888 	uxtb.w	r8, r8
 80169f2:	f108 0801 	add.w	r8, r8, #1
 80169f6:	468e      	mov	lr, r1
 80169f8:	463e      	mov	r6, r7
 80169fa:	46ac      	mov	ip, r5
 80169fc:	4490      	add	r8, r2
 80169fe:	fb92 f3f9 	sdiv	r3, r2, r9
 8016a02:	fb09 2313 	mls	r3, r9, r3, r2
 8016a06:	b2db      	uxtb	r3, r3
 8016a08:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016a0c:	3201      	adds	r2, #1
 8016a0e:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8016a12:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 8016a16:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8016a1a:	42a1      	cmp	r1, r4
 8016a1c:	bfb8      	it	lt
 8016a1e:	4621      	movlt	r1, r4
 8016a20:	45a6      	cmp	lr, r4
 8016a22:	bfa8      	it	ge
 8016a24:	46a6      	movge	lr, r4
 8016a26:	4285      	cmp	r5, r0
 8016a28:	bfb8      	it	lt
 8016a2a:	4605      	movlt	r5, r0
 8016a2c:	4584      	cmp	ip, r0
 8016a2e:	bfa8      	it	ge
 8016a30:	4684      	movge	ip, r0
 8016a32:	429f      	cmp	r7, r3
 8016a34:	bfb8      	it	lt
 8016a36:	461f      	movlt	r7, r3
 8016a38:	429e      	cmp	r6, r3
 8016a3a:	bfa8      	it	ge
 8016a3c:	461e      	movge	r6, r3
 8016a3e:	4542      	cmp	r2, r8
 8016a40:	d1dd      	bne.n	80169fe <MEMS_runMagCal+0x10c6>
 8016a42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016a46:	eec7 8a88 	vdiv.f32	s17, s15, s16
 8016a4a:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8016a4e:	eba1 010e 	sub.w	r1, r1, lr
 8016a52:	eba5 050c 	sub.w	r5, r5, ip
 8016a56:	1bbe      	subs	r6, r7, r6
 8016a58:	b209      	sxth	r1, r1
 8016a5a:	b22d      	sxth	r5, r5
 8016a5c:	b236      	sxth	r6, r6
 8016a5e:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 801698c <MEMS_runMagCal+0x1054>
 8016a62:	ee28 7a87 	vmul.f32	s14, s17, s14
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	f040 8593 	bne.w	8017592 <MEMS_runMagCal+0x1c5a>
 8016a6c:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8016a70:	fab3 f883 	clz	r8, r3
 8016a74:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8016a78:	ee06 1a90 	vmov	s13, r1
 8016a7c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8016a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016a84:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016a88:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a90:	f300 8562 	bgt.w	8017558 <MEMS_runMagCal+0x1c20>
 8016a94:	ee06 5a10 	vmov	s12, r5
 8016a98:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8016a9c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aa4:	f100 8558 	bmi.w	8017558 <MEMS_runMagCal+0x1c20>
 8016aa8:	ee05 6a90 	vmov	s11, r6
 8016aac:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8016ab0:	eef4 7ae5 	vcmpe.f32	s15, s11
 8016ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ab8:	f100 854e 	bmi.w	8017558 <MEMS_runMagCal+0x1c20>
 8016abc:	428d      	cmp	r5, r1
 8016abe:	462b      	mov	r3, r5
 8016ac0:	bfb8      	it	lt
 8016ac2:	460b      	movlt	r3, r1
 8016ac4:	42b3      	cmp	r3, r6
 8016ac6:	461a      	mov	r2, r3
 8016ac8:	bfb8      	it	lt
 8016aca:	4632      	movlt	r2, r6
 8016acc:	428e      	cmp	r6, r1
 8016ace:	4633      	mov	r3, r6
 8016ad0:	bfa8      	it	ge
 8016ad2:	460b      	movge	r3, r1
 8016ad4:	42ab      	cmp	r3, r5
 8016ad6:	bfa8      	it	ge
 8016ad8:	462b      	movge	r3, r5
 8016ada:	428a      	cmp	r2, r1
 8016adc:	9202      	str	r2, [sp, #8]
 8016ade:	f340 8588 	ble.w	80175f2 <MEMS_runMagCal+0x1cba>
 8016ae2:	4299      	cmp	r1, r3
 8016ae4:	bfb8      	it	lt
 8016ae6:	4619      	movlt	r1, r3
 8016ae8:	42aa      	cmp	r2, r5
 8016aea:	dd02      	ble.n	8016af2 <MEMS_runMagCal+0x11ba>
 8016aec:	42ab      	cmp	r3, r5
 8016aee:	bfb8      	it	lt
 8016af0:	4629      	movlt	r1, r5
 8016af2:	9a02      	ldr	r2, [sp, #8]
 8016af4:	4296      	cmp	r6, r2
 8016af6:	da02      	bge.n	8016afe <MEMS_runMagCal+0x11c6>
 8016af8:	429e      	cmp	r6, r3
 8016afa:	bfc8      	it	gt
 8016afc:	4631      	movgt	r1, r6
 8016afe:	f1b8 0f00 	cmp.w	r8, #0
 8016b02:	f000 8299 	beq.w	8017038 <MEMS_runMagCal+0x1700>
 8016b06:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b0e:	dc0d      	bgt.n	8016b2c <MEMS_runMagCal+0x11f4>
 8016b10:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8016b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b18:	dc08      	bgt.n	8016b2c <MEMS_runMagCal+0x11f4>
 8016b1a:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8016b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b22:	bfcc      	ite	gt
 8016b24:	f04f 0801 	movgt.w	r8, #1
 8016b28:	f04f 0800 	movle.w	r8, #0
 8016b2c:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8016990 <MEMS_runMagCal+0x1058>
 8016b30:	ed9d 5a02 	vldr	s10, [sp, #8]
 8016b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016b38:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8016b3c:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8016b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b44:	f2c0 8558 	blt.w	80175f8 <MEMS_runMagCal+0x1cc0>
 8016b48:	ee07 1a90 	vmov	s15, r1
 8016b4c:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 8016b50:	ee27 5a05 	vmul.f32	s10, s14, s10
 8016b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b58:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b60:	f2c0 854a 	blt.w	80175f8 <MEMS_runMagCal+0x1cc0>
 8016b64:	9a02      	ldr	r2, [sp, #8]
 8016b66:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8016b6a:	f280 8545 	bge.w	80175f8 <MEMS_runMagCal+0x1cc0>
 8016b6e:	ee07 3a90 	vmov	s15, r3
 8016b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b76:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 8016b7a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016b7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b86:	f140 8537 	bpl.w	80175f8 <MEMS_runMagCal+0x1cc0>
 8016b8a:	9b06      	ldr	r3, [sp, #24]
 8016b8c:	4553      	cmp	r3, sl
 8016b8e:	f000 8569 	beq.w	8017664 <MEMS_runMagCal+0x1d2c>
 8016b92:	461a      	mov	r2, r3
 8016b94:	9b04      	ldr	r3, [sp, #16]
 8016b96:	1a9b      	subs	r3, r3, r2
 8016b98:	fb93 f7f9 	sdiv	r7, r3, r9
 8016b9c:	fb09 3717 	mls	r7, r9, r7, r3
 8016ba0:	2f00      	cmp	r7, #0
 8016ba2:	bfb8      	it	lt
 8016ba4:	4457      	addlt	r7, sl
 8016ba6:	b23f      	sxth	r7, r7
 8016ba8:	9b03      	ldr	r3, [sp, #12]
 8016baa:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8016bae:	b27f      	sxtb	r7, r7
 8016bb0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016bb4:	9304      	str	r3, [sp, #16]
 8016bb6:	f1c7 0e01 	rsb	lr, r7, #1
 8016bba:	469c      	mov	ip, r3
 8016bbc:	463b      	mov	r3, r7
 8016bbe:	fb93 f1f9 	sdiv	r1, r3, r9
 8016bc2:	fb09 3111 	mls	r1, r9, r1, r3
 8016bc6:	b24a      	sxtb	r2, r1
 8016bc8:	2a00      	cmp	r2, #0
 8016bca:	f107 0701 	add.w	r7, r7, #1
 8016bce:	bfb8      	it	lt
 8016bd0:	eb0a 0201 	addlt.w	r2, sl, r1
 8016bd4:	fb97 f3f9 	sdiv	r3, r7, r9
 8016bd8:	fb09 7313 	mls	r3, r9, r3, r7
 8016bdc:	bfb8      	it	lt
 8016bde:	b252      	sxtblt	r2, r2
 8016be0:	b25b      	sxtb	r3, r3
 8016be2:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016be6:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8016bea:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8016bee:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 8016bf2:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8016bf6:	1a45      	subs	r5, r0, r1
 8016bf8:	bf48      	it	mi
 8016bfa:	1a09      	submi	r1, r1, r0
 8016bfc:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 8016c00:	bf4c      	ite	mi
 8016c02:	b20d      	sxthmi	r5, r1
 8016c04:	b22d      	sxthpl	r5, r5
 8016c06:	1a21      	subs	r1, r4, r0
 8016c08:	bf48      	it	mi
 8016c0a:	1b01      	submi	r1, r0, r4
 8016c0c:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 8016c10:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 8016c14:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8016c18:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 8016c1c:	1a9b      	subs	r3, r3, r2
 8016c1e:	1a26      	subs	r6, r4, r0
 8016c20:	b21b      	sxth	r3, r3
 8016c22:	bf48      	it	mi
 8016c24:	1b06      	submi	r6, r0, r4
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	b209      	sxth	r1, r1
 8016c2a:	b236      	sxth	r6, r6
 8016c2c:	dd20      	ble.n	8016c70 <MEMS_runMagCal+0x1338>
 8016c2e:	4429      	add	r1, r5
 8016c30:	440e      	add	r6, r1
 8016c32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016c36:	fb02 f606 	mul.w	r6, r2, r6
 8016c3a:	ee07 6a90 	vmov	s15, r6
 8016c3e:	ee07 3a10 	vmov	s14, r3
 8016c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016c4a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8016c4e:	f10c 0c01 	add.w	ip, ip, #1
 8016c52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8016c56:	fa5f fc8c 	uxtb.w	ip, ip
 8016c5a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8016c5e:	ee17 3a90 	vmov	r3, s15
 8016c62:	b21b      	sxth	r3, r3
 8016c64:	2b96      	cmp	r3, #150	; 0x96
 8016c66:	dd03      	ble.n	8016c70 <MEMS_runMagCal+0x1338>
 8016c68:	9b04      	ldr	r3, [sp, #16]
 8016c6a:	3301      	adds	r3, #1
 8016c6c:	b2db      	uxtb	r3, r3
 8016c6e:	9304      	str	r3, [sp, #16]
 8016c70:	eb0e 0307 	add.w	r3, lr, r7
 8016c74:	b2db      	uxtb	r3, r3
 8016c76:	4598      	cmp	r8, r3
 8016c78:	d8a0      	bhi.n	8016bbc <MEMS_runMagCal+0x1284>
 8016c7a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8016c7e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8016c82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016c86:	4563      	cmp	r3, ip
 8016c88:	f340 820c 	ble.w	80170a4 <MEMS_runMagCal+0x176c>
 8016c8c:	9b07      	ldr	r3, [sp, #28]
 8016c8e:	b92b      	cbnz	r3, 8016c9c <MEMS_runMagCal+0x1364>
 8016c90:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8016c94:	3b02      	subs	r3, #2
 8016c96:	2b01      	cmp	r3, #1
 8016c98:	f240 851e 	bls.w	80176d8 <MEMS_runMagCal+0x1da0>
 8016c9c:	ac25      	add	r4, sp, #148	; 0x94
 8016c9e:	2220      	movs	r2, #32
 8016ca0:	4620      	mov	r0, r4
 8016ca2:	2100      	movs	r1, #0
 8016ca4:	f003 fb30 	bl	801a308 <memset>
 8016ca8:	f89b 608c 	ldrb.w	r6, [fp, #140]	; 0x8c
 8016cac:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8016cb0:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	4286      	cmp	r6, r0
 8016cb8:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
 8016cbc:	921f      	str	r2, [sp, #124]	; 0x7c
 8016cbe:	f103 0301 	add.w	r3, r3, #1
 8016cc2:	f000 8501 	beq.w	80176c8 <MEMS_runMagCal+0x1d90>
 8016cc6:	1b9b      	subs	r3, r3, r6
 8016cc8:	fb93 f2f0 	sdiv	r2, r3, r0
 8016ccc:	fb00 3312 	mls	r3, r0, r2, r3
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	bfb8      	it	lt
 8016cd4:	181b      	addlt	r3, r3, r0
 8016cd6:	b21a      	sxth	r2, r3
 8016cd8:	2e00      	cmp	r6, #0
 8016cda:	f000 854c 	beq.w	8017776 <MEMS_runMagCal+0x1e3e>
 8016cde:	1e77      	subs	r7, r6, #1
 8016ce0:	ed5f 5ad4 	vldr	s11, [pc, #-848]	; 8016994 <MEMS_runMagCal+0x105c>
 8016ce4:	b2fd      	uxtb	r5, r7
 8016ce6:	3501      	adds	r5, #1
 8016ce8:	eeb0 5a65 	vmov.f32	s10, s11
 8016cec:	eef0 4a65 	vmov.f32	s9, s11
 8016cf0:	4415      	add	r5, r2
 8016cf2:	4611      	mov	r1, r2
 8016cf4:	fb91 f3f0 	sdiv	r3, r1, r0
 8016cf8:	fb00 1313 	mls	r3, r0, r3, r1
 8016cfc:	b2db      	uxtb	r3, r3
 8016cfe:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016d02:	3101      	adds	r1, #1
 8016d04:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 8016d08:	ee06 ca90 	vmov	s13, ip
 8016d0c:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 8016d10:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8016d14:	ee07 ca10 	vmov	s14, ip
 8016d18:	ee07 3a90 	vmov	s15, r3
 8016d1c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016d20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d28:	42a9      	cmp	r1, r5
 8016d2a:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8016d2e:	ee35 5a07 	vadd.f32	s10, s10, s14
 8016d32:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8016d36:	d1dd      	bne.n	8016cf4 <MEMS_runMagCal+0x13bc>
 8016d38:	ee07 6a90 	vmov	s15, r6
 8016d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016d44:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8016d48:	b2f9      	uxtb	r1, r7
 8016d4a:	3101      	adds	r1, #1
 8016d4c:	4411      	add	r1, r2
 8016d4e:	ed9f 6aeb 	vldr	s12, [pc, #940]	; 80170fc <MEMS_runMagCal+0x17c4>
 8016d52:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 8016d56:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8016d5a:	ee29 aa85 	vmul.f32	s20, s19, s10
 8016d5e:	ee69 9aa5 	vmul.f32	s19, s19, s11
 8016d62:	eef0 4a46 	vmov.f32	s9, s12
 8016d66:	eeb0 4a46 	vmov.f32	s8, s12
 8016d6a:	eef0 3a46 	vmov.f32	s7, s12
 8016d6e:	eeb0 3a46 	vmov.f32	s6, s12
 8016d72:	eef0 2a46 	vmov.f32	s5, s12
 8016d76:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 8016d7a:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 8016d7e:	fb92 f3f0 	sdiv	r3, r2, r0
 8016d82:	fb00 2313 	mls	r3, r0, r3, r2
 8016d86:	b2db      	uxtb	r3, r3
 8016d88:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016d8c:	3201      	adds	r2, #1
 8016d8e:	f9b3 50ae 	ldrsh.w	r5, [r3, #174]	; 0xae
 8016d92:	ee06 5a90 	vmov	s13, r5
 8016d96:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8016d9a:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8016d9e:	ee07 5a10 	vmov	s14, r5
 8016da2:	ee07 3a90 	vmov	s15, r3
 8016da6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016daa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016db2:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8016db6:	ee37 7a4a 	vsub.f32	s14, s14, s20
 8016dba:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8016dbe:	4291      	cmp	r1, r2
 8016dc0:	eee6 2aa6 	vfma.f32	s5, s13, s13
 8016dc4:	eea6 3a87 	vfma.f32	s6, s13, s14
 8016dc8:	eea7 4a07 	vfma.f32	s8, s14, s14
 8016dcc:	eee6 3aa7 	vfma.f32	s7, s13, s15
 8016dd0:	eee7 4a27 	vfma.f32	s9, s14, s15
 8016dd4:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8016dd8:	d1d1      	bne.n	8016d7e <MEMS_runMagCal+0x1446>
 8016dda:	edc4 2a00 	vstr	s5, [r4]
 8016dde:	ed84 3a01 	vstr	s6, [r4, #4]
 8016de2:	edc4 3a02 	vstr	s7, [r4, #8]
 8016de6:	ed84 4a03 	vstr	s8, [r4, #12]
 8016dea:	edc4 4a04 	vstr	s9, [r4, #16]
 8016dee:	ed84 6a05 	vstr	s12, [r4, #20]
 8016df2:	a91a      	add	r1, sp, #104	; 0x68
 8016df4:	4620      	mov	r0, r4
 8016df6:	f7fe fce5 	bl	80157c4 <MEMS_EIG3>
 8016dfa:	ed9d 6a1b 	vldr	s12, [sp, #108]	; 0x6c
 8016dfe:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 8016e02:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 8016e06:	eef0 5ae4 	vabs.f32	s11, s9
 8016e0a:	eef0 6ac6 	vabs.f32	s13, s12
 8016e0e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8016e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e16:	bf8c      	ite	hi
 8016e18:	eef0 7a65 	vmovhi.f32	s15, s11
 8016e1c:	eef0 7a66 	vmovls.f32	s15, s13
 8016e20:	eeb0 7ac5 	vabs.f32	s14, s10
 8016e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e2c:	eef4 6ae5 	vcmpe.f32	s13, s11
 8016e30:	bf88      	it	hi
 8016e32:	eef0 7a47 	vmovhi.f32	s15, s14
 8016e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e3a:	bfb8      	it	lt
 8016e3c:	eef0 6a65 	vmovlt.f32	s13, s11
 8016e40:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016e44:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8016e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e4c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8016e50:	bfb8      	it	lt
 8016e52:	eeb0 7a66 	vmovlt.f32	s14, s13
 8016e56:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8016e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e5e:	f300 8420 	bgt.w	80176a2 <MEMS_runMagCal+0x1d6a>
 8016e62:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8016e66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016e6a:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8016e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e76:	dd02      	ble.n	8016e7e <MEMS_runMagCal+0x1546>
 8016e78:	2b22      	cmp	r3, #34	; 0x22
 8016e7a:	f240 8412 	bls.w	80176a2 <MEMS_runMagCal+0x1d6a>
 8016e7e:	ee76 7a24 	vadd.f32	s15, s12, s9
 8016e82:	ee07 3a10 	vmov	s14, r3
 8016e86:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016e8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016e8e:	eddf 6a90 	vldr	s13, [pc, #576]	; 80170d0 <MEMS_runMagCal+0x1798>
 8016e92:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8016e96:	eef1 7ac6 	vsqrt.f32	s15, s12
 8016e9a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8016e9e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ea6:	f300 83fc 	bgt.w	80176a2 <MEMS_runMagCal+0x1d6a>
 8016eaa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8016eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016eb6:	f100 83f4 	bmi.w	80176a2 <MEMS_runMagCal+0x1d6a>
 8016eba:	eddf 7a86 	vldr	s15, [pc, #536]	; 80170d4 <MEMS_runMagCal+0x179c>
 8016ebe:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8016ec8:	932c      	str	r3, [sp, #176]	; 0xb0
 8016eca:	eddd 7a02 	vldr	s15, [sp, #8]
 8016ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016eda:	d408      	bmi.n	8016eee <MEMS_runMagCal+0x15b6>
 8016edc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8016ee0:	ee17 3a10 	vmov	r3, s14
 8016ee4:	b21b      	sxth	r3, r3
 8016ee6:	ee07 3a90 	vmov	s15, r3
 8016eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016eee:	eddf 6a81 	vldr	s13, [pc, #516]	; 80170f4 <MEMS_runMagCal+0x17bc>
 8016ef2:	ee86 7a88 	vdiv.f32	s14, s13, s16
 8016ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016efe:	dc08      	bgt.n	8016f12 <MEMS_runMagCal+0x15da>
 8016f00:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8016f04:	ee17 3a10 	vmov	r3, s14
 8016f08:	b21b      	sxth	r3, r3
 8016f0a:	ee07 3a90 	vmov	s15, r3
 8016f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f12:	ee27 7a88 	vmul.f32	s14, s15, s16
 8016f16:	eddf 7a70 	vldr	s15, [pc, #448]	; 80170d8 <MEMS_runMagCal+0x17a0>
 8016f1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f22:	f340 8424 	ble.w	801776e <MEMS_runMagCal+0x1e36>
 8016f26:	eddf 7a6d 	vldr	s15, [pc, #436]	; 80170dc <MEMS_runMagCal+0x17a4>
 8016f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f32:	f140 841c 	bpl.w	801776e <MEMS_runMagCal+0x1e36>
 8016f36:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80170e0 <MEMS_runMagCal+0x17a8>
 8016f3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016f3e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016f42:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016f4a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80170f4 <MEMS_runMagCal+0x17bc>
 8016f4e:	eddf ba6b 	vldr	s23, [pc, #428]	; 80170fc <MEMS_runMagCal+0x17c4>
 8016f52:	ed9f ba64 	vldr	s22, [pc, #400]	; 80170e4 <MEMS_runMagCal+0x17ac>
 8016f56:	eddf aa64 	vldr	s21, [pc, #400]	; 80170e8 <MEMS_runMagCal+0x17b0>
 8016f5a:	9d03      	ldr	r5, [sp, #12]
 8016f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016f60:	ee68 4a09 	vmul.f32	s9, s16, s18
 8016f64:	ee28 aa0a 	vmul.f32	s20, s16, s20
 8016f68:	ee68 9a29 	vmul.f32	s19, s16, s19
 8016f6c:	edc4 4a00 	vstr	s9, [r4]
 8016f70:	ed84 aa01 	vstr	s20, [r4, #4]
 8016f74:	edc4 9a02 	vstr	s19, [r4, #8]
 8016f78:	edc4 7a03 	vstr	s15, [r4, #12]
 8016f7c:	edc4 7a06 	vstr	s15, [r4, #24]
 8016f80:	ab11      	add	r3, sp, #68	; 0x44
 8016f82:	ee1c 0a10 	vmov	r0, s24
 8016f86:	aa2d      	add	r2, sp, #180	; 0xb4
 8016f88:	eeb0 0a48 	vmov.f32	s0, s16
 8016f8c:	4621      	mov	r1, r4
 8016f8e:	f7fe fa01 	bl	8015394 <MEMS_SolveLinearEq>
 8016f92:	1c6b      	adds	r3, r5, #1
 8016f94:	2800      	cmp	r0, #0
 8016f96:	f43e aed1 	beq.w	8015d3c <MEMS_runMagCal+0x404>
 8016f9a:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 8016f9e:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 8016fa2:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 8016fa6:	edd4 4a00 	vldr	s9, [r4]
 8016faa:	ed94 5a01 	vldr	s10, [r4, #4]
 8016fae:	edd4 5a02 	vldr	s11, [r4, #8]
 8016fb2:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 8016fb6:	ed94 6a03 	vldr	s12, [r4, #12]
 8016fba:	eef0 6ae3 	vabs.f32	s13, s7
 8016fbe:	eef0 7ac3 	vabs.f32	s15, s6
 8016fc2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fca:	bfb8      	it	lt
 8016fcc:	eef0 7a66 	vmovlt.f32	s15, s13
 8016fd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fd8:	bfb8      	it	lt
 8016fda:	eef0 7a6b 	vmovlt.f32	s15, s23
 8016fde:	eef0 6ac4 	vabs.f32	s13, s8
 8016fe2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fea:	bfb8      	it	lt
 8016fec:	eef0 6a67 	vmovlt.f32	s13, s15
 8016ff0:	ee74 4a83 	vadd.f32	s9, s9, s6
 8016ff4:	ee35 5a23 	vadd.f32	s10, s10, s7
 8016ff8:	ee75 5a84 	vadd.f32	s11, s11, s8
 8016ffc:	ee36 6a07 	vadd.f32	s12, s12, s14
 8017000:	eef4 6acb 	vcmpe.f32	s13, s22
 8017004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017008:	edc4 4a00 	vstr	s9, [r4]
 801700c:	ed84 5a01 	vstr	s10, [r4, #4]
 8017010:	edc4 5a02 	vstr	s11, [r4, #8]
 8017014:	ed84 6a03 	vstr	s12, [r4, #12]
 8017018:	eef0 7ac7 	vabs.f32	s15, s14
 801701c:	d507      	bpl.n	801702e <MEMS_runMagCal+0x16f6>
 801701e:	eef4 7aea 	vcmpe.f32	s15, s21
 8017022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017026:	d502      	bpl.n	801702e <MEMS_runMagCal+0x16f6>
 8017028:	2d01      	cmp	r5, #1
 801702a:	f63e ae8b 	bhi.w	8015d44 <MEMS_runMagCal+0x40c>
 801702e:	b2dd      	uxtb	r5, r3
 8017030:	2d05      	cmp	r5, #5
 8017032:	d1a5      	bne.n	8016f80 <MEMS_runMagCal+0x1648>
 8017034:	f7fe be86 	b.w	8015d44 <MEMS_runMagCal+0x40c>
 8017038:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 801703c:	eddb 7a1a 	vldr	s15, [fp, #104]	; 0x68
 8017040:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 8017044:	ed9f 4a29 	vldr	s8, [pc, #164]	; 80170ec <MEMS_runMagCal+0x17b4>
 8017048:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801704c:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8017050:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017054:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8017058:	ee67 7a84 	vmul.f32	s15, s15, s8
 801705c:	eef4 7ae4 	vcmpe.f32	s15, s9
 8017060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017064:	bf88      	it	hi
 8017066:	eef0 7a64 	vmovhi.f32	s15, s9
 801706a:	eef4 7ac5 	vcmpe.f32	s15, s10
 801706e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017072:	bfb8      	it	lt
 8017074:	eef0 7a45 	vmovlt.f32	s15, s10
 8017078:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801707c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017084:	dc0e      	bgt.n	80170a4 <MEMS_runMagCal+0x176c>
 8017086:	ee26 6a27 	vmul.f32	s12, s12, s15
 801708a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801708e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017092:	dc07      	bgt.n	80170a4 <MEMS_runMagCal+0x176c>
 8017094:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8017098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801709c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170a0:	f77f ad73 	ble.w	8016b8a <MEMS_runMagCal+0x1252>
 80170a4:	2300      	movs	r3, #0
 80170a6:	f88b 3000 	strb.w	r3, [fp]
 80170aa:	f7ff b880 	b.w	80161ae <MEMS_runMagCal+0x876>
 80170ae:	2300      	movs	r3, #0
 80170b0:	9307      	str	r3, [sp, #28]
 80170b2:	2301      	movs	r3, #1
 80170b4:	9303      	str	r3, [sp, #12]
 80170b6:	f7ff bb61 	b.w	801677c <MEMS_runMagCal+0xe44>
 80170ba:	3301      	adds	r3, #1
 80170bc:	fb93 f2f7 	sdiv	r2, r3, r7
 80170c0:	fb07 3212 	mls	r2, r7, r2, r3
 80170c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80170c6:	b212      	sxth	r2, r2
 80170c8:	46bc      	mov	ip, r7
 80170ca:	f7ff bb75 	b.w	80167b8 <MEMS_runMagCal+0xe80>
 80170ce:	bf00      	nop
 80170d0:	42960000 	.word	0x42960000
 80170d4:	430d0000 	.word	0x430d0000
 80170d8:	41966667 	.word	0x41966667
 80170dc:	433c0000 	.word	0x433c0000
 80170e0:	3c2e4c41 	.word	0x3c2e4c41
 80170e4:	3e99999a 	.word	0x3e99999a
 80170e8:	3f666666 	.word	0x3f666666
 80170ec:	3eaaaaab 	.word	0x3eaaaaab
 80170f0:	358637bd 	.word	0x358637bd
 80170f4:	423c0000 	.word	0x423c0000
 80170f8:	3a83126f 	.word	0x3a83126f
 80170fc:	00000000 	.word	0x00000000
 8017100:	eddd 7a08 	vldr	s15, [sp, #32]
 8017104:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 80170f8 <MEMS_runMagCal+0x17c0>
 8017108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801710c:	ee07 3a10 	vmov	s14, r3
 8017110:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017114:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8017118:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 801711c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8017120:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017128:	f63f aa67 	bhi.w	80165fa <MEMS_runMagCal+0xcc2>
 801712c:	9b07      	ldr	r3, [sp, #28]
 801712e:	2b00      	cmp	r3, #0
 8017130:	f43f a83d 	beq.w	80161ae <MEMS_runMagCal+0x876>
 8017134:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8017138:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801713c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8017140:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017144:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801714c:	bf4c      	ite	mi
 801714e:	2301      	movmi	r3, #1
 8017150:	2300      	movpl	r3, #0
 8017152:	9307      	str	r3, [sp, #28]
 8017154:	f7ff ba55 	b.w	8016602 <MEMS_runMagCal+0xcca>
 8017158:	fb92 f1f0 	sdiv	r1, r2, r0
 801715c:	fb00 2211 	mls	r2, r0, r1, r2
 8017160:	b211      	sxth	r1, r2
 8017162:	4605      	mov	r5, r0
 8017164:	f7ff b8da 	b.w	801631c <MEMS_runMagCal+0x9e4>
 8017168:	2200      	movs	r2, #0
 801716a:	23ff      	movs	r3, #255	; 0xff
 801716c:	ee1c 0a10 	vmov	r0, s24
 8017170:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8017174:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8017178:	eeb0 0a49 	vmov.f32	s0, s18
 801717c:	4649      	mov	r1, r9
 801717e:	f7f7 fd11 	bl	800eba4 <MEMS_updateMagBufferIndex>
 8017182:	f7ff b90b 	b.w	801639c <MEMS_runMagCal+0xa64>
 8017186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801718a:	fb03 f60c 	mul.w	r6, r3, ip
 801718e:	fb03 f202 	mul.w	r2, r3, r2
 8017192:	fb03 f301 	mul.w	r3, r3, r1
 8017196:	ee06 6a90 	vmov	s13, r6
 801719a:	ee07 2a10 	vmov	s14, r2
 801719e:	ee07 3a90 	vmov	s15, r3
 80171a2:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 80170f0 <MEMS_runMagCal+0x17b8>
 80171a6:	9e05      	ldr	r6, [sp, #20]
 80171a8:	9400      	str	r4, [sp, #0]
 80171aa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80171ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80171b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171b6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80171ba:	ee27 7a06 	vmul.f32	s14, s14, s12
 80171be:	ee67 7a86 	vmul.f32	s15, s15, s12
 80171c2:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 80171c6:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80171ca:	e9c5 0003 	strd	r0, r0, [r5, #12]
 80171ce:	e9c5 0005 	strd	r0, r0, [r5, #20]
 80171d2:	6028      	str	r0, [r5, #0]
 80171d4:	ed96 0a01 	vldr	s0, [r6, #4]
 80171d8:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80171dc:	4642      	mov	r2, r8
 80171de:	ab0d      	add	r3, sp, #52	; 0x34
 80171e0:	f10b 014a 	add.w	r1, fp, #74	; 0x4a
 80171e4:	ad0e      	add	r5, sp, #56	; 0x38
 80171e6:	ee1c 0a10 	vmov	r0, s24
 80171ea:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 80171ee:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 80171f2:	f7f7 fd79 	bl	800ece8 <getMagStats.constprop.0>
 80171f6:	9500      	str	r5, [sp, #0]
 80171f8:	ed96 0a01 	vldr	s0, [r6, #4]
 80171fc:	ee1c 0a10 	vmov	r0, s24
 8017200:	aa2d      	add	r2, sp, #180	; 0xb4
 8017202:	ab0d      	add	r3, sp, #52	; 0x34
 8017204:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8017208:	f7f7 fd6e 	bl	800ece8 <getMagStats.constprop.0>
 801720c:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 80170f4 <MEMS_runMagCal+0x17bc>
 8017210:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8017214:	ed95 7a00 	vldr	s14, [r5]
 8017218:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801721c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8017220:	eef0 7ae7 	vabs.f32	s15, s15
 8017224:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801722c:	d505      	bpl.n	801723a <MEMS_runMagCal+0x1902>
 801722e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017236:	f100 81fa 	bmi.w	801762e <MEMS_runMagCal+0x1cf6>
 801723a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 801723e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017246:	f140 81a8 	bpl.w	801759a <MEMS_runMagCal+0x1c62>
 801724a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801724e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017252:	9b03      	ldr	r3, [sp, #12]
 8017254:	bfb8      	it	lt
 8017256:	2302      	movlt	r3, #2
 8017258:	edd4 6a00 	vldr	s13, [r4]
 801725c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8017260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017264:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801726c:	f57e af9f 	bpl.w	80161ae <MEMS_runMagCal+0x876>
 8017270:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 8017274:	429a      	cmp	r2, r3
 8017276:	f63e af9a 	bhi.w	80161ae <MEMS_runMagCal+0x876>
 801727a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801727e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017282:	eef4 6ae7 	vcmpe.f32	s13, s15
 8017286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801728a:	d40e      	bmi.n	80172aa <MEMS_runMagCal+0x1972>
 801728c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8017290:	eef4 6ae7 	vcmpe.f32	s13, s15
 8017294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017298:	f140 80d4 	bpl.w	8017444 <MEMS_runMagCal+0x1b0c>
 801729c:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
 80172a0:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80172a4:	429a      	cmp	r2, r3
 80172a6:	f080 80cd 	bcs.w	8017444 <MEMS_runMagCal+0x1b0c>
 80172aa:	9b05      	ldr	r3, [sp, #20]
 80172ac:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 80172b0:	f9bb 104c 	ldrsh.w	r1, [fp, #76]	; 0x4c
 80172b4:	f9bd 7086 	ldrsh.w	r7, [sp, #134]	; 0x86
 80172b8:	f9bb 004a 	ldrsh.w	r0, [fp, #74]	; 0x4a
 80172bc:	edd3 5a01 	vldr	s11, [r3, #4]
 80172c0:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
 80172c4:	f9bb 204e 	ldrsh.w	r2, [fp, #78]	; 0x4e
 80172c8:	1b8b      	subs	r3, r1, r6
 80172ca:	eba0 0c07 	sub.w	ip, r0, r7
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	bfb8      	it	lt
 80172d2:	425b      	neglt	r3, r3
 80172d4:	f1bc 0f00 	cmp.w	ip, #0
 80172d8:	bfb8      	it	lt
 80172da:	f1cc 0c00 	rsblt	ip, ip, #0
 80172de:	4563      	cmp	r3, ip
 80172e0:	bfb8      	it	lt
 80172e2:	4663      	movlt	r3, ip
 80172e4:	eba2 0c04 	sub.w	ip, r2, r4
 80172e8:	f1bc 0f00 	cmp.w	ip, #0
 80172ec:	b21b      	sxth	r3, r3
 80172ee:	bfb8      	it	lt
 80172f0:	f1cc 0c00 	rsblt	ip, ip, #0
 80172f4:	4563      	cmp	r3, ip
 80172f6:	bfb8      	it	lt
 80172f8:	4663      	movlt	r3, ip
 80172fa:	b21b      	sxth	r3, r3
 80172fc:	ee07 3a90 	vmov	s15, r3
 8017300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017304:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8017308:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801730c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017314:	f140 8096 	bpl.w	8017444 <MEMS_runMagCal+0x1b0c>
 8017318:	ee37 7a26 	vadd.f32	s14, s14, s13
 801731c:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 8017320:	ee86 2a87 	vdiv.f32	s4, s13, s14
 8017324:	ee04 3a90 	vmov	s9, r3
 8017328:	f8bb 3052 	ldrh.w	r3, [fp, #82]	; 0x52
 801732c:	ee05 3a10 	vmov	s10, r3
 8017330:	f8bb 3054 	ldrh.w	r3, [fp, #84]	; 0x54
 8017334:	ee07 0a90 	vmov	s15, r0
 8017338:	ee05 3a90 	vmov	s11, r3
 801733c:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8017340:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8017344:	ee36 4a42 	vsub.f32	s8, s12, s4
 8017348:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801734c:	ee06 3a10 	vmov	s12, r3
 8017350:	ee03 7a90 	vmov	s7, r7
 8017354:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8017358:	ee07 1a90 	vmov	s15, r1
 801735c:	ee00 3a90 	vmov	s1, r3
 8017360:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017364:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 8017368:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801736c:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 8017370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017374:	ee64 4a84 	vmul.f32	s9, s9, s8
 8017378:	ee03 6a90 	vmov	s7, r6
 801737c:	eee2 6a22 	vfma.f32	s13, s4, s5
 8017380:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8017384:	ee07 2a90 	vmov	s15, r2
 8017388:	ee01 3a10 	vmov	s2, r3
 801738c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017390:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8017394:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 8017398:	eee2 4a20 	vfma.f32	s9, s4, s1
 801739c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80173a0:	ee01 3a90 	vmov	s3, r3
 80173a4:	ee25 5a04 	vmul.f32	s10, s10, s8
 80173a8:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80173ac:	eea2 7a03 	vfma.f32	s14, s4, s6
 80173b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80173b4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80173b8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80173bc:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80173c0:	ee03 4a90 	vmov	s7, r4
 80173c4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80173c8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80173cc:	ee65 5a84 	vmul.f32	s11, s11, s8
 80173d0:	ee26 6a04 	vmul.f32	s12, s12, s8
 80173d4:	ee16 2a90 	vmov	r2, s13
 80173d8:	ee04 3a10 	vmov	s8, r3
 80173dc:	eea2 5a01 	vfma.f32	s10, s4, s2
 80173e0:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 80173e4:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80173e8:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 80173ec:	eee2 7a23 	vfma.f32	s15, s4, s7
 80173f0:	ee14 2a90 	vmov	r2, s9
 80173f4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80173f8:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80173fc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017400:	eee2 5a21 	vfma.f32	s11, s4, s3
 8017404:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 8017408:	eea2 6a04 	vfma.f32	s12, s4, s8
 801740c:	ee17 2a10 	vmov	r2, s14
 8017410:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 8017414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017418:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 801741c:	ee15 2a10 	vmov	r2, s10
 8017420:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 8017424:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8017428:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 801742c:	ee17 2a90 	vmov	r2, s15
 8017430:	ee16 3a10 	vmov	r3, s12
 8017434:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 8017438:	ee15 2a90 	vmov	r2, s11
 801743c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8017440:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 8017444:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8017446:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 801744a:	f7fe bda2 	b.w	8015f92 <MEMS_runMagCal+0x65a>
 801744e:	ee1c 0a10 	vmov	r0, s24
 8017452:	eeb0 0a49 	vmov.f32	s0, s18
 8017456:	4649      	mov	r1, r9
 8017458:	f7f7 fba4 	bl	800eba4 <MEMS_updateMagBufferIndex>
 801745c:	f7ff b89f 	b.w	801659e <MEMS_runMagCal+0xc66>
 8017460:	eddd 7a08 	vldr	s15, [sp, #32]
 8017464:	ed1f 7adc 	vldr	s14, [pc, #-880]	; 80170f8 <MEMS_runMagCal+0x17c0>
 8017468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801746c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017470:	e660      	b.n	8017134 <MEMS_runMagCal+0x17fc>
 8017472:	ed5f 6ade 	vldr	s13, [pc, #-888]	; 80170fc <MEMS_runMagCal+0x17c4>
 8017476:	1c6b      	adds	r3, r5, #1
 8017478:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801747c:	ad0e      	add	r5, sp, #56	; 0x38
 801747e:	fb93 f1f6 	sdiv	r1, r3, r6
 8017482:	fa1f fc86 	uxth.w	ip, r6
 8017486:	fb06 3311 	mls	r3, r6, r1, r3
 801748a:	edc5 6a00 	vstr	s13, [r5]
 801748e:	2e00      	cmp	r6, #0
 8017490:	f000 80e1 	beq.w	8017656 <MEMS_runMagCal+0x1d1e>
 8017494:	b29b      	uxth	r3, r3
 8017496:	f10c 3cff 	add.w	ip, ip, #4294967295
 801749a:	1c58      	adds	r0, r3, #1
 801749c:	eeb0 6a66 	vmov.f32	s12, s13
 80174a0:	fa10 fc8c 	uxtah	ip, r0, ip
 80174a4:	f241 2e5c 	movw	lr, #4700	; 0x125c
 80174a8:	4619      	mov	r1, r3
 80174aa:	e000      	b.n	80174ae <MEMS_runMagCal+0x1b76>
 80174ac:	3001      	adds	r0, #1
 80174ae:	fbb1 f3f6 	udiv	r3, r1, r6
 80174b2:	fb06 1313 	mls	r3, r6, r3, r1
 80174b6:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80174ba:	8a99      	ldrh	r1, [r3, #20]
 80174bc:	4571      	cmp	r1, lr
 80174be:	f5a1 5392 	sub.w	r3, r1, #4672	; 0x1240
 80174c2:	f1a3 031c 	sub.w	r3, r3, #28
 80174c6:	bf98      	it	ls
 80174c8:	ebae 0301 	subls.w	r3, lr, r1
 80174cc:	b29b      	uxth	r3, r3
 80174ce:	fb03 f303 	mul.w	r3, r3, r3
 80174d2:	ee07 1a10 	vmov	s14, r1
 80174d6:	ee07 3a90 	vmov	s15, r3
 80174da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80174de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80174e2:	4584      	cmp	ip, r0
 80174e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80174e8:	ee36 6a07 	vadd.f32	s12, s12, s14
 80174ec:	4601      	mov	r1, r0
 80174ee:	d1dd      	bne.n	80174ac <MEMS_runMagCal+0x1b74>
 80174f0:	ee07 4a90 	vmov	s15, r4
 80174f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80174f8:	eddf 5ae6 	vldr	s11, [pc, #920]	; 8017894 <MEMS_runMagCal+0x1f5c>
 80174fc:	ed9f 5ae6 	vldr	s10, [pc, #920]	; 8017898 <MEMS_runMagCal+0x1f60>
 8017500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017504:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8017508:	eef1 7ac7 	vsqrt.f32	s15, s14
 801750c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8017510:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017514:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8017518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801751c:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8017520:	edc5 7a00 	vstr	s15, [r5]
 8017524:	dd47      	ble.n	80175b6 <MEMS_runMagCal+0x1c7e>
 8017526:	eddf 7add 	vldr	s15, [pc, #884]	; 801789c <MEMS_runMagCal+0x1f64>
 801752a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801752e:	2302      	movs	r3, #2
 8017530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017534:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8017538:	f77e aead 	ble.w	8016296 <MEMS_runMagCal+0x95e>
 801753c:	2301      	movs	r3, #1
 801753e:	f88b 3001 	strb.w	r3, [fp, #1]
 8017542:	f7fe bea8 	b.w	8016296 <MEMS_runMagCal+0x95e>
 8017546:	ee1c 0a10 	vmov	r0, s24
 801754a:	eeb0 0a49 	vmov.f32	s0, s18
 801754e:	4649      	mov	r1, r9
 8017550:	f7f7 fb28 	bl	800eba4 <MEMS_updateMagBufferIndex>
 8017554:	f7fe bf0d 	b.w	8016372 <MEMS_runMagCal+0xa3a>
 8017558:	9b02      	ldr	r3, [sp, #8]
 801755a:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 801755e:	f8db 100c 	ldr.w	r1, [fp, #12]
 8017562:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 8017566:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 801756a:	4413      	add	r3, r2
 801756c:	4299      	cmp	r1, r3
 801756e:	f4bf ad99 	bcs.w	80170a4 <MEMS_runMagCal+0x176c>
 8017572:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017578:	fb03 f301 	mul.w	r3, r3, r1
 801757c:	3364      	adds	r3, #100	; 0x64
 801757e:	4293      	cmp	r3, r2
 8017580:	bf38      	it	cc
 8017582:	4613      	movcc	r3, r2
 8017584:	2200      	movs	r2, #0
 8017586:	f8cb 300c 	str.w	r3, [fp, #12]
 801758a:	f88b 2000 	strb.w	r2, [fp]
 801758e:	f7fe be0e 	b.w	80161ae <MEMS_runMagCal+0x876>
 8017592:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017596:	f7ff ba6f 	b.w	8016a78 <MEMS_runMagCal+0x1140>
 801759a:	9b03      	ldr	r3, [sp, #12]
 801759c:	e65c      	b.n	8017258 <MEMS_runMagCal+0x1920>
 801759e:	4619      	mov	r1, r3
 80175a0:	9b02      	ldr	r3, [sp, #8]
 80175a2:	3301      	adds	r3, #1
 80175a4:	fb93 f2f1 	sdiv	r2, r3, r1
 80175a8:	fb01 3212 	mls	r2, r1, r2, r3
 80175ac:	9304      	str	r3, [sp, #16]
 80175ae:	b212      	sxth	r2, r2
 80175b0:	4689      	mov	r9, r1
 80175b2:	f7ff ba11 	b.w	80169d8 <MEMS_runMagCal+0x10a0>
 80175b6:	eddf 7aba 	vldr	s15, [pc, #744]	; 80178a0 <MEMS_runMagCal+0x1f68>
 80175ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80175be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175c2:	eddf 7ab6 	vldr	s15, [pc, #728]	; 801789c <MEMS_runMagCal+0x1f64>
 80175c6:	d434      	bmi.n	8017632 <MEMS_runMagCal+0x1cfa>
 80175c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80175cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175d0:	bfc4      	itt	gt
 80175d2:	2301      	movgt	r3, #1
 80175d4:	f88b 3001 	strbgt.w	r3, [fp, #1]
 80175d8:	f7ff b892 	b.w	8016700 <MEMS_runMagCal+0xdc8>
 80175dc:	9b05      	ldr	r3, [sp, #20]
 80175de:	f89b 1011 	ldrb.w	r1, [fp, #17]
 80175e2:	ed93 0a01 	vldr	s0, [r3, #4]
 80175e6:	f7fe bd84 	b.w	80160f2 <MEMS_runMagCal+0x7ba>
 80175ea:	2303      	movs	r3, #3
 80175ec:	9303      	str	r3, [sp, #12]
 80175ee:	f7fe bdd4 	b.w	801619a <MEMS_runMagCal+0x862>
 80175f2:	4619      	mov	r1, r3
 80175f4:	f7ff ba78 	b.w	8016ae8 <MEMS_runMagCal+0x11b0>
 80175f8:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 80175fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8017600:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017608:	f73f ad4c 	bgt.w	80170a4 <MEMS_runMagCal+0x176c>
 801760c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017610:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8017614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017618:	f73f ad44 	bgt.w	80170a4 <MEMS_runMagCal+0x176c>
 801761c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8017620:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8017624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017628:	f77f aaaf 	ble.w	8016b8a <MEMS_runMagCal+0x1252>
 801762c:	e53a      	b.n	80170a4 <MEMS_runMagCal+0x176c>
 801762e:	2303      	movs	r3, #3
 8017630:	e612      	b.n	8017258 <MEMS_runMagCal+0x1920>
 8017632:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017636:	2300      	movs	r3, #0
 8017638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801763c:	f88b 3001 	strb.w	r3, [fp, #1]
 8017640:	f04f 0103 	mov.w	r1, #3
 8017644:	bfc8      	it	gt
 8017646:	2301      	movgt	r3, #1
 8017648:	f88b 1058 	strb.w	r1, [fp, #88]	; 0x58
 801764c:	bfc8      	it	gt
 801764e:	f88b 3001 	strbgt.w	r3, [fp, #1]
 8017652:	f7ff b858 	b.w	8016706 <MEMS_runMagCal+0xdce>
 8017656:	2303      	movs	r3, #3
 8017658:	f88b c001 	strb.w	ip, [fp, #1]
 801765c:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8017660:	f7ff b851 	b.w	8016706 <MEMS_runMagCal+0xdce>
 8017664:	9b04      	ldr	r3, [sp, #16]
 8017666:	fb93 f7f9 	sdiv	r7, r3, r9
 801766a:	fb09 3717 	mls	r7, r9, r7, r3
 801766e:	b23f      	sxth	r7, r7
 8017670:	f7ff ba9a 	b.w	8016ba8 <MEMS_runMagCal+0x1270>
 8017674:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80178a4 <MEMS_runMagCal+0x1f6c>
 8017678:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801767c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8017680:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8017684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017688:	ee87 0a08 	vdiv.f32	s0, s14, s16
 801768c:	ee17 2a90 	vmov	r2, s15
 8017690:	b291      	uxth	r1, r2
 8017692:	b113      	cbz	r3, 801769a <MEMS_runMagCal+0x1d62>
 8017694:	3b01      	subs	r3, #1
 8017696:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 801769a:	ee1c 0a10 	vmov	r0, s24
 801769e:	f7f7 fa81 	bl	800eba4 <MEMS_updateMagBufferIndex>
 80176a2:	eddd 7a08 	vldr	s15, [sp, #32]
 80176a6:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80176aa:	eddf 7a7f 	vldr	s15, [pc, #508]	; 80178a8 <MEMS_runMagCal+0x1f70>
 80176ae:	ee20 0a27 	vmul.f32	s0, s0, s15
 80176b2:	f001 f831 	bl	8018718 <roundf>
 80176b6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80176ba:	2300      	movs	r3, #0
 80176bc:	ed8b 0a01 	vstr	s0, [fp, #4]
 80176c0:	f88b 3000 	strb.w	r3, [fp]
 80176c4:	f7fe bd73 	b.w	80161ae <MEMS_runMagCal+0x876>
 80176c8:	fb93 f2f6 	sdiv	r2, r3, r6
 80176cc:	fb06 3312 	mls	r3, r6, r2, r3
 80176d0:	b21a      	sxth	r2, r3
 80176d2:	4630      	mov	r0, r6
 80176d4:	f7ff bb00 	b.w	8016cd8 <MEMS_runMagCal+0x13a0>
 80176d8:	ed9b 0a17 	vldr	s0, [fp, #92]	; 0x5c
 80176dc:	f001 f81c 	bl	8018718 <roundf>
 80176e0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80176e4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80176e8:	ee17 3a90 	vmov	r3, s15
 80176ec:	ed9b 0a18 	vldr	s0, [fp, #96]	; 0x60
 80176f0:	f8a9 3000 	strh.w	r3, [r9]
 80176f4:	f001 f810 	bl	8018718 <roundf>
 80176f8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80176fc:	ed9b 0a19 	vldr	s0, [fp, #100]	; 0x64
 8017700:	ee17 3a90 	vmov	r3, s15
 8017704:	f8a9 3002 	strh.w	r3, [r9, #2]
 8017708:	f001 f806 	bl	8018718 <roundf>
 801770c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017710:	ac0f      	add	r4, sp, #60	; 0x3c
 8017712:	ee17 5a90 	vmov	r5, s15
 8017716:	9400      	str	r4, [sp, #0]
 8017718:	ee1c 0a10 	vmov	r0, s24
 801771c:	4649      	mov	r1, r9
 801771e:	ab10      	add	r3, sp, #64	; 0x40
 8017720:	eeb0 0a48 	vmov.f32	s0, s16
 8017724:	f10b 0268 	add.w	r2, fp, #104	; 0x68
 8017728:	f8a9 5004 	strh.w	r5, [r9, #4]
 801772c:	f7f7 fadc 	bl	800ece8 <getMagStats.constprop.0>
 8017730:	ed94 7a00 	vldr	s14, [r4]
 8017734:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80178ac <MEMS_runMagCal+0x1f74>
 8017738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801773c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017740:	d50e      	bpl.n	8017760 <MEMS_runMagCal+0x1e28>
 8017742:	b968      	cbnz	r0, 8017760 <MEMS_runMagCal+0x1e28>
 8017744:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8017748:	b32b      	cbz	r3, 8017796 <MEMS_runMagCal+0x1e5e>
 801774a:	f89b 3049 	ldrb.w	r3, [fp, #73]	; 0x49
 801774e:	ee07 3a90 	vmov	s15, r3
 8017752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017756:	eef4 8ae7 	vcmpe.f32	s17, s15
 801775a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801775e:	dc1a      	bgt.n	8017796 <MEMS_runMagCal+0x1e5e>
 8017760:	2300      	movs	r3, #0
 8017762:	f8c9 3000 	str.w	r3, [r9]
 8017766:	f8a9 3004 	strh.w	r3, [r9, #4]
 801776a:	f7ff ba97 	b.w	8016c9c <MEMS_runMagCal+0x1364>
 801776e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017772:	f7ff bbea 	b.w	8016f4a <MEMS_runMagCal+0x1612>
 8017776:	eddf 9a4e 	vldr	s19, [pc, #312]	; 80178b0 <MEMS_runMagCal+0x1f78>
 801777a:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 801777e:	ed9d aa1e 	vldr	s20, [sp, #120]	; 0x78
 8017782:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 8017786:	ee29 9aa4 	vmul.f32	s18, s19, s9
 801778a:	ee29 aa8a 	vmul.f32	s20, s19, s20
 801778e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8017792:	f7ff bb2e 	b.w	8016df2 <MEMS_runMagCal+0x14ba>
 8017796:	eddd 7a08 	vldr	s15, [sp, #32]
 801779a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801779e:	eddf 7a42 	vldr	s15, [pc, #264]	; 80178a8 <MEMS_runMagCal+0x1f70>
 80177a2:	2303      	movs	r3, #3
 80177a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80177a8:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80177ac:	e781      	b.n	80176b2 <MEMS_runMagCal+0x1d7a>
 80177ae:	eddf 6a41 	vldr	s13, [pc, #260]	; 80178b4 <MEMS_runMagCal+0x1f7c>
 80177b2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80177b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ba:	f77e ab1b 	ble.w	8015df4 <MEMS_runMagCal+0x4bc>
 80177be:	f7fe bb21 	b.w	8015e04 <MEMS_runMagCal+0x4cc>
 80177c2:	2224      	movs	r2, #36	; 0x24
 80177c4:	2100      	movs	r1, #0
 80177c6:	a82d      	add	r0, sp, #180	; 0xb4
 80177c8:	f002 fd9e 	bl	801a308 <memset>
 80177cc:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80178b8 <MEMS_runMagCal+0x1f80>
 80177d0:	eec7 9a89 	vdiv.f32	s19, s15, s18
 80177d4:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 80177d8:	4627      	mov	r7, r4
 80177da:	ae2d      	add	r6, sp, #180	; 0xb4
 80177dc:	2500      	movs	r5, #0
 80177de:	3501      	adds	r5, #1
 80177e0:	ecb7 0a01 	vldmia	r7!, {s0}
 80177e4:	ee28 0a80 	vmul.f32	s0, s17, s0
 80177e8:	f000 ff96 	bl	8018718 <roundf>
 80177ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80177f0:	4633      	mov	r3, r6
 80177f2:	edc3 9a00 	vstr	s19, [r3]
 80177f6:	ee10 3a10 	vmov	r3, s0
 80177fa:	2d03      	cmp	r5, #3
 80177fc:	f829 3b02 	strh.w	r3, [r9], #2
 8017800:	f106 0610 	add.w	r6, r6, #16
 8017804:	d1eb      	bne.n	80177de <MEMS_runMagCal+0x1ea6>
 8017806:	ad12      	add	r5, sp, #72	; 0x48
 8017808:	9500      	str	r5, [sp, #0]
 801780a:	ab2b      	add	r3, sp, #172	; 0xac
 801780c:	eeb0 0a48 	vmov.f32	s0, s16
 8017810:	ee1c 0a10 	vmov	r0, s24
 8017814:	a915      	add	r1, sp, #84	; 0x54
 8017816:	aa2d      	add	r2, sp, #180	; 0xb4
 8017818:	f7f7 fa66 	bl	800ece8 <getMagStats.constprop.0>
 801781c:	eddf 3a26 	vldr	s7, [pc, #152]	; 80178b8 <MEMS_runMagCal+0x1f80>
 8017820:	ed94 4a03 	vldr	s8, [r4, #12]
 8017824:	edd5 7a00 	vldr	s15, [r5]
 8017828:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 801782c:	edd4 6a06 	vldr	s13, [r4, #24]
 8017830:	edd4 4a00 	vldr	s9, [r4]
 8017834:	ed94 5a01 	vldr	s10, [r4, #4]
 8017838:	edd4 5a02 	vldr	s11, [r4, #8]
 801783c:	ee83 7a84 	vdiv.f32	s14, s7, s8
 8017840:	ad2e      	add	r5, sp, #184	; 0xb8
 8017842:	2300      	movs	r3, #0
 8017844:	e9c5 3300 	strd	r3, r3, [r5]
 8017848:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801784c:	60ab      	str	r3, [r5, #8]
 801784e:	61ab      	str	r3, [r5, #24]
 8017850:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017854:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8017858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801785c:	ee84 0a88 	vdiv.f32	s0, s9, s16
 8017860:	eec5 9a08 	vdiv.f32	s19, s10, s16
 8017864:	ee85 aa88 	vdiv.f32	s20, s11, s16
 8017868:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801786c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8017870:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8017874:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8017878:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 801787c:	d405      	bmi.n	801788a <MEMS_runMagCal+0x1f52>
 801787e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017886:	f57e aa9b 	bpl.w	8015dc0 <MEMS_runMagCal+0x488>
 801788a:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 80178bc <MEMS_runMagCal+0x1f84>
 801788e:	f7fe ba9d 	b.w	8015dcc <MEMS_runMagCal+0x494>
 8017892:	bf00      	nop
 8017894:	3c23d70a 	.word	0x3c23d70a
 8017898:	4b095440 	.word	0x4b095440
 801789c:	481c4000 	.word	0x481c4000
 80178a0:	471c4000 	.word	0x471c4000
 80178a4:	433d0000 	.word	0x433d0000
 80178a8:	3a83126f 	.word	0x3a83126f
 80178ac:	3ff4cccd 	.word	0x3ff4cccd
 80178b0:	7f800000 	.word	0x7f800000
 80178b4:	3ee66666 	.word	0x3ee66666
 80178b8:	423c0000 	.word	0x423c0000
 80178bc:	00000000 	.word	0x00000000
 80178c0:	f644 42f4 	movw	r2, #19700	; 0x4cf4
 80178c4:	4293      	cmp	r3, r2
 80178c6:	f67e acac 	bls.w	8016222 <MEMS_runMagCal+0x8ea>
 80178ca:	f7fe bca0 	b.w	801620e <MEMS_runMagCal+0x8d6>
 80178ce:	bf00      	nop

080178d0 <MotionFX_GetStateSize>:
 80178d0:	f44f 6018 	mov.w	r0, #2432	; 0x980
 80178d4:	4770      	bx	lr
 80178d6:	bf00      	nop

080178d8 <MotionFX_initialize>:
 80178d8:	4a3b      	ldr	r2, [pc, #236]	; (80179c8 <MotionFX_initialize+0xf0>)
 80178da:	493c      	ldr	r1, [pc, #240]	; (80179cc <MotionFX_initialize+0xf4>)
 80178dc:	6813      	ldr	r3, [r2, #0]
 80178de:	f023 0301 	bic.w	r3, r3, #1
 80178e2:	b530      	push	{r4, r5, lr}
 80178e4:	6013      	str	r3, [r2, #0]
 80178e6:	680b      	ldr	r3, [r1, #0]
 80178e8:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80178ec:	4013      	ands	r3, r2
 80178ee:	f24c 2540 	movw	r5, #49728	; 0xc240
 80178f2:	42ab      	cmp	r3, r5
 80178f4:	b085      	sub	sp, #20
 80178f6:	4604      	mov	r4, r0
 80178f8:	d013      	beq.n	8017922 <MotionFX_initialize+0x4a>
 80178fa:	680b      	ldr	r3, [r1, #0]
 80178fc:	f24c 2170 	movw	r1, #49776	; 0xc270
 8017900:	4013      	ands	r3, r2
 8017902:	428b      	cmp	r3, r1
 8017904:	d00d      	beq.n	8017922 <MotionFX_initialize+0x4a>
 8017906:	4b32      	ldr	r3, [pc, #200]	; (80179d0 <MotionFX_initialize+0xf8>)
 8017908:	2201      	movs	r2, #1
 801790a:	601a      	str	r2, [r3, #0]
 801790c:	681a      	ldr	r2, [r3, #0]
 801790e:	2a00      	cmp	r2, #0
 8017910:	d1fc      	bne.n	801790c <MotionFX_initialize+0x34>
 8017912:	4b30      	ldr	r3, [pc, #192]	; (80179d4 <MotionFX_initialize+0xfc>)
 8017914:	4a30      	ldr	r2, [pc, #192]	; (80179d8 <MotionFX_initialize+0x100>)
 8017916:	601a      	str	r2, [r3, #0]
 8017918:	681a      	ldr	r2, [r3, #0]
 801791a:	4b30      	ldr	r3, [pc, #192]	; (80179dc <MotionFX_initialize+0x104>)
 801791c:	429a      	cmp	r2, r3
 801791e:	d01f      	beq.n	8017960 <MotionFX_initialize+0x88>
 8017920:	e7fe      	b.n	8017920 <MotionFX_initialize+0x48>
 8017922:	4b2f      	ldr	r3, [pc, #188]	; (80179e0 <MotionFX_initialize+0x108>)
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d1ed      	bne.n	8017906 <MotionFX_initialize+0x2e>
 801792a:	4a2e      	ldr	r2, [pc, #184]	; (80179e4 <MotionFX_initialize+0x10c>)
 801792c:	6813      	ldr	r3, [r2, #0]
 801792e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017932:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8017936:	d006      	beq.n	8017946 <MotionFX_initialize+0x6e>
 8017938:	6813      	ldr	r3, [r2, #0]
 801793a:	f240 4283 	movw	r2, #1155	; 0x483
 801793e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017942:	4293      	cmp	r3, r2
 8017944:	d1df      	bne.n	8017906 <MotionFX_initialize+0x2e>
 8017946:	4b28      	ldr	r3, [pc, #160]	; (80179e8 <MotionFX_initialize+0x110>)
 8017948:	2201      	movs	r2, #1
 801794a:	601a      	str	r2, [r3, #0]
 801794c:	681a      	ldr	r2, [r3, #0]
 801794e:	2a00      	cmp	r2, #0
 8017950:	d1fc      	bne.n	801794c <MotionFX_initialize+0x74>
 8017952:	4b26      	ldr	r3, [pc, #152]	; (80179ec <MotionFX_initialize+0x114>)
 8017954:	4a20      	ldr	r2, [pc, #128]	; (80179d8 <MotionFX_initialize+0x100>)
 8017956:	601a      	str	r2, [r3, #0]
 8017958:	681a      	ldr	r2, [r3, #0]
 801795a:	4b20      	ldr	r3, [pc, #128]	; (80179dc <MotionFX_initialize+0x104>)
 801795c:	429a      	cmp	r2, r3
 801795e:	d1df      	bne.n	8017920 <MotionFX_initialize+0x48>
 8017960:	4b23      	ldr	r3, [pc, #140]	; (80179f0 <MotionFX_initialize+0x118>)
 8017962:	4a24      	ldr	r2, [pc, #144]	; (80179f4 <MotionFX_initialize+0x11c>)
 8017964:	9301      	str	r3, [sp, #4]
 8017966:	2501      	movs	r5, #1
 8017968:	4620      	mov	r0, r4
 801796a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801796e:	7115      	strb	r5, [r2, #4]
 8017970:	f7f7 faa0 	bl	800eeb4 <MFX_emptyAttitude>
 8017974:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8017978:	a901      	add	r1, sp, #4
 801797a:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 801797e:	f7f6 fdc3 	bl	800e508 <updateOrientation>
 8017982:	a903      	add	r1, sp, #12
 8017984:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017988:	f7f6 fdbe 	bl	800e508 <updateOrientation>
 801798c:	a902      	add	r1, sp, #8
 801798e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017992:	f7f6 fdb9 	bl	800e508 <updateOrientation>
 8017996:	4818      	ldr	r0, [pc, #96]	; (80179f8 <MotionFX_initialize+0x120>)
 8017998:	4918      	ldr	r1, [pc, #96]	; (80179fc <MotionFX_initialize+0x124>)
 801799a:	4a19      	ldr	r2, [pc, #100]	; (8017a00 <MotionFX_initialize+0x128>)
 801799c:	4b19      	ldr	r3, [pc, #100]	; (8017a04 <MotionFX_initialize+0x12c>)
 801799e:	7365      	strb	r5, [r4, #13]
 80179a0:	4d19      	ldr	r5, [pc, #100]	; (8017a08 <MotionFX_initialize+0x130>)
 80179a2:	62a0      	str	r0, [r4, #40]	; 0x28
 80179a4:	6361      	str	r1, [r4, #52]	; 0x34
 80179a6:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80179aa:	2100      	movs	r1, #0
 80179ac:	61a2      	str	r2, [r4, #24]
 80179ae:	61e3      	str	r3, [r4, #28]
 80179b0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80179b4:	f240 1301 	movw	r3, #257	; 0x101
 80179b8:	6225      	str	r5, [r4, #32]
 80179ba:	62e0      	str	r0, [r4, #44]	; 0x2c
 80179bc:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 80179c0:	80a2      	strh	r2, [r4, #4]
 80179c2:	81e3      	strh	r3, [r4, #14]
 80179c4:	b005      	add	sp, #20
 80179c6:	bd30      	pop	{r4, r5, pc}
 80179c8:	e0002000 	.word	0xe0002000
 80179cc:	e000ed00 	.word	0xe000ed00
 80179d0:	40023008 	.word	0x40023008
 80179d4:	40023000 	.word	0x40023000
 80179d8:	f407a5c2 	.word	0xf407a5c2
 80179dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80179e0:	e0042000 	.word	0xe0042000
 80179e4:	5c001000 	.word	0x5c001000
 80179e8:	58024c08 	.word	0x58024c08
 80179ec:	58024c00 	.word	0x58024c00
 80179f0:	00756e65 	.word	0x00756e65
 80179f4:	20000218 	.word	0x20000218
 80179f8:	3f666666 	.word	0x3f666666
 80179fc:	3f2ac083 	.word	0x3f2ac083
 8017a00:	3a51b717 	.word	0x3a51b717
 8017a04:	3a378034 	.word	0x3a378034
 8017a08:	3b378034 	.word	0x3b378034

08017a0c <MotionFX_setKnobs>:
 8017a0c:	4b23      	ldr	r3, [pc, #140]	; (8017a9c <MotionFX_setKnobs+0x90>)
 8017a0e:	791b      	ldrb	r3, [r3, #4]
 8017a10:	b903      	cbnz	r3, 8017a14 <MotionFX_setKnobs+0x8>
 8017a12:	4770      	bx	lr
 8017a14:	2900      	cmp	r1, #0
 8017a16:	d0fc      	beq.n	8017a12 <MotionFX_setKnobs+0x6>
 8017a18:	b570      	push	{r4, r5, r6, lr}
 8017a1a:	4604      	mov	r4, r0
 8017a1c:	684a      	ldr	r2, [r1, #4]
 8017a1e:	6808      	ldr	r0, [r1, #0]
 8017a20:	688b      	ldr	r3, [r1, #8]
 8017a22:	6363      	str	r3, [r4, #52]	; 0x34
 8017a24:	62a0      	str	r0, [r4, #40]	; 0x28
 8017a26:	62e2      	str	r2, [r4, #44]	; 0x2c
 8017a28:	7b0b      	ldrb	r3, [r1, #12]
 8017a2a:	7163      	strb	r3, [r4, #5]
 8017a2c:	6908      	ldr	r0, [r1, #16]
 8017a2e:	694a      	ldr	r2, [r1, #20]
 8017a30:	698b      	ldr	r3, [r1, #24]
 8017a32:	6223      	str	r3, [r4, #32]
 8017a34:	61e2      	str	r2, [r4, #28]
 8017a36:	61a0      	str	r0, [r4, #24]
 8017a38:	7f0b      	ldrb	r3, [r1, #28]
 8017a3a:	7123      	strb	r3, [r4, #4]
 8017a3c:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8017a40:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8017a44:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8017a46:	f884 3978 	strb.w	r3, [r4, #2424]	; 0x978
 8017a4a:	460a      	mov	r2, r1
 8017a4c:	460b      	mov	r3, r1
 8017a4e:	f831 6f1d 	ldrh.w	r6, [r1, #29]!
 8017a52:	f832 5f21 	ldrh.w	r5, [r2, #33]!
 8017a56:	f833 0f25 	ldrh.w	r0, [r3, #37]!
 8017a5a:	7889      	ldrb	r1, [r1, #2]
 8017a5c:	7892      	ldrb	r2, [r2, #2]
 8017a5e:	789b      	ldrb	r3, [r3, #2]
 8017a60:	b084      	sub	sp, #16
 8017a62:	f88d 1006 	strb.w	r1, [sp, #6]
 8017a66:	f8ad 000c 	strh.w	r0, [sp, #12]
 8017a6a:	a901      	add	r1, sp, #4
 8017a6c:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8017a70:	f88d 200a 	strb.w	r2, [sp, #10]
 8017a74:	f8ad 6004 	strh.w	r6, [sp, #4]
 8017a78:	f8ad 5008 	strh.w	r5, [sp, #8]
 8017a7c:	f88d 300e 	strb.w	r3, [sp, #14]
 8017a80:	f7f6 fd42 	bl	800e508 <updateOrientation>
 8017a84:	a903      	add	r1, sp, #12
 8017a86:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017a8a:	f7f6 fd3d 	bl	800e508 <updateOrientation>
 8017a8e:	a902      	add	r1, sp, #8
 8017a90:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017a94:	f7f6 fd38 	bl	800e508 <updateOrientation>
 8017a98:	b004      	add	sp, #16
 8017a9a:	bd70      	pop	{r4, r5, r6, pc}
 8017a9c:	20000218 	.word	0x20000218

08017aa0 <MotionFX_getKnobs>:
 8017aa0:	4b1c      	ldr	r3, [pc, #112]	; (8017b14 <MotionFX_getKnobs+0x74>)
 8017aa2:	791b      	ldrb	r3, [r3, #4]
 8017aa4:	b903      	cbnz	r3, 8017aa8 <MotionFX_getKnobs+0x8>
 8017aa6:	4770      	bx	lr
 8017aa8:	460a      	mov	r2, r1
 8017aaa:	2900      	cmp	r1, #0
 8017aac:	d0fb      	beq.n	8017aa6 <MotionFX_getKnobs+0x6>
 8017aae:	b510      	push	{r4, lr}
 8017ab0:	4604      	mov	r4, r0
 8017ab2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017ab4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8017ab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ab8:	6093      	str	r3, [r2, #8]
 8017aba:	6010      	str	r0, [r2, #0]
 8017abc:	6051      	str	r1, [r2, #4]
 8017abe:	7963      	ldrb	r3, [r4, #5]
 8017ac0:	7313      	strb	r3, [r2, #12]
 8017ac2:	69a0      	ldr	r0, [r4, #24]
 8017ac4:	69e1      	ldr	r1, [r4, #28]
 8017ac6:	6a23      	ldr	r3, [r4, #32]
 8017ac8:	6193      	str	r3, [r2, #24]
 8017aca:	6110      	str	r0, [r2, #16]
 8017acc:	6151      	str	r1, [r2, #20]
 8017ace:	7923      	ldrb	r3, [r4, #4]
 8017ad0:	7713      	strb	r3, [r2, #28]
 8017ad2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017ad6:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8017ada:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8017ade:	62d3      	str	r3, [r2, #44]	; 0x2c
 8017ae0:	f102 011d 	add.w	r1, r2, #29
 8017ae4:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8017ae8:	f7f6 fb68 	bl	800e1bc <findAxis>
 8017aec:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017af0:	f102 0121 	add.w	r1, r2, #33	; 0x21
 8017af4:	f7f6 fb62 	bl	800e1bc <findAxis>
 8017af8:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017afc:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8017b00:	f7f6 fb5c 	bl	800e1bc <findAxis>
 8017b04:	2300      	movs	r3, #0
 8017b06:	f882 3020 	strb.w	r3, [r2, #32]
 8017b0a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8017b0e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8017b12:	bd10      	pop	{r4, pc}
 8017b14:	20000218 	.word	0x20000218

08017b18 <MotionFX_enable_6X>:
 8017b18:	4b0e      	ldr	r3, [pc, #56]	; (8017b54 <MotionFX_enable_6X+0x3c>)
 8017b1a:	791b      	ldrb	r3, [r3, #4]
 8017b1c:	b903      	cbnz	r3, 8017b20 <MotionFX_enable_6X+0x8>
 8017b1e:	4770      	bx	lr
 8017b20:	2900      	cmp	r1, #0
 8017b22:	d0fc      	beq.n	8017b1e <MotionFX_enable_6X+0x6>
 8017b24:	b530      	push	{r4, r5, lr}
 8017b26:	1d05      	adds	r5, r0, #4
 8017b28:	b099      	sub	sp, #100	; 0x64
 8017b2a:	4604      	mov	r4, r0
 8017b2c:	4629      	mov	r1, r5
 8017b2e:	225c      	movs	r2, #92	; 0x5c
 8017b30:	a801      	add	r0, sp, #4
 8017b32:	f002 fbdb 	bl	801a2ec <memcpy>
 8017b36:	4620      	mov	r0, r4
 8017b38:	f7f7 f9bc 	bl	800eeb4 <MFX_emptyAttitude>
 8017b3c:	a901      	add	r1, sp, #4
 8017b3e:	4628      	mov	r0, r5
 8017b40:	225c      	movs	r2, #92	; 0x5c
 8017b42:	f002 fbd3 	bl	801a2ec <memcpy>
 8017b46:	2300      	movs	r3, #0
 8017b48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8017b4c:	7363      	strb	r3, [r4, #13]
 8017b4e:	b019      	add	sp, #100	; 0x64
 8017b50:	bd30      	pop	{r4, r5, pc}
 8017b52:	bf00      	nop
 8017b54:	20000218 	.word	0x20000218

08017b58 <MotionFX_enable_9X>:
 8017b58:	4b0e      	ldr	r3, [pc, #56]	; (8017b94 <MotionFX_enable_9X+0x3c>)
 8017b5a:	791b      	ldrb	r3, [r3, #4]
 8017b5c:	b903      	cbnz	r3, 8017b60 <MotionFX_enable_9X+0x8>
 8017b5e:	4770      	bx	lr
 8017b60:	2900      	cmp	r1, #0
 8017b62:	d0fc      	beq.n	8017b5e <MotionFX_enable_9X+0x6>
 8017b64:	b530      	push	{r4, r5, lr}
 8017b66:	1d05      	adds	r5, r0, #4
 8017b68:	b099      	sub	sp, #100	; 0x64
 8017b6a:	4604      	mov	r4, r0
 8017b6c:	4629      	mov	r1, r5
 8017b6e:	225c      	movs	r2, #92	; 0x5c
 8017b70:	a801      	add	r0, sp, #4
 8017b72:	f002 fbbb 	bl	801a2ec <memcpy>
 8017b76:	4620      	mov	r0, r4
 8017b78:	f7f7 f99c 	bl	800eeb4 <MFX_emptyAttitude>
 8017b7c:	a901      	add	r1, sp, #4
 8017b7e:	4628      	mov	r0, r5
 8017b80:	225c      	movs	r2, #92	; 0x5c
 8017b82:	f002 fbb3 	bl	801a2ec <memcpy>
 8017b86:	2301      	movs	r3, #1
 8017b88:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8017b8c:	7363      	strb	r3, [r4, #13]
 8017b8e:	b019      	add	sp, #100	; 0x64
 8017b90:	bd30      	pop	{r4, r5, pc}
 8017b92:	bf00      	nop
 8017b94:	20000218 	.word	0x20000218

08017b98 <MotionFX_update>:
 8017b98:	b470      	push	{r4, r5, r6}
 8017b9a:	4c06      	ldr	r4, [pc, #24]	; (8017bb4 <MotionFX_update+0x1c>)
 8017b9c:	9e03      	ldr	r6, [sp, #12]
 8017b9e:	7925      	ldrb	r5, [r4, #4]
 8017ba0:	b90d      	cbnz	r5, 8017ba6 <MotionFX_update+0xe>
 8017ba2:	bc70      	pop	{r4, r5, r6}
 8017ba4:	4770      	bx	lr
 8017ba6:	461c      	mov	r4, r3
 8017ba8:	ed94 0a00 	vldr	s0, [r4]
 8017bac:	4633      	mov	r3, r6
 8017bae:	bc70      	pop	{r4, r5, r6}
 8017bb0:	f7fc bf02 	b.w	80149b8 <iNemoEngine_API_Update>
 8017bb4:	20000218 	.word	0x20000218

08017bb8 <MotionFX_propagate>:
 8017bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bbc:	ed2d 8b06 	vpush	{d8-d10}
 8017bc0:	4ca3      	ldr	r4, [pc, #652]	; (8017e50 <MotionFX_propagate+0x298>)
 8017bc2:	7927      	ldrb	r7, [r4, #4]
 8017bc4:	b0a0      	sub	sp, #128	; 0x80
 8017bc6:	b927      	cbnz	r7, 8017bd2 <MotionFX_propagate+0x1a>
 8017bc8:	b020      	add	sp, #128	; 0x80
 8017bca:	ecbd 8b06 	vpop	{d8-d10}
 8017bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bd2:	4616      	mov	r6, r2
 8017bd4:	4604      	mov	r4, r0
 8017bd6:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8017bda:	edd3 9a00 	vldr	s19, [r3]
 8017bde:	460d      	mov	r5, r1
 8017be0:	6851      	ldr	r1, [r2, #4]
 8017be2:	6892      	ldr	r2, [r2, #8]
 8017be4:	ab13      	add	r3, sp, #76	; 0x4c
 8017be6:	c307      	stmia	r3!, {r0, r1, r2}
 8017be8:	6830      	ldr	r0, [r6, #0]
 8017bea:	6871      	ldr	r1, [r6, #4]
 8017bec:	68b2      	ldr	r2, [r6, #8]
 8017bee:	ab10      	add	r3, sp, #64	; 0x40
 8017bf0:	c307      	stmia	r3!, {r0, r1, r2}
 8017bf2:	4637      	mov	r7, r6
 8017bf4:	ab16      	add	r3, sp, #88	; 0x58
 8017bf6:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8017bfa:	6879      	ldr	r1, [r7, #4]
 8017bfc:	68ba      	ldr	r2, [r7, #8]
 8017bfe:	f104 0a3a 	add.w	sl, r4, #58	; 0x3a
 8017c02:	c307      	stmia	r3!, {r0, r1, r2}
 8017c04:	aa13      	add	r2, sp, #76	; 0x4c
 8017c06:	4651      	mov	r1, sl
 8017c08:	a803      	add	r0, sp, #12
 8017c0a:	f7f6 fa75 	bl	800e0f8 <rotVect>
 8017c0e:	aa16      	add	r2, sp, #88	; 0x58
 8017c10:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8017c14:	a806      	add	r0, sp, #24
 8017c16:	f7f6 fa6f 	bl	800e0f8 <rotVect>
 8017c1a:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 8017c1e:	2b09      	cmp	r3, #9
 8017c20:	d829      	bhi.n	8017c76 <MotionFX_propagate+0xbe>
 8017c22:	eddd 8a04 	vldr	s17, [sp, #16]
 8017c26:	ed9d 9a03 	vldr	s18, [sp, #12]
 8017c2a:	ed9d 8a05 	vldr	s16, [sp, #20]
 8017c2e:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8017c32:	eee9 7a09 	vfma.f32	s15, s18, s18
 8017c36:	eee8 7a08 	vfma.f32	s15, s16, s16
 8017c3a:	ee17 0a90 	vmov	r0, s15
 8017c3e:	f7e8 fc7b 	bl	8000538 <__aeabi_f2d>
 8017c42:	ec41 0b10 	vmov	d0, r0, r1
 8017c46:	f000 fdf9 	bl	801883c <sqrt>
 8017c4a:	ec51 0b10 	vmov	r0, r1, d0
 8017c4e:	f7e8 ff7b 	bl	8000b48 <__aeabi_d2f>
 8017c52:	ee07 0a90 	vmov	s15, r0
 8017c56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017c5a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8017c5e:	ee29 9a27 	vmul.f32	s18, s18, s15
 8017c62:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8017c66:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017c6a:	ed8d 9a03 	vstr	s18, [sp, #12]
 8017c6e:	edcd 8a04 	vstr	s17, [sp, #16]
 8017c72:	ed8d 8a05 	vstr	s16, [sp, #20]
 8017c76:	7923      	ldrb	r3, [r4, #4]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	f000 80d3 	beq.w	8017e24 <MotionFX_propagate+0x26c>
 8017c7e:	ee07 3a90 	vmov	s15, r3
 8017c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017c8a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017c8e:	f604 125c 	addw	r2, r4, #2396	; 0x95c
 8017c92:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 8017c96:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 8017c9a:	edd2 7a00 	vldr	s15, [r2]
 8017c9e:	eddd 8a06 	vldr	s17, [sp, #24]
 8017ca2:	ed9d 6a07 	vldr	s12, [sp, #28]
 8017ca6:	ed9d 8a08 	vldr	s16, [sp, #32]
 8017caa:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8017e54 <MotionFX_propagate+0x29c>
 8017cae:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8017e58 <MotionFX_propagate+0x2a0>
 8017cb2:	eee6 7aa8 	vfma.f32	s15, s13, s17
 8017cb6:	ee26 9a07 	vmul.f32	s18, s12, s14
 8017cba:	edc2 7a00 	vstr	s15, [r2]
 8017cbe:	edd3 7a00 	vldr	s15, [r3]
 8017cc2:	ed8d 9a07 	vstr	s18, [sp, #28]
 8017cc6:	eee6 7a86 	vfma.f32	s15, s13, s12
 8017cca:	f604 1264 	addw	r2, r4, #2404	; 0x964
 8017cce:	ee68 8a87 	vmul.f32	s17, s17, s14
 8017cd2:	edc3 7a00 	vstr	s15, [r3]
 8017cd6:	edd2 7a00 	vldr	s15, [r2]
 8017cda:	edcd 8a06 	vstr	s17, [sp, #24]
 8017cde:	eee6 7a88 	vfma.f32	s15, s13, s16
 8017ce2:	f604 1344 	addw	r3, r4, #2372	; 0x944
 8017ce6:	ee28 8a07 	vmul.f32	s16, s16, s14
 8017cea:	edc2 7a00 	vstr	s15, [r2]
 8017cee:	edd3 7a00 	vldr	s15, [r3]
 8017cf2:	ed8d 8a08 	vstr	s16, [sp, #32]
 8017cf6:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 8017cfa:	ed93 7a00 	vldr	s14, [r3]
 8017cfe:	ee39 9a67 	vsub.f32	s18, s18, s15
 8017d02:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8017d06:	ee69 7a09 	vmul.f32	s15, s18, s18
 8017d0a:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8017d0e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8017d12:	ed93 7a00 	vldr	s14, [r3]
 8017d16:	ee38 8a47 	vsub.f32	s16, s16, s14
 8017d1a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8017d1e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8017d22:	ee29 0a80 	vmul.f32	s0, s19, s0
 8017d26:	eef4 7ae5 	vcmpe.f32	s15, s11
 8017d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d2e:	dd7e      	ble.n	8017e2e <MotionFX_propagate+0x276>
 8017d30:	eeb1 aae7 	vsqrt.f32	s20, s15
 8017d34:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8017d38:	eeb0 0a69 	vmov.f32	s0, s19
 8017d3c:	f000 fd12 	bl	8018764 <sinf>
 8017d40:	eec0 7a0a 	vdiv.f32	s15, s0, s20
 8017d44:	eeb0 0a69 	vmov.f32	s0, s19
 8017d48:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8017d4c:	ee29 9a27 	vmul.f32	s18, s18, s15
 8017d50:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017d54:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8017d58:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8017d5c:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8017d60:	f000 fc9a 	bl	8018698 <cosf>
 8017d64:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8017d68:	f604 1838 	addw	r8, r4, #2360	; 0x938
 8017d6c:	a809      	add	r0, sp, #36	; 0x24
 8017d6e:	4632      	mov	r2, r6
 8017d70:	4631      	mov	r1, r6
 8017d72:	f7f6 fc55 	bl	800e620 <qmult>
 8017d76:	edd8 7a00 	vldr	s15, [r8]
 8017d7a:	ed96 7a00 	vldr	s14, [r6]
 8017d7e:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 8017d82:	f604 1934 	addw	r9, r4, #2356	; 0x934
 8017d86:	edd9 6a00 	vldr	s13, [r9]
 8017d8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017d8e:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 8017d92:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8017d96:	3301      	adds	r3, #1
 8017d98:	aa13      	add	r2, sp, #76	; 0x4c
 8017d9a:	edd7 6a00 	vldr	s13, [r7]
 8017d9e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8017da2:	4651      	mov	r1, sl
 8017da4:	a809      	add	r0, sp, #36	; 0x24
 8017da6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8017daa:	eee7 7a07 	vfma.f32	s15, s14, s14
 8017dae:	eef1 6ae7 	vsqrt.f32	s13, s15
 8017db2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8017db6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017dba:	ed86 7a00 	vstr	s14, [r6]
 8017dbe:	ed99 7a00 	vldr	s14, [r9]
 8017dc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017dc6:	ed89 7a00 	vstr	s14, [r9]
 8017dca:	ed98 7a00 	vldr	s14, [r8]
 8017dce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017dd2:	ed88 7a00 	vstr	s14, [r8]
 8017dd6:	ed97 7a00 	vldr	s14, [r7]
 8017dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017dde:	edc7 7a00 	vstr	s15, [r7]
 8017de2:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 8017de6:	f7f6 f987 	bl	800e0f8 <rotVect>
 8017dea:	f8d9 0000 	ldr.w	r0, [r9]
 8017dee:	f8d8 1000 	ldr.w	r1, [r8]
 8017df2:	683a      	ldr	r2, [r7, #0]
 8017df4:	6833      	ldr	r3, [r6, #0]
 8017df6:	60eb      	str	r3, [r5, #12]
 8017df8:	6128      	str	r0, [r5, #16]
 8017dfa:	6169      	str	r1, [r5, #20]
 8017dfc:	61aa      	str	r2, [r5, #24]
 8017dfe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017e02:	9301      	str	r3, [sp, #4]
 8017e04:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8017e08:	9300      	str	r3, [sp, #0]
 8017e0a:	a909      	add	r1, sp, #36	; 0x24
 8017e0c:	f105 031c 	add.w	r3, r5, #28
 8017e10:	462a      	mov	r2, r5
 8017e12:	f105 000c 	add.w	r0, r5, #12
 8017e16:	f7f7 fc2b 	bl	800f670 <output_update>
 8017e1a:	b020      	add	sp, #128	; 0x80
 8017e1c:	ecbd 8b06 	vpop	{d8-d10}
 8017e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e24:	2301      	movs	r3, #1
 8017e26:	7123      	strb	r3, [r4, #4]
 8017e28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017e2c:	e72f      	b.n	8017c8e <MotionFX_propagate+0xd6>
 8017e2e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8017e32:	ee29 9a00 	vmul.f32	s18, s18, s0
 8017e36:	ee28 8a00 	vmul.f32	s16, s16, s0
 8017e3a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017e3e:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8017e42:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8017e46:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8017e4a:	930c      	str	r3, [sp, #48]	; 0x30
 8017e4c:	e78c      	b.n	8017d68 <MotionFX_propagate+0x1b0>
 8017e4e:	bf00      	nop
 8017e50:	20000218 	.word	0x20000218
 8017e54:	3c8efa35 	.word	0x3c8efa35
 8017e58:	38d1b718 	.word	0x38d1b718

08017e5c <MotionFX_MagCal_init>:
 8017e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e5e:	4c44      	ldr	r4, [pc, #272]	; (8017f70 <MotionFX_MagCal_init+0x114>)
 8017e60:	7923      	ldrb	r3, [r4, #4]
 8017e62:	b903      	cbnz	r3, 8017e66 <MotionFX_MagCal_init+0xa>
 8017e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e66:	1e43      	subs	r3, r0, #1
 8017e68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017e6c:	4605      	mov	r5, r0
 8017e6e:	d2f9      	bcs.n	8017e64 <MotionFX_MagCal_init+0x8>
 8017e70:	2900      	cmp	r1, #0
 8017e72:	d139      	bne.n	8017ee8 <MotionFX_MagCal_init+0x8c>
 8017e74:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8017e78:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017e7c:	4a3d      	ldr	r2, [pc, #244]	; (8017f74 <MotionFX_MagCal_init+0x118>)
 8017e7e:	1b5b      	subs	r3, r3, r5
 8017e80:	ee07 3a90 	vmov	s15, r3
 8017e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e88:	23c8      	movs	r3, #200	; 0xc8
 8017e8a:	eef0 7ae7 	vabs.f32	s15, s15
 8017e8e:	fb93 f3f5 	sdiv	r3, r3, r5
 8017e92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017e96:	b2db      	uxtb	r3, r3
 8017e98:	2b0f      	cmp	r3, #15
 8017e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017e9e:	bf28      	it	cs
 8017ea0:	230f      	movcs	r3, #15
 8017ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ea6:	6015      	str	r5, [r2, #0]
 8017ea8:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 8017eac:	b22d      	sxth	r5, r5
 8017eae:	dc0e      	bgt.n	8017ece <MotionFX_MagCal_init+0x72>
 8017eb0:	edd4 7a03 	vldr	s15, [r4, #12]
 8017eb4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8017f78 <MotionFX_MagCal_init+0x11c>
 8017eb8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8017f7c <MotionFX_MagCal_init+0x120>
 8017ebc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017ec0:	eef0 7ae7 	vabs.f32	s15, s15
 8017ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ecc:	dd08      	ble.n	8017ee0 <MotionFX_MagCal_init+0x84>
 8017ece:	2300      	movs	r3, #0
 8017ed0:	492b      	ldr	r1, [pc, #172]	; (8017f80 <MotionFX_MagCal_init+0x124>)
 8017ed2:	8165      	strh	r5, [r4, #10]
 8017ed4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8017ed8:	60e1      	str	r1, [r4, #12]
 8017eda:	8223      	strh	r3, [r4, #16]
 8017edc:	6163      	str	r3, [r4, #20]
 8017ede:	8122      	strh	r2, [r4, #8]
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 8017ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ee8:	2600      	movs	r6, #0
 8017eea:	4826      	ldr	r0, [pc, #152]	; (8017f84 <MotionFX_MagCal_init+0x128>)
 8017eec:	61a0      	str	r0, [r4, #24]
 8017eee:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8017ef2:	4631      	mov	r1, r6
 8017ef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017ef8:	6122      	str	r2, [r4, #16]
 8017efa:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8017efe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017f02:	6166      	str	r6, [r4, #20]
 8017f04:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8017f08:	6566      	str	r6, [r4, #84]	; 0x54
 8017f0a:	83a6      	strh	r6, [r4, #28]
 8017f0c:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 8017f10:	f002 f9fa 	bl	801a308 <memset>
 8017f14:	23ff      	movs	r3, #255	; 0xff
 8017f16:	225f      	movs	r2, #95	; 0x5f
 8017f18:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 8017f1c:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 8017f20:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8017f24:	2200      	movs	r2, #0
 8017f26:	2300      	movs	r3, #0
 8017f28:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017f2c:	f44f 7780 	mov.w	r7, #256	; 0x100
 8017f30:	4631      	mov	r1, r6
 8017f32:	62a6      	str	r6, [r4, #40]	; 0x28
 8017f34:	2230      	movs	r2, #48	; 0x30
 8017f36:	f44f 6670 	mov.w	r6, #3840	; 0xf00
 8017f3a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8017f3e:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 8017f42:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8017f44:	f002 f9e0 	bl	801a308 <memset>
 8017f48:	f1a5 030a 	sub.w	r3, r5, #10
 8017f4c:	b29b      	uxth	r3, r3
 8017f4e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017f52:	2b32      	cmp	r3, #50	; 0x32
 8017f54:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 8017f58:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 8017f5c:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 8017f60:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 8017f64:	d888      	bhi.n	8017e78 <MotionFX_MagCal_init+0x1c>
 8017f66:	2301      	movs	r3, #1
 8017f68:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8017f6c:	e784      	b.n	8017e78 <MotionFX_MagCal_init+0x1c>
 8017f6e:	bf00      	nop
 8017f70:	20000218 	.word	0x20000218
 8017f74:	20000000 	.word	0x20000000
 8017f78:	3dcccccd 	.word	0x3dcccccd
 8017f7c:	3c23d70a 	.word	0x3c23d70a
 8017f80:	3dcccccd 	.word	0x3dcccccd
 8017f84:	20001b78 	.word	0x20001b78

08017f88 <MotionFX_MagCal_run>:
 8017f88:	4a3e      	ldr	r2, [pc, #248]	; (8018084 <MotionFX_MagCal_run+0xfc>)
 8017f8a:	7913      	ldrb	r3, [r2, #4]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d077      	beq.n	8018080 <MotionFX_MagCal_run+0xf8>
 8017f90:	ed90 7a00 	vldr	s14, [r0]
 8017f94:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8018088 <MotionFX_MagCal_run+0x100>
 8017f98:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8017f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fa0:	bfb4      	ite	lt
 8017fa2:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8017fa6:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8017faa:	eee7 7a26 	vfma.f32	s15, s14, s13
 8017fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fb0:	ed90 7a01 	vldr	s14, [r0, #4]
 8017fb4:	eddf 6a34 	vldr	s13, [pc, #208]	; 8018088 <MotionFX_MagCal_run+0x100>
 8017fb8:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8017fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017fc0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8017fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fc8:	ee17 1a90 	vmov	r1, s15
 8017fcc:	bfb4      	ite	lt
 8017fce:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8017fd2:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8017fd6:	eee7 7a26 	vfma.f32	s15, s14, s13
 8017fda:	ed90 7a02 	vldr	s14, [r0, #8]
 8017fde:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8018088 <MotionFX_MagCal_run+0x100>
 8017fe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017fe6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8017fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fee:	ee17 4a90 	vmov	r4, s15
 8017ff2:	bfac      	ite	ge
 8017ff4:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8017ff8:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8017ffc:	eee7 7a26 	vfma.f32	s15, s14, s13
 8018000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018004:	ee17 7a90 	vmov	r7, s15
 8018008:	b383      	cbz	r3, 801806c <MotionFX_MagCal_run+0xe4>
 801800a:	4820      	ldr	r0, [pc, #128]	; (801808c <MotionFX_MagCal_run+0x104>)
 801800c:	6805      	ldr	r5, [r0, #0]
 801800e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 8018012:	fb15 f503 	smulbb	r5, r5, r3
 8018016:	f8a0 53d0 	strh.w	r5, [r0, #976]	; 0x3d0
 801801a:	00dd      	lsls	r5, r3, #3
 801801c:	f647 76fe 	movw	r6, #32766	; 0x7ffe
 8018020:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8018090 <MotionFX_MagCal_run+0x108>
 8018024:	42b1      	cmp	r1, r6
 8018026:	bfa8      	it	ge
 8018028:	4631      	movge	r1, r6
 801802a:	42b7      	cmp	r7, r6
 801802c:	bfa8      	it	ge
 801802e:	4637      	movge	r7, r6
 8018030:	4561      	cmp	r1, ip
 8018032:	4608      	mov	r0, r1
 8018034:	bfb8      	it	lt
 8018036:	4660      	movlt	r0, ip
 8018038:	4564      	cmp	r4, ip
 801803a:	db1f      	blt.n	801807c <MotionFX_MagCal_run+0xf4>
 801803c:	42b4      	cmp	r4, r6
 801803e:	bfa8      	it	ge
 8018040:	4634      	movge	r4, r6
 8018042:	b224      	sxth	r4, r4
 8018044:	4e12      	ldr	r6, [pc, #72]	; (8018090 <MotionFX_MagCal_run+0x108>)
 8018046:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 801804a:	3301      	adds	r3, #1
 801804c:	4415      	add	r5, r2
 801804e:	b2db      	uxtb	r3, r3
 8018050:	42b7      	cmp	r7, r6
 8018052:	bfb8      	it	lt
 8018054:	4637      	movlt	r7, r6
 8018056:	428b      	cmp	r3, r1
 8018058:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 801805c:	f8a5 03d2 	strh.w	r0, [r5, #978]	; 0x3d2
 8018060:	f8a5 43d4 	strh.w	r4, [r5, #980]	; 0x3d4
 8018064:	f8a5 73d6 	strh.w	r7, [r5, #982]	; 0x3d6
 8018068:	d014      	beq.n	8018094 <MotionFX_MagCal_run+0x10c>
 801806a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801806c:	68c0      	ldr	r0, [r0, #12]
 801806e:	f8c2 03c8 	str.w	r0, [r2, #968]	; 0x3c8
 8018072:	2001      	movs	r0, #1
 8018074:	f882 03cc 	strb.w	r0, [r2, #972]	; 0x3cc
 8018078:	461d      	mov	r5, r3
 801807a:	e7cf      	b.n	801801c <MotionFX_MagCal_run+0x94>
 801807c:	4634      	mov	r4, r6
 801807e:	e7e1      	b.n	8018044 <MotionFX_MagCal_run+0xbc>
 8018080:	4770      	bx	lr
 8018082:	bf00      	nop
 8018084:	20000218 	.word	0x20000218
 8018088:	43fa0000 	.word	0x43fa0000
 801808c:	20000000 	.word	0x20000000
 8018090:	ffff8002 	.word	0xffff8002
 8018094:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 8018098:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 801809c:	2000      	movs	r0, #0
 801809e:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	f000 8159 	beq.w	801835a <MotionFX_MagCal_run+0x3d2>
 80180a8:	e9d2 4005 	ldrd	r4, r0, [r2, #20]
 80180ac:	8a57      	ldrh	r7, [r2, #18]
 80180ae:	8a13      	ldrh	r3, [r2, #16]
 80180b0:	2900      	cmp	r1, #0
 80180b2:	f000 8150 	beq.w	8018356 <MotionFX_MagCal_run+0x3ce>
 80180b6:	2f00      	cmp	r7, #0
 80180b8:	f000 814d 	beq.w	8018356 <MotionFX_MagCal_run+0x3ce>
 80180bc:	42bb      	cmp	r3, r7
 80180be:	bf28      	it	cs
 80180c0:	463b      	movcs	r3, r7
 80180c2:	3301      	adds	r3, #1
 80180c4:	b29b      	uxth	r3, r3
 80180c6:	42bb      	cmp	r3, r7
 80180c8:	bf28      	it	cs
 80180ca:	463b      	movcs	r3, r7
 80180cc:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 80180d0:	191d      	adds	r5, r3, r4
 80180d2:	f04f 0c01 	mov.w	ip, #1
 80180d6:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 80180da:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80180de:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 80180e2:	f8c5 e002 	str.w	lr, [r5, #2]
 80180e6:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 80180ea:	f8a5 e006 	strh.w	lr, [r5, #6]
 80180ee:	4561      	cmp	r1, ip
 80180f0:	f000 812a 	beq.w	8018348 <MotionFX_MagCal_run+0x3c0>
 80180f4:	4463      	add	r3, ip
 80180f6:	b29b      	uxth	r3, r3
 80180f8:	42bb      	cmp	r3, r7
 80180fa:	bf28      	it	cs
 80180fc:	463b      	movcs	r3, r7
 80180fe:	eb03 0e04 	add.w	lr, r3, r4
 8018102:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8018106:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801810a:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 801810e:	f8c5 e002 	str.w	lr, [r5, #2]
 8018112:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 8018116:	f8a5 e006 	strh.w	lr, [r5, #6]
 801811a:	2902      	cmp	r1, #2
 801811c:	f000 8114 	beq.w	8018348 <MotionFX_MagCal_run+0x3c0>
 8018120:	4463      	add	r3, ip
 8018122:	b29b      	uxth	r3, r3
 8018124:	42bb      	cmp	r3, r7
 8018126:	bf28      	it	cs
 8018128:	463b      	movcs	r3, r7
 801812a:	eb03 0e04 	add.w	lr, r3, r4
 801812e:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8018132:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8018136:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 801813a:	f8c5 e002 	str.w	lr, [r5, #2]
 801813e:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 8018142:	f8a5 e006 	strh.w	lr, [r5, #6]
 8018146:	2903      	cmp	r1, #3
 8018148:	f000 80fe 	beq.w	8018348 <MotionFX_MagCal_run+0x3c0>
 801814c:	4463      	add	r3, ip
 801814e:	b29b      	uxth	r3, r3
 8018150:	42bb      	cmp	r3, r7
 8018152:	bf28      	it	cs
 8018154:	463b      	movcs	r3, r7
 8018156:	eb03 0e04 	add.w	lr, r3, r4
 801815a:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 801815e:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8018162:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 8018166:	f8c5 e002 	str.w	lr, [r5, #2]
 801816a:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 801816e:	f8a5 e006 	strh.w	lr, [r5, #6]
 8018172:	2904      	cmp	r1, #4
 8018174:	f000 80e8 	beq.w	8018348 <MotionFX_MagCal_run+0x3c0>
 8018178:	4463      	add	r3, ip
 801817a:	b29b      	uxth	r3, r3
 801817c:	42bb      	cmp	r3, r7
 801817e:	bf28      	it	cs
 8018180:	463b      	movcs	r3, r7
 8018182:	eb03 0e04 	add.w	lr, r3, r4
 8018186:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 801818a:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801818e:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 8018192:	f8c5 e002 	str.w	lr, [r5, #2]
 8018196:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 801819a:	f8a5 e006 	strh.w	lr, [r5, #6]
 801819e:	2905      	cmp	r1, #5
 80181a0:	f000 80d2 	beq.w	8018348 <MotionFX_MagCal_run+0x3c0>
 80181a4:	4463      	add	r3, ip
 80181a6:	b29b      	uxth	r3, r3
 80181a8:	42bb      	cmp	r3, r7
 80181aa:	bf28      	it	cs
 80181ac:	463b      	movcs	r3, r7
 80181ae:	441c      	add	r4, r3
 80181b0:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 80181b4:	f800 c034 	strb.w	ip, [r0, r4, lsl #3]
 80181b8:	f8d2 43fa 	ldr.w	r4, [r2, #1018]	; 0x3fa
 80181bc:	f8c5 4002 	str.w	r4, [r5, #2]
 80181c0:	f8b2 43fe 	ldrh.w	r4, [r2, #1022]	; 0x3fe
 80181c4:	80ec      	strh	r4, [r5, #6]
 80181c6:	2906      	cmp	r1, #6
 80181c8:	f000 80be 	beq.w	8018348 <MotionFX_MagCal_run+0x3c0>
 80181cc:	4463      	add	r3, ip
 80181ce:	b29b      	uxth	r3, r3
 80181d0:	42bb      	cmp	r3, r7
 80181d2:	bf28      	it	cs
 80181d4:	463b      	movcs	r3, r7
 80181d6:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 80181da:	eb03 0c04 	add.w	ip, r3, r4
 80181de:	2501      	movs	r5, #1
 80181e0:	f800 503c 	strb.w	r5, [r0, ip, lsl #3]
 80181e4:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80181e8:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 80181ec:	f8cc e002 	str.w	lr, [ip, #2]
 80181f0:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 80181f4:	f8ac e006 	strh.w	lr, [ip, #6]
 80181f8:	2907      	cmp	r1, #7
 80181fa:	f000 80a5 	beq.w	8018348 <MotionFX_MagCal_run+0x3c0>
 80181fe:	442b      	add	r3, r5
 8018200:	b29b      	uxth	r3, r3
 8018202:	42bb      	cmp	r3, r7
 8018204:	bf28      	it	cs
 8018206:	463b      	movcs	r3, r7
 8018208:	eb03 0e04 	add.w	lr, r3, r4
 801820c:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8018210:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8018214:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 8018218:	f8cc e002 	str.w	lr, [ip, #2]
 801821c:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 8018220:	f8ac e006 	strh.w	lr, [ip, #6]
 8018224:	2908      	cmp	r1, #8
 8018226:	f000 808f 	beq.w	8018348 <MotionFX_MagCal_run+0x3c0>
 801822a:	442b      	add	r3, r5
 801822c:	b29b      	uxth	r3, r3
 801822e:	42bb      	cmp	r3, r7
 8018230:	bf28      	it	cs
 8018232:	463b      	movcs	r3, r7
 8018234:	eb03 0e04 	add.w	lr, r3, r4
 8018238:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801823c:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8018240:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 8018244:	f8cc e002 	str.w	lr, [ip, #2]
 8018248:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 801824c:	f8ac e006 	strh.w	lr, [ip, #6]
 8018250:	2909      	cmp	r1, #9
 8018252:	d079      	beq.n	8018348 <MotionFX_MagCal_run+0x3c0>
 8018254:	442b      	add	r3, r5
 8018256:	b29b      	uxth	r3, r3
 8018258:	42bb      	cmp	r3, r7
 801825a:	bf28      	it	cs
 801825c:	463b      	movcs	r3, r7
 801825e:	eb03 0e04 	add.w	lr, r3, r4
 8018262:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8018266:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801826a:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 801826e:	f8cc e002 	str.w	lr, [ip, #2]
 8018272:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 8018276:	f8ac e006 	strh.w	lr, [ip, #6]
 801827a:	290a      	cmp	r1, #10
 801827c:	d064      	beq.n	8018348 <MotionFX_MagCal_run+0x3c0>
 801827e:	442b      	add	r3, r5
 8018280:	b29b      	uxth	r3, r3
 8018282:	42bb      	cmp	r3, r7
 8018284:	bf28      	it	cs
 8018286:	463b      	movcs	r3, r7
 8018288:	eb03 0e04 	add.w	lr, r3, r4
 801828c:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8018290:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8018294:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 8018298:	f8cc e002 	str.w	lr, [ip, #2]
 801829c:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 80182a0:	f8ac e006 	strh.w	lr, [ip, #6]
 80182a4:	290b      	cmp	r1, #11
 80182a6:	d04f      	beq.n	8018348 <MotionFX_MagCal_run+0x3c0>
 80182a8:	442b      	add	r3, r5
 80182aa:	b29b      	uxth	r3, r3
 80182ac:	42bb      	cmp	r3, r7
 80182ae:	bf28      	it	cs
 80182b0:	463b      	movcs	r3, r7
 80182b2:	eb03 0e04 	add.w	lr, r3, r4
 80182b6:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80182ba:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80182be:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 80182c2:	f8cc e002 	str.w	lr, [ip, #2]
 80182c6:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 80182ca:	f8ac e006 	strh.w	lr, [ip, #6]
 80182ce:	290c      	cmp	r1, #12
 80182d0:	d03a      	beq.n	8018348 <MotionFX_MagCal_run+0x3c0>
 80182d2:	442b      	add	r3, r5
 80182d4:	b29b      	uxth	r3, r3
 80182d6:	42bb      	cmp	r3, r7
 80182d8:	bf28      	it	cs
 80182da:	463b      	movcs	r3, r7
 80182dc:	eb03 0e04 	add.w	lr, r3, r4
 80182e0:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80182e4:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80182e8:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 80182ec:	f8cc e002 	str.w	lr, [ip, #2]
 80182f0:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 80182f4:	f8ac e006 	strh.w	lr, [ip, #6]
 80182f8:	290d      	cmp	r1, #13
 80182fa:	d025      	beq.n	8018348 <MotionFX_MagCal_run+0x3c0>
 80182fc:	442b      	add	r3, r5
 80182fe:	b29b      	uxth	r3, r3
 8018300:	42bb      	cmp	r3, r7
 8018302:	bf28      	it	cs
 8018304:	463b      	movcs	r3, r7
 8018306:	eb03 0e04 	add.w	lr, r3, r4
 801830a:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801830e:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8018312:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 8018316:	f8cc e002 	str.w	lr, [ip, #2]
 801831a:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 801831e:	f8ac e006 	strh.w	lr, [ip, #6]
 8018322:	290e      	cmp	r1, #14
 8018324:	d010      	beq.n	8018348 <MotionFX_MagCal_run+0x3c0>
 8018326:	442b      	add	r3, r5
 8018328:	b29b      	uxth	r3, r3
 801832a:	42bb      	cmp	r3, r7
 801832c:	bf28      	it	cs
 801832e:	463b      	movcs	r3, r7
 8018330:	441c      	add	r4, r3
 8018332:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 8018336:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
 801833a:	f8d2 0442 	ldr.w	r0, [r2, #1090]	; 0x442
 801833e:	f8c7 0002 	str.w	r0, [r7, #2]
 8018342:	f8b2 0446 	ldrh.w	r0, [r2, #1094]	; 0x446
 8018346:	80f8      	strh	r0, [r7, #6]
 8018348:	3901      	subs	r1, #1
 801834a:	b2c9      	uxtb	r1, r1
 801834c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8018350:	f8b1 43d0 	ldrh.w	r4, [r1, #976]	; 0x3d0
 8018354:	4434      	add	r4, r6
 8018356:	8213      	strh	r3, [r2, #16]
 8018358:	6154      	str	r4, [r2, #20]
 801835a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 801835e:	2b00      	cmp	r3, #0
 8018360:	f43f ae83 	beq.w	801806a <MotionFX_MagCal_run+0xe2>
 8018364:	8a11      	ldrh	r1, [r2, #16]
 8018366:	8a53      	ldrh	r3, [r2, #18]
 8018368:	428b      	cmp	r3, r1
 801836a:	d022      	beq.n	80183b2 <MotionFX_MagCal_run+0x42a>
 801836c:	b341      	cbz	r1, 80183c0 <MotionFX_MagCal_run+0x438>
 801836e:	6953      	ldr	r3, [r2, #20]
 8018370:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 8018374:	3301      	adds	r3, #1
 8018376:	4403      	add	r3, r0
 8018378:	1c58      	adds	r0, r3, #1
 801837a:	d021      	beq.n	80183c0 <MotionFX_MagCal_run+0x438>
 801837c:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 8018380:	3410      	adds	r4, #16
 8018382:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8018384:	42a0      	cmp	r0, r4
 8018386:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 801838a:	bf84      	itt	hi
 801838c:	6553      	strhi	r3, [r2, #84]	; 0x54
 801838e:	4618      	movhi	r0, r3
 8018390:	4420      	add	r0, r4
 8018392:	4283      	cmp	r3, r0
 8018394:	f4ff ae69 	bcc.w	801806a <MotionFX_MagCal_run+0xe2>
 8018398:	b131      	cbz	r1, 80183a8 <MotionFX_MagCal_run+0x420>
 801839a:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 801839e:	6952      	ldr	r2, [r2, #20]
 80183a0:	3901      	subs	r1, #1
 80183a2:	fb00 2111 	mls	r1, r0, r1, r2
 80183a6:	b289      	uxth	r1, r1
 80183a8:	1a5b      	subs	r3, r3, r1
 80183aa:	b21b      	sxth	r3, r3
 80183ac:	42a3      	cmp	r3, r4
 80183ae:	f6ff ae5c 	blt.w	801806a <MotionFX_MagCal_run+0xe2>
 80183b2:	4905      	ldr	r1, [pc, #20]	; (80183c8 <MotionFX_MagCal_run+0x440>)
 80183b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80183b8:	f101 0014 	add.w	r0, r1, #20
 80183bc:	f7fd babc 	b.w	8015938 <MEMS_runMagCal>
 80183c0:	f242 7410 	movw	r4, #10000	; 0x2710
 80183c4:	2300      	movs	r3, #0
 80183c6:	e7dc      	b.n	8018382 <MotionFX_MagCal_run+0x3fa>
 80183c8:	20000220 	.word	0x20000220

080183cc <MotionFX_MagCal_getParams>:
 80183cc:	b4f0      	push	{r4, r5, r6, r7}
 80183ce:	4f1b      	ldr	r7, [pc, #108]	; (801843c <MotionFX_MagCal_getParams+0x70>)
 80183d0:	793b      	ldrb	r3, [r7, #4]
 80183d2:	b08e      	sub	sp, #56	; 0x38
 80183d4:	b373      	cbz	r3, 8018434 <MotionFX_MagCal_getParams+0x68>
 80183d6:	f107 0574 	add.w	r5, r7, #116	; 0x74
 80183da:	4606      	mov	r6, r0
 80183dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183de:	ac01      	add	r4, sp, #4
 80183e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80183e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80183e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183e8:	ed9d 7a03 	vldr	s14, [sp, #12]
 80183ec:	eddd 6a02 	vldr	s13, [sp, #8]
 80183f0:	eddd 7a04 	vldr	s15, [sp, #16]
 80183f4:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8018440 <MotionFX_MagCal_getParams+0x74>
 80183f8:	682d      	ldr	r5, [r5, #0]
 80183fa:	f897 7074 	ldrb.w	r7, [r7, #116]	; 0x74
 80183fe:	7337      	strb	r7, [r6, #12]
 8018400:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8018404:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8018408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801840c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801840e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018412:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801841a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801841e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018422:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018426:	6025      	str	r5, [r4, #0]
 8018428:	edc6 6a00 	vstr	s13, [r6]
 801842c:	ed86 7a01 	vstr	s14, [r6, #4]
 8018430:	edc6 7a02 	vstr	s15, [r6, #8]
 8018434:	b00e      	add	sp, #56	; 0x38
 8018436:	bcf0      	pop	{r4, r5, r6, r7}
 8018438:	4770      	bx	lr
 801843a:	bf00      	nop
 801843c:	20000218 	.word	0x20000218
 8018440:	3b03126f 	.word	0x3b03126f

08018444 <MotionFX_GetLibVersion>:
 8018444:	4b0f      	ldr	r3, [pc, #60]	; (8018484 <MotionFX_GetLibVersion+0x40>)
 8018446:	791b      	ldrb	r3, [r3, #4]
 8018448:	b90b      	cbnz	r3, 801844e <MotionFX_GetLibVersion+0xa>
 801844a:	4618      	mov	r0, r3
 801844c:	4770      	bx	lr
 801844e:	b470      	push	{r4, r5, r6}
 8018450:	4e0d      	ldr	r6, [pc, #52]	; (8018488 <MotionFX_GetLibVersion+0x44>)
 8018452:	4604      	mov	r4, r0
 8018454:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8018456:	b08b      	sub	sp, #44	; 0x2c
 8018458:	ad01      	add	r5, sp, #4
 801845a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801845c:	6833      	ldr	r3, [r6, #0]
 801845e:	f825 3b02 	strh.w	r3, [r5], #2
 8018462:	0c1b      	lsrs	r3, r3, #16
 8018464:	702b      	strb	r3, [r5, #0]
 8018466:	ad01      	add	r5, sp, #4
 8018468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801846a:	882e      	ldrh	r6, [r5, #0]
 801846c:	60e3      	str	r3, [r4, #12]
 801846e:	78ad      	ldrb	r5, [r5, #2]
 8018470:	6020      	str	r0, [r4, #0]
 8018472:	2312      	movs	r3, #18
 8018474:	4618      	mov	r0, r3
 8018476:	6061      	str	r1, [r4, #4]
 8018478:	60a2      	str	r2, [r4, #8]
 801847a:	8226      	strh	r6, [r4, #16]
 801847c:	74a5      	strb	r5, [r4, #18]
 801847e:	b00b      	add	sp, #44	; 0x2c
 8018480:	bc70      	pop	{r4, r5, r6}
 8018482:	4770      	bx	lr
 8018484:	20000218 	.word	0x20000218
 8018488:	0801abe4 	.word	0x0801abe4
 801848c:	00000000 	.word	0x00000000

08018490 <ceil>:
 8018490:	ec51 0b10 	vmov	r0, r1, d0
 8018494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018498:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801849c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80184a0:	2e13      	cmp	r6, #19
 80184a2:	ee10 5a10 	vmov	r5, s0
 80184a6:	ee10 8a10 	vmov	r8, s0
 80184aa:	460c      	mov	r4, r1
 80184ac:	dc30      	bgt.n	8018510 <ceil+0x80>
 80184ae:	2e00      	cmp	r6, #0
 80184b0:	da12      	bge.n	80184d8 <ceil+0x48>
 80184b2:	a335      	add	r3, pc, #212	; (adr r3, 8018588 <ceil+0xf8>)
 80184b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184b8:	f7e7 fee0 	bl	800027c <__adddf3>
 80184bc:	2200      	movs	r2, #0
 80184be:	2300      	movs	r3, #0
 80184c0:	f7e8 fb22 	bl	8000b08 <__aeabi_dcmpgt>
 80184c4:	b128      	cbz	r0, 80184d2 <ceil+0x42>
 80184c6:	2c00      	cmp	r4, #0
 80184c8:	db55      	blt.n	8018576 <ceil+0xe6>
 80184ca:	432c      	orrs	r4, r5
 80184cc:	d057      	beq.n	801857e <ceil+0xee>
 80184ce:	4c30      	ldr	r4, [pc, #192]	; (8018590 <ceil+0x100>)
 80184d0:	2500      	movs	r5, #0
 80184d2:	4621      	mov	r1, r4
 80184d4:	4628      	mov	r0, r5
 80184d6:	e025      	b.n	8018524 <ceil+0x94>
 80184d8:	4f2e      	ldr	r7, [pc, #184]	; (8018594 <ceil+0x104>)
 80184da:	4137      	asrs	r7, r6
 80184dc:	ea01 0307 	and.w	r3, r1, r7
 80184e0:	4303      	orrs	r3, r0
 80184e2:	d01f      	beq.n	8018524 <ceil+0x94>
 80184e4:	a328      	add	r3, pc, #160	; (adr r3, 8018588 <ceil+0xf8>)
 80184e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184ea:	f7e7 fec7 	bl	800027c <__adddf3>
 80184ee:	2200      	movs	r2, #0
 80184f0:	2300      	movs	r3, #0
 80184f2:	f7e8 fb09 	bl	8000b08 <__aeabi_dcmpgt>
 80184f6:	2800      	cmp	r0, #0
 80184f8:	d0eb      	beq.n	80184d2 <ceil+0x42>
 80184fa:	2c00      	cmp	r4, #0
 80184fc:	bfc2      	ittt	gt
 80184fe:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8018502:	fa43 f606 	asrgt.w	r6, r3, r6
 8018506:	19a4      	addgt	r4, r4, r6
 8018508:	ea24 0407 	bic.w	r4, r4, r7
 801850c:	2500      	movs	r5, #0
 801850e:	e7e0      	b.n	80184d2 <ceil+0x42>
 8018510:	2e33      	cmp	r6, #51	; 0x33
 8018512:	dd0b      	ble.n	801852c <ceil+0x9c>
 8018514:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018518:	d104      	bne.n	8018524 <ceil+0x94>
 801851a:	ee10 2a10 	vmov	r2, s0
 801851e:	460b      	mov	r3, r1
 8018520:	f7e7 feac 	bl	800027c <__adddf3>
 8018524:	ec41 0b10 	vmov	d0, r0, r1
 8018528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801852c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8018530:	f04f 33ff 	mov.w	r3, #4294967295
 8018534:	fa23 f707 	lsr.w	r7, r3, r7
 8018538:	4207      	tst	r7, r0
 801853a:	d0f3      	beq.n	8018524 <ceil+0x94>
 801853c:	a312      	add	r3, pc, #72	; (adr r3, 8018588 <ceil+0xf8>)
 801853e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018542:	f7e7 fe9b 	bl	800027c <__adddf3>
 8018546:	2200      	movs	r2, #0
 8018548:	2300      	movs	r3, #0
 801854a:	f7e8 fadd 	bl	8000b08 <__aeabi_dcmpgt>
 801854e:	2800      	cmp	r0, #0
 8018550:	d0bf      	beq.n	80184d2 <ceil+0x42>
 8018552:	2c00      	cmp	r4, #0
 8018554:	dd02      	ble.n	801855c <ceil+0xcc>
 8018556:	2e14      	cmp	r6, #20
 8018558:	d103      	bne.n	8018562 <ceil+0xd2>
 801855a:	3401      	adds	r4, #1
 801855c:	ea25 0507 	bic.w	r5, r5, r7
 8018560:	e7b7      	b.n	80184d2 <ceil+0x42>
 8018562:	2301      	movs	r3, #1
 8018564:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018568:	fa03 f606 	lsl.w	r6, r3, r6
 801856c:	4435      	add	r5, r6
 801856e:	4545      	cmp	r5, r8
 8018570:	bf38      	it	cc
 8018572:	18e4      	addcc	r4, r4, r3
 8018574:	e7f2      	b.n	801855c <ceil+0xcc>
 8018576:	2500      	movs	r5, #0
 8018578:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801857c:	e7a9      	b.n	80184d2 <ceil+0x42>
 801857e:	4625      	mov	r5, r4
 8018580:	e7a7      	b.n	80184d2 <ceil+0x42>
 8018582:	bf00      	nop
 8018584:	f3af 8000 	nop.w
 8018588:	8800759c 	.word	0x8800759c
 801858c:	7e37e43c 	.word	0x7e37e43c
 8018590:	3ff00000 	.word	0x3ff00000
 8018594:	000fffff 	.word	0x000fffff

08018598 <floor>:
 8018598:	ec51 0b10 	vmov	r0, r1, d0
 801859c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80185a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80185a8:	2e13      	cmp	r6, #19
 80185aa:	ee10 5a10 	vmov	r5, s0
 80185ae:	ee10 8a10 	vmov	r8, s0
 80185b2:	460c      	mov	r4, r1
 80185b4:	dc32      	bgt.n	801861c <floor+0x84>
 80185b6:	2e00      	cmp	r6, #0
 80185b8:	da14      	bge.n	80185e4 <floor+0x4c>
 80185ba:	a333      	add	r3, pc, #204	; (adr r3, 8018688 <floor+0xf0>)
 80185bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185c0:	f7e7 fe5c 	bl	800027c <__adddf3>
 80185c4:	2200      	movs	r2, #0
 80185c6:	2300      	movs	r3, #0
 80185c8:	f7e8 fa9e 	bl	8000b08 <__aeabi_dcmpgt>
 80185cc:	b138      	cbz	r0, 80185de <floor+0x46>
 80185ce:	2c00      	cmp	r4, #0
 80185d0:	da57      	bge.n	8018682 <floor+0xea>
 80185d2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80185d6:	431d      	orrs	r5, r3
 80185d8:	d001      	beq.n	80185de <floor+0x46>
 80185da:	4c2d      	ldr	r4, [pc, #180]	; (8018690 <floor+0xf8>)
 80185dc:	2500      	movs	r5, #0
 80185de:	4621      	mov	r1, r4
 80185e0:	4628      	mov	r0, r5
 80185e2:	e025      	b.n	8018630 <floor+0x98>
 80185e4:	4f2b      	ldr	r7, [pc, #172]	; (8018694 <floor+0xfc>)
 80185e6:	4137      	asrs	r7, r6
 80185e8:	ea01 0307 	and.w	r3, r1, r7
 80185ec:	4303      	orrs	r3, r0
 80185ee:	d01f      	beq.n	8018630 <floor+0x98>
 80185f0:	a325      	add	r3, pc, #148	; (adr r3, 8018688 <floor+0xf0>)
 80185f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185f6:	f7e7 fe41 	bl	800027c <__adddf3>
 80185fa:	2200      	movs	r2, #0
 80185fc:	2300      	movs	r3, #0
 80185fe:	f7e8 fa83 	bl	8000b08 <__aeabi_dcmpgt>
 8018602:	2800      	cmp	r0, #0
 8018604:	d0eb      	beq.n	80185de <floor+0x46>
 8018606:	2c00      	cmp	r4, #0
 8018608:	bfbe      	ittt	lt
 801860a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801860e:	fa43 f606 	asrlt.w	r6, r3, r6
 8018612:	19a4      	addlt	r4, r4, r6
 8018614:	ea24 0407 	bic.w	r4, r4, r7
 8018618:	2500      	movs	r5, #0
 801861a:	e7e0      	b.n	80185de <floor+0x46>
 801861c:	2e33      	cmp	r6, #51	; 0x33
 801861e:	dd0b      	ble.n	8018638 <floor+0xa0>
 8018620:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018624:	d104      	bne.n	8018630 <floor+0x98>
 8018626:	ee10 2a10 	vmov	r2, s0
 801862a:	460b      	mov	r3, r1
 801862c:	f7e7 fe26 	bl	800027c <__adddf3>
 8018630:	ec41 0b10 	vmov	d0, r0, r1
 8018634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018638:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801863c:	f04f 33ff 	mov.w	r3, #4294967295
 8018640:	fa23 f707 	lsr.w	r7, r3, r7
 8018644:	4207      	tst	r7, r0
 8018646:	d0f3      	beq.n	8018630 <floor+0x98>
 8018648:	a30f      	add	r3, pc, #60	; (adr r3, 8018688 <floor+0xf0>)
 801864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801864e:	f7e7 fe15 	bl	800027c <__adddf3>
 8018652:	2200      	movs	r2, #0
 8018654:	2300      	movs	r3, #0
 8018656:	f7e8 fa57 	bl	8000b08 <__aeabi_dcmpgt>
 801865a:	2800      	cmp	r0, #0
 801865c:	d0bf      	beq.n	80185de <floor+0x46>
 801865e:	2c00      	cmp	r4, #0
 8018660:	da02      	bge.n	8018668 <floor+0xd0>
 8018662:	2e14      	cmp	r6, #20
 8018664:	d103      	bne.n	801866e <floor+0xd6>
 8018666:	3401      	adds	r4, #1
 8018668:	ea25 0507 	bic.w	r5, r5, r7
 801866c:	e7b7      	b.n	80185de <floor+0x46>
 801866e:	2301      	movs	r3, #1
 8018670:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018674:	fa03 f606 	lsl.w	r6, r3, r6
 8018678:	4435      	add	r5, r6
 801867a:	4545      	cmp	r5, r8
 801867c:	bf38      	it	cc
 801867e:	18e4      	addcc	r4, r4, r3
 8018680:	e7f2      	b.n	8018668 <floor+0xd0>
 8018682:	2500      	movs	r5, #0
 8018684:	462c      	mov	r4, r5
 8018686:	e7aa      	b.n	80185de <floor+0x46>
 8018688:	8800759c 	.word	0x8800759c
 801868c:	7e37e43c 	.word	0x7e37e43c
 8018690:	bff00000 	.word	0xbff00000
 8018694:	000fffff 	.word	0x000fffff

08018698 <cosf>:
 8018698:	ee10 3a10 	vmov	r3, s0
 801869c:	b507      	push	{r0, r1, r2, lr}
 801869e:	4a1c      	ldr	r2, [pc, #112]	; (8018710 <cosf+0x78>)
 80186a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80186a4:	4293      	cmp	r3, r2
 80186a6:	dc04      	bgt.n	80186b2 <cosf+0x1a>
 80186a8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8018714 <cosf+0x7c>
 80186ac:	f000 fe9e 	bl	80193ec <__kernel_cosf>
 80186b0:	e004      	b.n	80186bc <cosf+0x24>
 80186b2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80186b6:	db04      	blt.n	80186c2 <cosf+0x2a>
 80186b8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80186bc:	b003      	add	sp, #12
 80186be:	f85d fb04 	ldr.w	pc, [sp], #4
 80186c2:	4668      	mov	r0, sp
 80186c4:	f000 fd52 	bl	801916c <__ieee754_rem_pio2f>
 80186c8:	f000 0003 	and.w	r0, r0, #3
 80186cc:	2801      	cmp	r0, #1
 80186ce:	d007      	beq.n	80186e0 <cosf+0x48>
 80186d0:	2802      	cmp	r0, #2
 80186d2:	d00e      	beq.n	80186f2 <cosf+0x5a>
 80186d4:	b9a0      	cbnz	r0, 8018700 <cosf+0x68>
 80186d6:	eddd 0a01 	vldr	s1, [sp, #4]
 80186da:	ed9d 0a00 	vldr	s0, [sp]
 80186de:	e7e5      	b.n	80186ac <cosf+0x14>
 80186e0:	eddd 0a01 	vldr	s1, [sp, #4]
 80186e4:	ed9d 0a00 	vldr	s0, [sp]
 80186e8:	f001 f96a 	bl	80199c0 <__kernel_sinf>
 80186ec:	eeb1 0a40 	vneg.f32	s0, s0
 80186f0:	e7e4      	b.n	80186bc <cosf+0x24>
 80186f2:	eddd 0a01 	vldr	s1, [sp, #4]
 80186f6:	ed9d 0a00 	vldr	s0, [sp]
 80186fa:	f000 fe77 	bl	80193ec <__kernel_cosf>
 80186fe:	e7f5      	b.n	80186ec <cosf+0x54>
 8018700:	eddd 0a01 	vldr	s1, [sp, #4]
 8018704:	ed9d 0a00 	vldr	s0, [sp]
 8018708:	2001      	movs	r0, #1
 801870a:	f001 f959 	bl	80199c0 <__kernel_sinf>
 801870e:	e7d5      	b.n	80186bc <cosf+0x24>
 8018710:	3f490fd8 	.word	0x3f490fd8
 8018714:	00000000 	.word	0x00000000

08018718 <roundf>:
 8018718:	ee10 0a10 	vmov	r0, s0
 801871c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8018720:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8018724:	2a16      	cmp	r2, #22
 8018726:	dc15      	bgt.n	8018754 <roundf+0x3c>
 8018728:	2a00      	cmp	r2, #0
 801872a:	da08      	bge.n	801873e <roundf+0x26>
 801872c:	3201      	adds	r2, #1
 801872e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8018732:	d101      	bne.n	8018738 <roundf+0x20>
 8018734:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8018738:	ee00 3a10 	vmov	s0, r3
 801873c:	4770      	bx	lr
 801873e:	4908      	ldr	r1, [pc, #32]	; (8018760 <roundf+0x48>)
 8018740:	4111      	asrs	r1, r2
 8018742:	4208      	tst	r0, r1
 8018744:	d0fa      	beq.n	801873c <roundf+0x24>
 8018746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801874a:	4113      	asrs	r3, r2
 801874c:	4403      	add	r3, r0
 801874e:	ea23 0301 	bic.w	r3, r3, r1
 8018752:	e7f1      	b.n	8018738 <roundf+0x20>
 8018754:	2a80      	cmp	r2, #128	; 0x80
 8018756:	d1f1      	bne.n	801873c <roundf+0x24>
 8018758:	ee30 0a00 	vadd.f32	s0, s0, s0
 801875c:	4770      	bx	lr
 801875e:	bf00      	nop
 8018760:	007fffff 	.word	0x007fffff

08018764 <sinf>:
 8018764:	ee10 3a10 	vmov	r3, s0
 8018768:	b507      	push	{r0, r1, r2, lr}
 801876a:	4a1d      	ldr	r2, [pc, #116]	; (80187e0 <sinf+0x7c>)
 801876c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018770:	4293      	cmp	r3, r2
 8018772:	dc05      	bgt.n	8018780 <sinf+0x1c>
 8018774:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80187e4 <sinf+0x80>
 8018778:	2000      	movs	r0, #0
 801877a:	f001 f921 	bl	80199c0 <__kernel_sinf>
 801877e:	e004      	b.n	801878a <sinf+0x26>
 8018780:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018784:	db04      	blt.n	8018790 <sinf+0x2c>
 8018786:	ee30 0a40 	vsub.f32	s0, s0, s0
 801878a:	b003      	add	sp, #12
 801878c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018790:	4668      	mov	r0, sp
 8018792:	f000 fceb 	bl	801916c <__ieee754_rem_pio2f>
 8018796:	f000 0003 	and.w	r0, r0, #3
 801879a:	2801      	cmp	r0, #1
 801879c:	d008      	beq.n	80187b0 <sinf+0x4c>
 801879e:	2802      	cmp	r0, #2
 80187a0:	d00d      	beq.n	80187be <sinf+0x5a>
 80187a2:	b9b0      	cbnz	r0, 80187d2 <sinf+0x6e>
 80187a4:	eddd 0a01 	vldr	s1, [sp, #4]
 80187a8:	ed9d 0a00 	vldr	s0, [sp]
 80187ac:	2001      	movs	r0, #1
 80187ae:	e7e4      	b.n	801877a <sinf+0x16>
 80187b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80187b4:	ed9d 0a00 	vldr	s0, [sp]
 80187b8:	f000 fe18 	bl	80193ec <__kernel_cosf>
 80187bc:	e7e5      	b.n	801878a <sinf+0x26>
 80187be:	eddd 0a01 	vldr	s1, [sp, #4]
 80187c2:	ed9d 0a00 	vldr	s0, [sp]
 80187c6:	2001      	movs	r0, #1
 80187c8:	f001 f8fa 	bl	80199c0 <__kernel_sinf>
 80187cc:	eeb1 0a40 	vneg.f32	s0, s0
 80187d0:	e7db      	b.n	801878a <sinf+0x26>
 80187d2:	eddd 0a01 	vldr	s1, [sp, #4]
 80187d6:	ed9d 0a00 	vldr	s0, [sp]
 80187da:	f000 fe07 	bl	80193ec <__kernel_cosf>
 80187de:	e7f5      	b.n	80187cc <sinf+0x68>
 80187e0:	3f490fd8 	.word	0x3f490fd8
 80187e4:	00000000 	.word	0x00000000

080187e8 <tanf>:
 80187e8:	ee10 3a10 	vmov	r3, s0
 80187ec:	b507      	push	{r0, r1, r2, lr}
 80187ee:	4a10      	ldr	r2, [pc, #64]	; (8018830 <tanf+0x48>)
 80187f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80187f4:	4293      	cmp	r3, r2
 80187f6:	dc05      	bgt.n	8018804 <tanf+0x1c>
 80187f8:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8018834 <tanf+0x4c>
 80187fc:	2001      	movs	r0, #1
 80187fe:	f001 f927 	bl	8019a50 <__kernel_tanf>
 8018802:	e004      	b.n	801880e <tanf+0x26>
 8018804:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018808:	db04      	blt.n	8018814 <tanf+0x2c>
 801880a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801880e:	b003      	add	sp, #12
 8018810:	f85d fb04 	ldr.w	pc, [sp], #4
 8018814:	4668      	mov	r0, sp
 8018816:	f000 fca9 	bl	801916c <__ieee754_rem_pio2f>
 801881a:	0040      	lsls	r0, r0, #1
 801881c:	f000 0002 	and.w	r0, r0, #2
 8018820:	eddd 0a01 	vldr	s1, [sp, #4]
 8018824:	ed9d 0a00 	vldr	s0, [sp]
 8018828:	f1c0 0001 	rsb	r0, r0, #1
 801882c:	e7e7      	b.n	80187fe <tanf+0x16>
 801882e:	bf00      	nop
 8018830:	3f490fda 	.word	0x3f490fda
 8018834:	00000000 	.word	0x00000000

08018838 <atan2>:
 8018838:	f000 b89a 	b.w	8018970 <__ieee754_atan2>

0801883c <sqrt>:
 801883c:	b538      	push	{r3, r4, r5, lr}
 801883e:	ed2d 8b02 	vpush	{d8}
 8018842:	ec55 4b10 	vmov	r4, r5, d0
 8018846:	f000 f95d 	bl	8018b04 <__ieee754_sqrt>
 801884a:	4b15      	ldr	r3, [pc, #84]	; (80188a0 <sqrt+0x64>)
 801884c:	eeb0 8a40 	vmov.f32	s16, s0
 8018850:	eef0 8a60 	vmov.f32	s17, s1
 8018854:	f993 3000 	ldrsb.w	r3, [r3]
 8018858:	3301      	adds	r3, #1
 801885a:	d019      	beq.n	8018890 <sqrt+0x54>
 801885c:	4622      	mov	r2, r4
 801885e:	462b      	mov	r3, r5
 8018860:	4620      	mov	r0, r4
 8018862:	4629      	mov	r1, r5
 8018864:	f7e8 f95a 	bl	8000b1c <__aeabi_dcmpun>
 8018868:	b990      	cbnz	r0, 8018890 <sqrt+0x54>
 801886a:	2200      	movs	r2, #0
 801886c:	2300      	movs	r3, #0
 801886e:	4620      	mov	r0, r4
 8018870:	4629      	mov	r1, r5
 8018872:	f7e8 f92b 	bl	8000acc <__aeabi_dcmplt>
 8018876:	b158      	cbz	r0, 8018890 <sqrt+0x54>
 8018878:	f001 fd0e 	bl	801a298 <__errno>
 801887c:	2321      	movs	r3, #33	; 0x21
 801887e:	6003      	str	r3, [r0, #0]
 8018880:	2200      	movs	r2, #0
 8018882:	2300      	movs	r3, #0
 8018884:	4610      	mov	r0, r2
 8018886:	4619      	mov	r1, r3
 8018888:	f7e7 ffd8 	bl	800083c <__aeabi_ddiv>
 801888c:	ec41 0b18 	vmov	d8, r0, r1
 8018890:	eeb0 0a48 	vmov.f32	s0, s16
 8018894:	eef0 0a68 	vmov.f32	s1, s17
 8018898:	ecbd 8b02 	vpop	{d8}
 801889c:	bd38      	pop	{r3, r4, r5, pc}
 801889e:	bf00      	nop
 80188a0:	2000018c 	.word	0x2000018c

080188a4 <acosf>:
 80188a4:	b508      	push	{r3, lr}
 80188a6:	ed2d 8b02 	vpush	{d8}
 80188aa:	eeb0 8a40 	vmov.f32	s16, s0
 80188ae:	f000 f9dd 	bl	8018c6c <__ieee754_acosf>
 80188b2:	4b13      	ldr	r3, [pc, #76]	; (8018900 <acosf+0x5c>)
 80188b4:	f993 3000 	ldrsb.w	r3, [r3]
 80188b8:	3301      	adds	r3, #1
 80188ba:	eef0 8a40 	vmov.f32	s17, s0
 80188be:	d01a      	beq.n	80188f6 <acosf+0x52>
 80188c0:	eeb4 8a48 	vcmp.f32	s16, s16
 80188c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188c8:	d615      	bvs.n	80188f6 <acosf+0x52>
 80188ca:	eeb0 0a48 	vmov.f32	s0, s16
 80188ce:	f001 fc21 	bl	801a114 <fabsf>
 80188d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80188d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80188da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188de:	dd0a      	ble.n	80188f6 <acosf+0x52>
 80188e0:	f001 fcda 	bl	801a298 <__errno>
 80188e4:	ecbd 8b02 	vpop	{d8}
 80188e8:	2321      	movs	r3, #33	; 0x21
 80188ea:	6003      	str	r3, [r0, #0]
 80188ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80188f0:	4804      	ldr	r0, [pc, #16]	; (8018904 <acosf+0x60>)
 80188f2:	f001 bc59 	b.w	801a1a8 <nanf>
 80188f6:	eeb0 0a68 	vmov.f32	s0, s17
 80188fa:	ecbd 8b02 	vpop	{d8}
 80188fe:	bd08      	pop	{r3, pc}
 8018900:	2000018c 	.word	0x2000018c
 8018904:	0801b0e5 	.word	0x0801b0e5

08018908 <asinf>:
 8018908:	b508      	push	{r3, lr}
 801890a:	ed2d 8b02 	vpush	{d8}
 801890e:	eeb0 8a40 	vmov.f32	s16, s0
 8018912:	f000 faa5 	bl	8018e60 <__ieee754_asinf>
 8018916:	4b13      	ldr	r3, [pc, #76]	; (8018964 <asinf+0x5c>)
 8018918:	f993 3000 	ldrsb.w	r3, [r3]
 801891c:	3301      	adds	r3, #1
 801891e:	eef0 8a40 	vmov.f32	s17, s0
 8018922:	d01a      	beq.n	801895a <asinf+0x52>
 8018924:	eeb4 8a48 	vcmp.f32	s16, s16
 8018928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801892c:	d615      	bvs.n	801895a <asinf+0x52>
 801892e:	eeb0 0a48 	vmov.f32	s0, s16
 8018932:	f001 fbef 	bl	801a114 <fabsf>
 8018936:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801893a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801893e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018942:	dd0a      	ble.n	801895a <asinf+0x52>
 8018944:	f001 fca8 	bl	801a298 <__errno>
 8018948:	ecbd 8b02 	vpop	{d8}
 801894c:	2321      	movs	r3, #33	; 0x21
 801894e:	6003      	str	r3, [r0, #0]
 8018950:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018954:	4804      	ldr	r0, [pc, #16]	; (8018968 <asinf+0x60>)
 8018956:	f001 bc27 	b.w	801a1a8 <nanf>
 801895a:	eeb0 0a68 	vmov.f32	s0, s17
 801895e:	ecbd 8b02 	vpop	{d8}
 8018962:	bd08      	pop	{r3, pc}
 8018964:	2000018c 	.word	0x2000018c
 8018968:	0801b0e5 	.word	0x0801b0e5

0801896c <atan2f>:
 801896c:	f000 bb5e 	b.w	801902c <__ieee754_atan2f>

08018970 <__ieee754_atan2>:
 8018970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018974:	ec57 6b11 	vmov	r6, r7, d1
 8018978:	4273      	negs	r3, r6
 801897a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8018b00 <__ieee754_atan2+0x190>
 801897e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8018982:	4333      	orrs	r3, r6
 8018984:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8018988:	4573      	cmp	r3, lr
 801898a:	ec51 0b10 	vmov	r0, r1, d0
 801898e:	ee11 8a10 	vmov	r8, s2
 8018992:	d80a      	bhi.n	80189aa <__ieee754_atan2+0x3a>
 8018994:	4244      	negs	r4, r0
 8018996:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801899a:	4304      	orrs	r4, r0
 801899c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80189a0:	4574      	cmp	r4, lr
 80189a2:	ee10 9a10 	vmov	r9, s0
 80189a6:	468c      	mov	ip, r1
 80189a8:	d907      	bls.n	80189ba <__ieee754_atan2+0x4a>
 80189aa:	4632      	mov	r2, r6
 80189ac:	463b      	mov	r3, r7
 80189ae:	f7e7 fc65 	bl	800027c <__adddf3>
 80189b2:	ec41 0b10 	vmov	d0, r0, r1
 80189b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189ba:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80189be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80189c2:	4334      	orrs	r4, r6
 80189c4:	d103      	bne.n	80189ce <__ieee754_atan2+0x5e>
 80189c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189ca:	f001 b925 	b.w	8019c18 <atan>
 80189ce:	17bc      	asrs	r4, r7, #30
 80189d0:	f004 0402 	and.w	r4, r4, #2
 80189d4:	ea53 0909 	orrs.w	r9, r3, r9
 80189d8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80189dc:	d107      	bne.n	80189ee <__ieee754_atan2+0x7e>
 80189de:	2c02      	cmp	r4, #2
 80189e0:	d060      	beq.n	8018aa4 <__ieee754_atan2+0x134>
 80189e2:	2c03      	cmp	r4, #3
 80189e4:	d1e5      	bne.n	80189b2 <__ieee754_atan2+0x42>
 80189e6:	a142      	add	r1, pc, #264	; (adr r1, 8018af0 <__ieee754_atan2+0x180>)
 80189e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80189ec:	e7e1      	b.n	80189b2 <__ieee754_atan2+0x42>
 80189ee:	ea52 0808 	orrs.w	r8, r2, r8
 80189f2:	d106      	bne.n	8018a02 <__ieee754_atan2+0x92>
 80189f4:	f1bc 0f00 	cmp.w	ip, #0
 80189f8:	da5f      	bge.n	8018aba <__ieee754_atan2+0x14a>
 80189fa:	a13f      	add	r1, pc, #252	; (adr r1, 8018af8 <__ieee754_atan2+0x188>)
 80189fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018a00:	e7d7      	b.n	80189b2 <__ieee754_atan2+0x42>
 8018a02:	4572      	cmp	r2, lr
 8018a04:	d10f      	bne.n	8018a26 <__ieee754_atan2+0xb6>
 8018a06:	4293      	cmp	r3, r2
 8018a08:	f104 34ff 	add.w	r4, r4, #4294967295
 8018a0c:	d107      	bne.n	8018a1e <__ieee754_atan2+0xae>
 8018a0e:	2c02      	cmp	r4, #2
 8018a10:	d84c      	bhi.n	8018aac <__ieee754_atan2+0x13c>
 8018a12:	4b35      	ldr	r3, [pc, #212]	; (8018ae8 <__ieee754_atan2+0x178>)
 8018a14:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8018a18:	e9d4 0100 	ldrd	r0, r1, [r4]
 8018a1c:	e7c9      	b.n	80189b2 <__ieee754_atan2+0x42>
 8018a1e:	2c02      	cmp	r4, #2
 8018a20:	d848      	bhi.n	8018ab4 <__ieee754_atan2+0x144>
 8018a22:	4b32      	ldr	r3, [pc, #200]	; (8018aec <__ieee754_atan2+0x17c>)
 8018a24:	e7f6      	b.n	8018a14 <__ieee754_atan2+0xa4>
 8018a26:	4573      	cmp	r3, lr
 8018a28:	d0e4      	beq.n	80189f4 <__ieee754_atan2+0x84>
 8018a2a:	1a9b      	subs	r3, r3, r2
 8018a2c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8018a30:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018a34:	da1e      	bge.n	8018a74 <__ieee754_atan2+0x104>
 8018a36:	2f00      	cmp	r7, #0
 8018a38:	da01      	bge.n	8018a3e <__ieee754_atan2+0xce>
 8018a3a:	323c      	adds	r2, #60	; 0x3c
 8018a3c:	db1e      	blt.n	8018a7c <__ieee754_atan2+0x10c>
 8018a3e:	4632      	mov	r2, r6
 8018a40:	463b      	mov	r3, r7
 8018a42:	f7e7 fefb 	bl	800083c <__aeabi_ddiv>
 8018a46:	ec41 0b10 	vmov	d0, r0, r1
 8018a4a:	f001 fa85 	bl	8019f58 <fabs>
 8018a4e:	f001 f8e3 	bl	8019c18 <atan>
 8018a52:	ec51 0b10 	vmov	r0, r1, d0
 8018a56:	2c01      	cmp	r4, #1
 8018a58:	d013      	beq.n	8018a82 <__ieee754_atan2+0x112>
 8018a5a:	2c02      	cmp	r4, #2
 8018a5c:	d015      	beq.n	8018a8a <__ieee754_atan2+0x11a>
 8018a5e:	2c00      	cmp	r4, #0
 8018a60:	d0a7      	beq.n	80189b2 <__ieee754_atan2+0x42>
 8018a62:	a319      	add	r3, pc, #100	; (adr r3, 8018ac8 <__ieee754_atan2+0x158>)
 8018a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a68:	f7e7 fc06 	bl	8000278 <__aeabi_dsub>
 8018a6c:	a318      	add	r3, pc, #96	; (adr r3, 8018ad0 <__ieee754_atan2+0x160>)
 8018a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a72:	e014      	b.n	8018a9e <__ieee754_atan2+0x12e>
 8018a74:	a118      	add	r1, pc, #96	; (adr r1, 8018ad8 <__ieee754_atan2+0x168>)
 8018a76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018a7a:	e7ec      	b.n	8018a56 <__ieee754_atan2+0xe6>
 8018a7c:	2000      	movs	r0, #0
 8018a7e:	2100      	movs	r1, #0
 8018a80:	e7e9      	b.n	8018a56 <__ieee754_atan2+0xe6>
 8018a82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018a86:	4619      	mov	r1, r3
 8018a88:	e793      	b.n	80189b2 <__ieee754_atan2+0x42>
 8018a8a:	a30f      	add	r3, pc, #60	; (adr r3, 8018ac8 <__ieee754_atan2+0x158>)
 8018a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a90:	f7e7 fbf2 	bl	8000278 <__aeabi_dsub>
 8018a94:	4602      	mov	r2, r0
 8018a96:	460b      	mov	r3, r1
 8018a98:	a10d      	add	r1, pc, #52	; (adr r1, 8018ad0 <__ieee754_atan2+0x160>)
 8018a9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018a9e:	f7e7 fbeb 	bl	8000278 <__aeabi_dsub>
 8018aa2:	e786      	b.n	80189b2 <__ieee754_atan2+0x42>
 8018aa4:	a10a      	add	r1, pc, #40	; (adr r1, 8018ad0 <__ieee754_atan2+0x160>)
 8018aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018aaa:	e782      	b.n	80189b2 <__ieee754_atan2+0x42>
 8018aac:	a10c      	add	r1, pc, #48	; (adr r1, 8018ae0 <__ieee754_atan2+0x170>)
 8018aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018ab2:	e77e      	b.n	80189b2 <__ieee754_atan2+0x42>
 8018ab4:	2000      	movs	r0, #0
 8018ab6:	2100      	movs	r1, #0
 8018ab8:	e77b      	b.n	80189b2 <__ieee754_atan2+0x42>
 8018aba:	a107      	add	r1, pc, #28	; (adr r1, 8018ad8 <__ieee754_atan2+0x168>)
 8018abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018ac0:	e777      	b.n	80189b2 <__ieee754_atan2+0x42>
 8018ac2:	bf00      	nop
 8018ac4:	f3af 8000 	nop.w
 8018ac8:	33145c07 	.word	0x33145c07
 8018acc:	3ca1a626 	.word	0x3ca1a626
 8018ad0:	54442d18 	.word	0x54442d18
 8018ad4:	400921fb 	.word	0x400921fb
 8018ad8:	54442d18 	.word	0x54442d18
 8018adc:	3ff921fb 	.word	0x3ff921fb
 8018ae0:	54442d18 	.word	0x54442d18
 8018ae4:	3fe921fb 	.word	0x3fe921fb
 8018ae8:	0801ac68 	.word	0x0801ac68
 8018aec:	0801ac80 	.word	0x0801ac80
 8018af0:	54442d18 	.word	0x54442d18
 8018af4:	c00921fb 	.word	0xc00921fb
 8018af8:	54442d18 	.word	0x54442d18
 8018afc:	bff921fb 	.word	0xbff921fb
 8018b00:	7ff00000 	.word	0x7ff00000

08018b04 <__ieee754_sqrt>:
 8018b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b08:	ec55 4b10 	vmov	r4, r5, d0
 8018b0c:	4e56      	ldr	r6, [pc, #344]	; (8018c68 <__ieee754_sqrt+0x164>)
 8018b0e:	43ae      	bics	r6, r5
 8018b10:	ee10 0a10 	vmov	r0, s0
 8018b14:	ee10 3a10 	vmov	r3, s0
 8018b18:	4629      	mov	r1, r5
 8018b1a:	462a      	mov	r2, r5
 8018b1c:	d110      	bne.n	8018b40 <__ieee754_sqrt+0x3c>
 8018b1e:	ee10 2a10 	vmov	r2, s0
 8018b22:	462b      	mov	r3, r5
 8018b24:	f7e7 fd60 	bl	80005e8 <__aeabi_dmul>
 8018b28:	4602      	mov	r2, r0
 8018b2a:	460b      	mov	r3, r1
 8018b2c:	4620      	mov	r0, r4
 8018b2e:	4629      	mov	r1, r5
 8018b30:	f7e7 fba4 	bl	800027c <__adddf3>
 8018b34:	4604      	mov	r4, r0
 8018b36:	460d      	mov	r5, r1
 8018b38:	ec45 4b10 	vmov	d0, r4, r5
 8018b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b40:	2d00      	cmp	r5, #0
 8018b42:	dc10      	bgt.n	8018b66 <__ieee754_sqrt+0x62>
 8018b44:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018b48:	4330      	orrs	r0, r6
 8018b4a:	d0f5      	beq.n	8018b38 <__ieee754_sqrt+0x34>
 8018b4c:	b15d      	cbz	r5, 8018b66 <__ieee754_sqrt+0x62>
 8018b4e:	ee10 2a10 	vmov	r2, s0
 8018b52:	462b      	mov	r3, r5
 8018b54:	ee10 0a10 	vmov	r0, s0
 8018b58:	f7e7 fb8e 	bl	8000278 <__aeabi_dsub>
 8018b5c:	4602      	mov	r2, r0
 8018b5e:	460b      	mov	r3, r1
 8018b60:	f7e7 fe6c 	bl	800083c <__aeabi_ddiv>
 8018b64:	e7e6      	b.n	8018b34 <__ieee754_sqrt+0x30>
 8018b66:	1509      	asrs	r1, r1, #20
 8018b68:	d076      	beq.n	8018c58 <__ieee754_sqrt+0x154>
 8018b6a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8018b6e:	07ce      	lsls	r6, r1, #31
 8018b70:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8018b74:	bf5e      	ittt	pl
 8018b76:	0fda      	lsrpl	r2, r3, #31
 8018b78:	005b      	lslpl	r3, r3, #1
 8018b7a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8018b7e:	0fda      	lsrs	r2, r3, #31
 8018b80:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8018b84:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8018b88:	2000      	movs	r0, #0
 8018b8a:	106d      	asrs	r5, r5, #1
 8018b8c:	005b      	lsls	r3, r3, #1
 8018b8e:	f04f 0e16 	mov.w	lr, #22
 8018b92:	4684      	mov	ip, r0
 8018b94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8018b98:	eb0c 0401 	add.w	r4, ip, r1
 8018b9c:	4294      	cmp	r4, r2
 8018b9e:	bfde      	ittt	le
 8018ba0:	1b12      	suble	r2, r2, r4
 8018ba2:	eb04 0c01 	addle.w	ip, r4, r1
 8018ba6:	1840      	addle	r0, r0, r1
 8018ba8:	0052      	lsls	r2, r2, #1
 8018baa:	f1be 0e01 	subs.w	lr, lr, #1
 8018bae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8018bb2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8018bb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018bba:	d1ed      	bne.n	8018b98 <__ieee754_sqrt+0x94>
 8018bbc:	4671      	mov	r1, lr
 8018bbe:	2720      	movs	r7, #32
 8018bc0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8018bc4:	4562      	cmp	r2, ip
 8018bc6:	eb04 060e 	add.w	r6, r4, lr
 8018bca:	dc02      	bgt.n	8018bd2 <__ieee754_sqrt+0xce>
 8018bcc:	d113      	bne.n	8018bf6 <__ieee754_sqrt+0xf2>
 8018bce:	429e      	cmp	r6, r3
 8018bd0:	d811      	bhi.n	8018bf6 <__ieee754_sqrt+0xf2>
 8018bd2:	2e00      	cmp	r6, #0
 8018bd4:	eb06 0e04 	add.w	lr, r6, r4
 8018bd8:	da43      	bge.n	8018c62 <__ieee754_sqrt+0x15e>
 8018bda:	f1be 0f00 	cmp.w	lr, #0
 8018bde:	db40      	blt.n	8018c62 <__ieee754_sqrt+0x15e>
 8018be0:	f10c 0801 	add.w	r8, ip, #1
 8018be4:	eba2 020c 	sub.w	r2, r2, ip
 8018be8:	429e      	cmp	r6, r3
 8018bea:	bf88      	it	hi
 8018bec:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018bf0:	1b9b      	subs	r3, r3, r6
 8018bf2:	4421      	add	r1, r4
 8018bf4:	46c4      	mov	ip, r8
 8018bf6:	0052      	lsls	r2, r2, #1
 8018bf8:	3f01      	subs	r7, #1
 8018bfa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8018bfe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8018c02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018c06:	d1dd      	bne.n	8018bc4 <__ieee754_sqrt+0xc0>
 8018c08:	4313      	orrs	r3, r2
 8018c0a:	d006      	beq.n	8018c1a <__ieee754_sqrt+0x116>
 8018c0c:	1c4c      	adds	r4, r1, #1
 8018c0e:	bf13      	iteet	ne
 8018c10:	3101      	addne	r1, #1
 8018c12:	3001      	addeq	r0, #1
 8018c14:	4639      	moveq	r1, r7
 8018c16:	f021 0101 	bicne.w	r1, r1, #1
 8018c1a:	1043      	asrs	r3, r0, #1
 8018c1c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8018c20:	0849      	lsrs	r1, r1, #1
 8018c22:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8018c26:	07c2      	lsls	r2, r0, #31
 8018c28:	bf48      	it	mi
 8018c2a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8018c2e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8018c32:	460c      	mov	r4, r1
 8018c34:	463d      	mov	r5, r7
 8018c36:	e77f      	b.n	8018b38 <__ieee754_sqrt+0x34>
 8018c38:	0ada      	lsrs	r2, r3, #11
 8018c3a:	3815      	subs	r0, #21
 8018c3c:	055b      	lsls	r3, r3, #21
 8018c3e:	2a00      	cmp	r2, #0
 8018c40:	d0fa      	beq.n	8018c38 <__ieee754_sqrt+0x134>
 8018c42:	02d7      	lsls	r7, r2, #11
 8018c44:	d50a      	bpl.n	8018c5c <__ieee754_sqrt+0x158>
 8018c46:	f1c1 0420 	rsb	r4, r1, #32
 8018c4a:	fa23 f404 	lsr.w	r4, r3, r4
 8018c4e:	1e4d      	subs	r5, r1, #1
 8018c50:	408b      	lsls	r3, r1
 8018c52:	4322      	orrs	r2, r4
 8018c54:	1b41      	subs	r1, r0, r5
 8018c56:	e788      	b.n	8018b6a <__ieee754_sqrt+0x66>
 8018c58:	4608      	mov	r0, r1
 8018c5a:	e7f0      	b.n	8018c3e <__ieee754_sqrt+0x13a>
 8018c5c:	0052      	lsls	r2, r2, #1
 8018c5e:	3101      	adds	r1, #1
 8018c60:	e7ef      	b.n	8018c42 <__ieee754_sqrt+0x13e>
 8018c62:	46e0      	mov	r8, ip
 8018c64:	e7be      	b.n	8018be4 <__ieee754_sqrt+0xe0>
 8018c66:	bf00      	nop
 8018c68:	7ff00000 	.word	0x7ff00000

08018c6c <__ieee754_acosf>:
 8018c6c:	b508      	push	{r3, lr}
 8018c6e:	ee10 3a10 	vmov	r3, s0
 8018c72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018c76:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8018c7a:	ed2d 8b0c 	vpush	{d8-d13}
 8018c7e:	d10a      	bne.n	8018c96 <__ieee754_acosf+0x2a>
 8018c80:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8018e1c <__ieee754_acosf+0x1b0>
 8018c84:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8018e20 <__ieee754_acosf+0x1b4>
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	bfd8      	it	le
 8018c8c:	eeb0 0a48 	vmovle.f32	s0, s16
 8018c90:	ecbd 8b0c 	vpop	{d8-d13}
 8018c94:	bd08      	pop	{r3, pc}
 8018c96:	dd04      	ble.n	8018ca2 <__ieee754_acosf+0x36>
 8018c98:	ee30 8a40 	vsub.f32	s16, s0, s0
 8018c9c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018ca0:	e7f6      	b.n	8018c90 <__ieee754_acosf+0x24>
 8018ca2:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8018ca6:	da3e      	bge.n	8018d26 <__ieee754_acosf+0xba>
 8018ca8:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8018cac:	f340 80b3 	ble.w	8018e16 <__ieee754_acosf+0x1aa>
 8018cb0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8018cb4:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8018e24 <__ieee754_acosf+0x1b8>
 8018cb8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8018e28 <__ieee754_acosf+0x1bc>
 8018cbc:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 8018e2c <__ieee754_acosf+0x1c0>
 8018cc0:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8018e30 <__ieee754_acosf+0x1c4>
 8018cc4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018cc8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8018e34 <__ieee754_acosf+0x1c8>
 8018ccc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018cd0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8018e38 <__ieee754_acosf+0x1cc>
 8018cd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018cd8:	eddf 6a58 	vldr	s13, [pc, #352]	; 8018e3c <__ieee754_acosf+0x1d0>
 8018cdc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018ce0:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8018e40 <__ieee754_acosf+0x1d4>
 8018ce4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018ce8:	eddf 6a56 	vldr	s13, [pc, #344]	; 8018e44 <__ieee754_acosf+0x1d8>
 8018cec:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8018cf0:	eddf 6a55 	vldr	s13, [pc, #340]	; 8018e48 <__ieee754_acosf+0x1dc>
 8018cf4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018cf8:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8018e4c <__ieee754_acosf+0x1e0>
 8018cfc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8018d00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018d04:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018d08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018d0c:	eef0 7a66 	vmov.f32	s15, s13
 8018d10:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018d14:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8018e50 <__ieee754_acosf+0x1e4>
 8018d18:	eea0 8a66 	vfms.f32	s16, s0, s13
 8018d1c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8018d20:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018d24:	e7b4      	b.n	8018c90 <__ieee754_acosf+0x24>
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	eddf da3e 	vldr	s27, [pc, #248]	; 8018e24 <__ieee754_acosf+0x1b8>
 8018d2c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8018e28 <__ieee754_acosf+0x1bc>
 8018d30:	ed9f ca40 	vldr	s24, [pc, #256]	; 8018e34 <__ieee754_acosf+0x1c8>
 8018d34:	eddf ba40 	vldr	s23, [pc, #256]	; 8018e38 <__ieee754_acosf+0x1cc>
 8018d38:	ed9f ba40 	vldr	s22, [pc, #256]	; 8018e3c <__ieee754_acosf+0x1d0>
 8018d3c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8018e40 <__ieee754_acosf+0x1d4>
 8018d40:	ed9f da40 	vldr	s26, [pc, #256]	; 8018e44 <__ieee754_acosf+0x1d8>
 8018d44:	eddf aa39 	vldr	s21, [pc, #228]	; 8018e2c <__ieee754_acosf+0x1c0>
 8018d48:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8018e48 <__ieee754_acosf+0x1dc>
 8018d4c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8018e4c <__ieee754_acosf+0x1e0>
 8018d50:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8018d54:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018d58:	da28      	bge.n	8018dac <__ieee754_acosf+0x140>
 8018d5a:	ee30 0a09 	vadd.f32	s0, s0, s18
 8018d5e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018d62:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8018d66:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8018d6a:	eeac ca80 	vfma.f32	s24, s25, s0
 8018d6e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8018d72:	eeec ba00 	vfma.f32	s23, s24, s0
 8018d76:	eeea 9a00 	vfma.f32	s19, s20, s0
 8018d7a:	eeab ba80 	vfma.f32	s22, s23, s0
 8018d7e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8018d82:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8018d86:	ee68 8a80 	vmul.f32	s17, s17, s0
 8018d8a:	f000 fb2b 	bl	80193e4 <__ieee754_sqrtf>
 8018d8e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8018d92:	eddf 7a30 	vldr	s15, [pc, #192]	; 8018e54 <__ieee754_acosf+0x1e8>
 8018d96:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018d9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8018d9e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018da2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8018e58 <__ieee754_acosf+0x1ec>
 8018da6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8018daa:	e771      	b.n	8018c90 <__ieee754_acosf+0x24>
 8018dac:	ee39 8a40 	vsub.f32	s16, s18, s0
 8018db0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018db4:	eeb0 0a48 	vmov.f32	s0, s16
 8018db8:	f000 fb14 	bl	80193e4 <__ieee754_sqrtf>
 8018dbc:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8018dc0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8018dc4:	eeac ca88 	vfma.f32	s24, s25, s16
 8018dc8:	eeaa aa88 	vfma.f32	s20, s21, s16
 8018dcc:	eeec ba08 	vfma.f32	s23, s24, s16
 8018dd0:	ee10 3a10 	vmov	r3, s0
 8018dd4:	eeab ba88 	vfma.f32	s22, s23, s16
 8018dd8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018ddc:	f023 030f 	bic.w	r3, r3, #15
 8018de0:	eeea 9a08 	vfma.f32	s19, s20, s16
 8018de4:	ee07 3a90 	vmov	s15, r3
 8018de8:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8018dec:	eeb0 6a48 	vmov.f32	s12, s16
 8018df0:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8018df4:	eea9 9a88 	vfma.f32	s18, s19, s16
 8018df8:	ee70 6a27 	vadd.f32	s13, s0, s15
 8018dfc:	ee68 8a88 	vmul.f32	s17, s17, s16
 8018e00:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8018e04:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8018e08:	eea0 7a26 	vfma.f32	s14, s0, s13
 8018e0c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8018e10:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018e14:	e73c      	b.n	8018c90 <__ieee754_acosf+0x24>
 8018e16:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8018e5c <__ieee754_acosf+0x1f0>
 8018e1a:	e739      	b.n	8018c90 <__ieee754_acosf+0x24>
 8018e1c:	00000000 	.word	0x00000000
 8018e20:	40490fdb 	.word	0x40490fdb
 8018e24:	3811ef08 	.word	0x3811ef08
 8018e28:	3a4f7f04 	.word	0x3a4f7f04
 8018e2c:	bf303361 	.word	0xbf303361
 8018e30:	33a22168 	.word	0x33a22168
 8018e34:	bd241146 	.word	0xbd241146
 8018e38:	3e4e0aa8 	.word	0x3e4e0aa8
 8018e3c:	bea6b090 	.word	0xbea6b090
 8018e40:	3e2aaaab 	.word	0x3e2aaaab
 8018e44:	3d9dc62e 	.word	0x3d9dc62e
 8018e48:	4001572d 	.word	0x4001572d
 8018e4c:	c019d139 	.word	0xc019d139
 8018e50:	3fc90fda 	.word	0x3fc90fda
 8018e54:	b3a22168 	.word	0xb3a22168
 8018e58:	40490fda 	.word	0x40490fda
 8018e5c:	3fc90fdb 	.word	0x3fc90fdb

08018e60 <__ieee754_asinf>:
 8018e60:	b538      	push	{r3, r4, r5, lr}
 8018e62:	ee10 5a10 	vmov	r5, s0
 8018e66:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8018e6a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8018e6e:	ed2d 8b04 	vpush	{d8-d9}
 8018e72:	d10c      	bne.n	8018e8e <__ieee754_asinf+0x2e>
 8018e74:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8018fec <__ieee754_asinf+0x18c>
 8018e78:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8018ff0 <__ieee754_asinf+0x190>
 8018e7c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018e80:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018e84:	eeb0 0a67 	vmov.f32	s0, s15
 8018e88:	ecbd 8b04 	vpop	{d8-d9}
 8018e8c:	bd38      	pop	{r3, r4, r5, pc}
 8018e8e:	dd04      	ble.n	8018e9a <__ieee754_asinf+0x3a>
 8018e90:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018e94:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018e98:	e7f6      	b.n	8018e88 <__ieee754_asinf+0x28>
 8018e9a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8018e9e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8018ea2:	da0b      	bge.n	8018ebc <__ieee754_asinf+0x5c>
 8018ea4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8018ea8:	da52      	bge.n	8018f50 <__ieee754_asinf+0xf0>
 8018eaa:	eddf 7a52 	vldr	s15, [pc, #328]	; 8018ff4 <__ieee754_asinf+0x194>
 8018eae:	ee70 7a27 	vadd.f32	s15, s0, s15
 8018eb2:	eef4 7ae8 	vcmpe.f32	s15, s17
 8018eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eba:	dce5      	bgt.n	8018e88 <__ieee754_asinf+0x28>
 8018ebc:	f001 f92a 	bl	801a114 <fabsf>
 8018ec0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8018ec4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8018ec8:	ee20 8a08 	vmul.f32	s16, s0, s16
 8018ecc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8018ff8 <__ieee754_asinf+0x198>
 8018ed0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8018ffc <__ieee754_asinf+0x19c>
 8018ed4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8019000 <__ieee754_asinf+0x1a0>
 8018ed8:	eea8 7a27 	vfma.f32	s14, s16, s15
 8018edc:	eddf 7a49 	vldr	s15, [pc, #292]	; 8019004 <__ieee754_asinf+0x1a4>
 8018ee0:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018ee4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8019008 <__ieee754_asinf+0x1a8>
 8018ee8:	eea7 7a88 	vfma.f32	s14, s15, s16
 8018eec:	eddf 7a47 	vldr	s15, [pc, #284]	; 801900c <__ieee754_asinf+0x1ac>
 8018ef0:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018ef4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8019010 <__ieee754_asinf+0x1b0>
 8018ef8:	eea7 9a88 	vfma.f32	s18, s15, s16
 8018efc:	eddf 7a45 	vldr	s15, [pc, #276]	; 8019014 <__ieee754_asinf+0x1b4>
 8018f00:	eee8 7a07 	vfma.f32	s15, s16, s14
 8018f04:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8019018 <__ieee754_asinf+0x1b8>
 8018f08:	eea7 7a88 	vfma.f32	s14, s15, s16
 8018f0c:	eddf 7a43 	vldr	s15, [pc, #268]	; 801901c <__ieee754_asinf+0x1bc>
 8018f10:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018f14:	eeb0 0a48 	vmov.f32	s0, s16
 8018f18:	eee7 8a88 	vfma.f32	s17, s15, s16
 8018f1c:	f000 fa62 	bl	80193e4 <__ieee754_sqrtf>
 8018f20:	4b3f      	ldr	r3, [pc, #252]	; (8019020 <__ieee754_asinf+0x1c0>)
 8018f22:	ee29 9a08 	vmul.f32	s18, s18, s16
 8018f26:	429c      	cmp	r4, r3
 8018f28:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8018f2c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018f30:	dd3d      	ble.n	8018fae <__ieee754_asinf+0x14e>
 8018f32:	eea0 0a06 	vfma.f32	s0, s0, s12
 8018f36:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8019024 <__ieee754_asinf+0x1c4>
 8018f3a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8018f3e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8018ff0 <__ieee754_asinf+0x190>
 8018f42:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018f46:	2d00      	cmp	r5, #0
 8018f48:	bfd8      	it	le
 8018f4a:	eeb1 0a40 	vnegle.f32	s0, s0
 8018f4e:	e79b      	b.n	8018e88 <__ieee754_asinf+0x28>
 8018f50:	ee60 7a00 	vmul.f32	s15, s0, s0
 8018f54:	eddf 6a28 	vldr	s13, [pc, #160]	; 8018ff8 <__ieee754_asinf+0x198>
 8018f58:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8018ffc <__ieee754_asinf+0x19c>
 8018f5c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8019010 <__ieee754_asinf+0x1b0>
 8018f60:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018f64:	eddf 6a27 	vldr	s13, [pc, #156]	; 8019004 <__ieee754_asinf+0x1a4>
 8018f68:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018f6c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8019008 <__ieee754_asinf+0x1a8>
 8018f70:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018f74:	eddf 6a25 	vldr	s13, [pc, #148]	; 801900c <__ieee754_asinf+0x1ac>
 8018f78:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018f7c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8019000 <__ieee754_asinf+0x1a0>
 8018f80:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018f84:	eddf 6a23 	vldr	s13, [pc, #140]	; 8019014 <__ieee754_asinf+0x1b4>
 8018f88:	eee7 6a86 	vfma.f32	s13, s15, s12
 8018f8c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8019018 <__ieee754_asinf+0x1b8>
 8018f90:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8018f94:	eddf 6a21 	vldr	s13, [pc, #132]	; 801901c <__ieee754_asinf+0x1bc>
 8018f98:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018fa0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8018fa4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8018fa8:	eea0 0a27 	vfma.f32	s0, s0, s15
 8018fac:	e76c      	b.n	8018e88 <__ieee754_asinf+0x28>
 8018fae:	ee10 3a10 	vmov	r3, s0
 8018fb2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018fb6:	f023 030f 	bic.w	r3, r3, #15
 8018fba:	ee07 3a10 	vmov	s14, r3
 8018fbe:	eea7 8a47 	vfms.f32	s16, s14, s14
 8018fc2:	ee70 7a07 	vadd.f32	s15, s0, s14
 8018fc6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018fca:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8018fce:	eddf 7a07 	vldr	s15, [pc, #28]	; 8018fec <__ieee754_asinf+0x18c>
 8018fd2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8018fd6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8018fda:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8019028 <__ieee754_asinf+0x1c8>
 8018fde:	eeb0 6a40 	vmov.f32	s12, s0
 8018fe2:	eea7 6a66 	vfms.f32	s12, s14, s13
 8018fe6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018fea:	e7aa      	b.n	8018f42 <__ieee754_asinf+0xe2>
 8018fec:	b33bbd2e 	.word	0xb33bbd2e
 8018ff0:	3fc90fdb 	.word	0x3fc90fdb
 8018ff4:	7149f2ca 	.word	0x7149f2ca
 8018ff8:	3811ef08 	.word	0x3811ef08
 8018ffc:	3a4f7f04 	.word	0x3a4f7f04
 8019000:	3e2aaaab 	.word	0x3e2aaaab
 8019004:	bd241146 	.word	0xbd241146
 8019008:	3e4e0aa8 	.word	0x3e4e0aa8
 801900c:	bea6b090 	.word	0xbea6b090
 8019010:	3d9dc62e 	.word	0x3d9dc62e
 8019014:	bf303361 	.word	0xbf303361
 8019018:	4001572d 	.word	0x4001572d
 801901c:	c019d139 	.word	0xc019d139
 8019020:	3f799999 	.word	0x3f799999
 8019024:	333bbd2e 	.word	0x333bbd2e
 8019028:	3f490fdb 	.word	0x3f490fdb

0801902c <__ieee754_atan2f>:
 801902c:	ee10 2a90 	vmov	r2, s1
 8019030:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8019034:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019038:	b510      	push	{r4, lr}
 801903a:	eef0 7a40 	vmov.f32	s15, s0
 801903e:	dc06      	bgt.n	801904e <__ieee754_atan2f+0x22>
 8019040:	ee10 0a10 	vmov	r0, s0
 8019044:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8019048:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801904c:	dd04      	ble.n	8019058 <__ieee754_atan2f+0x2c>
 801904e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8019052:	eeb0 0a67 	vmov.f32	s0, s15
 8019056:	bd10      	pop	{r4, pc}
 8019058:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801905c:	d103      	bne.n	8019066 <__ieee754_atan2f+0x3a>
 801905e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019062:	f000 bf83 	b.w	8019f6c <atanf>
 8019066:	1794      	asrs	r4, r2, #30
 8019068:	f004 0402 	and.w	r4, r4, #2
 801906c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8019070:	b943      	cbnz	r3, 8019084 <__ieee754_atan2f+0x58>
 8019072:	2c02      	cmp	r4, #2
 8019074:	d05e      	beq.n	8019134 <__ieee754_atan2f+0x108>
 8019076:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8019148 <__ieee754_atan2f+0x11c>
 801907a:	2c03      	cmp	r4, #3
 801907c:	bf08      	it	eq
 801907e:	eef0 7a47 	vmoveq.f32	s15, s14
 8019082:	e7e6      	b.n	8019052 <__ieee754_atan2f+0x26>
 8019084:	b941      	cbnz	r1, 8019098 <__ieee754_atan2f+0x6c>
 8019086:	eddf 7a31 	vldr	s15, [pc, #196]	; 801914c <__ieee754_atan2f+0x120>
 801908a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8019150 <__ieee754_atan2f+0x124>
 801908e:	2800      	cmp	r0, #0
 8019090:	bfb8      	it	lt
 8019092:	eef0 7a40 	vmovlt.f32	s15, s0
 8019096:	e7dc      	b.n	8019052 <__ieee754_atan2f+0x26>
 8019098:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801909c:	d110      	bne.n	80190c0 <__ieee754_atan2f+0x94>
 801909e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80190a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80190a6:	d107      	bne.n	80190b8 <__ieee754_atan2f+0x8c>
 80190a8:	2c02      	cmp	r4, #2
 80190aa:	d846      	bhi.n	801913a <__ieee754_atan2f+0x10e>
 80190ac:	4b29      	ldr	r3, [pc, #164]	; (8019154 <__ieee754_atan2f+0x128>)
 80190ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80190b2:	edd4 7a00 	vldr	s15, [r4]
 80190b6:	e7cc      	b.n	8019052 <__ieee754_atan2f+0x26>
 80190b8:	2c02      	cmp	r4, #2
 80190ba:	d841      	bhi.n	8019140 <__ieee754_atan2f+0x114>
 80190bc:	4b26      	ldr	r3, [pc, #152]	; (8019158 <__ieee754_atan2f+0x12c>)
 80190be:	e7f6      	b.n	80190ae <__ieee754_atan2f+0x82>
 80190c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80190c4:	d0df      	beq.n	8019086 <__ieee754_atan2f+0x5a>
 80190c6:	1a5b      	subs	r3, r3, r1
 80190c8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80190cc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80190d0:	da1a      	bge.n	8019108 <__ieee754_atan2f+0xdc>
 80190d2:	2a00      	cmp	r2, #0
 80190d4:	da01      	bge.n	80190da <__ieee754_atan2f+0xae>
 80190d6:	313c      	adds	r1, #60	; 0x3c
 80190d8:	db19      	blt.n	801910e <__ieee754_atan2f+0xe2>
 80190da:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80190de:	f001 f819 	bl	801a114 <fabsf>
 80190e2:	f000 ff43 	bl	8019f6c <atanf>
 80190e6:	eef0 7a40 	vmov.f32	s15, s0
 80190ea:	2c01      	cmp	r4, #1
 80190ec:	d012      	beq.n	8019114 <__ieee754_atan2f+0xe8>
 80190ee:	2c02      	cmp	r4, #2
 80190f0:	d017      	beq.n	8019122 <__ieee754_atan2f+0xf6>
 80190f2:	2c00      	cmp	r4, #0
 80190f4:	d0ad      	beq.n	8019052 <__ieee754_atan2f+0x26>
 80190f6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801915c <__ieee754_atan2f+0x130>
 80190fa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80190fe:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8019160 <__ieee754_atan2f+0x134>
 8019102:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019106:	e7a4      	b.n	8019052 <__ieee754_atan2f+0x26>
 8019108:	eddf 7a10 	vldr	s15, [pc, #64]	; 801914c <__ieee754_atan2f+0x120>
 801910c:	e7ed      	b.n	80190ea <__ieee754_atan2f+0xbe>
 801910e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019164 <__ieee754_atan2f+0x138>
 8019112:	e7ea      	b.n	80190ea <__ieee754_atan2f+0xbe>
 8019114:	ee17 3a90 	vmov	r3, s15
 8019118:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801911c:	ee07 3a90 	vmov	s15, r3
 8019120:	e797      	b.n	8019052 <__ieee754_atan2f+0x26>
 8019122:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801915c <__ieee754_atan2f+0x130>
 8019126:	ee77 7a80 	vadd.f32	s15, s15, s0
 801912a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8019160 <__ieee754_atan2f+0x134>
 801912e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019132:	e78e      	b.n	8019052 <__ieee754_atan2f+0x26>
 8019134:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8019160 <__ieee754_atan2f+0x134>
 8019138:	e78b      	b.n	8019052 <__ieee754_atan2f+0x26>
 801913a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8019168 <__ieee754_atan2f+0x13c>
 801913e:	e788      	b.n	8019052 <__ieee754_atan2f+0x26>
 8019140:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019164 <__ieee754_atan2f+0x138>
 8019144:	e785      	b.n	8019052 <__ieee754_atan2f+0x26>
 8019146:	bf00      	nop
 8019148:	c0490fdb 	.word	0xc0490fdb
 801914c:	3fc90fdb 	.word	0x3fc90fdb
 8019150:	bfc90fdb 	.word	0xbfc90fdb
 8019154:	0801ac98 	.word	0x0801ac98
 8019158:	0801aca4 	.word	0x0801aca4
 801915c:	33bbbd2e 	.word	0x33bbbd2e
 8019160:	40490fdb 	.word	0x40490fdb
 8019164:	00000000 	.word	0x00000000
 8019168:	3f490fdb 	.word	0x3f490fdb

0801916c <__ieee754_rem_pio2f>:
 801916c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801916e:	ee10 6a10 	vmov	r6, s0
 8019172:	4b8e      	ldr	r3, [pc, #568]	; (80193ac <__ieee754_rem_pio2f+0x240>)
 8019174:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8019178:	429d      	cmp	r5, r3
 801917a:	b087      	sub	sp, #28
 801917c:	eef0 7a40 	vmov.f32	s15, s0
 8019180:	4604      	mov	r4, r0
 8019182:	dc05      	bgt.n	8019190 <__ieee754_rem_pio2f+0x24>
 8019184:	2300      	movs	r3, #0
 8019186:	ed80 0a00 	vstr	s0, [r0]
 801918a:	6043      	str	r3, [r0, #4]
 801918c:	2000      	movs	r0, #0
 801918e:	e01a      	b.n	80191c6 <__ieee754_rem_pio2f+0x5a>
 8019190:	4b87      	ldr	r3, [pc, #540]	; (80193b0 <__ieee754_rem_pio2f+0x244>)
 8019192:	429d      	cmp	r5, r3
 8019194:	dc46      	bgt.n	8019224 <__ieee754_rem_pio2f+0xb8>
 8019196:	2e00      	cmp	r6, #0
 8019198:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80193b4 <__ieee754_rem_pio2f+0x248>
 801919c:	4b86      	ldr	r3, [pc, #536]	; (80193b8 <__ieee754_rem_pio2f+0x24c>)
 801919e:	f025 050f 	bic.w	r5, r5, #15
 80191a2:	dd1f      	ble.n	80191e4 <__ieee754_rem_pio2f+0x78>
 80191a4:	429d      	cmp	r5, r3
 80191a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80191aa:	d00e      	beq.n	80191ca <__ieee754_rem_pio2f+0x5e>
 80191ac:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80193bc <__ieee754_rem_pio2f+0x250>
 80191b0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80191b4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80191b8:	ed80 0a00 	vstr	s0, [r0]
 80191bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80191c0:	2001      	movs	r0, #1
 80191c2:	edc4 7a01 	vstr	s15, [r4, #4]
 80191c6:	b007      	add	sp, #28
 80191c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191ca:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80193c0 <__ieee754_rem_pio2f+0x254>
 80191ce:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80193c4 <__ieee754_rem_pio2f+0x258>
 80191d2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80191d6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80191da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80191de:	edc0 6a00 	vstr	s13, [r0]
 80191e2:	e7eb      	b.n	80191bc <__ieee754_rem_pio2f+0x50>
 80191e4:	429d      	cmp	r5, r3
 80191e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80191ea:	d00e      	beq.n	801920a <__ieee754_rem_pio2f+0x9e>
 80191ec:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80193bc <__ieee754_rem_pio2f+0x250>
 80191f0:	ee37 0a87 	vadd.f32	s0, s15, s14
 80191f4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80191f8:	ed80 0a00 	vstr	s0, [r0]
 80191fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019200:	f04f 30ff 	mov.w	r0, #4294967295
 8019204:	edc4 7a01 	vstr	s15, [r4, #4]
 8019208:	e7dd      	b.n	80191c6 <__ieee754_rem_pio2f+0x5a>
 801920a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80193c0 <__ieee754_rem_pio2f+0x254>
 801920e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80193c4 <__ieee754_rem_pio2f+0x258>
 8019212:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019216:	ee77 6a87 	vadd.f32	s13, s15, s14
 801921a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801921e:	edc0 6a00 	vstr	s13, [r0]
 8019222:	e7eb      	b.n	80191fc <__ieee754_rem_pio2f+0x90>
 8019224:	4b68      	ldr	r3, [pc, #416]	; (80193c8 <__ieee754_rem_pio2f+0x25c>)
 8019226:	429d      	cmp	r5, r3
 8019228:	dc72      	bgt.n	8019310 <__ieee754_rem_pio2f+0x1a4>
 801922a:	f000 ff73 	bl	801a114 <fabsf>
 801922e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80193cc <__ieee754_rem_pio2f+0x260>
 8019232:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019236:	eee0 7a07 	vfma.f32	s15, s0, s14
 801923a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801923e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019242:	ee17 0a90 	vmov	r0, s15
 8019246:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80193b4 <__ieee754_rem_pio2f+0x248>
 801924a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801924e:	281f      	cmp	r0, #31
 8019250:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80193bc <__ieee754_rem_pio2f+0x250>
 8019254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019258:	eeb1 6a47 	vneg.f32	s12, s14
 801925c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019260:	ee16 2a90 	vmov	r2, s13
 8019264:	dc1c      	bgt.n	80192a0 <__ieee754_rem_pio2f+0x134>
 8019266:	495a      	ldr	r1, [pc, #360]	; (80193d0 <__ieee754_rem_pio2f+0x264>)
 8019268:	1e47      	subs	r7, r0, #1
 801926a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801926e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8019272:	428b      	cmp	r3, r1
 8019274:	d014      	beq.n	80192a0 <__ieee754_rem_pio2f+0x134>
 8019276:	6022      	str	r2, [r4, #0]
 8019278:	ed94 7a00 	vldr	s14, [r4]
 801927c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019280:	2e00      	cmp	r6, #0
 8019282:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019286:	ed84 0a01 	vstr	s0, [r4, #4]
 801928a:	da9c      	bge.n	80191c6 <__ieee754_rem_pio2f+0x5a>
 801928c:	eeb1 7a47 	vneg.f32	s14, s14
 8019290:	eeb1 0a40 	vneg.f32	s0, s0
 8019294:	ed84 7a00 	vstr	s14, [r4]
 8019298:	ed84 0a01 	vstr	s0, [r4, #4]
 801929c:	4240      	negs	r0, r0
 801929e:	e792      	b.n	80191c6 <__ieee754_rem_pio2f+0x5a>
 80192a0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80192a4:	15eb      	asrs	r3, r5, #23
 80192a6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80192aa:	2d08      	cmp	r5, #8
 80192ac:	dde3      	ble.n	8019276 <__ieee754_rem_pio2f+0x10a>
 80192ae:	eddf 7a44 	vldr	s15, [pc, #272]	; 80193c0 <__ieee754_rem_pio2f+0x254>
 80192b2:	eef0 6a40 	vmov.f32	s13, s0
 80192b6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80192ba:	ee30 0a66 	vsub.f32	s0, s0, s13
 80192be:	eea6 0a27 	vfma.f32	s0, s12, s15
 80192c2:	eddf 7a40 	vldr	s15, [pc, #256]	; 80193c4 <__ieee754_rem_pio2f+0x258>
 80192c6:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80192ca:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80192ce:	eef0 7a40 	vmov.f32	s15, s0
 80192d2:	ee15 2a90 	vmov	r2, s11
 80192d6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80192da:	1a5b      	subs	r3, r3, r1
 80192dc:	2b19      	cmp	r3, #25
 80192de:	dc04      	bgt.n	80192ea <__ieee754_rem_pio2f+0x17e>
 80192e0:	edc4 5a00 	vstr	s11, [r4]
 80192e4:	eeb0 0a66 	vmov.f32	s0, s13
 80192e8:	e7c6      	b.n	8019278 <__ieee754_rem_pio2f+0x10c>
 80192ea:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80193d4 <__ieee754_rem_pio2f+0x268>
 80192ee:	eeb0 0a66 	vmov.f32	s0, s13
 80192f2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80192f6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80192fa:	eddf 6a37 	vldr	s13, [pc, #220]	; 80193d8 <__ieee754_rem_pio2f+0x26c>
 80192fe:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019302:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019306:	ee30 7a67 	vsub.f32	s14, s0, s15
 801930a:	ed84 7a00 	vstr	s14, [r4]
 801930e:	e7b3      	b.n	8019278 <__ieee754_rem_pio2f+0x10c>
 8019310:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8019314:	db06      	blt.n	8019324 <__ieee754_rem_pio2f+0x1b8>
 8019316:	ee70 7a40 	vsub.f32	s15, s0, s0
 801931a:	edc0 7a01 	vstr	s15, [r0, #4]
 801931e:	edc0 7a00 	vstr	s15, [r0]
 8019322:	e733      	b.n	801918c <__ieee754_rem_pio2f+0x20>
 8019324:	15ea      	asrs	r2, r5, #23
 8019326:	3a86      	subs	r2, #134	; 0x86
 8019328:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801932c:	ee07 3a90 	vmov	s15, r3
 8019330:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019334:	eddf 6a29 	vldr	s13, [pc, #164]	; 80193dc <__ieee754_rem_pio2f+0x270>
 8019338:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801933c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019340:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019344:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019348:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801934c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019350:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019354:	ed8d 7a04 	vstr	s14, [sp, #16]
 8019358:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801935c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019364:	edcd 7a05 	vstr	s15, [sp, #20]
 8019368:	d11e      	bne.n	80193a8 <__ieee754_rem_pio2f+0x23c>
 801936a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801936e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019372:	bf14      	ite	ne
 8019374:	2302      	movne	r3, #2
 8019376:	2301      	moveq	r3, #1
 8019378:	4919      	ldr	r1, [pc, #100]	; (80193e0 <__ieee754_rem_pio2f+0x274>)
 801937a:	9101      	str	r1, [sp, #4]
 801937c:	2102      	movs	r1, #2
 801937e:	9100      	str	r1, [sp, #0]
 8019380:	a803      	add	r0, sp, #12
 8019382:	4621      	mov	r1, r4
 8019384:	f000 f892 	bl	80194ac <__kernel_rem_pio2f>
 8019388:	2e00      	cmp	r6, #0
 801938a:	f6bf af1c 	bge.w	80191c6 <__ieee754_rem_pio2f+0x5a>
 801938e:	edd4 7a00 	vldr	s15, [r4]
 8019392:	eef1 7a67 	vneg.f32	s15, s15
 8019396:	edc4 7a00 	vstr	s15, [r4]
 801939a:	edd4 7a01 	vldr	s15, [r4, #4]
 801939e:	eef1 7a67 	vneg.f32	s15, s15
 80193a2:	edc4 7a01 	vstr	s15, [r4, #4]
 80193a6:	e779      	b.n	801929c <__ieee754_rem_pio2f+0x130>
 80193a8:	2303      	movs	r3, #3
 80193aa:	e7e5      	b.n	8019378 <__ieee754_rem_pio2f+0x20c>
 80193ac:	3f490fd8 	.word	0x3f490fd8
 80193b0:	4016cbe3 	.word	0x4016cbe3
 80193b4:	3fc90f80 	.word	0x3fc90f80
 80193b8:	3fc90fd0 	.word	0x3fc90fd0
 80193bc:	37354443 	.word	0x37354443
 80193c0:	37354400 	.word	0x37354400
 80193c4:	2e85a308 	.word	0x2e85a308
 80193c8:	43490f80 	.word	0x43490f80
 80193cc:	3f22f984 	.word	0x3f22f984
 80193d0:	0801acb0 	.word	0x0801acb0
 80193d4:	2e85a300 	.word	0x2e85a300
 80193d8:	248d3132 	.word	0x248d3132
 80193dc:	43800000 	.word	0x43800000
 80193e0:	0801ad30 	.word	0x0801ad30

080193e4 <__ieee754_sqrtf>:
 80193e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80193e8:	4770      	bx	lr
	...

080193ec <__kernel_cosf>:
 80193ec:	ee10 3a10 	vmov	r3, s0
 80193f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80193f4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80193f8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80193fc:	da05      	bge.n	801940a <__kernel_cosf+0x1e>
 80193fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019402:	ee17 2a90 	vmov	r2, s15
 8019406:	2a00      	cmp	r2, #0
 8019408:	d03d      	beq.n	8019486 <__kernel_cosf+0x9a>
 801940a:	ee60 5a00 	vmul.f32	s11, s0, s0
 801940e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801948c <__kernel_cosf+0xa0>
 8019412:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8019490 <__kernel_cosf+0xa4>
 8019416:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8019494 <__kernel_cosf+0xa8>
 801941a:	4a1f      	ldr	r2, [pc, #124]	; (8019498 <__kernel_cosf+0xac>)
 801941c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019420:	4293      	cmp	r3, r2
 8019422:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801949c <__kernel_cosf+0xb0>
 8019426:	eee7 7a25 	vfma.f32	s15, s14, s11
 801942a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80194a0 <__kernel_cosf+0xb4>
 801942e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8019432:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80194a4 <__kernel_cosf+0xb8>
 8019436:	eee7 7a25 	vfma.f32	s15, s14, s11
 801943a:	eeb0 7a66 	vmov.f32	s14, s13
 801943e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8019442:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8019446:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801944a:	ee67 6a25 	vmul.f32	s13, s14, s11
 801944e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8019452:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019456:	dc04      	bgt.n	8019462 <__kernel_cosf+0x76>
 8019458:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801945c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8019460:	4770      	bx	lr
 8019462:	4a11      	ldr	r2, [pc, #68]	; (80194a8 <__kernel_cosf+0xbc>)
 8019464:	4293      	cmp	r3, r2
 8019466:	bfda      	itte	le
 8019468:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801946c:	ee06 3a90 	vmovle	s13, r3
 8019470:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8019474:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019478:	ee36 0a66 	vsub.f32	s0, s12, s13
 801947c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019480:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019484:	4770      	bx	lr
 8019486:	eeb0 0a46 	vmov.f32	s0, s12
 801948a:	4770      	bx	lr
 801948c:	ad47d74e 	.word	0xad47d74e
 8019490:	310f74f6 	.word	0x310f74f6
 8019494:	3d2aaaab 	.word	0x3d2aaaab
 8019498:	3e999999 	.word	0x3e999999
 801949c:	b493f27c 	.word	0xb493f27c
 80194a0:	37d00d01 	.word	0x37d00d01
 80194a4:	bab60b61 	.word	0xbab60b61
 80194a8:	3f480000 	.word	0x3f480000

080194ac <__kernel_rem_pio2f>:
 80194ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194b0:	ed2d 8b04 	vpush	{d8-d9}
 80194b4:	b0d7      	sub	sp, #348	; 0x15c
 80194b6:	4616      	mov	r6, r2
 80194b8:	4698      	mov	r8, r3
 80194ba:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80194bc:	4bbb      	ldr	r3, [pc, #748]	; (80197ac <__kernel_rem_pio2f+0x300>)
 80194be:	9001      	str	r0, [sp, #4]
 80194c0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80194c4:	1d33      	adds	r3, r6, #4
 80194c6:	460d      	mov	r5, r1
 80194c8:	f108 39ff 	add.w	r9, r8, #4294967295
 80194cc:	db29      	blt.n	8019522 <__kernel_rem_pio2f+0x76>
 80194ce:	1ef1      	subs	r1, r6, #3
 80194d0:	bf48      	it	mi
 80194d2:	1d31      	addmi	r1, r6, #4
 80194d4:	10c9      	asrs	r1, r1, #3
 80194d6:	1c4c      	adds	r4, r1, #1
 80194d8:	00e3      	lsls	r3, r4, #3
 80194da:	9302      	str	r3, [sp, #8]
 80194dc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80194de:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80197bc <__kernel_rem_pio2f+0x310>
 80194e2:	eba1 0009 	sub.w	r0, r1, r9
 80194e6:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80194ea:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80194ee:	eb07 0c09 	add.w	ip, r7, r9
 80194f2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80194f6:	2300      	movs	r3, #0
 80194f8:	4563      	cmp	r3, ip
 80194fa:	dd14      	ble.n	8019526 <__kernel_rem_pio2f+0x7a>
 80194fc:	ab1a      	add	r3, sp, #104	; 0x68
 80194fe:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8019502:	46cc      	mov	ip, r9
 8019504:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8019508:	f1c8 0b01 	rsb	fp, r8, #1
 801950c:	eb0b 020c 	add.w	r2, fp, ip
 8019510:	4297      	cmp	r7, r2
 8019512:	db27      	blt.n	8019564 <__kernel_rem_pio2f+0xb8>
 8019514:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019518:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80197bc <__kernel_rem_pio2f+0x310>
 801951c:	4618      	mov	r0, r3
 801951e:	2200      	movs	r2, #0
 8019520:	e016      	b.n	8019550 <__kernel_rem_pio2f+0xa4>
 8019522:	2100      	movs	r1, #0
 8019524:	e7d7      	b.n	80194d6 <__kernel_rem_pio2f+0x2a>
 8019526:	42d8      	cmn	r0, r3
 8019528:	bf5d      	ittte	pl
 801952a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801952e:	ee07 2a90 	vmovpl	s15, r2
 8019532:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8019536:	eef0 7a47 	vmovmi.f32	s15, s14
 801953a:	ecea 7a01 	vstmia	sl!, {s15}
 801953e:	3301      	adds	r3, #1
 8019540:	e7da      	b.n	80194f8 <__kernel_rem_pio2f+0x4c>
 8019542:	ecfe 6a01 	vldmia	lr!, {s13}
 8019546:	ed90 7a00 	vldr	s14, [r0]
 801954a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801954e:	3201      	adds	r2, #1
 8019550:	454a      	cmp	r2, r9
 8019552:	f1a0 0004 	sub.w	r0, r0, #4
 8019556:	ddf4      	ble.n	8019542 <__kernel_rem_pio2f+0x96>
 8019558:	ecea 7a01 	vstmia	sl!, {s15}
 801955c:	3304      	adds	r3, #4
 801955e:	f10c 0c01 	add.w	ip, ip, #1
 8019562:	e7d3      	b.n	801950c <__kernel_rem_pio2f+0x60>
 8019564:	ab06      	add	r3, sp, #24
 8019566:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801956a:	9304      	str	r3, [sp, #16]
 801956c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801956e:	eddf 8a92 	vldr	s17, [pc, #584]	; 80197b8 <__kernel_rem_pio2f+0x30c>
 8019572:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80197b4 <__kernel_rem_pio2f+0x308>
 8019576:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801957a:	9303      	str	r3, [sp, #12]
 801957c:	46ba      	mov	sl, r7
 801957e:	ab56      	add	r3, sp, #344	; 0x158
 8019580:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8019584:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8019588:	ab06      	add	r3, sp, #24
 801958a:	4618      	mov	r0, r3
 801958c:	4652      	mov	r2, sl
 801958e:	2a00      	cmp	r2, #0
 8019590:	dc51      	bgt.n	8019636 <__kernel_rem_pio2f+0x18a>
 8019592:	4620      	mov	r0, r4
 8019594:	9305      	str	r3, [sp, #20]
 8019596:	f000 fe0d 	bl	801a1b4 <scalbnf>
 801959a:	eeb0 8a40 	vmov.f32	s16, s0
 801959e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80195a2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80195a6:	f000 fdbd 	bl	801a124 <floorf>
 80195aa:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80195ae:	eea0 8a67 	vfms.f32	s16, s0, s15
 80195b2:	2c00      	cmp	r4, #0
 80195b4:	9b05      	ldr	r3, [sp, #20]
 80195b6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80195ba:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80195be:	edcd 7a00 	vstr	s15, [sp]
 80195c2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80195c6:	dd4b      	ble.n	8019660 <__kernel_rem_pio2f+0x1b4>
 80195c8:	f10a 3cff 	add.w	ip, sl, #4294967295
 80195cc:	aa06      	add	r2, sp, #24
 80195ce:	f1c4 0e08 	rsb	lr, r4, #8
 80195d2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80195d6:	ee17 1a90 	vmov	r1, s15
 80195da:	fa42 f00e 	asr.w	r0, r2, lr
 80195de:	4401      	add	r1, r0
 80195e0:	9100      	str	r1, [sp, #0]
 80195e2:	fa00 f00e 	lsl.w	r0, r0, lr
 80195e6:	a906      	add	r1, sp, #24
 80195e8:	1a12      	subs	r2, r2, r0
 80195ea:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80195ee:	f1c4 0007 	rsb	r0, r4, #7
 80195f2:	fa42 fb00 	asr.w	fp, r2, r0
 80195f6:	f1bb 0f00 	cmp.w	fp, #0
 80195fa:	dd43      	ble.n	8019684 <__kernel_rem_pio2f+0x1d8>
 80195fc:	9a00      	ldr	r2, [sp, #0]
 80195fe:	f04f 0e00 	mov.w	lr, #0
 8019602:	3201      	adds	r2, #1
 8019604:	9200      	str	r2, [sp, #0]
 8019606:	4670      	mov	r0, lr
 8019608:	45f2      	cmp	sl, lr
 801960a:	dc6c      	bgt.n	80196e6 <__kernel_rem_pio2f+0x23a>
 801960c:	2c00      	cmp	r4, #0
 801960e:	dd04      	ble.n	801961a <__kernel_rem_pio2f+0x16e>
 8019610:	2c01      	cmp	r4, #1
 8019612:	d079      	beq.n	8019708 <__kernel_rem_pio2f+0x25c>
 8019614:	2c02      	cmp	r4, #2
 8019616:	f000 8082 	beq.w	801971e <__kernel_rem_pio2f+0x272>
 801961a:	f1bb 0f02 	cmp.w	fp, #2
 801961e:	d131      	bne.n	8019684 <__kernel_rem_pio2f+0x1d8>
 8019620:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019624:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019628:	b360      	cbz	r0, 8019684 <__kernel_rem_pio2f+0x1d8>
 801962a:	4620      	mov	r0, r4
 801962c:	f000 fdc2 	bl	801a1b4 <scalbnf>
 8019630:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019634:	e026      	b.n	8019684 <__kernel_rem_pio2f+0x1d8>
 8019636:	ee60 7a28 	vmul.f32	s15, s0, s17
 801963a:	3a01      	subs	r2, #1
 801963c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019640:	a942      	add	r1, sp, #264	; 0x108
 8019642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019646:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801964a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801964e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019652:	eca0 0a01 	vstmia	r0!, {s0}
 8019656:	ed9c 0a00 	vldr	s0, [ip]
 801965a:	ee37 0a80 	vadd.f32	s0, s15, s0
 801965e:	e796      	b.n	801958e <__kernel_rem_pio2f+0xe2>
 8019660:	d107      	bne.n	8019672 <__kernel_rem_pio2f+0x1c6>
 8019662:	f10a 32ff 	add.w	r2, sl, #4294967295
 8019666:	a906      	add	r1, sp, #24
 8019668:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801966c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8019670:	e7c1      	b.n	80195f6 <__kernel_rem_pio2f+0x14a>
 8019672:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019676:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801967a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801967e:	da2f      	bge.n	80196e0 <__kernel_rem_pio2f+0x234>
 8019680:	f04f 0b00 	mov.w	fp, #0
 8019684:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801968c:	f040 8098 	bne.w	80197c0 <__kernel_rem_pio2f+0x314>
 8019690:	f10a 33ff 	add.w	r3, sl, #4294967295
 8019694:	469c      	mov	ip, r3
 8019696:	2200      	movs	r2, #0
 8019698:	45bc      	cmp	ip, r7
 801969a:	da48      	bge.n	801972e <__kernel_rem_pio2f+0x282>
 801969c:	2a00      	cmp	r2, #0
 801969e:	d05f      	beq.n	8019760 <__kernel_rem_pio2f+0x2b4>
 80196a0:	aa06      	add	r2, sp, #24
 80196a2:	3c08      	subs	r4, #8
 80196a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80196a8:	2900      	cmp	r1, #0
 80196aa:	d07d      	beq.n	80197a8 <__kernel_rem_pio2f+0x2fc>
 80196ac:	4620      	mov	r0, r4
 80196ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80196b2:	9301      	str	r3, [sp, #4]
 80196b4:	f000 fd7e 	bl	801a1b4 <scalbnf>
 80196b8:	9b01      	ldr	r3, [sp, #4]
 80196ba:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80197b8 <__kernel_rem_pio2f+0x30c>
 80196be:	4619      	mov	r1, r3
 80196c0:	2900      	cmp	r1, #0
 80196c2:	f280 80af 	bge.w	8019824 <__kernel_rem_pio2f+0x378>
 80196c6:	4618      	mov	r0, r3
 80196c8:	2400      	movs	r4, #0
 80196ca:	2800      	cmp	r0, #0
 80196cc:	f2c0 80d0 	blt.w	8019870 <__kernel_rem_pio2f+0x3c4>
 80196d0:	a942      	add	r1, sp, #264	; 0x108
 80196d2:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80196d6:	4a36      	ldr	r2, [pc, #216]	; (80197b0 <__kernel_rem_pio2f+0x304>)
 80196d8:	eddf 7a38 	vldr	s15, [pc, #224]	; 80197bc <__kernel_rem_pio2f+0x310>
 80196dc:	2100      	movs	r1, #0
 80196de:	e0bb      	b.n	8019858 <__kernel_rem_pio2f+0x3ac>
 80196e0:	f04f 0b02 	mov.w	fp, #2
 80196e4:	e78a      	b.n	80195fc <__kernel_rem_pio2f+0x150>
 80196e6:	681a      	ldr	r2, [r3, #0]
 80196e8:	b948      	cbnz	r0, 80196fe <__kernel_rem_pio2f+0x252>
 80196ea:	b11a      	cbz	r2, 80196f4 <__kernel_rem_pio2f+0x248>
 80196ec:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80196f0:	601a      	str	r2, [r3, #0]
 80196f2:	2201      	movs	r2, #1
 80196f4:	f10e 0e01 	add.w	lr, lr, #1
 80196f8:	3304      	adds	r3, #4
 80196fa:	4610      	mov	r0, r2
 80196fc:	e784      	b.n	8019608 <__kernel_rem_pio2f+0x15c>
 80196fe:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8019702:	601a      	str	r2, [r3, #0]
 8019704:	4602      	mov	r2, r0
 8019706:	e7f5      	b.n	80196f4 <__kernel_rem_pio2f+0x248>
 8019708:	f10a 3cff 	add.w	ip, sl, #4294967295
 801970c:	ab06      	add	r3, sp, #24
 801970e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019716:	aa06      	add	r2, sp, #24
 8019718:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801971c:	e77d      	b.n	801961a <__kernel_rem_pio2f+0x16e>
 801971e:	f10a 3cff 	add.w	ip, sl, #4294967295
 8019722:	ab06      	add	r3, sp, #24
 8019724:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801972c:	e7f3      	b.n	8019716 <__kernel_rem_pio2f+0x26a>
 801972e:	a906      	add	r1, sp, #24
 8019730:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8019734:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019738:	4302      	orrs	r2, r0
 801973a:	e7ad      	b.n	8019698 <__kernel_rem_pio2f+0x1ec>
 801973c:	3001      	adds	r0, #1
 801973e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019742:	2a00      	cmp	r2, #0
 8019744:	d0fa      	beq.n	801973c <__kernel_rem_pio2f+0x290>
 8019746:	a91a      	add	r1, sp, #104	; 0x68
 8019748:	eb0a 0208 	add.w	r2, sl, r8
 801974c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8019750:	f10a 0301 	add.w	r3, sl, #1
 8019754:	eb0a 0100 	add.w	r1, sl, r0
 8019758:	4299      	cmp	r1, r3
 801975a:	da04      	bge.n	8019766 <__kernel_rem_pio2f+0x2ba>
 801975c:	468a      	mov	sl, r1
 801975e:	e70e      	b.n	801957e <__kernel_rem_pio2f+0xd2>
 8019760:	9b04      	ldr	r3, [sp, #16]
 8019762:	2001      	movs	r0, #1
 8019764:	e7eb      	b.n	801973e <__kernel_rem_pio2f+0x292>
 8019766:	9803      	ldr	r0, [sp, #12]
 8019768:	f8dd c004 	ldr.w	ip, [sp, #4]
 801976c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8019770:	9000      	str	r0, [sp, #0]
 8019772:	ee07 0a90 	vmov	s15, r0
 8019776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801977a:	2000      	movs	r0, #0
 801977c:	ece2 7a01 	vstmia	r2!, {s15}
 8019780:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80197bc <__kernel_rem_pio2f+0x310>
 8019784:	4696      	mov	lr, r2
 8019786:	4548      	cmp	r0, r9
 8019788:	dd06      	ble.n	8019798 <__kernel_rem_pio2f+0x2ec>
 801978a:	a842      	add	r0, sp, #264	; 0x108
 801978c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8019790:	edc0 7a00 	vstr	s15, [r0]
 8019794:	3301      	adds	r3, #1
 8019796:	e7df      	b.n	8019758 <__kernel_rem_pio2f+0x2ac>
 8019798:	ecfc 6a01 	vldmia	ip!, {s13}
 801979c:	ed3e 7a01 	vldmdb	lr!, {s14}
 80197a0:	3001      	adds	r0, #1
 80197a2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80197a6:	e7ee      	b.n	8019786 <__kernel_rem_pio2f+0x2da>
 80197a8:	3b01      	subs	r3, #1
 80197aa:	e779      	b.n	80196a0 <__kernel_rem_pio2f+0x1f4>
 80197ac:	0801b074 	.word	0x0801b074
 80197b0:	0801b048 	.word	0x0801b048
 80197b4:	43800000 	.word	0x43800000
 80197b8:	3b800000 	.word	0x3b800000
 80197bc:	00000000 	.word	0x00000000
 80197c0:	9b02      	ldr	r3, [sp, #8]
 80197c2:	eeb0 0a48 	vmov.f32	s0, s16
 80197c6:	1b98      	subs	r0, r3, r6
 80197c8:	f000 fcf4 	bl	801a1b4 <scalbnf>
 80197cc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80197b4 <__kernel_rem_pio2f+0x308>
 80197d0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80197d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197d8:	db1b      	blt.n	8019812 <__kernel_rem_pio2f+0x366>
 80197da:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80197b8 <__kernel_rem_pio2f+0x30c>
 80197de:	ee60 7a27 	vmul.f32	s15, s0, s15
 80197e2:	aa06      	add	r2, sp, #24
 80197e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80197e8:	a906      	add	r1, sp, #24
 80197ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80197ee:	3408      	adds	r4, #8
 80197f0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80197f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80197f8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80197fc:	ee10 3a10 	vmov	r3, s0
 8019800:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8019804:	ee17 2a90 	vmov	r2, s15
 8019808:	f10a 0301 	add.w	r3, sl, #1
 801980c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8019810:	e74c      	b.n	80196ac <__kernel_rem_pio2f+0x200>
 8019812:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019816:	aa06      	add	r2, sp, #24
 8019818:	ee10 3a10 	vmov	r3, s0
 801981c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8019820:	4653      	mov	r3, sl
 8019822:	e743      	b.n	80196ac <__kernel_rem_pio2f+0x200>
 8019824:	aa42      	add	r2, sp, #264	; 0x108
 8019826:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801982a:	aa06      	add	r2, sp, #24
 801982c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8019830:	9201      	str	r2, [sp, #4]
 8019832:	ee07 2a90 	vmov	s15, r2
 8019836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801983a:	3901      	subs	r1, #1
 801983c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019840:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019844:	edc0 7a00 	vstr	s15, [r0]
 8019848:	e73a      	b.n	80196c0 <__kernel_rem_pio2f+0x214>
 801984a:	ecf2 6a01 	vldmia	r2!, {s13}
 801984e:	ecb6 7a01 	vldmia	r6!, {s14}
 8019852:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019856:	3101      	adds	r1, #1
 8019858:	42b9      	cmp	r1, r7
 801985a:	dc01      	bgt.n	8019860 <__kernel_rem_pio2f+0x3b4>
 801985c:	428c      	cmp	r4, r1
 801985e:	daf4      	bge.n	801984a <__kernel_rem_pio2f+0x39e>
 8019860:	aa56      	add	r2, sp, #344	; 0x158
 8019862:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8019866:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801986a:	3801      	subs	r0, #1
 801986c:	3401      	adds	r4, #1
 801986e:	e72c      	b.n	80196ca <__kernel_rem_pio2f+0x21e>
 8019870:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019872:	2a02      	cmp	r2, #2
 8019874:	dc0a      	bgt.n	801988c <__kernel_rem_pio2f+0x3e0>
 8019876:	2a00      	cmp	r2, #0
 8019878:	dc61      	bgt.n	801993e <__kernel_rem_pio2f+0x492>
 801987a:	d03c      	beq.n	80198f6 <__kernel_rem_pio2f+0x44a>
 801987c:	9b00      	ldr	r3, [sp, #0]
 801987e:	f003 0007 	and.w	r0, r3, #7
 8019882:	b057      	add	sp, #348	; 0x15c
 8019884:	ecbd 8b04 	vpop	{d8-d9}
 8019888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801988c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801988e:	2a03      	cmp	r2, #3
 8019890:	d1f4      	bne.n	801987c <__kernel_rem_pio2f+0x3d0>
 8019892:	aa2e      	add	r2, sp, #184	; 0xb8
 8019894:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8019898:	4608      	mov	r0, r1
 801989a:	461c      	mov	r4, r3
 801989c:	2c00      	cmp	r4, #0
 801989e:	f1a0 0004 	sub.w	r0, r0, #4
 80198a2:	dc59      	bgt.n	8019958 <__kernel_rem_pio2f+0x4ac>
 80198a4:	4618      	mov	r0, r3
 80198a6:	2801      	cmp	r0, #1
 80198a8:	f1a1 0104 	sub.w	r1, r1, #4
 80198ac:	dc64      	bgt.n	8019978 <__kernel_rem_pio2f+0x4cc>
 80198ae:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80197bc <__kernel_rem_pio2f+0x310>
 80198b2:	2b01      	cmp	r3, #1
 80198b4:	dc70      	bgt.n	8019998 <__kernel_rem_pio2f+0x4ec>
 80198b6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80198ba:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80198be:	f1bb 0f00 	cmp.w	fp, #0
 80198c2:	d172      	bne.n	80199aa <__kernel_rem_pio2f+0x4fe>
 80198c4:	edc5 6a00 	vstr	s13, [r5]
 80198c8:	ed85 7a01 	vstr	s14, [r5, #4]
 80198cc:	edc5 7a02 	vstr	s15, [r5, #8]
 80198d0:	e7d4      	b.n	801987c <__kernel_rem_pio2f+0x3d0>
 80198d2:	aa2e      	add	r2, sp, #184	; 0xb8
 80198d4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80198d8:	ed91 7a00 	vldr	s14, [r1]
 80198dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80198e0:	3b01      	subs	r3, #1
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	daf5      	bge.n	80198d2 <__kernel_rem_pio2f+0x426>
 80198e6:	f1bb 0f00 	cmp.w	fp, #0
 80198ea:	d001      	beq.n	80198f0 <__kernel_rem_pio2f+0x444>
 80198ec:	eef1 7a67 	vneg.f32	s15, s15
 80198f0:	edc5 7a00 	vstr	s15, [r5]
 80198f4:	e7c2      	b.n	801987c <__kernel_rem_pio2f+0x3d0>
 80198f6:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80197bc <__kernel_rem_pio2f+0x310>
 80198fa:	e7f2      	b.n	80198e2 <__kernel_rem_pio2f+0x436>
 80198fc:	aa2e      	add	r2, sp, #184	; 0xb8
 80198fe:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8019902:	edd0 7a00 	vldr	s15, [r0]
 8019906:	ee37 7a27 	vadd.f32	s14, s14, s15
 801990a:	3901      	subs	r1, #1
 801990c:	2900      	cmp	r1, #0
 801990e:	daf5      	bge.n	80198fc <__kernel_rem_pio2f+0x450>
 8019910:	f1bb 0f00 	cmp.w	fp, #0
 8019914:	d017      	beq.n	8019946 <__kernel_rem_pio2f+0x49a>
 8019916:	eef1 7a47 	vneg.f32	s15, s14
 801991a:	edc5 7a00 	vstr	s15, [r5]
 801991e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8019922:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019926:	a82f      	add	r0, sp, #188	; 0xbc
 8019928:	2101      	movs	r1, #1
 801992a:	428b      	cmp	r3, r1
 801992c:	da0e      	bge.n	801994c <__kernel_rem_pio2f+0x4a0>
 801992e:	f1bb 0f00 	cmp.w	fp, #0
 8019932:	d001      	beq.n	8019938 <__kernel_rem_pio2f+0x48c>
 8019934:	eef1 7a67 	vneg.f32	s15, s15
 8019938:	edc5 7a01 	vstr	s15, [r5, #4]
 801993c:	e79e      	b.n	801987c <__kernel_rem_pio2f+0x3d0>
 801993e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80197bc <__kernel_rem_pio2f+0x310>
 8019942:	4619      	mov	r1, r3
 8019944:	e7e2      	b.n	801990c <__kernel_rem_pio2f+0x460>
 8019946:	eef0 7a47 	vmov.f32	s15, s14
 801994a:	e7e6      	b.n	801991a <__kernel_rem_pio2f+0x46e>
 801994c:	ecb0 7a01 	vldmia	r0!, {s14}
 8019950:	3101      	adds	r1, #1
 8019952:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019956:	e7e8      	b.n	801992a <__kernel_rem_pio2f+0x47e>
 8019958:	edd0 7a00 	vldr	s15, [r0]
 801995c:	edd0 6a01 	vldr	s13, [r0, #4]
 8019960:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019964:	3c01      	subs	r4, #1
 8019966:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801996a:	ed80 7a00 	vstr	s14, [r0]
 801996e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019972:	edc0 7a01 	vstr	s15, [r0, #4]
 8019976:	e791      	b.n	801989c <__kernel_rem_pio2f+0x3f0>
 8019978:	edd1 7a00 	vldr	s15, [r1]
 801997c:	edd1 6a01 	vldr	s13, [r1, #4]
 8019980:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019984:	3801      	subs	r0, #1
 8019986:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801998a:	ed81 7a00 	vstr	s14, [r1]
 801998e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019992:	edc1 7a01 	vstr	s15, [r1, #4]
 8019996:	e786      	b.n	80198a6 <__kernel_rem_pio2f+0x3fa>
 8019998:	aa2e      	add	r2, sp, #184	; 0xb8
 801999a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801999e:	ed91 7a00 	vldr	s14, [r1]
 80199a2:	3b01      	subs	r3, #1
 80199a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80199a8:	e783      	b.n	80198b2 <__kernel_rem_pio2f+0x406>
 80199aa:	eef1 6a66 	vneg.f32	s13, s13
 80199ae:	eeb1 7a47 	vneg.f32	s14, s14
 80199b2:	edc5 6a00 	vstr	s13, [r5]
 80199b6:	ed85 7a01 	vstr	s14, [r5, #4]
 80199ba:	eef1 7a67 	vneg.f32	s15, s15
 80199be:	e785      	b.n	80198cc <__kernel_rem_pio2f+0x420>

080199c0 <__kernel_sinf>:
 80199c0:	ee10 3a10 	vmov	r3, s0
 80199c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80199c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80199cc:	da04      	bge.n	80199d8 <__kernel_sinf+0x18>
 80199ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80199d2:	ee17 3a90 	vmov	r3, s15
 80199d6:	b35b      	cbz	r3, 8019a30 <__kernel_sinf+0x70>
 80199d8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80199dc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019a34 <__kernel_sinf+0x74>
 80199e0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8019a38 <__kernel_sinf+0x78>
 80199e4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80199e8:	eddf 7a14 	vldr	s15, [pc, #80]	; 8019a3c <__kernel_sinf+0x7c>
 80199ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80199f0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8019a40 <__kernel_sinf+0x80>
 80199f4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80199f8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8019a44 <__kernel_sinf+0x84>
 80199fc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8019a00:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019a04:	b930      	cbnz	r0, 8019a14 <__kernel_sinf+0x54>
 8019a06:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8019a48 <__kernel_sinf+0x88>
 8019a0a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019a0e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8019a12:	4770      	bx	lr
 8019a14:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8019a18:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8019a1c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8019a20:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8019a24:	eddf 7a09 	vldr	s15, [pc, #36]	; 8019a4c <__kernel_sinf+0x8c>
 8019a28:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8019a2c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8019a30:	4770      	bx	lr
 8019a32:	bf00      	nop
 8019a34:	2f2ec9d3 	.word	0x2f2ec9d3
 8019a38:	b2d72f34 	.word	0xb2d72f34
 8019a3c:	3638ef1b 	.word	0x3638ef1b
 8019a40:	b9500d01 	.word	0xb9500d01
 8019a44:	3c088889 	.word	0x3c088889
 8019a48:	be2aaaab 	.word	0xbe2aaaab
 8019a4c:	3e2aaaab 	.word	0x3e2aaaab

08019a50 <__kernel_tanf>:
 8019a50:	b508      	push	{r3, lr}
 8019a52:	ee10 3a10 	vmov	r3, s0
 8019a56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019a5a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8019a5e:	eef0 7a40 	vmov.f32	s15, s0
 8019a62:	da17      	bge.n	8019a94 <__kernel_tanf+0x44>
 8019a64:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8019a68:	ee17 1a10 	vmov	r1, s14
 8019a6c:	bb41      	cbnz	r1, 8019ac0 <__kernel_tanf+0x70>
 8019a6e:	1c43      	adds	r3, r0, #1
 8019a70:	4313      	orrs	r3, r2
 8019a72:	d108      	bne.n	8019a86 <__kernel_tanf+0x36>
 8019a74:	f000 fb4e 	bl	801a114 <fabsf>
 8019a78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019a7c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019a80:	eeb0 0a67 	vmov.f32	s0, s15
 8019a84:	bd08      	pop	{r3, pc}
 8019a86:	2801      	cmp	r0, #1
 8019a88:	d0fa      	beq.n	8019a80 <__kernel_tanf+0x30>
 8019a8a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019a8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019a92:	e7f5      	b.n	8019a80 <__kernel_tanf+0x30>
 8019a94:	494d      	ldr	r1, [pc, #308]	; (8019bcc <__kernel_tanf+0x17c>)
 8019a96:	428a      	cmp	r2, r1
 8019a98:	db12      	blt.n	8019ac0 <__kernel_tanf+0x70>
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	bfb8      	it	lt
 8019a9e:	eef1 7a40 	vneglt.f32	s15, s0
 8019aa2:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8019bd0 <__kernel_tanf+0x180>
 8019aa6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019aaa:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8019bd4 <__kernel_tanf+0x184>
 8019aae:	bfb8      	it	lt
 8019ab0:	eef1 0a60 	vneglt.f32	s1, s1
 8019ab4:	ee70 0a60 	vsub.f32	s1, s0, s1
 8019ab8:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8019abc:	eddf 0a46 	vldr	s1, [pc, #280]	; 8019bd8 <__kernel_tanf+0x188>
 8019ac0:	eddf 5a46 	vldr	s11, [pc, #280]	; 8019bdc <__kernel_tanf+0x18c>
 8019ac4:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8019be0 <__kernel_tanf+0x190>
 8019ac8:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8019be4 <__kernel_tanf+0x194>
 8019acc:	493f      	ldr	r1, [pc, #252]	; (8019bcc <__kernel_tanf+0x17c>)
 8019ace:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8019ad2:	428a      	cmp	r2, r1
 8019ad4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8019ad8:	eea7 6a25 	vfma.f32	s12, s14, s11
 8019adc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8019be8 <__kernel_tanf+0x198>
 8019ae0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8019ae4:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8019bec <__kernel_tanf+0x19c>
 8019ae8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019aec:	eddf 5a40 	vldr	s11, [pc, #256]	; 8019bf0 <__kernel_tanf+0x1a0>
 8019af0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8019af4:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8019bf4 <__kernel_tanf+0x1a4>
 8019af8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019afc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8019bf8 <__kernel_tanf+0x1a8>
 8019b00:	eee7 5a05 	vfma.f32	s11, s14, s10
 8019b04:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8019bfc <__kernel_tanf+0x1ac>
 8019b08:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019b0c:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8019c00 <__kernel_tanf+0x1b0>
 8019b10:	eee5 5a07 	vfma.f32	s11, s10, s14
 8019b14:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8019c04 <__kernel_tanf+0x1b4>
 8019b18:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019b1c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8019c08 <__kernel_tanf+0x1b8>
 8019b20:	eee5 5a07 	vfma.f32	s11, s10, s14
 8019b24:	eeb0 7a65 	vmov.f32	s14, s11
 8019b28:	eea7 6a26 	vfma.f32	s12, s14, s13
 8019b2c:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8019b30:	eeb0 7a46 	vmov.f32	s14, s12
 8019b34:	eeb0 6a60 	vmov.f32	s12, s1
 8019b38:	eea7 6a25 	vfma.f32	s12, s14, s11
 8019b3c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8019c0c <__kernel_tanf+0x1bc>
 8019b40:	eee6 0a26 	vfma.f32	s1, s12, s13
 8019b44:	eee5 0a87 	vfma.f32	s1, s11, s14
 8019b48:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8019b4c:	db1d      	blt.n	8019b8a <__kernel_tanf+0x13a>
 8019b4e:	ee06 0a90 	vmov	s13, r0
 8019b52:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8019b56:	ee27 6a07 	vmul.f32	s12, s14, s14
 8019b5a:	ee37 7a00 	vadd.f32	s14, s14, s0
 8019b5e:	179b      	asrs	r3, r3, #30
 8019b60:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8019b64:	f003 0302 	and.w	r3, r3, #2
 8019b68:	f1c3 0301 	rsb	r3, r3, #1
 8019b6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8019b70:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8019b74:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019b78:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019b7c:	ee07 3a90 	vmov	s15, r3
 8019b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b84:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019b88:	e77a      	b.n	8019a80 <__kernel_tanf+0x30>
 8019b8a:	2801      	cmp	r0, #1
 8019b8c:	d01b      	beq.n	8019bc6 <__kernel_tanf+0x176>
 8019b8e:	4b20      	ldr	r3, [pc, #128]	; (8019c10 <__kernel_tanf+0x1c0>)
 8019b90:	ee17 2a10 	vmov	r2, s14
 8019b94:	401a      	ands	r2, r3
 8019b96:	ee06 2a10 	vmov	s12, r2
 8019b9a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8019b9e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019ba2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8019ba6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8019baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019bae:	ee16 2a90 	vmov	r2, s13
 8019bb2:	4013      	ands	r3, r2
 8019bb4:	ee07 3a90 	vmov	s15, r3
 8019bb8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8019bbc:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8019bc0:	eee7 7a26 	vfma.f32	s15, s14, s13
 8019bc4:	e75c      	b.n	8019a80 <__kernel_tanf+0x30>
 8019bc6:	eef0 7a47 	vmov.f32	s15, s14
 8019bca:	e759      	b.n	8019a80 <__kernel_tanf+0x30>
 8019bcc:	3f2ca140 	.word	0x3f2ca140
 8019bd0:	3f490fda 	.word	0x3f490fda
 8019bd4:	33222168 	.word	0x33222168
 8019bd8:	00000000 	.word	0x00000000
 8019bdc:	b79bae5f 	.word	0xb79bae5f
 8019be0:	38a3f445 	.word	0x38a3f445
 8019be4:	37d95384 	.word	0x37d95384
 8019be8:	3a1a26c8 	.word	0x3a1a26c8
 8019bec:	3b6b6916 	.word	0x3b6b6916
 8019bf0:	3cb327a4 	.word	0x3cb327a4
 8019bf4:	3e088889 	.word	0x3e088889
 8019bf8:	3895c07a 	.word	0x3895c07a
 8019bfc:	398137b9 	.word	0x398137b9
 8019c00:	3abede48 	.word	0x3abede48
 8019c04:	3c11371f 	.word	0x3c11371f
 8019c08:	3d5d0dd1 	.word	0x3d5d0dd1
 8019c0c:	3eaaaaab 	.word	0x3eaaaaab
 8019c10:	fffff000 	.word	0xfffff000
 8019c14:	00000000 	.word	0x00000000

08019c18 <atan>:
 8019c18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c1c:	ec55 4b10 	vmov	r4, r5, d0
 8019c20:	4bc3      	ldr	r3, [pc, #780]	; (8019f30 <atan+0x318>)
 8019c22:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019c26:	429e      	cmp	r6, r3
 8019c28:	46ab      	mov	fp, r5
 8019c2a:	dd18      	ble.n	8019c5e <atan+0x46>
 8019c2c:	4bc1      	ldr	r3, [pc, #772]	; (8019f34 <atan+0x31c>)
 8019c2e:	429e      	cmp	r6, r3
 8019c30:	dc01      	bgt.n	8019c36 <atan+0x1e>
 8019c32:	d109      	bne.n	8019c48 <atan+0x30>
 8019c34:	b144      	cbz	r4, 8019c48 <atan+0x30>
 8019c36:	4622      	mov	r2, r4
 8019c38:	462b      	mov	r3, r5
 8019c3a:	4620      	mov	r0, r4
 8019c3c:	4629      	mov	r1, r5
 8019c3e:	f7e6 fb1d 	bl	800027c <__adddf3>
 8019c42:	4604      	mov	r4, r0
 8019c44:	460d      	mov	r5, r1
 8019c46:	e006      	b.n	8019c56 <atan+0x3e>
 8019c48:	f1bb 0f00 	cmp.w	fp, #0
 8019c4c:	f300 8131 	bgt.w	8019eb2 <atan+0x29a>
 8019c50:	a59b      	add	r5, pc, #620	; (adr r5, 8019ec0 <atan+0x2a8>)
 8019c52:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019c56:	ec45 4b10 	vmov	d0, r4, r5
 8019c5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c5e:	4bb6      	ldr	r3, [pc, #728]	; (8019f38 <atan+0x320>)
 8019c60:	429e      	cmp	r6, r3
 8019c62:	dc14      	bgt.n	8019c8e <atan+0x76>
 8019c64:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8019c68:	429e      	cmp	r6, r3
 8019c6a:	dc0d      	bgt.n	8019c88 <atan+0x70>
 8019c6c:	a396      	add	r3, pc, #600	; (adr r3, 8019ec8 <atan+0x2b0>)
 8019c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c72:	ee10 0a10 	vmov	r0, s0
 8019c76:	4629      	mov	r1, r5
 8019c78:	f7e6 fb00 	bl	800027c <__adddf3>
 8019c7c:	4baf      	ldr	r3, [pc, #700]	; (8019f3c <atan+0x324>)
 8019c7e:	2200      	movs	r2, #0
 8019c80:	f7e6 ff42 	bl	8000b08 <__aeabi_dcmpgt>
 8019c84:	2800      	cmp	r0, #0
 8019c86:	d1e6      	bne.n	8019c56 <atan+0x3e>
 8019c88:	f04f 3aff 	mov.w	sl, #4294967295
 8019c8c:	e02b      	b.n	8019ce6 <atan+0xce>
 8019c8e:	f000 f963 	bl	8019f58 <fabs>
 8019c92:	4bab      	ldr	r3, [pc, #684]	; (8019f40 <atan+0x328>)
 8019c94:	429e      	cmp	r6, r3
 8019c96:	ec55 4b10 	vmov	r4, r5, d0
 8019c9a:	f300 80bf 	bgt.w	8019e1c <atan+0x204>
 8019c9e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8019ca2:	429e      	cmp	r6, r3
 8019ca4:	f300 80a0 	bgt.w	8019de8 <atan+0x1d0>
 8019ca8:	ee10 2a10 	vmov	r2, s0
 8019cac:	ee10 0a10 	vmov	r0, s0
 8019cb0:	462b      	mov	r3, r5
 8019cb2:	4629      	mov	r1, r5
 8019cb4:	f7e6 fae2 	bl	800027c <__adddf3>
 8019cb8:	4ba0      	ldr	r3, [pc, #640]	; (8019f3c <atan+0x324>)
 8019cba:	2200      	movs	r2, #0
 8019cbc:	f7e6 fadc 	bl	8000278 <__aeabi_dsub>
 8019cc0:	2200      	movs	r2, #0
 8019cc2:	4606      	mov	r6, r0
 8019cc4:	460f      	mov	r7, r1
 8019cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019cca:	4620      	mov	r0, r4
 8019ccc:	4629      	mov	r1, r5
 8019cce:	f7e6 fad5 	bl	800027c <__adddf3>
 8019cd2:	4602      	mov	r2, r0
 8019cd4:	460b      	mov	r3, r1
 8019cd6:	4630      	mov	r0, r6
 8019cd8:	4639      	mov	r1, r7
 8019cda:	f7e6 fdaf 	bl	800083c <__aeabi_ddiv>
 8019cde:	f04f 0a00 	mov.w	sl, #0
 8019ce2:	4604      	mov	r4, r0
 8019ce4:	460d      	mov	r5, r1
 8019ce6:	4622      	mov	r2, r4
 8019ce8:	462b      	mov	r3, r5
 8019cea:	4620      	mov	r0, r4
 8019cec:	4629      	mov	r1, r5
 8019cee:	f7e6 fc7b 	bl	80005e8 <__aeabi_dmul>
 8019cf2:	4602      	mov	r2, r0
 8019cf4:	460b      	mov	r3, r1
 8019cf6:	4680      	mov	r8, r0
 8019cf8:	4689      	mov	r9, r1
 8019cfa:	f7e6 fc75 	bl	80005e8 <__aeabi_dmul>
 8019cfe:	a374      	add	r3, pc, #464	; (adr r3, 8019ed0 <atan+0x2b8>)
 8019d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d04:	4606      	mov	r6, r0
 8019d06:	460f      	mov	r7, r1
 8019d08:	f7e6 fc6e 	bl	80005e8 <__aeabi_dmul>
 8019d0c:	a372      	add	r3, pc, #456	; (adr r3, 8019ed8 <atan+0x2c0>)
 8019d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d12:	f7e6 fab3 	bl	800027c <__adddf3>
 8019d16:	4632      	mov	r2, r6
 8019d18:	463b      	mov	r3, r7
 8019d1a:	f7e6 fc65 	bl	80005e8 <__aeabi_dmul>
 8019d1e:	a370      	add	r3, pc, #448	; (adr r3, 8019ee0 <atan+0x2c8>)
 8019d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d24:	f7e6 faaa 	bl	800027c <__adddf3>
 8019d28:	4632      	mov	r2, r6
 8019d2a:	463b      	mov	r3, r7
 8019d2c:	f7e6 fc5c 	bl	80005e8 <__aeabi_dmul>
 8019d30:	a36d      	add	r3, pc, #436	; (adr r3, 8019ee8 <atan+0x2d0>)
 8019d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d36:	f7e6 faa1 	bl	800027c <__adddf3>
 8019d3a:	4632      	mov	r2, r6
 8019d3c:	463b      	mov	r3, r7
 8019d3e:	f7e6 fc53 	bl	80005e8 <__aeabi_dmul>
 8019d42:	a36b      	add	r3, pc, #428	; (adr r3, 8019ef0 <atan+0x2d8>)
 8019d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d48:	f7e6 fa98 	bl	800027c <__adddf3>
 8019d4c:	4632      	mov	r2, r6
 8019d4e:	463b      	mov	r3, r7
 8019d50:	f7e6 fc4a 	bl	80005e8 <__aeabi_dmul>
 8019d54:	a368      	add	r3, pc, #416	; (adr r3, 8019ef8 <atan+0x2e0>)
 8019d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d5a:	f7e6 fa8f 	bl	800027c <__adddf3>
 8019d5e:	4642      	mov	r2, r8
 8019d60:	464b      	mov	r3, r9
 8019d62:	f7e6 fc41 	bl	80005e8 <__aeabi_dmul>
 8019d66:	a366      	add	r3, pc, #408	; (adr r3, 8019f00 <atan+0x2e8>)
 8019d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d6c:	4680      	mov	r8, r0
 8019d6e:	4689      	mov	r9, r1
 8019d70:	4630      	mov	r0, r6
 8019d72:	4639      	mov	r1, r7
 8019d74:	f7e6 fc38 	bl	80005e8 <__aeabi_dmul>
 8019d78:	a363      	add	r3, pc, #396	; (adr r3, 8019f08 <atan+0x2f0>)
 8019d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d7e:	f7e6 fa7b 	bl	8000278 <__aeabi_dsub>
 8019d82:	4632      	mov	r2, r6
 8019d84:	463b      	mov	r3, r7
 8019d86:	f7e6 fc2f 	bl	80005e8 <__aeabi_dmul>
 8019d8a:	a361      	add	r3, pc, #388	; (adr r3, 8019f10 <atan+0x2f8>)
 8019d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d90:	f7e6 fa72 	bl	8000278 <__aeabi_dsub>
 8019d94:	4632      	mov	r2, r6
 8019d96:	463b      	mov	r3, r7
 8019d98:	f7e6 fc26 	bl	80005e8 <__aeabi_dmul>
 8019d9c:	a35e      	add	r3, pc, #376	; (adr r3, 8019f18 <atan+0x300>)
 8019d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019da2:	f7e6 fa69 	bl	8000278 <__aeabi_dsub>
 8019da6:	4632      	mov	r2, r6
 8019da8:	463b      	mov	r3, r7
 8019daa:	f7e6 fc1d 	bl	80005e8 <__aeabi_dmul>
 8019dae:	a35c      	add	r3, pc, #368	; (adr r3, 8019f20 <atan+0x308>)
 8019db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019db4:	f7e6 fa60 	bl	8000278 <__aeabi_dsub>
 8019db8:	4632      	mov	r2, r6
 8019dba:	463b      	mov	r3, r7
 8019dbc:	f7e6 fc14 	bl	80005e8 <__aeabi_dmul>
 8019dc0:	4602      	mov	r2, r0
 8019dc2:	460b      	mov	r3, r1
 8019dc4:	4640      	mov	r0, r8
 8019dc6:	4649      	mov	r1, r9
 8019dc8:	f7e6 fa58 	bl	800027c <__adddf3>
 8019dcc:	4622      	mov	r2, r4
 8019dce:	462b      	mov	r3, r5
 8019dd0:	f7e6 fc0a 	bl	80005e8 <__aeabi_dmul>
 8019dd4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8019dd8:	4602      	mov	r2, r0
 8019dda:	460b      	mov	r3, r1
 8019ddc:	d14b      	bne.n	8019e76 <atan+0x25e>
 8019dde:	4620      	mov	r0, r4
 8019de0:	4629      	mov	r1, r5
 8019de2:	f7e6 fa49 	bl	8000278 <__aeabi_dsub>
 8019de6:	e72c      	b.n	8019c42 <atan+0x2a>
 8019de8:	ee10 0a10 	vmov	r0, s0
 8019dec:	4b53      	ldr	r3, [pc, #332]	; (8019f3c <atan+0x324>)
 8019dee:	2200      	movs	r2, #0
 8019df0:	4629      	mov	r1, r5
 8019df2:	f7e6 fa41 	bl	8000278 <__aeabi_dsub>
 8019df6:	4b51      	ldr	r3, [pc, #324]	; (8019f3c <atan+0x324>)
 8019df8:	4606      	mov	r6, r0
 8019dfa:	460f      	mov	r7, r1
 8019dfc:	2200      	movs	r2, #0
 8019dfe:	4620      	mov	r0, r4
 8019e00:	4629      	mov	r1, r5
 8019e02:	f7e6 fa3b 	bl	800027c <__adddf3>
 8019e06:	4602      	mov	r2, r0
 8019e08:	460b      	mov	r3, r1
 8019e0a:	4630      	mov	r0, r6
 8019e0c:	4639      	mov	r1, r7
 8019e0e:	f7e6 fd15 	bl	800083c <__aeabi_ddiv>
 8019e12:	f04f 0a01 	mov.w	sl, #1
 8019e16:	4604      	mov	r4, r0
 8019e18:	460d      	mov	r5, r1
 8019e1a:	e764      	b.n	8019ce6 <atan+0xce>
 8019e1c:	4b49      	ldr	r3, [pc, #292]	; (8019f44 <atan+0x32c>)
 8019e1e:	429e      	cmp	r6, r3
 8019e20:	da1d      	bge.n	8019e5e <atan+0x246>
 8019e22:	ee10 0a10 	vmov	r0, s0
 8019e26:	4b48      	ldr	r3, [pc, #288]	; (8019f48 <atan+0x330>)
 8019e28:	2200      	movs	r2, #0
 8019e2a:	4629      	mov	r1, r5
 8019e2c:	f7e6 fa24 	bl	8000278 <__aeabi_dsub>
 8019e30:	4b45      	ldr	r3, [pc, #276]	; (8019f48 <atan+0x330>)
 8019e32:	4606      	mov	r6, r0
 8019e34:	460f      	mov	r7, r1
 8019e36:	2200      	movs	r2, #0
 8019e38:	4620      	mov	r0, r4
 8019e3a:	4629      	mov	r1, r5
 8019e3c:	f7e6 fbd4 	bl	80005e8 <__aeabi_dmul>
 8019e40:	4b3e      	ldr	r3, [pc, #248]	; (8019f3c <atan+0x324>)
 8019e42:	2200      	movs	r2, #0
 8019e44:	f7e6 fa1a 	bl	800027c <__adddf3>
 8019e48:	4602      	mov	r2, r0
 8019e4a:	460b      	mov	r3, r1
 8019e4c:	4630      	mov	r0, r6
 8019e4e:	4639      	mov	r1, r7
 8019e50:	f7e6 fcf4 	bl	800083c <__aeabi_ddiv>
 8019e54:	f04f 0a02 	mov.w	sl, #2
 8019e58:	4604      	mov	r4, r0
 8019e5a:	460d      	mov	r5, r1
 8019e5c:	e743      	b.n	8019ce6 <atan+0xce>
 8019e5e:	462b      	mov	r3, r5
 8019e60:	ee10 2a10 	vmov	r2, s0
 8019e64:	4939      	ldr	r1, [pc, #228]	; (8019f4c <atan+0x334>)
 8019e66:	2000      	movs	r0, #0
 8019e68:	f7e6 fce8 	bl	800083c <__aeabi_ddiv>
 8019e6c:	f04f 0a03 	mov.w	sl, #3
 8019e70:	4604      	mov	r4, r0
 8019e72:	460d      	mov	r5, r1
 8019e74:	e737      	b.n	8019ce6 <atan+0xce>
 8019e76:	4b36      	ldr	r3, [pc, #216]	; (8019f50 <atan+0x338>)
 8019e78:	4e36      	ldr	r6, [pc, #216]	; (8019f54 <atan+0x33c>)
 8019e7a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8019e7e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8019e82:	e9da 2300 	ldrd	r2, r3, [sl]
 8019e86:	f7e6 f9f7 	bl	8000278 <__aeabi_dsub>
 8019e8a:	4622      	mov	r2, r4
 8019e8c:	462b      	mov	r3, r5
 8019e8e:	f7e6 f9f3 	bl	8000278 <__aeabi_dsub>
 8019e92:	4602      	mov	r2, r0
 8019e94:	460b      	mov	r3, r1
 8019e96:	e9d6 0100 	ldrd	r0, r1, [r6]
 8019e9a:	f7e6 f9ed 	bl	8000278 <__aeabi_dsub>
 8019e9e:	f1bb 0f00 	cmp.w	fp, #0
 8019ea2:	4604      	mov	r4, r0
 8019ea4:	460d      	mov	r5, r1
 8019ea6:	f6bf aed6 	bge.w	8019c56 <atan+0x3e>
 8019eaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019eae:	461d      	mov	r5, r3
 8019eb0:	e6d1      	b.n	8019c56 <atan+0x3e>
 8019eb2:	a51d      	add	r5, pc, #116	; (adr r5, 8019f28 <atan+0x310>)
 8019eb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019eb8:	e6cd      	b.n	8019c56 <atan+0x3e>
 8019eba:	bf00      	nop
 8019ebc:	f3af 8000 	nop.w
 8019ec0:	54442d18 	.word	0x54442d18
 8019ec4:	bff921fb 	.word	0xbff921fb
 8019ec8:	8800759c 	.word	0x8800759c
 8019ecc:	7e37e43c 	.word	0x7e37e43c
 8019ed0:	e322da11 	.word	0xe322da11
 8019ed4:	3f90ad3a 	.word	0x3f90ad3a
 8019ed8:	24760deb 	.word	0x24760deb
 8019edc:	3fa97b4b 	.word	0x3fa97b4b
 8019ee0:	a0d03d51 	.word	0xa0d03d51
 8019ee4:	3fb10d66 	.word	0x3fb10d66
 8019ee8:	c54c206e 	.word	0xc54c206e
 8019eec:	3fb745cd 	.word	0x3fb745cd
 8019ef0:	920083ff 	.word	0x920083ff
 8019ef4:	3fc24924 	.word	0x3fc24924
 8019ef8:	5555550d 	.word	0x5555550d
 8019efc:	3fd55555 	.word	0x3fd55555
 8019f00:	2c6a6c2f 	.word	0x2c6a6c2f
 8019f04:	bfa2b444 	.word	0xbfa2b444
 8019f08:	52defd9a 	.word	0x52defd9a
 8019f0c:	3fadde2d 	.word	0x3fadde2d
 8019f10:	af749a6d 	.word	0xaf749a6d
 8019f14:	3fb3b0f2 	.word	0x3fb3b0f2
 8019f18:	fe231671 	.word	0xfe231671
 8019f1c:	3fbc71c6 	.word	0x3fbc71c6
 8019f20:	9998ebc4 	.word	0x9998ebc4
 8019f24:	3fc99999 	.word	0x3fc99999
 8019f28:	54442d18 	.word	0x54442d18
 8019f2c:	3ff921fb 	.word	0x3ff921fb
 8019f30:	440fffff 	.word	0x440fffff
 8019f34:	7ff00000 	.word	0x7ff00000
 8019f38:	3fdbffff 	.word	0x3fdbffff
 8019f3c:	3ff00000 	.word	0x3ff00000
 8019f40:	3ff2ffff 	.word	0x3ff2ffff
 8019f44:	40038000 	.word	0x40038000
 8019f48:	3ff80000 	.word	0x3ff80000
 8019f4c:	bff00000 	.word	0xbff00000
 8019f50:	0801b0a0 	.word	0x0801b0a0
 8019f54:	0801b080 	.word	0x0801b080

08019f58 <fabs>:
 8019f58:	ec51 0b10 	vmov	r0, r1, d0
 8019f5c:	ee10 2a10 	vmov	r2, s0
 8019f60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019f64:	ec43 2b10 	vmov	d0, r2, r3
 8019f68:	4770      	bx	lr
	...

08019f6c <atanf>:
 8019f6c:	b538      	push	{r3, r4, r5, lr}
 8019f6e:	ee10 5a10 	vmov	r5, s0
 8019f72:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8019f76:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8019f7a:	eef0 7a40 	vmov.f32	s15, s0
 8019f7e:	db10      	blt.n	8019fa2 <atanf+0x36>
 8019f80:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8019f84:	dd04      	ble.n	8019f90 <atanf+0x24>
 8019f86:	ee70 7a00 	vadd.f32	s15, s0, s0
 8019f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8019f8e:	bd38      	pop	{r3, r4, r5, pc}
 8019f90:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801a0c8 <atanf+0x15c>
 8019f94:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801a0cc <atanf+0x160>
 8019f98:	2d00      	cmp	r5, #0
 8019f9a:	bfd8      	it	le
 8019f9c:	eef0 7a40 	vmovle.f32	s15, s0
 8019fa0:	e7f3      	b.n	8019f8a <atanf+0x1e>
 8019fa2:	4b4b      	ldr	r3, [pc, #300]	; (801a0d0 <atanf+0x164>)
 8019fa4:	429c      	cmp	r4, r3
 8019fa6:	dc10      	bgt.n	8019fca <atanf+0x5e>
 8019fa8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8019fac:	da0a      	bge.n	8019fc4 <atanf+0x58>
 8019fae:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801a0d4 <atanf+0x168>
 8019fb2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8019fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019fba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8019fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fc2:	dce2      	bgt.n	8019f8a <atanf+0x1e>
 8019fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8019fc8:	e013      	b.n	8019ff2 <atanf+0x86>
 8019fca:	f000 f8a3 	bl	801a114 <fabsf>
 8019fce:	4b42      	ldr	r3, [pc, #264]	; (801a0d8 <atanf+0x16c>)
 8019fd0:	429c      	cmp	r4, r3
 8019fd2:	dc4f      	bgt.n	801a074 <atanf+0x108>
 8019fd4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8019fd8:	429c      	cmp	r4, r3
 8019fda:	dc41      	bgt.n	801a060 <atanf+0xf4>
 8019fdc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8019fe0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019fe4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019fe8:	2300      	movs	r3, #0
 8019fea:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019fee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019ff2:	1c5a      	adds	r2, r3, #1
 8019ff4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8019ff8:	eddf 5a38 	vldr	s11, [pc, #224]	; 801a0dc <atanf+0x170>
 8019ffc:	ed9f 6a38 	vldr	s12, [pc, #224]	; 801a0e0 <atanf+0x174>
 801a000:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801a0e4 <atanf+0x178>
 801a004:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801a0e8 <atanf+0x17c>
 801a008:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801a00c:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a010:	eddf 5a36 	vldr	s11, [pc, #216]	; 801a0ec <atanf+0x180>
 801a014:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a018:	ed9f 6a35 	vldr	s12, [pc, #212]	; 801a0f0 <atanf+0x184>
 801a01c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a020:	eddf 5a34 	vldr	s11, [pc, #208]	; 801a0f4 <atanf+0x188>
 801a024:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a028:	ed9f 6a33 	vldr	s12, [pc, #204]	; 801a0f8 <atanf+0x18c>
 801a02c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a030:	eddf 5a32 	vldr	s11, [pc, #200]	; 801a0fc <atanf+0x190>
 801a034:	eee7 5a05 	vfma.f32	s11, s14, s10
 801a038:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801a100 <atanf+0x194>
 801a03c:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a040:	eddf 5a30 	vldr	s11, [pc, #192]	; 801a104 <atanf+0x198>
 801a044:	eee5 5a07 	vfma.f32	s11, s10, s14
 801a048:	eea5 0a87 	vfma.f32	s0, s11, s14
 801a04c:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a050:	eea6 0a26 	vfma.f32	s0, s12, s13
 801a054:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a058:	d121      	bne.n	801a09e <atanf+0x132>
 801a05a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a05e:	e794      	b.n	8019f8a <atanf+0x1e>
 801a060:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a064:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a068:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a06c:	2301      	movs	r3, #1
 801a06e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a072:	e7be      	b.n	8019ff2 <atanf+0x86>
 801a074:	4b24      	ldr	r3, [pc, #144]	; (801a108 <atanf+0x19c>)
 801a076:	429c      	cmp	r4, r3
 801a078:	dc0b      	bgt.n	801a092 <atanf+0x126>
 801a07a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801a07e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a082:	eea0 7a27 	vfma.f32	s14, s0, s15
 801a086:	2302      	movs	r3, #2
 801a088:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a08c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a090:	e7af      	b.n	8019ff2 <atanf+0x86>
 801a092:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801a096:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a09a:	2303      	movs	r3, #3
 801a09c:	e7a9      	b.n	8019ff2 <atanf+0x86>
 801a09e:	4a1b      	ldr	r2, [pc, #108]	; (801a10c <atanf+0x1a0>)
 801a0a0:	491b      	ldr	r1, [pc, #108]	; (801a110 <atanf+0x1a4>)
 801a0a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801a0a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a0aa:	ed93 7a00 	vldr	s14, [r3]
 801a0ae:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a0b2:	2d00      	cmp	r5, #0
 801a0b4:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a0b8:	ed92 0a00 	vldr	s0, [r2]
 801a0bc:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a0c0:	bfb8      	it	lt
 801a0c2:	eef1 7a67 	vneglt.f32	s15, s15
 801a0c6:	e760      	b.n	8019f8a <atanf+0x1e>
 801a0c8:	3fc90fdb 	.word	0x3fc90fdb
 801a0cc:	bfc90fdb 	.word	0xbfc90fdb
 801a0d0:	3edfffff 	.word	0x3edfffff
 801a0d4:	7149f2ca 	.word	0x7149f2ca
 801a0d8:	3f97ffff 	.word	0x3f97ffff
 801a0dc:	3c8569d7 	.word	0x3c8569d7
 801a0e0:	3d4bda59 	.word	0x3d4bda59
 801a0e4:	bd15a221 	.word	0xbd15a221
 801a0e8:	be4ccccd 	.word	0xbe4ccccd
 801a0ec:	3d886b35 	.word	0x3d886b35
 801a0f0:	3dba2e6e 	.word	0x3dba2e6e
 801a0f4:	3e124925 	.word	0x3e124925
 801a0f8:	3eaaaaab 	.word	0x3eaaaaab
 801a0fc:	bd6ef16b 	.word	0xbd6ef16b
 801a100:	bd9d8795 	.word	0xbd9d8795
 801a104:	bde38e38 	.word	0xbde38e38
 801a108:	401bffff 	.word	0x401bffff
 801a10c:	0801b0c0 	.word	0x0801b0c0
 801a110:	0801b0d0 	.word	0x0801b0d0

0801a114 <fabsf>:
 801a114:	ee10 3a10 	vmov	r3, s0
 801a118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a11c:	ee00 3a10 	vmov	s0, r3
 801a120:	4770      	bx	lr
	...

0801a124 <floorf>:
 801a124:	ee10 3a10 	vmov	r3, s0
 801a128:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a12c:	3a7f      	subs	r2, #127	; 0x7f
 801a12e:	2a16      	cmp	r2, #22
 801a130:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a134:	dc2a      	bgt.n	801a18c <floorf+0x68>
 801a136:	2a00      	cmp	r2, #0
 801a138:	da11      	bge.n	801a15e <floorf+0x3a>
 801a13a:	eddf 7a18 	vldr	s15, [pc, #96]	; 801a19c <floorf+0x78>
 801a13e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a142:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a14a:	dd05      	ble.n	801a158 <floorf+0x34>
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	da23      	bge.n	801a198 <floorf+0x74>
 801a150:	4a13      	ldr	r2, [pc, #76]	; (801a1a0 <floorf+0x7c>)
 801a152:	2900      	cmp	r1, #0
 801a154:	bf18      	it	ne
 801a156:	4613      	movne	r3, r2
 801a158:	ee00 3a10 	vmov	s0, r3
 801a15c:	4770      	bx	lr
 801a15e:	4911      	ldr	r1, [pc, #68]	; (801a1a4 <floorf+0x80>)
 801a160:	4111      	asrs	r1, r2
 801a162:	420b      	tst	r3, r1
 801a164:	d0fa      	beq.n	801a15c <floorf+0x38>
 801a166:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801a19c <floorf+0x78>
 801a16a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a16e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a176:	ddef      	ble.n	801a158 <floorf+0x34>
 801a178:	2b00      	cmp	r3, #0
 801a17a:	bfbe      	ittt	lt
 801a17c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801a180:	fa40 f202 	asrlt.w	r2, r0, r2
 801a184:	189b      	addlt	r3, r3, r2
 801a186:	ea23 0301 	bic.w	r3, r3, r1
 801a18a:	e7e5      	b.n	801a158 <floorf+0x34>
 801a18c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a190:	d3e4      	bcc.n	801a15c <floorf+0x38>
 801a192:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a196:	4770      	bx	lr
 801a198:	2300      	movs	r3, #0
 801a19a:	e7dd      	b.n	801a158 <floorf+0x34>
 801a19c:	7149f2ca 	.word	0x7149f2ca
 801a1a0:	bf800000 	.word	0xbf800000
 801a1a4:	007fffff 	.word	0x007fffff

0801a1a8 <nanf>:
 801a1a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a1b0 <nanf+0x8>
 801a1ac:	4770      	bx	lr
 801a1ae:	bf00      	nop
 801a1b0:	7fc00000 	.word	0x7fc00000

0801a1b4 <scalbnf>:
 801a1b4:	ee10 3a10 	vmov	r3, s0
 801a1b8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801a1bc:	d025      	beq.n	801a20a <scalbnf+0x56>
 801a1be:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a1c2:	d302      	bcc.n	801a1ca <scalbnf+0x16>
 801a1c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a1c8:	4770      	bx	lr
 801a1ca:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801a1ce:	d122      	bne.n	801a216 <scalbnf+0x62>
 801a1d0:	4b2a      	ldr	r3, [pc, #168]	; (801a27c <scalbnf+0xc8>)
 801a1d2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801a280 <scalbnf+0xcc>
 801a1d6:	4298      	cmp	r0, r3
 801a1d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a1dc:	db16      	blt.n	801a20c <scalbnf+0x58>
 801a1de:	ee10 3a10 	vmov	r3, s0
 801a1e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a1e6:	3a19      	subs	r2, #25
 801a1e8:	4402      	add	r2, r0
 801a1ea:	2afe      	cmp	r2, #254	; 0xfe
 801a1ec:	dd15      	ble.n	801a21a <scalbnf+0x66>
 801a1ee:	ee10 3a10 	vmov	r3, s0
 801a1f2:	eddf 7a24 	vldr	s15, [pc, #144]	; 801a284 <scalbnf+0xd0>
 801a1f6:	eddf 6a24 	vldr	s13, [pc, #144]	; 801a288 <scalbnf+0xd4>
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	eeb0 7a67 	vmov.f32	s14, s15
 801a200:	bfb8      	it	lt
 801a202:	eef0 7a66 	vmovlt.f32	s15, s13
 801a206:	ee27 0a27 	vmul.f32	s0, s14, s15
 801a20a:	4770      	bx	lr
 801a20c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a28c <scalbnf+0xd8>
 801a210:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a214:	4770      	bx	lr
 801a216:	0dd2      	lsrs	r2, r2, #23
 801a218:	e7e6      	b.n	801a1e8 <scalbnf+0x34>
 801a21a:	2a00      	cmp	r2, #0
 801a21c:	dd06      	ble.n	801a22c <scalbnf+0x78>
 801a21e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a222:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a226:	ee00 3a10 	vmov	s0, r3
 801a22a:	4770      	bx	lr
 801a22c:	f112 0f16 	cmn.w	r2, #22
 801a230:	da1a      	bge.n	801a268 <scalbnf+0xb4>
 801a232:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a236:	4298      	cmp	r0, r3
 801a238:	ee10 3a10 	vmov	r3, s0
 801a23c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a240:	dd0a      	ble.n	801a258 <scalbnf+0xa4>
 801a242:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801a284 <scalbnf+0xd0>
 801a246:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801a288 <scalbnf+0xd4>
 801a24a:	eef0 7a40 	vmov.f32	s15, s0
 801a24e:	2b00      	cmp	r3, #0
 801a250:	bf18      	it	ne
 801a252:	eeb0 0a47 	vmovne.f32	s0, s14
 801a256:	e7db      	b.n	801a210 <scalbnf+0x5c>
 801a258:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801a28c <scalbnf+0xd8>
 801a25c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801a290 <scalbnf+0xdc>
 801a260:	eef0 7a40 	vmov.f32	s15, s0
 801a264:	2b00      	cmp	r3, #0
 801a266:	e7f3      	b.n	801a250 <scalbnf+0x9c>
 801a268:	3219      	adds	r2, #25
 801a26a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a26e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a272:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a294 <scalbnf+0xe0>
 801a276:	ee07 3a10 	vmov	s14, r3
 801a27a:	e7c4      	b.n	801a206 <scalbnf+0x52>
 801a27c:	ffff3cb0 	.word	0xffff3cb0
 801a280:	4c000000 	.word	0x4c000000
 801a284:	7149f2ca 	.word	0x7149f2ca
 801a288:	f149f2ca 	.word	0xf149f2ca
 801a28c:	0da24260 	.word	0x0da24260
 801a290:	8da24260 	.word	0x8da24260
 801a294:	33000000 	.word	0x33000000

0801a298 <__errno>:
 801a298:	4b01      	ldr	r3, [pc, #4]	; (801a2a0 <__errno+0x8>)
 801a29a:	6818      	ldr	r0, [r3, #0]
 801a29c:	4770      	bx	lr
 801a29e:	bf00      	nop
 801a2a0:	20000190 	.word	0x20000190

0801a2a4 <__libc_init_array>:
 801a2a4:	b570      	push	{r4, r5, r6, lr}
 801a2a6:	4d0d      	ldr	r5, [pc, #52]	; (801a2dc <__libc_init_array+0x38>)
 801a2a8:	4c0d      	ldr	r4, [pc, #52]	; (801a2e0 <__libc_init_array+0x3c>)
 801a2aa:	1b64      	subs	r4, r4, r5
 801a2ac:	10a4      	asrs	r4, r4, #2
 801a2ae:	2600      	movs	r6, #0
 801a2b0:	42a6      	cmp	r6, r4
 801a2b2:	d109      	bne.n	801a2c8 <__libc_init_array+0x24>
 801a2b4:	4d0b      	ldr	r5, [pc, #44]	; (801a2e4 <__libc_init_array+0x40>)
 801a2b6:	4c0c      	ldr	r4, [pc, #48]	; (801a2e8 <__libc_init_array+0x44>)
 801a2b8:	f000 fc62 	bl	801ab80 <_init>
 801a2bc:	1b64      	subs	r4, r4, r5
 801a2be:	10a4      	asrs	r4, r4, #2
 801a2c0:	2600      	movs	r6, #0
 801a2c2:	42a6      	cmp	r6, r4
 801a2c4:	d105      	bne.n	801a2d2 <__libc_init_array+0x2e>
 801a2c6:	bd70      	pop	{r4, r5, r6, pc}
 801a2c8:	f855 3b04 	ldr.w	r3, [r5], #4
 801a2cc:	4798      	blx	r3
 801a2ce:	3601      	adds	r6, #1
 801a2d0:	e7ee      	b.n	801a2b0 <__libc_init_array+0xc>
 801a2d2:	f855 3b04 	ldr.w	r3, [r5], #4
 801a2d6:	4798      	blx	r3
 801a2d8:	3601      	adds	r6, #1
 801a2da:	e7f2      	b.n	801a2c2 <__libc_init_array+0x1e>
 801a2dc:	0801b11c 	.word	0x0801b11c
 801a2e0:	0801b11c 	.word	0x0801b11c
 801a2e4:	0801b11c 	.word	0x0801b11c
 801a2e8:	0801b120 	.word	0x0801b120

0801a2ec <memcpy>:
 801a2ec:	440a      	add	r2, r1
 801a2ee:	4291      	cmp	r1, r2
 801a2f0:	f100 33ff 	add.w	r3, r0, #4294967295
 801a2f4:	d100      	bne.n	801a2f8 <memcpy+0xc>
 801a2f6:	4770      	bx	lr
 801a2f8:	b510      	push	{r4, lr}
 801a2fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a2fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a302:	4291      	cmp	r1, r2
 801a304:	d1f9      	bne.n	801a2fa <memcpy+0xe>
 801a306:	bd10      	pop	{r4, pc}

0801a308 <memset>:
 801a308:	4402      	add	r2, r0
 801a30a:	4603      	mov	r3, r0
 801a30c:	4293      	cmp	r3, r2
 801a30e:	d100      	bne.n	801a312 <memset+0xa>
 801a310:	4770      	bx	lr
 801a312:	f803 1b01 	strb.w	r1, [r3], #1
 801a316:	e7f9      	b.n	801a30c <memset+0x4>

0801a318 <sniprintf>:
 801a318:	b40c      	push	{r2, r3}
 801a31a:	b530      	push	{r4, r5, lr}
 801a31c:	4b17      	ldr	r3, [pc, #92]	; (801a37c <sniprintf+0x64>)
 801a31e:	1e0c      	subs	r4, r1, #0
 801a320:	681d      	ldr	r5, [r3, #0]
 801a322:	b09d      	sub	sp, #116	; 0x74
 801a324:	da08      	bge.n	801a338 <sniprintf+0x20>
 801a326:	238b      	movs	r3, #139	; 0x8b
 801a328:	602b      	str	r3, [r5, #0]
 801a32a:	f04f 30ff 	mov.w	r0, #4294967295
 801a32e:	b01d      	add	sp, #116	; 0x74
 801a330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a334:	b002      	add	sp, #8
 801a336:	4770      	bx	lr
 801a338:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a33c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a340:	bf14      	ite	ne
 801a342:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a346:	4623      	moveq	r3, r4
 801a348:	9304      	str	r3, [sp, #16]
 801a34a:	9307      	str	r3, [sp, #28]
 801a34c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a350:	9002      	str	r0, [sp, #8]
 801a352:	9006      	str	r0, [sp, #24]
 801a354:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a358:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a35a:	ab21      	add	r3, sp, #132	; 0x84
 801a35c:	a902      	add	r1, sp, #8
 801a35e:	4628      	mov	r0, r5
 801a360:	9301      	str	r3, [sp, #4]
 801a362:	f000 f869 	bl	801a438 <_svfiprintf_r>
 801a366:	1c43      	adds	r3, r0, #1
 801a368:	bfbc      	itt	lt
 801a36a:	238b      	movlt	r3, #139	; 0x8b
 801a36c:	602b      	strlt	r3, [r5, #0]
 801a36e:	2c00      	cmp	r4, #0
 801a370:	d0dd      	beq.n	801a32e <sniprintf+0x16>
 801a372:	9b02      	ldr	r3, [sp, #8]
 801a374:	2200      	movs	r2, #0
 801a376:	701a      	strb	r2, [r3, #0]
 801a378:	e7d9      	b.n	801a32e <sniprintf+0x16>
 801a37a:	bf00      	nop
 801a37c:	20000190 	.word	0x20000190

0801a380 <__ssputs_r>:
 801a380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a384:	688e      	ldr	r6, [r1, #8]
 801a386:	429e      	cmp	r6, r3
 801a388:	4682      	mov	sl, r0
 801a38a:	460c      	mov	r4, r1
 801a38c:	4690      	mov	r8, r2
 801a38e:	461f      	mov	r7, r3
 801a390:	d838      	bhi.n	801a404 <__ssputs_r+0x84>
 801a392:	898a      	ldrh	r2, [r1, #12]
 801a394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a398:	d032      	beq.n	801a400 <__ssputs_r+0x80>
 801a39a:	6825      	ldr	r5, [r4, #0]
 801a39c:	6909      	ldr	r1, [r1, #16]
 801a39e:	eba5 0901 	sub.w	r9, r5, r1
 801a3a2:	6965      	ldr	r5, [r4, #20]
 801a3a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a3a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a3ac:	3301      	adds	r3, #1
 801a3ae:	444b      	add	r3, r9
 801a3b0:	106d      	asrs	r5, r5, #1
 801a3b2:	429d      	cmp	r5, r3
 801a3b4:	bf38      	it	cc
 801a3b6:	461d      	movcc	r5, r3
 801a3b8:	0553      	lsls	r3, r2, #21
 801a3ba:	d531      	bpl.n	801a420 <__ssputs_r+0xa0>
 801a3bc:	4629      	mov	r1, r5
 801a3be:	f000 fb39 	bl	801aa34 <_malloc_r>
 801a3c2:	4606      	mov	r6, r0
 801a3c4:	b950      	cbnz	r0, 801a3dc <__ssputs_r+0x5c>
 801a3c6:	230c      	movs	r3, #12
 801a3c8:	f8ca 3000 	str.w	r3, [sl]
 801a3cc:	89a3      	ldrh	r3, [r4, #12]
 801a3ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3d2:	81a3      	strh	r3, [r4, #12]
 801a3d4:	f04f 30ff 	mov.w	r0, #4294967295
 801a3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3dc:	6921      	ldr	r1, [r4, #16]
 801a3de:	464a      	mov	r2, r9
 801a3e0:	f7ff ff84 	bl	801a2ec <memcpy>
 801a3e4:	89a3      	ldrh	r3, [r4, #12]
 801a3e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a3ee:	81a3      	strh	r3, [r4, #12]
 801a3f0:	6126      	str	r6, [r4, #16]
 801a3f2:	6165      	str	r5, [r4, #20]
 801a3f4:	444e      	add	r6, r9
 801a3f6:	eba5 0509 	sub.w	r5, r5, r9
 801a3fa:	6026      	str	r6, [r4, #0]
 801a3fc:	60a5      	str	r5, [r4, #8]
 801a3fe:	463e      	mov	r6, r7
 801a400:	42be      	cmp	r6, r7
 801a402:	d900      	bls.n	801a406 <__ssputs_r+0x86>
 801a404:	463e      	mov	r6, r7
 801a406:	4632      	mov	r2, r6
 801a408:	6820      	ldr	r0, [r4, #0]
 801a40a:	4641      	mov	r1, r8
 801a40c:	f000 faa8 	bl	801a960 <memmove>
 801a410:	68a3      	ldr	r3, [r4, #8]
 801a412:	6822      	ldr	r2, [r4, #0]
 801a414:	1b9b      	subs	r3, r3, r6
 801a416:	4432      	add	r2, r6
 801a418:	60a3      	str	r3, [r4, #8]
 801a41a:	6022      	str	r2, [r4, #0]
 801a41c:	2000      	movs	r0, #0
 801a41e:	e7db      	b.n	801a3d8 <__ssputs_r+0x58>
 801a420:	462a      	mov	r2, r5
 801a422:	f000 fb61 	bl	801aae8 <_realloc_r>
 801a426:	4606      	mov	r6, r0
 801a428:	2800      	cmp	r0, #0
 801a42a:	d1e1      	bne.n	801a3f0 <__ssputs_r+0x70>
 801a42c:	6921      	ldr	r1, [r4, #16]
 801a42e:	4650      	mov	r0, sl
 801a430:	f000 fab0 	bl	801a994 <_free_r>
 801a434:	e7c7      	b.n	801a3c6 <__ssputs_r+0x46>
	...

0801a438 <_svfiprintf_r>:
 801a438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a43c:	4698      	mov	r8, r3
 801a43e:	898b      	ldrh	r3, [r1, #12]
 801a440:	061b      	lsls	r3, r3, #24
 801a442:	b09d      	sub	sp, #116	; 0x74
 801a444:	4607      	mov	r7, r0
 801a446:	460d      	mov	r5, r1
 801a448:	4614      	mov	r4, r2
 801a44a:	d50e      	bpl.n	801a46a <_svfiprintf_r+0x32>
 801a44c:	690b      	ldr	r3, [r1, #16]
 801a44e:	b963      	cbnz	r3, 801a46a <_svfiprintf_r+0x32>
 801a450:	2140      	movs	r1, #64	; 0x40
 801a452:	f000 faef 	bl	801aa34 <_malloc_r>
 801a456:	6028      	str	r0, [r5, #0]
 801a458:	6128      	str	r0, [r5, #16]
 801a45a:	b920      	cbnz	r0, 801a466 <_svfiprintf_r+0x2e>
 801a45c:	230c      	movs	r3, #12
 801a45e:	603b      	str	r3, [r7, #0]
 801a460:	f04f 30ff 	mov.w	r0, #4294967295
 801a464:	e0d1      	b.n	801a60a <_svfiprintf_r+0x1d2>
 801a466:	2340      	movs	r3, #64	; 0x40
 801a468:	616b      	str	r3, [r5, #20]
 801a46a:	2300      	movs	r3, #0
 801a46c:	9309      	str	r3, [sp, #36]	; 0x24
 801a46e:	2320      	movs	r3, #32
 801a470:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a474:	f8cd 800c 	str.w	r8, [sp, #12]
 801a478:	2330      	movs	r3, #48	; 0x30
 801a47a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a624 <_svfiprintf_r+0x1ec>
 801a47e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a482:	f04f 0901 	mov.w	r9, #1
 801a486:	4623      	mov	r3, r4
 801a488:	469a      	mov	sl, r3
 801a48a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a48e:	b10a      	cbz	r2, 801a494 <_svfiprintf_r+0x5c>
 801a490:	2a25      	cmp	r2, #37	; 0x25
 801a492:	d1f9      	bne.n	801a488 <_svfiprintf_r+0x50>
 801a494:	ebba 0b04 	subs.w	fp, sl, r4
 801a498:	d00b      	beq.n	801a4b2 <_svfiprintf_r+0x7a>
 801a49a:	465b      	mov	r3, fp
 801a49c:	4622      	mov	r2, r4
 801a49e:	4629      	mov	r1, r5
 801a4a0:	4638      	mov	r0, r7
 801a4a2:	f7ff ff6d 	bl	801a380 <__ssputs_r>
 801a4a6:	3001      	adds	r0, #1
 801a4a8:	f000 80aa 	beq.w	801a600 <_svfiprintf_r+0x1c8>
 801a4ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a4ae:	445a      	add	r2, fp
 801a4b0:	9209      	str	r2, [sp, #36]	; 0x24
 801a4b2:	f89a 3000 	ldrb.w	r3, [sl]
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	f000 80a2 	beq.w	801a600 <_svfiprintf_r+0x1c8>
 801a4bc:	2300      	movs	r3, #0
 801a4be:	f04f 32ff 	mov.w	r2, #4294967295
 801a4c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a4c6:	f10a 0a01 	add.w	sl, sl, #1
 801a4ca:	9304      	str	r3, [sp, #16]
 801a4cc:	9307      	str	r3, [sp, #28]
 801a4ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a4d2:	931a      	str	r3, [sp, #104]	; 0x68
 801a4d4:	4654      	mov	r4, sl
 801a4d6:	2205      	movs	r2, #5
 801a4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4dc:	4851      	ldr	r0, [pc, #324]	; (801a624 <_svfiprintf_r+0x1ec>)
 801a4de:	f7e5 fe77 	bl	80001d0 <memchr>
 801a4e2:	9a04      	ldr	r2, [sp, #16]
 801a4e4:	b9d8      	cbnz	r0, 801a51e <_svfiprintf_r+0xe6>
 801a4e6:	06d0      	lsls	r0, r2, #27
 801a4e8:	bf44      	itt	mi
 801a4ea:	2320      	movmi	r3, #32
 801a4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a4f0:	0711      	lsls	r1, r2, #28
 801a4f2:	bf44      	itt	mi
 801a4f4:	232b      	movmi	r3, #43	; 0x2b
 801a4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a4fa:	f89a 3000 	ldrb.w	r3, [sl]
 801a4fe:	2b2a      	cmp	r3, #42	; 0x2a
 801a500:	d015      	beq.n	801a52e <_svfiprintf_r+0xf6>
 801a502:	9a07      	ldr	r2, [sp, #28]
 801a504:	4654      	mov	r4, sl
 801a506:	2000      	movs	r0, #0
 801a508:	f04f 0c0a 	mov.w	ip, #10
 801a50c:	4621      	mov	r1, r4
 801a50e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a512:	3b30      	subs	r3, #48	; 0x30
 801a514:	2b09      	cmp	r3, #9
 801a516:	d94e      	bls.n	801a5b6 <_svfiprintf_r+0x17e>
 801a518:	b1b0      	cbz	r0, 801a548 <_svfiprintf_r+0x110>
 801a51a:	9207      	str	r2, [sp, #28]
 801a51c:	e014      	b.n	801a548 <_svfiprintf_r+0x110>
 801a51e:	eba0 0308 	sub.w	r3, r0, r8
 801a522:	fa09 f303 	lsl.w	r3, r9, r3
 801a526:	4313      	orrs	r3, r2
 801a528:	9304      	str	r3, [sp, #16]
 801a52a:	46a2      	mov	sl, r4
 801a52c:	e7d2      	b.n	801a4d4 <_svfiprintf_r+0x9c>
 801a52e:	9b03      	ldr	r3, [sp, #12]
 801a530:	1d19      	adds	r1, r3, #4
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	9103      	str	r1, [sp, #12]
 801a536:	2b00      	cmp	r3, #0
 801a538:	bfbb      	ittet	lt
 801a53a:	425b      	neglt	r3, r3
 801a53c:	f042 0202 	orrlt.w	r2, r2, #2
 801a540:	9307      	strge	r3, [sp, #28]
 801a542:	9307      	strlt	r3, [sp, #28]
 801a544:	bfb8      	it	lt
 801a546:	9204      	strlt	r2, [sp, #16]
 801a548:	7823      	ldrb	r3, [r4, #0]
 801a54a:	2b2e      	cmp	r3, #46	; 0x2e
 801a54c:	d10c      	bne.n	801a568 <_svfiprintf_r+0x130>
 801a54e:	7863      	ldrb	r3, [r4, #1]
 801a550:	2b2a      	cmp	r3, #42	; 0x2a
 801a552:	d135      	bne.n	801a5c0 <_svfiprintf_r+0x188>
 801a554:	9b03      	ldr	r3, [sp, #12]
 801a556:	1d1a      	adds	r2, r3, #4
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	9203      	str	r2, [sp, #12]
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	bfb8      	it	lt
 801a560:	f04f 33ff 	movlt.w	r3, #4294967295
 801a564:	3402      	adds	r4, #2
 801a566:	9305      	str	r3, [sp, #20]
 801a568:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a634 <_svfiprintf_r+0x1fc>
 801a56c:	7821      	ldrb	r1, [r4, #0]
 801a56e:	2203      	movs	r2, #3
 801a570:	4650      	mov	r0, sl
 801a572:	f7e5 fe2d 	bl	80001d0 <memchr>
 801a576:	b140      	cbz	r0, 801a58a <_svfiprintf_r+0x152>
 801a578:	2340      	movs	r3, #64	; 0x40
 801a57a:	eba0 000a 	sub.w	r0, r0, sl
 801a57e:	fa03 f000 	lsl.w	r0, r3, r0
 801a582:	9b04      	ldr	r3, [sp, #16]
 801a584:	4303      	orrs	r3, r0
 801a586:	3401      	adds	r4, #1
 801a588:	9304      	str	r3, [sp, #16]
 801a58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a58e:	4826      	ldr	r0, [pc, #152]	; (801a628 <_svfiprintf_r+0x1f0>)
 801a590:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a594:	2206      	movs	r2, #6
 801a596:	f7e5 fe1b 	bl	80001d0 <memchr>
 801a59a:	2800      	cmp	r0, #0
 801a59c:	d038      	beq.n	801a610 <_svfiprintf_r+0x1d8>
 801a59e:	4b23      	ldr	r3, [pc, #140]	; (801a62c <_svfiprintf_r+0x1f4>)
 801a5a0:	bb1b      	cbnz	r3, 801a5ea <_svfiprintf_r+0x1b2>
 801a5a2:	9b03      	ldr	r3, [sp, #12]
 801a5a4:	3307      	adds	r3, #7
 801a5a6:	f023 0307 	bic.w	r3, r3, #7
 801a5aa:	3308      	adds	r3, #8
 801a5ac:	9303      	str	r3, [sp, #12]
 801a5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5b0:	4433      	add	r3, r6
 801a5b2:	9309      	str	r3, [sp, #36]	; 0x24
 801a5b4:	e767      	b.n	801a486 <_svfiprintf_r+0x4e>
 801a5b6:	fb0c 3202 	mla	r2, ip, r2, r3
 801a5ba:	460c      	mov	r4, r1
 801a5bc:	2001      	movs	r0, #1
 801a5be:	e7a5      	b.n	801a50c <_svfiprintf_r+0xd4>
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	3401      	adds	r4, #1
 801a5c4:	9305      	str	r3, [sp, #20]
 801a5c6:	4619      	mov	r1, r3
 801a5c8:	f04f 0c0a 	mov.w	ip, #10
 801a5cc:	4620      	mov	r0, r4
 801a5ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a5d2:	3a30      	subs	r2, #48	; 0x30
 801a5d4:	2a09      	cmp	r2, #9
 801a5d6:	d903      	bls.n	801a5e0 <_svfiprintf_r+0x1a8>
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d0c5      	beq.n	801a568 <_svfiprintf_r+0x130>
 801a5dc:	9105      	str	r1, [sp, #20]
 801a5de:	e7c3      	b.n	801a568 <_svfiprintf_r+0x130>
 801a5e0:	fb0c 2101 	mla	r1, ip, r1, r2
 801a5e4:	4604      	mov	r4, r0
 801a5e6:	2301      	movs	r3, #1
 801a5e8:	e7f0      	b.n	801a5cc <_svfiprintf_r+0x194>
 801a5ea:	ab03      	add	r3, sp, #12
 801a5ec:	9300      	str	r3, [sp, #0]
 801a5ee:	462a      	mov	r2, r5
 801a5f0:	4b0f      	ldr	r3, [pc, #60]	; (801a630 <_svfiprintf_r+0x1f8>)
 801a5f2:	a904      	add	r1, sp, #16
 801a5f4:	4638      	mov	r0, r7
 801a5f6:	f3af 8000 	nop.w
 801a5fa:	1c42      	adds	r2, r0, #1
 801a5fc:	4606      	mov	r6, r0
 801a5fe:	d1d6      	bne.n	801a5ae <_svfiprintf_r+0x176>
 801a600:	89ab      	ldrh	r3, [r5, #12]
 801a602:	065b      	lsls	r3, r3, #25
 801a604:	f53f af2c 	bmi.w	801a460 <_svfiprintf_r+0x28>
 801a608:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a60a:	b01d      	add	sp, #116	; 0x74
 801a60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a610:	ab03      	add	r3, sp, #12
 801a612:	9300      	str	r3, [sp, #0]
 801a614:	462a      	mov	r2, r5
 801a616:	4b06      	ldr	r3, [pc, #24]	; (801a630 <_svfiprintf_r+0x1f8>)
 801a618:	a904      	add	r1, sp, #16
 801a61a:	4638      	mov	r0, r7
 801a61c:	f000 f87a 	bl	801a714 <_printf_i>
 801a620:	e7eb      	b.n	801a5fa <_svfiprintf_r+0x1c2>
 801a622:	bf00      	nop
 801a624:	0801b0e0 	.word	0x0801b0e0
 801a628:	0801b0ea 	.word	0x0801b0ea
 801a62c:	00000000 	.word	0x00000000
 801a630:	0801a381 	.word	0x0801a381
 801a634:	0801b0e6 	.word	0x0801b0e6

0801a638 <_printf_common>:
 801a638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a63c:	4616      	mov	r6, r2
 801a63e:	4699      	mov	r9, r3
 801a640:	688a      	ldr	r2, [r1, #8]
 801a642:	690b      	ldr	r3, [r1, #16]
 801a644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a648:	4293      	cmp	r3, r2
 801a64a:	bfb8      	it	lt
 801a64c:	4613      	movlt	r3, r2
 801a64e:	6033      	str	r3, [r6, #0]
 801a650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a654:	4607      	mov	r7, r0
 801a656:	460c      	mov	r4, r1
 801a658:	b10a      	cbz	r2, 801a65e <_printf_common+0x26>
 801a65a:	3301      	adds	r3, #1
 801a65c:	6033      	str	r3, [r6, #0]
 801a65e:	6823      	ldr	r3, [r4, #0]
 801a660:	0699      	lsls	r1, r3, #26
 801a662:	bf42      	ittt	mi
 801a664:	6833      	ldrmi	r3, [r6, #0]
 801a666:	3302      	addmi	r3, #2
 801a668:	6033      	strmi	r3, [r6, #0]
 801a66a:	6825      	ldr	r5, [r4, #0]
 801a66c:	f015 0506 	ands.w	r5, r5, #6
 801a670:	d106      	bne.n	801a680 <_printf_common+0x48>
 801a672:	f104 0a19 	add.w	sl, r4, #25
 801a676:	68e3      	ldr	r3, [r4, #12]
 801a678:	6832      	ldr	r2, [r6, #0]
 801a67a:	1a9b      	subs	r3, r3, r2
 801a67c:	42ab      	cmp	r3, r5
 801a67e:	dc26      	bgt.n	801a6ce <_printf_common+0x96>
 801a680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a684:	1e13      	subs	r3, r2, #0
 801a686:	6822      	ldr	r2, [r4, #0]
 801a688:	bf18      	it	ne
 801a68a:	2301      	movne	r3, #1
 801a68c:	0692      	lsls	r2, r2, #26
 801a68e:	d42b      	bmi.n	801a6e8 <_printf_common+0xb0>
 801a690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a694:	4649      	mov	r1, r9
 801a696:	4638      	mov	r0, r7
 801a698:	47c0      	blx	r8
 801a69a:	3001      	adds	r0, #1
 801a69c:	d01e      	beq.n	801a6dc <_printf_common+0xa4>
 801a69e:	6823      	ldr	r3, [r4, #0]
 801a6a0:	68e5      	ldr	r5, [r4, #12]
 801a6a2:	6832      	ldr	r2, [r6, #0]
 801a6a4:	f003 0306 	and.w	r3, r3, #6
 801a6a8:	2b04      	cmp	r3, #4
 801a6aa:	bf08      	it	eq
 801a6ac:	1aad      	subeq	r5, r5, r2
 801a6ae:	68a3      	ldr	r3, [r4, #8]
 801a6b0:	6922      	ldr	r2, [r4, #16]
 801a6b2:	bf0c      	ite	eq
 801a6b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a6b8:	2500      	movne	r5, #0
 801a6ba:	4293      	cmp	r3, r2
 801a6bc:	bfc4      	itt	gt
 801a6be:	1a9b      	subgt	r3, r3, r2
 801a6c0:	18ed      	addgt	r5, r5, r3
 801a6c2:	2600      	movs	r6, #0
 801a6c4:	341a      	adds	r4, #26
 801a6c6:	42b5      	cmp	r5, r6
 801a6c8:	d11a      	bne.n	801a700 <_printf_common+0xc8>
 801a6ca:	2000      	movs	r0, #0
 801a6cc:	e008      	b.n	801a6e0 <_printf_common+0xa8>
 801a6ce:	2301      	movs	r3, #1
 801a6d0:	4652      	mov	r2, sl
 801a6d2:	4649      	mov	r1, r9
 801a6d4:	4638      	mov	r0, r7
 801a6d6:	47c0      	blx	r8
 801a6d8:	3001      	adds	r0, #1
 801a6da:	d103      	bne.n	801a6e4 <_printf_common+0xac>
 801a6dc:	f04f 30ff 	mov.w	r0, #4294967295
 801a6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6e4:	3501      	adds	r5, #1
 801a6e6:	e7c6      	b.n	801a676 <_printf_common+0x3e>
 801a6e8:	18e1      	adds	r1, r4, r3
 801a6ea:	1c5a      	adds	r2, r3, #1
 801a6ec:	2030      	movs	r0, #48	; 0x30
 801a6ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a6f2:	4422      	add	r2, r4
 801a6f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a6f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a6fc:	3302      	adds	r3, #2
 801a6fe:	e7c7      	b.n	801a690 <_printf_common+0x58>
 801a700:	2301      	movs	r3, #1
 801a702:	4622      	mov	r2, r4
 801a704:	4649      	mov	r1, r9
 801a706:	4638      	mov	r0, r7
 801a708:	47c0      	blx	r8
 801a70a:	3001      	adds	r0, #1
 801a70c:	d0e6      	beq.n	801a6dc <_printf_common+0xa4>
 801a70e:	3601      	adds	r6, #1
 801a710:	e7d9      	b.n	801a6c6 <_printf_common+0x8e>
	...

0801a714 <_printf_i>:
 801a714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a718:	460c      	mov	r4, r1
 801a71a:	4691      	mov	r9, r2
 801a71c:	7e27      	ldrb	r7, [r4, #24]
 801a71e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a720:	2f78      	cmp	r7, #120	; 0x78
 801a722:	4680      	mov	r8, r0
 801a724:	469a      	mov	sl, r3
 801a726:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a72a:	d807      	bhi.n	801a73c <_printf_i+0x28>
 801a72c:	2f62      	cmp	r7, #98	; 0x62
 801a72e:	d80a      	bhi.n	801a746 <_printf_i+0x32>
 801a730:	2f00      	cmp	r7, #0
 801a732:	f000 80d8 	beq.w	801a8e6 <_printf_i+0x1d2>
 801a736:	2f58      	cmp	r7, #88	; 0x58
 801a738:	f000 80a3 	beq.w	801a882 <_printf_i+0x16e>
 801a73c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a744:	e03a      	b.n	801a7bc <_printf_i+0xa8>
 801a746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a74a:	2b15      	cmp	r3, #21
 801a74c:	d8f6      	bhi.n	801a73c <_printf_i+0x28>
 801a74e:	a001      	add	r0, pc, #4	; (adr r0, 801a754 <_printf_i+0x40>)
 801a750:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a754:	0801a7ad 	.word	0x0801a7ad
 801a758:	0801a7c1 	.word	0x0801a7c1
 801a75c:	0801a73d 	.word	0x0801a73d
 801a760:	0801a73d 	.word	0x0801a73d
 801a764:	0801a73d 	.word	0x0801a73d
 801a768:	0801a73d 	.word	0x0801a73d
 801a76c:	0801a7c1 	.word	0x0801a7c1
 801a770:	0801a73d 	.word	0x0801a73d
 801a774:	0801a73d 	.word	0x0801a73d
 801a778:	0801a73d 	.word	0x0801a73d
 801a77c:	0801a73d 	.word	0x0801a73d
 801a780:	0801a8cd 	.word	0x0801a8cd
 801a784:	0801a7f1 	.word	0x0801a7f1
 801a788:	0801a8af 	.word	0x0801a8af
 801a78c:	0801a73d 	.word	0x0801a73d
 801a790:	0801a73d 	.word	0x0801a73d
 801a794:	0801a8ef 	.word	0x0801a8ef
 801a798:	0801a73d 	.word	0x0801a73d
 801a79c:	0801a7f1 	.word	0x0801a7f1
 801a7a0:	0801a73d 	.word	0x0801a73d
 801a7a4:	0801a73d 	.word	0x0801a73d
 801a7a8:	0801a8b7 	.word	0x0801a8b7
 801a7ac:	680b      	ldr	r3, [r1, #0]
 801a7ae:	1d1a      	adds	r2, r3, #4
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	600a      	str	r2, [r1, #0]
 801a7b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a7b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a7bc:	2301      	movs	r3, #1
 801a7be:	e0a3      	b.n	801a908 <_printf_i+0x1f4>
 801a7c0:	6825      	ldr	r5, [r4, #0]
 801a7c2:	6808      	ldr	r0, [r1, #0]
 801a7c4:	062e      	lsls	r6, r5, #24
 801a7c6:	f100 0304 	add.w	r3, r0, #4
 801a7ca:	d50a      	bpl.n	801a7e2 <_printf_i+0xce>
 801a7cc:	6805      	ldr	r5, [r0, #0]
 801a7ce:	600b      	str	r3, [r1, #0]
 801a7d0:	2d00      	cmp	r5, #0
 801a7d2:	da03      	bge.n	801a7dc <_printf_i+0xc8>
 801a7d4:	232d      	movs	r3, #45	; 0x2d
 801a7d6:	426d      	negs	r5, r5
 801a7d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a7dc:	485e      	ldr	r0, [pc, #376]	; (801a958 <_printf_i+0x244>)
 801a7de:	230a      	movs	r3, #10
 801a7e0:	e019      	b.n	801a816 <_printf_i+0x102>
 801a7e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a7e6:	6805      	ldr	r5, [r0, #0]
 801a7e8:	600b      	str	r3, [r1, #0]
 801a7ea:	bf18      	it	ne
 801a7ec:	b22d      	sxthne	r5, r5
 801a7ee:	e7ef      	b.n	801a7d0 <_printf_i+0xbc>
 801a7f0:	680b      	ldr	r3, [r1, #0]
 801a7f2:	6825      	ldr	r5, [r4, #0]
 801a7f4:	1d18      	adds	r0, r3, #4
 801a7f6:	6008      	str	r0, [r1, #0]
 801a7f8:	0628      	lsls	r0, r5, #24
 801a7fa:	d501      	bpl.n	801a800 <_printf_i+0xec>
 801a7fc:	681d      	ldr	r5, [r3, #0]
 801a7fe:	e002      	b.n	801a806 <_printf_i+0xf2>
 801a800:	0669      	lsls	r1, r5, #25
 801a802:	d5fb      	bpl.n	801a7fc <_printf_i+0xe8>
 801a804:	881d      	ldrh	r5, [r3, #0]
 801a806:	4854      	ldr	r0, [pc, #336]	; (801a958 <_printf_i+0x244>)
 801a808:	2f6f      	cmp	r7, #111	; 0x6f
 801a80a:	bf0c      	ite	eq
 801a80c:	2308      	moveq	r3, #8
 801a80e:	230a      	movne	r3, #10
 801a810:	2100      	movs	r1, #0
 801a812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a816:	6866      	ldr	r6, [r4, #4]
 801a818:	60a6      	str	r6, [r4, #8]
 801a81a:	2e00      	cmp	r6, #0
 801a81c:	bfa2      	ittt	ge
 801a81e:	6821      	ldrge	r1, [r4, #0]
 801a820:	f021 0104 	bicge.w	r1, r1, #4
 801a824:	6021      	strge	r1, [r4, #0]
 801a826:	b90d      	cbnz	r5, 801a82c <_printf_i+0x118>
 801a828:	2e00      	cmp	r6, #0
 801a82a:	d04d      	beq.n	801a8c8 <_printf_i+0x1b4>
 801a82c:	4616      	mov	r6, r2
 801a82e:	fbb5 f1f3 	udiv	r1, r5, r3
 801a832:	fb03 5711 	mls	r7, r3, r1, r5
 801a836:	5dc7      	ldrb	r7, [r0, r7]
 801a838:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a83c:	462f      	mov	r7, r5
 801a83e:	42bb      	cmp	r3, r7
 801a840:	460d      	mov	r5, r1
 801a842:	d9f4      	bls.n	801a82e <_printf_i+0x11a>
 801a844:	2b08      	cmp	r3, #8
 801a846:	d10b      	bne.n	801a860 <_printf_i+0x14c>
 801a848:	6823      	ldr	r3, [r4, #0]
 801a84a:	07df      	lsls	r7, r3, #31
 801a84c:	d508      	bpl.n	801a860 <_printf_i+0x14c>
 801a84e:	6923      	ldr	r3, [r4, #16]
 801a850:	6861      	ldr	r1, [r4, #4]
 801a852:	4299      	cmp	r1, r3
 801a854:	bfde      	ittt	le
 801a856:	2330      	movle	r3, #48	; 0x30
 801a858:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a85c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a860:	1b92      	subs	r2, r2, r6
 801a862:	6122      	str	r2, [r4, #16]
 801a864:	f8cd a000 	str.w	sl, [sp]
 801a868:	464b      	mov	r3, r9
 801a86a:	aa03      	add	r2, sp, #12
 801a86c:	4621      	mov	r1, r4
 801a86e:	4640      	mov	r0, r8
 801a870:	f7ff fee2 	bl	801a638 <_printf_common>
 801a874:	3001      	adds	r0, #1
 801a876:	d14c      	bne.n	801a912 <_printf_i+0x1fe>
 801a878:	f04f 30ff 	mov.w	r0, #4294967295
 801a87c:	b004      	add	sp, #16
 801a87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a882:	4835      	ldr	r0, [pc, #212]	; (801a958 <_printf_i+0x244>)
 801a884:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a888:	6823      	ldr	r3, [r4, #0]
 801a88a:	680e      	ldr	r6, [r1, #0]
 801a88c:	061f      	lsls	r7, r3, #24
 801a88e:	f856 5b04 	ldr.w	r5, [r6], #4
 801a892:	600e      	str	r6, [r1, #0]
 801a894:	d514      	bpl.n	801a8c0 <_printf_i+0x1ac>
 801a896:	07d9      	lsls	r1, r3, #31
 801a898:	bf44      	itt	mi
 801a89a:	f043 0320 	orrmi.w	r3, r3, #32
 801a89e:	6023      	strmi	r3, [r4, #0]
 801a8a0:	b91d      	cbnz	r5, 801a8aa <_printf_i+0x196>
 801a8a2:	6823      	ldr	r3, [r4, #0]
 801a8a4:	f023 0320 	bic.w	r3, r3, #32
 801a8a8:	6023      	str	r3, [r4, #0]
 801a8aa:	2310      	movs	r3, #16
 801a8ac:	e7b0      	b.n	801a810 <_printf_i+0xfc>
 801a8ae:	6823      	ldr	r3, [r4, #0]
 801a8b0:	f043 0320 	orr.w	r3, r3, #32
 801a8b4:	6023      	str	r3, [r4, #0]
 801a8b6:	2378      	movs	r3, #120	; 0x78
 801a8b8:	4828      	ldr	r0, [pc, #160]	; (801a95c <_printf_i+0x248>)
 801a8ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a8be:	e7e3      	b.n	801a888 <_printf_i+0x174>
 801a8c0:	065e      	lsls	r6, r3, #25
 801a8c2:	bf48      	it	mi
 801a8c4:	b2ad      	uxthmi	r5, r5
 801a8c6:	e7e6      	b.n	801a896 <_printf_i+0x182>
 801a8c8:	4616      	mov	r6, r2
 801a8ca:	e7bb      	b.n	801a844 <_printf_i+0x130>
 801a8cc:	680b      	ldr	r3, [r1, #0]
 801a8ce:	6826      	ldr	r6, [r4, #0]
 801a8d0:	6960      	ldr	r0, [r4, #20]
 801a8d2:	1d1d      	adds	r5, r3, #4
 801a8d4:	600d      	str	r5, [r1, #0]
 801a8d6:	0635      	lsls	r5, r6, #24
 801a8d8:	681b      	ldr	r3, [r3, #0]
 801a8da:	d501      	bpl.n	801a8e0 <_printf_i+0x1cc>
 801a8dc:	6018      	str	r0, [r3, #0]
 801a8de:	e002      	b.n	801a8e6 <_printf_i+0x1d2>
 801a8e0:	0671      	lsls	r1, r6, #25
 801a8e2:	d5fb      	bpl.n	801a8dc <_printf_i+0x1c8>
 801a8e4:	8018      	strh	r0, [r3, #0]
 801a8e6:	2300      	movs	r3, #0
 801a8e8:	6123      	str	r3, [r4, #16]
 801a8ea:	4616      	mov	r6, r2
 801a8ec:	e7ba      	b.n	801a864 <_printf_i+0x150>
 801a8ee:	680b      	ldr	r3, [r1, #0]
 801a8f0:	1d1a      	adds	r2, r3, #4
 801a8f2:	600a      	str	r2, [r1, #0]
 801a8f4:	681e      	ldr	r6, [r3, #0]
 801a8f6:	6862      	ldr	r2, [r4, #4]
 801a8f8:	2100      	movs	r1, #0
 801a8fa:	4630      	mov	r0, r6
 801a8fc:	f7e5 fc68 	bl	80001d0 <memchr>
 801a900:	b108      	cbz	r0, 801a906 <_printf_i+0x1f2>
 801a902:	1b80      	subs	r0, r0, r6
 801a904:	6060      	str	r0, [r4, #4]
 801a906:	6863      	ldr	r3, [r4, #4]
 801a908:	6123      	str	r3, [r4, #16]
 801a90a:	2300      	movs	r3, #0
 801a90c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a910:	e7a8      	b.n	801a864 <_printf_i+0x150>
 801a912:	6923      	ldr	r3, [r4, #16]
 801a914:	4632      	mov	r2, r6
 801a916:	4649      	mov	r1, r9
 801a918:	4640      	mov	r0, r8
 801a91a:	47d0      	blx	sl
 801a91c:	3001      	adds	r0, #1
 801a91e:	d0ab      	beq.n	801a878 <_printf_i+0x164>
 801a920:	6823      	ldr	r3, [r4, #0]
 801a922:	079b      	lsls	r3, r3, #30
 801a924:	d413      	bmi.n	801a94e <_printf_i+0x23a>
 801a926:	68e0      	ldr	r0, [r4, #12]
 801a928:	9b03      	ldr	r3, [sp, #12]
 801a92a:	4298      	cmp	r0, r3
 801a92c:	bfb8      	it	lt
 801a92e:	4618      	movlt	r0, r3
 801a930:	e7a4      	b.n	801a87c <_printf_i+0x168>
 801a932:	2301      	movs	r3, #1
 801a934:	4632      	mov	r2, r6
 801a936:	4649      	mov	r1, r9
 801a938:	4640      	mov	r0, r8
 801a93a:	47d0      	blx	sl
 801a93c:	3001      	adds	r0, #1
 801a93e:	d09b      	beq.n	801a878 <_printf_i+0x164>
 801a940:	3501      	adds	r5, #1
 801a942:	68e3      	ldr	r3, [r4, #12]
 801a944:	9903      	ldr	r1, [sp, #12]
 801a946:	1a5b      	subs	r3, r3, r1
 801a948:	42ab      	cmp	r3, r5
 801a94a:	dcf2      	bgt.n	801a932 <_printf_i+0x21e>
 801a94c:	e7eb      	b.n	801a926 <_printf_i+0x212>
 801a94e:	2500      	movs	r5, #0
 801a950:	f104 0619 	add.w	r6, r4, #25
 801a954:	e7f5      	b.n	801a942 <_printf_i+0x22e>
 801a956:	bf00      	nop
 801a958:	0801b0f1 	.word	0x0801b0f1
 801a95c:	0801b102 	.word	0x0801b102

0801a960 <memmove>:
 801a960:	4288      	cmp	r0, r1
 801a962:	b510      	push	{r4, lr}
 801a964:	eb01 0402 	add.w	r4, r1, r2
 801a968:	d902      	bls.n	801a970 <memmove+0x10>
 801a96a:	4284      	cmp	r4, r0
 801a96c:	4623      	mov	r3, r4
 801a96e:	d807      	bhi.n	801a980 <memmove+0x20>
 801a970:	1e43      	subs	r3, r0, #1
 801a972:	42a1      	cmp	r1, r4
 801a974:	d008      	beq.n	801a988 <memmove+0x28>
 801a976:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a97a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a97e:	e7f8      	b.n	801a972 <memmove+0x12>
 801a980:	4402      	add	r2, r0
 801a982:	4601      	mov	r1, r0
 801a984:	428a      	cmp	r2, r1
 801a986:	d100      	bne.n	801a98a <memmove+0x2a>
 801a988:	bd10      	pop	{r4, pc}
 801a98a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a98e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a992:	e7f7      	b.n	801a984 <memmove+0x24>

0801a994 <_free_r>:
 801a994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a996:	2900      	cmp	r1, #0
 801a998:	d048      	beq.n	801aa2c <_free_r+0x98>
 801a99a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a99e:	9001      	str	r0, [sp, #4]
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	f1a1 0404 	sub.w	r4, r1, #4
 801a9a6:	bfb8      	it	lt
 801a9a8:	18e4      	addlt	r4, r4, r3
 801a9aa:	f000 f8d3 	bl	801ab54 <__malloc_lock>
 801a9ae:	4a20      	ldr	r2, [pc, #128]	; (801aa30 <_free_r+0x9c>)
 801a9b0:	9801      	ldr	r0, [sp, #4]
 801a9b2:	6813      	ldr	r3, [r2, #0]
 801a9b4:	4615      	mov	r5, r2
 801a9b6:	b933      	cbnz	r3, 801a9c6 <_free_r+0x32>
 801a9b8:	6063      	str	r3, [r4, #4]
 801a9ba:	6014      	str	r4, [r2, #0]
 801a9bc:	b003      	add	sp, #12
 801a9be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a9c2:	f000 b8cd 	b.w	801ab60 <__malloc_unlock>
 801a9c6:	42a3      	cmp	r3, r4
 801a9c8:	d90b      	bls.n	801a9e2 <_free_r+0x4e>
 801a9ca:	6821      	ldr	r1, [r4, #0]
 801a9cc:	1862      	adds	r2, r4, r1
 801a9ce:	4293      	cmp	r3, r2
 801a9d0:	bf04      	itt	eq
 801a9d2:	681a      	ldreq	r2, [r3, #0]
 801a9d4:	685b      	ldreq	r3, [r3, #4]
 801a9d6:	6063      	str	r3, [r4, #4]
 801a9d8:	bf04      	itt	eq
 801a9da:	1852      	addeq	r2, r2, r1
 801a9dc:	6022      	streq	r2, [r4, #0]
 801a9de:	602c      	str	r4, [r5, #0]
 801a9e0:	e7ec      	b.n	801a9bc <_free_r+0x28>
 801a9e2:	461a      	mov	r2, r3
 801a9e4:	685b      	ldr	r3, [r3, #4]
 801a9e6:	b10b      	cbz	r3, 801a9ec <_free_r+0x58>
 801a9e8:	42a3      	cmp	r3, r4
 801a9ea:	d9fa      	bls.n	801a9e2 <_free_r+0x4e>
 801a9ec:	6811      	ldr	r1, [r2, #0]
 801a9ee:	1855      	adds	r5, r2, r1
 801a9f0:	42a5      	cmp	r5, r4
 801a9f2:	d10b      	bne.n	801aa0c <_free_r+0x78>
 801a9f4:	6824      	ldr	r4, [r4, #0]
 801a9f6:	4421      	add	r1, r4
 801a9f8:	1854      	adds	r4, r2, r1
 801a9fa:	42a3      	cmp	r3, r4
 801a9fc:	6011      	str	r1, [r2, #0]
 801a9fe:	d1dd      	bne.n	801a9bc <_free_r+0x28>
 801aa00:	681c      	ldr	r4, [r3, #0]
 801aa02:	685b      	ldr	r3, [r3, #4]
 801aa04:	6053      	str	r3, [r2, #4]
 801aa06:	4421      	add	r1, r4
 801aa08:	6011      	str	r1, [r2, #0]
 801aa0a:	e7d7      	b.n	801a9bc <_free_r+0x28>
 801aa0c:	d902      	bls.n	801aa14 <_free_r+0x80>
 801aa0e:	230c      	movs	r3, #12
 801aa10:	6003      	str	r3, [r0, #0]
 801aa12:	e7d3      	b.n	801a9bc <_free_r+0x28>
 801aa14:	6825      	ldr	r5, [r4, #0]
 801aa16:	1961      	adds	r1, r4, r5
 801aa18:	428b      	cmp	r3, r1
 801aa1a:	bf04      	itt	eq
 801aa1c:	6819      	ldreq	r1, [r3, #0]
 801aa1e:	685b      	ldreq	r3, [r3, #4]
 801aa20:	6063      	str	r3, [r4, #4]
 801aa22:	bf04      	itt	eq
 801aa24:	1949      	addeq	r1, r1, r5
 801aa26:	6021      	streq	r1, [r4, #0]
 801aa28:	6054      	str	r4, [r2, #4]
 801aa2a:	e7c7      	b.n	801a9bc <_free_r+0x28>
 801aa2c:	b003      	add	sp, #12
 801aa2e:	bd30      	pop	{r4, r5, pc}
 801aa30:	200015d8 	.word	0x200015d8

0801aa34 <_malloc_r>:
 801aa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa36:	1ccd      	adds	r5, r1, #3
 801aa38:	f025 0503 	bic.w	r5, r5, #3
 801aa3c:	3508      	adds	r5, #8
 801aa3e:	2d0c      	cmp	r5, #12
 801aa40:	bf38      	it	cc
 801aa42:	250c      	movcc	r5, #12
 801aa44:	2d00      	cmp	r5, #0
 801aa46:	4606      	mov	r6, r0
 801aa48:	db01      	blt.n	801aa4e <_malloc_r+0x1a>
 801aa4a:	42a9      	cmp	r1, r5
 801aa4c:	d903      	bls.n	801aa56 <_malloc_r+0x22>
 801aa4e:	230c      	movs	r3, #12
 801aa50:	6033      	str	r3, [r6, #0]
 801aa52:	2000      	movs	r0, #0
 801aa54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa56:	f000 f87d 	bl	801ab54 <__malloc_lock>
 801aa5a:	4921      	ldr	r1, [pc, #132]	; (801aae0 <_malloc_r+0xac>)
 801aa5c:	680a      	ldr	r2, [r1, #0]
 801aa5e:	4614      	mov	r4, r2
 801aa60:	b99c      	cbnz	r4, 801aa8a <_malloc_r+0x56>
 801aa62:	4f20      	ldr	r7, [pc, #128]	; (801aae4 <_malloc_r+0xb0>)
 801aa64:	683b      	ldr	r3, [r7, #0]
 801aa66:	b923      	cbnz	r3, 801aa72 <_malloc_r+0x3e>
 801aa68:	4621      	mov	r1, r4
 801aa6a:	4630      	mov	r0, r6
 801aa6c:	f000 f862 	bl	801ab34 <_sbrk_r>
 801aa70:	6038      	str	r0, [r7, #0]
 801aa72:	4629      	mov	r1, r5
 801aa74:	4630      	mov	r0, r6
 801aa76:	f000 f85d 	bl	801ab34 <_sbrk_r>
 801aa7a:	1c43      	adds	r3, r0, #1
 801aa7c:	d123      	bne.n	801aac6 <_malloc_r+0x92>
 801aa7e:	230c      	movs	r3, #12
 801aa80:	6033      	str	r3, [r6, #0]
 801aa82:	4630      	mov	r0, r6
 801aa84:	f000 f86c 	bl	801ab60 <__malloc_unlock>
 801aa88:	e7e3      	b.n	801aa52 <_malloc_r+0x1e>
 801aa8a:	6823      	ldr	r3, [r4, #0]
 801aa8c:	1b5b      	subs	r3, r3, r5
 801aa8e:	d417      	bmi.n	801aac0 <_malloc_r+0x8c>
 801aa90:	2b0b      	cmp	r3, #11
 801aa92:	d903      	bls.n	801aa9c <_malloc_r+0x68>
 801aa94:	6023      	str	r3, [r4, #0]
 801aa96:	441c      	add	r4, r3
 801aa98:	6025      	str	r5, [r4, #0]
 801aa9a:	e004      	b.n	801aaa6 <_malloc_r+0x72>
 801aa9c:	6863      	ldr	r3, [r4, #4]
 801aa9e:	42a2      	cmp	r2, r4
 801aaa0:	bf0c      	ite	eq
 801aaa2:	600b      	streq	r3, [r1, #0]
 801aaa4:	6053      	strne	r3, [r2, #4]
 801aaa6:	4630      	mov	r0, r6
 801aaa8:	f000 f85a 	bl	801ab60 <__malloc_unlock>
 801aaac:	f104 000b 	add.w	r0, r4, #11
 801aab0:	1d23      	adds	r3, r4, #4
 801aab2:	f020 0007 	bic.w	r0, r0, #7
 801aab6:	1ac2      	subs	r2, r0, r3
 801aab8:	d0cc      	beq.n	801aa54 <_malloc_r+0x20>
 801aaba:	1a1b      	subs	r3, r3, r0
 801aabc:	50a3      	str	r3, [r4, r2]
 801aabe:	e7c9      	b.n	801aa54 <_malloc_r+0x20>
 801aac0:	4622      	mov	r2, r4
 801aac2:	6864      	ldr	r4, [r4, #4]
 801aac4:	e7cc      	b.n	801aa60 <_malloc_r+0x2c>
 801aac6:	1cc4      	adds	r4, r0, #3
 801aac8:	f024 0403 	bic.w	r4, r4, #3
 801aacc:	42a0      	cmp	r0, r4
 801aace:	d0e3      	beq.n	801aa98 <_malloc_r+0x64>
 801aad0:	1a21      	subs	r1, r4, r0
 801aad2:	4630      	mov	r0, r6
 801aad4:	f000 f82e 	bl	801ab34 <_sbrk_r>
 801aad8:	3001      	adds	r0, #1
 801aada:	d1dd      	bne.n	801aa98 <_malloc_r+0x64>
 801aadc:	e7cf      	b.n	801aa7e <_malloc_r+0x4a>
 801aade:	bf00      	nop
 801aae0:	200015d8 	.word	0x200015d8
 801aae4:	200015dc 	.word	0x200015dc

0801aae8 <_realloc_r>:
 801aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aaea:	4607      	mov	r7, r0
 801aaec:	4614      	mov	r4, r2
 801aaee:	460e      	mov	r6, r1
 801aaf0:	b921      	cbnz	r1, 801aafc <_realloc_r+0x14>
 801aaf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801aaf6:	4611      	mov	r1, r2
 801aaf8:	f7ff bf9c 	b.w	801aa34 <_malloc_r>
 801aafc:	b922      	cbnz	r2, 801ab08 <_realloc_r+0x20>
 801aafe:	f7ff ff49 	bl	801a994 <_free_r>
 801ab02:	4625      	mov	r5, r4
 801ab04:	4628      	mov	r0, r5
 801ab06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab08:	f000 f830 	bl	801ab6c <_malloc_usable_size_r>
 801ab0c:	42a0      	cmp	r0, r4
 801ab0e:	d20f      	bcs.n	801ab30 <_realloc_r+0x48>
 801ab10:	4621      	mov	r1, r4
 801ab12:	4638      	mov	r0, r7
 801ab14:	f7ff ff8e 	bl	801aa34 <_malloc_r>
 801ab18:	4605      	mov	r5, r0
 801ab1a:	2800      	cmp	r0, #0
 801ab1c:	d0f2      	beq.n	801ab04 <_realloc_r+0x1c>
 801ab1e:	4631      	mov	r1, r6
 801ab20:	4622      	mov	r2, r4
 801ab22:	f7ff fbe3 	bl	801a2ec <memcpy>
 801ab26:	4631      	mov	r1, r6
 801ab28:	4638      	mov	r0, r7
 801ab2a:	f7ff ff33 	bl	801a994 <_free_r>
 801ab2e:	e7e9      	b.n	801ab04 <_realloc_r+0x1c>
 801ab30:	4635      	mov	r5, r6
 801ab32:	e7e7      	b.n	801ab04 <_realloc_r+0x1c>

0801ab34 <_sbrk_r>:
 801ab34:	b538      	push	{r3, r4, r5, lr}
 801ab36:	4d06      	ldr	r5, [pc, #24]	; (801ab50 <_sbrk_r+0x1c>)
 801ab38:	2300      	movs	r3, #0
 801ab3a:	4604      	mov	r4, r0
 801ab3c:	4608      	mov	r0, r1
 801ab3e:	602b      	str	r3, [r5, #0]
 801ab40:	f7e6 fdc2 	bl	80016c8 <_sbrk>
 801ab44:	1c43      	adds	r3, r0, #1
 801ab46:	d102      	bne.n	801ab4e <_sbrk_r+0x1a>
 801ab48:	682b      	ldr	r3, [r5, #0]
 801ab4a:	b103      	cbz	r3, 801ab4e <_sbrk_r+0x1a>
 801ab4c:	6023      	str	r3, [r4, #0]
 801ab4e:	bd38      	pop	{r3, r4, r5, pc}
 801ab50:	20001f9c 	.word	0x20001f9c

0801ab54 <__malloc_lock>:
 801ab54:	4801      	ldr	r0, [pc, #4]	; (801ab5c <__malloc_lock+0x8>)
 801ab56:	f000 b811 	b.w	801ab7c <__retarget_lock_acquire_recursive>
 801ab5a:	bf00      	nop
 801ab5c:	20001fa4 	.word	0x20001fa4

0801ab60 <__malloc_unlock>:
 801ab60:	4801      	ldr	r0, [pc, #4]	; (801ab68 <__malloc_unlock+0x8>)
 801ab62:	f000 b80c 	b.w	801ab7e <__retarget_lock_release_recursive>
 801ab66:	bf00      	nop
 801ab68:	20001fa4 	.word	0x20001fa4

0801ab6c <_malloc_usable_size_r>:
 801ab6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ab70:	1f18      	subs	r0, r3, #4
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	bfbc      	itt	lt
 801ab76:	580b      	ldrlt	r3, [r1, r0]
 801ab78:	18c0      	addlt	r0, r0, r3
 801ab7a:	4770      	bx	lr

0801ab7c <__retarget_lock_acquire_recursive>:
 801ab7c:	4770      	bx	lr

0801ab7e <__retarget_lock_release_recursive>:
 801ab7e:	4770      	bx	lr

0801ab80 <_init>:
 801ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab82:	bf00      	nop
 801ab84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab86:	bc08      	pop	{r3}
 801ab88:	469e      	mov	lr, r3
 801ab8a:	4770      	bx	lr

0801ab8c <_fini>:
 801ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab8e:	bf00      	nop
 801ab90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab92:	bc08      	pop	{r3}
 801ab94:	469e      	mov	lr, r3
 801ab96:	4770      	bx	lr
