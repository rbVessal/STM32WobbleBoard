
DataLogFusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aa48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0801abd8  0801abd8  0002abd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b150  0801b150  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801b150  0801b150  0002b150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b158  0801b158  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b158  0801b158  0002b158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b15c  0801b15c  0002b15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801b160  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001db0  200001f8  0801b354  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00008200  20001fa8  0801b354  00031fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002d663  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0004f97b  00000000  00000000  0005d887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000625f  00000000  00000000  000ad202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000031a8  00000000  00000000  000b3468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010d95d  00000000  00000000  000b6610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002f50  00000000  00000000  001c3f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d81a  00000000  00000000  001c6ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f46da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000df74  00000000  00000000  001f4730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801abc0 	.word	0x0801abc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0801abc0 	.word	0x0801abc0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee4:	f007 ff58 	bl	8008d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ee8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000eea:	e003      	b.n	8000ef4 <LoopCopyDataInit>

08000eec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000eee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ef0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ef2:	3104      	adds	r1, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ef4:	480a      	ldr	r0, [pc, #40]	; (8000f20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ef8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000efa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000efc:	d3f6      	bcc.n	8000eec <CopyDataInit>
	ldr	r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f00:	e002      	b.n	8000f08 <LoopFillZerobss>

08000f02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f04:	f842 3b04 	str.w	r3, [r2], #4

08000f08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <LoopForever+0x16>)
	cmp	r2, r3
 8000f0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f0c:	d3f9      	bcc.n	8000f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f017 fae3 	bl	80184d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f12:	f001 fcf0 	bl	80028f6 <main>

08000f16 <LoopForever>:

LoopForever:
    b LoopForever
 8000f16:	e7fe      	b.n	8000f16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f18:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000f1c:	0801b160 	.word	0x0801b160
	ldr	r0, =_sdata
 8000f20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f24:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8000f28:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8000f2c:	20001fa8 	.word	0x20001fa8

08000f30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_2_IRQHandler>

08000f32 <MX_MEMS_Init>:
static void DWT_Init(void);
static void DWT_Start(void);
static uint32_t DWT_Stop(void);

void MX_MEMS_Init(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DataLogFusion_Init();
 8000f36:	f000 f821 	bl	8000f7c <MX_DataLogFusion_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_DataLogFusion_Process();
 8000f42:	f000 f89d 	bl	8001080 <MX_DataLogFusion_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *              the configuration information for TIM module.
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d102      	bne.n	8000f66 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200019d0 	.word	0x200019d0
 8000f78:	20000668 	.word	0x20000668

08000f7c <MX_DataLogFusion_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_DataLogFusion_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
  float ans_float;

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000f82:	2101      	movs	r1, #1
 8000f84:	2000      	movs	r0, #0
 8000f86:	f007 fd77 	bl	8008a78 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f007 fdc8 	bl	8008b20 <BSP_PB_GetState>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	bf0c      	ite	eq
 8000f96:	2301      	moveq	r3, #1
 8000f98:	2300      	movne	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b32      	ldr	r3, [pc, #200]	; (8001068 <MX_DataLogFusion_Init+0xec>)
 8000fa0:	601a      	str	r2, [r3, #0]

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f007 fcec 	bl	8008980 <BSP_LED_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f007 fe17 	bl	8008bdc <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 8000fae:	f001 fd87 	bl	8002ac0 <MX_TIM3_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 8000fb2:	2064      	movs	r0, #100	; 0x64
 8000fb4:	f000 fcae 	bl	8001914 <TIM_Config>

  /* Initialize (disabled) sensors */
  Init_Sensors();
 8000fb8:	f000 f8fa 	bl	80011b0 <Init_Sensors>

  /* Sensor Fusion API initialization function */
  MotionFX_manager_init();
 8000fbc:	f001 fe34 	bl	8002c28 <MotionFX_manager_init>

  /* OPTIONAL */
  /* Get library version */
  MotionFX_manager_get_version(LibVersion, &LibVersionLen);
 8000fc0:	492a      	ldr	r1, [pc, #168]	; (800106c <MX_DataLogFusion_Init+0xf0>)
 8000fc2:	482b      	ldr	r0, [pc, #172]	; (8001070 <MX_DataLogFusion_Init+0xf4>)
 8000fc4:	f001 fedc 	bl	8002d80 <MotionFX_manager_get_version>

  /* Enable magnetometer calibration */
  MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8000fc8:	200a      	movs	r0, #10
 8000fca:	f001 fef8 	bl	8002dbe <MotionFX_manager_MagCal_start>

  /* Test if calibration data are available */
  MFX_MagCal_output_t mag_cal_test;
  MotionFX_MagCal_getParams(&mag_cal_test);
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f017 fa1b 	bl	801840c <MotionFX_MagCal_getParams>

  /* If calibration data are available load HI coefficients */
  if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8000fd6:	7c3b      	ldrb	r3, [r7, #16]
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d132      	bne.n	8001042 <MX_DataLogFusion_Init+0xc6>
  {
    ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8000fdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001074 <MX_DataLogFusion_Init+0xf8>
 8000fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe8:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.x = (int32_t)ans_float;
 8000fec:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff4:	ee17 2a90 	vmov	r2, s15
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_DataLogFusion_Init+0xfc>)
 8000ffa:	601a      	str	r2, [r3, #0]
    ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8000ffc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001000:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001074 <MX_DataLogFusion_Init+0xf8>
 8001004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001008:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.y = (int32_t)ans_float;
 800100c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001014:	ee17 2a90 	vmov	r2, s15
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <MX_DataLogFusion_Init+0xfc>)
 800101a:	605a      	str	r2, [r3, #4]
    ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800101c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001020:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001074 <MX_DataLogFusion_Init+0xf8>
 8001024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001028:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.z = (int32_t)ans_float;
 800102c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001034:	ee17 2a90 	vmov	r2, s15
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_DataLogFusion_Init+0xfc>)
 800103a:	609a      	str	r2, [r3, #8]

    MagCalStatus = 1;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_DataLogFusion_Init+0x100>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
  }

  DWT_Init();
 8001042:	f000 fc9b 	bl	800197c <DWT_Init>

  BSP_LED_On(LED2);
 8001046:	2000      	movs	r0, #0
 8001048:	f007 fcac 	bl	80089a4 <BSP_LED_On>
  HAL_Delay(500);
 800104c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001050:	f007 ff50 	bl	8008ef4 <HAL_Delay>
  BSP_LED_Off(LED2);
 8001054:	2000      	movs	r0, #0
 8001056:	f007 fcbb 	bl	80089d0 <BSP_LED_Off>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 800105a:	f000 fdb3 	bl	8001bc4 <UART_StartReceiveMsg>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000067c 	.word	0x2000067c
 800106c:	200017a0 	.word	0x200017a0
 8001070:	2000177c 	.word	0x2000177c
 8001074:	43fa0000 	.word	0x43fa0000
 8001078:	200006b8 	.word	0x200006b8
 800107c:	200006c4 	.word	0x200006c4

08001080 <MX_DataLogFusion_Process>:
/**
  * @brief  Process of the application
  * @retval None
  */
static void MX_DataLogFusion_Process(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  static TMsg msg_dat;
  static TMsg msg_cmd;

  if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 8001084:	4840      	ldr	r0, [pc, #256]	; (8001188 <MX_DataLogFusion_Process+0x108>)
 8001086:	f000 fccb 	bl	8001a20 <UART_ReceivedMSG>
 800108a:	4603      	mov	r3, r0
 800108c:	2b01      	cmp	r3, #1
 800108e:	d106      	bne.n	800109e <MX_DataLogFusion_Process+0x1e>
  {
    if (msg_cmd.Data[0] == DEV_ADDR)
 8001090:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <MX_DataLogFusion_Process+0x108>)
 8001092:	791b      	ldrb	r3, [r3, #4]
 8001094:	2b32      	cmp	r3, #50	; 0x32
 8001096:	d102      	bne.n	800109e <MX_DataLogFusion_Process+0x1e>
    {
      (void)HandleMSG((TMsg *)&msg_cmd);
 8001098:	483b      	ldr	r0, [pc, #236]	; (8001188 <MX_DataLogFusion_Process+0x108>)
 800109a:	f000 fedd 	bl	8001e58 <HandleMSG>
    }
  }

  if (MagCalRequest == 1U)
 800109e:	4b3b      	ldr	r3, [pc, #236]	; (800118c <MX_DataLogFusion_Process+0x10c>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d120      	bne.n	80010ea <MX_DataLogFusion_Process+0x6a>
  {
    /* Debouncing */
    HAL_Delay(50);
 80010a8:	2032      	movs	r0, #50	; 0x32
 80010aa:	f007 ff23 	bl	8008ef4 <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 80010ae:	bf00      	nop
 80010b0:	2000      	movs	r0, #0
 80010b2:	f007 fd35 	bl	8008b20 <BSP_PB_GetState>
 80010b6:	4602      	mov	r2, r0
 80010b8:	4b35      	ldr	r3, [pc, #212]	; (8001190 <MX_DataLogFusion_Process+0x110>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d0f7      	beq.n	80010b0 <MX_DataLogFusion_Process+0x30>

    /* Debouncing */
    HAL_Delay(50);
 80010c0:	2032      	movs	r0, #50	; 0x32
 80010c2:	f007 ff17 	bl	8008ef4 <HAL_Delay>

    MagCalRequest = 0;
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <MX_DataLogFusion_Process+0x10c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]

    /* Reset magnetometer calibration value*/
    MagCalStatus = 0;
 80010cc:	4b31      	ldr	r3, [pc, #196]	; (8001194 <MX_DataLogFusion_Process+0x114>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
    MagOffset.x = 0;
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <MX_DataLogFusion_Process+0x118>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
    MagOffset.y = 0;
 80010d8:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <MX_DataLogFusion_Process+0x118>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
    MagOffset.z = 0;
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <MX_DataLogFusion_Process+0x118>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]

    /* Enable magnetometer calibration */
    MotionFX_manager_MagCal_start(ALGO_PERIOD);
 80010e4:	200a      	movs	r0, #10
 80010e6:	f001 fe6a 	bl	8002dbe <MotionFX_manager_MagCal_start>
  }

  if (SensorReadRequest == 1U)
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <MX_DataLogFusion_Process+0x11c>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d146      	bne.n	8001182 <MX_DataLogFusion_Process+0x102>
  {
    SensorReadRequest = 0;
 80010f4:	4b29      	ldr	r3, [pc, #164]	; (800119c <MX_DataLogFusion_Process+0x11c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]

    /* Acquire data from enabled sensors and fill Msg stream */
    RTC_Handler(&msg_dat);
 80010fa:	4829      	ldr	r0, [pc, #164]	; (80011a0 <MX_DataLogFusion_Process+0x120>)
 80010fc:	f000 f872 	bl	80011e4 <RTC_Handler>
    Accelero_Sensor_Handler(&msg_dat);
 8001100:	4827      	ldr	r0, [pc, #156]	; (80011a0 <MX_DataLogFusion_Process+0x120>)
 8001102:	f000 f9d9 	bl	80014b8 <Accelero_Sensor_Handler>
    Gyro_Sensor_Handler(&msg_dat);
 8001106:	4826      	ldr	r0, [pc, #152]	; (80011a0 <MX_DataLogFusion_Process+0x120>)
 8001108:	f000 fa30 	bl	800156c <Gyro_Sensor_Handler>
    Magneto_Sensor_Handler(&msg_dat);
 800110c:	4824      	ldr	r0, [pc, #144]	; (80011a0 <MX_DataLogFusion_Process+0x120>)
 800110e:	f000 fa87 	bl	8001620 <Magneto_Sensor_Handler>
    Humidity_Sensor_Handler(&msg_dat);
 8001112:	4823      	ldr	r0, [pc, #140]	; (80011a0 <MX_DataLogFusion_Process+0x120>)
 8001114:	f000 fbce 	bl	80018b4 <Humidity_Sensor_Handler>
    Temperature_Sensor_Handler(&msg_dat);
 8001118:	4821      	ldr	r0, [pc, #132]	; (80011a0 <MX_DataLogFusion_Process+0x120>)
 800111a:	f000 fb9b 	bl	8001854 <Temperature_Sensor_Handler>
    Pressure_Sensor_Handler(&msg_dat);
 800111e:	4820      	ldr	r0, [pc, #128]	; (80011a0 <MX_DataLogFusion_Process+0x120>)
 8001120:	f000 fb68 	bl	80017f4 <Pressure_Sensor_Handler>

    /* Sensor Fusion specific part */
    FX_Data_Handler(&msg_dat);
 8001124:	481e      	ldr	r0, [pc, #120]	; (80011a0 <MX_DataLogFusion_Process+0x120>)
 8001126:	f000 f8d1 	bl	80012cc <FX_Data_Handler>

    /* Send data stream */
    INIT_STREAMING_HEADER(&msg_dat);
 800112a:	481d      	ldr	r0, [pc, #116]	; (80011a0 <MX_DataLogFusion_Process+0x120>)
 800112c:	f000 fe7a 	bl	8001e24 <INIT_STREAMING_HEADER>
    msg_dat.Len = STREAMING_MSG_LENGTH;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_DataLogFusion_Process+0x120>)
 8001132:	2277      	movs	r2, #119	; 0x77
 8001134:	601a      	str	r2, [r3, #0]

    if (UseOfflineData == 1U)
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_DataLogFusion_Process+0x124>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d11e      	bne.n	800117c <MX_DataLogFusion_Process+0xfc>
    {
      OfflineDataCount--;
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_DataLogFusion_Process+0x128>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3b01      	subs	r3, #1
 8001144:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <MX_DataLogFusion_Process+0x128>)
 8001146:	6013      	str	r3, [r2, #0]
      if (OfflineDataCount < 0)
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_DataLogFusion_Process+0x128>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	da02      	bge.n	8001156 <MX_DataLogFusion_Process+0xd6>
      {
        OfflineDataCount = 0;
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_DataLogFusion_Process+0x128>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
      }

      OfflineDataReadIndex++;
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_DataLogFusion_Process+0x12c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	4a13      	ldr	r2, [pc, #76]	; (80011ac <MX_DataLogFusion_Process+0x12c>)
 800115e:	6013      	str	r3, [r2, #0]
      if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_DataLogFusion_Process+0x12c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b07      	cmp	r3, #7
 8001166:	dd02      	ble.n	800116e <MX_DataLogFusion_Process+0xee>
      {
        OfflineDataReadIndex = 0;
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_DataLogFusion_Process+0x12c>)
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
      }

      if (OfflineDataCount > 0)
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_DataLogFusion_Process+0x128>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	dd02      	ble.n	800117c <MX_DataLogFusion_Process+0xfc>
      {
        SensorReadRequest = 1;
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_DataLogFusion_Process+0x11c>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
      }
    }
    UART_SendMsg(&msg_dat);
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <MX_DataLogFusion_Process+0x120>)
 800117e:	f000 fd05 	bl	8001b8c <UART_SendMsg>
  }
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200006c8 	.word	0x200006c8
 800118c:	200006b4 	.word	0x200006b4
 8001190:	2000067c 	.word	0x2000067c
 8001194:	200006c4 	.word	0x200006c4
 8001198:	200006b8 	.word	0x200006b8
 800119c:	20000668 	.word	0x20000668
 80011a0:	200007cc 	.word	0x200007cc
 80011a4:	20000669 	.word	0x20000669
 80011a8:	20000674 	.word	0x20000674
 80011ac:	2000066c 	.word	0x2000066c

080011b0 <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
static void Init_Sensors(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 80011b4:	f001 fa66 	bl	8002684 <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 80011b8:	f001 fa6c 	bl	8002694 <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 80011bc:	f001 fa72 	bl	80026a4 <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 80011c0:	f001 fa78 	bl	80026b4 <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 80011c4:	f001 fa7e 	bl	80026c4 <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 80011c8:	f001 fa84 	bl	80026d4 <BSP_SENSOR_HUM_Init>

  BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 80011cc:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80011e0 <Init_Sensors+0x30>
 80011d0:	f001 fb36 	bl	8002840 <BSP_SENSOR_ACC_SetOutputDataRate>
  BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 80011d4:	2004      	movs	r0, #4
 80011d6:	f001 fb42 	bl	800285e <BSP_SENSOR_ACC_SetFullScale>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	42c80000 	.word	0x42c80000

080011e4 <RTC_Handler>:
 * @brief  Handles the time+date getting/sending
 * @param  Msg the time+date part of the stream
 * @retval None
 */
static void RTC_Handler(TMsg *Msg)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08c      	sub	sp, #48	; 0x30
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint8_t sub_sec = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <RTC_Handler+0xd8>)
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28

  if (UseOfflineData == 1)
 80011f8:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <RTC_Handler+0xdc>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d12b      	bne.n	8001258 <RTC_Handler+0x74>
  {
    Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 8001200:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <RTC_Handler+0xe0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a30      	ldr	r2, [pc, #192]	; (80012c8 <RTC_Handler+0xe4>)
 8001206:	2134      	movs	r1, #52	; 0x34
 8001208:	fb01 f303 	mul.w	r3, r1, r3
 800120c:	4413      	add	r3, r2
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 8001214:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <RTC_Handler+0xe0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a2b      	ldr	r2, [pc, #172]	; (80012c8 <RTC_Handler+0xe4>)
 800121a:	2134      	movs	r1, #52	; 0x34
 800121c:	fb01 f303 	mul.w	r3, r1, r3
 8001220:	4413      	add	r3, r2
 8001222:	3301      	adds	r3, #1
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <RTC_Handler+0xe0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a26      	ldr	r2, [pc, #152]	; (80012c8 <RTC_Handler+0xe4>)
 8001230:	2134      	movs	r1, #52	; 0x34
 8001232:	fb01 f303 	mul.w	r3, r1, r3
 8001236:	4413      	add	r3, r2
 8001238:	3302      	adds	r3, #2
 800123a:	781a      	ldrb	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 8001240:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <RTC_Handler+0xe0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a20      	ldr	r2, [pc, #128]	; (80012c8 <RTC_Handler+0xe4>)
 8001246:	2134      	movs	r1, #52	; 0x34
 8001248:	fb01 f303 	mul.w	r3, r1, r3
 800124c:	4413      	add	r3, r2
 800124e:	3303      	adds	r3, #3
 8001250:	781a      	ldrb	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	729a      	strb	r2, [r3, #10]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
    Msg->Data[6] = sub_sec;
  }
}
 8001256:	e02d      	b.n	80012b4 <RTC_Handler+0xd0>
    (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4816      	ldr	r0, [pc, #88]	; (80012bc <RTC_Handler+0xd8>)
 8001262:	f00b f807 	bl	800c274 <HAL_RTC_GetTime>
    (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2200      	movs	r2, #0
 800126c:	4619      	mov	r1, r3
 800126e:	4813      	ldr	r0, [pc, #76]	; (80012bc <RTC_Handler+0xd8>)
 8001270:	f00b f8e3 	bl	800c43a <HAL_RTC_GetDate>
    ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2264      	movs	r2, #100	; 0x64
 800127c:	fb02 f303 	mul.w	r3, r2, r3
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    ans_int32 /= RtcSynchPrediv + 1;
 8001282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001286:	3301      	adds	r3, #1
 8001288:	fbb2 f3f3 	udiv	r3, r2, r3
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	b2db      	uxtb	r3, r3
 8001292:	623b      	str	r3, [r7, #32]
    sub_sec = (uint8_t)ans_uint32;
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
 800129a:	7a3a      	ldrb	r2, [r7, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 80012a0:	7a7a      	ldrb	r2, [r7, #9]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 80012a6:	7aba      	ldrb	r2, [r7, #10]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = sub_sec;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80012b2:	729a      	strb	r2, [r3, #10]
}
 80012b4:	bf00      	nop
 80012b6:	3730      	adds	r7, #48	; 0x30
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20001a1c 	.word	0x20001a1c
 80012c0:	20000669 	.word	0x20000669
 80012c4:	2000066c 	.word	0x2000066c
 80012c8:	200015dc 	.word	0x200015dc

080012cc <FX_Data_Handler>:
 * @brief  Sensor Fusion data handler
 * @param  Msg the Sensor Fusion data part of the stream
 * @retval None
 */
static void FX_Data_Handler(TMsg *Msg)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b09e      	sub	sp, #120	; 0x78
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t elapsed_time_us = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	677b      	str	r3, [r7, #116]	; 0x74
  MFX_input_t data_in;
  MFX_input_t *pdata_in = &data_in;
 80012d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012dc:	673b      	str	r3, [r7, #112]	; 0x70
  MFX_output_t data_out;
  MFX_output_t *pdata_out = &data_out;
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 80012e4:	4b65      	ldr	r3, [pc, #404]	; (800147c <FX_Data_Handler+0x1b0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	2b10      	cmp	r3, #16
 80012ee:	f040 80c0 	bne.w	8001472 <FX_Data_Handler+0x1a6>
  {
    if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 80012f2:	4b62      	ldr	r3, [pc, #392]	; (800147c <FX_Data_Handler+0x1b0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0320 	and.w	r3, r3, #32
 80012fa:	2b20      	cmp	r3, #32
 80012fc:	f040 80b9 	bne.w	8001472 <FX_Data_Handler+0x1a6>
    {
      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 8001300:	4b5e      	ldr	r3, [pc, #376]	; (800147c <FX_Data_Handler+0x1b0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001308:	2b40      	cmp	r3, #64	; 0x40
 800130a:	f040 80b2 	bne.w	8001472 <FX_Data_Handler+0x1a6>
      {
        /* Convert angular velocity from [mdps] to [dps] */
        data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 800130e:	4b5c      	ldr	r3, [pc, #368]	; (8001480 <FX_Data_Handler+0x1b4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001484 <FX_Data_Handler+0x1b8>
 800131e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001322:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 8001326:	4b56      	ldr	r3, [pc, #344]	; (8001480 <FX_Data_Handler+0x1b4>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001332:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001484 <FX_Data_Handler+0x1b8>
 8001336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 800133e:	4b50      	ldr	r3, [pc, #320]	; (8001480 <FX_Data_Handler+0x1b4>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001484 <FX_Data_Handler+0x1b8>
 800134e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001352:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

        /* Convert acceleration from [mg] to [g] */
        data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 8001356:	4b4c      	ldr	r3, [pc, #304]	; (8001488 <FX_Data_Handler+0x1bc>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001362:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001484 <FX_Data_Handler+0x1b8>
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 800136e:	4b46      	ldr	r3, [pc, #280]	; (8001488 <FX_Data_Handler+0x1bc>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800137a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001484 <FX_Data_Handler+0x1b8>
 800137e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001382:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 8001386:	4b40      	ldr	r3, [pc, #256]	; (8001488 <FX_Data_Handler+0x1bc>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001392:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001484 <FX_Data_Handler+0x1b8>
 8001396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

        /* Convert magnetic field intensity from [mGauss] to [uT / 50] */
        data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800139e:	4b3b      	ldr	r3, [pc, #236]	; (800148c <FX_Data_Handler+0x1c0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013aa:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001490 <FX_Data_Handler+0x1c4>
 80013ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 80013b6:	4b35      	ldr	r3, [pc, #212]	; (800148c <FX_Data_Handler+0x1c0>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001490 <FX_Data_Handler+0x1c4>
 80013c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ca:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 80013ce:	4b2f      	ldr	r3, [pc, #188]	; (800148c <FX_Data_Handler+0x1c0>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013da:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001490 <FX_Data_Handler+0x1c4>
 80013de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

        /* Run Sensor Fusion algorithm */
        BSP_LED_On(LED2);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f007 fadc 	bl	80089a4 <BSP_LED_On>
        DWT_Start();
 80013ec:	f000 fade 	bl	80019ac <DWT_Start>
        MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 80013f0:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8001494 <FX_Data_Handler+0x1c8>
 80013f4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80013f6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80013f8:	f001 fc6e 	bl	8002cd8 <MotionFX_manager_run>
        elapsed_time_us = DWT_Stop();
 80013fc:	f000 fae8 	bl	80019d0 <DWT_Stop>
 8001400:	6778      	str	r0, [r7, #116]	; 0x74
        BSP_LED_Off(LED2);
 8001402:	2000      	movs	r0, #0
 8001404:	f007 fae4 	bl	80089d0 <BSP_LED_Off>

        (void)memcpy(&Msg->Data[55], (void *)pdata_out->quaternion, 4U * sizeof(float));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 800140e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001410:	330c      	adds	r3, #12
 8001412:	2210      	movs	r2, #16
 8001414:	4619      	mov	r1, r3
 8001416:	f017 f883 	bl	8018520 <memcpy>
        (void)memcpy(&Msg->Data[71], (void *)pdata_out->rotation, 3U * sizeof(float));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	334b      	adds	r3, #75	; 0x4b
 800141e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001420:	220c      	movs	r2, #12
 8001422:	4618      	mov	r0, r3
 8001424:	f017 f87c 	bl	8018520 <memcpy>
        (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity, 3U * sizeof(float));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f103 0057 	add.w	r0, r3, #87	; 0x57
 800142e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001430:	331c      	adds	r3, #28
 8001432:	220c      	movs	r2, #12
 8001434:	4619      	mov	r1, r3
 8001436:	f017 f873 	bl	8018520 <memcpy>
        (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration, 3U * sizeof(float));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f103 0063 	add.w	r0, r3, #99	; 0x63
 8001440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001442:	3328      	adds	r3, #40	; 0x28
 8001444:	220c      	movs	r2, #12
 8001446:	4619      	mov	r1, r3
 8001448:	f017 f86a 	bl	8018520 <memcpy>

        (void)memcpy(&Msg->Data[107], (void *) & (pdata_out->heading), sizeof(float));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	336f      	adds	r3, #111	; 0x6f
 8001450:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001452:	3234      	adds	r2, #52	; 0x34
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	601a      	str	r2, [r3, #0]
        (void)memcpy(&Msg->Data[111], (void *) & (pdata_out->headingErr), sizeof(float));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3373      	adds	r3, #115	; 0x73
 800145c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800145e:	3238      	adds	r2, #56	; 0x38
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	601a      	str	r2, [r3, #0]

        Serialize_s32(&Msg->Data[115], (int32_t)elapsed_time_us, 4);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3377      	adds	r3, #119	; 0x77
 8001468:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800146a:	2204      	movs	r2, #4
 800146c:	4618      	mov	r0, r3
 800146e:	f001 fdb8 	bl	8002fe2 <Serialize_s32>
      }
    }
  }
}
 8001472:	bf00      	nop
 8001474:	3778      	adds	r7, #120	; 0x78
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000664 	.word	0x20000664
 8001480:	2000068c 	.word	0x2000068c
 8001484:	3a83126f 	.word	0x3a83126f
 8001488:	20000680 	.word	0x20000680
 800148c:	20000698 	.word	0x20000698
 8001490:	3b03126f 	.word	0x3b03126f
 8001494:	3c23d70a 	.word	0x3c23d70a

08001498 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  MagCalRequest = 1U;
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <BSP_PB_Callback+0x1c>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	200006b4 	.word	0x200006b4

080014b8 <Accelero_Sensor_Handler>:
 * @brief  Handles the ACC axes data getting/sending
 * @param  Msg the ACC part of the stream
 * @retval None
 */
static void Accelero_Sensor_Handler(TMsg *Msg)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <Accelero_Sensor_Handler+0xa0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	2b10      	cmp	r3, #16
 80014ca:	d140      	bne.n	800154e <Accelero_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 80014cc:	4b23      	ldr	r3, [pc, #140]	; (800155c <Accelero_Sensor_Handler+0xa4>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d121      	bne.n	8001518 <Accelero_Sensor_Handler+0x60>
    {
      AccValue.x = OfflineData[OfflineDataReadIndex].acceleration_x_mg;
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <Accelero_Sensor_Handler+0xa8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a22      	ldr	r2, [pc, #136]	; (8001564 <Accelero_Sensor_Handler+0xac>)
 80014da:	2134      	movs	r1, #52	; 0x34
 80014dc:	fb01 f303 	mul.w	r3, r1, r3
 80014e0:	4413      	add	r3, r2
 80014e2:	3310      	adds	r3, #16
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a20      	ldr	r2, [pc, #128]	; (8001568 <Accelero_Sensor_Handler+0xb0>)
 80014e8:	6013      	str	r3, [r2, #0]
      AccValue.y = OfflineData[OfflineDataReadIndex].acceleration_y_mg;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <Accelero_Sensor_Handler+0xa8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1d      	ldr	r2, [pc, #116]	; (8001564 <Accelero_Sensor_Handler+0xac>)
 80014f0:	2134      	movs	r1, #52	; 0x34
 80014f2:	fb01 f303 	mul.w	r3, r1, r3
 80014f6:	4413      	add	r3, r2
 80014f8:	3314      	adds	r3, #20
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a1a      	ldr	r2, [pc, #104]	; (8001568 <Accelero_Sensor_Handler+0xb0>)
 80014fe:	6053      	str	r3, [r2, #4]
      AccValue.z = OfflineData[OfflineDataReadIndex].acceleration_z_mg;
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <Accelero_Sensor_Handler+0xa8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a17      	ldr	r2, [pc, #92]	; (8001564 <Accelero_Sensor_Handler+0xac>)
 8001506:	2134      	movs	r1, #52	; 0x34
 8001508:	fb01 f303 	mul.w	r3, r1, r3
 800150c:	4413      	add	r3, r2
 800150e:	3318      	adds	r3, #24
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a15      	ldr	r2, [pc, #84]	; (8001568 <Accelero_Sensor_Handler+0xb0>)
 8001514:	6093      	str	r3, [r2, #8]
 8001516:	e002      	b.n	800151e <Accelero_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_ACC_GetAxes(&AccValue);
 8001518:	4813      	ldr	r0, [pc, #76]	; (8001568 <Accelero_Sensor_Handler+0xb0>)
 800151a:	f001 f943 	bl	80027a4 <BSP_SENSOR_ACC_GetAxes>
    }

    Serialize_s32(&Msg->Data[19], (int32_t)AccValue.x, 4);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3317      	adds	r3, #23
 8001522:	4a11      	ldr	r2, [pc, #68]	; (8001568 <Accelero_Sensor_Handler+0xb0>)
 8001524:	6811      	ldr	r1, [r2, #0]
 8001526:	2204      	movs	r2, #4
 8001528:	4618      	mov	r0, r3
 800152a:	f001 fd5a 	bl	8002fe2 <Serialize_s32>
    Serialize_s32(&Msg->Data[23], (int32_t)AccValue.y, 4);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	331b      	adds	r3, #27
 8001532:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <Accelero_Sensor_Handler+0xb0>)
 8001534:	6851      	ldr	r1, [r2, #4]
 8001536:	2204      	movs	r2, #4
 8001538:	4618      	mov	r0, r3
 800153a:	f001 fd52 	bl	8002fe2 <Serialize_s32>
    Serialize_s32(&Msg->Data[27], (int32_t)AccValue.z, 4);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	331f      	adds	r3, #31
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <Accelero_Sensor_Handler+0xb0>)
 8001544:	6891      	ldr	r1, [r2, #8]
 8001546:	2204      	movs	r2, #4
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fd4a 	bl	8002fe2 <Serialize_s32>
  }
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000664 	.word	0x20000664
 800155c:	20000669 	.word	0x20000669
 8001560:	2000066c 	.word	0x2000066c
 8001564:	200015dc 	.word	0x200015dc
 8001568:	20000680 	.word	0x20000680

0800156c <Gyro_Sensor_Handler>:
 * @brief  Handles the GYR axes data getting/sending
 * @param  Msg the GYR part of the stream
 * @retval None
 */
static void Gyro_Sensor_Handler(TMsg *Msg)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 8001574:	4b25      	ldr	r3, [pc, #148]	; (800160c <Gyro_Sensor_Handler+0xa0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0320 	and.w	r3, r3, #32
 800157c:	2b20      	cmp	r3, #32
 800157e:	d140      	bne.n	8001602 <Gyro_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 8001580:	4b23      	ldr	r3, [pc, #140]	; (8001610 <Gyro_Sensor_Handler+0xa4>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d121      	bne.n	80015cc <Gyro_Sensor_Handler+0x60>
    {
      GyrValue.x = OfflineData[OfflineDataReadIndex].angular_rate_x_mdps;
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <Gyro_Sensor_Handler+0xa8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a22      	ldr	r2, [pc, #136]	; (8001618 <Gyro_Sensor_Handler+0xac>)
 800158e:	2134      	movs	r1, #52	; 0x34
 8001590:	fb01 f303 	mul.w	r3, r1, r3
 8001594:	4413      	add	r3, r2
 8001596:	331c      	adds	r3, #28
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a20      	ldr	r2, [pc, #128]	; (800161c <Gyro_Sensor_Handler+0xb0>)
 800159c:	6013      	str	r3, [r2, #0]
      GyrValue.y = OfflineData[OfflineDataReadIndex].angular_rate_y_mdps;
 800159e:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <Gyro_Sensor_Handler+0xa8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <Gyro_Sensor_Handler+0xac>)
 80015a4:	2134      	movs	r1, #52	; 0x34
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	3320      	adds	r3, #32
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1a      	ldr	r2, [pc, #104]	; (800161c <Gyro_Sensor_Handler+0xb0>)
 80015b2:	6053      	str	r3, [r2, #4]
      GyrValue.z = OfflineData[OfflineDataReadIndex].angular_rate_z_mdps;
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <Gyro_Sensor_Handler+0xa8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a17      	ldr	r2, [pc, #92]	; (8001618 <Gyro_Sensor_Handler+0xac>)
 80015ba:	2134      	movs	r1, #52	; 0x34
 80015bc:	fb01 f303 	mul.w	r3, r1, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	3324      	adds	r3, #36	; 0x24
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a15      	ldr	r2, [pc, #84]	; (800161c <Gyro_Sensor_Handler+0xb0>)
 80015c8:	6093      	str	r3, [r2, #8]
 80015ca:	e002      	b.n	80015d2 <Gyro_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_GYR_GetAxes(&GyrValue);
 80015cc:	4813      	ldr	r0, [pc, #76]	; (800161c <Gyro_Sensor_Handler+0xb0>)
 80015ce:	f001 f8f6 	bl	80027be <BSP_SENSOR_GYR_GetAxes>
    }

    Serialize_s32(&Msg->Data[31], GyrValue.x, 4);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3323      	adds	r3, #35	; 0x23
 80015d6:	4a11      	ldr	r2, [pc, #68]	; (800161c <Gyro_Sensor_Handler+0xb0>)
 80015d8:	6811      	ldr	r1, [r2, #0]
 80015da:	2204      	movs	r2, #4
 80015dc:	4618      	mov	r0, r3
 80015de:	f001 fd00 	bl	8002fe2 <Serialize_s32>
    Serialize_s32(&Msg->Data[35], GyrValue.y, 4);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3327      	adds	r3, #39	; 0x27
 80015e6:	4a0d      	ldr	r2, [pc, #52]	; (800161c <Gyro_Sensor_Handler+0xb0>)
 80015e8:	6851      	ldr	r1, [r2, #4]
 80015ea:	2204      	movs	r2, #4
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 fcf8 	bl	8002fe2 <Serialize_s32>
    Serialize_s32(&Msg->Data[39], GyrValue.z, 4);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	332b      	adds	r3, #43	; 0x2b
 80015f6:	4a09      	ldr	r2, [pc, #36]	; (800161c <Gyro_Sensor_Handler+0xb0>)
 80015f8:	6891      	ldr	r1, [r2, #8]
 80015fa:	2204      	movs	r2, #4
 80015fc:	4618      	mov	r0, r3
 80015fe:	f001 fcf0 	bl	8002fe2 <Serialize_s32>
  }
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000664 	.word	0x20000664
 8001610:	20000669 	.word	0x20000669
 8001614:	2000066c 	.word	0x2000066c
 8001618:	200015dc 	.word	0x200015dc
 800161c:	2000068c 	.word	0x2000068c

08001620 <Magneto_Sensor_Handler>:
 * @brief  Handles the MAG axes data getting/sending
 * @param  Msg the MAG part of the stream
 * @retval None
 */
static void Magneto_Sensor_Handler(TMsg *Msg)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	; 0x30
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  float ans_float;
  MFX_MagCal_input_t mag_data_in;
  MFX_MagCal_output_t mag_data_out;

  if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 8001628:	4b68      	ldr	r3, [pc, #416]	; (80017cc <Magneto_Sensor_Handler+0x1ac>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001630:	2b40      	cmp	r3, #64	; 0x40
 8001632:	f040 80c7 	bne.w	80017c4 <Magneto_Sensor_Handler+0x1a4>
  {
    if (UseOfflineData == 1)
 8001636:	4b66      	ldr	r3, [pc, #408]	; (80017d0 <Magneto_Sensor_Handler+0x1b0>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d121      	bne.n	8001682 <Magneto_Sensor_Handler+0x62>
    {
     MagValue.x = OfflineData[OfflineDataReadIndex].magnetic_field_x_mgauss;
 800163e:	4b65      	ldr	r3, [pc, #404]	; (80017d4 <Magneto_Sensor_Handler+0x1b4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a65      	ldr	r2, [pc, #404]	; (80017d8 <Magneto_Sensor_Handler+0x1b8>)
 8001644:	2134      	movs	r1, #52	; 0x34
 8001646:	fb01 f303 	mul.w	r3, r1, r3
 800164a:	4413      	add	r3, r2
 800164c:	3328      	adds	r3, #40	; 0x28
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a62      	ldr	r2, [pc, #392]	; (80017dc <Magneto_Sensor_Handler+0x1bc>)
 8001652:	6013      	str	r3, [r2, #0]
     MagValue.y = OfflineData[OfflineDataReadIndex].magnetic_field_y_mgauss;
 8001654:	4b5f      	ldr	r3, [pc, #380]	; (80017d4 <Magneto_Sensor_Handler+0x1b4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a5f      	ldr	r2, [pc, #380]	; (80017d8 <Magneto_Sensor_Handler+0x1b8>)
 800165a:	2134      	movs	r1, #52	; 0x34
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	4413      	add	r3, r2
 8001662:	332c      	adds	r3, #44	; 0x2c
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a5d      	ldr	r2, [pc, #372]	; (80017dc <Magneto_Sensor_Handler+0x1bc>)
 8001668:	6053      	str	r3, [r2, #4]
     MagValue.z = OfflineData[OfflineDataReadIndex].magnetic_field_z_mgauss;
 800166a:	4b5a      	ldr	r3, [pc, #360]	; (80017d4 <Magneto_Sensor_Handler+0x1b4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a5a      	ldr	r2, [pc, #360]	; (80017d8 <Magneto_Sensor_Handler+0x1b8>)
 8001670:	2134      	movs	r1, #52	; 0x34
 8001672:	fb01 f303 	mul.w	r3, r1, r3
 8001676:	4413      	add	r3, r2
 8001678:	3330      	adds	r3, #48	; 0x30
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a57      	ldr	r2, [pc, #348]	; (80017dc <Magneto_Sensor_Handler+0x1bc>)
 800167e:	6093      	str	r3, [r2, #8]
 8001680:	e088      	b.n	8001794 <Magneto_Sensor_Handler+0x174>
    }
    else
    {
      BSP_SENSOR_MAG_GetAxes(&MagValue);
 8001682:	4856      	ldr	r0, [pc, #344]	; (80017dc <Magneto_Sensor_Handler+0x1bc>)
 8001684:	f001 f8a8 	bl	80027d8 <BSP_SENSOR_MAG_GetAxes>

      if (MagCalStatus == 0U)
 8001688:	4b55      	ldr	r3, [pc, #340]	; (80017e0 <Magneto_Sensor_Handler+0x1c0>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d16c      	bne.n	800176a <Magneto_Sensor_Handler+0x14a>
      {
        mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001690:	4b52      	ldr	r3, [pc, #328]	; (80017dc <Magneto_Sensor_Handler+0x1bc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	ee07 3a90 	vmov	s15, r3
 8001698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169c:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80017e4 <Magneto_Sensor_Handler+0x1c4>
 80016a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a4:	edc7 7a07 	vstr	s15, [r7, #28]
        mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 80016a8:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <Magneto_Sensor_Handler+0x1bc>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80017e4 <Magneto_Sensor_Handler+0x1c4>
 80016b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016bc:	edc7 7a08 	vstr	s15, [r7, #32]
        mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 80016c0:	4b46      	ldr	r3, [pc, #280]	; (80017dc <Magneto_Sensor_Handler+0x1bc>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016cc:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80017e4 <Magneto_Sensor_Handler+0x1c4>
 80016d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        mag_data_in.time_stamp = (int)TimeStamp;
 80016d8:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <Magneto_Sensor_Handler+0x1c8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
        TimeStamp += (uint32_t)ALGO_PERIOD;
 80016de:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <Magneto_Sensor_Handler+0x1c8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	330a      	adds	r3, #10
 80016e4:	4a40      	ldr	r2, [pc, #256]	; (80017e8 <Magneto_Sensor_Handler+0x1c8>)
 80016e6:	6013      	str	r3, [r2, #0]

        MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 80016e8:	f107 020c 	add.w	r2, r7, #12
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f001 fb54 	bl	8002da0 <MotionFX_manager_MagCal_run>

        if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 80016f8:	7e3b      	ldrb	r3, [r7, #24]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d135      	bne.n	800176a <Magneto_Sensor_Handler+0x14a>
        {
          MagCalStatus = 1;
 80016fe:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <Magneto_Sensor_Handler+0x1c0>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]

          ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8001704:	edd7 7a03 	vldr	s15, [r7, #12]
 8001708:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80017ec <Magneto_Sensor_Handler+0x1cc>
 800170c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001710:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          MagOffset.x = (int32_t)ans_float;
 8001714:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800171c:	ee17 2a90 	vmov	r2, s15
 8001720:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <Magneto_Sensor_Handler+0x1d0>)
 8001722:	601a      	str	r2, [r3, #0]
          ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8001724:	edd7 7a04 	vldr	s15, [r7, #16]
 8001728:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80017ec <Magneto_Sensor_Handler+0x1cc>
 800172c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001730:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          MagOffset.y = (int32_t)ans_float;
 8001734:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001738:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173c:	ee17 2a90 	vmov	r2, s15
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <Magneto_Sensor_Handler+0x1d0>)
 8001742:	605a      	str	r2, [r3, #4]
          ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8001744:	edd7 7a05 	vldr	s15, [r7, #20]
 8001748:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80017ec <Magneto_Sensor_Handler+0x1cc>
 800174c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001750:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          MagOffset.z = (int32_t)ans_float;
 8001754:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001758:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800175c:	ee17 2a90 	vmov	r2, s15
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <Magneto_Sensor_Handler+0x1d0>)
 8001762:	609a      	str	r2, [r3, #8]

          /* Disable magnetometer calibration */
          MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 8001764:	200a      	movs	r0, #10
 8001766:	f001 fb36 	bl	8002dd6 <MotionFX_manager_MagCal_stop>
        }
      }

      MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <Magneto_Sensor_Handler+0x1bc>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <Magneto_Sensor_Handler+0x1d0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	4a19      	ldr	r2, [pc, #100]	; (80017dc <Magneto_Sensor_Handler+0x1bc>)
 8001776:	6013      	str	r3, [r2, #0]
      MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <Magneto_Sensor_Handler+0x1bc>)
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <Magneto_Sensor_Handler+0x1d0>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	4a16      	ldr	r2, [pc, #88]	; (80017dc <Magneto_Sensor_Handler+0x1bc>)
 8001784:	6053      	str	r3, [r2, #4]
      MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <Magneto_Sensor_Handler+0x1bc>)
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <Magneto_Sensor_Handler+0x1d0>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <Magneto_Sensor_Handler+0x1bc>)
 8001792:	6093      	str	r3, [r2, #8]
    }

    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	332f      	adds	r3, #47	; 0x2f
 8001798:	4a10      	ldr	r2, [pc, #64]	; (80017dc <Magneto_Sensor_Handler+0x1bc>)
 800179a:	6811      	ldr	r1, [r2, #0]
 800179c:	2204      	movs	r2, #4
 800179e:	4618      	mov	r0, r3
 80017a0:	f001 fc1f 	bl	8002fe2 <Serialize_s32>
    Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3333      	adds	r3, #51	; 0x33
 80017a8:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <Magneto_Sensor_Handler+0x1bc>)
 80017aa:	6851      	ldr	r1, [r2, #4]
 80017ac:	2204      	movs	r2, #4
 80017ae:	4618      	mov	r0, r3
 80017b0:	f001 fc17 	bl	8002fe2 <Serialize_s32>
    Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3337      	adds	r3, #55	; 0x37
 80017b8:	4a08      	ldr	r2, [pc, #32]	; (80017dc <Magneto_Sensor_Handler+0x1bc>)
 80017ba:	6891      	ldr	r1, [r2, #8]
 80017bc:	2204      	movs	r2, #4
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 fc0f 	bl	8002fe2 <Serialize_s32>
  }
}
 80017c4:	bf00      	nop
 80017c6:	3730      	adds	r7, #48	; 0x30
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000664 	.word	0x20000664
 80017d0:	20000669 	.word	0x20000669
 80017d4:	2000066c 	.word	0x2000066c
 80017d8:	200015dc 	.word	0x200015dc
 80017dc:	20000698 	.word	0x20000698
 80017e0:	200006c4 	.word	0x200006c4
 80017e4:	3b03126f 	.word	0x3b03126f
 80017e8:	200006b0 	.word	0x200006b0
 80017ec:	43fa0000 	.word	0x43fa0000
 80017f0:	200006b8 	.word	0x200006b8

080017f4 <Pressure_Sensor_Handler>:
 * @brief  Handles the PRESS sensor data getting/sending.
 * @param  Msg the PRESS part of the stream
 * @retval None
 */
static void Pressure_Sensor_Handler(TMsg *Msg)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <Pressure_Sensor_Handler+0x4c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b01      	cmp	r3, #1
 8001806:	d117      	bne.n	8001838 <Pressure_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <Pressure_Sensor_Handler+0x50>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d10b      	bne.n	8001828 <Pressure_Sensor_Handler+0x34>
    {
      PressValue = OfflineData[OfflineDataReadIndex].pressure;
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <Pressure_Sensor_Handler+0x54>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <Pressure_Sensor_Handler+0x58>)
 8001816:	2134      	movs	r1, #52	; 0x34
 8001818:	fb01 f303 	mul.w	r3, r1, r3
 800181c:	4413      	add	r3, r2
 800181e:	3304      	adds	r3, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <Pressure_Sensor_Handler+0x5c>)
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e002      	b.n	800182e <Pressure_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_PRESS_GetValue(&PressValue);
 8001828:	4809      	ldr	r0, [pc, #36]	; (8001850 <Pressure_Sensor_Handler+0x5c>)
 800182a:	f000 ffe2 	bl	80027f2 <BSP_SENSOR_PRESS_GetValue>
    }

    (void)memcpy(&Msg->Data[7], (void *)&PressValue, sizeof(float));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	330b      	adds	r3, #11
 8001832:	4a07      	ldr	r2, [pc, #28]	; (8001850 <Pressure_Sensor_Handler+0x5c>)
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	601a      	str	r2, [r3, #0]
  }
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000664 	.word	0x20000664
 8001844:	20000669 	.word	0x20000669
 8001848:	2000066c 	.word	0x2000066c
 800184c:	200015dc 	.word	0x200015dc
 8001850:	200006a4 	.word	0x200006a4

08001854 <Temperature_Sensor_Handler>:
 * @brief  Handles the TEMP axes data getting/sending
 * @param  Msg the TEMP part of the stream
 * @retval None
 */
static void Temperature_Sensor_Handler(TMsg *Msg)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <Temperature_Sensor_Handler+0x4c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b02      	cmp	r3, #2
 8001866:	d117      	bne.n	8001898 <Temperature_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <Temperature_Sensor_Handler+0x50>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d10b      	bne.n	8001888 <Temperature_Sensor_Handler+0x34>
    {
      TempValue = OfflineData[OfflineDataReadIndex].temperature;
 8001870:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <Temperature_Sensor_Handler+0x54>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <Temperature_Sensor_Handler+0x58>)
 8001876:	2134      	movs	r1, #52	; 0x34
 8001878:	fb01 f303 	mul.w	r3, r1, r3
 800187c:	4413      	add	r3, r2
 800187e:	330c      	adds	r3, #12
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <Temperature_Sensor_Handler+0x5c>)
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e002      	b.n	800188e <Temperature_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_TEMP_GetValue(&TempValue);
 8001888:	4809      	ldr	r0, [pc, #36]	; (80018b0 <Temperature_Sensor_Handler+0x5c>)
 800188a:	f000 ffbf 	bl	800280c <BSP_SENSOR_TEMP_GetValue>
    }

    (void)memcpy(&Msg->Data[11], (void *)&TempValue, sizeof(float));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	330f      	adds	r3, #15
 8001892:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <Temperature_Sensor_Handler+0x5c>)
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	601a      	str	r2, [r3, #0]
  }
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000664 	.word	0x20000664
 80018a4:	20000669 	.word	0x20000669
 80018a8:	2000066c 	.word	0x2000066c
 80018ac:	200015dc 	.word	0x200015dc
 80018b0:	200006a8 	.word	0x200006a8

080018b4 <Humidity_Sensor_Handler>:
 * @brief  Handles the HUM axes data getting/sending
 * @param  Msg the HUM part of the stream
 * @retval None
 */
static void Humidity_Sensor_Handler(TMsg *Msg)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <Humidity_Sensor_Handler+0x4c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d117      	bne.n	80018f8 <Humidity_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <Humidity_Sensor_Handler+0x50>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d10b      	bne.n	80018e8 <Humidity_Sensor_Handler+0x34>
    {
      HumValue = OfflineData[OfflineDataReadIndex].humidity;
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <Humidity_Sensor_Handler+0x54>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0d      	ldr	r2, [pc, #52]	; (800190c <Humidity_Sensor_Handler+0x58>)
 80018d6:	2134      	movs	r1, #52	; 0x34
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	4413      	add	r3, r2
 80018de:	3308      	adds	r3, #8
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <Humidity_Sensor_Handler+0x5c>)
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e002      	b.n	80018ee <Humidity_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_HUM_GetValue(&HumValue);
 80018e8:	4809      	ldr	r0, [pc, #36]	; (8001910 <Humidity_Sensor_Handler+0x5c>)
 80018ea:	f000 ff9c 	bl	8002826 <BSP_SENSOR_HUM_GetValue>
    }

    (void)memcpy(&Msg->Data[15], (void *)&HumValue, sizeof(float));;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3313      	adds	r3, #19
 80018f2:	4a07      	ldr	r2, [pc, #28]	; (8001910 <Humidity_Sensor_Handler+0x5c>)
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	601a      	str	r2, [r3, #0]
  }
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000664 	.word	0x20000664
 8001904:	20000669 	.word	0x20000669
 8001908:	2000066c 	.word	0x2000066c
 800190c:	200015dc 	.word	0x200015dc
 8001910:	200006ac 	.word	0x200006ac

08001914 <TIM_Config>:
 * @brief  Timer configuration
 * @param  Freq the desired Timer frequency
 * @retval None
 */
static void TIM_Config(uint32_t Freq)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800191c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001920:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <TIM_Config+0x60>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	fbb2 f3f3 	udiv	r3, r2, r3
 800192c:	3b01      	subs	r3, #1
 800192e:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	fbb2 f3f3 	udiv	r3, r2, r3
 8001938:	3b01      	subs	r3, #1
 800193a:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <TIM_Config+0x64>)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <TIM_Config+0x64>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 8001948:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <TIM_Config+0x64>)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <TIM_Config+0x64>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <TIM_Config+0x64>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 800195a:	4807      	ldr	r0, [pc, #28]	; (8001978 <TIM_Config+0x64>)
 800195c:	f00a fe8c 	bl	800c678 <HAL_TIM_Base_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <TIM_Config+0x56>
  {
    Error_Handler();
 8001966:	f001 f959 	bl	8002c1c <Error_Handler>
  }
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000180 	.word	0x20000180
 8001978:	200019d0 	.word	0x200019d0

0800197c <DWT_Init>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
static void DWT_Init(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <DWT_Init+0x28>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <DWT_Init+0x28>)
 8001986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <DWT_Init+0x2c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <DWT_Init+0x2c>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000edf0 	.word	0xe000edf0
 80019a8:	e0001000 	.word	0xe0001000

080019ac <DWT_Start>:
 * @brief  Start counting clock cycles
 * @param  None
 * @retval None
 */
static void DWT_Start(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <DWT_Start+0x20>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <DWT_Start+0x20>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <DWT_Start+0x20>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6013      	str	r3, [r2, #0]
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e0001000 	.word	0xe0001000

080019d0 <DWT_Stop>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
static uint32_t DWT_Stop(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
  volatile uint32_t cycles_count = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	603b      	str	r3, [r7, #0]
  uint32_t system_core_clock_mhz = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <DWT_Stop+0x44>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a0c      	ldr	r2, [pc, #48]	; (8001a14 <DWT_Stop+0x44>)
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	6013      	str	r3, [r2, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <DWT_Stop+0x44>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	603b      	str	r3, [r7, #0]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <DWT_Stop+0x48>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <DWT_Stop+0x4c>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	0c9b      	lsrs	r3, r3, #18
 80019fc:	607b      	str	r3, [r7, #4]
  return cycles_count / system_core_clock_mhz;
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e0001000 	.word	0xe0001000
 8001a18:	20000180 	.word	0x20000180
 8001a1c:	431bde83 	.word	0x431bde83

08001a20 <UART_ReceivedMSG>:
 * @brief  Check if a message is received via UART
 * @param  Msg the pointer to the message to be received
 * @retval 1 if a complete message is found, 0 otherwise
 */
int UART_ReceivedMSG(TMsg *Msg)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	83fb      	strh	r3, [r7, #30]
  uint8_t inc;

  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 8001a2c:	4b54      	ldr	r3, [pc, #336]	; (8001b80 <UART_ReceivedMSG+0x160>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 f8e1 	bl	8001bf8 <Get_DMA_Flag_Status>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f040 809c 	bne.w	8001b76 <UART_ReceivedMSG+0x156>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 8001a3e:	4b50      	ldr	r3, [pc, #320]	; (8001b80 <UART_ReceivedMSG+0x160>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f9ca 	bl	8001ddc <Get_DMA_Counter>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001a50:	83bb      	strh	r3, [r7, #28]

    if (dma_counter >= UartEngine.StartOfMsg)
 8001a52:	4b4c      	ldr	r3, [pc, #304]	; (8001b84 <UART_ReceivedMSG+0x164>)
 8001a54:	889b      	ldrh	r3, [r3, #4]
 8001a56:	8bba      	ldrh	r2, [r7, #28]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d305      	bcc.n	8001a68 <UART_ReceivedMSG+0x48>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 8001a5c:	4b49      	ldr	r3, [pc, #292]	; (8001b84 <UART_ReceivedMSG+0x164>)
 8001a5e:	889b      	ldrh	r3, [r3, #4]
 8001a60:	8bba      	ldrh	r2, [r7, #28]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	843b      	strh	r3, [r7, #32]
 8001a66:	e007      	b.n	8001a78 <UART_ReceivedMSG+0x58>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 8001a68:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <UART_ReceivedMSG+0x164>)
 8001a6a:	889b      	ldrh	r3, [r3, #4]
 8001a6c:	8bba      	ldrh	r2, [r7, #28]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a76:	843b      	strh	r3, [r7, #32]
    }

    j = UartEngine.StartOfMsg;
 8001a78:	4b42      	ldr	r3, [pc, #264]	; (8001b84 <UART_ReceivedMSG+0x164>)
 8001a7a:	889b      	ldrh	r3, [r3, #4]
 8001a7c:	84bb      	strh	r3, [r7, #36]	; 0x24

    for (k = 0; k < length; k++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	847b      	strh	r3, [r7, #34]	; 0x22
 8001a82:	e06d      	b.n	8001b60 <UART_ReceivedMSG+0x140>
    {
      data = UartRxBuffer[j];
 8001a84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a86:	4a40      	ldr	r2, [pc, #256]	; (8001b88 <UART_ReceivedMSG+0x168>)
 8001a88:	5cd3      	ldrb	r3, [r2, r3]
 8001a8a:	76fb      	strb	r3, [r7, #27]
      j++;
 8001a8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a8e:	3301      	adds	r3, #1
 8001a90:	84bb      	strh	r3, [r7, #36]	; 0x24

      if (j >= (uint16_t)UART_RxBufferSize)
 8001a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a98:	d301      	bcc.n	8001a9e <UART_ReceivedMSG+0x7e>
      {
        j = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      if (data == (uint8_t)TMsg_EOF)
 8001a9e:	7efb      	ldrb	r3, [r7, #27]
 8001aa0:	2bf0      	cmp	r3, #240	; 0xf0
 8001aa2:	d15a      	bne.n	8001b5a <UART_ReceivedMSG+0x13a>
      {
        j = UartEngine.StartOfMsg;
 8001aa4:	4b37      	ldr	r3, [pc, #220]	; (8001b84 <UART_ReceivedMSG+0x164>)
 8001aa6:	889b      	ldrh	r3, [r3, #4]
 8001aa8:	84bb      	strh	r3, [r7, #36]	; 0x24

        for (i = 0; i < k; i += inc)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001aae:	e03a      	b.n	8001b26 <UART_ReceivedMSG+0x106>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 8001ab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aba:	833b      	strh	r3, [r7, #24]

          if (source >= TMsg_MaxLen)
 8001abc:	8bfb      	ldrh	r3, [r7, #30]
 8001abe:	2bff      	cmp	r3, #255	; 0xff
 8001ac0:	d904      	bls.n	8001acc <UART_ReceivedMSG+0xac>
          {
            UartEngine.StartOfMsg = j;
 8001ac2:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <UART_ReceivedMSG+0x164>)
 8001ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ac6:	8093      	strh	r3, [r2, #4]
            return 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e055      	b.n	8001b78 <UART_ReceivedMSG+0x158>
          }

          Source0 = UartRxBuffer[j];
 8001acc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ace:	4a2e      	ldr	r2, [pc, #184]	; (8001b88 <UART_ReceivedMSG+0x168>)
 8001ad0:	5cd3      	ldrb	r3, [r2, r3]
 8001ad2:	75fb      	strb	r3, [r7, #23]
          Source1 = UartRxBuffer[j2];
 8001ad4:	8b3b      	ldrh	r3, [r7, #24]
 8001ad6:	4a2c      	ldr	r2, [pc, #176]	; (8001b88 <UART_ReceivedMSG+0x168>)
 8001ad8:	5cd3      	ldrb	r3, [r2, r3]
 8001ada:	75bb      	strb	r3, [r7, #22]
          Dest    = &Msg->Data[source];
 8001adc:	8bfb      	ldrh	r3, [r7, #30]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 8001ae6:	7db9      	ldrb	r1, [r7, #22]
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f001 f9d7 	bl	8002ea0 <ReverseByteStuffCopyByte2>
 8001af2:	4603      	mov	r3, r0
 8001af4:	73fb      	strb	r3, [r7, #15]

          if (inc == 0U)
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d104      	bne.n	8001b06 <UART_ReceivedMSG+0xe6>
          {
            UartEngine.StartOfMsg = j2;
 8001afc:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <UART_ReceivedMSG+0x164>)
 8001afe:	8b3b      	ldrh	r3, [r7, #24]
 8001b00:	8093      	strh	r3, [r2, #4]
            return 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e038      	b.n	8001b78 <UART_ReceivedMSG+0x158>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b14:	84bb      	strh	r3, [r7, #36]	; 0x24
          source++;
 8001b16:	8bfb      	ldrh	r3, [r7, #30]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	83fb      	strh	r3, [r7, #30]
        for (i = 0; i < k; i += inc)
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b22:	4413      	add	r3, r2
 8001b24:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001b28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d3c0      	bcc.n	8001ab0 <UART_ReceivedMSG+0x90>
        }

        Msg->Len = source;
 8001b2e:	8bfa      	ldrh	r2, [r7, #30]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 8001b34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b36:	3301      	adds	r3, #1
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b3e:	84bb      	strh	r3, [r7, #36]	; 0x24
        UartEngine.StartOfMsg = j;
 8001b40:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <UART_ReceivedMSG+0x164>)
 8001b42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b44:	8093      	strh	r3, [r2, #4]

        if (CHK_CheckAndRemove(Msg) != 0) /* check message integrity */
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f001 f9fb 	bl	8002f42 <CHK_CheckAndRemove>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <UART_ReceivedMSG+0x136>
        {
          return 1;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e010      	b.n	8001b78 <UART_ReceivedMSG+0x158>
        }
        else
        {
          return 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e00e      	b.n	8001b78 <UART_ReceivedMSG+0x158>
    for (k = 0; k < length; k++)
 8001b5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001b60:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001b62:	8c3b      	ldrh	r3, [r7, #32]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d38d      	bcc.n	8001a84 <UART_ReceivedMSG+0x64>
        }
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 8001b68:	8c3b      	ldrh	r3, [r7, #32]
 8001b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b6e:	d902      	bls.n	8001b76 <UART_ReceivedMSG+0x156>
    {
      UartEngine.StartOfMsg = dma_counter;
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <UART_ReceivedMSG+0x164>)
 8001b72:	8bbb      	ldrh	r3, [r7, #28]
 8001b74:	8093      	strh	r3, [r2, #4]
    }
  }

  return 0;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3728      	adds	r7, #40	; 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20001ae8 	.word	0x20001ae8
 8001b84:	200019a4 	.word	0x200019a4
 8001b88:	200017a4 	.word	0x200017a4

08001b8c <UART_SendMsg>:
 * @brief  Send a message via UART
 * @param  Msg the pointer to the message to be sent
 * @retval None
 */
void UART_SendMsg(TMsg *Msg)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f001 f9aa 	bl	8002eee <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4807      	ldr	r0, [pc, #28]	; (8001bbc <UART_SendMsg+0x30>)
 8001b9e:	f001 f951 	bl	8002e44 <ByteStuffCopy>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 8001ba6:	89fa      	ldrh	r2, [r7, #14]
 8001ba8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bac:	4903      	ldr	r1, [pc, #12]	; (8001bbc <UART_SendMsg+0x30>)
 8001bae:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <UART_SendMsg+0x34>)
 8001bb0:	f00b fa9c 	bl	800d0ec <HAL_UART_Transmit>
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200008d0 	.word	0x200008d0
 8001bc0:	20001ae8 	.word	0x20001ae8

08001bc4 <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <UART_StartReceiveMsg+0x2c>)
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <UART_StartReceiveMsg+0x30>)
 8001bcc:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <UART_StartReceiveMsg+0x2c>)
 8001bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <UART_StartReceiveMsg+0x2c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8001be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be4:	4903      	ldr	r1, [pc, #12]	; (8001bf4 <UART_StartReceiveMsg+0x30>)
 8001be6:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <UART_StartReceiveMsg+0x2c>)
 8001be8:	f00b fb14 	bl	800d214 <HAL_UART_Receive_DMA>
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20001ae8 	.word	0x20001ae8
 8001bf4:	200017a4 	.word	0x200017a4

08001bf8 <Get_DMA_Flag_Status>:
 * @brief  Get the DMA Stream pending flags
 * @param  handle_dma DMA handle
 * @retval The state of FLAG (SET or RESET)
 */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b66      	ldr	r3, [pc, #408]	; (8001da0 <Get_DMA_Flag_Status+0x1a8>)
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d961      	bls.n	8001cd0 <Get_DMA_Flag_Status+0xd8>
 8001c0c:	4b65      	ldr	r3, [pc, #404]	; (8001da4 <Get_DMA_Flag_Status+0x1ac>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4964      	ldr	r1, [pc, #400]	; (8001da8 <Get_DMA_Flag_Status+0x1b0>)
 8001c16:	428b      	cmp	r3, r1
 8001c18:	d057      	beq.n	8001cca <Get_DMA_Flag_Status+0xd2>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4963      	ldr	r1, [pc, #396]	; (8001dac <Get_DMA_Flag_Status+0x1b4>)
 8001c20:	428b      	cmp	r3, r1
 8001c22:	d050      	beq.n	8001cc6 <Get_DMA_Flag_Status+0xce>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4961      	ldr	r1, [pc, #388]	; (8001db0 <Get_DMA_Flag_Status+0x1b8>)
 8001c2a:	428b      	cmp	r3, r1
 8001c2c:	d049      	beq.n	8001cc2 <Get_DMA_Flag_Status+0xca>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4960      	ldr	r1, [pc, #384]	; (8001db4 <Get_DMA_Flag_Status+0x1bc>)
 8001c34:	428b      	cmp	r3, r1
 8001c36:	d042      	beq.n	8001cbe <Get_DMA_Flag_Status+0xc6>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	495e      	ldr	r1, [pc, #376]	; (8001db8 <Get_DMA_Flag_Status+0x1c0>)
 8001c3e:	428b      	cmp	r3, r1
 8001c40:	d03a      	beq.n	8001cb8 <Get_DMA_Flag_Status+0xc0>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	495d      	ldr	r1, [pc, #372]	; (8001dbc <Get_DMA_Flag_Status+0x1c4>)
 8001c48:	428b      	cmp	r3, r1
 8001c4a:	d032      	beq.n	8001cb2 <Get_DMA_Flag_Status+0xba>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	495b      	ldr	r1, [pc, #364]	; (8001dc0 <Get_DMA_Flag_Status+0x1c8>)
 8001c52:	428b      	cmp	r3, r1
 8001c54:	d02a      	beq.n	8001cac <Get_DMA_Flag_Status+0xb4>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	495a      	ldr	r1, [pc, #360]	; (8001dc4 <Get_DMA_Flag_Status+0x1cc>)
 8001c5c:	428b      	cmp	r3, r1
 8001c5e:	d022      	beq.n	8001ca6 <Get_DMA_Flag_Status+0xae>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4958      	ldr	r1, [pc, #352]	; (8001dc8 <Get_DMA_Flag_Status+0x1d0>)
 8001c66:	428b      	cmp	r3, r1
 8001c68:	d01a      	beq.n	8001ca0 <Get_DMA_Flag_Status+0xa8>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4957      	ldr	r1, [pc, #348]	; (8001dcc <Get_DMA_Flag_Status+0x1d4>)
 8001c70:	428b      	cmp	r3, r1
 8001c72:	d012      	beq.n	8001c9a <Get_DMA_Flag_Status+0xa2>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4955      	ldr	r1, [pc, #340]	; (8001dd0 <Get_DMA_Flag_Status+0x1d8>)
 8001c7a:	428b      	cmp	r3, r1
 8001c7c:	d00a      	beq.n	8001c94 <Get_DMA_Flag_Status+0x9c>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4954      	ldr	r1, [pc, #336]	; (8001dd4 <Get_DMA_Flag_Status+0x1dc>)
 8001c84:	428b      	cmp	r3, r1
 8001c86:	d102      	bne.n	8001c8e <Get_DMA_Flag_Status+0x96>
 8001c88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001c8c:	e01e      	b.n	8001ccc <Get_DMA_Flag_Status+0xd4>
 8001c8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c92:	e01b      	b.n	8001ccc <Get_DMA_Flag_Status+0xd4>
 8001c94:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001c98:	e018      	b.n	8001ccc <Get_DMA_Flag_Status+0xd4>
 8001c9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c9e:	e015      	b.n	8001ccc <Get_DMA_Flag_Status+0xd4>
 8001ca0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ca4:	e012      	b.n	8001ccc <Get_DMA_Flag_Status+0xd4>
 8001ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001caa:	e00f      	b.n	8001ccc <Get_DMA_Flag_Status+0xd4>
 8001cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cb0:	e00c      	b.n	8001ccc <Get_DMA_Flag_Status+0xd4>
 8001cb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cb6:	e009      	b.n	8001ccc <Get_DMA_Flag_Status+0xd4>
 8001cb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cbc:	e006      	b.n	8001ccc <Get_DMA_Flag_Status+0xd4>
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	e004      	b.n	8001ccc <Get_DMA_Flag_Status+0xd4>
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	e002      	b.n	8001ccc <Get_DMA_Flag_Status+0xd4>
 8001cc6:	2308      	movs	r3, #8
 8001cc8:	e000      	b.n	8001ccc <Get_DMA_Flag_Status+0xd4>
 8001cca:	2308      	movs	r3, #8
 8001ccc:	4013      	ands	r3, r2
 8001cce:	e060      	b.n	8001d92 <Get_DMA_Flag_Status+0x19a>
 8001cd0:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <Get_DMA_Flag_Status+0x1e0>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4933      	ldr	r1, [pc, #204]	; (8001da8 <Get_DMA_Flag_Status+0x1b0>)
 8001cda:	428b      	cmp	r3, r1
 8001cdc:	d057      	beq.n	8001d8e <Get_DMA_Flag_Status+0x196>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4932      	ldr	r1, [pc, #200]	; (8001dac <Get_DMA_Flag_Status+0x1b4>)
 8001ce4:	428b      	cmp	r3, r1
 8001ce6:	d050      	beq.n	8001d8a <Get_DMA_Flag_Status+0x192>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4930      	ldr	r1, [pc, #192]	; (8001db0 <Get_DMA_Flag_Status+0x1b8>)
 8001cee:	428b      	cmp	r3, r1
 8001cf0:	d049      	beq.n	8001d86 <Get_DMA_Flag_Status+0x18e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	492f      	ldr	r1, [pc, #188]	; (8001db4 <Get_DMA_Flag_Status+0x1bc>)
 8001cf8:	428b      	cmp	r3, r1
 8001cfa:	d042      	beq.n	8001d82 <Get_DMA_Flag_Status+0x18a>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	492d      	ldr	r1, [pc, #180]	; (8001db8 <Get_DMA_Flag_Status+0x1c0>)
 8001d02:	428b      	cmp	r3, r1
 8001d04:	d03a      	beq.n	8001d7c <Get_DMA_Flag_Status+0x184>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	492c      	ldr	r1, [pc, #176]	; (8001dbc <Get_DMA_Flag_Status+0x1c4>)
 8001d0c:	428b      	cmp	r3, r1
 8001d0e:	d032      	beq.n	8001d76 <Get_DMA_Flag_Status+0x17e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	492a      	ldr	r1, [pc, #168]	; (8001dc0 <Get_DMA_Flag_Status+0x1c8>)
 8001d16:	428b      	cmp	r3, r1
 8001d18:	d02a      	beq.n	8001d70 <Get_DMA_Flag_Status+0x178>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4929      	ldr	r1, [pc, #164]	; (8001dc4 <Get_DMA_Flag_Status+0x1cc>)
 8001d20:	428b      	cmp	r3, r1
 8001d22:	d022      	beq.n	8001d6a <Get_DMA_Flag_Status+0x172>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4927      	ldr	r1, [pc, #156]	; (8001dc8 <Get_DMA_Flag_Status+0x1d0>)
 8001d2a:	428b      	cmp	r3, r1
 8001d2c:	d01a      	beq.n	8001d64 <Get_DMA_Flag_Status+0x16c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4926      	ldr	r1, [pc, #152]	; (8001dcc <Get_DMA_Flag_Status+0x1d4>)
 8001d34:	428b      	cmp	r3, r1
 8001d36:	d012      	beq.n	8001d5e <Get_DMA_Flag_Status+0x166>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4924      	ldr	r1, [pc, #144]	; (8001dd0 <Get_DMA_Flag_Status+0x1d8>)
 8001d3e:	428b      	cmp	r3, r1
 8001d40:	d00a      	beq.n	8001d58 <Get_DMA_Flag_Status+0x160>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4923      	ldr	r1, [pc, #140]	; (8001dd4 <Get_DMA_Flag_Status+0x1dc>)
 8001d48:	428b      	cmp	r3, r1
 8001d4a:	d102      	bne.n	8001d52 <Get_DMA_Flag_Status+0x15a>
 8001d4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001d50:	e01e      	b.n	8001d90 <Get_DMA_Flag_Status+0x198>
 8001d52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d56:	e01b      	b.n	8001d90 <Get_DMA_Flag_Status+0x198>
 8001d58:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001d5c:	e018      	b.n	8001d90 <Get_DMA_Flag_Status+0x198>
 8001d5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d62:	e015      	b.n	8001d90 <Get_DMA_Flag_Status+0x198>
 8001d64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d68:	e012      	b.n	8001d90 <Get_DMA_Flag_Status+0x198>
 8001d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d6e:	e00f      	b.n	8001d90 <Get_DMA_Flag_Status+0x198>
 8001d70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d74:	e00c      	b.n	8001d90 <Get_DMA_Flag_Status+0x198>
 8001d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d7a:	e009      	b.n	8001d90 <Get_DMA_Flag_Status+0x198>
 8001d7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d80:	e006      	b.n	8001d90 <Get_DMA_Flag_Status+0x198>
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	e004      	b.n	8001d90 <Get_DMA_Flag_Status+0x198>
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	e002      	b.n	8001d90 <Get_DMA_Flag_Status+0x198>
 8001d8a:	2308      	movs	r3, #8
 8001d8c:	e000      	b.n	8001d90 <Get_DMA_Flag_Status+0x198>
 8001d8e:	2308      	movs	r3, #8
 8001d90:	4013      	ands	r3, r2
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40020080 	.word	0x40020080
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40020008 	.word	0x40020008
 8001dac:	40020408 	.word	0x40020408
 8001db0:	4002001c 	.word	0x4002001c
 8001db4:	4002041c 	.word	0x4002041c
 8001db8:	40020030 	.word	0x40020030
 8001dbc:	40020430 	.word	0x40020430
 8001dc0:	40020044 	.word	0x40020044
 8001dc4:	40020444 	.word	0x40020444
 8001dc8:	40020058 	.word	0x40020058
 8001dcc:	40020458 	.word	0x40020458
 8001dd0:	4002006c 	.word	0x4002006c
 8001dd4:	4002046c 	.word	0x4002046c
 8001dd8:	40020000 	.word	0x40020000

08001ddc <Get_DMA_Counter>:
 * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
 * @param  handle_dma DMA handle
 * @retval The number of remaining data units in the current DMA Stream transfer
 */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <BUILD_REPLY_HEADER>:
 * @brief  Build the reply header
 * @param  Msg the pointer to the message to be built
 * @retval None
 */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	795a      	ldrb	r2, [r3, #5]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2232      	movs	r2, #50	; 0x32
 8001e0a:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	799b      	ldrb	r3, [r3, #6]
 8001e10:	3b80      	subs	r3, #128	; 0x80
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	719a      	strb	r2, [r3, #6]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <INIT_STREAMING_HEADER>:
 * @brief  Initialize the streaming header
 * @param  Msg the pointer to the header to be initialized
 * @retval None
 */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <INIT_STREAMING_HEADER+0x30>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2232      	movs	r2, #50	; 0x32
 8001e3a:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2208      	movs	r2, #8
 8001e40:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2203      	movs	r2, #3
 8001e46:	601a      	str	r2, [r3, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	20000008 	.word	0x20000008

08001e58 <HandleMSG>:
 */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SouceAddr | CMD | PAYLOAD
 *      1          1        1       N
 */
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b098      	sub	sp, #96	; 0x60
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  int ret = 1;
 8001e60:	2301      	movs	r3, #1
 8001e62:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i;
  char ps[64];
  uint32_t ps_len = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
  static uint32_t sensors_enabled_prev = 0;
  int32_t msg_offset;
  uint32_t msg_count;

  if (Msg->Len < 2U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d801      	bhi.n	8001e74 <HandleMSG+0x1c>
  {
    return 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e36f      	b.n	8002554 <HandleMSG+0x6fc>
  }

  if (Msg->Data[0] != DEV_ADDR)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	791b      	ldrb	r3, [r3, #4]
 8001e78:	2b32      	cmp	r3, #50	; 0x32
 8001e7a:	d001      	beq.n	8001e80 <HandleMSG+0x28>
  {
    return 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e369      	b.n	8002554 <HandleMSG+0x6fc>
  }

  switch (Msg->Data[2])   /* CMD */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	799b      	ldrb	r3, [r3, #6]
 8001e84:	2b12      	cmp	r3, #18
 8001e86:	dc6b      	bgt.n	8001f60 <HandleMSG+0x108>
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	dc3d      	bgt.n	8001f08 <HandleMSG+0xb0>
 8001e8c:	e35e      	b.n	800254c <HandleMSG+0x6f4>
 8001e8e:	3b60      	subs	r3, #96	; 0x60
 8001e90:	2b1a      	cmp	r3, #26
 8001e92:	f200 835b 	bhi.w	800254c <HandleMSG+0x6f4>
 8001e96:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <HandleMSG+0x44>)
 8001e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9c:	08002003 	.word	0x08002003
 8001ea0:	0800254d 	.word	0x0800254d
 8001ea4:	08002031 	.word	0x08002031
 8001ea8:	0800254d 	.word	0x0800254d
 8001eac:	0800254d 	.word	0x0800254d
 8001eb0:	0800254d 	.word	0x0800254d
 8001eb4:	0800254d 	.word	0x0800254d
 8001eb8:	0800254d 	.word	0x0800254d
 8001ebc:	0800254d 	.word	0x0800254d
 8001ec0:	0800254d 	.word	0x0800254d
 8001ec4:	0800254d 	.word	0x0800254d
 8001ec8:	0800254d 	.word	0x0800254d
 8001ecc:	0800254d 	.word	0x0800254d
 8001ed0:	0800254d 	.word	0x0800254d
 8001ed4:	0800254d 	.word	0x0800254d
 8001ed8:	0800254d 	.word	0x0800254d
 8001edc:	0800254d 	.word	0x0800254d
 8001ee0:	0800254d 	.word	0x0800254d
 8001ee4:	0800254d 	.word	0x0800254d
 8001ee8:	0800254d 	.word	0x0800254d
 8001eec:	0800254d 	.word	0x0800254d
 8001ef0:	0800254d 	.word	0x0800254d
 8001ef4:	0800205f 	.word	0x0800205f
 8001ef8:	0800254d 	.word	0x0800254d
 8001efc:	0800254d 	.word	0x0800254d
 8001f00:	0800254d 	.word	0x0800254d
 8001f04:	0800208d 	.word	0x0800208d
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	2b11      	cmp	r3, #17
 8001f0c:	f200 831e 	bhi.w	800254c <HandleMSG+0x6f4>
 8001f10:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <HandleMSG+0xc0>)
 8001f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f16:	bf00      	nop
 8001f18:	08001f6d 	.word	0x08001f6d
 8001f1c:	08001fa7 	.word	0x08001fa7
 8001f20:	0800254d 	.word	0x0800254d
 8001f24:	0800254d 	.word	0x0800254d
 8001f28:	0800254d 	.word	0x0800254d
 8001f2c:	0800254d 	.word	0x0800254d
 8001f30:	08002511 	.word	0x08002511
 8001f34:	080020bb 	.word	0x080020bb
 8001f38:	08002161 	.word	0x08002161
 8001f3c:	0800254d 	.word	0x0800254d
 8001f40:	0800254d 	.word	0x0800254d
 8001f44:	080021ab 	.word	0x080021ab
 8001f48:	0800254d 	.word	0x0800254d
 8001f4c:	08001f8d 	.word	0x08001f8d
 8001f50:	0800254d 	.word	0x0800254d
 8001f54:	080021f1 	.word	0x080021f1
 8001f58:	08002461 	.word	0x08002461
 8001f5c:	080024af 	.word	0x080024af
 8001f60:	2b7a      	cmp	r3, #122	; 0x7a
 8001f62:	f300 82f3 	bgt.w	800254c <HandleMSG+0x6f4>
 8001f66:	2b60      	cmp	r3, #96	; 0x60
 8001f68:	da91      	bge.n	8001e8e <HandleMSG+0x36>
 8001f6a:	e2ef      	b.n	800254c <HandleMSG+0x6f4>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d001      	beq.n	8001f78 <HandleMSG+0x120>
      {
        return 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	e2ed      	b.n	8002554 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff3c 	bl	8001df6 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2203      	movs	r2, #3
 8001f82:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fe01 	bl	8001b8c <UART_SendMsg>
      break;
 8001f8a:	e2e2      	b.n	8002552 <HandleMSG+0x6fa>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d001      	beq.n	8001f98 <HandleMSG+0x140>
      {
        return 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e2dd      	b.n	8002554 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff2c 	bl	8001df6 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	601a      	str	r2, [r3, #0]
      break;
 8001fa4:	e2d5      	b.n	8002552 <HandleMSG+0x6fa>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d001      	beq.n	8001fb2 <HandleMSG+0x15a>
      {
        return 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e2d0      	b.n	8002554 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ff1f 	bl	8001df6 <BUILD_REPLY_HEADER>

      Get_PresentationString(ps, &ps_len);
 8001fb8:	f107 020c 	add.w	r2, r7, #12
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fb22 	bl	800260c <Get_PresentationString>

      i = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 8001fcc:	e00d      	b.n	8001fea <HandleMSG+0x192>
      {
        Msg->Data[3U + i] = ps[i];
 8001fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fd0:	3303      	adds	r3, #3
 8001fd2:	f107 0110 	add.w	r1, r7, #16
 8001fd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fd8:	440a      	add	r2, r1
 8001fda:	7811      	ldrb	r1, [r2, #0]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	711a      	strb	r2, [r3, #4]
        i++;
 8001fe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d3ed      	bcc.n	8001fce <HandleMSG+0x176>
      }

      Msg->Len = 3U + i;
 8001ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ff4:	1cda      	adds	r2, r3, #3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fdc6 	bl	8001b8c <UART_SendMsg>
      break;
 8002000:	e2a7      	b.n	8002552 <HandleMSG+0x6fa>

    case CMD_PRESSURE_Init:
      if (Msg->Len < 3U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d801      	bhi.n	800200e <HandleMSG+0x1b6>
      {
        return 0;
 800200a:	2300      	movs	r3, #0
 800200c:	e2a2      	b.n	8002554 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fef1 	bl	8001df6 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], PRESS_UNICLEO_ID, 4);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3307      	adds	r3, #7
 8002018:	2204      	movs	r2, #4
 800201a:	2103      	movs	r1, #3
 800201c:	4618      	mov	r0, r3
 800201e:	f000 ffe0 	bl	8002fe2 <Serialize_s32>
      Msg->Len = 3 + 4;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2207      	movs	r2, #7
 8002026:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff fdaf 	bl	8001b8c <UART_SendMsg>
      break;
 800202e:	e290      	b.n	8002552 <HandleMSG+0x6fa>

    case CMD_HUMIDITY_TEMPERATURE_Init:
      if (Msg->Len < 3U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d801      	bhi.n	800203c <HandleMSG+0x1e4>
      {
        return 0;
 8002038:	2300      	movs	r3, #0
 800203a:	e28b      	b.n	8002554 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff feda 	bl	8001df6 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], HUM_TEMP_UNICLEO_ID, 4);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3307      	adds	r3, #7
 8002046:	2204      	movs	r2, #4
 8002048:	2101      	movs	r1, #1
 800204a:	4618      	mov	r0, r3
 800204c:	f000 ffc9 	bl	8002fe2 <Serialize_s32>
      Msg->Len = 3 + 4;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2207      	movs	r2, #7
 8002054:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff fd98 	bl	8001b8c <UART_SendMsg>
      break;
 800205c:	e279      	b.n	8002552 <HandleMSG+0x6fa>

    case CMD_ACCELERO_GYRO_Init:
      if (Msg->Len < 3U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d801      	bhi.n	800206a <HandleMSG+0x212>
      {
        return 0;
 8002066:	2300      	movs	r3, #0
 8002068:	e274      	b.n	8002554 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fec3 	bl	8001df6 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3307      	adds	r3, #7
 8002074:	2204      	movs	r2, #4
 8002076:	2103      	movs	r1, #3
 8002078:	4618      	mov	r0, r3
 800207a:	f000 ffb2 	bl	8002fe2 <Serialize_s32>
      Msg->Len = 3 + 4;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2207      	movs	r2, #7
 8002082:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff fd81 	bl	8001b8c <UART_SendMsg>
      break;
 800208a:	e262      	b.n	8002552 <HandleMSG+0x6fa>

    case CMD_MAGNETO_Init:
      if (Msg->Len < 3U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d801      	bhi.n	8002098 <HandleMSG+0x240>
      {
        return 0;
 8002094:	2300      	movs	r3, #0
 8002096:	e25d      	b.n	8002554 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff feac 	bl	8001df6 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3307      	adds	r3, #7
 80020a2:	2204      	movs	r2, #4
 80020a4:	2102      	movs	r1, #2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 ff9b 	bl	8002fe2 <Serialize_s32>
      Msg->Len = 3 + 4;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2207      	movs	r2, #7
 80020b0:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fd6a 	bl	8001b8c <UART_SendMsg>
      break;
 80020b8:	e24b      	b.n	8002552 <HandleMSG+0x6fa>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d801      	bhi.n	80020c6 <HandleMSG+0x26e>
      {
        return 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e246      	b.n	8002554 <HandleMSG+0x6fc>
      }

      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3307      	adds	r3, #7
 80020ca:	2104      	movs	r1, #4
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 ff62 	bl	8002f96 <Deserialize>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4a4d      	ldr	r2, [pc, #308]	; (800220c <HandleMSG+0x3b4>)
 80020d6:	6013      	str	r3, [r2, #0]

      /* Start enabled sensors */
      if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 80020d8:	4b4c      	ldr	r3, [pc, #304]	; (800220c <HandleMSG+0x3b4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HandleMSG+0x290>
      {
        BSP_SENSOR_PRESS_Enable();
 80020e4:	f000 fb16 	bl	8002714 <BSP_SENSOR_PRESS_Enable>
      }

      if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 80020e8:	4b48      	ldr	r3, [pc, #288]	; (800220c <HandleMSG+0x3b4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d101      	bne.n	80020f8 <HandleMSG+0x2a0>
      {
        BSP_SENSOR_TEMP_Enable();
 80020f4:	f000 fb16 	bl	8002724 <BSP_SENSOR_TEMP_Enable>
      }

      if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 80020f8:	4b44      	ldr	r3, [pc, #272]	; (800220c <HandleMSG+0x3b4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b04      	cmp	r3, #4
 8002102:	d101      	bne.n	8002108 <HandleMSG+0x2b0>
      {
        BSP_SENSOR_HUM_Enable();
 8002104:	f000 fb16 	bl	8002734 <BSP_SENSOR_HUM_Enable>
      }

      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 8002108:	4b40      	ldr	r3, [pc, #256]	; (800220c <HandleMSG+0x3b4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b10      	cmp	r3, #16
 8002112:	d101      	bne.n	8002118 <HandleMSG+0x2c0>
      {
        BSP_SENSOR_ACC_Enable();
 8002114:	f000 fae6 	bl	80026e4 <BSP_SENSOR_ACC_Enable>
      }

      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 8002118:	4b3c      	ldr	r3, [pc, #240]	; (800220c <HandleMSG+0x3b4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b20      	cmp	r3, #32
 8002122:	d101      	bne.n	8002128 <HandleMSG+0x2d0>
      {
        BSP_SENSOR_GYR_Enable();
 8002124:	f000 fae6 	bl	80026f4 <BSP_SENSOR_GYR_Enable>
      }

      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 8002128:	4b38      	ldr	r3, [pc, #224]	; (800220c <HandleMSG+0x3b4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002130:	2b40      	cmp	r3, #64	; 0x40
 8002132:	d101      	bne.n	8002138 <HandleMSG+0x2e0>
      {
        BSP_SENSOR_MAG_Enable();
 8002134:	f000 fae6 	bl	8002704 <BSP_SENSOR_MAG_Enable>
      }

      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 8002138:	4835      	ldr	r0, [pc, #212]	; (8002210 <HandleMSG+0x3b8>)
 800213a:	f00a faf5 	bl	800c728 <HAL_TIM_Base_Start_IT>
      DataLoggerActive = 1;
 800213e:	4b35      	ldr	r3, [pc, #212]	; (8002214 <HandleMSG+0x3bc>)
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]

      DataStreamingDest = Msg->Data[1];
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	795a      	ldrb	r2, [r3, #5]
 8002148:	4b33      	ldr	r3, [pc, #204]	; (8002218 <HandleMSG+0x3c0>)
 800214a:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff fe52 	bl	8001df6 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2203      	movs	r2, #3
 8002156:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff fd17 	bl	8001b8c <UART_SendMsg>
      break;
 800215e:	e1f8      	b.n	8002552 <HandleMSG+0x6fa>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d801      	bhi.n	800216c <HandleMSG+0x314>
      {
        return 0;
 8002168:	2300      	movs	r3, #0
 800216a:	e1f3      	b.n	8002554 <HandleMSG+0x6fc>
      }

      DataLoggerActive = 0;
 800216c:	4b29      	ldr	r3, [pc, #164]	; (8002214 <HandleMSG+0x3bc>)
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 8002172:	4827      	ldr	r0, [pc, #156]	; (8002210 <HandleMSG+0x3b8>)
 8002174:	f00a fb48 	bl	800c808 <HAL_TIM_Base_Stop_IT>

      /* Disable all sensors */
      BSP_SENSOR_ACC_Disable();
 8002178:	f000 fae4 	bl	8002744 <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 800217c:	f000 faea 	bl	8002754 <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 8002180:	f000 faf0 	bl	8002764 <BSP_SENSOR_MAG_Disable>
      BSP_SENSOR_PRESS_Disable();
 8002184:	f000 faf6 	bl	8002774 <BSP_SENSOR_PRESS_Disable>
      BSP_SENSOR_TEMP_Disable();
 8002188:	f000 fafc 	bl	8002784 <BSP_SENSOR_TEMP_Disable>
      BSP_SENSOR_HUM_Disable();
 800218c:	f000 fb02 	bl	8002794 <BSP_SENSOR_HUM_Disable>

      SensorsEnabled = 0;
 8002190:	4b1e      	ldr	r3, [pc, #120]	; (800220c <HandleMSG+0x3b4>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
      UseOfflineData = 0;
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <HandleMSG+0x3c4>)
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]

      BUILD_REPLY_HEADER(Msg);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff fe2a 	bl	8001df6 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fcf2 	bl	8001b8c <UART_SendMsg>
      break;
 80021a8:	e1d3      	b.n	8002552 <HandleMSG+0x6fa>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d801      	bhi.n	80021b6 <HandleMSG+0x35e>
      {
        return 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e1ce      	b.n	8002554 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff fe1d 	bl	8001df6 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2203      	movs	r2, #3
 80021c0:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	79d8      	ldrb	r0, [r3, #7]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7a19      	ldrb	r1, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7a5b      	ldrb	r3, [r3, #9]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f000 f9f2 	bl	80025b8 <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7a98      	ldrb	r0, [r3, #10]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7ad9      	ldrb	r1, [r3, #11]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7b1a      	ldrb	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7b5b      	ldrb	r3, [r3, #13]
 80021e4:	f000 f9be 	bl	8002564 <RTC_DateRegulate>
      UART_SendMsg(Msg);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff fccf 	bl	8001b8c <UART_SendMsg>
      break;
 80021ee:	e1b0      	b.n	8002552 <HandleMSG+0x6fa>

    case CMD_Offline_Data:
      if (Msg->Len < 55U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b36      	cmp	r3, #54	; 0x36
 80021f6:	d801      	bhi.n	80021fc <HandleMSG+0x3a4>
      {
        return 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	e1ab      	b.n	8002554 <HandleMSG+0x6fc>
      }

      msg_offset = 4;
 80021fc:	2304      	movs	r3, #4
 80021fe:	657b      	str	r3, [r7, #84]	; 0x54
      msg_count = (uint32_t)Msg->Data[3];
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	79db      	ldrb	r3, [r3, #7]
 8002204:	653b      	str	r3, [r7, #80]	; 0x50

      for (i = 0; i < msg_count; i++)
 8002206:	2300      	movs	r3, #0
 8002208:	65bb      	str	r3, [r7, #88]	; 0x58
 800220a:	e11a      	b.n	8002442 <HandleMSG+0x5ea>
 800220c:	20000664 	.word	0x20000664
 8002210:	200019d0 	.word	0x200019d0
 8002214:	20000661 	.word	0x20000661
 8002218:	20000008 	.word	0x20000008
 800221c:	20000669 	.word	0x20000669
      {
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 8002220:	4ba6      	ldr	r3, [pc, #664]	; (80024bc <HandleMSG+0x664>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2234      	movs	r2, #52	; 0x34
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	4aa5      	ldr	r2, [pc, #660]	; (80024c0 <HandleMSG+0x668>)
 800222c:	4413      	add	r3, r2
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002232:	440a      	add	r2, r1
 8002234:	3204      	adds	r2, #4
 8002236:	7812      	ldrb	r2, [r2, #0]
 8002238:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 800223a:	4ba0      	ldr	r3, [pc, #640]	; (80024bc <HandleMSG+0x664>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2234      	movs	r2, #52	; 0x34
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	4a9e      	ldr	r2, [pc, #632]	; (80024c0 <HandleMSG+0x668>)
 8002246:	4413      	add	r3, r2
 8002248:	3301      	adds	r3, #1
 800224a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800224c:	3201      	adds	r2, #1
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	440a      	add	r2, r1
 8002252:	3204      	adds	r2, #4
 8002254:	7812      	ldrb	r2, [r2, #0]
 8002256:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 8002258:	4b98      	ldr	r3, [pc, #608]	; (80024bc <HandleMSG+0x664>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2234      	movs	r2, #52	; 0x34
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	4a97      	ldr	r2, [pc, #604]	; (80024c0 <HandleMSG+0x668>)
 8002264:	4413      	add	r3, r2
 8002266:	3302      	adds	r3, #2
 8002268:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800226a:	3202      	adds	r2, #2
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	440a      	add	r2, r1
 8002270:	3204      	adds	r2, #4
 8002272:	7812      	ldrb	r2, [r2, #0]
 8002274:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 8002276:	4b91      	ldr	r3, [pc, #580]	; (80024bc <HandleMSG+0x664>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2234      	movs	r2, #52	; 0x34
 800227c:	fb02 f303 	mul.w	r3, r2, r3
 8002280:	4a8f      	ldr	r2, [pc, #572]	; (80024c0 <HandleMSG+0x668>)
 8002282:	4413      	add	r3, r2
 8002284:	3303      	adds	r3, #3
 8002286:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002288:	3203      	adds	r2, #3
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	440a      	add	r2, r1
 800228e:	3204      	adds	r2, #4
 8002290:	7812      	ldrb	r2, [r2, #0]
 8002292:	701a      	strb	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 8002294:	4b89      	ldr	r3, [pc, #548]	; (80024bc <HandleMSG+0x664>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2234      	movs	r2, #52	; 0x34
 800229a:	fb02 f303 	mul.w	r3, r2, r3
 800229e:	4a88      	ldr	r2, [pc, #544]	; (80024c0 <HandleMSG+0x668>)
 80022a0:	4413      	add	r3, r2
 80022a2:	3304      	adds	r3, #4
 80022a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022a6:	3204      	adds	r2, #4
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	440a      	add	r2, r1
 80022ac:	3204      	adds	r2, #4
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 80022b2:	4b82      	ldr	r3, [pc, #520]	; (80024bc <HandleMSG+0x664>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2234      	movs	r2, #52	; 0x34
 80022b8:	fb02 f303 	mul.w	r3, r2, r3
 80022bc:	3308      	adds	r3, #8
 80022be:	4a80      	ldr	r2, [pc, #512]	; (80024c0 <HandleMSG+0x668>)
 80022c0:	4413      	add	r3, r2
 80022c2:	3304      	adds	r3, #4
 80022c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022c6:	3208      	adds	r2, #8
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	440a      	add	r2, r1
 80022cc:	3204      	adds	r2, #4
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 80022d2:	4b7a      	ldr	r3, [pc, #488]	; (80024bc <HandleMSG+0x664>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2234      	movs	r2, #52	; 0x34
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	3308      	adds	r3, #8
 80022de:	4a78      	ldr	r2, [pc, #480]	; (80024c0 <HandleMSG+0x668>)
 80022e0:	4413      	add	r3, r2
 80022e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022e4:	320c      	adds	r2, #12
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	440a      	add	r2, r1
 80022ea:	3204      	adds	r2, #4
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 80022f0:	4b72      	ldr	r3, [pc, #456]	; (80024bc <HandleMSG+0x664>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2234      	movs	r2, #52	; 0x34
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	3310      	adds	r3, #16
 80022fc:	4a70      	ldr	r2, [pc, #448]	; (80024c0 <HandleMSG+0x668>)
 80022fe:	4413      	add	r3, r2
 8002300:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002302:	3210      	adds	r2, #16
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	440a      	add	r2, r1
 8002308:	3204      	adds	r2, #4
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 800230e:	4b6b      	ldr	r3, [pc, #428]	; (80024bc <HandleMSG+0x664>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2234      	movs	r2, #52	; 0x34
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	3310      	adds	r3, #16
 800231a:	4a69      	ldr	r2, [pc, #420]	; (80024c0 <HandleMSG+0x668>)
 800231c:	4413      	add	r3, r2
 800231e:	3304      	adds	r3, #4
 8002320:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002322:	3214      	adds	r2, #20
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	440a      	add	r2, r1
 8002328:	3204      	adds	r2, #4
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 800232e:	4b63      	ldr	r3, [pc, #396]	; (80024bc <HandleMSG+0x664>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2234      	movs	r2, #52	; 0x34
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	3318      	adds	r3, #24
 800233a:	4a61      	ldr	r2, [pc, #388]	; (80024c0 <HandleMSG+0x668>)
 800233c:	4413      	add	r3, r2
 800233e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002340:	3218      	adds	r2, #24
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	440a      	add	r2, r1
 8002346:	3204      	adds	r2, #4
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 800234c:	4b5b      	ldr	r3, [pc, #364]	; (80024bc <HandleMSG+0x664>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2234      	movs	r2, #52	; 0x34
 8002352:	fb02 f303 	mul.w	r3, r2, r3
 8002356:	3318      	adds	r3, #24
 8002358:	4a59      	ldr	r2, [pc, #356]	; (80024c0 <HandleMSG+0x668>)
 800235a:	4413      	add	r3, r2
 800235c:	3304      	adds	r3, #4
 800235e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002360:	321c      	adds	r2, #28
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	440a      	add	r2, r1
 8002366:	3204      	adds	r2, #4
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 800236c:	4b53      	ldr	r3, [pc, #332]	; (80024bc <HandleMSG+0x664>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2234      	movs	r2, #52	; 0x34
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	3320      	adds	r3, #32
 8002378:	4a51      	ldr	r2, [pc, #324]	; (80024c0 <HandleMSG+0x668>)
 800237a:	4413      	add	r3, r2
 800237c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800237e:	3220      	adds	r2, #32
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	440a      	add	r2, r1
 8002384:	3204      	adds	r2, #4
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 800238a:	4b4c      	ldr	r3, [pc, #304]	; (80024bc <HandleMSG+0x664>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2234      	movs	r2, #52	; 0x34
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	3320      	adds	r3, #32
 8002396:	4a4a      	ldr	r2, [pc, #296]	; (80024c0 <HandleMSG+0x668>)
 8002398:	4413      	add	r3, r2
 800239a:	3304      	adds	r3, #4
 800239c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800239e:	3224      	adds	r2, #36	; 0x24
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	440a      	add	r2, r1
 80023a4:	3204      	adds	r2, #4
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 80023aa:	4b44      	ldr	r3, [pc, #272]	; (80024bc <HandleMSG+0x664>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2234      	movs	r2, #52	; 0x34
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	3328      	adds	r3, #40	; 0x28
 80023b6:	4a42      	ldr	r2, [pc, #264]	; (80024c0 <HandleMSG+0x668>)
 80023b8:	4413      	add	r3, r2
 80023ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023bc:	3228      	adds	r2, #40	; 0x28
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	440a      	add	r2, r1
 80023c2:	3204      	adds	r2, #4
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 80023c8:	4b3c      	ldr	r3, [pc, #240]	; (80024bc <HandleMSG+0x664>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2234      	movs	r2, #52	; 0x34
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	3328      	adds	r3, #40	; 0x28
 80023d4:	4a3a      	ldr	r2, [pc, #232]	; (80024c0 <HandleMSG+0x668>)
 80023d6:	4413      	add	r3, r2
 80023d8:	3304      	adds	r3, #4
 80023da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023dc:	322c      	adds	r2, #44	; 0x2c
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	440a      	add	r2, r1
 80023e2:	3204      	adds	r2, #4
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 80023e8:	4b34      	ldr	r3, [pc, #208]	; (80024bc <HandleMSG+0x664>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2234      	movs	r2, #52	; 0x34
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	3330      	adds	r3, #48	; 0x30
 80023f4:	4a32      	ldr	r2, [pc, #200]	; (80024c0 <HandleMSG+0x668>)
 80023f6:	4413      	add	r3, r2
 80023f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023fa:	3230      	adds	r2, #48	; 0x30
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	440a      	add	r2, r1
 8002400:	3204      	adds	r2, #4
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	601a      	str	r2, [r3, #0]

        msg_offset += 52;
 8002406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002408:	3334      	adds	r3, #52	; 0x34
 800240a:	657b      	str	r3, [r7, #84]	; 0x54

        OfflineDataCount++;
 800240c:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HandleMSG+0x66c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	4a2c      	ldr	r2, [pc, #176]	; (80024c4 <HandleMSG+0x66c>)
 8002414:	6013      	str	r3, [r2, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 8002416:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <HandleMSG+0x66c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b08      	cmp	r3, #8
 800241c:	dd02      	ble.n	8002424 <HandleMSG+0x5cc>
        {
          OfflineDataCount = OFFLINE_DATA_SIZE;
 800241e:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <HandleMSG+0x66c>)
 8002420:	2208      	movs	r2, #8
 8002422:	601a      	str	r2, [r3, #0]
        }

        OfflineDataWriteIndex++;
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <HandleMSG+0x664>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3301      	adds	r3, #1
 800242a:	4a24      	ldr	r2, [pc, #144]	; (80024bc <HandleMSG+0x664>)
 800242c:	6013      	str	r3, [r2, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <HandleMSG+0x664>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b07      	cmp	r3, #7
 8002434:	dd02      	ble.n	800243c <HandleMSG+0x5e4>
        {
          OfflineDataWriteIndex = 0;
 8002436:	4b21      	ldr	r3, [pc, #132]	; (80024bc <HandleMSG+0x664>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
      for (i = 0; i < msg_count; i++)
 800243c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800243e:	3301      	adds	r3, #1
 8002440:	65bb      	str	r3, [r7, #88]	; 0x58
 8002442:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002446:	429a      	cmp	r2, r3
 8002448:	f4ff aeea 	bcc.w	8002220 <HandleMSG+0x3c8>
        }
      }

      SensorReadRequest = 1;
 800244c:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <HandleMSG+0x670>)
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]

      /* Mark Msg as read */
      BUILD_REPLY_HEADER(Msg);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff fccf 	bl	8001df6 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2203      	movs	r2, #3
 800245c:	601a      	str	r2, [r3, #0]
      break;
 800245e:	e078      	b.n	8002552 <HandleMSG+0x6fa>

    case CMD_Use_Offline_Data:
      if (Msg->Len < 4U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d801      	bhi.n	800246c <HandleMSG+0x614>
      {
        return 0;
 8002468:	2300      	movs	r3, #0
 800246a:	e073      	b.n	8002554 <HandleMSG+0x6fc>
      }

      if (Msg->Data[3] == 1U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	79db      	ldrb	r3, [r3, #7]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d10e      	bne.n	8002492 <HandleMSG+0x63a>
      {
        UseOfflineData = 1U;
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HandleMSG+0x674>)
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HandleMSG+0x678>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a15      	ldr	r2, [pc, #84]	; (80024d4 <HandleMSG+0x67c>)
 8002480:	6013      	str	r3, [r2, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <HandleMSG+0x678>)
 8002484:	f04f 32ff 	mov.w	r2, #4294967295
 8002488:	601a      	str	r2, [r3, #0]
        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 800248a:	4813      	ldr	r0, [pc, #76]	; (80024d8 <HandleMSG+0x680>)
 800248c:	f00a f9bc 	bl	800c808 <HAL_TIM_Base_Stop_IT>
 8002490:	e006      	b.n	80024a0 <HandleMSG+0x648>
      }
      else
      {
        UseOfflineData = 0U;
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HandleMSG+0x674>)
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 8002498:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <HandleMSG+0x67c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0c      	ldr	r2, [pc, #48]	; (80024d0 <HandleMSG+0x678>)
 800249e:	6013      	str	r3, [r2, #0]
      }

      BUILD_REPLY_HEADER(Msg);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff fca8 	bl	8001df6 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fb70 	bl	8001b8c <UART_SendMsg>
      break;
 80024ac:	e051      	b.n	8002552 <HandleMSG+0x6fa>

    case CMD_Get_App_Info:
      if (Msg->Len < 3U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d812      	bhi.n	80024dc <HandleMSG+0x684>
      {
        return 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e04c      	b.n	8002554 <HandleMSG+0x6fc>
 80024ba:	bf00      	nop
 80024bc:	20000670 	.word	0x20000670
 80024c0:	200015dc 	.word	0x200015dc
 80024c4:	20000674 	.word	0x20000674
 80024c8:	20000668 	.word	0x20000668
 80024cc:	20000669 	.word	0x20000669
 80024d0:	20000664 	.word	0x20000664
 80024d4:	20000ad0 	.word	0x20000ad0
 80024d8:	200019d0 	.word	0x200019d0
      }

      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3307      	adds	r3, #7
 80024e0:	4a1e      	ldr	r2, [pc, #120]	; (800255c <HandleMSG+0x704>)
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	4611      	mov	r1, r2
 80024e6:	2204      	movs	r2, #4
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fd7a 	bl	8002fe2 <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	330b      	adds	r3, #11
 80024f2:	2201      	movs	r2, #1
 80024f4:	2130      	movs	r1, #48	; 0x30
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fd73 	bl	8002fe2 <Serialize_s32>

      BUILD_REPLY_HEADER(Msg);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fc7a 	bl	8001df6 <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2208      	movs	r2, #8
 8002506:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff fb3f 	bl	8001b8c <UART_SendMsg>
      break;
 800250e:	e020      	b.n	8002552 <HandleMSG+0x6fa>

    case CMD_ChangeSF:
      if (Msg->Len < 3U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d801      	bhi.n	800251c <HandleMSG+0x6c4>
      {
        return 0;
 8002518:	2300      	movs	r3, #0
 800251a:	e01b      	b.n	8002554 <HandleMSG+0x6fc>
      }

      Enabled6X = Msg->Data[3];
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	79da      	ldrb	r2, [r3, #7]
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HandleMSG+0x708>)
 8002522:	701a      	strb	r2, [r3, #0]

      if (Enabled6X == 1U)
 8002524:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <HandleMSG+0x708>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d104      	bne.n	8002536 <HandleMSG+0x6de>
      {
        MotionFX_manager_stop_9X();
 800252c:	f000 fc1e 	bl	8002d6c <MotionFX_manager_stop_9X>
        MotionFX_manager_start_6X();
 8002530:	f000 fbfe 	bl	8002d30 <MotionFX_manager_start_6X>
 8002534:	e003      	b.n	800253e <HandleMSG+0x6e6>
      }
      else
      {
        MotionFX_manager_stop_6X();
 8002536:	f000 fc05 	bl	8002d44 <MotionFX_manager_stop_6X>
        MotionFX_manager_start_9X();
 800253a:	f000 fc0d 	bl	8002d58 <MotionFX_manager_start_9X>
      }

      BUILD_REPLY_HEADER(Msg);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff fc59 	bl	8001df6 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fb21 	bl	8001b8c <UART_SendMsg>
      break;
 800254a:	e002      	b.n	8002552 <HandleMSG+0x6fa>

    default:
      ret = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8002550:	bf00      	nop
  }

  return ret;
 8002552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8002554:	4618      	mov	r0, r3
 8002556:	3760      	adds	r7, #96	; 0x60
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000004 	.word	0x20000004
 8002560:	20000678 	.word	0x20000678

08002564 <RTC_DateRegulate>:
 * @param  d the day value to be set
 * @param  dw the day-week value to be set
 * @retval None
 */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	4604      	mov	r4, r0
 800256c:	4608      	mov	r0, r1
 800256e:	4611      	mov	r1, r2
 8002570:	461a      	mov	r2, r3
 8002572:	4623      	mov	r3, r4
 8002574:	71fb      	strb	r3, [r7, #7]
 8002576:	4603      	mov	r3, r0
 8002578:	71bb      	strb	r3, [r7, #6]
 800257a:	460b      	mov	r3, r1
 800257c:	717b      	strb	r3, [r7, #5]
 800257e:	4613      	mov	r3, r2
 8002580:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	73fb      	strb	r3, [r7, #15]
  sdatestructure.Month   = m;
 8002586:	79bb      	ldrb	r3, [r7, #6]
 8002588:	737b      	strb	r3, [r7, #13]
  sdatestructure.Date    = d;
 800258a:	797b      	ldrb	r3, [r7, #5]
 800258c:	73bb      	strb	r3, [r7, #14]
  sdatestructure.WeekDay = dw;
 800258e:	793b      	ldrb	r3, [r7, #4]
 8002590:	733b      	strb	r3, [r7, #12]

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 8002592:	f107 030c 	add.w	r3, r7, #12
 8002596:	2200      	movs	r2, #0
 8002598:	4619      	mov	r1, r3
 800259a:	4806      	ldr	r0, [pc, #24]	; (80025b4 <RTC_DateRegulate+0x50>)
 800259c:	f009 fec6 	bl	800c32c <HAL_RTC_SetDate>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <RTC_DateRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 80025a6:	f000 fb39 	bl	8002c1c <Error_Handler>
  }
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd90      	pop	{r4, r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20001a1c 	.word	0x20001a1c

080025b8 <RTC_TimeRegulate>:
 * @param  mm the minute value to be set
 * @param  ss the second value to be set
 * @retval None
 */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
 80025c2:	460b      	mov	r3, r1
 80025c4:	71bb      	strb	r3, [r7, #6]
 80025c6:	4613      	mov	r3, r2
 80025c8:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	733b      	strb	r3, [r7, #12]
  stimestructure.Minutes        = mm;
 80025ce:	79bb      	ldrb	r3, [r7, #6]
 80025d0:	737b      	strb	r3, [r7, #13]
  stimestructure.Seconds        = ss;
 80025d2:	797b      	ldrb	r3, [r7, #5]
 80025d4:	73bb      	strb	r3, [r7, #14]
  stimestructure.SubSeconds     = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 80025da:	2300      	movs	r3, #0
 80025dc:	73fb      	strb	r3, [r7, #15]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 80025e6:	f107 030c 	add.w	r3, r7, #12
 80025ea:	2200      	movs	r2, #0
 80025ec:	4619      	mov	r1, r3
 80025ee:	4806      	ldr	r0, [pc, #24]	; (8002608 <RTC_TimeRegulate+0x50>)
 80025f0:	f009 fda3 	bl	800c13a <HAL_RTC_SetTime>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <RTC_TimeRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 80025fa:	f000 fb0f 	bl	8002c1c <Error_Handler>
  }
}
 80025fe:	bf00      	nop
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20001a1c 	.word	0x20001a1c

0800260c <Get_PresentationString>:
 * @param  PresentationString the Presentation string
 * @param  Length the length of Presentation string
 * @retval None
 */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 800260c:	b5b0      	push	{r4, r5, r7, lr}
 800260e:	b09e      	sub	sp, #120	; 0x78
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  const uint8_t string_pointer_shift = strlen("ST MotionXX v"); /* Shift string pointer by this amount */
 8002616:	230d      	movs	r3, #13
 8002618:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
  const char ps[] = {"MEMS shield demo,4,"FW_VERSION",%s,"BOARD_NAME};
 8002620:	4b17      	ldr	r3, [pc, #92]	; (8002680 <Get_PresentationString+0x74>)
 8002622:	f107 0408 	add.w	r4, r7, #8
 8002626:	461d      	mov	r5, r3
 8002628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800262a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800262c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800262e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002630:	682b      	ldr	r3, [r5, #0]
 8002632:	6023      	str	r3, [r4, #0]

  MotionFX_manager_get_version(lib_version_string, &lib_version_len);
 8002634:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002638:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fb9e 	bl	8002d80 <MotionFX_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0 resp. ST MotionXXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 8002644:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8002648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264a:	429a      	cmp	r2, r3
 800264c:	da06      	bge.n	800265c <Get_PresentationString+0x50>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
 800264e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002652:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002656:	4413      	add	r3, r2
 8002658:	677b      	str	r3, [r7, #116]	; 0x74
 800265a:	e002      	b.n	8002662 <Get_PresentationString+0x56>
  }
  else
  {
    lib_version_num = lib_version_string;
 800265c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002660:	677b      	str	r3, [r7, #116]	; 0x74
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 8002662:	f107 0208 	add.w	r2, r7, #8
 8002666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002668:	2140      	movs	r1, #64	; 0x40
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f015 ff6e 	bl	801854c <sniprintf>
 8002670:	4603      	mov	r3, r0
 8002672:	461a      	mov	r2, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	601a      	str	r2, [r3, #0]
}
 8002678:	bf00      	nop
 800267a:	3778      	adds	r7, #120	; 0x78
 800267c:	46bd      	mov	sp, r7
 800267e:	bdb0      	pop	{r4, r5, r7, pc}
 8002680:	0801abd8 	.word	0x0801abd8

08002684 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8002688:	2102      	movs	r1, #2
 800268a:	2000      	movs	r0, #0
 800268c:	f005 fd26 	bl	80080dc <IKS01A2_MOTION_SENSOR_Init>
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}

08002694 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8002698:	2101      	movs	r1, #1
 800269a:	2000      	movs	r0, #0
 800269c:	f005 fd1e 	bl	80080dc <IKS01A2_MOTION_SENSOR_Init>
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 80026a8:	2104      	movs	r1, #4
 80026aa:	2002      	movs	r0, #2
 80026ac:	f005 fd16 	bl	80080dc <IKS01A2_MOTION_SENSOR_Init>
}
 80026b0:	bf00      	nop
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 80026b8:	2102      	movs	r1, #2
 80026ba:	2001      	movs	r0, #1
 80026bc:	f005 fa10 	bl	8007ae0 <IKS01A2_ENV_SENSOR_Init>
}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 80026c8:	2101      	movs	r1, #1
 80026ca:	2000      	movs	r0, #0
 80026cc:	f005 fa08 	bl	8007ae0 <IKS01A2_ENV_SENSOR_Init>
}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_HUMIDITY);
 80026d8:	2104      	movs	r1, #4
 80026da:	2000      	movs	r0, #0
 80026dc:	f005 fa00 	bl	8007ae0 <IKS01A2_ENV_SENSOR_Init>
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 80026e8:	2102      	movs	r1, #2
 80026ea:	2000      	movs	r0, #0
 80026ec:	f005 fdf2 	bl	80082d4 <IKS01A2_MOTION_SENSOR_Enable>
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 80026f8:	2101      	movs	r1, #1
 80026fa:	2000      	movs	r0, #0
 80026fc:	f005 fdea 	bl	80082d4 <IKS01A2_MOTION_SENSOR_Enable>
}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}

08002704 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8002708:	2104      	movs	r1, #4
 800270a:	2002      	movs	r0, #2
 800270c:	f005 fde2 	bl	80082d4 <IKS01A2_MOTION_SENSOR_Enable>
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}

08002714 <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 8002718:	2102      	movs	r1, #2
 800271a:	2001      	movs	r0, #1
 800271c:	f005 faa0 	bl	8007c60 <IKS01A2_ENV_SENSOR_Enable>
}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}

08002724 <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 8002728:	2101      	movs	r1, #1
 800272a:	2000      	movs	r0, #0
 800272c:	f005 fa98 	bl	8007c60 <IKS01A2_ENV_SENSOR_Enable>
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}

08002734 <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_HUMIDITY);
 8002738:	2104      	movs	r1, #4
 800273a:	2000      	movs	r0, #0
 800273c:	f005 fa90 	bl	8007c60 <IKS01A2_ENV_SENSOR_Enable>
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}

08002744 <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8002748:	2102      	movs	r1, #2
 800274a:	2000      	movs	r0, #0
 800274c:	f005 fe04 	bl	8008358 <IKS01A2_MOTION_SENSOR_Disable>
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8002758:	2101      	movs	r1, #1
 800275a:	2000      	movs	r0, #0
 800275c:	f005 fdfc 	bl	8008358 <IKS01A2_MOTION_SENSOR_Disable>
}
 8002760:	bf00      	nop
 8002762:	bd80      	pop	{r7, pc}

08002764 <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8002768:	2104      	movs	r1, #4
 800276a:	2002      	movs	r0, #2
 800276c:	f005 fdf4 	bl	8008358 <IKS01A2_MOTION_SENSOR_Disable>
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}

08002774 <BSP_SENSOR_PRESS_Disable>:
  * @brief  Disables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Disable(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Disable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 8002778:	2102      	movs	r1, #2
 800277a:	2001      	movs	r0, #1
 800277c:	f005 fab2 	bl	8007ce4 <IKS01A2_ENV_SENSOR_Disable>
}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}

08002784 <BSP_SENSOR_TEMP_Disable>:
  * @brief  Disables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Disable(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Disable(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 8002788:	2101      	movs	r1, #1
 800278a:	2000      	movs	r0, #0
 800278c:	f005 faaa 	bl	8007ce4 <IKS01A2_ENV_SENSOR_Disable>
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}

08002794 <BSP_SENSOR_HUM_Disable>:
  * @brief  Disables humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Disable(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Disable(IKS01A2_HTS221_0, ENV_HUMIDITY);
 8002798:	2104      	movs	r1, #4
 800279a:	2000      	movs	r0, #0
 800279c:	f005 faa2 	bl	8007ce4 <IKS01A2_ENV_SENSOR_Disable>
}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	2102      	movs	r1, #2
 80027b0:	2000      	movs	r0, #0
 80027b2:	f005 fe13 	bl	80083dc <IKS01A2_MOTION_SENSOR_GetAxes>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	2101      	movs	r1, #1
 80027ca:	2000      	movs	r0, #0
 80027cc:	f005 fe06 	bl	80083dc <IKS01A2_MOTION_SENSOR_GetAxes>
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	2104      	movs	r1, #4
 80027e4:	2002      	movs	r0, #2
 80027e6:	f005 fdf9 	bl	80083dc <IKS01A2_MOTION_SENSOR_GetAxes>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <BSP_SENSOR_PRESS_GetValue>:
  * @brief  Get pressure sensor data
  * @param  Value pointer to pressure value
  * @retval None
  */
void BSP_SENSOR_PRESS_GetValue(float *Value)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_LPS22HB_0, ENV_PRESSURE, Value);
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	2102      	movs	r1, #2
 80027fe:	2001      	movs	r0, #1
 8002800:	f005 fab2 	bl	8007d68 <IKS01A2_ENV_SENSOR_GetValue>
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <BSP_SENSOR_TEMP_GetValue>:
  * @brief  Get temperature sensor data
  * @param  Value pointer to temperature value
  * @retval None
  */
void BSP_SENSOR_TEMP_GetValue(float *Value)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_TEMPERATURE, Value);
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	2101      	movs	r1, #1
 8002818:	2000      	movs	r0, #0
 800281a:	f005 faa5 	bl	8007d68 <IKS01A2_ENV_SENSOR_GetValue>
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <BSP_SENSOR_HUM_GetValue>:
  * @brief  Get humidity sensor data
  * @param  Value pointer to humidity value
  * @retval None
  */
void BSP_SENSOR_HUM_GetValue(float *Value)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_HUMIDITY, Value);
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	2104      	movs	r1, #4
 8002832:	2000      	movs	r0, #0
 8002834:	f005 fa98 	bl	8007d68 <IKS01A2_ENV_SENSOR_GetValue>
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 800284a:	ed97 0a01 	vldr	s0, [r7, #4]
 800284e:	2102      	movs	r1, #2
 8002850:	2000      	movs	r0, #0
 8002852:	f005 fe07 	bl	8008464 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	2102      	movs	r1, #2
 800286a:	2000      	movs	r0, #0
 800286c:	f005 fe40 	bl	80084f0 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	226e      	movs	r2, #110	; 0x6e
 8002884:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3301      	adds	r3, #1
 800288a:	2277      	movs	r2, #119	; 0x77
 800288c:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3302      	adds	r3, #2
 8002892:	2275      	movs	r2, #117	; 0x75
 8002894:	701a      	strb	r2, [r3, #0]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	226e      	movs	r2, #110	; 0x6e
 80028ae:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3301      	adds	r3, #1
 80028b4:	2277      	movs	r2, #119	; 0x77
 80028b6:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3302      	adds	r3, #2
 80028bc:	2275      	movs	r2, #117	; 0x75
 80028be:	701a      	strb	r2, [r3, #0]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	226e      	movs	r2, #110	; 0x6e
 80028d8:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3301      	adds	r3, #1
 80028de:	2265      	movs	r2, #101	; 0x65
 80028e0:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3302      	adds	r3, #2
 80028e6:	2275      	movs	r2, #117	; 0x75
 80028e8:	701a      	strb	r2, [r3, #0]
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028fa:	f006 fa7f 	bl	8008dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028fe:	f000 f80d 	bl	800291c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002902:	f000 f949 	bl	8002b98 <MX_GPIO_Init>
  MX_DMA_Init();
 8002906:	f000 f929 	bl	8002b5c <MX_DMA_Init>
  MX_CRC_Init();
 800290a:	f000 f85b 	bl	80029c4 <MX_CRC_Init>
  MX_RTC_Init();
 800290e:	f000 f87b 	bl	8002a08 <MX_RTC_Init>
  MX_MEMS_Init();
 8002912:	f7fe fb0e 	bl	8000f32 <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8002916:	f7fe fb12 	bl	8000f3e <MX_MEMS_Process>
 800291a:	e7fc      	b.n	8002916 <main+0x20>

0800291c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b096      	sub	sp, #88	; 0x58
 8002920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	2244      	movs	r2, #68	; 0x44
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f015 fe06 	bl	801853c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002930:	463b      	mov	r3, r7
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	60da      	str	r2, [r3, #12]
 800293c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800293e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002942:	f008 f881 	bl	800aa48 <HAL_PWREx_ControlVoltageScaling>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800294c:	f000 f966 	bl	8002c1c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002950:	230a      	movs	r3, #10
 8002952:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002958:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800295a:	2310      	movs	r3, #16
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800295e:	2301      	movs	r3, #1
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002962:	2302      	movs	r3, #2
 8002964:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002966:	2302      	movs	r3, #2
 8002968:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800296a:	2301      	movs	r3, #1
 800296c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800296e:	230a      	movs	r3, #10
 8002970:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002972:	2307      	movs	r3, #7
 8002974:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002976:	2302      	movs	r3, #2
 8002978:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800297a:	2302      	movs	r3, #2
 800297c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800297e:	f107 0314 	add.w	r3, r7, #20
 8002982:	4618      	mov	r0, r3
 8002984:	f008 f8b6 	bl	800aaf4 <HAL_RCC_OscConfig>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800298e:	f000 f945 	bl	8002c1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002992:	230f      	movs	r3, #15
 8002994:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002996:	2303      	movs	r3, #3
 8002998:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029a6:	463b      	mov	r3, r7
 80029a8:	2104      	movs	r1, #4
 80029aa:	4618      	mov	r0, r3
 80029ac:	f008 fc88 	bl	800b2c0 <HAL_RCC_ClockConfig>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80029b6:	f000 f931 	bl	8002c1c <Error_Handler>
  }
}
 80029ba:	bf00      	nop
 80029bc:	3758      	adds	r7, #88	; 0x58
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <MX_CRC_Init+0x3c>)
 80029ca:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <MX_CRC_Init+0x40>)
 80029cc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <MX_CRC_Init+0x3c>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <MX_CRC_Init+0x3c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <MX_CRC_Init+0x3c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <MX_CRC_Init+0x3c>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <MX_CRC_Init+0x3c>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80029ec:	4804      	ldr	r0, [pc, #16]	; (8002a00 <MX_CRC_Init+0x3c>)
 80029ee:	f006 fbb7 	bl	8009160 <HAL_CRC_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80029f8:	f000 f910 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200019ac 	.word	0x200019ac
 8002a04:	40023000 	.word	0x40023000

08002a08 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a20:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <MX_RTC_Init+0xb0>)
 8002a22:	4a26      	ldr	r2, [pc, #152]	; (8002abc <MX_RTC_Init+0xb4>)
 8002a24:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <MX_RTC_Init+0xb0>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002a2c:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <MX_RTC_Init+0xb0>)
 8002a2e:	227f      	movs	r2, #127	; 0x7f
 8002a30:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002a32:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <MX_RTC_Init+0xb0>)
 8002a34:	22ff      	movs	r2, #255	; 0xff
 8002a36:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <MX_RTC_Init+0xb0>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <MX_RTC_Init+0xb0>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a44:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <MX_RTC_Init+0xb0>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <MX_RTC_Init+0xb0>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a50:	4819      	ldr	r0, [pc, #100]	; (8002ab8 <MX_RTC_Init+0xb0>)
 8002a52:	f009 faf7 	bl	800c044 <HAL_RTC_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002a5c:	f000 f8de 	bl	8002c1c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	2201      	movs	r2, #1
 8002a78:	4619      	mov	r1, r3
 8002a7a:	480f      	ldr	r0, [pc, #60]	; (8002ab8 <MX_RTC_Init+0xb0>)
 8002a7c:	f009 fb5d 	bl	800c13a <HAL_RTC_SetTime>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002a86:	f000 f8c9 	bl	8002c1c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002a92:	2301      	movs	r3, #1
 8002a94:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002a9a:	463b      	mov	r3, r7
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <MX_RTC_Init+0xb0>)
 8002aa2:	f009 fc43 	bl	800c32c <HAL_RTC_SetDate>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002aac:	f000 f8b6 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002ab0:	bf00      	nop
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20001a1c 	.word	0x20001a1c
 8002abc:	40002800 	.word	0x40002800

08002ac0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ac6:	f107 0310 	add.w	r3, r7, #16
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	605a      	str	r2, [r3, #4]
 8002ad0:	609a      	str	r2, [r3, #8]
 8002ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ade:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <MX_TIM3_Init+0x94>)
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <MX_TIM3_Init+0x98>)
 8002ae2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <MX_TIM3_Init+0x94>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aea:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <MX_TIM3_Init+0x94>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002af0:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <MX_TIM3_Init+0x94>)
 8002af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002af6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af8:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <MX_TIM3_Init+0x94>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <MX_TIM3_Init+0x94>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b04:	4813      	ldr	r0, [pc, #76]	; (8002b54 <MX_TIM3_Init+0x94>)
 8002b06:	f009 fdb7 	bl	800c678 <HAL_TIM_Base_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002b10:	f000 f884 	bl	8002c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b1a:	f107 0310 	add.w	r3, r7, #16
 8002b1e:	4619      	mov	r1, r3
 8002b20:	480c      	ldr	r0, [pc, #48]	; (8002b54 <MX_TIM3_Init+0x94>)
 8002b22:	f009 ffbf 	bl	800caa4 <HAL_TIM_ConfigClockSource>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002b2c:	f000 f876 	bl	8002c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b30:	2300      	movs	r3, #0
 8002b32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4805      	ldr	r0, [pc, #20]	; (8002b54 <MX_TIM3_Init+0x94>)
 8002b3e:	f00a f9d7 	bl	800cef0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002b48:	f000 f868 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b4c:	bf00      	nop
 8002b4e:	3720      	adds	r7, #32
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	200019d0 	.word	0x200019d0
 8002b58:	40000400 	.word	0x40000400

08002b5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b62:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <MX_DMA_Init+0x38>)
 8002b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b66:	4a0b      	ldr	r2, [pc, #44]	; (8002b94 <MX_DMA_Init+0x38>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6493      	str	r3, [r2, #72]	; 0x48
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <MX_DMA_Init+0x38>)
 8002b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	2010      	movs	r0, #16
 8002b80:	f006 fab7 	bl	80090f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002b84:	2010      	movs	r0, #16
 8002b86:	f006 fad0 	bl	800912a <HAL_NVIC_EnableIRQ>

}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000

08002b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	; (8002c18 <MX_GPIO_Init+0x80>)
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba2:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <MX_GPIO_Init+0x80>)
 8002ba4:	f043 0304 	orr.w	r3, r3, #4
 8002ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002baa:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <MX_GPIO_Init+0x80>)
 8002bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bb6:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <MX_GPIO_Init+0x80>)
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bba:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <MX_GPIO_Init+0x80>)
 8002bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <MX_GPIO_Init+0x80>)
 8002bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bce:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <MX_GPIO_Init+0x80>)
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	4a11      	ldr	r2, [pc, #68]	; (8002c18 <MX_GPIO_Init+0x80>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <MX_GPIO_Init+0x80>)
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <MX_GPIO_Init+0x80>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	4a0b      	ldr	r2, [pc, #44]	; (8002c18 <MX_GPIO_Init+0x80>)
 8002bec:	f043 0302 	orr.w	r3, r3, #2
 8002bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <MX_GPIO_Init+0x80>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2100      	movs	r1, #0
 8002c02:	2028      	movs	r0, #40	; 0x28
 8002c04:	f006 fa75 	bl	80090f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c08:	2028      	movs	r0, #40	; 0x28
 8002c0a:	f006 fa8e 	bl	800912a <HAL_NVIC_EnableIRQ>

}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000

08002c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c20:	b672      	cpsid	i
}
 8002c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <Error_Handler+0x8>
	...

08002c28 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 8002c2c:	f014 fe70 	bl	8017910 <MotionFX_GetStateSize>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 8002c36:	d901      	bls.n	8002c3c <MotionFX_manager_init+0x14>
    Error_Handler();
 8002c38:	f7ff fff0 	bl	8002c1c <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 8002c3c:	4821      	ldr	r0, [pc, #132]	; (8002cc4 <MotionFX_manager_init+0x9c>)
 8002c3e:	f014 fe6b 	bl	8017918 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 8002c42:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <MotionFX_manager_init+0xa0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4619      	mov	r1, r3
 8002c48:	481e      	ldr	r0, [pc, #120]	; (8002cc4 <MotionFX_manager_init+0x9c>)
 8002c4a:	f014 ff49 	bl	8017ae0 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <MotionFX_manager_init+0xa0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	331d      	adds	r3, #29
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fe0f 	bl	8002878 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <MotionFX_manager_init+0xa0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3321      	adds	r3, #33	; 0x21
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fe1e 	bl	80028a2 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 8002c66:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <MotionFX_manager_init+0xa0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3325      	adds	r3, #37	; 0x25
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fe2d 	bl	80028cc <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <MotionFX_manager_init+0xa0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a15      	ldr	r2, [pc, #84]	; (8002ccc <MotionFX_manager_init+0xa4>)
 8002c78:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 8002c7a:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <MotionFX_manager_init+0xa0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a14      	ldr	r2, [pc, #80]	; (8002cd0 <MotionFX_manager_init+0xa8>)
 8002c80:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <MotionFX_manager_init+0xa0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <MotionFX_manager_init+0xac>)
 8002c88:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <MotionFX_manager_init+0xa0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <MotionFX_manager_init+0xa0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <MotionFX_manager_init+0xa0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <MotionFX_manager_init+0xa0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4806      	ldr	r0, [pc, #24]	; (8002cc4 <MotionFX_manager_init+0x9c>)
 8002cac:	f014 fece 	bl	8017a4c <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4804      	ldr	r0, [pc, #16]	; (8002cc4 <MotionFX_manager_init+0x9c>)
 8002cb4:	f014 ff50 	bl	8017b58 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4802      	ldr	r0, [pc, #8]	; (8002cc4 <MotionFX_manager_init+0x9c>)
 8002cbc:	f014 ff6c 	bl	8017b98 <MotionFX_enable_9X>
}
 8002cc0:	bf00      	nop
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20000b08 	.word	0x20000b08
 8002cc8:	2000000c 	.word	0x2000000c
 8002ccc:	3ac88a48 	.word	0x3ac88a48
 8002cd0:	3b83126f 	.word	0x3b83126f
 8002cd4:	3b449ba6 	.word	0x3b449ba6

08002cd8 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	ed87 0a01 	vstr	s0, [r7, #4]
  if (discardedCount == sampleToDiscard)
 8002ce6:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <MotionFX_manager_run+0x4c>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <MotionFX_manager_run+0x50>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d10e      	bne.n	8002d10 <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <MotionFX_manager_run+0x54>)
 8002cfa:	f014 ff7d 	bl	8017bf8 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	2200      	movs	r2, #0
 8002d02:	9200      	str	r2, [sp, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	4808      	ldr	r0, [pc, #32]	; (8002d2c <MotionFX_manager_run+0x54>)
 8002d0a:	f014 ff65 	bl	8017bd8 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 8002d0e:	e004      	b.n	8002d1a <MotionFX_manager_run+0x42>
    discardedCount++;
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <MotionFX_manager_run+0x4c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	4a03      	ldr	r2, [pc, #12]	; (8002d24 <MotionFX_manager_run+0x4c>)
 8002d18:	6013      	str	r3, [r2, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000b04 	.word	0x20000b04
 8002d28:	20000010 	.word	0x20000010
 8002d2c:	20000b08 	.word	0x20000b08

08002d30 <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 8002d34:	2101      	movs	r1, #1
 8002d36:	4802      	ldr	r0, [pc, #8]	; (8002d40 <MotionFX_manager_start_6X+0x10>)
 8002d38:	f014 ff0e 	bl	8017b58 <MotionFX_enable_6X>
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000b08 	.word	0x20000b08

08002d44 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4802      	ldr	r0, [pc, #8]	; (8002d54 <MotionFX_manager_stop_6X+0x10>)
 8002d4c:	f014 ff04 	bl	8017b58 <MotionFX_enable_6X>
}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000b08 	.word	0x20000b08

08002d58 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	4802      	ldr	r0, [pc, #8]	; (8002d68 <MotionFX_manager_start_9X+0x10>)
 8002d60:	f014 ff1a 	bl	8017b98 <MotionFX_enable_9X>
}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000b08 	.word	0x20000b08

08002d6c <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8002d70:	2100      	movs	r1, #0
 8002d72:	4802      	ldr	r0, [pc, #8]	; (8002d7c <MotionFX_manager_stop_9X+0x10>)
 8002d74:	f014 ff10 	bl	8017b98 <MotionFX_enable_9X>
}
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000b08 	.word	0x20000b08

08002d80 <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  *length = (int)MotionFX_GetLibVersion(version);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f015 fb7a 	bl	8018484 <MotionFX_GetLibVersion>
 8002d90:	4603      	mov	r3, r0
 8002d92:	461a      	mov	r2, r3
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	601a      	str	r2, [r3, #0]
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f015 f90c 	bl	8017fc8 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 8002db0:	6838      	ldr	r0, [r7, #0]
 8002db2:	f015 fb2b 	bl	801840c <MotionFX_MagCal_getParams>
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f015 f867 	bl	8017e9c <MotionFX_MagCal_init>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 8002dde:	2100      	movs	r1, #0
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f015 f85b 	bl	8017e9c <MotionFX_MagCal_init>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <ByteStuffCopyByte>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	60fb      	str	r3, [r7, #12]

  switch (Source)
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	2bf0      	cmp	r3, #240	; 0xf0
 8002e02:	d002      	beq.n	8002e0a <ByteStuffCopyByte+0x1c>
 8002e04:	2bf1      	cmp	r3, #241	; 0xf1
 8002e06:	d008      	beq.n	8002e1a <ByteStuffCopyByte+0x2c>
 8002e08:	e00f      	b.n	8002e2a <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	22f1      	movs	r2, #241	; 0xf1
 8002e0e:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3301      	adds	r3, #1
 8002e14:	22f2      	movs	r2, #242	; 0xf2
 8002e16:	701a      	strb	r2, [r3, #0]
      break;
 8002e18:	e00d      	b.n	8002e36 <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	22f1      	movs	r2, #241	; 0xf1
 8002e1e:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3301      	adds	r3, #1
 8002e24:	22f1      	movs	r2, #241	; 0xf1
 8002e26:	701a      	strb	r2, [r3, #0]
      break;
 8002e28:	e005      	b.n	8002e36 <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	701a      	strb	r2, [r3, #0]
      ret = 1;
 8002e30:	2301      	movs	r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
      break;
 8002e34:	bf00      	nop
  }

  return ret;
 8002e36:	68fb      	ldr	r3, [r7, #12]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <ByteStuffCopy>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	e011      	b.n	8002e7c <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	18d0      	adds	r0, r2, r3
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	3304      	adds	r3, #4
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f7ff ffc0 	bl	8002dee <ByteStuffCopyByte>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4413      	add	r3, r2
 8002e74:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d3e8      	bcc.n	8002e58 <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	22f0      	movs	r2, #240	; 0xf0
 8002e8e:	701a      	strb	r2, [r3, #0]
  count++;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	3301      	adds	r3, #1
 8002e94:	60bb      	str	r3, [r7, #8]
  return count;
 8002e96:	68bb      	ldr	r3, [r7, #8]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <ReverseByteStuffCopyByte2>:
 * @param  Source1 input data
 * @param  Dest the destination data
 * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
 */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	603a      	str	r2, [r7, #0]
 8002eaa:	71fb      	strb	r3, [r7, #7]
 8002eac:	460b      	mov	r3, r1
 8002eae:	71bb      	strb	r3, [r7, #6]
  if (Source0 == (uint8_t)TMsg_BS)
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	2bf1      	cmp	r3, #241	; 0xf1
 8002eb4:	d111      	bne.n	8002eda <ReverseByteStuffCopyByte2+0x3a>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 8002eb6:	79bb      	ldrb	r3, [r7, #6]
 8002eb8:	2bf1      	cmp	r3, #241	; 0xf1
 8002eba:	d104      	bne.n	8002ec6 <ReverseByteStuffCopyByte2+0x26>
    {
      *Dest = TMsg_BS;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	22f1      	movs	r2, #241	; 0xf1
 8002ec0:	701a      	strb	r2, [r3, #0]
      return 2;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e00d      	b.n	8002ee2 <ReverseByteStuffCopyByte2+0x42>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 8002ec6:	79bb      	ldrb	r3, [r7, #6]
 8002ec8:	2bf2      	cmp	r3, #242	; 0xf2
 8002eca:	d104      	bne.n	8002ed6 <ReverseByteStuffCopyByte2+0x36>
    {
      *Dest = TMsg_EOF;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	22f0      	movs	r2, #240	; 0xf0
 8002ed0:	701a      	strb	r2, [r3, #0]
      return 2;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e005      	b.n	8002ee2 <ReverseByteStuffCopyByte2+0x42>
    }

    return 0; // invalid sequence
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e003      	b.n	8002ee2 <ReverseByteStuffCopyByte2+0x42>
  }
  else
  {
    *Dest = Source0;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	79fa      	ldrb	r2, [r7, #7]
 8002ede:	701a      	strb	r2, [r3, #0]
    return 1;
 8002ee0:	2301      	movs	r3, #1
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <CHK_ComputeAndAdd>:
 * @brief  Compute and add checksum
 * @param  Msg pointer to the message
 * @retval None
 */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	e00a      	b.n	8002f16 <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4413      	add	r3, r2
 8002f06:	3304      	adds	r3, #4
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	7bfa      	ldrb	r2, [r7, #15]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	3301      	adds	r3, #1
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d3ef      	bcc.n	8002f00 <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	4413      	add	r3, r2
 8002f26:	3304      	adds	r3, #4
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	601a      	str	r2, [r3, #0]
}
 8002f36:	bf00      	nop
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <CHK_CheckAndRemove>:
 * @brief  Compute and remove checksum
 * @param  Msg pointer to the message
 * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
 */
int CHK_CheckAndRemove(TMsg *Msg)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b085      	sub	sp, #20
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	e00a      	b.n	8002f6a <CHK_CheckAndRemove+0x28>
  {
    chk += Msg->Data[i];
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4413      	add	r3, r2
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	781a      	ldrb	r2, [r3, #0]
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	4413      	add	r3, r2
 8002f62:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	3301      	adds	r3, #1
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d3ef      	bcc.n	8002f54 <CHK_CheckAndRemove+0x12>
  }

  Msg->Len--;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	1e5a      	subs	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <Deserialize>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval Rebuild unsigned int variable
 */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 8002fb0:	e00d      	b.n	8002fce <Deserialize+0x38>
  {
    app <<= 8;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1ee      	bne.n	8002fb2 <Deserialize+0x1c>
  }

  return app;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b087      	sub	sp, #28
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	e00f      	b.n	8003014 <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	3301      	adds	r3, #1
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	429a      	cmp	r2, r3
 800301a:	d3eb      	bcc.n	8002ff4 <Serialize_s32+0x12>
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003032:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <HAL_MspInit+0x44>)
 8003034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003036:	4a0e      	ldr	r2, [pc, #56]	; (8003070 <HAL_MspInit+0x44>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	6613      	str	r3, [r2, #96]	; 0x60
 800303e:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <HAL_MspInit+0x44>)
 8003040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	607b      	str	r3, [r7, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_MspInit+0x44>)
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	4a08      	ldr	r2, [pc, #32]	; (8003070 <HAL_MspInit+0x44>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003054:	6593      	str	r3, [r2, #88]	; 0x58
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_MspInit+0x44>)
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40021000 	.word	0x40021000

08003074 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <HAL_CRC_MspInit+0x38>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d10b      	bne.n	800309e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_CRC_MspInit+0x3c>)
 8003088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308a:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <HAL_CRC_MspInit+0x3c>)
 800308c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003090:	6493      	str	r3, [r2, #72]	; 0x48
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <HAL_CRC_MspInit+0x3c>)
 8003094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800309e:	bf00      	nop
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40023000 	.word	0x40023000
 80030b0:	40021000 	.word	0x40021000

080030b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b0a4      	sub	sp, #144	; 0x90
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030bc:	f107 0308 	add.w	r3, r7, #8
 80030c0:	2288      	movs	r2, #136	; 0x88
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f015 fa39 	bl	801853c <memset>
  if(hrtc->Instance==RTC)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a10      	ldr	r2, [pc, #64]	; (8003110 <HAL_RTC_MspInit+0x5c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d118      	bne.n	8003106 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030d8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80030da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030e2:	f107 0308 	add.w	r3, r7, #8
 80030e6:	4618      	mov	r0, r3
 80030e8:	f008 faf0 	bl	800b6cc <HAL_RCCEx_PeriphCLKConfig>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80030f2:	f7ff fd93 	bl	8002c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <HAL_RTC_MspInit+0x60>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	4a05      	ldr	r2, [pc, #20]	; (8003114 <HAL_RTC_MspInit+0x60>)
 80030fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003106:	bf00      	nop
 8003108:	3790      	adds	r7, #144	; 0x90
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40002800 	.word	0x40002800
 8003114:	40021000 	.word	0x40021000

08003118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0d      	ldr	r2, [pc, #52]	; (800315c <HAL_TIM_Base_MspInit+0x44>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d113      	bne.n	8003152 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <HAL_TIM_Base_MspInit+0x48>)
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	4a0c      	ldr	r2, [pc, #48]	; (8003160 <HAL_TIM_Base_MspInit+0x48>)
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	6593      	str	r3, [r2, #88]	; 0x58
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <HAL_TIM_Base_MspInit+0x48>)
 8003138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003142:	2200      	movs	r2, #0
 8003144:	2100      	movs	r1, #0
 8003146:	201d      	movs	r0, #29
 8003148:	f005 ffd3 	bl	80090f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800314c:	201d      	movs	r0, #29
 800314e:	f005 ffec 	bl	800912a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40000400 	.word	0x40000400
 8003160:	40021000 	.word	0x40021000

08003164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003168:	e7fe      	b.n	8003168 <NMI_Handler+0x4>

0800316a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800316a:	b480      	push	{r7}
 800316c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800316e:	e7fe      	b.n	800316e <HardFault_Handler+0x4>

08003170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003174:	e7fe      	b.n	8003174 <MemManage_Handler+0x4>

08003176 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800317a:	e7fe      	b.n	800317a <BusFault_Handler+0x4>

0800317c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003180:	e7fe      	b.n	8003180 <UsageFault_Handler+0x4>

08003182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800319e:	b480      	push	{r7}
 80031a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031b0:	f005 fe80 	bl	8008eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031b4:	bf00      	nop
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80031bc:	4802      	ldr	r0, [pc, #8]	; (80031c8 <DMA1_Channel6_IRQHandler+0x10>)
 80031be:	f006 f9d1 	bl	8009564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20001aa0 	.word	0x20001aa0

080031cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031d0:	4802      	ldr	r0, [pc, #8]	; (80031dc <TIM3_IRQHandler+0x10>)
 80031d2:	f009 fb48 	bl	800c866 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	200019d0 	.word	0x200019d0

080031e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80031e4:	4802      	ldr	r0, [pc, #8]	; (80031f0 <EXTI15_10_IRQHandler+0x10>)
 80031e6:	f006 facb 	bl	8009780 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000174 	.word	0x20000174

080031f4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80031fe:	4b19      	ldr	r3, [pc, #100]	; (8003264 <BSP_I2C1_Init+0x70>)
 8003200:	4a19      	ldr	r2, [pc, #100]	; (8003268 <BSP_I2C1_Init+0x74>)
 8003202:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8003204:	4b19      	ldr	r3, [pc, #100]	; (800326c <BSP_I2C1_Init+0x78>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	4918      	ldr	r1, [pc, #96]	; (800326c <BSP_I2C1_Init+0x78>)
 800320c:	600a      	str	r2, [r1, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d122      	bne.n	8003258 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8003212:	4814      	ldr	r0, [pc, #80]	; (8003264 <BSP_I2C1_Init+0x70>)
 8003214:	f007 f8b2 	bl	800a37c <HAL_I2C_GetState>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d11c      	bne.n	8003258 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800321e:	4811      	ldr	r0, [pc, #68]	; (8003264 <BSP_I2C1_Init+0x70>)
 8003220:	f000 f8fe 	bl	8003420 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d116      	bne.n	8003258 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800322a:	480e      	ldr	r0, [pc, #56]	; (8003264 <BSP_I2C1_Init+0x70>)
 800322c:	f000 f8b4 	bl	8003398 <MX_I2C1_Init>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003236:	f06f 0307 	mvn.w	r3, #7
 800323a:	607b      	str	r3, [r7, #4]
 800323c:	e00c      	b.n	8003258 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800323e:	2100      	movs	r1, #0
 8003240:	4808      	ldr	r0, [pc, #32]	; (8003264 <BSP_I2C1_Init+0x70>)
 8003242:	f007 fb5b 	bl	800a8fc <HAL_I2CEx_ConfigAnalogFilter>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800324c:	f06f 0307 	mvn.w	r3, #7
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	e001      	b.n	8003258 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8003254:	2300      	movs	r3, #0
 8003256:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8003258:	687b      	ldr	r3, [r7, #4]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20001a40 	.word	0x20001a40
 8003268:	40005400 	.word	0x40005400
 800326c:	20001488 	.word	0x20001488

08003270 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003276:	2300      	movs	r3, #0
 8003278:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800327a:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <BSP_I2C1_DeInit+0x48>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d014      	beq.n	80032ac <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <BSP_I2C1_DeInit+0x48>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3b01      	subs	r3, #1
 8003288:	4a0b      	ldr	r2, [pc, #44]	; (80032b8 <BSP_I2C1_DeInit+0x48>)
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <BSP_I2C1_DeInit+0x48>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8003294:	4809      	ldr	r0, [pc, #36]	; (80032bc <BSP_I2C1_DeInit+0x4c>)
 8003296:	f000 f909 	bl	80034ac <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800329a:	4808      	ldr	r0, [pc, #32]	; (80032bc <BSP_I2C1_DeInit+0x4c>)
 800329c:	f006 fdfd 	bl	8009e9a <HAL_I2C_DeInit>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80032a6:	f06f 0307 	mvn.w	r3, #7
 80032aa:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80032ac:	687b      	ldr	r3, [r7, #4]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20001488 	.word	0x20001488
 80032bc:	20001a40 	.word	0x20001a40

080032c0 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af04      	add	r7, sp, #16
 80032c6:	60ba      	str	r2, [r7, #8]
 80032c8:	461a      	mov	r2, r3
 80032ca:	4603      	mov	r3, r0
 80032cc:	81fb      	strh	r3, [r7, #14]
 80032ce:	460b      	mov	r3, r1
 80032d0:	81bb      	strh	r3, [r7, #12]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80032da:	89ba      	ldrh	r2, [r7, #12]
 80032dc:	89f9      	ldrh	r1, [r7, #14]
 80032de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032e2:	9302      	str	r3, [sp, #8]
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2301      	movs	r3, #1
 80032ee:	480c      	ldr	r0, [pc, #48]	; (8003320 <BSP_I2C1_WriteReg+0x60>)
 80032f0:	f006 fe16 	bl	8009f20 <HAL_I2C_Mem_Write>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00c      	beq.n	8003314 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80032fa:	4809      	ldr	r0, [pc, #36]	; (8003320 <BSP_I2C1_WriteReg+0x60>)
 80032fc:	f007 f84c 	bl	800a398 <HAL_I2C_GetError>
 8003300:	4603      	mov	r3, r0
 8003302:	2b04      	cmp	r3, #4
 8003304:	d103      	bne.n	800330e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003306:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	e002      	b.n	8003314 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800330e:	f06f 0303 	mvn.w	r3, #3
 8003312:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003314:	697b      	ldr	r3, [r7, #20]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20001a40 	.word	0x20001a40

08003324 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08a      	sub	sp, #40	; 0x28
 8003328:	af04      	add	r7, sp, #16
 800332a:	60ba      	str	r2, [r7, #8]
 800332c:	461a      	mov	r2, r3
 800332e:	4603      	mov	r3, r0
 8003330:	81fb      	strh	r3, [r7, #14]
 8003332:	460b      	mov	r3, r1
 8003334:	81bb      	strh	r3, [r7, #12]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800333e:	89ba      	ldrh	r2, [r7, #12]
 8003340:	89f9      	ldrh	r1, [r7, #14]
 8003342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003346:	9302      	str	r3, [sp, #8]
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	2301      	movs	r3, #1
 8003352:	480c      	ldr	r0, [pc, #48]	; (8003384 <BSP_I2C1_ReadReg+0x60>)
 8003354:	f006 fef8 	bl	800a148 <HAL_I2C_Mem_Read>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00c      	beq.n	8003378 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800335e:	4809      	ldr	r0, [pc, #36]	; (8003384 <BSP_I2C1_ReadReg+0x60>)
 8003360:	f007 f81a 	bl	800a398 <HAL_I2C_GetError>
 8003364:	4603      	mov	r3, r0
 8003366:	2b04      	cmp	r3, #4
 8003368:	d103      	bne.n	8003372 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800336a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	e002      	b.n	8003378 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003372:	f06f 0303 	mvn.w	r3, #3
 8003376:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003378:	697b      	ldr	r3, [r7, #20]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20001a40 	.word	0x20001a40

08003388 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800338c:	f005 fda6 	bl	8008edc <HAL_GetTick>
 8003390:	4603      	mov	r3, r0
}
 8003392:	4618      	mov	r0, r3
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <MX_I2C1_Init+0x80>)
 80033a8:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a1b      	ldr	r2, [pc, #108]	; (800341c <MX_I2C1_Init+0x84>)
 80033ae:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f006 fcce 	bl	8009d7c <HAL_I2C_Init>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033ea:	2100      	movs	r1, #0
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f007 fa85 	bl	800a8fc <HAL_I2CEx_ConfigAnalogFilter>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80033fc:	2100      	movs	r1, #0
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f007 fac7 	bl	800a992 <HAL_I2CEx_ConfigDigitalFilter>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40005400 	.word	0x40005400
 800341c:	10909cec 	.word	0x10909cec

08003420 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	; 0x28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003428:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <I2C1_MspInit+0x84>)
 800342a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342c:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <I2C1_MspInit+0x84>)
 800342e:	f043 0302 	orr.w	r3, r3, #2
 8003432:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003434:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <I2C1_MspInit+0x84>)
 8003436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8003440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003446:	2312      	movs	r3, #18
 8003448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344e:	2303      	movs	r3, #3
 8003450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8003452:	2304      	movs	r3, #4
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003456:	f107 0314 	add.w	r3, r7, #20
 800345a:	4619      	mov	r1, r3
 800345c:	4812      	ldr	r0, [pc, #72]	; (80034a8 <I2C1_MspInit+0x88>)
 800345e:	f006 f9bf 	bl	80097e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8003462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003468:	2312      	movs	r3, #18
 800346a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003470:	2303      	movs	r3, #3
 8003472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8003474:	2304      	movs	r3, #4
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003478:	f107 0314 	add.w	r3, r7, #20
 800347c:	4619      	mov	r1, r3
 800347e:	480a      	ldr	r0, [pc, #40]	; (80034a8 <I2C1_MspInit+0x88>)
 8003480:	f006 f9ae 	bl	80097e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003484:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <I2C1_MspInit+0x84>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	4a06      	ldr	r2, [pc, #24]	; (80034a4 <I2C1_MspInit+0x84>)
 800348a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800348e:	6593      	str	r3, [r2, #88]	; 0x58
 8003490:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <I2C1_MspInit+0x84>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800349c:	bf00      	nop
 800349e:	3728      	adds	r7, #40	; 0x28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021000 	.word	0x40021000
 80034a8:	48000400 	.word	0x48000400

080034ac <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <I2C1_MspDeInit+0x30>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	4a08      	ldr	r2, [pc, #32]	; (80034dc <I2C1_MspDeInit+0x30>)
 80034ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034be:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80034c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034c4:	4806      	ldr	r0, [pc, #24]	; (80034e0 <I2C1_MspDeInit+0x34>)
 80034c6:	f006 fb35 	bl	8009b34 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80034ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034ce:	4804      	ldr	r0, [pc, #16]	; (80034e0 <I2C1_MspDeInit+0x34>)
 80034d0:	f006 fb30 	bl	8009b34 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	48000400 	.word	0x48000400

080034e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034ec:	4a14      	ldr	r2, [pc, #80]	; (8003540 <_sbrk+0x5c>)
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <_sbrk+0x60>)
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034f8:	4b13      	ldr	r3, [pc, #76]	; (8003548 <_sbrk+0x64>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <_sbrk+0x64>)
 8003502:	4a12      	ldr	r2, [pc, #72]	; (800354c <_sbrk+0x68>)
 8003504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <_sbrk+0x64>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4413      	add	r3, r2
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	429a      	cmp	r2, r3
 8003512:	d207      	bcs.n	8003524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003514:	f014 ffda 	bl	80184cc <__errno>
 8003518:	4603      	mov	r3, r0
 800351a:	220c      	movs	r2, #12
 800351c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800351e:	f04f 33ff 	mov.w	r3, #4294967295
 8003522:	e009      	b.n	8003538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <_sbrk+0x64>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800352a:	4b07      	ldr	r3, [pc, #28]	; (8003548 <_sbrk+0x64>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	4a05      	ldr	r2, [pc, #20]	; (8003548 <_sbrk+0x64>)
 8003534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003536:	68fb      	ldr	r3, [r7, #12]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	20018000 	.word	0x20018000
 8003544:	00008000 	.word	0x00008000
 8003548:	2000148c 	.word	0x2000148c
 800354c:	20001fa8 	.word	0x20001fa8

08003550 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d103      	bne.n	8003568 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8003560:	f04f 33ff 	mov.w	r3, #4294967295
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	e030      	b.n	80035ca <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	7b1a      	ldrb	r2, [r3, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	695a      	ldr	r2, [r3, #20]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	699a      	ldr	r2, [r3, #24]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <HTS221_RegisterBusIO+0x84>)
 80035a4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a0b      	ldr	r2, [pc, #44]	; (80035d8 <HTS221_RegisterBusIO+0x88>)
 80035aa:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d004      	beq.n	80035c4 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4798      	blx	r3
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	e002      	b.n	80035ca <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 80035c4:	f04f 33ff 	mov.w	r3, #4294967295
 80035c8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80035ca:	68fb      	ldr	r3, [r7, #12]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	08003c07 	.word	0x08003c07
 80035d8:	08003c69 	.word	0x08003c69

080035dc <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d108      	bne.n	8003600 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 faa4 	bl	8003b3c <HTS221_Initialize>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80035fa:	f04f 33ff 	mov.w	r3, #4294967295
 80035fe:	e004      	b.n	800360a <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003620:	2b01      	cmp	r3, #1
 8003622:	d111      	bne.n	8003648 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f878 	bl	800371a <HTS221_HUM_Disable>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8003630:	f04f 33ff 	mov.w	r3, #4294967295
 8003634:	e00d      	b.n	8003652 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f95f 	bl	80038fa <HTS221_TEMP_Disable>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8003642:	f04f 33ff 	mov.w	r3, #4294967295
 8003646:	e004      	b.n	8003652 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	331c      	adds	r3, #28
 8003668:	6839      	ldr	r1, [r7, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fc28 	bl	8003ec0 <hts221_device_id_get>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
 800367a:	e000      	b.n	800367e <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2201      	movs	r2, #1
 8003696:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2200      	movs	r2, #0
 800369c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2200      	movs	r2, #0
 80036a8:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	4a07      	ldr	r2, [pc, #28]	; (80036cc <HTS221_GetCapabilities+0x44>)
 80036ae:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	4a06      	ldr	r2, [pc, #24]	; (80036cc <HTS221_GetCapabilities+0x44>)
 80036b4:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	41480000 	.word	0x41480000

080036d0 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	e015      	b.n	8003712 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	331c      	adds	r3, #28
 80036f4:	2101      	movs	r1, #1
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fbf3 	bl	8003ee2 <hts221_power_on_set>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8003702:	f04f 33ff 	mov.w	r3, #4294967295
 8003706:	e004      	b.n	8003712 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e015      	b.n	800375c <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10b      	bne.n	8003752 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	331c      	adds	r3, #28
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fbce 	bl	8003ee2 <hts221_power_on_set>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 800374c:	f04f 33ff 	mov.w	r3, #4294967295
 8003750:	e004      	b.n	800375c <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800376e:	6839      	ldr	r1, [r7, #0]
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f96f 	bl	8003a54 <HTS221_GetOutputDataRate>
 8003776:	4603      	mov	r3, r0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800378c:	ed97 0a00 	vldr	s0, [r7]
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f9a3 	bl	8003adc <HTS221_SetOutputDataRate>
 8003796:	4603      	mov	r3, r0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	331c      	adds	r3, #28
 80037ae:	f107 020c 	add.w	r2, r7, #12
 80037b2:	4611      	mov	r1, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fc58 	bl	800406a <hts221_hum_adc_point_0_get>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295
 80037c4:	e06b      	b.n	800389e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f103 021c 	add.w	r2, r3, #28
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	3304      	adds	r3, #4
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f000 fbaa 	bl	8003f2e <hts221_hum_rh_point_0_get>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 80037e0:	f04f 33ff 	mov.w	r3, #4294967295
 80037e4:	e05b      	b.n	800389e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f103 021c 	add.w	r2, r3, #28
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	3308      	adds	r3, #8
 80037f2:	4619      	mov	r1, r3
 80037f4:	4610      	mov	r0, r2
 80037f6:	f000 fc5c 	bl	80040b2 <hts221_hum_adc_point_1_get>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8003800:	f04f 33ff 	mov.w	r3, #4294967295
 8003804:	e04b      	b.n	800389e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f103 021c 	add.w	r2, r3, #28
 800380c:	f107 030c 	add.w	r3, r7, #12
 8003810:	330c      	adds	r3, #12
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f000 fba8 	bl	8003f6a <hts221_hum_rh_point_1_get>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	e03b      	b.n	800389e <HTS221_HUM_GetHumidity+0xfe>
 8003826:	2300      	movs	r3, #0
 8003828:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	331c      	adds	r3, #28
 800382e:	f107 021c 	add.w	r2, r7, #28
 8003832:	4611      	mov	r1, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fafd 	bl	8003e34 <hts221_humidity_raw_get>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8003840:	f04f 33ff 	mov.w	r3, #4294967295
 8003844:	e02b      	b.n	800389e <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8003846:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003852:	f107 030c 	add.w	r3, r7, #12
 8003856:	eeb0 0a67 	vmov.f32	s0, s15
 800385a:	4618      	mov	r0, r3
 800385c:	f000 f99a 	bl	8003b94 <Linear_Interpolation>
 8003860:	eef0 7a40 	vmov.f32	s15, s0
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	edd3 7a00 	vldr	s15, [r3]
 8003870:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003878:	d503      	bpl.n	8003882 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	edd3 7a00 	vldr	s15, [r3]
 8003888:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80038a8 <HTS221_HUM_GetHumidity+0x108>
 800388c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003894:	dd02      	ble.n	800389c <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	4a04      	ldr	r2, [pc, #16]	; (80038ac <HTS221_HUM_GetHumidity+0x10c>)
 800389a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	42c80000 	.word	0x42c80000
 80038ac:	42c80000 	.word	0x42c80000

080038b0 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e015      	b.n	80038f2 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10b      	bne.n	80038e8 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	331c      	adds	r3, #28
 80038d4:	2101      	movs	r1, #1
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fb03 	bl	8003ee2 <hts221_power_on_set>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80038e2:	f04f 33ff 	mov.w	r3, #4294967295
 80038e6:	e004      	b.n	80038f2 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e015      	b.n	800393c <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10b      	bne.n	8003932 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	331c      	adds	r3, #28
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fade 	bl	8003ee2 <hts221_power_on_set>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 800392c:	f04f 33ff 	mov.w	r3, #4294967295
 8003930:	e004      	b.n	800393c <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800394e:	6839      	ldr	r1, [r7, #0]
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f87f 	bl	8003a54 <HTS221_GetOutputDataRate>
 8003956:	4603      	mov	r3, r0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800396c:	ed97 0a00 	vldr	s0, [r7]
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f8b3 	bl	8003adc <HTS221_SetOutputDataRate>
 8003976:	4603      	mov	r3, r0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	331c      	adds	r3, #28
 800398e:	f107 020c 	add.w	r2, r7, #12
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fbb0 	bl	80040fa <hts221_temp_adc_point_0_get>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 80039a0:	f04f 33ff 	mov.w	r3, #4294967295
 80039a4:	e052      	b.n	8003a4c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f103 021c 	add.w	r2, r3, #28
 80039ac:	f107 030c 	add.w	r3, r7, #12
 80039b0:	3304      	adds	r3, #4
 80039b2:	4619      	mov	r1, r3
 80039b4:	4610      	mov	r0, r2
 80039b6:	f000 faf6 	bl	8003fa6 <hts221_temp_deg_point_0_get>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 80039c0:	f04f 33ff 	mov.w	r3, #4294967295
 80039c4:	e042      	b.n	8003a4c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f103 021c 	add.w	r2, r3, #28
 80039cc:	f107 030c 	add.w	r3, r7, #12
 80039d0:	3308      	adds	r3, #8
 80039d2:	4619      	mov	r1, r3
 80039d4:	4610      	mov	r0, r2
 80039d6:	f000 fbb4 	bl	8004142 <hts221_temp_adc_point_1_get>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80039e0:	f04f 33ff 	mov.w	r3, #4294967295
 80039e4:	e032      	b.n	8003a4c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f103 021c 	add.w	r2, r3, #28
 80039ec:	f107 030c 	add.w	r3, r7, #12
 80039f0:	330c      	adds	r3, #12
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f000 fb07 	bl	8004008 <hts221_temp_deg_point_1_get>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
 8003a04:	e022      	b.n	8003a4c <HTS221_TEMP_GetTemperature+0xcc>
 8003a06:	2300      	movs	r3, #0
 8003a08:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	331c      	adds	r3, #28
 8003a0e:	f107 021c 	add.w	r2, r7, #28
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fa30 	bl	8003e7a <hts221_temperature_raw_get>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8003a20:	f04f 33ff 	mov.w	r3, #4294967295
 8003a24:	e012      	b.n	8003a4c <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8003a26:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a32:	f107 030c 	add.w	r3, r7, #12
 8003a36:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 f8aa 	bl	8003b94 <Linear_Interpolation>
 8003a40:	eef0 7a40 	vmov.f32	s15, s0
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3720      	adds	r7, #32
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	331c      	adds	r3, #28
 8003a66:	f107 020b 	add.w	r2, r7, #11
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 f983 	bl	8003d78 <hts221_data_rate_get>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003a78:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7c:	e025      	b.n	8003aca <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8003a7e:	7afb      	ldrb	r3, [r7, #11]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d81d      	bhi.n	8003ac0 <HTS221_GetOutputDataRate+0x6c>
 8003a84:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <HTS221_GetOutputDataRate+0x38>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003a9d 	.word	0x08003a9d
 8003a90:	08003aa7 	.word	0x08003aa7
 8003a94:	08003ab1 	.word	0x08003ab1
 8003a98:	08003ab9 	.word	0x08003ab9
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
      break;
 8003aa4:	e010      	b.n	8003ac8 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003aac:	601a      	str	r2, [r3, #0]
      break;
 8003aae:	e00b      	b.n	8003ac8 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <HTS221_GetOutputDataRate+0x80>)
 8003ab4:	601a      	str	r2, [r3, #0]
      break;
 8003ab6:	e007      	b.n	8003ac8 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	4a07      	ldr	r2, [pc, #28]	; (8003ad8 <HTS221_GetOutputDataRate+0x84>)
 8003abc:	601a      	str	r2, [r3, #0]
      break;
 8003abe:	e003      	b.n	8003ac8 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8003ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac4:	60fb      	str	r3, [r7, #12]
      break;
 8003ac6:	bf00      	nop
  }

  return ret;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40e00000 	.word	0x40e00000
 8003ad8:	41480000 	.word	0x41480000

08003adc <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8003ae8:	edd7 7a00 	vldr	s15, [r7]
 8003aec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003af0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af8:	d801      	bhi.n	8003afe <HTS221_SetOutputDataRate+0x22>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e00b      	b.n	8003b16 <HTS221_SetOutputDataRate+0x3a>
 8003afe:	edd7 7a00 	vldr	s15, [r7]
 8003b02:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0e:	d801      	bhi.n	8003b14 <HTS221_SetOutputDataRate+0x38>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e000      	b.n	8003b16 <HTS221_SetOutputDataRate+0x3a>
 8003b14:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8003b16:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	331c      	adds	r3, #28
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	4611      	mov	r1, r2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 f902 	bl	8003d2a <hts221_data_rate_set>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8003b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b30:	e000      	b.n	8003b34 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	331c      	adds	r3, #28
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 f9c9 	bl	8003ee2 <hts221_power_on_set>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8003b56:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5a:	e017      	b.n	8003b8c <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	331c      	adds	r3, #28
 8003b60:	2101      	movs	r1, #1
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 f940 	bl	8003de8 <hts221_block_data_update_set>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b72:	e00b      	b.n	8003b8c <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003b74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ffaf 	bl	8003adc <HTS221_SetOutputDataRate>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003b84:	f04f 33ff 	mov.w	r3, #4294967295
 8003b88:	e000      	b.n	8003b8c <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bb0:	edd7 7a00 	vldr	s15, [r7]
 8003bb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	edd3 6a02 	vldr	s13, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	ed93 6a00 	vldr	s12, [r3]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bd4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003bd8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003bdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	edd3 6a02 	vldr	s13, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	edd3 7a00 	vldr	s15, [r3]
 8003bec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003bf0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003bf4:	eef0 7a66 	vmov.f32	s15, s13
}
 8003bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003c06:	b590      	push	{r4, r7, lr}
 8003c08:	b087      	sub	sp, #28
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	461a      	mov	r2, r3
 8003c12:	460b      	mov	r3, r1
 8003c14:	72fb      	strb	r3, [r7, #11]
 8003c16:	4613      	mov	r3, r2
 8003c18:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10e      	bne.n	8003c44 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	695c      	ldr	r4, [r3, #20]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	7b1b      	ldrb	r3, [r3, #12]
 8003c2e:	b298      	uxth	r0, r3
 8003c30:	7afb      	ldrb	r3, [r7, #11]
 8003c32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	b299      	uxth	r1, r3
 8003c3a:	893b      	ldrh	r3, [r7, #8]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	47a0      	blx	r4
 8003c40:	4603      	mov	r3, r0
 8003c42:	e00d      	b.n	8003c60 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	695c      	ldr	r4, [r3, #20]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	7b1b      	ldrb	r3, [r3, #12]
 8003c4c:	b298      	uxth	r0, r3
 8003c4e:	7afb      	ldrb	r3, [r7, #11]
 8003c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	b299      	uxth	r1, r3
 8003c58:	893b      	ldrh	r3, [r7, #8]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	47a0      	blx	r4
 8003c5e:	4603      	mov	r3, r0
  }
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd90      	pop	{r4, r7, pc}

08003c68 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	607a      	str	r2, [r7, #4]
 8003c72:	461a      	mov	r2, r3
 8003c74:	460b      	mov	r3, r1
 8003c76:	72fb      	strb	r3, [r7, #11]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10e      	bne.n	8003ca6 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	691c      	ldr	r4, [r3, #16]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	7b1b      	ldrb	r3, [r3, #12]
 8003c90:	b298      	uxth	r0, r3
 8003c92:	7afb      	ldrb	r3, [r7, #11]
 8003c94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	b299      	uxth	r1, r3
 8003c9c:	893b      	ldrh	r3, [r7, #8]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	47a0      	blx	r4
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	e00d      	b.n	8003cc2 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	691c      	ldr	r4, [r3, #16]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	7b1b      	ldrb	r3, [r3, #12]
 8003cae:	b298      	uxth	r0, r3
 8003cb0:	7afb      	ldrb	r3, [r7, #11]
 8003cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	b299      	uxth	r1, r3
 8003cba:	893b      	ldrh	r3, [r7, #8]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	47a0      	blx	r4
 8003cc0:	4603      	mov	r3, r0
  }
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd90      	pop	{r4, r7, pc}

08003cca <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 8003cca:	b590      	push	{r4, r7, lr}
 8003ccc:	b087      	sub	sp, #28
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	72fb      	strb	r3, [r7, #11]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685c      	ldr	r4, [r3, #4]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6898      	ldr	r0, [r3, #8]
 8003ce6:	893b      	ldrh	r3, [r7, #8]
 8003ce8:	7af9      	ldrb	r1, [r7, #11]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	47a0      	blx	r4
 8003cee:	6178      	str	r0, [r7, #20]
  return ret;
 8003cf0:	697b      	ldr	r3, [r7, #20]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd90      	pop	{r4, r7, pc}

08003cfa <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003cfa:	b590      	push	{r4, r7, lr}
 8003cfc:	b087      	sub	sp, #28
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	461a      	mov	r2, r3
 8003d06:	460b      	mov	r3, r1
 8003d08:	72fb      	strb	r3, [r7, #11]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681c      	ldr	r4, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6898      	ldr	r0, [r3, #8]
 8003d16:	893b      	ldrh	r3, [r7, #8]
 8003d18:	7af9      	ldrb	r1, [r7, #11]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	47a0      	blx	r4
 8003d1e:	6178      	str	r0, [r7, #20]
  return ret;
 8003d20:	697b      	ldr	r3, [r7, #20]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd90      	pop	{r4, r7, pc}

08003d2a <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	460b      	mov	r3, r1
 8003d34:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003d36:	f107 0208 	add.w	r2, r7, #8
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	2120      	movs	r1, #32
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff ffc3 	bl	8003cca <hts221_read_reg>
 8003d44:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10f      	bne.n	8003d6c <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	7a3b      	ldrb	r3, [r7, #8]
 8003d56:	f362 0301 	bfi	r3, r2, #0, #2
 8003d5a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003d5c:	f107 0208 	add.w	r2, r7, #8
 8003d60:	2301      	movs	r3, #1
 8003d62:	2120      	movs	r1, #32
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ffc8 	bl	8003cfa <hts221_write_reg>
 8003d6a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003d82:	f107 0208 	add.w	r2, r7, #8
 8003d86:	2301      	movs	r3, #1
 8003d88:	2120      	movs	r1, #32
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff ff9d 	bl	8003cca <hts221_read_reg>
 8003d90:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8003d92:	7a3b      	ldrb	r3, [r7, #8]
 8003d94:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d81a      	bhi.n	8003dd4 <hts221_data_rate_get+0x5c>
 8003d9e:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <hts221_data_rate_get+0x2c>)
 8003da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da4:	08003db5 	.word	0x08003db5
 8003da8:	08003dbd 	.word	0x08003dbd
 8003dac:	08003dc5 	.word	0x08003dc5
 8003db0:	08003dcd 	.word	0x08003dcd
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
      break;
 8003dba:	e00f      	b.n	8003ddc <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	701a      	strb	r2, [r3, #0]
      break;
 8003dc2:	e00b      	b.n	8003ddc <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	701a      	strb	r2, [r3, #0]
      break;
 8003dca:	e007      	b.n	8003ddc <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2203      	movs	r2, #3
 8003dd0:	701a      	strb	r2, [r3, #0]
      break;
 8003dd2:	e003      	b.n	8003ddc <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	701a      	strb	r2, [r3, #0]
      break;
 8003dda:	bf00      	nop
  }

  return ret;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop

08003de8 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003df4:	f107 0208 	add.w	r2, r7, #8
 8003df8:	2301      	movs	r3, #1
 8003dfa:	2120      	movs	r1, #32
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff64 	bl	8003cca <hts221_read_reg>
 8003e02:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10f      	bne.n	8003e2a <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	7a3b      	ldrb	r3, [r7, #8]
 8003e14:	f362 0382 	bfi	r3, r2, #2, #1
 8003e18:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003e1a:	f107 0208 	add.w	r2, r7, #8
 8003e1e:	2301      	movs	r3, #1
 8003e20:	2120      	movs	r1, #32
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff ff69 	bl	8003cfa <hts221_write_reg>
 8003e28:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8003e3e:	f107 0208 	add.w	r2, r7, #8
 8003e42:	2302      	movs	r3, #2
 8003e44:	2128      	movs	r1, #40	; 0x28
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff ff3f 	bl	8003cca <hts221_read_reg>
 8003e4c:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003e4e:	7a7b      	ldrb	r3, [r7, #9]
 8003e50:	b21a      	sxth	r2, r3
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	7a3b      	ldrb	r3, [r7, #8]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	4413      	add	r3, r2
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	b21a      	sxth	r2, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	801a      	strh	r2, [r3, #0]
  return ret;
 8003e70:	68fb      	ldr	r3, [r7, #12]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003e84:	f107 0208 	add.w	r2, r7, #8
 8003e88:	2302      	movs	r3, #2
 8003e8a:	212a      	movs	r1, #42	; 0x2a
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff ff1c 	bl	8003cca <hts221_read_reg>
 8003e92:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003e94:	7a7b      	ldrb	r3, [r7, #9]
 8003e96:	b21a      	sxth	r2, r3
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	7a3b      	ldrb	r3, [r7, #8]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	4413      	add	r3, r2
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	b21a      	sxth	r2, r3
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	801a      	strh	r2, [r3, #0]
  return ret;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8003eca:	2301      	movs	r3, #1
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	210f      	movs	r1, #15
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff fefa 	bl	8003cca <hts221_read_reg>
 8003ed6:	60f8      	str	r0, [r7, #12]
  return ret;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	460b      	mov	r3, r1
 8003eec:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003eee:	f107 0208 	add.w	r2, r7, #8
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	2120      	movs	r1, #32
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff fee7 	bl	8003cca <hts221_read_reg>
 8003efc:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10f      	bne.n	8003f24 <hts221_power_on_set+0x42>
    reg.pd = val;
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	7a3b      	ldrb	r3, [r7, #8]
 8003f0e:	f362 13c7 	bfi	r3, r2, #7, #1
 8003f12:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003f14:	f107 0208 	add.w	r2, r7, #8
 8003f18:	2301      	movs	r3, #1
 8003f1a:	2120      	movs	r1, #32
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff feec 	bl	8003cfa <hts221_write_reg>
 8003f22:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f24:	68fb      	ldr	r3, [r7, #12]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8003f38:	f107 020b 	add.w	r2, r7, #11
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	2130      	movs	r1, #48	; 0x30
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff fec2 	bl	8003cca <hts221_read_reg>
 8003f46:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003f48:	7afb      	ldrb	r3, [r7, #11]
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f52:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003f56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003f60:	68fb      	ldr	r3, [r7, #12]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003f74:	f107 020b 	add.w	r2, r7, #11
 8003f78:	2301      	movs	r3, #1
 8003f7a:	2131      	movs	r1, #49	; 0x31
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff fea4 	bl	8003cca <hts221_read_reg>
 8003f82:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003f84:	7afb      	ldrb	r3, [r7, #11]
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003f92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b086      	sub	sp, #24
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003fb0:	f107 020f 	add.w	r2, r7, #15
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	2132      	movs	r1, #50	; 0x32
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff fe86 	bl	8003cca <hts221_read_reg>
 8003fbe:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11b      	bne.n	8003ffe <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003fc6:	f107 0210 	add.w	r2, r7, #16
 8003fca:	2301      	movs	r3, #1
 8003fcc:	2135      	movs	r1, #53	; 0x35
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fe7b 	bl	8003cca <hts221_read_reg>
 8003fd4:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8003fd6:	7c3b      	ldrb	r3, [r7, #16]
 8003fd8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	7bfa      	ldrb	r2, [r7, #15]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	ee07 3a90 	vmov	s15, r3
 8003fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ff0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003ff4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003ffe:	697b      	ldr	r3, [r7, #20]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8004012:	f107 020f 	add.w	r2, r7, #15
 8004016:	2301      	movs	r3, #1
 8004018:	2133      	movs	r1, #51	; 0x33
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fe55 	bl	8003cca <hts221_read_reg>
 8004020:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d11b      	bne.n	8004060 <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8004028:	f107 0210 	add.w	r2, r7, #16
 800402c:	2301      	movs	r3, #1
 800402e:	2135      	movs	r1, #53	; 0x35
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff fe4a 	bl	8003cca <hts221_read_reg>
 8004036:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8004038:	7c3b      	ldrb	r3, [r7, #16]
 800403a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800403e:	b2db      	uxtb	r3, r3
 8004040:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8004042:	7cfb      	ldrb	r3, [r7, #19]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	7bfa      	ldrb	r2, [r7, #15]
 8004048:	4413      	add	r3, r2
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004052:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8004056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8004060:	697b      	ldr	r3, [r7, #20]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8004074:	f107 0208 	add.w	r2, r7, #8
 8004078:	2302      	movs	r3, #2
 800407a:	2136      	movs	r1, #54	; 0x36
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff fe24 	bl	8003cca <hts221_read_reg>
 8004082:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004084:	7a7b      	ldrb	r3, [r7, #9]
 8004086:	b29b      	uxth	r3, r3
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	b29a      	uxth	r2, r3
 800408c:	7a3b      	ldrb	r3, [r7, #8]
 800408e:	b29b      	uxth	r3, r3
 8004090:	4413      	add	r3, r2
 8004092:	b29b      	uxth	r3, r3
 8004094:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004096:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800409a:	ee07 3a90 	vmov	s15, r3
 800409e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80040a8:	68fb      	ldr	r3, [r7, #12]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80040bc:	f107 0208 	add.w	r2, r7, #8
 80040c0:	2302      	movs	r3, #2
 80040c2:	213a      	movs	r1, #58	; 0x3a
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff fe00 	bl	8003cca <hts221_read_reg>
 80040ca:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80040cc:	7a7b      	ldrb	r3, [r7, #9]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	7a3b      	ldrb	r3, [r7, #8]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	4413      	add	r3, r2
 80040da:	b29b      	uxth	r3, r3
 80040dc:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80040de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80040f0:	68fb      	ldr	r3, [r7, #12]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8004104:	f107 0208 	add.w	r2, r7, #8
 8004108:	2302      	movs	r3, #2
 800410a:	213c      	movs	r1, #60	; 0x3c
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff fddc 	bl	8003cca <hts221_read_reg>
 8004112:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004114:	7a7b      	ldrb	r3, [r7, #9]
 8004116:	b29b      	uxth	r3, r3
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	b29a      	uxth	r2, r3
 800411c:	7a3b      	ldrb	r3, [r7, #8]
 800411e:	b29b      	uxth	r3, r3
 8004120:	4413      	add	r3, r2
 8004122:	b29b      	uxth	r3, r3
 8004124:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004126:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8004138:	68fb      	ldr	r3, [r7, #12]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 800414c:	f107 0208 	add.w	r2, r7, #8
 8004150:	2302      	movs	r3, #2
 8004152:	213e      	movs	r1, #62	; 0x3e
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff fdb8 	bl	8003cca <hts221_read_reg>
 800415a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800415c:	7a7b      	ldrb	r3, [r7, #9]
 800415e:	b29b      	uxth	r3, r3
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	b29a      	uxth	r2, r3
 8004164:	7a3b      	ldrb	r3, [r7, #8]
 8004166:	b29b      	uxth	r3, r3
 8004168:	4413      	add	r3, r2
 800416a:	b29b      	uxth	r3, r3
 800416c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800416e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004172:	ee07 3a90 	vmov	s15, r3
 8004176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8004180:	68fb      	ldr	r3, [r7, #12]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d103      	bne.n	80041a8 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 80041a0:	f04f 33ff 	mov.w	r3, #4294967295
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	e04d      	b.n	8004244 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	7b1a      	ldrb	r2, [r3, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	699a      	ldr	r2, [r3, #24]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <LPS22HB_RegisterBusIO+0xc4>)
 80041e4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a1a      	ldr	r2, [pc, #104]	; (8004254 <LPS22HB_RegisterBusIO+0xc8>)
 80041ea:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d103      	bne.n	8004202 <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 80041fa:	f04f 33ff 	mov.w	r3, #4294967295
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	e020      	b.n	8004244 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4798      	blx	r3
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 800420e:	f04f 33ff 	mov.w	r3, #4294967295
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	e016      	b.n	8004244 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d112      	bne.n	8004244 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10d      	bne.n	8004244 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004228:	2301      	movs	r3, #1
 800422a:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 800422c:	7afb      	ldrb	r3, [r7, #11]
 800422e:	461a      	mov	r2, r3
 8004230:	2110      	movs	r1, #16
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f9df 	bl	80045f6 <LPS22HB_Write_Reg>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 800423e:	f04f 33ff 	mov.w	r3, #4294967295
 8004242:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004244:	68fb      	ldr	r3, [r7, #12]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	080048b7 	.word	0x080048b7
 8004254:	0800493d 	.word	0x0800493d

08004258 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004266:	2b00      	cmp	r3, #0
 8004268:	d108      	bne.n	800427c <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 faca 	bl	8004804 <LPS22HB_Initialize>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8004276:	f04f 33ff 	mov.w	r3, #4294967295
 800427a:	e004      	b.n	8004286 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800429c:	2b01      	cmp	r3, #1
 800429e:	d111      	bne.n	80042c4 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f877 	bl	8004394 <LPS22HB_PRESS_Disable>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 80042ac:	f04f 33ff 	mov.w	r3, #4294967295
 80042b0:	e00d      	b.n	80042ce <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f918 	bl	80044e8 <LPS22HB_TEMP_Disable>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 80042be:	f04f 33ff 	mov.w	r3, #4294967295
 80042c2:	e004      	b.n	80042ce <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	331c      	adds	r3, #28
 80042e4:	6839      	ldr	r1, [r7, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fcd0 	bl	8004c8c <lps22hb_device_id_get>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 80042f2:	f04f 33ff 	mov.w	r3, #4294967295
 80042f6:	e000      	b.n	80042fa <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2200      	movs	r2, #0
 8004312:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2201      	movs	r2, #1
 8004318:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2201      	movs	r2, #1
 800431e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2200      	movs	r2, #0
 8004324:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	4a05      	ldr	r2, [pc, #20]	; (8004348 <LPS22HB_GetCapabilities+0x44>)
 8004332:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	4a04      	ldr	r2, [pc, #16]	; (8004348 <LPS22HB_GetCapabilities+0x44>)
 8004338:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	42960000 	.word	0x42960000

0800434c <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	e014      	b.n	800438c <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f103 021c 	add.w	r2, r3, #28
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800436e:	4619      	mov	r1, r3
 8004370:	4610      	mov	r0, r2
 8004372:	f000 fbd5 	bl	8004b20 <lps22hb_data_rate_set>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 800437c:	f04f 33ff 	mov.w	r3, #4294967295
 8004380:	e004      	b.n	800438c <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	e024      	b.n	80043f4 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d11a      	bne.n	80043ea <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f103 021c 	add.w	r2, r3, #28
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	332b      	adds	r3, #43	; 0x2b
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f000 fbd3 	bl	8004b6c <lps22hb_data_rate_get>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 80043cc:	f04f 33ff 	mov.w	r3, #4294967295
 80043d0:	e010      	b.n	80043f4 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	331c      	adds	r3, #28
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fba1 	bl	8004b20 <lps22hb_data_rate_set>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 80043e4:	f04f 33ff 	mov.w	r3, #4294967295
 80043e8:	e004      	b.n	80043f4 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8004406:	6839      	ldr	r1, [r7, #0]
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f90f 	bl	800462c <LPS22HB_GetOutputDataRate>
 800440e:	4603      	mov	r3, r0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800442a:	2b01      	cmp	r3, #1
 800442c:	d106      	bne.n	800443c <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 800442e:	ed97 0a00 	vldr	s0, [r7]
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f94e 	bl	80046d4 <LPS22HB_SetOutputDataRate_When_Enabled>
 8004438:	4603      	mov	r3, r0
 800443a:	e005      	b.n	8004448 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 800443c:	ed97 0a00 	vldr	s0, [r7]
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f99f 	bl	8004784 <LPS22HB_SetOutputDataRate_When_Disabled>
 8004446:	4603      	mov	r3, r0
  }
}
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800445a:	f107 030c 	add.w	r3, r7, #12
 800445e:	2204      	movs	r2, #4
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f014 f86a 	bl	801853c <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	331c      	adds	r3, #28
 800446c:	f107 020c 	add.w	r2, r7, #12
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fbbe 	bl	8004bf4 <lps22hb_pressure_raw_get>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 800447e:	f04f 33ff 	mov.w	r3, #4294967295
 8004482:	e009      	b.n	8004498 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4618      	mov	r0, r3
 8004488:	f000 facc 	bl	8004a24 <lps22hb_from_lsb_to_hpa>
 800448c:	eef0 7a40 	vmov.f32	s15, s0
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e014      	b.n	80044e0 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f103 021c 	add.w	r2, r3, #28
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80044c2:	4619      	mov	r1, r3
 80044c4:	4610      	mov	r0, r2
 80044c6:	f000 fb2b 	bl	8004b20 <lps22hb_data_rate_set>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 80044d0:	f04f 33ff 	mov.w	r3, #4294967295
 80044d4:	e004      	b.n	80044e0 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e024      	b.n	8004548 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004504:	2b00      	cmp	r3, #0
 8004506:	d11a      	bne.n	800453e <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f103 021c 	add.w	r2, r3, #28
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	332b      	adds	r3, #43	; 0x2b
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f000 fb29 	bl	8004b6c <lps22hb_data_rate_get>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8004520:	f04f 33ff 	mov.w	r3, #4294967295
 8004524:	e010      	b.n	8004548 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	331c      	adds	r3, #28
 800452a:	2100      	movs	r1, #0
 800452c:	4618      	mov	r0, r3
 800452e:	f000 faf7 	bl	8004b20 <lps22hb_data_rate_set>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8004538:	f04f 33ff 	mov.w	r3, #4294967295
 800453c:	e004      	b.n	8004548 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 800455a:	6839      	ldr	r1, [r7, #0]
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f865 	bl	800462c <LPS22HB_GetOutputDataRate>
 8004562:	4603      	mov	r3, r0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800457e:	2b01      	cmp	r3, #1
 8004580:	d106      	bne.n	8004590 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004582:	ed97 0a00 	vldr	s0, [r7]
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f8a4 	bl	80046d4 <LPS22HB_SetOutputDataRate_When_Enabled>
 800458c:	4603      	mov	r3, r0
 800458e:	e005      	b.n	800459c <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004590:	ed97 0a00 	vldr	s0, [r7]
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f8f5 	bl	8004784 <LPS22HB_SetOutputDataRate_When_Disabled>
 800459a:	4603      	mov	r3, r0
  }
}
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80045ae:	f107 030c 	add.w	r3, r7, #12
 80045b2:	2202      	movs	r2, #2
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f013 ffc0 	bl	801853c <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	331c      	adds	r3, #28
 80045c0:	f107 020c 	add.w	r2, r7, #12
 80045c4:	4611      	mov	r1, r2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fb3d 	bl	8004c46 <lps22hb_temperature_raw_get>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 80045d2:	f04f 33ff 	mov.w	r3, #4294967295
 80045d6:	e00a      	b.n	80045ee <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 80045d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fa39 	bl	8004a54 <lps22hb_from_lsb_to_degc>
 80045e2:	eef0 7a40 	vmov.f32	s15, s0
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	70fb      	strb	r3, [r7, #3]
 8004602:	4613      	mov	r3, r2
 8004604:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f103 001c 	add.w	r0, r3, #28
 800460c:	1cba      	adds	r2, r7, #2
 800460e:	78f9      	ldrb	r1, [r7, #3]
 8004610:	2301      	movs	r3, #1
 8004612:	f000 f9ee 	bl	80049f2 <lps22hb_write_reg>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 800461c:	f04f 33ff 	mov.w	r3, #4294967295
 8004620:	e000      	b.n	8004624 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	331c      	adds	r3, #28
 800463e:	f107 020b 	add.w	r2, r7, #11
 8004642:	4611      	mov	r1, r2
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fa91 	bl	8004b6c <lps22hb_data_rate_get>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8004650:	f04f 33ff 	mov.w	r3, #4294967295
 8004654:	e031      	b.n	80046ba <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 8004656:	7afb      	ldrb	r3, [r7, #11]
 8004658:	2b05      	cmp	r3, #5
 800465a:	d829      	bhi.n	80046b0 <LPS22HB_GetOutputDataRate+0x84>
 800465c:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <LPS22HB_GetOutputDataRate+0x38>)
 800465e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004662:	bf00      	nop
 8004664:	0800467d 	.word	0x0800467d
 8004668:	08004687 	.word	0x08004687
 800466c:	08004691 	.word	0x08004691
 8004670:	08004699 	.word	0x08004699
 8004674:	080046a1 	.word	0x080046a1
 8004678:	080046a9 	.word	0x080046a9
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
      break;
 8004684:	e018      	b.n	80046b8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800468c:	601a      	str	r2, [r3, #0]
      break;
 800468e:	e013      	b.n	80046b8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	4a0c      	ldr	r2, [pc, #48]	; (80046c4 <LPS22HB_GetOutputDataRate+0x98>)
 8004694:	601a      	str	r2, [r3, #0]
      break;
 8004696:	e00f      	b.n	80046b8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	4a0b      	ldr	r2, [pc, #44]	; (80046c8 <LPS22HB_GetOutputDataRate+0x9c>)
 800469c:	601a      	str	r2, [r3, #0]
      break;
 800469e:	e00b      	b.n	80046b8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	4a0a      	ldr	r2, [pc, #40]	; (80046cc <LPS22HB_GetOutputDataRate+0xa0>)
 80046a4:	601a      	str	r2, [r3, #0]
      break;
 80046a6:	e007      	b.n	80046b8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	4a09      	ldr	r2, [pc, #36]	; (80046d0 <LPS22HB_GetOutputDataRate+0xa4>)
 80046ac:	601a      	str	r2, [r3, #0]
      break;
 80046ae:	e003      	b.n	80046b8 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 80046b0:	f04f 33ff 	mov.w	r3, #4294967295
 80046b4:	60fb      	str	r3, [r7, #12]
      break;
 80046b6:	bf00      	nop
  }

  return ret;
 80046b8:	68fb      	ldr	r3, [r7, #12]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	41200000 	.word	0x41200000
 80046c8:	41c80000 	.word	0x41c80000
 80046cc:	42480000 	.word	0x42480000
 80046d0:	42960000 	.word	0x42960000

080046d4 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 80046e0:	edd7 7a00 	vldr	s15, [r7]
 80046e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f0:	d801      	bhi.n	80046f6 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e021      	b.n	800473a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80046f6:	edd7 7a00 	vldr	s15, [r7]
 80046fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80046fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004706:	d801      	bhi.n	800470c <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 8004708:	2302      	movs	r3, #2
 800470a:	e016      	b.n	800473a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 800470c:	edd7 7a00 	vldr	s15, [r7]
 8004710:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471c:	d801      	bhi.n	8004722 <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 800471e:	2303      	movs	r3, #3
 8004720:	e00b      	b.n	800473a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8004722:	edd7 7a00 	vldr	s15, [r7]
 8004726:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004780 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 800472a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800472e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004732:	d801      	bhi.n	8004738 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8004734:	2304      	movs	r3, #4
 8004736:	e000      	b.n	800473a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8004738:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 800473a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	331c      	adds	r3, #28
 8004740:	7bfa      	ldrb	r2, [r7, #15]
 8004742:	4611      	mov	r1, r2
 8004744:	4618      	mov	r0, r3
 8004746:	f000 f9eb 	bl	8004b20 <lps22hb_data_rate_set>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 8004750:	f04f 33ff 	mov.w	r3, #4294967295
 8004754:	e00f      	b.n	8004776 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f103 021c 	add.w	r2, r3, #28
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	332b      	adds	r3, #43	; 0x2b
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f000 fa02 	bl	8004b6c <lps22hb_data_rate_get>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 800476e:	f04f 33ff 	mov.w	r3, #4294967295
 8004772:	e000      	b.n	8004776 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	42480000 	.word	0x42480000

08004784 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004790:	edd7 7a00 	vldr	s15, [r7]
 8004794:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800479c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a0:	d801      	bhi.n	80047a6 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e021      	b.n	80047ea <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80047a6:	edd7 7a00 	vldr	s15, [r7]
 80047aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80047ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b6:	d801      	bhi.n	80047bc <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e016      	b.n	80047ea <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80047bc:	edd7 7a00 	vldr	s15, [r7]
 80047c0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80047c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047cc:	d801      	bhi.n	80047d2 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 80047ce:	2303      	movs	r3, #3
 80047d0:	e00b      	b.n	80047ea <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80047d2:	edd7 7a00 	vldr	s15, [r7]
 80047d6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004800 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 80047da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e2:	d801      	bhi.n	80047e8 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 80047e4:	2304      	movs	r3, #4
 80047e6:	e000      	b.n	80047ea <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80047e8:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	42480000 	.word	0x42480000

08004804 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	331c      	adds	r3, #28
 8004810:	2101      	movs	r1, #1
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fa4b 	bl	8004cae <lps22hb_low_power_set>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 800481e:	f04f 33ff 	mov.w	r3, #4294967295
 8004822:	e044      	b.n	80048ae <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	331c      	adds	r3, #28
 8004828:	2100      	movs	r1, #0
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f978 	bl	8004b20 <lps22hb_data_rate_set>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8004836:	f04f 33ff 	mov.w	r3, #4294967295
 800483a:	e038      	b.n	80048ae <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	331c      	adds	r3, #28
 8004840:	2102      	movs	r1, #2
 8004842:	4618      	mov	r0, r3
 8004844:	f000 f946 	bl	8004ad4 <lps22hb_low_pass_filter_mode_set>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 800484e:	f04f 33ff 	mov.w	r3, #4294967295
 8004852:	e02c      	b.n	80048ae <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	331c      	adds	r3, #28
 8004858:	2101      	movs	r1, #1
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f914 	bl	8004a88 <lps22hb_block_data_update_set>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8004866:	f04f 33ff 	mov.w	r3, #4294967295
 800486a:	e020      	b.n	80048ae <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10b      	bne.n	800488c <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	331c      	adds	r3, #28
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fa3d 	bl	8004cfa <lps22hb_auto_add_inc_set>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00e      	beq.n	80048a4 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004886:	f04f 33ff 	mov.w	r3, #4294967295
 800488a:	e010      	b.n	80048ae <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	331c      	adds	r3, #28
 8004890:	2101      	movs	r1, #1
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fa31 	bl	8004cfa <lps22hb_auto_add_inc_set>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800489e:	f04f 33ff 	mov.w	r3, #4294967295
 80048a2:	e004      	b.n	80048ae <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2203      	movs	r2, #3
 80048a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80048b6:	b590      	push	{r4, r7, lr}
 80048b8:	b089      	sub	sp, #36	; 0x24
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	461a      	mov	r2, r3
 80048c2:	460b      	mov	r3, r1
 80048c4:	72fb      	strb	r3, [r7, #11]
 80048c6:	4613      	mov	r3, r2
 80048c8:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d121      	bne.n	800491e <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80048da:	2300      	movs	r3, #0
 80048dc:	83fb      	strh	r3, [r7, #30]
 80048de:	e018      	b.n	8004912 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	695c      	ldr	r4, [r3, #20]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	7b1b      	ldrb	r3, [r3, #12]
 80048e8:	b298      	uxth	r0, r3
 80048ea:	7afb      	ldrb	r3, [r7, #11]
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	8bfb      	ldrh	r3, [r7, #30]
 80048f0:	4413      	add	r3, r2
 80048f2:	b299      	uxth	r1, r3
 80048f4:	8bfb      	ldrh	r3, [r7, #30]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	441a      	add	r2, r3
 80048fa:	2301      	movs	r3, #1
 80048fc:	47a0      	blx	r4
 80048fe:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8004906:	f04f 33ff 	mov.w	r3, #4294967295
 800490a:	e013      	b.n	8004934 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 800490c:	8bfb      	ldrh	r3, [r7, #30]
 800490e:	3301      	adds	r3, #1
 8004910:	83fb      	strh	r3, [r7, #30]
 8004912:	8bfa      	ldrh	r2, [r7, #30]
 8004914:	893b      	ldrh	r3, [r7, #8]
 8004916:	429a      	cmp	r2, r3
 8004918:	d3e2      	bcc.n	80048e0 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	e00a      	b.n	8004934 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	695c      	ldr	r4, [r3, #20]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	7b1b      	ldrb	r3, [r3, #12]
 8004926:	b298      	uxth	r0, r3
 8004928:	7afb      	ldrb	r3, [r7, #11]
 800492a:	b299      	uxth	r1, r3
 800492c:	893b      	ldrh	r3, [r7, #8]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	47a0      	blx	r4
 8004932:	4603      	mov	r3, r0
  }
}
 8004934:	4618      	mov	r0, r3
 8004936:	3724      	adds	r7, #36	; 0x24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd90      	pop	{r4, r7, pc}

0800493c <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800493c:	b590      	push	{r4, r7, lr}
 800493e:	b089      	sub	sp, #36	; 0x24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	607a      	str	r2, [r7, #4]
 8004946:	461a      	mov	r2, r3
 8004948:	460b      	mov	r3, r1
 800494a:	72fb      	strb	r3, [r7, #11]
 800494c:	4613      	mov	r3, r2
 800494e:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8004950:	2300      	movs	r3, #0
 8004952:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d121      	bne.n	80049a4 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8004960:	2300      	movs	r3, #0
 8004962:	83fb      	strh	r3, [r7, #30]
 8004964:	e018      	b.n	8004998 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	691c      	ldr	r4, [r3, #16]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	7b1b      	ldrb	r3, [r3, #12]
 800496e:	b298      	uxth	r0, r3
 8004970:	7afb      	ldrb	r3, [r7, #11]
 8004972:	b29a      	uxth	r2, r3
 8004974:	8bfb      	ldrh	r3, [r7, #30]
 8004976:	4413      	add	r3, r2
 8004978:	b299      	uxth	r1, r3
 800497a:	8bfb      	ldrh	r3, [r7, #30]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	441a      	add	r2, r3
 8004980:	2301      	movs	r3, #1
 8004982:	47a0      	blx	r4
 8004984:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 800498c:	f04f 33ff 	mov.w	r3, #4294967295
 8004990:	e013      	b.n	80049ba <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004992:	8bfb      	ldrh	r3, [r7, #30]
 8004994:	3301      	adds	r3, #1
 8004996:	83fb      	strh	r3, [r7, #30]
 8004998:	8bfa      	ldrh	r2, [r7, #30]
 800499a:	893b      	ldrh	r3, [r7, #8]
 800499c:	429a      	cmp	r2, r3
 800499e:	d3e2      	bcc.n	8004966 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	e00a      	b.n	80049ba <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	691c      	ldr	r4, [r3, #16]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	7b1b      	ldrb	r3, [r3, #12]
 80049ac:	b298      	uxth	r0, r3
 80049ae:	7afb      	ldrb	r3, [r7, #11]
 80049b0:	b299      	uxth	r1, r3
 80049b2:	893b      	ldrh	r3, [r7, #8]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	47a0      	blx	r4
 80049b8:	4603      	mov	r3, r0
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3724      	adds	r7, #36	; 0x24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd90      	pop	{r4, r7, pc}

080049c2 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80049c2:	b590      	push	{r4, r7, lr}
 80049c4:	b087      	sub	sp, #28
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	461a      	mov	r2, r3
 80049ce:	460b      	mov	r3, r1
 80049d0:	72fb      	strb	r3, [r7, #11]
 80049d2:	4613      	mov	r3, r2
 80049d4:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	685c      	ldr	r4, [r3, #4]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6898      	ldr	r0, [r3, #8]
 80049de:	893b      	ldrh	r3, [r7, #8]
 80049e0:	7af9      	ldrb	r1, [r7, #11]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	47a0      	blx	r4
 80049e6:	6178      	str	r0, [r7, #20]
  return ret;
 80049e8:	697b      	ldr	r3, [r7, #20]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd90      	pop	{r4, r7, pc}

080049f2 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80049f2:	b590      	push	{r4, r7, lr}
 80049f4:	b087      	sub	sp, #28
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	461a      	mov	r2, r3
 80049fe:	460b      	mov	r3, r1
 8004a00:	72fb      	strb	r3, [r7, #11]
 8004a02:	4613      	mov	r3, r2
 8004a04:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681c      	ldr	r4, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6898      	ldr	r0, [r3, #8]
 8004a0e:	893b      	ldrh	r3, [r7, #8]
 8004a10:	7af9      	ldrb	r1, [r7, #11]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	47a0      	blx	r4
 8004a16:	6178      	str	r0, [r7, #20]
  return ret;
 8004a18:	697b      	ldr	r3, [r7, #20]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	371c      	adds	r7, #28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd90      	pop	{r4, r7, pc}
	...

08004a24 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 1048576.0f );
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a36:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004a50 <lps22hb_from_lsb_to_hpa+0x2c>
 8004a3a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a3e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004a42:	eeb0 0a67 	vmov.f32	s0, s15
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	49800000 	.word	0x49800000

08004a54 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 8004a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a6a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004a84 <lps22hb_from_lsb_to_degc+0x30>
 8004a6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a72:	eef0 7a66 	vmov.f32	s15, s13
}
 8004a76:	eeb0 0a67 	vmov.f32	s0, s15
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	42c80000 	.word	0x42c80000

08004a88 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004a94:	f107 0208 	add.w	r2, r7, #8
 8004a98:	2301      	movs	r3, #1
 8004a9a:	2110      	movs	r1, #16
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff ff90 	bl	80049c2 <lps22hb_read_reg>
 8004aa2:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10f      	bne.n	8004aca <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	7a3b      	ldrb	r3, [r7, #8]
 8004ab4:	f362 0341 	bfi	r3, r2, #1, #1
 8004ab8:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004aba:	f107 0208 	add.w	r2, r7, #8
 8004abe:	2301      	movs	r3, #1
 8004ac0:	2110      	movs	r1, #16
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff ff95 	bl	80049f2 <lps22hb_write_reg>
 8004ac8:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004aca:	68fb      	ldr	r3, [r7, #12]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004ae0:	f107 0208 	add.w	r2, r7, #8
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	2110      	movs	r1, #16
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff ff6a 	bl	80049c2 <lps22hb_read_reg>
 8004aee:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10f      	bne.n	8004b16 <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	7a3b      	ldrb	r3, [r7, #8]
 8004b00:	f362 0383 	bfi	r3, r2, #2, #2
 8004b04:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004b06:	f107 0208 	add.w	r2, r7, #8
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	2110      	movs	r1, #16
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff ff6f 	bl	80049f2 <lps22hb_write_reg>
 8004b14:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004b16:	68fb      	ldr	r3, [r7, #12]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004b2c:	f107 0208 	add.w	r2, r7, #8
 8004b30:	2301      	movs	r3, #1
 8004b32:	2110      	movs	r1, #16
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff ff44 	bl	80049c2 <lps22hb_read_reg>
 8004b3a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10f      	bne.n	8004b62 <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	7a3b      	ldrb	r3, [r7, #8]
 8004b4c:	f362 1306 	bfi	r3, r2, #4, #3
 8004b50:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004b52:	f107 0208 	add.w	r2, r7, #8
 8004b56:	2301      	movs	r3, #1
 8004b58:	2110      	movs	r1, #16
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff ff49 	bl	80049f2 <lps22hb_write_reg>
 8004b60:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004b62:	68fb      	ldr	r3, [r7, #12]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004b76:	f107 0208 	add.w	r2, r7, #8
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	2110      	movs	r1, #16
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff ff1f 	bl	80049c2 <lps22hb_read_reg>
 8004b84:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl_reg1.odr) {
 8004b86:	7a3b      	ldrb	r3, [r7, #8]
 8004b88:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b05      	cmp	r3, #5
 8004b90:	d826      	bhi.n	8004be0 <lps22hb_data_rate_get+0x74>
 8004b92:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <lps22hb_data_rate_get+0x2c>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004bb1 	.word	0x08004bb1
 8004b9c:	08004bb9 	.word	0x08004bb9
 8004ba0:	08004bc1 	.word	0x08004bc1
 8004ba4:	08004bc9 	.word	0x08004bc9
 8004ba8:	08004bd1 	.word	0x08004bd1
 8004bac:	08004bd9 	.word	0x08004bd9
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	701a      	strb	r2, [r3, #0]
      break;
 8004bb6:	e017      	b.n	8004be8 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	701a      	strb	r2, [r3, #0]
      break;
 8004bbe:	e013      	b.n	8004be8 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	701a      	strb	r2, [r3, #0]
      break;
 8004bc6:	e00f      	b.n	8004be8 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2203      	movs	r2, #3
 8004bcc:	701a      	strb	r2, [r3, #0]
      break;
 8004bce:	e00b      	b.n	8004be8 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2204      	movs	r2, #4
 8004bd4:	701a      	strb	r2, [r3, #0]
      break;
 8004bd6:	e007      	b.n	8004be8 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2205      	movs	r2, #5
 8004bdc:	701a      	strb	r2, [r3, #0]
      break;
 8004bde:	e003      	b.n	8004be8 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2201      	movs	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]
      break;
 8004be6:	bf00      	nop
  }

  return ret;
 8004be8:	68fb      	ldr	r3, [r7, #12]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop

08004bf4 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8004bfe:	f107 0208 	add.w	r2, r7, #8
 8004c02:	2303      	movs	r3, #3
 8004c04:	2128      	movs	r1, #40	; 0x28
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fedb 	bl	80049c2 <lps22hb_read_reg>
 8004c0c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8004c0e:	7abb      	ldrb	r3, [r7, #10]
 8004c10:	461a      	mov	r2, r3
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	021b      	lsls	r3, r3, #8
 8004c1c:	7a7a      	ldrb	r2, [r7, #9]
 8004c1e:	441a      	add	r2, r3
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	7a3a      	ldrb	r2, [r7, #8]
 8004c2c:	441a      	add	r2, r3
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	021a      	lsls	r2, r3, #8
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	601a      	str	r2, [r3, #0]
  return ret;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 8004c50:	f107 0208 	add.w	r2, r7, #8
 8004c54:	2302      	movs	r3, #2
 8004c56:	212b      	movs	r1, #43	; 0x2b
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff feb2 	bl	80049c2 <lps22hb_read_reg>
 8004c5e:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8004c60:	7a7b      	ldrb	r3, [r7, #9]
 8004c62:	b21a      	sxth	r2, r3
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	021b      	lsls	r3, r3, #8
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	7a3b      	ldrb	r3, [r7, #8]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	4413      	add	r3, r2
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	b21a      	sxth	r2, r3
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	801a      	strh	r2, [r3, #0]
  return ret;
 8004c82:	68fb      	ldr	r3, [r7, #12]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8004c96:	2301      	movs	r3, #1
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	210f      	movs	r1, #15
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff fe90 	bl	80049c2 <lps22hb_read_reg>
 8004ca2:	60f8      	str	r0, [r7, #12]
  return ret;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8004cba:	f107 0208 	add.w	r2, r7, #8
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	211a      	movs	r1, #26
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7ff fe7d 	bl	80049c2 <lps22hb_read_reg>
 8004cc8:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10f      	bne.n	8004cf0 <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	7a3b      	ldrb	r3, [r7, #8]
 8004cda:	f362 0300 	bfi	r3, r2, #0, #1
 8004cde:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8004ce0:	f107 0208 	add.w	r2, r7, #8
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	211a      	movs	r1, #26
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff fe82 	bl	80049f2 <lps22hb_write_reg>
 8004cee:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	460b      	mov	r3, r1
 8004d04:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004d06:	f107 0208 	add.w	r2, r7, #8
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	2111      	movs	r1, #17
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff fe57 	bl	80049c2 <lps22hb_read_reg>
 8004d14:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10f      	bne.n	8004d3c <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	7a3b      	ldrb	r3, [r7, #8]
 8004d26:	f362 1304 	bfi	r3, r2, #4, #1
 8004d2a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004d2c:	f107 0208 	add.w	r2, r7, #8
 8004d30:	2301      	movs	r3, #1
 8004d32:	2111      	movs	r1, #17
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff fe5c 	bl	80049f2 <lps22hb_write_reg>
 8004d3a:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d103      	bne.n	8004d64 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8004d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	e04d      	b.n	8004e00 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	7b1a      	ldrb	r2, [r3, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	691a      	ldr	r2, [r3, #16]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	695a      	ldr	r2, [r3, #20]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a1b      	ldr	r2, [pc, #108]	; (8004e0c <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8004da0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a1a      	ldr	r2, [pc, #104]	; (8004e10 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8004da6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d103      	bne.n	8004dbe <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8004db6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	e020      	b.n	8004e00 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4798      	blx	r3
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8004dca:	f04f 33ff 	mov.w	r3, #4294967295
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	e016      	b.n	8004e00 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d112      	bne.n	8004e00 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10d      	bne.n	8004e00 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004de4:	2301      	movs	r3, #1
 8004de6:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8004de8:	7afb      	ldrb	r3, [r7, #11]
 8004dea:	461a      	mov	r2, r3
 8004dec:	2123      	movs	r1, #35	; 0x23
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fb55 	bl	800549e <LSM303AGR_ACC_Write_Reg>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8004dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfe:	e000      	b.n	8004e02 <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8004e00:	68fb      	ldr	r3, [r7, #12]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	08005cad 	.word	0x08005cad
 8004e10:	08005d0f 	.word	0x08005d0f

08004e14 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	331c      	adds	r3, #28
 8004e20:	2101      	movs	r1, #1
 8004e22:	4618      	mov	r0, r3
 8004e24:	f001 f94a 	bl	80060bc <lsm303agr_xl_block_data_update_set>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8004e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e32:	e02c      	b.n	8004e8e <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	331c      	adds	r3, #28
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f001 faed 	bl	800641a <lsm303agr_xl_fifo_mode_set>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8004e46:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4a:	e020      	b.n	8004e8e <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2205      	movs	r2, #5
 8004e50:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	331c      	adds	r3, #28
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f001 f84e 	bl	8005efc <lsm303agr_xl_data_rate_set>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8004e66:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6a:	e010      	b.n	8004e8e <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	331c      	adds	r3, #28
 8004e70:	2100      	movs	r1, #0
 8004e72:	4618      	mov	r0, r3
 8004e74:	f001 f8c4 	bl	8006000 <lsm303agr_xl_full_scale_set>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8004e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e82:	e004      	b.n	8004e8e <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f87c 	bl	8004f9c <LSM303AGR_ACC_Disable>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8004eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8004eae:	e008      	b.n	8004ec2 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	331c      	adds	r3, #28
 8004ed8:	6839      	ldr	r1, [r7, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f001 fa55 	bl	800638a <lsm303agr_xl_device_id_get>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8004ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eea:	e000      	b.n	8004eee <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2201      	movs	r2, #1
 8004f06:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2200      	movs	r2, #0
 8004f12:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2200      	movs	r2, #0
 8004f18:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2210      	movs	r2, #16
 8004f24:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	4a06      	ldr	r2, [pc, #24]	; (8004f50 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8004f38:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	43c80000 	.word	0x43c80000

08004f54 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e014      	b.n	8004f94 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f103 021c 	add.w	r2, r3, #28
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f000 ffbf 	bl	8005efc <lsm303agr_xl_data_rate_set>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8004f84:	f04f 33ff 	mov.w	r3, #4294967295
 8004f88:	e004      	b.n	8004f94 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e01f      	b.n	8004ff2 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f103 021c 	add.w	r2, r3, #28
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	332a      	adds	r3, #42	; 0x2a
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	f000 ffc2 	bl	8005f48 <lsm303agr_xl_data_rate_get>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8004fca:	f04f 33ff 	mov.w	r3, #4294967295
 8004fce:	e010      	b.n	8004ff2 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	331c      	adds	r3, #28
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 ff90 	bl	8005efc <lsm303agr_xl_data_rate_set>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8004fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe6:	e004      	b.n	8004ff2 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	331c      	adds	r3, #28
 800500c:	f107 020b 	add.w	r2, r7, #11
 8005010:	4611      	mov	r1, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f000 ff3e 	bl	8005e94 <lsm303agr_xl_operating_mode_get>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 800501e:	f04f 33ff 	mov.w	r3, #4294967295
 8005022:	e031      	b.n	8005088 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8005024:	7afb      	ldrb	r3, [r7, #11]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d01a      	beq.n	8005060 <LSM303AGR_ACC_GetSensitivity+0x66>
 800502a:	2b02      	cmp	r3, #2
 800502c:	dc22      	bgt.n	8005074 <LSM303AGR_ACC_GetSensitivity+0x7a>
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <LSM303AGR_ACC_GetSensitivity+0x3e>
 8005032:	2b01      	cmp	r3, #1
 8005034:	d00a      	beq.n	800504c <LSM303AGR_ACC_GetSensitivity+0x52>
 8005036:	e01d      	b.n	8005074 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8005038:	6839      	ldr	r1, [r7, #0]
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fca8 	bl	8005990 <LSM303AGR_ACC_GetSensitivityHR>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01a      	beq.n	800507c <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8005046:	f04f 33ff 	mov.w	r3, #4294967295
 800504a:	e01d      	b.n	8005088 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 800504c:	6839      	ldr	r1, [r7, #0]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fce4 	bl	8005a1c <LSM303AGR_ACC_GetSensitivityNM>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d012      	beq.n	8005080 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 800505a:	f04f 33ff 	mov.w	r3, #4294967295
 800505e:	e013      	b.n	8005088 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8005060:	6839      	ldr	r1, [r7, #0]
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fd20 	bl	8005aa8 <LSM303AGR_ACC_GetSensitivityLP>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 800506e:	f04f 33ff 	mov.w	r3, #4294967295
 8005072:	e009      	b.n	8005088 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8005074:	f04f 33ff 	mov.w	r3, #4294967295
 8005078:	60fb      	str	r3, [r7, #12]
      break;
 800507a:	e004      	b.n	8005086 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 800507c:	bf00      	nop
 800507e:	e002      	b.n	8005086 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8005080:	bf00      	nop
 8005082:	e000      	b.n	8005086 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8005084:	bf00      	nop
  }

  return ret;
 8005086:	68fb      	ldr	r3, [r7, #12]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	331c      	adds	r3, #28
 80050a2:	f107 020b 	add.w	r2, r7, #11
 80050a6:	4611      	mov	r1, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 fef3 	bl	8005e94 <lsm303agr_xl_operating_mode_get>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80050b4:	f04f 33ff 	mov.w	r3, #4294967295
 80050b8:	e09d      	b.n	80051f6 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	331c      	adds	r3, #28
 80050be:	f107 020a 	add.w	r2, r7, #10
 80050c2:	4611      	mov	r1, r2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 ff3f 	bl	8005f48 <lsm303agr_xl_data_rate_get>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 80050d0:	f04f 33ff 	mov.w	r3, #4294967295
 80050d4:	e08f      	b.n	80051f6 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 80050d6:	7afb      	ldrb	r3, [r7, #11]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d147      	bne.n	800516c <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 80050dc:	7abb      	ldrb	r3, [r7, #10]
 80050de:	2b09      	cmp	r3, #9
 80050e0:	d840      	bhi.n	8005164 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 80050e2:	a201      	add	r2, pc, #4	; (adr r2, 80050e8 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 80050e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e8:	08005111 	.word	0x08005111
 80050ec:	0800511b 	.word	0x0800511b
 80050f0:	08005125 	.word	0x08005125
 80050f4:	0800512d 	.word	0x0800512d
 80050f8:	08005135 	.word	0x08005135
 80050fc:	0800513d 	.word	0x0800513d
 8005100:	08005145 	.word	0x08005145
 8005104:	0800514d 	.word	0x0800514d
 8005108:	08005155 	.word	0x08005155
 800510c:	0800515d 	.word	0x0800515d
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
        break;
 8005118:	e06c      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005120:	601a      	str	r2, [r3, #0]
        break;
 8005122:	e067      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	4a36      	ldr	r2, [pc, #216]	; (8005200 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8005128:	601a      	str	r2, [r3, #0]
        break;
 800512a:	e063      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	4a35      	ldr	r2, [pc, #212]	; (8005204 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8005130:	601a      	str	r2, [r3, #0]
        break;
 8005132:	e05f      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	4a34      	ldr	r2, [pc, #208]	; (8005208 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8005138:	601a      	str	r2, [r3, #0]
        break;
 800513a:	e05b      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	4a33      	ldr	r2, [pc, #204]	; (800520c <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8005140:	601a      	str	r2, [r3, #0]
        break;
 8005142:	e057      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	4a32      	ldr	r2, [pc, #200]	; (8005210 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8005148:	601a      	str	r2, [r3, #0]
        break;
 800514a:	e053      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	4a31      	ldr	r2, [pc, #196]	; (8005214 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8005150:	601a      	str	r2, [r3, #0]
        break;
 8005152:	e04f      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	4a30      	ldr	r2, [pc, #192]	; (8005218 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8005158:	601a      	str	r2, [r3, #0]
        break;
 800515a:	e04b      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	4a2f      	ldr	r2, [pc, #188]	; (800521c <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8005160:	601a      	str	r2, [r3, #0]
        break;
 8005162:	e047      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8005164:	f04f 33ff 	mov.w	r3, #4294967295
 8005168:	60fb      	str	r3, [r7, #12]
        break;
 800516a:	e043      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 800516c:	7abb      	ldrb	r3, [r7, #10]
 800516e:	2b09      	cmp	r3, #9
 8005170:	d83c      	bhi.n	80051ec <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8005172:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8005174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005178:	080051a1 	.word	0x080051a1
 800517c:	080051ab 	.word	0x080051ab
 8005180:	080051b5 	.word	0x080051b5
 8005184:	080051bd 	.word	0x080051bd
 8005188:	080051c5 	.word	0x080051c5
 800518c:	080051cd 	.word	0x080051cd
 8005190:	080051d5 	.word	0x080051d5
 8005194:	080051dd 	.word	0x080051dd
 8005198:	080051ed 	.word	0x080051ed
 800519c:	080051e5 	.word	0x080051e5
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	f04f 0200 	mov.w	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
        break;
 80051a8:	e024      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80051b0:	601a      	str	r2, [r3, #0]
        break;
 80051b2:	e01f      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	4a12      	ldr	r2, [pc, #72]	; (8005200 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 80051b8:	601a      	str	r2, [r3, #0]
        break;
 80051ba:	e01b      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	4a11      	ldr	r2, [pc, #68]	; (8005204 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80051c0:	601a      	str	r2, [r3, #0]
        break;
 80051c2:	e017      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	4a10      	ldr	r2, [pc, #64]	; (8005208 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80051c8:	601a      	str	r2, [r3, #0]
        break;
 80051ca:	e013      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	4a0f      	ldr	r2, [pc, #60]	; (800520c <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80051d0:	601a      	str	r2, [r3, #0]
        break;
 80051d2:	e00f      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	4a0e      	ldr	r2, [pc, #56]	; (8005210 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80051d8:	601a      	str	r2, [r3, #0]
        break;
 80051da:	e00b      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	4a0d      	ldr	r2, [pc, #52]	; (8005214 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80051e0:	601a      	str	r2, [r3, #0]
        break;
 80051e2:	e007      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	4a0e      	ldr	r2, [pc, #56]	; (8005220 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 80051e8:	601a      	str	r2, [r3, #0]
        break;
 80051ea:	e003      	b.n	80051f4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 80051ec:	f04f 33ff 	mov.w	r3, #4294967295
 80051f0:	60fb      	str	r3, [r7, #12]
        break;
 80051f2:	bf00      	nop
    }
  }

  return ret;
 80051f4:	68fb      	ldr	r3, [r7, #12]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	41200000 	.word	0x41200000
 8005204:	41c80000 	.word	0x41c80000
 8005208:	42480000 	.word	0x42480000
 800520c:	42c80000 	.word	0x42c80000
 8005210:	43480000 	.word	0x43480000
 8005214:	43c80000 	.word	0x43c80000
 8005218:	44ca8000 	.word	0x44ca8000
 800521c:	45a80000 	.word	0x45a80000
 8005220:	44a80000 	.word	0x44a80000

08005224 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005236:	2b01      	cmp	r3, #1
 8005238:	d106      	bne.n	8005248 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800523a:	ed97 0a00 	vldr	s0, [r7]
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fc78 	bl	8005b34 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8005244:	4603      	mov	r3, r0
 8005246:	e005      	b.n	8005254 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005248:	ed97 0a00 	vldr	s0, [r7]
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fcd3 	bl	8005bf8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8005252:	4603      	mov	r3, r0
  }
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	331c      	adds	r3, #28
 800526e:	f107 020b 	add.w	r2, r7, #11
 8005272:	4611      	mov	r1, r2
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fee9 	bl	800604c <lsm303agr_xl_full_scale_get>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8005280:	f04f 33ff 	mov.w	r3, #4294967295
 8005284:	e023      	b.n	80052ce <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8005286:	7afb      	ldrb	r3, [r7, #11]
 8005288:	2b03      	cmp	r3, #3
 800528a:	d81b      	bhi.n	80052c4 <LSM303AGR_ACC_GetFullScale+0x68>
 800528c:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <LSM303AGR_ACC_GetFullScale+0x38>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052a5 	.word	0x080052a5
 8005298:	080052ad 	.word	0x080052ad
 800529c:	080052b5 	.word	0x080052b5
 80052a0:	080052bd 	.word	0x080052bd
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2202      	movs	r2, #2
 80052a8:	601a      	str	r2, [r3, #0]
      break;
 80052aa:	e00f      	b.n	80052cc <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2204      	movs	r2, #4
 80052b0:	601a      	str	r2, [r3, #0]
      break;
 80052b2:	e00b      	b.n	80052cc <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2208      	movs	r2, #8
 80052b8:	601a      	str	r2, [r3, #0]
      break;
 80052ba:	e007      	b.n	80052cc <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2210      	movs	r2, #16
 80052c0:	601a      	str	r2, [r3, #0]
      break;
 80052c2:	e003      	b.n	80052cc <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80052c4:	f04f 33ff 	mov.w	r3, #4294967295
 80052c8:	60fb      	str	r3, [r7, #12]
      break;
 80052ca:	bf00      	nop
  }

  return ret;
 80052cc:	68fb      	ldr	r3, [r7, #12]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop

080052d8 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	dd0b      	ble.n	8005300 <LSM303AGR_ACC_SetFullScale+0x28>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	dd06      	ble.n	80052fc <LSM303AGR_ACC_SetFullScale+0x24>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	dc01      	bgt.n	80052f8 <LSM303AGR_ACC_SetFullScale+0x20>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e004      	b.n	8005302 <LSM303AGR_ACC_SetFullScale+0x2a>
 80052f8:	2303      	movs	r3, #3
 80052fa:	e002      	b.n	8005302 <LSM303AGR_ACC_SetFullScale+0x2a>
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <LSM303AGR_ACC_SetFullScale+0x2a>
 8005300:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8005302:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	331c      	adds	r3, #28
 8005308:	7bfa      	ldrb	r2, [r7, #15]
 800530a:	4611      	mov	r1, r2
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fe77 	bl	8006000 <lsm303agr_xl_full_scale_set>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8005318:	f04f 33ff 	mov.w	r3, #4294967295
 800531c:	e000      	b.n	8005320 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8005332:	2301      	movs	r3, #1
 8005334:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	331c      	adds	r3, #28
 800533e:	f107 020f 	add.w	r2, r7, #15
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f000 fda5 	bl	8005e94 <lsm303agr_xl_operating_mode_get>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8005350:	f04f 33ff 	mov.w	r3, #4294967295
 8005354:	e04a      	b.n	80053ec <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	2b02      	cmp	r3, #2
 800535a:	d00c      	beq.n	8005376 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 800535c:	2b02      	cmp	r3, #2
 800535e:	dc0e      	bgt.n	800537e <LSM303AGR_ACC_GetAxesRaw+0x56>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <LSM303AGR_ACC_GetAxesRaw+0x42>
 8005364:	2b01      	cmp	r3, #1
 8005366:	d003      	beq.n	8005370 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8005368:	e009      	b.n	800537e <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 800536a:	2310      	movs	r3, #16
 800536c:	83fb      	strh	r3, [r7, #30]
      break;
 800536e:	e00a      	b.n	8005386 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8005370:	2340      	movs	r3, #64	; 0x40
 8005372:	83fb      	strh	r3, [r7, #30]
      break;
 8005374:	e007      	b.n	8005386 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8005376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800537a:	83fb      	strh	r3, [r7, #30]
      break;
 800537c:	e003      	b.n	8005386 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 800537e:	f04f 33ff 	mov.w	r3, #4294967295
 8005382:	61bb      	str	r3, [r7, #24]
      break;
 8005384:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d101      	bne.n	8005392 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	e02c      	b.n	80053ec <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	331c      	adds	r3, #28
 8005396:	f107 0210 	add.w	r2, r7, #16
 800539a:	4611      	mov	r1, r2
 800539c:	4618      	mov	r0, r3
 800539e:	f000 feb3 	bl	8006108 <lsm303agr_acceleration_raw_get>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 80053a8:	f04f 33ff 	mov.w	r3, #4294967295
 80053ac:	e01e      	b.n	80053ec <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80053ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80053b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80053bc:	b21a      	sxth	r2, r3
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80053c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80053c6:	461a      	mov	r2, r3
 80053c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80053cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80053d0:	b21a      	sxth	r2, r3
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80053d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80053da:	461a      	mov	r2, r3
 80053dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80053e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80053e4:	b21a      	sxth	r2, r3
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	809a      	strh	r2, [r3, #4]

  return ret;
 80053ea:	69bb      	ldr	r3, [r7, #24]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8005404:	f107 0310 	add.w	r3, r7, #16
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff ff8c 	bl	8005328 <LSM303AGR_ACC_GetAxesRaw>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8005416:	f04f 33ff 	mov.w	r3, #4294967295
 800541a:	e03c      	b.n	8005496 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 800541c:	f107 030c 	add.w	r3, r7, #12
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff fde9 	bl	8004ffa <LSM303AGR_ACC_GetSensitivity>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 800542e:	f04f 33ff 	mov.w	r3, #4294967295
 8005432:	e030      	b.n	8005496 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8005434:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005438:	ee07 3a90 	vmov	s15, r3
 800543c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005440:	edd7 7a03 	vldr	s15, [r7, #12]
 8005444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800544c:	ee17 2a90 	vmov	r2, s15
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8005454:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005458:	ee07 3a90 	vmov	s15, r3
 800545c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005460:	edd7 7a03 	vldr	s15, [r7, #12]
 8005464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800546c:	ee17 2a90 	vmov	r2, s15
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8005474:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005478:	ee07 3a90 	vmov	s15, r3
 800547c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005480:	edd7 7a03 	vldr	s15, [r7, #12]
 8005484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800548c:	ee17 2a90 	vmov	r2, s15
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b082      	sub	sp, #8
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	460b      	mov	r3, r1
 80054a8:	70fb      	strb	r3, [r7, #3]
 80054aa:	4613      	mov	r3, r2
 80054ac:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f103 001c 	add.w	r0, r3, #28
 80054b4:	1cba      	adds	r2, r7, #2
 80054b6:	78f9      	ldrb	r1, [r7, #3]
 80054b8:	2301      	movs	r3, #1
 80054ba:	f000 fcd3 	bl	8005e64 <lsm303agr_write_reg>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 80054c4:	f04f 33ff 	mov.w	r3, #4294967295
 80054c8:	e000      	b.n	80054cc <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d103      	bne.n	80054f0 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80054e8:	f04f 33ff 	mov.w	r3, #4294967295
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	e04b      	b.n	8005588 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	7b1a      	ldrb	r2, [r3, #12]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	695a      	ldr	r2, [r3, #20]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	699a      	ldr	r2, [r3, #24]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a1a      	ldr	r2, [pc, #104]	; (8005594 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 800552c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a19      	ldr	r2, [pc, #100]	; (8005598 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8005532:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d103      	bne.n	800554a <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8005542:	f04f 33ff 	mov.w	r3, #4294967295
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	e01e      	b.n	8005588 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4798      	blx	r3
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8005556:	f04f 33ff 	mov.w	r3, #4294967295
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	e014      	b.n	8005588 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d010      	beq.n	8005588 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	331c      	adds	r3, #28
 8005574:	2101      	movs	r1, #1
 8005576:	4618      	mov	r0, r3
 8005578:	f000 ff75 	bl	8006466 <lsm303agr_mag_i2c_interface_set>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8005582:	f04f 33ff 	mov.w	r3, #4294967295
 8005586:	e000      	b.n	800558a <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8005588:	68fb      	ldr	r3, [r7, #12]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	08005d71 	.word	0x08005d71
 8005598:	08005dd3 	.word	0x08005dd3

0800559c <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	331c      	adds	r3, #28
 80055a8:	2101      	movs	r1, #1
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fe7c 	bl	80062a8 <lsm303agr_mag_block_data_update_set>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80055b6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ba:	e028      	b.n	800560e <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	331c      	adds	r3, #28
 80055c0:	2102      	movs	r1, #2
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fdeb 	bl	800619e <lsm303agr_mag_operating_mode_set>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80055ce:	f04f 33ff 	mov.w	r3, #4294967295
 80055d2:	e01c      	b.n	800560e <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	331c      	adds	r3, #28
 80055d8:	2103      	movs	r1, #3
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fe05 	bl	80061ea <lsm303agr_mag_data_rate_set>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 80055e6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ea:	e010      	b.n	800560e <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	331c      	adds	r3, #28
 80055f0:	2100      	movs	r1, #0
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 feeb 	bl	80063ce <lsm303agr_mag_self_test_set>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 80055fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005602:	e004      	b.n	800560e <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f874 	bl	800570c <LSM303AGR_MAG_Disable>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800562a:	f04f 33ff 	mov.w	r3, #4294967295
 800562e:	e004      	b.n	800563a <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	331c      	adds	r3, #28
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 feaa 	bl	80063ac <lsm303agr_mag_device_id_get>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 800565e:	f04f 33ff 	mov.w	r3, #4294967295
 8005662:	e000      	b.n	8005666 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2200      	movs	r2, #0
 800567e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2200      	movs	r2, #0
 8005684:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2201      	movs	r2, #1
 800568a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2200      	movs	r2, #0
 8005690:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2200      	movs	r2, #0
 8005696:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2200      	movs	r2, #0
 800569c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2232      	movs	r2, #50	; 0x32
 80056a2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	4a04      	ldr	r2, [pc, #16]	; (80056c8 <LSM303AGR_MAG_GetCapabilities+0x58>)
 80056b8:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	42c80000 	.word	0x42c80000

080056cc <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	e010      	b.n	8005704 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	331c      	adds	r3, #28
 80056e6:	2100      	movs	r1, #0
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 fd58 	bl	800619e <lsm303agr_mag_operating_mode_set>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295
 80056f8:	e004      	b.n	8005704 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	e010      	b.n	8005744 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	331c      	adds	r3, #28
 8005726:	2102      	movs	r1, #2
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fd38 	bl	800619e <lsm303agr_mag_operating_mode_set>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8005734:	f04f 33ff 	mov.w	r3, #4294967295
 8005738:	e004      	b.n	8005744 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800575c:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	331c      	adds	r3, #28
 800577e:	f107 020b 	add.w	r2, r7, #11
 8005782:	4611      	mov	r1, r2
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fd57 	bl	8006238 <lsm303agr_mag_data_rate_get>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8005790:	f04f 33ff 	mov.w	r3, #4294967295
 8005794:	e023      	b.n	80057de <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8005796:	7afb      	ldrb	r3, [r7, #11]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d81b      	bhi.n	80057d4 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 800579c:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	080057b5 	.word	0x080057b5
 80057a8:	080057bd 	.word	0x080057bd
 80057ac:	080057c5 	.word	0x080057c5
 80057b0:	080057cd 	.word	0x080057cd
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	4a0c      	ldr	r2, [pc, #48]	; (80057e8 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 80057b8:	601a      	str	r2, [r3, #0]
      break;
 80057ba:	e00f      	b.n	80057dc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	4a0b      	ldr	r2, [pc, #44]	; (80057ec <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 80057c0:	601a      	str	r2, [r3, #0]
      break;
 80057c2:	e00b      	b.n	80057dc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	4a0a      	ldr	r2, [pc, #40]	; (80057f0 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 80057c8:	601a      	str	r2, [r3, #0]
      break;
 80057ca:	e007      	b.n	80057dc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	4a09      	ldr	r2, [pc, #36]	; (80057f4 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 80057d0:	601a      	str	r2, [r3, #0]
      break;
 80057d2:	e003      	b.n	80057dc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80057d4:	f04f 33ff 	mov.w	r3, #4294967295
 80057d8:	60fb      	str	r3, [r7, #12]
      break;
 80057da:	bf00      	nop
  }

  return ret;
 80057dc:	68fb      	ldr	r3, [r7, #12]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	41200000 	.word	0x41200000
 80057ec:	41a00000 	.word	0x41a00000
 80057f0:	42480000 	.word	0x42480000
 80057f4:	42c80000 	.word	0x42c80000

080057f8 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8005804:	edd7 7a00 	vldr	s15, [r7]
 8005808:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800580c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005814:	d801      	bhi.n	800581a <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8005816:	2300      	movs	r3, #0
 8005818:	e016      	b.n	8005848 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800581a:	edd7 7a00 	vldr	s15, [r7]
 800581e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800582a:	d801      	bhi.n	8005830 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 800582c:	2301      	movs	r3, #1
 800582e:	e00b      	b.n	8005848 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8005830:	edd7 7a00 	vldr	s15, [r7]
 8005834:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005870 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8005838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800583c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005840:	d801      	bhi.n	8005846 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8005842:	2302      	movs	r3, #2
 8005844:	e000      	b.n	8005848 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8005846:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8005848:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	331c      	adds	r3, #28
 800584e:	7bfa      	ldrb	r2, [r7, #15]
 8005850:	4611      	mov	r1, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fcc9 	bl	80061ea <lsm303agr_mag_data_rate_set>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 800585e:	f04f 33ff 	mov.w	r3, #4294967295
 8005862:	e000      	b.n	8005866 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	42480000 	.word	0x42480000

08005874 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2232      	movs	r2, #50	; 0x32
 8005882:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	331c      	adds	r3, #28
 80058b8:	f107 0208 	add.w	r2, r7, #8
 80058bc:	4611      	mov	r1, r2
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fd18 	bl	80062f4 <lsm303agr_magnetic_raw_get>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 80058ca:	f04f 33ff 	mov.w	r3, #4294967295
 80058ce:	e00c      	b.n	80058ea <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80058d0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80058d8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80058e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b086      	sub	sp, #24
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	331c      	adds	r3, #28
 8005900:	f107 0210 	add.w	r2, r7, #16
 8005904:	4611      	mov	r1, r2
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fcf4 	bl	80062f4 <lsm303agr_magnetic_raw_get>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8005912:	f04f 33ff 	mov.w	r3, #4294967295
 8005916:	e036      	b.n	8005986 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8005918:	f107 030c 	add.w	r3, r7, #12
 800591c:	4619      	mov	r1, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7ff ff14 	bl	800574c <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005924:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005928:	ee07 3a90 	vmov	s15, r3
 800592c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005930:	edd7 7a03 	vldr	s15, [r7, #12]
 8005934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800593c:	ee17 2a90 	vmov	r2, s15
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005944:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005948:	ee07 3a90 	vmov	s15, r3
 800594c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005950:	edd7 7a03 	vldr	s15, [r7, #12]
 8005954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800595c:	ee17 2a90 	vmov	r2, s15
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005964:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005968:	ee07 3a90 	vmov	s15, r3
 800596c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005970:	edd7 7a03 	vldr	s15, [r7, #12]
 8005974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800597c:	ee17 2a90 	vmov	r2, s15
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	331c      	adds	r3, #28
 80059a2:	f107 020b 	add.w	r2, r7, #11
 80059a6:	4611      	mov	r1, r2
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fb4f 	bl	800604c <lsm303agr_xl_full_scale_get>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 80059b4:	f04f 33ff 	mov.w	r3, #4294967295
 80059b8:	e023      	b.n	8005a02 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80059ba:	7afb      	ldrb	r3, [r7, #11]
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d81b      	bhi.n	80059f8 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 80059c0:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 80059c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c6:	bf00      	nop
 80059c8:	080059d9 	.word	0x080059d9
 80059cc:	080059e1 	.word	0x080059e1
 80059d0:	080059e9 	.word	0x080059e9
 80059d4:	080059f1 	.word	0x080059f1
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	4a0c      	ldr	r2, [pc, #48]	; (8005a0c <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 80059dc:	601a      	str	r2, [r3, #0]
      break;
 80059de:	e00f      	b.n	8005a00 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	4a0b      	ldr	r2, [pc, #44]	; (8005a10 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 80059e4:	601a      	str	r2, [r3, #0]
      break;
 80059e6:	e00b      	b.n	8005a00 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	4a0a      	ldr	r2, [pc, #40]	; (8005a14 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 80059ec:	601a      	str	r2, [r3, #0]
      break;
 80059ee:	e007      	b.n	8005a00 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	4a09      	ldr	r2, [pc, #36]	; (8005a18 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 80059f4:	601a      	str	r2, [r3, #0]
      break;
 80059f6:	e003      	b.n	8005a00 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80059f8:	f04f 33ff 	mov.w	r3, #4294967295
 80059fc:	60fb      	str	r3, [r7, #12]
      break;
 80059fe:	bf00      	nop
  }

  return ret;
 8005a00:	68fb      	ldr	r3, [r7, #12]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	3f7ae148 	.word	0x3f7ae148
 8005a10:	3ff9999a 	.word	0x3ff9999a
 8005a14:	4079999a 	.word	0x4079999a
 8005a18:	413b851f 	.word	0x413b851f

08005a1c <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	331c      	adds	r3, #28
 8005a2e:	f107 020b 	add.w	r2, r7, #11
 8005a32:	4611      	mov	r1, r2
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fb09 	bl	800604c <lsm303agr_xl_full_scale_get>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8005a40:	f04f 33ff 	mov.w	r3, #4294967295
 8005a44:	e023      	b.n	8005a8e <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005a46:	7afb      	ldrb	r3, [r7, #11]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d81b      	bhi.n	8005a84 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8005a4c:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005a65 	.word	0x08005a65
 8005a58:	08005a6d 	.word	0x08005a6d
 8005a5c:	08005a75 	.word	0x08005a75
 8005a60:	08005a7d 	.word	0x08005a7d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	4a0c      	ldr	r2, [pc, #48]	; (8005a98 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8005a68:	601a      	str	r2, [r3, #0]
      break;
 8005a6a:	e00f      	b.n	8005a8c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	4a0b      	ldr	r2, [pc, #44]	; (8005a9c <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8005a70:	601a      	str	r2, [r3, #0]
      break;
 8005a72:	e00b      	b.n	8005a8c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	4a0a      	ldr	r2, [pc, #40]	; (8005aa0 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8005a78:	601a      	str	r2, [r3, #0]
      break;
 8005a7a:	e007      	b.n	8005a8c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8005a80:	601a      	str	r2, [r3, #0]
      break;
 8005a82:	e003      	b.n	8005a8c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005a84:	f04f 33ff 	mov.w	r3, #4294967295
 8005a88:	60fb      	str	r3, [r7, #12]
      break;
 8005a8a:	bf00      	nop
  }

  return ret;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	4079999a 	.word	0x4079999a
 8005a9c:	40fa3d71 	.word	0x40fa3d71
 8005aa0:	417a147b 	.word	0x417a147b
 8005aa4:	423b999a 	.word	0x423b999a

08005aa8 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	331c      	adds	r3, #28
 8005aba:	f107 020b 	add.w	r2, r7, #11
 8005abe:	4611      	mov	r1, r2
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 fac3 	bl	800604c <lsm303agr_xl_full_scale_get>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad0:	e023      	b.n	8005b1a <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005ad2:	7afb      	ldrb	r3, [r7, #11]
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d81b      	bhi.n	8005b10 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8005ad8:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8005ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ade:	bf00      	nop
 8005ae0:	08005af1 	.word	0x08005af1
 8005ae4:	08005af9 	.word	0x08005af9
 8005ae8:	08005b01 	.word	0x08005b01
 8005aec:	08005b09 	.word	0x08005b09
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	4a0c      	ldr	r2, [pc, #48]	; (8005b24 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8005af4:	601a      	str	r2, [r3, #0]
      break;
 8005af6:	e00f      	b.n	8005b18 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	4a0b      	ldr	r2, [pc, #44]	; (8005b28 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8005afc:	601a      	str	r2, [r3, #0]
      break;
 8005afe:	e00b      	b.n	8005b18 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	4a0a      	ldr	r2, [pc, #40]	; (8005b2c <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8005b04:	601a      	str	r2, [r3, #0]
      break;
 8005b06:	e007      	b.n	8005b18 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	4a09      	ldr	r2, [pc, #36]	; (8005b30 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8005b0c:	601a      	str	r2, [r3, #0]
      break;
 8005b0e:	e003      	b.n	8005b18 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005b10:	f04f 33ff 	mov.w	r3, #4294967295
 8005b14:	60fb      	str	r3, [r7, #12]
      break;
 8005b16:	bf00      	nop
  }

  return ret;
 8005b18:	68fb      	ldr	r3, [r7, #12]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	417a147b 	.word	0x417a147b
 8005b28:	41fa147b 	.word	0x41fa147b
 8005b2c:	427a147b 	.word	0x427a147b
 8005b30:	433b947b 	.word	0x433b947b

08005b34 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8005b40:	edd7 7a00 	vldr	s15, [r7]
 8005b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b50:	d801      	bhi.n	8005b56 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e037      	b.n	8005bc6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8005b56:	edd7 7a00 	vldr	s15, [r7]
 8005b5a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b66:	d801      	bhi.n	8005b6c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e02c      	b.n	8005bc6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8005b6c:	edd7 7a00 	vldr	s15, [r7]
 8005b70:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005b74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b7c:	d801      	bhi.n	8005b82 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e021      	b.n	8005bc6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8005b82:	edd7 7a00 	vldr	s15, [r7]
 8005b86:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005bec <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8005b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b92:	d801      	bhi.n	8005b98 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005b94:	2304      	movs	r3, #4
 8005b96:	e016      	b.n	8005bc6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8005b98:	edd7 7a00 	vldr	s15, [r7]
 8005b9c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005bf0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba8:	d801      	bhi.n	8005bae <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8005baa:	2305      	movs	r3, #5
 8005bac:	e00b      	b.n	8005bc6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8005bae:	edd7 7a00 	vldr	s15, [r7]
 8005bb2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005bf4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8005bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbe:	d801      	bhi.n	8005bc4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005bc0:	2306      	movs	r3, #6
 8005bc2:	e000      	b.n	8005bc6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8005bc4:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8005bc6:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	331c      	adds	r3, #28
 8005bcc:	7bfa      	ldrb	r2, [r7, #15]
 8005bce:	4611      	mov	r1, r2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 f993 	bl	8005efc <lsm303agr_xl_data_rate_set>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8005bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8005be0:	e000      	b.n	8005be4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	42480000 	.word	0x42480000
 8005bf0:	42c80000 	.word	0x42c80000
 8005bf4:	43480000 	.word	0x43480000

08005bf8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8005c04:	edd7 7a00 	vldr	s15, [r7]
 8005c08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c14:	d801      	bhi.n	8005c1a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e037      	b.n	8005c8a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8005c1a:	edd7 7a00 	vldr	s15, [r7]
 8005c1e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005c22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c2a:	d801      	bhi.n	8005c30 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e02c      	b.n	8005c8a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8005c30:	edd7 7a00 	vldr	s15, [r7]
 8005c34:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c40:	d801      	bhi.n	8005c46 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005c42:	2303      	movs	r3, #3
 8005c44:	e021      	b.n	8005c8a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8005c46:	edd7 7a00 	vldr	s15, [r7]
 8005c4a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005ca0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8005c4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c56:	d801      	bhi.n	8005c5c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	e016      	b.n	8005c8a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8005c5c:	edd7 7a00 	vldr	s15, [r7]
 8005c60:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005ca4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8005c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c6c:	d801      	bhi.n	8005c72 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8005c6e:	2305      	movs	r3, #5
 8005c70:	e00b      	b.n	8005c8a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8005c72:	edd7 7a00 	vldr	s15, [r7]
 8005c76:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005ca8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8005c7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c82:	d801      	bhi.n	8005c88 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005c84:	2306      	movs	r3, #6
 8005c86:	e000      	b.n	8005c8a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8005c88:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	42480000 	.word	0x42480000
 8005ca4:	42c80000 	.word	0x42c80000
 8005ca8:	43480000 	.word	0x43480000

08005cac <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005cac:	b590      	push	{r4, r7, lr}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	460b      	mov	r3, r1
 8005cba:	72fb      	strb	r3, [r7, #11]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10e      	bne.n	8005cea <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	695c      	ldr	r4, [r3, #20]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	7b1b      	ldrb	r3, [r3, #12]
 8005cd4:	b298      	uxth	r0, r3
 8005cd6:	7afb      	ldrb	r3, [r7, #11]
 8005cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	b299      	uxth	r1, r3
 8005ce0:	893b      	ldrh	r3, [r7, #8]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	47a0      	blx	r4
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	e00d      	b.n	8005d06 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	695c      	ldr	r4, [r3, #20]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	7b1b      	ldrb	r3, [r3, #12]
 8005cf2:	b298      	uxth	r0, r3
 8005cf4:	7afb      	ldrb	r3, [r7, #11]
 8005cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	b299      	uxth	r1, r3
 8005cfe:	893b      	ldrh	r3, [r7, #8]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	47a0      	blx	r4
 8005d04:	4603      	mov	r3, r0
  }
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd90      	pop	{r4, r7, pc}

08005d0e <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005d0e:	b590      	push	{r4, r7, lr}
 8005d10:	b087      	sub	sp, #28
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	72fb      	strb	r3, [r7, #11]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10e      	bne.n	8005d4c <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	691c      	ldr	r4, [r3, #16]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	7b1b      	ldrb	r3, [r3, #12]
 8005d36:	b298      	uxth	r0, r3
 8005d38:	7afb      	ldrb	r3, [r7, #11]
 8005d3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	b299      	uxth	r1, r3
 8005d42:	893b      	ldrh	r3, [r7, #8]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	47a0      	blx	r4
 8005d48:	4603      	mov	r3, r0
 8005d4a:	e00d      	b.n	8005d68 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	691c      	ldr	r4, [r3, #16]
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	7b1b      	ldrb	r3, [r3, #12]
 8005d54:	b298      	uxth	r0, r3
 8005d56:	7afb      	ldrb	r3, [r7, #11]
 8005d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	b299      	uxth	r1, r3
 8005d60:	893b      	ldrh	r3, [r7, #8]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	47a0      	blx	r4
 8005d66:	4603      	mov	r3, r0
  }
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd90      	pop	{r4, r7, pc}

08005d70 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005d70:	b590      	push	{r4, r7, lr}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	607a      	str	r2, [r7, #4]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	72fb      	strb	r3, [r7, #11]
 8005d80:	4613      	mov	r3, r2
 8005d82:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10e      	bne.n	8005dae <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	695c      	ldr	r4, [r3, #20]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	7b1b      	ldrb	r3, [r3, #12]
 8005d98:	b298      	uxth	r0, r3
 8005d9a:	7afb      	ldrb	r3, [r7, #11]
 8005d9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	b299      	uxth	r1, r3
 8005da4:	893b      	ldrh	r3, [r7, #8]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	47a0      	blx	r4
 8005daa:	4603      	mov	r3, r0
 8005dac:	e00d      	b.n	8005dca <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	695c      	ldr	r4, [r3, #20]
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	7b1b      	ldrb	r3, [r3, #12]
 8005db6:	b298      	uxth	r0, r3
 8005db8:	7afb      	ldrb	r3, [r7, #11]
 8005dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	b299      	uxth	r1, r3
 8005dc2:	893b      	ldrh	r3, [r7, #8]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	47a0      	blx	r4
 8005dc8:	4603      	mov	r3, r0
  }
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd90      	pop	{r4, r7, pc}

08005dd2 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005dd2:	b590      	push	{r4, r7, lr}
 8005dd4:	b087      	sub	sp, #28
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	460b      	mov	r3, r1
 8005de0:	72fb      	strb	r3, [r7, #11]
 8005de2:	4613      	mov	r3, r2
 8005de4:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10e      	bne.n	8005e10 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	691c      	ldr	r4, [r3, #16]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	7b1b      	ldrb	r3, [r3, #12]
 8005dfa:	b298      	uxth	r0, r3
 8005dfc:	7afb      	ldrb	r3, [r7, #11]
 8005dfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	b299      	uxth	r1, r3
 8005e06:	893b      	ldrh	r3, [r7, #8]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	47a0      	blx	r4
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	e00d      	b.n	8005e2c <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	691c      	ldr	r4, [r3, #16]
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	7b1b      	ldrb	r3, [r3, #12]
 8005e18:	b298      	uxth	r0, r3
 8005e1a:	7afb      	ldrb	r3, [r7, #11]
 8005e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	b299      	uxth	r1, r3
 8005e24:	893b      	ldrh	r3, [r7, #8]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	47a0      	blx	r4
 8005e2a:	4603      	mov	r3, r0
  }
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd90      	pop	{r4, r7, pc}

08005e34 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8005e34:	b590      	push	{r4, r7, lr}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	460b      	mov	r3, r1
 8005e42:	72fb      	strb	r3, [r7, #11]
 8005e44:	4613      	mov	r3, r2
 8005e46:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	685c      	ldr	r4, [r3, #4]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6898      	ldr	r0, [r3, #8]
 8005e50:	893b      	ldrh	r3, [r7, #8]
 8005e52:	7af9      	ldrb	r1, [r7, #11]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	47a0      	blx	r4
 8005e58:	6178      	str	r0, [r7, #20]
  return ret;
 8005e5a:	697b      	ldr	r3, [r7, #20]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd90      	pop	{r4, r7, pc}

08005e64 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8005e64:	b590      	push	{r4, r7, lr}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	460b      	mov	r3, r1
 8005e72:	72fb      	strb	r3, [r7, #11]
 8005e74:	4613      	mov	r3, r2
 8005e76:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681c      	ldr	r4, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6898      	ldr	r0, [r3, #8]
 8005e80:	893b      	ldrh	r3, [r7, #8]
 8005e82:	7af9      	ldrb	r1, [r7, #11]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	47a0      	blx	r4
 8005e88:	6178      	str	r0, [r7, #20]
  return ret;
 8005e8a:	697b      	ldr	r3, [r7, #20]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	371c      	adds	r7, #28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd90      	pop	{r4, r7, pc}

08005e94 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8005e9e:	f107 020c 	add.w	r2, r7, #12
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	2120      	movs	r1, #32
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff ffc4 	bl	8005e34 <lsm303agr_read_reg>
 8005eac:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d107      	bne.n	8005ec4 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005eb4:	f107 0210 	add.w	r2, r7, #16
 8005eb8:	2301      	movs	r3, #1
 8005eba:	2123      	movs	r1, #35	; 0x23
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff ffb9 	bl	8005e34 <lsm303agr_read_reg>
 8005ec2:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8005ec4:	7b3b      	ldrb	r3, [r7, #12]
 8005ec6:	f003 0308 	and.w	r3, r3, #8
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	e00c      	b.n	8005ef2 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8005ed8:	7c3b      	ldrb	r3, [r7, #16]
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	e002      	b.n	8005ef2 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005ef2:	697b      	ldr	r3, [r7, #20]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	460b      	mov	r3, r1
 8005f06:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8005f08:	f107 0208 	add.w	r2, r7, #8
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	2120      	movs	r1, #32
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff ff8f 	bl	8005e34 <lsm303agr_read_reg>
 8005f16:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10f      	bne.n	8005f3e <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8005f1e:	78fb      	ldrb	r3, [r7, #3]
 8005f20:	f003 030f 	and.w	r3, r3, #15
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	7a3b      	ldrb	r3, [r7, #8]
 8005f28:	f362 1307 	bfi	r3, r2, #4, #4
 8005f2c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8005f2e:	f107 0208 	add.w	r2, r7, #8
 8005f32:	2301      	movs	r3, #1
 8005f34:	2120      	movs	r1, #32
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7ff ff94 	bl	8005e64 <lsm303agr_write_reg>
 8005f3c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8005f52:	f107 0208 	add.w	r2, r7, #8
 8005f56:	2301      	movs	r3, #1
 8005f58:	2120      	movs	r1, #32
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7ff ff6a 	bl	8005e34 <lsm303agr_read_reg>
 8005f60:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 8005f62:	7a3b      	ldrb	r3, [r7, #8]
 8005f64:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b09      	cmp	r3, #9
 8005f6c:	d83e      	bhi.n	8005fec <lsm303agr_xl_data_rate_get+0xa4>
 8005f6e:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <lsm303agr_xl_data_rate_get+0x2c>)
 8005f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f74:	08005f9d 	.word	0x08005f9d
 8005f78:	08005fa5 	.word	0x08005fa5
 8005f7c:	08005fad 	.word	0x08005fad
 8005f80:	08005fb5 	.word	0x08005fb5
 8005f84:	08005fbd 	.word	0x08005fbd
 8005f88:	08005fc5 	.word	0x08005fc5
 8005f8c:	08005fcd 	.word	0x08005fcd
 8005f90:	08005fd5 	.word	0x08005fd5
 8005f94:	08005fdd 	.word	0x08005fdd
 8005f98:	08005fe5 	.word	0x08005fe5
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	701a      	strb	r2, [r3, #0]
      break;
 8005fa2:	e027      	b.n	8005ff4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	701a      	strb	r2, [r3, #0]
      break;
 8005faa:	e023      	b.n	8005ff4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	701a      	strb	r2, [r3, #0]
      break;
 8005fb2:	e01f      	b.n	8005ff4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	701a      	strb	r2, [r3, #0]
      break;
 8005fba:	e01b      	b.n	8005ff4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2204      	movs	r2, #4
 8005fc0:	701a      	strb	r2, [r3, #0]
      break;
 8005fc2:	e017      	b.n	8005ff4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2205      	movs	r2, #5
 8005fc8:	701a      	strb	r2, [r3, #0]
      break;
 8005fca:	e013      	b.n	8005ff4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2206      	movs	r2, #6
 8005fd0:	701a      	strb	r2, [r3, #0]
      break;
 8005fd2:	e00f      	b.n	8005ff4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2207      	movs	r2, #7
 8005fd8:	701a      	strb	r2, [r3, #0]
      break;
 8005fda:	e00b      	b.n	8005ff4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	2208      	movs	r2, #8
 8005fe0:	701a      	strb	r2, [r3, #0]
      break;
 8005fe2:	e007      	b.n	8005ff4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2209      	movs	r2, #9
 8005fe8:	701a      	strb	r2, [r3, #0]
      break;
 8005fea:	e003      	b.n	8005ff4 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]
      break;
 8005ff2:	bf00      	nop
  }

  return ret;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop

08006000 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800600c:	f107 0208 	add.w	r2, r7, #8
 8006010:	2301      	movs	r3, #1
 8006012:	2123      	movs	r1, #35	; 0x23
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff ff0d 	bl	8005e34 <lsm303agr_read_reg>
 800601a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10f      	bne.n	8006042 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	f003 0303 	and.w	r3, r3, #3
 8006028:	b2da      	uxtb	r2, r3
 800602a:	7a3b      	ldrb	r3, [r7, #8]
 800602c:	f362 1305 	bfi	r3, r2, #4, #2
 8006030:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8006032:	f107 0208 	add.w	r2, r7, #8
 8006036:	2301      	movs	r3, #1
 8006038:	2123      	movs	r1, #35	; 0x23
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff ff12 	bl	8005e64 <lsm303agr_write_reg>
 8006040:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8006042:	68fb      	ldr	r3, [r7, #12]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8006056:	f107 0208 	add.w	r2, r7, #8
 800605a:	2301      	movs	r3, #1
 800605c:	2123      	movs	r1, #35	; 0x23
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff fee8 	bl	8005e34 <lsm303agr_read_reg>
 8006064:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 8006066:	7a3b      	ldrb	r3, [r7, #8]
 8006068:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b03      	cmp	r3, #3
 8006070:	d81a      	bhi.n	80060a8 <lsm303agr_xl_full_scale_get+0x5c>
 8006072:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <lsm303agr_xl_full_scale_get+0x2c>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	08006089 	.word	0x08006089
 800607c:	08006091 	.word	0x08006091
 8006080:	08006099 	.word	0x08006099
 8006084:	080060a1 	.word	0x080060a1
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]
      break;
 800608e:	e00f      	b.n	80060b0 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2201      	movs	r2, #1
 8006094:	701a      	strb	r2, [r3, #0]
      break;
 8006096:	e00b      	b.n	80060b0 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2202      	movs	r2, #2
 800609c:	701a      	strb	r2, [r3, #0]
      break;
 800609e:	e007      	b.n	80060b0 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2203      	movs	r2, #3
 80060a4:	701a      	strb	r2, [r3, #0]
      break;
 80060a6:	e003      	b.n	80060b0 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2200      	movs	r2, #0
 80060ac:	701a      	strb	r2, [r3, #0]
      break;
 80060ae:	bf00      	nop
  }

  return ret;
 80060b0:	68fb      	ldr	r3, [r7, #12]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop

080060bc <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80060c8:	f107 0208 	add.w	r2, r7, #8
 80060cc:	2301      	movs	r3, #1
 80060ce:	2123      	movs	r1, #35	; 0x23
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff feaf 	bl	8005e34 <lsm303agr_read_reg>
 80060d6:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10f      	bne.n	80060fe <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 80060de:	78fb      	ldrb	r3, [r7, #3]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	7a3b      	ldrb	r3, [r7, #8]
 80060e8:	f362 13c7 	bfi	r3, r2, #7, #1
 80060ec:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80060ee:	f107 0208 	add.w	r2, r7, #8
 80060f2:	2301      	movs	r3, #1
 80060f4:	2123      	movs	r1, #35	; 0x23
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff feb4 	bl	8005e64 <lsm303agr_write_reg>
 80060fc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 80060fe:	68fb      	ldr	r3, [r7, #12]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8006112:	f107 020c 	add.w	r2, r7, #12
 8006116:	2306      	movs	r3, #6
 8006118:	2128      	movs	r1, #40	; 0x28
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff fe8a 	bl	8005e34 <lsm303agr_read_reg>
 8006120:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006122:	7b7b      	ldrb	r3, [r7, #13]
 8006124:	b21a      	sxth	r2, r3
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006130:	b29b      	uxth	r3, r3
 8006132:	021b      	lsls	r3, r3, #8
 8006134:	b29a      	uxth	r2, r3
 8006136:	7b3b      	ldrb	r3, [r7, #12]
 8006138:	b29b      	uxth	r3, r3
 800613a:	4413      	add	r3, r2
 800613c:	b29b      	uxth	r3, r3
 800613e:	b21a      	sxth	r2, r3
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006144:	7bfa      	ldrb	r2, [r7, #15]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	3302      	adds	r3, #2
 800614a:	b212      	sxth	r2, r2
 800614c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	3302      	adds	r3, #2
 8006152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006156:	b29b      	uxth	r3, r3
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	b29a      	uxth	r2, r3
 800615c:	7bbb      	ldrb	r3, [r7, #14]
 800615e:	b29b      	uxth	r3, r3
 8006160:	4413      	add	r3, r2
 8006162:	b29a      	uxth	r2, r3
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	3302      	adds	r3, #2
 8006168:	b212      	sxth	r2, r2
 800616a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800616c:	7c7a      	ldrb	r2, [r7, #17]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	3304      	adds	r3, #4
 8006172:	b212      	sxth	r2, r2
 8006174:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	3304      	adds	r3, #4
 800617a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800617e:	b29b      	uxth	r3, r3
 8006180:	021b      	lsls	r3, r3, #8
 8006182:	b29a      	uxth	r2, r3
 8006184:	7c3b      	ldrb	r3, [r7, #16]
 8006186:	b29b      	uxth	r3, r3
 8006188:	4413      	add	r3, r2
 800618a:	b29a      	uxth	r2, r3
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	3304      	adds	r3, #4
 8006190:	b212      	sxth	r2, r2
 8006192:	801a      	strh	r2, [r3, #0]
  return ret;
 8006194:	697b      	ldr	r3, [r7, #20]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	460b      	mov	r3, r1
 80061a8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80061aa:	f107 0208 	add.w	r2, r7, #8
 80061ae:	2301      	movs	r3, #1
 80061b0:	2160      	movs	r1, #96	; 0x60
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fe3e 	bl	8005e34 <lsm303agr_read_reg>
 80061b8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10f      	bne.n	80061e0 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	7a3b      	ldrb	r3, [r7, #8]
 80061ca:	f362 0301 	bfi	r3, r2, #0, #2
 80061ce:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80061d0:	f107 0208 	add.w	r2, r7, #8
 80061d4:	2301      	movs	r3, #1
 80061d6:	2160      	movs	r1, #96	; 0x60
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7ff fe43 	bl	8005e64 <lsm303agr_write_reg>
 80061de:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 80061e0:	68fb      	ldr	r3, [r7, #12]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	460b      	mov	r3, r1
 80061f4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80061f6:	f107 0208 	add.w	r2, r7, #8
 80061fa:	2301      	movs	r3, #1
 80061fc:	2160      	movs	r1, #96	; 0x60
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff fe18 	bl	8005e34 <lsm303agr_read_reg>
 8006204:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10f      	bne.n	800622c <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	b2da      	uxtb	r2, r3
 8006214:	7a3b      	ldrb	r3, [r7, #8]
 8006216:	f362 0383 	bfi	r3, r2, #2, #2
 800621a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800621c:	f107 0208 	add.w	r2, r7, #8
 8006220:	2301      	movs	r3, #1
 8006222:	2160      	movs	r1, #96	; 0x60
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff fe1d 	bl	8005e64 <lsm303agr_write_reg>
 800622a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 800622c:	68fb      	ldr	r3, [r7, #12]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8006242:	f107 0208 	add.w	r2, r7, #8
 8006246:	2301      	movs	r3, #1
 8006248:	2160      	movs	r1, #96	; 0x60
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff fdf2 	bl	8005e34 <lsm303agr_read_reg>
 8006250:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8006252:	7a3b      	ldrb	r3, [r7, #8]
 8006254:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b03      	cmp	r3, #3
 800625c:	d81a      	bhi.n	8006294 <lsm303agr_mag_data_rate_get+0x5c>
 800625e:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <lsm303agr_mag_data_rate_get+0x2c>)
 8006260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006264:	08006275 	.word	0x08006275
 8006268:	0800627d 	.word	0x0800627d
 800626c:	08006285 	.word	0x08006285
 8006270:	0800628d 	.word	0x0800628d
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2200      	movs	r2, #0
 8006278:	701a      	strb	r2, [r3, #0]
      break;
 800627a:	e00f      	b.n	800629c <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2201      	movs	r2, #1
 8006280:	701a      	strb	r2, [r3, #0]
      break;
 8006282:	e00b      	b.n	800629c <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2202      	movs	r2, #2
 8006288:	701a      	strb	r2, [r3, #0]
      break;
 800628a:	e007      	b.n	800629c <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2203      	movs	r2, #3
 8006290:	701a      	strb	r2, [r3, #0]
      break;
 8006292:	e003      	b.n	800629c <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2200      	movs	r2, #0
 8006298:	701a      	strb	r2, [r3, #0]
      break;
 800629a:	bf00      	nop
  }

  return ret;
 800629c:	68fb      	ldr	r3, [r7, #12]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop

080062a8 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80062b4:	f107 0208 	add.w	r2, r7, #8
 80062b8:	2301      	movs	r3, #1
 80062ba:	2162      	movs	r1, #98	; 0x62
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff fdb9 	bl	8005e34 <lsm303agr_read_reg>
 80062c2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10f      	bne.n	80062ea <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 80062ca:	78fb      	ldrb	r3, [r7, #3]
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	7a3b      	ldrb	r3, [r7, #8]
 80062d4:	f362 1304 	bfi	r3, r2, #4, #1
 80062d8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80062da:	f107 0208 	add.w	r2, r7, #8
 80062de:	2301      	movs	r3, #1
 80062e0:	2162      	movs	r1, #98	; 0x62
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff fdbe 	bl	8005e64 <lsm303agr_write_reg>
 80062e8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80062ea:	68fb      	ldr	r3, [r7, #12]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 80062fe:	f107 020c 	add.w	r2, r7, #12
 8006302:	2306      	movs	r3, #6
 8006304:	2168      	movs	r1, #104	; 0x68
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff fd94 	bl	8005e34 <lsm303agr_read_reg>
 800630c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800630e:	7b7b      	ldrb	r3, [r7, #13]
 8006310:	b21a      	sxth	r2, r3
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800631c:	b29b      	uxth	r3, r3
 800631e:	021b      	lsls	r3, r3, #8
 8006320:	b29a      	uxth	r2, r3
 8006322:	7b3b      	ldrb	r3, [r7, #12]
 8006324:	b29b      	uxth	r3, r3
 8006326:	4413      	add	r3, r2
 8006328:	b29b      	uxth	r3, r3
 800632a:	b21a      	sxth	r2, r3
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006330:	7bfa      	ldrb	r2, [r7, #15]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	3302      	adds	r3, #2
 8006336:	b212      	sxth	r2, r2
 8006338:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	3302      	adds	r3, #2
 800633e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006342:	b29b      	uxth	r3, r3
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	b29a      	uxth	r2, r3
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	b29b      	uxth	r3, r3
 800634c:	4413      	add	r3, r2
 800634e:	b29a      	uxth	r2, r3
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	3302      	adds	r3, #2
 8006354:	b212      	sxth	r2, r2
 8006356:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006358:	7c7a      	ldrb	r2, [r7, #17]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	3304      	adds	r3, #4
 800635e:	b212      	sxth	r2, r2
 8006360:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	3304      	adds	r3, #4
 8006366:	f9b3 3000 	ldrsh.w	r3, [r3]
 800636a:	b29b      	uxth	r3, r3
 800636c:	021b      	lsls	r3, r3, #8
 800636e:	b29a      	uxth	r2, r3
 8006370:	7c3b      	ldrb	r3, [r7, #16]
 8006372:	b29b      	uxth	r3, r3
 8006374:	4413      	add	r3, r2
 8006376:	b29a      	uxth	r2, r3
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	3304      	adds	r3, #4
 800637c:	b212      	sxth	r2, r2
 800637e:	801a      	strh	r2, [r3, #0]
  return ret;
 8006380:	697b      	ldr	r3, [r7, #20]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8006394:	2301      	movs	r3, #1
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	210f      	movs	r1, #15
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7ff fd4a 	bl	8005e34 <lsm303agr_read_reg>
 80063a0:	60f8      	str	r0, [r7, #12]
  return ret;
 80063a2:	68fb      	ldr	r3, [r7, #12]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 80063b6:	2301      	movs	r3, #1
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	214f      	movs	r1, #79	; 0x4f
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff fd39 	bl	8005e34 <lsm303agr_read_reg>
 80063c2:	60f8      	str	r0, [r7, #12]
  return ret;
 80063c4:	68fb      	ldr	r3, [r7, #12]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	460b      	mov	r3, r1
 80063d8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80063da:	f107 0208 	add.w	r2, r7, #8
 80063de:	2301      	movs	r3, #1
 80063e0:	2162      	movs	r1, #98	; 0x62
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff fd26 	bl	8005e34 <lsm303agr_read_reg>
 80063e8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10f      	bne.n	8006410 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	7a3b      	ldrb	r3, [r7, #8]
 80063fa:	f362 0341 	bfi	r3, r2, #1, #1
 80063fe:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006400:	f107 0208 	add.w	r2, r7, #8
 8006404:	2301      	movs	r3, #1
 8006406:	2162      	movs	r1, #98	; 0x62
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff fd2b 	bl	8005e64 <lsm303agr_write_reg>
 800640e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8006410:	68fb      	ldr	r3, [r7, #12]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b084      	sub	sp, #16
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	460b      	mov	r3, r1
 8006424:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8006426:	f107 0208 	add.w	r2, r7, #8
 800642a:	2301      	movs	r3, #1
 800642c:	212e      	movs	r1, #46	; 0x2e
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7ff fd00 	bl	8005e34 <lsm303agr_read_reg>
 8006434:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10f      	bne.n	800645c <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 800643c:	78fb      	ldrb	r3, [r7, #3]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	b2da      	uxtb	r2, r3
 8006444:	7a3b      	ldrb	r3, [r7, #8]
 8006446:	f362 1387 	bfi	r3, r2, #6, #2
 800644a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800644c:	f107 0208 	add.w	r2, r7, #8
 8006450:	2301      	movs	r3, #1
 8006452:	212e      	movs	r1, #46	; 0x2e
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff fd05 	bl	8005e64 <lsm303agr_write_reg>
 800645a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 800645c:	68fb      	ldr	r3, [r7, #12]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	460b      	mov	r3, r1
 8006470:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006472:	f107 0208 	add.w	r2, r7, #8
 8006476:	2301      	movs	r3, #1
 8006478:	2162      	movs	r1, #98	; 0x62
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7ff fcda 	bl	8005e34 <lsm303agr_read_reg>
 8006480:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10f      	bne.n	80064a8 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	b2da      	uxtb	r2, r3
 8006490:	7a3b      	ldrb	r3, [r7, #8]
 8006492:	f362 1345 	bfi	r3, r2, #5, #1
 8006496:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006498:	f107 0208 	add.w	r2, r7, #8
 800649c:	2301      	movs	r3, #1
 800649e:	2162      	movs	r1, #98	; 0x62
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7ff fcdf 	bl	8005e64 <lsm303agr_write_reg>
 80064a6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80064a8:	68fb      	ldr	r3, [r7, #12]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d103      	bne.n	80064d0 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80064c8:	f04f 33ff 	mov.w	r3, #4294967295
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	e04d      	b.n	800656c <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	7b1a      	ldrb	r2, [r3, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	695a      	ldr	r2, [r3, #20]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	699a      	ldr	r2, [r3, #24]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a1b      	ldr	r2, [pc, #108]	; (8006578 <LSM6DSL_RegisterBusIO+0xc4>)
 800650c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a1a      	ldr	r2, [pc, #104]	; (800657c <LSM6DSL_RegisterBusIO+0xc8>)
 8006512:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d103      	bne.n	800652a <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8006522:	f04f 33ff 	mov.w	r3, #4294967295
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	e020      	b.n	800656c <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4798      	blx	r3
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8006536:	f04f 33ff 	mov.w	r3, #4294967295
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e016      	b.n	800656c <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	2b02      	cmp	r3, #2
 8006544:	d112      	bne.n	800656c <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10d      	bne.n	800656c <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006550:	230c      	movs	r3, #12
 8006552:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8006554:	7afb      	ldrb	r3, [r7, #11]
 8006556:	461a      	mov	r2, r3
 8006558:	2112      	movs	r1, #18
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fd2d 	bl	8006fba <LSM6DSL_Write_Reg>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8006566:	f04f 33ff 	mov.w	r3, #4294967295
 800656a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800656c:	68fb      	ldr	r3, [r7, #12]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	08007429 	.word	0x08007429
 800657c:	0800745f 	.word	0x0800745f

08006580 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	331c      	adds	r3, #28
 800658c:	2101      	movs	r1, #1
 800658e:	4618      	mov	r0, r3
 8006590:	f001 fa59 	bl	8007a46 <lsm6dsl_auto_increment_set>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 800659a:	f04f 33ff 	mov.w	r3, #4294967295
 800659e:	e054      	b.n	800664a <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	331c      	adds	r3, #28
 80065a4:	2101      	movs	r1, #1
 80065a6:	4618      	mov	r0, r3
 80065a8:	f001 f980 	bl	80078ac <lsm6dsl_block_data_update_set>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80065b2:	f04f 33ff 	mov.w	r3, #4294967295
 80065b6:	e048      	b.n	800664a <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	331c      	adds	r3, #28
 80065bc:	2100      	movs	r1, #0
 80065be:	4618      	mov	r0, r3
 80065c0:	f001 fa67 	bl	8007a92 <lsm6dsl_fifo_mode_set>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80065ca:	f04f 33ff 	mov.w	r3, #4294967295
 80065ce:	e03c      	b.n	800664a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2204      	movs	r2, #4
 80065d4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	331c      	adds	r3, #28
 80065dc:	2100      	movs	r1, #0
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 ffe6 	bl	80075b0 <lsm6dsl_xl_data_rate_set>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 80065ea:	f04f 33ff 	mov.w	r3, #4294967295
 80065ee:	e02c      	b.n	800664a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	331c      	adds	r3, #28
 80065f4:	2100      	movs	r1, #0
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 ff7c 	bl	80074f4 <lsm6dsl_xl_full_scale_set>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8006602:	f04f 33ff 	mov.w	r3, #4294967295
 8006606:	e020      	b.n	800664a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2204      	movs	r2, #4
 800660c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	331c      	adds	r3, #28
 8006614:	2100      	movs	r1, #0
 8006616:	4618      	mov	r0, r3
 8006618:	f001 f8c0 	bl	800779c <lsm6dsl_gy_data_rate_set>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8006622:	f04f 33ff 	mov.w	r3, #4294967295
 8006626:	e010      	b.n	800664a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	331c      	adds	r3, #28
 800662c:	2106      	movs	r1, #6
 800662e:	4618      	mov	r0, r3
 8006630:	f001 f84c 	bl	80076cc <lsm6dsl_gy_full_scale_set>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 800663a:	f04f 33ff 	mov.w	r3, #4294967295
 800663e:	e004      	b.n	800664a <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b082      	sub	sp, #8
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f888 	bl	8006770 <LSM6DSL_ACC_Disable>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8006666:	f04f 33ff 	mov.w	r3, #4294967295
 800666a:	e015      	b.n	8006698 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fa9a 	bl	8006ba6 <LSM6DSL_GYRO_Disable>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8006678:	f04f 33ff 	mov.w	r3, #4294967295
 800667c:	e00c      	b.n	8006698 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	331c      	adds	r3, #28
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 f9b7 	bl	8007a24 <lsm6dsl_device_id_get>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80066bc:	f04f 33ff 	mov.w	r3, #4294967295
 80066c0:	e000      	b.n	80066c4 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2201      	movs	r2, #1
 80066da:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2201      	movs	r2, #1
 80066e0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2200      	movs	r2, #0
 80066e6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2200      	movs	r2, #0
 80066ec:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80066f4:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2210      	movs	r2, #16
 80066fa:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2200      	movs	r2, #0
 8006700:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	4a07      	ldr	r2, [pc, #28]	; (8006724 <LSM6DSL_GetCapabilities+0x58>)
 8006706:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	4a06      	ldr	r2, [pc, #24]	; (8006724 <LSM6DSL_GetCapabilities+0x58>)
 800670c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	45d02000 	.word	0x45d02000

08006728 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006736:	2b01      	cmp	r3, #1
 8006738:	d101      	bne.n	800673e <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	e014      	b.n	8006768 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f103 021c 	add.w	r2, r3, #28
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800674a:	4619      	mov	r1, r3
 800674c:	4610      	mov	r0, r2
 800674e:	f000 ff2f 	bl	80075b0 <lsm6dsl_xl_data_rate_set>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8006758:	f04f 33ff 	mov.w	r3, #4294967295
 800675c:	e004      	b.n	8006768 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	e01f      	b.n	80067c6 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f103 021c 	add.w	r2, r3, #28
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	332b      	adds	r3, #43	; 0x2b
 8006790:	4619      	mov	r1, r3
 8006792:	4610      	mov	r0, r2
 8006794:	f000 ff32 	bl	80075fc <lsm6dsl_xl_data_rate_get>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 800679e:	f04f 33ff 	mov.w	r3, #4294967295
 80067a2:	e010      	b.n	80067c6 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	331c      	adds	r3, #28
 80067a8:	2100      	movs	r1, #0
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 ff00 	bl	80075b0 <lsm6dsl_xl_data_rate_set>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80067b6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ba:	e004      	b.n	80067c6 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	331c      	adds	r3, #28
 80067e2:	f107 020b 	add.w	r2, r7, #11
 80067e6:	4611      	mov	r1, r2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fea9 	bl	8007540 <lsm6dsl_xl_full_scale_get>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80067f4:	f04f 33ff 	mov.w	r3, #4294967295
 80067f8:	e023      	b.n	8006842 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80067fa:	7afb      	ldrb	r3, [r7, #11]
 80067fc:	2b03      	cmp	r3, #3
 80067fe:	d81b      	bhi.n	8006838 <LSM6DSL_ACC_GetSensitivity+0x68>
 8006800:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8006802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006806:	bf00      	nop
 8006808:	08006819 	.word	0x08006819
 800680c:	08006831 	.word	0x08006831
 8006810:	08006821 	.word	0x08006821
 8006814:	08006829 	.word	0x08006829
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	4a0c      	ldr	r2, [pc, #48]	; (800684c <LSM6DSL_ACC_GetSensitivity+0x7c>)
 800681c:	601a      	str	r2, [r3, #0]
      break;
 800681e:	e00f      	b.n	8006840 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	4a0b      	ldr	r2, [pc, #44]	; (8006850 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8006824:	601a      	str	r2, [r3, #0]
      break;
 8006826:	e00b      	b.n	8006840 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	4a0a      	ldr	r2, [pc, #40]	; (8006854 <LSM6DSL_ACC_GetSensitivity+0x84>)
 800682c:	601a      	str	r2, [r3, #0]
      break;
 800682e:	e007      	b.n	8006840 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	4a09      	ldr	r2, [pc, #36]	; (8006858 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8006834:	601a      	str	r2, [r3, #0]
      break;
 8006836:	e003      	b.n	8006840 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8006838:	f04f 33ff 	mov.w	r3, #4294967295
 800683c:	60fb      	str	r3, [r7, #12]
      break;
 800683e:	bf00      	nop
  }

  return ret;
 8006840:	68fb      	ldr	r3, [r7, #12]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	3d79db23 	.word	0x3d79db23
 8006850:	3df9db23 	.word	0x3df9db23
 8006854:	3e79db23 	.word	0x3e79db23
 8006858:	3ef9db23 	.word	0x3ef9db23

0800685c <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	331c      	adds	r3, #28
 800686e:	f107 020b 	add.w	r2, r7, #11
 8006872:	4611      	mov	r1, r2
 8006874:	4618      	mov	r0, r3
 8006876:	f000 fec1 	bl	80075fc <lsm6dsl_xl_data_rate_get>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8006880:	f04f 33ff 	mov.w	r3, #4294967295
 8006884:	e054      	b.n	8006930 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8006886:	7afb      	ldrb	r3, [r7, #11]
 8006888:	2b0b      	cmp	r3, #11
 800688a:	d84c      	bhi.n	8006926 <LSM6DSL_ACC_GetOutputDataRate+0xca>
 800688c:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 800688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006892:	bf00      	nop
 8006894:	080068c5 	.word	0x080068c5
 8006898:	080068d7 	.word	0x080068d7
 800689c:	080068df 	.word	0x080068df
 80068a0:	080068e7 	.word	0x080068e7
 80068a4:	080068ef 	.word	0x080068ef
 80068a8:	080068f7 	.word	0x080068f7
 80068ac:	080068ff 	.word	0x080068ff
 80068b0:	08006907 	.word	0x08006907
 80068b4:	0800690f 	.word	0x0800690f
 80068b8:	08006917 	.word	0x08006917
 80068bc:	0800691f 	.word	0x0800691f
 80068c0:	080068cf 	.word	0x080068cf
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	f04f 0200 	mov.w	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]
      break;
 80068cc:	e02f      	b.n	800692e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	4a19      	ldr	r2, [pc, #100]	; (8006938 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 80068d2:	601a      	str	r2, [r3, #0]
      break;
 80068d4:	e02b      	b.n	800692e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	4a18      	ldr	r2, [pc, #96]	; (800693c <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 80068da:	601a      	str	r2, [r3, #0]
      break;
 80068dc:	e027      	b.n	800692e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	4a17      	ldr	r2, [pc, #92]	; (8006940 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 80068e2:	601a      	str	r2, [r3, #0]
      break;
 80068e4:	e023      	b.n	800692e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	4a16      	ldr	r2, [pc, #88]	; (8006944 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 80068ea:	601a      	str	r2, [r3, #0]
      break;
 80068ec:	e01f      	b.n	800692e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	4a15      	ldr	r2, [pc, #84]	; (8006948 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 80068f2:	601a      	str	r2, [r3, #0]
      break;
 80068f4:	e01b      	b.n	800692e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	4a14      	ldr	r2, [pc, #80]	; (800694c <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 80068fa:	601a      	str	r2, [r3, #0]
      break;
 80068fc:	e017      	b.n	800692e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	4a13      	ldr	r2, [pc, #76]	; (8006950 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8006902:	601a      	str	r2, [r3, #0]
      break;
 8006904:	e013      	b.n	800692e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	4a12      	ldr	r2, [pc, #72]	; (8006954 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 800690a:	601a      	str	r2, [r3, #0]
      break;
 800690c:	e00f      	b.n	800692e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	4a11      	ldr	r2, [pc, #68]	; (8006958 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8006912:	601a      	str	r2, [r3, #0]
      break;
 8006914:	e00b      	b.n	800692e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	4a10      	ldr	r2, [pc, #64]	; (800695c <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 800691a:	601a      	str	r2, [r3, #0]
      break;
 800691c:	e007      	b.n	800692e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	4a0f      	ldr	r2, [pc, #60]	; (8006960 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8006922:	601a      	str	r2, [r3, #0]
      break;
 8006924:	e003      	b.n	800692e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8006926:	f04f 33ff 	mov.w	r3, #4294967295
 800692a:	60fb      	str	r3, [r7, #12]
      break;
 800692c:	bf00      	nop
  }

  return ret;
 800692e:	68fb      	ldr	r3, [r7, #12]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	3fcccccd 	.word	0x3fcccccd
 800693c:	41480000 	.word	0x41480000
 8006940:	41d00000 	.word	0x41d00000
 8006944:	42500000 	.word	0x42500000
 8006948:	42d00000 	.word	0x42d00000
 800694c:	43500000 	.word	0x43500000
 8006950:	43d00000 	.word	0x43d00000
 8006954:	44504000 	.word	0x44504000
 8006958:	44cf8000 	.word	0x44cf8000
 800695c:	45502000 	.word	0x45502000
 8006960:	45d02000 	.word	0x45d02000

08006964 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006976:	2b01      	cmp	r3, #1
 8006978:	d106      	bne.n	8006988 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800697a:	ed97 0a00 	vldr	s0, [r7]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fb36 	bl	8006ff0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8006984:	4603      	mov	r3, r0
 8006986:	e005      	b.n	8006994 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006988:	ed97 0a00 	vldr	s0, [r7]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fbbb 	bl	8007108 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8006992:	4603      	mov	r3, r0
  }
}
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	331c      	adds	r3, #28
 80069ae:	f107 020b 	add.w	r2, r7, #11
 80069b2:	4611      	mov	r1, r2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fdc3 	bl	8007540 <lsm6dsl_xl_full_scale_get>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80069c0:	f04f 33ff 	mov.w	r3, #4294967295
 80069c4:	e023      	b.n	8006a0e <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d81b      	bhi.n	8006a04 <LSM6DSL_ACC_GetFullScale+0x68>
 80069cc:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <LSM6DSL_ACC_GetFullScale+0x38>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	080069e5 	.word	0x080069e5
 80069d8:	080069fd 	.word	0x080069fd
 80069dc:	080069ed 	.word	0x080069ed
 80069e0:	080069f5 	.word	0x080069f5
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2202      	movs	r2, #2
 80069e8:	601a      	str	r2, [r3, #0]
      break;
 80069ea:	e00f      	b.n	8006a0c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2204      	movs	r2, #4
 80069f0:	601a      	str	r2, [r3, #0]
      break;
 80069f2:	e00b      	b.n	8006a0c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2208      	movs	r2, #8
 80069f8:	601a      	str	r2, [r3, #0]
      break;
 80069fa:	e007      	b.n	8006a0c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2210      	movs	r2, #16
 8006a00:	601a      	str	r2, [r3, #0]
      break;
 8006a02:	e003      	b.n	8006a0c <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8006a04:	f04f 33ff 	mov.w	r3, #4294967295
 8006a08:	60fb      	str	r3, [r7, #12]
      break;
 8006a0a:	bf00      	nop
  }

  return ret;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop

08006a18 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	dd0b      	ble.n	8006a40 <LSM6DSL_ACC_SetFullScale+0x28>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	dd06      	ble.n	8006a3c <LSM6DSL_ACC_SetFullScale+0x24>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	dc01      	bgt.n	8006a38 <LSM6DSL_ACC_SetFullScale+0x20>
 8006a34:	2303      	movs	r3, #3
 8006a36:	e004      	b.n	8006a42 <LSM6DSL_ACC_SetFullScale+0x2a>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e002      	b.n	8006a42 <LSM6DSL_ACC_SetFullScale+0x2a>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e000      	b.n	8006a42 <LSM6DSL_ACC_SetFullScale+0x2a>
 8006a40:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8006a42:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	331c      	adds	r3, #28
 8006a48:	7bfa      	ldrb	r2, [r7, #15]
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 fd51 	bl	80074f4 <lsm6dsl_xl_full_scale_set>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8006a58:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5c:	e000      	b.n	8006a60 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	331c      	adds	r3, #28
 8006a76:	f107 0208 	add.w	r2, r7, #8
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 ff86 	bl	800798e <lsm6dsl_acceleration_raw_get>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8006a88:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8c:	e00c      	b.n	8006aa8 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006a8e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006a96:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006a9e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8006aba:	f04f 0300 	mov.w	r3, #0
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	331c      	adds	r3, #28
 8006ac4:	f107 0210 	add.w	r2, r7, #16
 8006ac8:	4611      	mov	r1, r2
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 ff5f 	bl	800798e <lsm6dsl_acceleration_raw_get>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8006ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8006ada:	e03c      	b.n	8006b56 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8006adc:	f107 030c 	add.w	r3, r7, #12
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff fe74 	bl	80067d0 <LSM6DSL_ACC_GetSensitivity>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8006aee:	f04f 33ff 	mov.w	r3, #4294967295
 8006af2:	e030      	b.n	8006b56 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8006af4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006af8:	ee07 3a90 	vmov	s15, r3
 8006afc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b00:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b0c:	ee17 2a90 	vmov	r2, s15
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8006b14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b18:	ee07 3a90 	vmov	s15, r3
 8006b1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b20:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b2c:	ee17 2a90 	vmov	r2, s15
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8006b34:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b38:	ee07 3a90 	vmov	s15, r3
 8006b3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b40:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b4c:	ee17 2a90 	vmov	r2, s15
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	e014      	b.n	8006b9e <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f103 021c 	add.w	r2, r3, #28
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f000 fe0a 	bl	800779c <lsm6dsl_gy_data_rate_set>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8006b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b92:	e004      	b.n	8006b9e <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e01f      	b.n	8006bfc <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f103 021c 	add.w	r2, r3, #28
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	332c      	adds	r3, #44	; 0x2c
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f000 fe0d 	bl	80077e8 <lsm6dsl_gy_data_rate_get>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8006bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd8:	e010      	b.n	8006bfc <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	331c      	adds	r3, #28
 8006bde:	2100      	movs	r1, #0
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fddb 	bl	800779c <lsm6dsl_gy_data_rate_set>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8006bec:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf0:	e004      	b.n	8006bfc <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	331c      	adds	r3, #28
 8006c16:	f107 020b 	add.w	r2, r7, #11
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fd7b 	bl	8007718 <lsm6dsl_gy_full_scale_get>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8006c28:	f04f 33ff 	mov.w	r3, #4294967295
 8006c2c:	e02d      	b.n	8006c8a <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006c2e:	7afb      	ldrb	r3, [r7, #11]
 8006c30:	2b06      	cmp	r3, #6
 8006c32:	d825      	bhi.n	8006c80 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8006c34:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c61 	.word	0x08006c61
 8006c40:	08006c59 	.word	0x08006c59
 8006c44:	08006c69 	.word	0x08006c69
 8006c48:	08006c81 	.word	0x08006c81
 8006c4c:	08006c71 	.word	0x08006c71
 8006c50:	08006c81 	.word	0x08006c81
 8006c54:	08006c79 	.word	0x08006c79
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	4a0e      	ldr	r2, [pc, #56]	; (8006c94 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8006c5c:	601a      	str	r2, [r3, #0]
      break;
 8006c5e:	e013      	b.n	8006c88 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	4a0d      	ldr	r2, [pc, #52]	; (8006c98 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8006c64:	601a      	str	r2, [r3, #0]
      break;
 8006c66:	e00f      	b.n	8006c88 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	4a0c      	ldr	r2, [pc, #48]	; (8006c9c <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8006c6c:	601a      	str	r2, [r3, #0]
      break;
 8006c6e:	e00b      	b.n	8006c88 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	4a0b      	ldr	r2, [pc, #44]	; (8006ca0 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8006c74:	601a      	str	r2, [r3, #0]
      break;
 8006c76:	e007      	b.n	8006c88 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	4a0a      	ldr	r2, [pc, #40]	; (8006ca4 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8006c7c:	601a      	str	r2, [r3, #0]
      break;
 8006c7e:	e003      	b.n	8006c88 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8006c80:	f04f 33ff 	mov.w	r3, #4294967295
 8006c84:	60fb      	str	r3, [r7, #12]
      break;
 8006c86:	bf00      	nop
  }

  return ret;
 8006c88:	68fb      	ldr	r3, [r7, #12]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	408c0000 	.word	0x408c0000
 8006c98:	410c0000 	.word	0x410c0000
 8006c9c:	418c0000 	.word	0x418c0000
 8006ca0:	420c0000 	.word	0x420c0000
 8006ca4:	428c0000 	.word	0x428c0000

08006ca8 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	331c      	adds	r3, #28
 8006cba:	f107 020b 	add.w	r2, r7, #11
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fd91 	bl	80077e8 <lsm6dsl_gy_data_rate_get>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8006ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd0:	e04e      	b.n	8006d70 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8006cd2:	7afb      	ldrb	r3, [r7, #11]
 8006cd4:	2b0a      	cmp	r3, #10
 8006cd6:	d846      	bhi.n	8006d66 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8006cd8:	a201      	add	r2, pc, #4	; (adr r2, 8006ce0 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8006cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cde:	bf00      	nop
 8006ce0:	08006d0d 	.word	0x08006d0d
 8006ce4:	08006d17 	.word	0x08006d17
 8006ce8:	08006d1f 	.word	0x08006d1f
 8006cec:	08006d27 	.word	0x08006d27
 8006cf0:	08006d2f 	.word	0x08006d2f
 8006cf4:	08006d37 	.word	0x08006d37
 8006cf8:	08006d3f 	.word	0x08006d3f
 8006cfc:	08006d47 	.word	0x08006d47
 8006d00:	08006d4f 	.word	0x08006d4f
 8006d04:	08006d57 	.word	0x08006d57
 8006d08:	08006d5f 	.word	0x08006d5f
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	f04f 0200 	mov.w	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
      break;
 8006d14:	e02b      	b.n	8006d6e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	4a17      	ldr	r2, [pc, #92]	; (8006d78 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8006d1a:	601a      	str	r2, [r3, #0]
      break;
 8006d1c:	e027      	b.n	8006d6e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	4a16      	ldr	r2, [pc, #88]	; (8006d7c <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8006d22:	601a      	str	r2, [r3, #0]
      break;
 8006d24:	e023      	b.n	8006d6e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	4a15      	ldr	r2, [pc, #84]	; (8006d80 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8006d2a:	601a      	str	r2, [r3, #0]
      break;
 8006d2c:	e01f      	b.n	8006d6e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	4a14      	ldr	r2, [pc, #80]	; (8006d84 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8006d32:	601a      	str	r2, [r3, #0]
      break;
 8006d34:	e01b      	b.n	8006d6e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8006d3a:	601a      	str	r2, [r3, #0]
      break;
 8006d3c:	e017      	b.n	8006d6e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	4a12      	ldr	r2, [pc, #72]	; (8006d8c <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8006d42:	601a      	str	r2, [r3, #0]
      break;
 8006d44:	e013      	b.n	8006d6e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	4a11      	ldr	r2, [pc, #68]	; (8006d90 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8006d4a:	601a      	str	r2, [r3, #0]
      break;
 8006d4c:	e00f      	b.n	8006d6e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	4a10      	ldr	r2, [pc, #64]	; (8006d94 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8006d52:	601a      	str	r2, [r3, #0]
      break;
 8006d54:	e00b      	b.n	8006d6e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	4a0f      	ldr	r2, [pc, #60]	; (8006d98 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8006d5a:	601a      	str	r2, [r3, #0]
      break;
 8006d5c:	e007      	b.n	8006d6e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	4a0e      	ldr	r2, [pc, #56]	; (8006d9c <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8006d62:	601a      	str	r2, [r3, #0]
      break;
 8006d64:	e003      	b.n	8006d6e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8006d66:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6a:	60fb      	str	r3, [r7, #12]
      break;
 8006d6c:	bf00      	nop
  }

  return ret;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	41480000 	.word	0x41480000
 8006d7c:	41d00000 	.word	0x41d00000
 8006d80:	42500000 	.word	0x42500000
 8006d84:	42d00000 	.word	0x42d00000
 8006d88:	43500000 	.word	0x43500000
 8006d8c:	43d00000 	.word	0x43d00000
 8006d90:	44504000 	.word	0x44504000
 8006d94:	44cf8000 	.word	0x44cf8000
 8006d98:	45502000 	.word	0x45502000
 8006d9c:	45d02000 	.word	0x45d02000

08006da0 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d106      	bne.n	8006dc4 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006db6:	ed97 0a00 	vldr	s0, [r7]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fa26 	bl	800720c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	e005      	b.n	8006dd0 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006dc4:	ed97 0a00 	vldr	s0, [r7]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 faab 	bl	8007324 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8006dce:	4603      	mov	r3, r0
  }
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	331c      	adds	r3, #28
 8006dea:	f107 020b 	add.w	r2, r7, #11
 8006dee:	4611      	mov	r1, r2
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fc91 	bl	8007718 <lsm6dsl_gy_full_scale_get>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8006dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006e00:	e030      	b.n	8006e64 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8006e02:	7afb      	ldrb	r3, [r7, #11]
 8006e04:	2b06      	cmp	r3, #6
 8006e06:	d828      	bhi.n	8006e5a <LSM6DSL_GYRO_GetFullScale+0x82>
 8006e08:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <LSM6DSL_GYRO_GetFullScale+0x38>)
 8006e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0e:	bf00      	nop
 8006e10:	08006e35 	.word	0x08006e35
 8006e14:	08006e2d 	.word	0x08006e2d
 8006e18:	08006e3d 	.word	0x08006e3d
 8006e1c:	08006e5b 	.word	0x08006e5b
 8006e20:	08006e47 	.word	0x08006e47
 8006e24:	08006e5b 	.word	0x08006e5b
 8006e28:	08006e51 	.word	0x08006e51
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	227d      	movs	r2, #125	; 0x7d
 8006e30:	601a      	str	r2, [r3, #0]
      break;
 8006e32:	e016      	b.n	8006e62 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	22fa      	movs	r2, #250	; 0xfa
 8006e38:	601a      	str	r2, [r3, #0]
      break;
 8006e3a:	e012      	b.n	8006e62 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006e42:	601a      	str	r2, [r3, #0]
      break;
 8006e44:	e00d      	b.n	8006e62 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e4c:	601a      	str	r2, [r3, #0]
      break;
 8006e4e:	e008      	b.n	8006e62 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006e56:	601a      	str	r2, [r3, #0]
      break;
 8006e58:	e003      	b.n	8006e62 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8006e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e5e:	60fb      	str	r3, [r7, #12]
      break;
 8006e60:	bf00      	nop
  }

  return ret;
 8006e62:	68fb      	ldr	r3, [r7, #12]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b7d      	cmp	r3, #125	; 0x7d
 8006e7a:	dd12      	ble.n	8006ea2 <LSM6DSL_GYRO_SetFullScale+0x36>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2bfa      	cmp	r3, #250	; 0xfa
 8006e80:	dd0d      	ble.n	8006e9e <LSM6DSL_GYRO_SetFullScale+0x32>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006e88:	dd07      	ble.n	8006e9a <LSM6DSL_GYRO_SetFullScale+0x2e>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e90:	dc01      	bgt.n	8006e96 <LSM6DSL_GYRO_SetFullScale+0x2a>
 8006e92:	2304      	movs	r3, #4
 8006e94:	e006      	b.n	8006ea4 <LSM6DSL_GYRO_SetFullScale+0x38>
 8006e96:	2306      	movs	r3, #6
 8006e98:	e004      	b.n	8006ea4 <LSM6DSL_GYRO_SetFullScale+0x38>
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	e002      	b.n	8006ea4 <LSM6DSL_GYRO_SetFullScale+0x38>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e000      	b.n	8006ea4 <LSM6DSL_GYRO_SetFullScale+0x38>
 8006ea2:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8006ea4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	331c      	adds	r3, #28
 8006eaa:	7bfa      	ldrb	r2, [r7, #15]
 8006eac:	4611      	mov	r1, r2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fc0c 	bl	80076cc <lsm6dsl_gy_full_scale_set>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8006eba:	f04f 33ff 	mov.w	r3, #4294967295
 8006ebe:	e000      	b.n	8006ec2 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	331c      	adds	r3, #28
 8006ed8:	f107 0208 	add.w	r2, r7, #8
 8006edc:	4611      	mov	r1, r2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fd0a 	bl	80078f8 <lsm6dsl_angular_rate_raw_get>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8006eea:	f04f 33ff 	mov.w	r3, #4294967295
 8006eee:	e00c      	b.n	8006f0a <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006ef0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006ef8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006f00:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	331c      	adds	r3, #28
 8006f20:	f107 0210 	add.w	r2, r7, #16
 8006f24:	4611      	mov	r1, r2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 fce6 	bl	80078f8 <lsm6dsl_angular_rate_raw_get>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8006f32:	f04f 33ff 	mov.w	r3, #4294967295
 8006f36:	e03c      	b.n	8006fb2 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8006f38:	f107 030c 	add.w	r3, r7, #12
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff fe60 	bl	8006c04 <LSM6DSL_GYRO_GetSensitivity>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8006f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f4e:	e030      	b.n	8006fb2 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8006f50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f54:	ee07 3a90 	vmov	s15, r3
 8006f58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f68:	ee17 2a90 	vmov	r2, s15
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8006f70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f74:	ee07 3a90 	vmov	s15, r3
 8006f78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f88:	ee17 2a90 	vmov	r2, s15
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8006f90:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fa8:	ee17 2a90 	vmov	r2, s15
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	70fb      	strb	r3, [r7, #3]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f103 001c 	add.w	r0, r3, #28
 8006fd0:	1cba      	adds	r2, r7, #2
 8006fd2:	78f9      	ldrb	r1, [r7, #3]
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	f000 fa75 	bl	80074c4 <lsm6dsl_write_reg>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8006fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fe4:	e000      	b.n	8006fe8 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8006ffc:	edd7 7a00 	vldr	s15, [r7]
 8007000:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800700c:	d801      	bhi.n	8007012 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 800700e:	2301      	movs	r3, #1
 8007010:	e058      	b.n	80070c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8007012:	edd7 7a00 	vldr	s15, [r7]
 8007016:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800701a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800701e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007022:	d801      	bhi.n	8007028 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8007024:	2302      	movs	r3, #2
 8007026:	e04d      	b.n	80070c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8007028:	edd7 7a00 	vldr	s15, [r7]
 800702c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80070ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8007030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007038:	d801      	bhi.n	800703e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800703a:	2303      	movs	r3, #3
 800703c:	e042      	b.n	80070c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800703e:	edd7 7a00 	vldr	s15, [r7]
 8007042:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80070f0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800704a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800704e:	d801      	bhi.n	8007054 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8007050:	2304      	movs	r3, #4
 8007052:	e037      	b.n	80070c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8007054:	edd7 7a00 	vldr	s15, [r7]
 8007058:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80070f4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 800705c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007064:	d801      	bhi.n	800706a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8007066:	2305      	movs	r3, #5
 8007068:	e02c      	b.n	80070c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800706a:	edd7 7a00 	vldr	s15, [r7]
 800706e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80070f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8007072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800707a:	d801      	bhi.n	8007080 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 800707c:	2306      	movs	r3, #6
 800707e:	e021      	b.n	80070c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8007080:	edd7 7a00 	vldr	s15, [r7]
 8007084:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80070fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8007088:	eef4 7ac7 	vcmpe.f32	s15, s14
 800708c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007090:	d801      	bhi.n	8007096 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8007092:	2307      	movs	r3, #7
 8007094:	e016      	b.n	80070c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8007096:	edd7 7a00 	vldr	s15, [r7]
 800709a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007100 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800709e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a6:	d801      	bhi.n	80070ac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80070a8:	2308      	movs	r3, #8
 80070aa:	e00b      	b.n	80070c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80070ac:	edd7 7a00 	vldr	s15, [r7]
 80070b0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007104 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80070b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070bc:	d801      	bhi.n	80070c2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80070be:	2309      	movs	r3, #9
 80070c0:	e000      	b.n	80070c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80070c2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80070c4:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	331c      	adds	r3, #28
 80070ca:	7bfa      	ldrb	r2, [r7, #15]
 80070cc:	4611      	mov	r1, r2
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 fa6e 	bl	80075b0 <lsm6dsl_xl_data_rate_set>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80070da:	f04f 33ff 	mov.w	r3, #4294967295
 80070de:	e000      	b.n	80070e2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	42500000 	.word	0x42500000
 80070f0:	42d00000 	.word	0x42d00000
 80070f4:	43500000 	.word	0x43500000
 80070f8:	43d00000 	.word	0x43d00000
 80070fc:	44504000 	.word	0x44504000
 8007100:	44cf8000 	.word	0x44cf8000
 8007104:	45502000 	.word	0x45502000

08007108 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8007114:	edd7 7a00 	vldr	s15, [r7]
 8007118:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800711c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007124:	d801      	bhi.n	800712a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8007126:	2301      	movs	r3, #1
 8007128:	e058      	b.n	80071dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800712a:	edd7 7a00 	vldr	s15, [r7]
 800712e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800713a:	d801      	bhi.n	8007140 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 800713c:	2302      	movs	r3, #2
 800713e:	e04d      	b.n	80071dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007140:	edd7 7a00 	vldr	s15, [r7]
 8007144:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80071f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8007148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800714c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007150:	d801      	bhi.n	8007156 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8007152:	2303      	movs	r3, #3
 8007154:	e042      	b.n	80071dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007156:	edd7 7a00 	vldr	s15, [r7]
 800715a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80071f4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 800715e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007166:	d801      	bhi.n	800716c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007168:	2304      	movs	r3, #4
 800716a:	e037      	b.n	80071dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800716c:	edd7 7a00 	vldr	s15, [r7]
 8007170:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80071f8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8007174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800717c:	d801      	bhi.n	8007182 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800717e:	2305      	movs	r3, #5
 8007180:	e02c      	b.n	80071dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007182:	edd7 7a00 	vldr	s15, [r7]
 8007186:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80071fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800718a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800718e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007192:	d801      	bhi.n	8007198 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8007194:	2306      	movs	r3, #6
 8007196:	e021      	b.n	80071dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007198:	edd7 7a00 	vldr	s15, [r7]
 800719c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007200 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80071a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a8:	d801      	bhi.n	80071ae <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80071aa:	2307      	movs	r3, #7
 80071ac:	e016      	b.n	80071dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80071ae:	edd7 7a00 	vldr	s15, [r7]
 80071b2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007204 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80071b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071be:	d801      	bhi.n	80071c4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80071c0:	2308      	movs	r3, #8
 80071c2:	e00b      	b.n	80071dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80071c4:	edd7 7a00 	vldr	s15, [r7]
 80071c8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8007208 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80071cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d4:	d801      	bhi.n	80071da <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80071d6:	2309      	movs	r3, #9
 80071d8:	e000      	b.n	80071dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80071da:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	42500000 	.word	0x42500000
 80071f4:	42d00000 	.word	0x42d00000
 80071f8:	43500000 	.word	0x43500000
 80071fc:	43d00000 	.word	0x43d00000
 8007200:	44504000 	.word	0x44504000
 8007204:	44cf8000 	.word	0x44cf8000
 8007208:	45502000 	.word	0x45502000

0800720c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8007218:	edd7 7a00 	vldr	s15, [r7]
 800721c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007220:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007228:	d801      	bhi.n	800722e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800722a:	2301      	movs	r3, #1
 800722c:	e058      	b.n	80072e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800722e:	edd7 7a00 	vldr	s15, [r7]
 8007232:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800723a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723e:	d801      	bhi.n	8007244 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8007240:	2302      	movs	r3, #2
 8007242:	e04d      	b.n	80072e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007244:	edd7 7a00 	vldr	s15, [r7]
 8007248:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007308 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800724c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007254:	d801      	bhi.n	800725a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8007256:	2303      	movs	r3, #3
 8007258:	e042      	b.n	80072e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800725a:	edd7 7a00 	vldr	s15, [r7]
 800725e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800730c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8007262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726a:	d801      	bhi.n	8007270 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800726c:	2304      	movs	r3, #4
 800726e:	e037      	b.n	80072e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007270:	edd7 7a00 	vldr	s15, [r7]
 8007274:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007310 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8007278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800727c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007280:	d801      	bhi.n	8007286 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8007282:	2305      	movs	r3, #5
 8007284:	e02c      	b.n	80072e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007286:	edd7 7a00 	vldr	s15, [r7]
 800728a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007314 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800728e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007296:	d801      	bhi.n	800729c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8007298:	2306      	movs	r3, #6
 800729a:	e021      	b.n	80072e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800729c:	edd7 7a00 	vldr	s15, [r7]
 80072a0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007318 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80072a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ac:	d801      	bhi.n	80072b2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80072ae:	2307      	movs	r3, #7
 80072b0:	e016      	b.n	80072e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80072b2:	edd7 7a00 	vldr	s15, [r7]
 80072b6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800731c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80072ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c2:	d801      	bhi.n	80072c8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80072c4:	2308      	movs	r3, #8
 80072c6:	e00b      	b.n	80072e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80072c8:	edd7 7a00 	vldr	s15, [r7]
 80072cc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007320 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80072d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d8:	d801      	bhi.n	80072de <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80072da:	2309      	movs	r3, #9
 80072dc:	e000      	b.n	80072e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80072de:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80072e0:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	331c      	adds	r3, #28
 80072e6:	7bfa      	ldrb	r2, [r7, #15]
 80072e8:	4611      	mov	r1, r2
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 fa56 	bl	800779c <lsm6dsl_gy_data_rate_set>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80072f6:	f04f 33ff 	mov.w	r3, #4294967295
 80072fa:	e000      	b.n	80072fe <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	42500000 	.word	0x42500000
 800730c:	42d00000 	.word	0x42d00000
 8007310:	43500000 	.word	0x43500000
 8007314:	43d00000 	.word	0x43d00000
 8007318:	44504000 	.word	0x44504000
 800731c:	44cf8000 	.word	0x44cf8000
 8007320:	45502000 	.word	0x45502000

08007324 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8007330:	edd7 7a00 	vldr	s15, [r7]
 8007334:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800733c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007340:	d801      	bhi.n	8007346 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8007342:	2301      	movs	r3, #1
 8007344:	e058      	b.n	80073f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007346:	edd7 7a00 	vldr	s15, [r7]
 800734a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800734e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007356:	d801      	bhi.n	800735c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8007358:	2302      	movs	r3, #2
 800735a:	e04d      	b.n	80073f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800735c:	edd7 7a00 	vldr	s15, [r7]
 8007360:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800740c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8007364:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800736c:	d801      	bhi.n	8007372 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800736e:	2303      	movs	r3, #3
 8007370:	e042      	b.n	80073f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007372:	edd7 7a00 	vldr	s15, [r7]
 8007376:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007410 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800737a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800737e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007382:	d801      	bhi.n	8007388 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8007384:	2304      	movs	r3, #4
 8007386:	e037      	b.n	80073f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007388:	edd7 7a00 	vldr	s15, [r7]
 800738c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007414 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8007390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007398:	d801      	bhi.n	800739e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800739a:	2305      	movs	r3, #5
 800739c:	e02c      	b.n	80073f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800739e:	edd7 7a00 	vldr	s15, [r7]
 80073a2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007418 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80073a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ae:	d801      	bhi.n	80073b4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80073b0:	2306      	movs	r3, #6
 80073b2:	e021      	b.n	80073f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80073b4:	edd7 7a00 	vldr	s15, [r7]
 80073b8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800741c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80073bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c4:	d801      	bhi.n	80073ca <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80073c6:	2307      	movs	r3, #7
 80073c8:	e016      	b.n	80073f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80073ca:	edd7 7a00 	vldr	s15, [r7]
 80073ce:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007420 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80073d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073da:	d801      	bhi.n	80073e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80073dc:	2308      	movs	r3, #8
 80073de:	e00b      	b.n	80073f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80073e0:	edd7 7a00 	vldr	s15, [r7]
 80073e4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8007424 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80073e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f0:	d801      	bhi.n	80073f6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80073f2:	2309      	movs	r3, #9
 80073f4:	e000      	b.n	80073f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80073f6:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	42500000 	.word	0x42500000
 8007410:	42d00000 	.word	0x42d00000
 8007414:	43500000 	.word	0x43500000
 8007418:	43d00000 	.word	0x43d00000
 800741c:	44504000 	.word	0x44504000
 8007420:	44cf8000 	.word	0x44cf8000
 8007424:	45502000 	.word	0x45502000

08007428 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007428:	b590      	push	{r4, r7, lr}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	607a      	str	r2, [r7, #4]
 8007432:	461a      	mov	r2, r3
 8007434:	460b      	mov	r3, r1
 8007436:	72fb      	strb	r3, [r7, #11]
 8007438:	4613      	mov	r3, r2
 800743a:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	695c      	ldr	r4, [r3, #20]
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	7b1b      	ldrb	r3, [r3, #12]
 8007448:	b298      	uxth	r0, r3
 800744a:	7afb      	ldrb	r3, [r7, #11]
 800744c:	b299      	uxth	r1, r3
 800744e:	893b      	ldrh	r3, [r7, #8]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	47a0      	blx	r4
 8007454:	4603      	mov	r3, r0
}
 8007456:	4618      	mov	r0, r3
 8007458:	371c      	adds	r7, #28
 800745a:	46bd      	mov	sp, r7
 800745c:	bd90      	pop	{r4, r7, pc}

0800745e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800745e:	b590      	push	{r4, r7, lr}
 8007460:	b087      	sub	sp, #28
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	461a      	mov	r2, r3
 800746a:	460b      	mov	r3, r1
 800746c:	72fb      	strb	r3, [r7, #11]
 800746e:	4613      	mov	r3, r2
 8007470:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	691c      	ldr	r4, [r3, #16]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	7b1b      	ldrb	r3, [r3, #12]
 800747e:	b298      	uxth	r0, r3
 8007480:	7afb      	ldrb	r3, [r7, #11]
 8007482:	b299      	uxth	r1, r3
 8007484:	893b      	ldrh	r3, [r7, #8]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	47a0      	blx	r4
 800748a:	4603      	mov	r3, r0
}
 800748c:	4618      	mov	r0, r3
 800748e:	371c      	adds	r7, #28
 8007490:	46bd      	mov	sp, r7
 8007492:	bd90      	pop	{r4, r7, pc}

08007494 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8007494:	b590      	push	{r4, r7, lr}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	607a      	str	r2, [r7, #4]
 800749e:	461a      	mov	r2, r3
 80074a0:	460b      	mov	r3, r1
 80074a2:	72fb      	strb	r3, [r7, #11]
 80074a4:	4613      	mov	r3, r2
 80074a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	685c      	ldr	r4, [r3, #4]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6898      	ldr	r0, [r3, #8]
 80074b0:	893b      	ldrh	r3, [r7, #8]
 80074b2:	7af9      	ldrb	r1, [r7, #11]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	47a0      	blx	r4
 80074b8:	6178      	str	r0, [r7, #20]
  return ret;
 80074ba:	697b      	ldr	r3, [r7, #20]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd90      	pop	{r4, r7, pc}

080074c4 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80074c4:	b590      	push	{r4, r7, lr}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	607a      	str	r2, [r7, #4]
 80074ce:	461a      	mov	r2, r3
 80074d0:	460b      	mov	r3, r1
 80074d2:	72fb      	strb	r3, [r7, #11]
 80074d4:	4613      	mov	r3, r2
 80074d6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681c      	ldr	r4, [r3, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6898      	ldr	r0, [r3, #8]
 80074e0:	893b      	ldrh	r3, [r7, #8]
 80074e2:	7af9      	ldrb	r1, [r7, #11]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	47a0      	blx	r4
 80074e8:	6178      	str	r0, [r7, #20]
  return ret;
 80074ea:	697b      	ldr	r3, [r7, #20]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	371c      	adds	r7, #28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd90      	pop	{r4, r7, pc}

080074f4 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8007500:	f107 0208 	add.w	r2, r7, #8
 8007504:	2301      	movs	r3, #1
 8007506:	2110      	movs	r1, #16
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff ffc3 	bl	8007494 <lsm6dsl_read_reg>
 800750e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10f      	bne.n	8007536 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8007516:	78fb      	ldrb	r3, [r7, #3]
 8007518:	f003 0303 	and.w	r3, r3, #3
 800751c:	b2da      	uxtb	r2, r3
 800751e:	7a3b      	ldrb	r3, [r7, #8]
 8007520:	f362 0383 	bfi	r3, r2, #2, #2
 8007524:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8007526:	f107 0208 	add.w	r2, r7, #8
 800752a:	2301      	movs	r3, #1
 800752c:	2110      	movs	r1, #16
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7ff ffc8 	bl	80074c4 <lsm6dsl_write_reg>
 8007534:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8007536:	68fb      	ldr	r3, [r7, #12]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800754a:	f107 0208 	add.w	r2, r7, #8
 800754e:	2301      	movs	r3, #1
 8007550:	2110      	movs	r1, #16
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7ff ff9e 	bl	8007494 <lsm6dsl_read_reg>
 8007558:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 800755a:	7a3b      	ldrb	r3, [r7, #8]
 800755c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b03      	cmp	r3, #3
 8007564:	d81a      	bhi.n	800759c <lsm6dsl_xl_full_scale_get+0x5c>
 8007566:	a201      	add	r2, pc, #4	; (adr r2, 800756c <lsm6dsl_xl_full_scale_get+0x2c>)
 8007568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756c:	0800757d 	.word	0x0800757d
 8007570:	08007585 	.word	0x08007585
 8007574:	0800758d 	.word	0x0800758d
 8007578:	08007595 	.word	0x08007595
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2200      	movs	r2, #0
 8007580:	701a      	strb	r2, [r3, #0]
      break;
 8007582:	e00f      	b.n	80075a4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	2201      	movs	r2, #1
 8007588:	701a      	strb	r2, [r3, #0]
      break;
 800758a:	e00b      	b.n	80075a4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	2202      	movs	r2, #2
 8007590:	701a      	strb	r2, [r3, #0]
      break;
 8007592:	e007      	b.n	80075a4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	2203      	movs	r2, #3
 8007598:	701a      	strb	r2, [r3, #0]
      break;
 800759a:	e003      	b.n	80075a4 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2204      	movs	r2, #4
 80075a0:	701a      	strb	r2, [r3, #0]
      break;
 80075a2:	bf00      	nop
  }

  return ret;
 80075a4:	68fb      	ldr	r3, [r7, #12]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop

080075b0 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80075bc:	f107 0208 	add.w	r2, r7, #8
 80075c0:	2301      	movs	r3, #1
 80075c2:	2110      	movs	r1, #16
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff ff65 	bl	8007494 <lsm6dsl_read_reg>
 80075ca:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10f      	bne.n	80075f2 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 80075d2:	78fb      	ldrb	r3, [r7, #3]
 80075d4:	f003 030f 	and.w	r3, r3, #15
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	7a3b      	ldrb	r3, [r7, #8]
 80075dc:	f362 1307 	bfi	r3, r2, #4, #4
 80075e0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80075e2:	f107 0208 	add.w	r2, r7, #8
 80075e6:	2301      	movs	r3, #1
 80075e8:	2110      	movs	r1, #16
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7ff ff6a 	bl	80074c4 <lsm6dsl_write_reg>
 80075f0:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80075f2:	68fb      	ldr	r3, [r7, #12]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8007606:	f107 0208 	add.w	r2, r7, #8
 800760a:	2301      	movs	r3, #1
 800760c:	2110      	movs	r1, #16
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff ff40 	bl	8007494 <lsm6dsl_read_reg>
 8007614:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 8007616:	7a3b      	ldrb	r3, [r7, #8]
 8007618:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b0b      	cmp	r3, #11
 8007620:	d84a      	bhi.n	80076b8 <lsm6dsl_xl_data_rate_get+0xbc>
 8007622:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <lsm6dsl_xl_data_rate_get+0x2c>)
 8007624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007628:	08007659 	.word	0x08007659
 800762c:	08007661 	.word	0x08007661
 8007630:	08007669 	.word	0x08007669
 8007634:	08007671 	.word	0x08007671
 8007638:	08007679 	.word	0x08007679
 800763c:	08007681 	.word	0x08007681
 8007640:	08007689 	.word	0x08007689
 8007644:	08007691 	.word	0x08007691
 8007648:	08007699 	.word	0x08007699
 800764c:	080076a1 	.word	0x080076a1
 8007650:	080076a9 	.word	0x080076a9
 8007654:	080076b1 	.word	0x080076b1
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
      break;
 800765e:	e02f      	b.n	80076c0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2201      	movs	r2, #1
 8007664:	701a      	strb	r2, [r3, #0]
      break;
 8007666:	e02b      	b.n	80076c0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2202      	movs	r2, #2
 800766c:	701a      	strb	r2, [r3, #0]
      break;
 800766e:	e027      	b.n	80076c0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2203      	movs	r2, #3
 8007674:	701a      	strb	r2, [r3, #0]
      break;
 8007676:	e023      	b.n	80076c0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2204      	movs	r2, #4
 800767c:	701a      	strb	r2, [r3, #0]
      break;
 800767e:	e01f      	b.n	80076c0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2205      	movs	r2, #5
 8007684:	701a      	strb	r2, [r3, #0]
      break;
 8007686:	e01b      	b.n	80076c0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2206      	movs	r2, #6
 800768c:	701a      	strb	r2, [r3, #0]
      break;
 800768e:	e017      	b.n	80076c0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2207      	movs	r2, #7
 8007694:	701a      	strb	r2, [r3, #0]
      break;
 8007696:	e013      	b.n	80076c0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2208      	movs	r2, #8
 800769c:	701a      	strb	r2, [r3, #0]
      break;
 800769e:	e00f      	b.n	80076c0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2209      	movs	r2, #9
 80076a4:	701a      	strb	r2, [r3, #0]
      break;
 80076a6:	e00b      	b.n	80076c0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	220a      	movs	r2, #10
 80076ac:	701a      	strb	r2, [r3, #0]
      break;
 80076ae:	e007      	b.n	80076c0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	220b      	movs	r2, #11
 80076b4:	701a      	strb	r2, [r3, #0]
      break;
 80076b6:	e003      	b.n	80076c0 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	220c      	movs	r2, #12
 80076bc:	701a      	strb	r2, [r3, #0]
      break;
 80076be:	bf00      	nop
  }

  return ret;
 80076c0:	68fb      	ldr	r3, [r7, #12]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop

080076cc <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80076d8:	f107 0208 	add.w	r2, r7, #8
 80076dc:	2301      	movs	r3, #1
 80076de:	2111      	movs	r1, #17
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7ff fed7 	bl	8007494 <lsm6dsl_read_reg>
 80076e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10f      	bne.n	800770e <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 80076ee:	78fb      	ldrb	r3, [r7, #3]
 80076f0:	f003 0307 	and.w	r3, r3, #7
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	7a3b      	ldrb	r3, [r7, #8]
 80076f8:	f362 0343 	bfi	r3, r2, #1, #3
 80076fc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80076fe:	f107 0208 	add.w	r2, r7, #8
 8007702:	2301      	movs	r3, #1
 8007704:	2111      	movs	r1, #17
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff fedc 	bl	80074c4 <lsm6dsl_write_reg>
 800770c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800770e:	68fb      	ldr	r3, [r7, #12]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007722:	f107 0208 	add.w	r2, r7, #8
 8007726:	2301      	movs	r3, #1
 8007728:	2111      	movs	r1, #17
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7ff feb2 	bl	8007494 <lsm6dsl_read_reg>
 8007730:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 8007732:	7a3b      	ldrb	r3, [r7, #8]
 8007734:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b06      	cmp	r3, #6
 800773c:	d824      	bhi.n	8007788 <lsm6dsl_gy_full_scale_get+0x70>
 800773e:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <lsm6dsl_gy_full_scale_get+0x2c>)
 8007740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007744:	08007761 	.word	0x08007761
 8007748:	08007769 	.word	0x08007769
 800774c:	08007771 	.word	0x08007771
 8007750:	08007789 	.word	0x08007789
 8007754:	08007779 	.word	0x08007779
 8007758:	08007789 	.word	0x08007789
 800775c:	08007781 	.word	0x08007781
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2200      	movs	r2, #0
 8007764:	701a      	strb	r2, [r3, #0]
      break;
 8007766:	e013      	b.n	8007790 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2201      	movs	r2, #1
 800776c:	701a      	strb	r2, [r3, #0]
      break;
 800776e:	e00f      	b.n	8007790 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2202      	movs	r2, #2
 8007774:	701a      	strb	r2, [r3, #0]
      break;
 8007776:	e00b      	b.n	8007790 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2204      	movs	r2, #4
 800777c:	701a      	strb	r2, [r3, #0]
      break;
 800777e:	e007      	b.n	8007790 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2206      	movs	r2, #6
 8007784:	701a      	strb	r2, [r3, #0]
      break;
 8007786:	e003      	b.n	8007790 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2207      	movs	r2, #7
 800778c:	701a      	strb	r2, [r3, #0]
      break;
 800778e:	bf00      	nop
  }

  return ret;
 8007790:	68fb      	ldr	r3, [r7, #12]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop

0800779c <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80077a8:	f107 0208 	add.w	r2, r7, #8
 80077ac:	2301      	movs	r3, #1
 80077ae:	2111      	movs	r1, #17
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff fe6f 	bl	8007494 <lsm6dsl_read_reg>
 80077b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10f      	bne.n	80077de <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 80077be:	78fb      	ldrb	r3, [r7, #3]
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	7a3b      	ldrb	r3, [r7, #8]
 80077c8:	f362 1307 	bfi	r3, r2, #4, #4
 80077cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80077ce:	f107 0208 	add.w	r2, r7, #8
 80077d2:	2301      	movs	r3, #1
 80077d4:	2111      	movs	r1, #17
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7ff fe74 	bl	80074c4 <lsm6dsl_write_reg>
 80077dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80077de:	68fb      	ldr	r3, [r7, #12]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80077f2:	f107 0208 	add.w	r2, r7, #8
 80077f6:	2301      	movs	r3, #1
 80077f8:	2111      	movs	r1, #17
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7ff fe4a 	bl	8007494 <lsm6dsl_read_reg>
 8007800:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 8007802:	7a3b      	ldrb	r3, [r7, #8]
 8007804:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b0a      	cmp	r3, #10
 800780c:	d844      	bhi.n	8007898 <lsm6dsl_gy_data_rate_get+0xb0>
 800780e:	a201      	add	r2, pc, #4	; (adr r2, 8007814 <lsm6dsl_gy_data_rate_get+0x2c>)
 8007810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007814:	08007841 	.word	0x08007841
 8007818:	08007849 	.word	0x08007849
 800781c:	08007851 	.word	0x08007851
 8007820:	08007859 	.word	0x08007859
 8007824:	08007861 	.word	0x08007861
 8007828:	08007869 	.word	0x08007869
 800782c:	08007871 	.word	0x08007871
 8007830:	08007879 	.word	0x08007879
 8007834:	08007881 	.word	0x08007881
 8007838:	08007889 	.word	0x08007889
 800783c:	08007891 	.word	0x08007891
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	2200      	movs	r2, #0
 8007844:	701a      	strb	r2, [r3, #0]
      break;
 8007846:	e02b      	b.n	80078a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2201      	movs	r2, #1
 800784c:	701a      	strb	r2, [r3, #0]
      break;
 800784e:	e027      	b.n	80078a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2202      	movs	r2, #2
 8007854:	701a      	strb	r2, [r3, #0]
      break;
 8007856:	e023      	b.n	80078a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2203      	movs	r2, #3
 800785c:	701a      	strb	r2, [r3, #0]
      break;
 800785e:	e01f      	b.n	80078a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2204      	movs	r2, #4
 8007864:	701a      	strb	r2, [r3, #0]
      break;
 8007866:	e01b      	b.n	80078a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2205      	movs	r2, #5
 800786c:	701a      	strb	r2, [r3, #0]
      break;
 800786e:	e017      	b.n	80078a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2206      	movs	r2, #6
 8007874:	701a      	strb	r2, [r3, #0]
      break;
 8007876:	e013      	b.n	80078a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2207      	movs	r2, #7
 800787c:	701a      	strb	r2, [r3, #0]
      break;
 800787e:	e00f      	b.n	80078a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2208      	movs	r2, #8
 8007884:	701a      	strb	r2, [r3, #0]
      break;
 8007886:	e00b      	b.n	80078a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2209      	movs	r2, #9
 800788c:	701a      	strb	r2, [r3, #0]
      break;
 800788e:	e007      	b.n	80078a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	220a      	movs	r2, #10
 8007894:	701a      	strb	r2, [r3, #0]
      break;
 8007896:	e003      	b.n	80078a0 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	220b      	movs	r2, #11
 800789c:	701a      	strb	r2, [r3, #0]
      break;
 800789e:	bf00      	nop
  }

  return ret;
 80078a0:	68fb      	ldr	r3, [r7, #12]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop

080078ac <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	460b      	mov	r3, r1
 80078b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80078b8:	f107 0208 	add.w	r2, r7, #8
 80078bc:	2301      	movs	r3, #1
 80078be:	2112      	movs	r1, #18
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff fde7 	bl	8007494 <lsm6dsl_read_reg>
 80078c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10f      	bne.n	80078ee <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 80078ce:	78fb      	ldrb	r3, [r7, #3]
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	7a3b      	ldrb	r3, [r7, #8]
 80078d8:	f362 1386 	bfi	r3, r2, #6, #1
 80078dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80078de:	f107 0208 	add.w	r2, r7, #8
 80078e2:	2301      	movs	r3, #1
 80078e4:	2112      	movs	r1, #18
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7ff fdec 	bl	80074c4 <lsm6dsl_write_reg>
 80078ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80078ee:	68fb      	ldr	r3, [r7, #12]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8007902:	f107 020c 	add.w	r2, r7, #12
 8007906:	2306      	movs	r3, #6
 8007908:	2122      	movs	r1, #34	; 0x22
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff fdc2 	bl	8007494 <lsm6dsl_read_reg>
 8007910:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007912:	7b7b      	ldrb	r3, [r7, #13]
 8007914:	b21a      	sxth	r2, r3
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007920:	b29b      	uxth	r3, r3
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	b29a      	uxth	r2, r3
 8007926:	7b3b      	ldrb	r3, [r7, #12]
 8007928:	b29b      	uxth	r3, r3
 800792a:	4413      	add	r3, r2
 800792c:	b29b      	uxth	r3, r3
 800792e:	b21a      	sxth	r2, r3
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007934:	7bfa      	ldrb	r2, [r7, #15]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	3302      	adds	r3, #2
 800793a:	b212      	sxth	r2, r2
 800793c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	3302      	adds	r3, #2
 8007942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007946:	b29b      	uxth	r3, r3
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	b29a      	uxth	r2, r3
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	b29b      	uxth	r3, r3
 8007950:	4413      	add	r3, r2
 8007952:	b29a      	uxth	r2, r3
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	3302      	adds	r3, #2
 8007958:	b212      	sxth	r2, r2
 800795a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800795c:	7c7a      	ldrb	r2, [r7, #17]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	3304      	adds	r3, #4
 8007962:	b212      	sxth	r2, r2
 8007964:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	3304      	adds	r3, #4
 800796a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800796e:	b29b      	uxth	r3, r3
 8007970:	021b      	lsls	r3, r3, #8
 8007972:	b29a      	uxth	r2, r3
 8007974:	7c3b      	ldrb	r3, [r7, #16]
 8007976:	b29b      	uxth	r3, r3
 8007978:	4413      	add	r3, r2
 800797a:	b29a      	uxth	r2, r3
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	3304      	adds	r3, #4
 8007980:	b212      	sxth	r2, r2
 8007982:	801a      	strh	r2, [r3, #0]
  return ret;
 8007984:	697b      	ldr	r3, [r7, #20]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b086      	sub	sp, #24
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8007998:	f107 020c 	add.w	r2, r7, #12
 800799c:	2306      	movs	r3, #6
 800799e:	2128      	movs	r1, #40	; 0x28
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff fd77 	bl	8007494 <lsm6dsl_read_reg>
 80079a6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80079a8:	7b7b      	ldrb	r3, [r7, #13]
 80079aa:	b21a      	sxth	r2, r3
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	021b      	lsls	r3, r3, #8
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	7b3b      	ldrb	r3, [r7, #12]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	4413      	add	r3, r2
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	b21a      	sxth	r2, r3
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80079ca:	7bfa      	ldrb	r2, [r7, #15]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	3302      	adds	r3, #2
 80079d0:	b212      	sxth	r2, r2
 80079d2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	3302      	adds	r3, #2
 80079d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079dc:	b29b      	uxth	r3, r3
 80079de:	021b      	lsls	r3, r3, #8
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	4413      	add	r3, r2
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	3302      	adds	r3, #2
 80079ee:	b212      	sxth	r2, r2
 80079f0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80079f2:	7c7a      	ldrb	r2, [r7, #17]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	3304      	adds	r3, #4
 80079f8:	b212      	sxth	r2, r2
 80079fa:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	3304      	adds	r3, #4
 8007a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	021b      	lsls	r3, r3, #8
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	7c3b      	ldrb	r3, [r7, #16]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	4413      	add	r3, r2
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	3304      	adds	r3, #4
 8007a16:	b212      	sxth	r2, r2
 8007a18:	801a      	strh	r2, [r3, #0]
  return ret;
 8007a1a:	697b      	ldr	r3, [r7, #20]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8007a2e:	2301      	movs	r3, #1
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	210f      	movs	r1, #15
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff fd2d 	bl	8007494 <lsm6dsl_read_reg>
 8007a3a:	60f8      	str	r0, [r7, #12]
  return ret;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007a52:	f107 0208 	add.w	r2, r7, #8
 8007a56:	2301      	movs	r3, #1
 8007a58:	2112      	movs	r1, #18
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff fd1a 	bl	8007494 <lsm6dsl_read_reg>
 8007a60:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10f      	bne.n	8007a88 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8007a68:	78fb      	ldrb	r3, [r7, #3]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	7a3b      	ldrb	r3, [r7, #8]
 8007a72:	f362 0382 	bfi	r3, r2, #2, #1
 8007a76:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007a78:	f107 0208 	add.w	r2, r7, #8
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	2112      	movs	r1, #18
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff fd1f 	bl	80074c4 <lsm6dsl_write_reg>
 8007a86:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007a88:	68fb      	ldr	r3, [r7, #12]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b084      	sub	sp, #16
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8007a9e:	f107 0208 	add.w	r2, r7, #8
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	210a      	movs	r1, #10
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7ff fcf4 	bl	8007494 <lsm6dsl_read_reg>
 8007aac:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10f      	bne.n	8007ad4 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8007ab4:	78fb      	ldrb	r3, [r7, #3]
 8007ab6:	f003 0307 	and.w	r3, r3, #7
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	7a3b      	ldrb	r3, [r7, #8]
 8007abe:	f362 0302 	bfi	r3, r2, #0, #3
 8007ac2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8007ac4:	f107 0208 	add.w	r2, r7, #8
 8007ac8:	2301      	movs	r3, #1
 8007aca:	210a      	movs	r1, #10
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7ff fcf9 	bl	80074c4 <lsm6dsl_write_reg>
 8007ad2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b08a      	sub	sp, #40	; 0x28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007aea:	2300      	movs	r3, #0
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8007aee:	2301      	movs	r3, #1
 8007af0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <IKS01A2_ENV_SENSOR_Init+0x24>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d032      	beq.n	8007b68 <IKS01A2_ENV_SENSOR_Init+0x88>
 8007b02:	e063      	b.n	8007bcc <IKS01A2_ENV_SENSOR_Init+0xec>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8007b04:	6838      	ldr	r0, [r7, #0]
 8007b06:	f000 f973 	bl	8007df0 <HTS221_0_Probe>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <IKS01A2_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 8007b10:	f04f 33ff 	mov.w	r3, #4294967295
 8007b14:	e098      	b.n	8007c48 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007b16:	4a4e      	ldr	r2, [pc, #312]	; (8007c50 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	494c      	ldr	r1, [pc, #304]	; (8007c54 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007b28:	f107 0108 	add.w	r1, r7, #8
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	4798      	blx	r3
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d002      	beq.n	8007b3c <IKS01A2_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007b36:	f06f 0306 	mvn.w	r3, #6
 8007b3a:	e085      	b.n	8007c48 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8007b3c:	7a3b      	ldrb	r3, [r7, #8]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d103      	bne.n	8007b4a <IKS01A2_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	f043 0301 	orr.w	r3, r3, #1
 8007b48:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007b4a:	7abb      	ldrb	r3, [r7, #10]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d103      	bne.n	8007b58 <IKS01A2_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	f043 0304 	orr.w	r3, r3, #4
 8007b56:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007b58:	7a7b      	ldrb	r3, [r7, #9]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d13a      	bne.n	8007bd4 <IKS01A2_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	f043 0302 	orr.w	r3, r3, #2
 8007b64:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007b66:	e035      	b.n	8007bd4 <IKS01A2_ENV_SENSOR_Init+0xf4>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8007b68:	6838      	ldr	r0, [r7, #0]
 8007b6a:	f000 f9fb 	bl	8007f64 <LPS22HB_0_Probe>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <IKS01A2_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 8007b74:	f04f 33ff 	mov.w	r3, #4294967295
 8007b78:	e066      	b.n	8007c48 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007b7a:	4a35      	ldr	r2, [pc, #212]	; (8007c50 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	4933      	ldr	r1, [pc, #204]	; (8007c54 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007b8c:	f107 0108 	add.w	r1, r7, #8
 8007b90:	4610      	mov	r0, r2
 8007b92:	4798      	blx	r3
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d002      	beq.n	8007ba0 <IKS01A2_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007b9a:	f06f 0306 	mvn.w	r3, #6
 8007b9e:	e053      	b.n	8007c48 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8007ba0:	7a3b      	ldrb	r3, [r7, #8]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d103      	bne.n	8007bae <IKS01A2_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	f043 0301 	orr.w	r3, r3, #1
 8007bac:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007bae:	7abb      	ldrb	r3, [r7, #10]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d103      	bne.n	8007bbc <IKS01A2_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	f043 0304 	orr.w	r3, r3, #4
 8007bba:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007bbc:	7a7b      	ldrb	r3, [r7, #9]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d10a      	bne.n	8007bd8 <IKS01A2_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	f043 0302 	orr.w	r3, r3, #2
 8007bc8:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007bca:	e005      	b.n	8007bd8 <IKS01A2_ENV_SENSOR_Init+0xf8>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007bcc:	f06f 0301 	mvn.w	r3, #1
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007bd2:	e002      	b.n	8007bda <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 8007bd4:	bf00      	nop
 8007bd6:	e000      	b.n	8007bda <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 8007bd8:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <IKS01A2_ENV_SENSOR_Init+0x104>
  {
    return ret;
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	e031      	b.n	8007c48 <IKS01A2_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8007be4:	2300      	movs	r3, #0
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	e02a      	b.n	8007c40 <IKS01A2_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	4013      	ands	r3, r2
 8007bf0:	6a3a      	ldr	r2, [r7, #32]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d11e      	bne.n	8007c34 <IKS01A2_ENV_SENSOR_Init+0x154>
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	6a3a      	ldr	r2, [r7, #32]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d118      	bne.n	8007c34 <IKS01A2_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007c02:	4a15      	ldr	r2, [pc, #84]	; (8007c58 <IKS01A2_ENV_SENSOR_Init+0x178>)
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c0a:	4814      	ldr	r0, [pc, #80]	; (8007c5c <IKS01A2_ENV_SENSOR_Init+0x17c>)
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	4413      	add	r3, r2
 8007c14:	440b      	add	r3, r1
 8007c16:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	490d      	ldr	r1, [pc, #52]	; (8007c54 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c24:	4610      	mov	r0, r2
 8007c26:	4798      	blx	r3
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <IKS01A2_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007c2e:	f06f 0304 	mvn.w	r3, #4
 8007c32:	e009      	b.n	8007c48 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	61fb      	str	r3, [r7, #28]
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d9d1      	bls.n	8007bea <IKS01A2_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3728      	adds	r7, #40	; 0x28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	200014a8 	.word	0x200014a8
 8007c54:	20001a8c 	.word	0x20001a8c
 8007c58:	20000144 	.word	0x20000144
 8007c5c:	20001490 	.word	0x20001490

08007c60 <IKS01A2_ENV_SENSOR_Enable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d903      	bls.n	8007c78 <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007c70:	f06f 0301 	mvn.w	r3, #1
 8007c74:	60fb      	str	r3, [r7, #12]
 8007c76:	e028      	b.n	8007cca <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007c78:	4a16      	ldr	r2, [pc, #88]	; (8007cd4 <IKS01A2_ENV_SENSOR_Enable+0x74>)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	4013      	ands	r3, r2
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d11c      	bne.n	8007cc4 <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007c8a:	4a13      	ldr	r2, [pc, #76]	; (8007cd8 <IKS01A2_ENV_SENSOR_Enable+0x78>)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c92:	4812      	ldr	r0, [pc, #72]	; (8007cdc <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	4613      	mov	r3, r2
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	4413      	add	r3, r2
 8007c9c:	440b      	add	r3, r1
 8007c9e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	490e      	ldr	r1, [pc, #56]	; (8007ce0 <IKS01A2_ENV_SENSOR_Enable+0x80>)
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007cac:	4610      	mov	r0, r2
 8007cae:	4798      	blx	r3
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007cb6:	f06f 0304 	mvn.w	r3, #4
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	e005      	b.n	8007cca <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	e002      	b.n	8007cca <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007cc4:	f06f 0301 	mvn.w	r3, #1
 8007cc8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007cca:	68fb      	ldr	r3, [r7, #12]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	200014b0 	.word	0x200014b0
 8007cd8:	20000144 	.word	0x20000144
 8007cdc:	20001490 	.word	0x20001490
 8007ce0:	20001a8c 	.word	0x20001a8c

08007ce4 <IKS01A2_ENV_SENSOR_Disable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d903      	bls.n	8007cfc <IKS01A2_ENV_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007cf4:	f06f 0301 	mvn.w	r3, #1
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	e028      	b.n	8007d4e <IKS01A2_ENV_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007cfc:	4a16      	ldr	r2, [pc, #88]	; (8007d58 <IKS01A2_ENV_SENSOR_Disable+0x74>)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	4013      	ands	r3, r2
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d11c      	bne.n	8007d48 <IKS01A2_ENV_SENSOR_Disable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Disable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007d0e:	4a13      	ldr	r2, [pc, #76]	; (8007d5c <IKS01A2_ENV_SENSOR_Disable+0x78>)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007d16:	4812      	ldr	r0, [pc, #72]	; (8007d60 <IKS01A2_ENV_SENSOR_Disable+0x7c>)
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	005b      	lsls	r3, r3, #1
 8007d1e:	4413      	add	r3, r2
 8007d20:	440b      	add	r3, r1
 8007d22:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	490e      	ldr	r1, [pc, #56]	; (8007d64 <IKS01A2_ENV_SENSOR_Disable+0x80>)
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d30:	4610      	mov	r0, r2
 8007d32:	4798      	blx	r3
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <IKS01A2_ENV_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007d3a:	f06f 0304 	mvn.w	r3, #4
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	e005      	b.n	8007d4e <IKS01A2_ENV_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	e002      	b.n	8007d4e <IKS01A2_ENV_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007d48:	f06f 0301 	mvn.w	r3, #1
 8007d4c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	200014b0 	.word	0x200014b0
 8007d5c:	20000144 	.word	0x20000144
 8007d60:	20001490 	.word	0x20001490
 8007d64:	20001a8c 	.word	0x20001a8c

08007d68 <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d903      	bls.n	8007d82 <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007d7a:	f06f 0301 	mvn.w	r3, #1
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	e029      	b.n	8007dd6 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007d82:	4a17      	ldr	r2, [pc, #92]	; (8007de0 <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d11d      	bne.n	8007dd0 <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007d94:	4a13      	ldr	r2, [pc, #76]	; (8007de4 <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007d9c:	4812      	ldr	r0, [pc, #72]	; (8007de8 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	4613      	mov	r3, r2
 8007da2:	005b      	lsls	r3, r3, #1
 8007da4:	4413      	add	r3, r2
 8007da6:	440b      	add	r3, r1
 8007da8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	490f      	ldr	r1, [pc, #60]	; (8007dec <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007db6:	6879      	ldr	r1, [r7, #4]
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007dc2:	f06f 0304 	mvn.w	r3, #4
 8007dc6:	617b      	str	r3, [r7, #20]
 8007dc8:	e005      	b.n	8007dd6 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	617b      	str	r3, [r7, #20]
 8007dce:	e002      	b.n	8007dd6 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007dd0:	f06f 0301 	mvn.w	r3, #1
 8007dd4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007dd6:	697b      	ldr	r3, [r7, #20]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	200014b0 	.word	0x200014b0
 8007de4:	20000144 	.word	0x20000144
 8007de8:	20001490 	.word	0x20001490
 8007dec:	20001a8c 	.word	0x20001a8c

08007df0 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b090      	sub	sp, #64	; 0x40
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8007e00:	23bf      	movs	r3, #191	; 0xbf
 8007e02:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8007e06:	4b49      	ldr	r3, [pc, #292]	; (8007f2c <HTS221_0_Probe+0x13c>)
 8007e08:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8007e0a:	4b49      	ldr	r3, [pc, #292]	; (8007f30 <HTS221_0_Probe+0x140>)
 8007e0c:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8007e0e:	4b49      	ldr	r3, [pc, #292]	; (8007f34 <HTS221_0_Probe+0x144>)
 8007e10:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8007e12:	4b49      	ldr	r3, [pc, #292]	; (8007f38 <HTS221_0_Probe+0x148>)
 8007e14:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8007e16:	4b49      	ldr	r3, [pc, #292]	; (8007f3c <HTS221_0_Probe+0x14c>)
 8007e18:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8007e1a:	f107 0320 	add.w	r3, r7, #32
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4847      	ldr	r0, [pc, #284]	; (8007f40 <HTS221_0_Probe+0x150>)
 8007e22:	f7fb fb95 	bl	8003550 <HTS221_RegisterBusIO>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d003      	beq.n	8007e34 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007e2c:	f06f 0306 	mvn.w	r3, #6
 8007e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e32:	e076      	b.n	8007f22 <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8007e34:	f107 031f 	add.w	r3, r7, #31
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4841      	ldr	r0, [pc, #260]	; (8007f40 <HTS221_0_Probe+0x150>)
 8007e3c:	f7fb fc0d 	bl	800365a <HTS221_ReadID>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007e46:	f06f 0306 	mvn.w	r3, #6
 8007e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e4c:	e069      	b.n	8007f22 <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8007e4e:	7ffb      	ldrb	r3, [r7, #31]
 8007e50:	2bbc      	cmp	r3, #188	; 0xbc
 8007e52:	d003      	beq.n	8007e5c <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007e54:	f06f 0306 	mvn.w	r3, #6
 8007e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e5a:	e062      	b.n	8007f22 <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8007e5c:	f107 030c 	add.w	r3, r7, #12
 8007e60:	4619      	mov	r1, r3
 8007e62:	4837      	ldr	r0, [pc, #220]	; (8007f40 <HTS221_0_Probe+0x150>)
 8007e64:	f7fb fc10 	bl	8003688 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007e68:	7b3b      	ldrb	r3, [r7, #12]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	7b7b      	ldrb	r3, [r7, #13]
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007e76:	4313      	orrs	r3, r2
 8007e78:	4a32      	ldr	r2, [pc, #200]	; (8007f44 <HTS221_0_Probe+0x154>)
 8007e7a:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 8007e7c:	4b32      	ldr	r3, [pc, #200]	; (8007f48 <HTS221_0_Probe+0x158>)
 8007e7e:	4a30      	ldr	r2, [pc, #192]	; (8007f40 <HTS221_0_Probe+0x150>)
 8007e80:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8007e82:	4b32      	ldr	r3, [pc, #200]	; (8007f4c <HTS221_0_Probe+0x15c>)
 8007e84:	4a32      	ldr	r2, [pc, #200]	; (8007f50 <HTS221_0_Probe+0x160>)
 8007e86:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d11d      	bne.n	8007eca <HTS221_0_Probe+0xda>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d018      	beq.n	8007eca <HTS221_0_Probe+0xda>
 8007e98:	7b3b      	ldrb	r3, [r7, #12]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d115      	bne.n	8007eca <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8007e9e:	4b2d      	ldr	r3, [pc, #180]	; (8007f54 <HTS221_0_Probe+0x164>)
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	4a2d      	ldr	r2, [pc, #180]	; (8007f58 <HTS221_0_Probe+0x168>)
 8007ea4:	492d      	ldr	r1, [pc, #180]	; (8007f5c <HTS221_0_Probe+0x16c>)
 8007ea6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8007eaa:	4b28      	ldr	r3, [pc, #160]	; (8007f4c <HTS221_0_Probe+0x15c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a25      	ldr	r2, [pc, #148]	; (8007f48 <HTS221_0_Probe+0x158>)
 8007eb2:	6812      	ldr	r2, [r2, #0]
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4798      	blx	r3
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ebe:	f06f 0304 	mvn.w	r3, #4
 8007ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ec4:	e001      	b.n	8007eca <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8007eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d11d      	bne.n	8007f0c <HTS221_0_Probe+0x11c>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f003 0304 	and.w	r3, r3, #4
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d018      	beq.n	8007f0c <HTS221_0_Probe+0x11c>
 8007eda:	7bbb      	ldrb	r3, [r7, #14]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d115      	bne.n	8007f0c <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8007ee0:	4b1c      	ldr	r3, [pc, #112]	; (8007f54 <HTS221_0_Probe+0x164>)
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	4a1c      	ldr	r2, [pc, #112]	; (8007f58 <HTS221_0_Probe+0x168>)
 8007ee6:	491e      	ldr	r1, [pc, #120]	; (8007f60 <HTS221_0_Probe+0x170>)
 8007ee8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8007eec:	4b17      	ldr	r3, [pc, #92]	; (8007f4c <HTS221_0_Probe+0x15c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a15      	ldr	r2, [pc, #84]	; (8007f48 <HTS221_0_Probe+0x158>)
 8007ef4:	6812      	ldr	r2, [r2, #0]
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	4798      	blx	r3
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d003      	beq.n	8007f08 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f00:	f06f 0304 	mvn.w	r3, #4
 8007f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f06:	e001      	b.n	8007f0c <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8007f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d107      	bne.n	8007f22 <HTS221_0_Probe+0x132>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f1c:	f06f 0304 	mvn.w	r3, #4
 8007f20:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 8007f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3740      	adds	r7, #64	; 0x40
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	080031f5 	.word	0x080031f5
 8007f30:	08003271 	.word	0x08003271
 8007f34:	08003325 	.word	0x08003325
 8007f38:	080032c1 	.word	0x080032c1
 8007f3c:	08003389 	.word	0x08003389
 8007f40:	200014b8 	.word	0x200014b8
 8007f44:	200014b0 	.word	0x200014b0
 8007f48:	20001a8c 	.word	0x20001a8c
 8007f4c:	200014a8 	.word	0x200014a8
 8007f50:	20000014 	.word	0x20000014
 8007f54:	20000144 	.word	0x20000144
 8007f58:	20001490 	.word	0x20001490
 8007f5c:	20000038 	.word	0x20000038
 8007f60:	20000024 	.word	0x20000024

08007f64 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b090      	sub	sp, #64	; 0x40
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 8007f70:	2300      	movs	r3, #0
 8007f72:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 8007f74:	23bb      	movs	r3, #187	; 0xbb
 8007f76:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8007f7a:	4b4a      	ldr	r3, [pc, #296]	; (80080a4 <LPS22HB_0_Probe+0x140>)
 8007f7c:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8007f7e:	4b4a      	ldr	r3, [pc, #296]	; (80080a8 <LPS22HB_0_Probe+0x144>)
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8007f82:	4b4a      	ldr	r3, [pc, #296]	; (80080ac <LPS22HB_0_Probe+0x148>)
 8007f84:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8007f86:	4b4a      	ldr	r3, [pc, #296]	; (80080b0 <LPS22HB_0_Probe+0x14c>)
 8007f88:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8007f8a:	4b4a      	ldr	r3, [pc, #296]	; (80080b4 <LPS22HB_0_Probe+0x150>)
 8007f8c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8007f8e:	f107 0320 	add.w	r3, r7, #32
 8007f92:	4619      	mov	r1, r3
 8007f94:	4848      	ldr	r0, [pc, #288]	; (80080b8 <LPS22HB_0_Probe+0x154>)
 8007f96:	f7fc f8f9 	bl	800418c <LPS22HB_RegisterBusIO>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007fa0:	f06f 0306 	mvn.w	r3, #6
 8007fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fa6:	e078      	b.n	800809a <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8007fa8:	f107 031f 	add.w	r3, r7, #31
 8007fac:	4619      	mov	r1, r3
 8007fae:	4842      	ldr	r0, [pc, #264]	; (80080b8 <LPS22HB_0_Probe+0x154>)
 8007fb0:	f7fc f991 	bl	80042d6 <LPS22HB_ReadID>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007fba:	f06f 0306 	mvn.w	r3, #6
 8007fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fc0:	e06b      	b.n	800809a <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 8007fc2:	7ffb      	ldrb	r3, [r7, #31]
 8007fc4:	2bb1      	cmp	r3, #177	; 0xb1
 8007fc6:	d003      	beq.n	8007fd0 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007fc8:	f06f 0306 	mvn.w	r3, #6
 8007fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fce:	e064      	b.n	800809a <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8007fd0:	f107 030c 	add.w	r3, r7, #12
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4838      	ldr	r0, [pc, #224]	; (80080b8 <LPS22HB_0_Probe+0x154>)
 8007fd8:	f7fc f994 	bl	8004304 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007fdc:	7b3b      	ldrb	r3, [r7, #12]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	7b7b      	ldrb	r3, [r7, #13]
 8007fe2:	005b      	lsls	r3, r3, #1
 8007fe4:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007fea:	4313      	orrs	r3, r2
 8007fec:	4a33      	ldr	r2, [pc, #204]	; (80080bc <LPS22HB_0_Probe+0x158>)
 8007fee:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 8007ff0:	4b33      	ldr	r3, [pc, #204]	; (80080c0 <LPS22HB_0_Probe+0x15c>)
 8007ff2:	4a31      	ldr	r2, [pc, #196]	; (80080b8 <LPS22HB_0_Probe+0x154>)
 8007ff4:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 8007ff6:	4b33      	ldr	r3, [pc, #204]	; (80080c4 <LPS22HB_0_Probe+0x160>)
 8007ff8:	4a33      	ldr	r2, [pc, #204]	; (80080c8 <LPS22HB_0_Probe+0x164>)
 8007ffa:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d11e      	bne.n	8008040 <LPS22HB_0_Probe+0xdc>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	d019      	beq.n	8008040 <LPS22HB_0_Probe+0xdc>
 800800c:	7b3b      	ldrb	r3, [r7, #12]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d116      	bne.n	8008040 <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 8008012:	4b2e      	ldr	r3, [pc, #184]	; (80080cc <LPS22HB_0_Probe+0x168>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	4a2e      	ldr	r2, [pc, #184]	; (80080d0 <LPS22HB_0_Probe+0x16c>)
 8008018:	3303      	adds	r3, #3
 800801a:	492e      	ldr	r1, [pc, #184]	; (80080d4 <LPS22HB_0_Probe+0x170>)
 800801c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8008020:	4b28      	ldr	r3, [pc, #160]	; (80080c4 <LPS22HB_0_Probe+0x160>)
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a26      	ldr	r2, [pc, #152]	; (80080c0 <LPS22HB_0_Probe+0x15c>)
 8008028:	6852      	ldr	r2, [r2, #4]
 800802a:	4610      	mov	r0, r2
 800802c:	4798      	blx	r3
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008034:	f06f 0304 	mvn.w	r3, #4
 8008038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800803a:	e001      	b.n	8008040 <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800803c:	2300      	movs	r3, #0
 800803e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8008040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008042:	2b00      	cmp	r3, #0
 8008044:	d11e      	bne.n	8008084 <LPS22HB_0_Probe+0x120>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d019      	beq.n	8008084 <LPS22HB_0_Probe+0x120>
 8008050:	7b7b      	ldrb	r3, [r7, #13]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d116      	bne.n	8008084 <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 8008056:	4b1d      	ldr	r3, [pc, #116]	; (80080cc <LPS22HB_0_Probe+0x168>)
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	4a1d      	ldr	r2, [pc, #116]	; (80080d0 <LPS22HB_0_Probe+0x16c>)
 800805c:	3303      	adds	r3, #3
 800805e:	491e      	ldr	r1, [pc, #120]	; (80080d8 <LPS22HB_0_Probe+0x174>)
 8008060:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8008064:	4b17      	ldr	r3, [pc, #92]	; (80080c4 <LPS22HB_0_Probe+0x160>)
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a15      	ldr	r2, [pc, #84]	; (80080c0 <LPS22HB_0_Probe+0x15c>)
 800806c:	6852      	ldr	r2, [r2, #4]
 800806e:	4610      	mov	r0, r2
 8008070:	4798      	blx	r3
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d003      	beq.n	8008080 <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008078:	f06f 0304 	mvn.w	r3, #4
 800807c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800807e:	e001      	b.n	8008084 <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008080:	2300      	movs	r3, #0
 8008082:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d107      	bne.n	800809a <LPS22HB_0_Probe+0x136>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f003 0304 	and.w	r3, r3, #4
 8008090:	2b00      	cmp	r3, #0
 8008092:	d002      	beq.n	800809a <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008094:	f06f 0304 	mvn.w	r3, #4
 8008098:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 800809a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800809c:	4618      	mov	r0, r3
 800809e:	3740      	adds	r7, #64	; 0x40
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	080031f5 	.word	0x080031f5
 80080a8:	08003271 	.word	0x08003271
 80080ac:	08003325 	.word	0x08003325
 80080b0:	080032c1 	.word	0x080032c1
 80080b4:	08003389 	.word	0x08003389
 80080b8:	200014e4 	.word	0x200014e4
 80080bc:	200014b0 	.word	0x200014b0
 80080c0:	20001a8c 	.word	0x20001a8c
 80080c4:	200014a8 	.word	0x200014a8
 80080c8:	2000004c 	.word	0x2000004c
 80080cc:	20000144 	.word	0x20000144
 80080d0:	20001490 	.word	0x20001490
 80080d4:	20000070 	.word	0x20000070
 80080d8:	2000005c 	.word	0x2000005c

080080dc <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b08e      	sub	sp, #56	; 0x38
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80080ea:	2301      	movs	r3, #1
 80080ec:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80080ee:	2300      	movs	r3, #0
 80080f0:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d06e      	beq.n	80081d6 <IKS01A2_MOTION_SENSOR_Init+0xfa>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	f200 809d 	bhi.w	800823a <IKS01A2_MOTION_SENSOR_Init+0x15e>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <IKS01A2_MOTION_SENSOR_Init+0x32>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d032      	beq.n	8008172 <IKS01A2_MOTION_SENSOR_Init+0x96>
 800810c:	e095      	b.n	800823a <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800810e:	6838      	ldr	r0, [r7, #0]
 8008110:	f000 fa32 	bl	8008578 <LSM6DSL_0_Probe>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800811a:	f04f 33ff 	mov.w	r3, #4294967295
 800811e:	e0cc      	b.n	80082ba <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008120:	4a68      	ldr	r2, [pc, #416]	; (80082c4 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	4967      	ldr	r1, [pc, #412]	; (80082c8 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008132:	f107 010c 	add.w	r1, r7, #12
 8008136:	4610      	mov	r0, r2
 8008138:	4798      	blx	r3
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008140:	f06f 0306 	mvn.w	r3, #6
 8008144:	e0b9      	b.n	80082ba <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008146:	7b3b      	ldrb	r3, [r7, #12]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d103      	bne.n	8008154 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	f043 0302 	orr.w	r3, r3, #2
 8008152:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008154:	7b7b      	ldrb	r3, [r7, #13]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d103      	bne.n	8008162 <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	f043 0301 	orr.w	r3, r3, #1
 8008160:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d16c      	bne.n	8008242 <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	f043 0304 	orr.w	r3, r3, #4
 800816e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008170:	e067      	b.n	8008242 <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8008172:	6838      	ldr	r0, [r7, #0]
 8008174:	f000 fabc 	bl	80086f0 <LSM303AGR_ACC_0_Probe>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d002      	beq.n	8008184 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800817e:	f04f 33ff 	mov.w	r3, #4294967295
 8008182:	e09a      	b.n	80082ba <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008184:	4a4f      	ldr	r2, [pc, #316]	; (80082c4 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	494e      	ldr	r1, [pc, #312]	; (80082c8 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008196:	f107 010c 	add.w	r1, r7, #12
 800819a:	4610      	mov	r0, r2
 800819c:	4798      	blx	r3
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80081a4:	f06f 0306 	mvn.w	r3, #6
 80081a8:	e087      	b.n	80082ba <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80081aa:	7b3b      	ldrb	r3, [r7, #12]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d103      	bne.n	80081b8 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	f043 0302 	orr.w	r3, r3, #2
 80081b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80081b8:	7b7b      	ldrb	r3, [r7, #13]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d103      	bne.n	80081c6 <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80081be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c0:	f043 0301 	orr.w	r3, r3, #1
 80081c4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d13c      	bne.n	8008246 <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80081cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ce:	f043 0304 	orr.w	r3, r3, #4
 80081d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80081d4:	e037      	b.n	8008246 <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 80081d6:	6838      	ldr	r0, [r7, #0]
 80081d8:	f000 fb2e 	bl	8008838 <LSM303AGR_MAG_0_Probe>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80081e2:	f04f 33ff 	mov.w	r3, #4294967295
 80081e6:	e068      	b.n	80082ba <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80081e8:	4a36      	ldr	r2, [pc, #216]	; (80082c4 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	4935      	ldr	r1, [pc, #212]	; (80082c8 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80081fa:	f107 010c 	add.w	r1, r7, #12
 80081fe:	4610      	mov	r0, r2
 8008200:	4798      	blx	r3
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008208:	f06f 0306 	mvn.w	r3, #6
 800820c:	e055      	b.n	80082ba <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800820e:	7b3b      	ldrb	r3, [r7, #12]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d103      	bne.n	800821c <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8008214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008216:	f043 0302 	orr.w	r3, r3, #2
 800821a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800821c:	7b7b      	ldrb	r3, [r7, #13]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d103      	bne.n	800822a <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8008222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008224:	f043 0301 	orr.w	r3, r3, #1
 8008228:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d10c      	bne.n	800824a <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	f043 0304 	orr.w	r3, r3, #4
 8008236:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008238:	e007      	b.n	800824a <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800823a:	f06f 0301 	mvn.w	r3, #1
 800823e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8008240:	e004      	b.n	800824c <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8008242:	bf00      	nop
 8008244:	e002      	b.n	800824c <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8008246:	bf00      	nop
 8008248:	e000      	b.n	800824c <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800824a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800824c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8008252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008254:	e031      	b.n	80082ba <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8008256:	2300      	movs	r3, #0
 8008258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800825a:	e02a      	b.n	80082b2 <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	4013      	ands	r3, r2
 8008262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008264:	429a      	cmp	r2, r3
 8008266:	d11e      	bne.n	80082a6 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8008268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	4013      	ands	r3, r2
 800826e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008270:	429a      	cmp	r2, r3
 8008272:	d118      	bne.n	80082a6 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8008274:	4a15      	ldr	r2, [pc, #84]	; (80082cc <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800827c:	4814      	ldr	r0, [pc, #80]	; (80082d0 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	4613      	mov	r3, r2
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	4413      	add	r3, r2
 8008286:	440b      	add	r3, r1
 8008288:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	490e      	ldr	r1, [pc, #56]	; (80082c8 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008296:	4610      	mov	r0, r2
 8008298:	4798      	blx	r3
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80082a0:	f06f 0304 	mvn.w	r3, #4
 80082a4:	e009      	b.n	80082ba <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 80082a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 80082ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ae:	3301      	adds	r3, #1
 80082b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d9d1      	bls.n	800825c <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80082b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3738      	adds	r7, #56	; 0x38
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20001534 	.word	0x20001534
 80082c8:	20001a94 	.word	0x20001a94
 80082cc:	20000158 	.word	0x20000158
 80082d0:	20001510 	.word	0x20001510

080082d4 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d903      	bls.n	80082ec <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80082e4:	f06f 0301 	mvn.w	r3, #1
 80082e8:	60fb      	str	r3, [r7, #12]
 80082ea:	e028      	b.n	800833e <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80082ec:	4a16      	ldr	r2, [pc, #88]	; (8008348 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	4013      	ands	r3, r2
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d11c      	bne.n	8008338 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80082fe:	4a13      	ldr	r2, [pc, #76]	; (800834c <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008306:	4812      	ldr	r0, [pc, #72]	; (8008350 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	4613      	mov	r3, r2
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	4413      	add	r3, r2
 8008310:	440b      	add	r3, r1
 8008312:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	490e      	ldr	r1, [pc, #56]	; (8008354 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008320:	4610      	mov	r0, r2
 8008322:	4798      	blx	r3
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800832a:	f06f 0304 	mvn.w	r3, #4
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	e005      	b.n	800833e <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008332:	2300      	movs	r3, #0
 8008334:	60fb      	str	r3, [r7, #12]
 8008336:	e002      	b.n	800833e <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008338:	f06f 0301 	mvn.w	r3, #1
 800833c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800833e:	68fb      	ldr	r3, [r7, #12]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	20001540 	.word	0x20001540
 800834c:	20000158 	.word	0x20000158
 8008350:	20001510 	.word	0x20001510
 8008354:	20001a94 	.word	0x20001a94

08008358 <IKS01A2_MOTION_SENSOR_Disable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2b02      	cmp	r3, #2
 8008366:	d903      	bls.n	8008370 <IKS01A2_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008368:	f06f 0301 	mvn.w	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]
 800836e:	e028      	b.n	80083c2 <IKS01A2_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008370:	4a16      	ldr	r2, [pc, #88]	; (80083cc <IKS01A2_MOTION_SENSOR_Disable+0x74>)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	4013      	ands	r3, r2
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	429a      	cmp	r2, r3
 8008380:	d11c      	bne.n	80083bc <IKS01A2_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8008382:	4a13      	ldr	r2, [pc, #76]	; (80083d0 <IKS01A2_MOTION_SENSOR_Disable+0x78>)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800838a:	4812      	ldr	r0, [pc, #72]	; (80083d4 <IKS01A2_MOTION_SENSOR_Disable+0x7c>)
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	4613      	mov	r3, r2
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	4413      	add	r3, r2
 8008394:	440b      	add	r3, r1
 8008396:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	490e      	ldr	r1, [pc, #56]	; (80083d8 <IKS01A2_MOTION_SENSOR_Disable+0x80>)
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80083a4:	4610      	mov	r0, r2
 80083a6:	4798      	blx	r3
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <IKS01A2_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80083ae:	f06f 0304 	mvn.w	r3, #4
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	e005      	b.n	80083c2 <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	e002      	b.n	80083c2 <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80083bc:	f06f 0301 	mvn.w	r3, #1
 80083c0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80083c2:	68fb      	ldr	r3, [r7, #12]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	20001540 	.word	0x20001540
 80083d0:	20000158 	.word	0x20000158
 80083d4:	20001510 	.word	0x20001510
 80083d8:	20001a94 	.word	0x20001a94

080083dc <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d903      	bls.n	80083f6 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80083ee:	f06f 0301 	mvn.w	r3, #1
 80083f2:	617b      	str	r3, [r7, #20]
 80083f4:	e029      	b.n	800844a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80083f6:	4a17      	ldr	r2, [pc, #92]	; (8008454 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	4013      	ands	r3, r2
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	429a      	cmp	r2, r3
 8008406:	d11d      	bne.n	8008444 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8008408:	4a13      	ldr	r2, [pc, #76]	; (8008458 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008410:	4812      	ldr	r0, [pc, #72]	; (800845c <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	4613      	mov	r3, r2
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	4413      	add	r3, r2
 800841a:	440b      	add	r3, r1
 800841c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	490f      	ldr	r1, [pc, #60]	; (8008460 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	4610      	mov	r0, r2
 800842e:	4798      	blx	r3
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008436:	f06f 0304 	mvn.w	r3, #4
 800843a:	617b      	str	r3, [r7, #20]
 800843c:	e005      	b.n	800844a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800843e:	2300      	movs	r3, #0
 8008440:	617b      	str	r3, [r7, #20]
 8008442:	e002      	b.n	800844a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008444:	f06f 0301 	mvn.w	r3, #1
 8008448:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800844a:	697b      	ldr	r3, [r7, #20]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3718      	adds	r7, #24
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	20001540 	.word	0x20001540
 8008458:	20000158 	.word	0x20000158
 800845c:	20001510 	.word	0x20001510
 8008460:	20001a94 	.word	0x20001a94

08008464 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b02      	cmp	r3, #2
 8008476:	d903      	bls.n	8008480 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008478:	f06f 0301 	mvn.w	r3, #1
 800847c:	617b      	str	r3, [r7, #20]
 800847e:	e02a      	b.n	80084d6 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008480:	4a17      	ldr	r2, [pc, #92]	; (80084e0 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	4013      	ands	r3, r2
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	429a      	cmp	r2, r3
 8008490:	d11e      	bne.n	80084d0 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8008492:	4a14      	ldr	r2, [pc, #80]	; (80084e4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800849a:	4813      	ldr	r0, [pc, #76]	; (80084e8 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	4613      	mov	r3, r2
 80084a0:	005b      	lsls	r3, r3, #1
 80084a2:	4413      	add	r3, r2
 80084a4:	440b      	add	r3, r1
 80084a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	490f      	ldr	r1, [pc, #60]	; (80084ec <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80084b4:	ed97 0a01 	vldr	s0, [r7, #4]
 80084b8:	4610      	mov	r0, r2
 80084ba:	4798      	blx	r3
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80084c2:	f06f 0304 	mvn.w	r3, #4
 80084c6:	617b      	str	r3, [r7, #20]
 80084c8:	e005      	b.n	80084d6 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80084ca:	2300      	movs	r3, #0
 80084cc:	617b      	str	r3, [r7, #20]
 80084ce:	e002      	b.n	80084d6 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80084d0:	f06f 0301 	mvn.w	r3, #1
 80084d4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80084d6:	697b      	ldr	r3, [r7, #20]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20001540 	.word	0x20001540
 80084e4:	20000158 	.word	0x20000158
 80084e8:	20001510 	.word	0x20001510
 80084ec:	20001a94 	.word	0x20001a94

080084f0 <IKS01A2_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d903      	bls.n	800850a <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008502:	f06f 0301 	mvn.w	r3, #1
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	e029      	b.n	800855e <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800850a:	4a17      	ldr	r2, [pc, #92]	; (8008568 <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	4013      	ands	r3, r2
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	429a      	cmp	r2, r3
 800851a:	d11d      	bne.n	8008558 <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 800851c:	4a13      	ldr	r2, [pc, #76]	; (800856c <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008524:	4812      	ldr	r0, [pc, #72]	; (8008570 <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	4613      	mov	r3, r2
 800852a:	005b      	lsls	r3, r3, #1
 800852c:	4413      	add	r3, r2
 800852e:	440b      	add	r3, r1
 8008530:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	490f      	ldr	r1, [pc, #60]	; (8008574 <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	4610      	mov	r0, r2
 8008542:	4798      	blx	r3
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d003      	beq.n	8008552 <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800854a:	f06f 0304 	mvn.w	r3, #4
 800854e:	617b      	str	r3, [r7, #20]
 8008550:	e005      	b.n	800855e <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008552:	2300      	movs	r3, #0
 8008554:	617b      	str	r3, [r7, #20]
 8008556:	e002      	b.n	800855e <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008558:	f06f 0301 	mvn.w	r3, #1
 800855c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800855e:	697b      	ldr	r3, [r7, #20]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3718      	adds	r7, #24
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	20001540 	.word	0x20001540
 800856c:	20000158 	.word	0x20000158
 8008570:	20001510 	.word	0x20001510
 8008574:	20001a94 	.word	0x20001a94

08008578 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b092      	sub	sp, #72	; 0x48
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008580:	2300      	movs	r3, #0
 8008582:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8008584:	2300      	movs	r3, #0
 8008586:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8008588:	23d7      	movs	r3, #215	; 0xd7
 800858a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800858e:	4b4a      	ldr	r3, [pc, #296]	; (80086b8 <LSM6DSL_0_Probe+0x140>)
 8008590:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8008592:	4b4a      	ldr	r3, [pc, #296]	; (80086bc <LSM6DSL_0_Probe+0x144>)
 8008594:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8008596:	4b4a      	ldr	r3, [pc, #296]	; (80086c0 <LSM6DSL_0_Probe+0x148>)
 8008598:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800859a:	4b4a      	ldr	r3, [pc, #296]	; (80086c4 <LSM6DSL_0_Probe+0x14c>)
 800859c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800859e:	4b4a      	ldr	r3, [pc, #296]	; (80086c8 <LSM6DSL_0_Probe+0x150>)
 80085a0:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 80085a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085a6:	4619      	mov	r1, r3
 80085a8:	4848      	ldr	r0, [pc, #288]	; (80086cc <LSM6DSL_0_Probe+0x154>)
 80085aa:	f7fd ff83 	bl	80064b4 <LSM6DSL_RegisterBusIO>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d003      	beq.n	80085bc <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80085b4:	f06f 0306 	mvn.w	r3, #6
 80085b8:	647b      	str	r3, [r7, #68]	; 0x44
 80085ba:	e077      	b.n	80086ac <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 80085bc:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80085c0:	4619      	mov	r1, r3
 80085c2:	4842      	ldr	r0, [pc, #264]	; (80086cc <LSM6DSL_0_Probe+0x154>)
 80085c4:	f7fe f86c 	bl	80066a0 <LSM6DSL_ReadID>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80085ce:	f06f 0306 	mvn.w	r3, #6
 80085d2:	647b      	str	r3, [r7, #68]	; 0x44
 80085d4:	e06a      	b.n	80086ac <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 80085d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085da:	2b6a      	cmp	r3, #106	; 0x6a
 80085dc:	d003      	beq.n	80085e6 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80085de:	f06f 0306 	mvn.w	r3, #6
 80085e2:	647b      	str	r3, [r7, #68]	; 0x44
 80085e4:	e062      	b.n	80086ac <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 80085e6:	f107 0308 	add.w	r3, r7, #8
 80085ea:	4619      	mov	r1, r3
 80085ec:	4837      	ldr	r0, [pc, #220]	; (80086cc <LSM6DSL_0_Probe+0x154>)
 80085ee:	f7fe f86d 	bl	80066cc <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80085f2:	7a7b      	ldrb	r3, [r7, #9]
 80085f4:	461a      	mov	r2, r3
 80085f6:	7a3b      	ldrb	r3, [r7, #8]
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	431a      	orrs	r2, r3
 80085fc:	7abb      	ldrb	r3, [r7, #10]
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4313      	orrs	r3, r2
 8008602:	4a33      	ldr	r2, [pc, #204]	; (80086d0 <LSM6DSL_0_Probe+0x158>)
 8008604:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8008606:	4b33      	ldr	r3, [pc, #204]	; (80086d4 <LSM6DSL_0_Probe+0x15c>)
 8008608:	4a30      	ldr	r2, [pc, #192]	; (80086cc <LSM6DSL_0_Probe+0x154>)
 800860a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 800860c:	4b32      	ldr	r3, [pc, #200]	; (80086d8 <LSM6DSL_0_Probe+0x160>)
 800860e:	4a33      	ldr	r2, [pc, #204]	; (80086dc <LSM6DSL_0_Probe+0x164>)
 8008610:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8008612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008614:	2b00      	cmp	r3, #0
 8008616:	d11d      	bne.n	8008654 <LSM6DSL_0_Probe+0xdc>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d018      	beq.n	8008654 <LSM6DSL_0_Probe+0xdc>
 8008622:	7a7b      	ldrb	r3, [r7, #9]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d115      	bne.n	8008654 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8008628:	4b2d      	ldr	r3, [pc, #180]	; (80086e0 <LSM6DSL_0_Probe+0x168>)
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	4a2d      	ldr	r2, [pc, #180]	; (80086e4 <LSM6DSL_0_Probe+0x16c>)
 800862e:	492e      	ldr	r1, [pc, #184]	; (80086e8 <LSM6DSL_0_Probe+0x170>)
 8008630:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8008634:	4b28      	ldr	r3, [pc, #160]	; (80086d8 <LSM6DSL_0_Probe+0x160>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a26      	ldr	r2, [pc, #152]	; (80086d4 <LSM6DSL_0_Probe+0x15c>)
 800863c:	6812      	ldr	r2, [r2, #0]
 800863e:	4610      	mov	r0, r2
 8008640:	4798      	blx	r3
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d003      	beq.n	8008650 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008648:	f06f 0304 	mvn.w	r3, #4
 800864c:	647b      	str	r3, [r7, #68]	; 0x44
 800864e:	e001      	b.n	8008654 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008650:	2300      	movs	r3, #0
 8008652:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008656:	2b00      	cmp	r3, #0
 8008658:	d11d      	bne.n	8008696 <LSM6DSL_0_Probe+0x11e>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f003 0302 	and.w	r3, r3, #2
 8008660:	2b00      	cmp	r3, #0
 8008662:	d018      	beq.n	8008696 <LSM6DSL_0_Probe+0x11e>
 8008664:	7a3b      	ldrb	r3, [r7, #8]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d115      	bne.n	8008696 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800866a:	4b1d      	ldr	r3, [pc, #116]	; (80086e0 <LSM6DSL_0_Probe+0x168>)
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	4a1d      	ldr	r2, [pc, #116]	; (80086e4 <LSM6DSL_0_Probe+0x16c>)
 8008670:	491e      	ldr	r1, [pc, #120]	; (80086ec <LSM6DSL_0_Probe+0x174>)
 8008672:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8008676:	4b18      	ldr	r3, [pc, #96]	; (80086d8 <LSM6DSL_0_Probe+0x160>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a15      	ldr	r2, [pc, #84]	; (80086d4 <LSM6DSL_0_Probe+0x15c>)
 800867e:	6812      	ldr	r2, [r2, #0]
 8008680:	4610      	mov	r0, r2
 8008682:	4798      	blx	r3
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800868a:	f06f 0304 	mvn.w	r3, #4
 800868e:	647b      	str	r3, [r7, #68]	; 0x44
 8008690:	e001      	b.n	8008696 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008692:	2300      	movs	r3, #0
 8008694:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008698:	2b00      	cmp	r3, #0
 800869a:	d107      	bne.n	80086ac <LSM6DSL_0_Probe+0x134>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f003 0304 	and.w	r3, r3, #4
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80086a6:	f06f 0304 	mvn.w	r3, #4
 80086aa:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80086ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3748      	adds	r7, #72	; 0x48
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	080031f5 	.word	0x080031f5
 80086bc:	08003271 	.word	0x08003271
 80086c0:	08003325 	.word	0x08003325
 80086c4:	080032c1 	.word	0x080032c1
 80086c8:	08003389 	.word	0x08003389
 80086cc:	2000154c 	.word	0x2000154c
 80086d0:	20001540 	.word	0x20001540
 80086d4:	20001a94 	.word	0x20001a94
 80086d8:	20001534 	.word	0x20001534
 80086dc:	200000ec 	.word	0x200000ec
 80086e0:	20000158 	.word	0x20000158
 80086e4:	20001510 	.word	0x20001510
 80086e8:	20000120 	.word	0x20000120
 80086ec:	200000fc 	.word	0x200000fc

080086f0 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b092      	sub	sp, #72	; 0x48
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 80086f8:	2300      	movs	r3, #0
 80086fa:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 80086fc:	2300      	movs	r3, #0
 80086fe:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8008700:	2333      	movs	r3, #51	; 0x33
 8008702:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8008706:	4b3f      	ldr	r3, [pc, #252]	; (8008804 <LSM303AGR_ACC_0_Probe+0x114>)
 8008708:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800870a:	4b3f      	ldr	r3, [pc, #252]	; (8008808 <LSM303AGR_ACC_0_Probe+0x118>)
 800870c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800870e:	4b3f      	ldr	r3, [pc, #252]	; (800880c <LSM303AGR_ACC_0_Probe+0x11c>)
 8008710:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8008712:	4b3f      	ldr	r3, [pc, #252]	; (8008810 <LSM303AGR_ACC_0_Probe+0x120>)
 8008714:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8008716:	4b3f      	ldr	r3, [pc, #252]	; (8008814 <LSM303AGR_ACC_0_Probe+0x124>)
 8008718:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 800871a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800871e:	4619      	mov	r1, r3
 8008720:	483d      	ldr	r0, [pc, #244]	; (8008818 <LSM303AGR_ACC_0_Probe+0x128>)
 8008722:	f7fc fb11 	bl	8004d48 <LSM303AGR_ACC_RegisterBusIO>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d003      	beq.n	8008734 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800872c:	f06f 0306 	mvn.w	r3, #6
 8008730:	647b      	str	r3, [r7, #68]	; 0x44
 8008732:	e062      	b.n	80087fa <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8008734:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008738:	4619      	mov	r1, r3
 800873a:	4837      	ldr	r0, [pc, #220]	; (8008818 <LSM303AGR_ACC_0_Probe+0x128>)
 800873c:	f7fc fbc5 	bl	8004eca <LSM303AGR_ACC_ReadID>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008746:	f06f 0306 	mvn.w	r3, #6
 800874a:	647b      	str	r3, [r7, #68]	; 0x44
 800874c:	e055      	b.n	80087fa <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 800874e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008752:	2b33      	cmp	r3, #51	; 0x33
 8008754:	d003      	beq.n	800875e <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008756:	f06f 0306 	mvn.w	r3, #6
 800875a:	647b      	str	r3, [r7, #68]	; 0x44
 800875c:	e04d      	b.n	80087fa <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 800875e:	f107 0308 	add.w	r3, r7, #8
 8008762:	4619      	mov	r1, r3
 8008764:	482c      	ldr	r0, [pc, #176]	; (8008818 <LSM303AGR_ACC_0_Probe+0x128>)
 8008766:	f7fc fbc7 	bl	8004ef8 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800876a:	7a7b      	ldrb	r3, [r7, #9]
 800876c:	461a      	mov	r2, r3
 800876e:	7a3b      	ldrb	r3, [r7, #8]
 8008770:	005b      	lsls	r3, r3, #1
 8008772:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8008774:	7abb      	ldrb	r3, [r7, #10]
 8008776:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8008778:	4313      	orrs	r3, r2
 800877a:	4a28      	ldr	r2, [pc, #160]	; (800881c <LSM303AGR_ACC_0_Probe+0x12c>)
 800877c:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 800877e:	4b28      	ldr	r3, [pc, #160]	; (8008820 <LSM303AGR_ACC_0_Probe+0x130>)
 8008780:	4a25      	ldr	r2, [pc, #148]	; (8008818 <LSM303AGR_ACC_0_Probe+0x128>)
 8008782:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8008784:	4b27      	ldr	r3, [pc, #156]	; (8008824 <LSM303AGR_ACC_0_Probe+0x134>)
 8008786:	4a28      	ldr	r2, [pc, #160]	; (8008828 <LSM303AGR_ACC_0_Probe+0x138>)
 8008788:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800878a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800878c:	2b00      	cmp	r3, #0
 800878e:	d11e      	bne.n	80087ce <LSM303AGR_ACC_0_Probe+0xde>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d019      	beq.n	80087ce <LSM303AGR_ACC_0_Probe+0xde>
 800879a:	7a3b      	ldrb	r3, [r7, #8]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d116      	bne.n	80087ce <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80087a0:	4b22      	ldr	r3, [pc, #136]	; (800882c <LSM303AGR_ACC_0_Probe+0x13c>)
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	4a22      	ldr	r2, [pc, #136]	; (8008830 <LSM303AGR_ACC_0_Probe+0x140>)
 80087a6:	3303      	adds	r3, #3
 80087a8:	4922      	ldr	r1, [pc, #136]	; (8008834 <LSM303AGR_ACC_0_Probe+0x144>)
 80087aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 80087ae:	4b1d      	ldr	r3, [pc, #116]	; (8008824 <LSM303AGR_ACC_0_Probe+0x134>)
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a1a      	ldr	r2, [pc, #104]	; (8008820 <LSM303AGR_ACC_0_Probe+0x130>)
 80087b6:	6852      	ldr	r2, [r2, #4]
 80087b8:	4610      	mov	r0, r2
 80087ba:	4798      	blx	r3
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d003      	beq.n	80087ca <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80087c2:	f06f 0304 	mvn.w	r3, #4
 80087c6:	647b      	str	r3, [r7, #68]	; 0x44
 80087c8:	e001      	b.n	80087ce <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80087ca:	2300      	movs	r3, #0
 80087cc:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80087ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d107      	bne.n	80087e4 <LSM303AGR_ACC_0_Probe+0xf4>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d002      	beq.n	80087e4 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80087de:	f06f 0304 	mvn.w	r3, #4
 80087e2:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80087e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d107      	bne.n	80087fa <LSM303AGR_ACC_0_Probe+0x10a>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f003 0304 	and.w	r3, r3, #4
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80087f4:	f06f 0304 	mvn.w	r3, #4
 80087f8:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 80087fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3748      	adds	r7, #72	; 0x48
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	080031f5 	.word	0x080031f5
 8008808:	08003271 	.word	0x08003271
 800880c:	08003325 	.word	0x08003325
 8008810:	080032c1 	.word	0x080032c1
 8008814:	08003389 	.word	0x08003389
 8008818:	2000157c 	.word	0x2000157c
 800881c:	20001540 	.word	0x20001540
 8008820:	20001a94 	.word	0x20001a94
 8008824:	20001534 	.word	0x20001534
 8008828:	20000084 	.word	0x20000084
 800882c:	20000158 	.word	0x20000158
 8008830:	20001510 	.word	0x20001510
 8008834:	20000094 	.word	0x20000094

08008838 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b092      	sub	sp, #72	; 0x48
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8008840:	2300      	movs	r3, #0
 8008842:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8008844:	2300      	movs	r3, #0
 8008846:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8008848:	233d      	movs	r3, #61	; 0x3d
 800884a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800884e:	4b3f      	ldr	r3, [pc, #252]	; (800894c <LSM303AGR_MAG_0_Probe+0x114>)
 8008850:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8008852:	4b3f      	ldr	r3, [pc, #252]	; (8008950 <LSM303AGR_MAG_0_Probe+0x118>)
 8008854:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8008856:	4b3f      	ldr	r3, [pc, #252]	; (8008954 <LSM303AGR_MAG_0_Probe+0x11c>)
 8008858:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800885a:	4b3f      	ldr	r3, [pc, #252]	; (8008958 <LSM303AGR_MAG_0_Probe+0x120>)
 800885c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800885e:	4b3f      	ldr	r3, [pc, #252]	; (800895c <LSM303AGR_MAG_0_Probe+0x124>)
 8008860:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8008862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008866:	4619      	mov	r1, r3
 8008868:	483d      	ldr	r0, [pc, #244]	; (8008960 <LSM303AGR_MAG_0_Probe+0x128>)
 800886a:	f7fc fe33 	bl	80054d4 <LSM303AGR_MAG_RegisterBusIO>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008874:	f06f 0306 	mvn.w	r3, #6
 8008878:	647b      	str	r3, [r7, #68]	; 0x44
 800887a:	e062      	b.n	8008942 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 800887c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008880:	4619      	mov	r1, r3
 8008882:	4837      	ldr	r0, [pc, #220]	; (8008960 <LSM303AGR_MAG_0_Probe+0x128>)
 8008884:	f7fc fedd 	bl	8005642 <LSM303AGR_MAG_ReadID>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800888e:	f06f 0306 	mvn.w	r3, #6
 8008892:	647b      	str	r3, [r7, #68]	; 0x44
 8008894:	e055      	b.n	8008942 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8008896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800889a:	2b40      	cmp	r3, #64	; 0x40
 800889c:	d003      	beq.n	80088a6 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800889e:	f06f 0306 	mvn.w	r3, #6
 80088a2:	647b      	str	r3, [r7, #68]	; 0x44
 80088a4:	e04d      	b.n	8008942 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 80088a6:	f107 0308 	add.w	r3, r7, #8
 80088aa:	4619      	mov	r1, r3
 80088ac:	482c      	ldr	r0, [pc, #176]	; (8008960 <LSM303AGR_MAG_0_Probe+0x128>)
 80088ae:	f7fc fedf 	bl	8005670 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80088b2:	7a7b      	ldrb	r3, [r7, #9]
 80088b4:	461a      	mov	r2, r3
 80088b6:	7a3b      	ldrb	r3, [r7, #8]
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80088bc:	7abb      	ldrb	r3, [r7, #10]
 80088be:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80088c0:	4313      	orrs	r3, r2
 80088c2:	4a28      	ldr	r2, [pc, #160]	; (8008964 <LSM303AGR_MAG_0_Probe+0x12c>)
 80088c4:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 80088c6:	4b28      	ldr	r3, [pc, #160]	; (8008968 <LSM303AGR_MAG_0_Probe+0x130>)
 80088c8:	4a25      	ldr	r2, [pc, #148]	; (8008960 <LSM303AGR_MAG_0_Probe+0x128>)
 80088ca:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 80088cc:	4b27      	ldr	r3, [pc, #156]	; (800896c <LSM303AGR_MAG_0_Probe+0x134>)
 80088ce:	4a28      	ldr	r2, [pc, #160]	; (8008970 <LSM303AGR_MAG_0_Probe+0x138>)
 80088d0:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80088d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d11e      	bne.n	8008916 <LSM303AGR_MAG_0_Probe+0xde>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f003 0304 	and.w	r3, r3, #4
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d019      	beq.n	8008916 <LSM303AGR_MAG_0_Probe+0xde>
 80088e2:	7abb      	ldrb	r3, [r7, #10]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d116      	bne.n	8008916 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80088e8:	4b22      	ldr	r3, [pc, #136]	; (8008974 <LSM303AGR_MAG_0_Probe+0x13c>)
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	4a22      	ldr	r2, [pc, #136]	; (8008978 <LSM303AGR_MAG_0_Probe+0x140>)
 80088ee:	3306      	adds	r3, #6
 80088f0:	4922      	ldr	r1, [pc, #136]	; (800897c <LSM303AGR_MAG_0_Probe+0x144>)
 80088f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 80088f6:	4b1d      	ldr	r3, [pc, #116]	; (800896c <LSM303AGR_MAG_0_Probe+0x134>)
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a1a      	ldr	r2, [pc, #104]	; (8008968 <LSM303AGR_MAG_0_Probe+0x130>)
 80088fe:	6892      	ldr	r2, [r2, #8]
 8008900:	4610      	mov	r0, r2
 8008902:	4798      	blx	r3
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800890a:	f06f 0304 	mvn.w	r3, #4
 800890e:	647b      	str	r3, [r7, #68]	; 0x44
 8008910:	e001      	b.n	8008916 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008912:	2300      	movs	r3, #0
 8008914:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8008916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008918:	2b00      	cmp	r3, #0
 800891a:	d107      	bne.n	800892c <LSM303AGR_MAG_0_Probe+0xf4>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f003 0302 	and.w	r3, r3, #2
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008926:	f06f 0304 	mvn.w	r3, #4
 800892a:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800892c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800892e:	2b00      	cmp	r3, #0
 8008930:	d107      	bne.n	8008942 <LSM303AGR_MAG_0_Probe+0x10a>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f003 0301 	and.w	r3, r3, #1
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800893c:	f06f 0304 	mvn.w	r3, #4
 8008940:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8008942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008944:	4618      	mov	r0, r3
 8008946:	3748      	adds	r7, #72	; 0x48
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	080031f5 	.word	0x080031f5
 8008950:	08003271 	.word	0x08003271
 8008954:	08003325 	.word	0x08003325
 8008958:	080032c1 	.word	0x080032c1
 800895c:	08003389 	.word	0x08003389
 8008960:	200015a8 	.word	0x200015a8
 8008964:	20001540 	.word	0x20001540
 8008968:	20001a94 	.word	0x20001a94
 800896c:	20001534 	.word	0x20001534
 8008970:	200000b8 	.word	0x200000b8
 8008974:	20000158 	.word	0x20000158
 8008978:	20001510 	.word	0x20001510
 800897c:	200000c8 	.word	0x200000c8

08008980 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	4603      	mov	r3, r0
 8008988:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800898a:	79fb      	ldrb	r3, [r7, #7]
 800898c:	4a04      	ldr	r2, [pc, #16]	; (80089a0 <BSP_LED_Init+0x20>)
 800898e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008992:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	0801ac48 	.word	0x0801ac48

080089a4 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	4603      	mov	r3, r0
 80089ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 80089ae:	79fb      	ldrb	r3, [r7, #7]
 80089b0:	4a06      	ldr	r2, [pc, #24]	; (80089cc <BSP_LED_On+0x28>)
 80089b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089b6:	2120      	movs	r1, #32
 80089b8:	2201      	movs	r2, #1
 80089ba:	4618      	mov	r0, r3
 80089bc:	f001 f9c6 	bl	8009d4c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	2000016c 	.word	0x2000016c

080089d0 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	4603      	mov	r3, r0
 80089d8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 80089da:	79fb      	ldrb	r3, [r7, #7]
 80089dc:	4a06      	ldr	r2, [pc, #24]	; (80089f8 <BSP_LED_Off+0x28>)
 80089de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089e2:	2120      	movs	r1, #32
 80089e4:	2200      	movs	r2, #0
 80089e6:	4618      	mov	r0, r3
 80089e8:	f001 f9b0 	bl	8009d4c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	2000016c 	.word	0x2000016c

080089fc <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b088      	sub	sp, #32
 8008a00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a02:	4b1c      	ldr	r3, [pc, #112]	; (8008a74 <LED_USER_GPIO_Init+0x78>)
 8008a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a06:	4a1b      	ldr	r2, [pc, #108]	; (8008a74 <LED_USER_GPIO_Init+0x78>)
 8008a08:	f043 0301 	orr.w	r3, r3, #1
 8008a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a0e:	4b19      	ldr	r3, [pc, #100]	; (8008a74 <LED_USER_GPIO_Init+0x78>)
 8008a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	60bb      	str	r3, [r7, #8]
 8008a18:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a1a:	f107 030c 	add.w	r3, r7, #12
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]
 8008a22:	605a      	str	r2, [r3, #4]
 8008a24:	609a      	str	r2, [r3, #8]
 8008a26:	60da      	str	r2, [r3, #12]
 8008a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a2a:	4b12      	ldr	r3, [pc, #72]	; (8008a74 <LED_USER_GPIO_Init+0x78>)
 8008a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a2e:	4a11      	ldr	r2, [pc, #68]	; (8008a74 <LED_USER_GPIO_Init+0x78>)
 8008a30:	f043 0301 	orr.w	r3, r3, #1
 8008a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a36:	4b0f      	ldr	r3, [pc, #60]	; (8008a74 <LED_USER_GPIO_Init+0x78>)
 8008a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	607b      	str	r3, [r7, #4]
 8008a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8008a42:	2200      	movs	r2, #0
 8008a44:	2120      	movs	r1, #32
 8008a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a4a:	f001 f97f 	bl	8009d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8008a4e:	2320      	movs	r3, #32
 8008a50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a52:	2301      	movs	r3, #1
 8008a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a56:	2300      	movs	r3, #0
 8008a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8008a5e:	f107 030c 	add.w	r3, r7, #12
 8008a62:	4619      	mov	r1, r3
 8008a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a68:	f000 feba 	bl	80097e0 <HAL_GPIO_Init>

}
 8008a6c:	bf00      	nop
 8008a6e:	3720      	adds	r7, #32
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	40021000 	.word	0x40021000

08008a78 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	4603      	mov	r3, r0
 8008a80:	460a      	mov	r2, r1
 8008a82:	71fb      	strb	r3, [r7, #7]
 8008a84:	4613      	mov	r3, r2
 8008a86:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	4a1f      	ldr	r2, [pc, #124]	; (8008b0c <BSP_PB_Init+0x94>)
 8008a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a94:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8008a96:	79bb      	ldrb	r3, [r7, #6]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d132      	bne.n	8008b02 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8008a9c:	79fb      	ldrb	r3, [r7, #7]
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	4a1b      	ldr	r2, [pc, #108]	; (8008b10 <BSP_PB_Init+0x98>)
 8008aa2:	441a      	add	r2, r3
 8008aa4:	79fb      	ldrb	r3, [r7, #7]
 8008aa6:	491b      	ldr	r1, [pc, #108]	; (8008b14 <BSP_PB_Init+0x9c>)
 8008aa8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008aac:	4619      	mov	r1, r3
 8008aae:	4610      	mov	r0, r2
 8008ab0:	f000 fe51 	bl	8009756 <HAL_EXTI_GetHandle>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008aba:	f06f 0303 	mvn.w	r3, #3
 8008abe:	60fb      	str	r3, [r7, #12]
 8008ac0:	e01f      	b.n	8008b02 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
 8008ac4:	00db      	lsls	r3, r3, #3
 8008ac6:	4a12      	ldr	r2, [pc, #72]	; (8008b10 <BSP_PB_Init+0x98>)
 8008ac8:	1898      	adds	r0, r3, r2
 8008aca:	79fb      	ldrb	r3, [r7, #7]
 8008acc:	4a12      	ldr	r2, [pc, #72]	; (8008b18 <BSP_PB_Init+0xa0>)
 8008ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	f000 fe24 	bl	8009722 <HAL_EXTI_RegisterCallback>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d003      	beq.n	8008ae8 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008ae0:	f06f 0303 	mvn.w	r3, #3
 8008ae4:	60fb      	str	r3, [r7, #12]
 8008ae6:	e00c      	b.n	8008b02 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8008ae8:	2028      	movs	r0, #40	; 0x28
 8008aea:	79fb      	ldrb	r3, [r7, #7]
 8008aec:	4a0b      	ldr	r2, [pc, #44]	; (8008b1c <BSP_PB_Init+0xa4>)
 8008aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008af2:	2200      	movs	r2, #0
 8008af4:	4619      	mov	r1, r3
 8008af6:	f000 fafc 	bl	80090f2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8008afa:	2328      	movs	r3, #40	; 0x28
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 fb14 	bl	800912a <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8008b02:	68fb      	ldr	r3, [r7, #12]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	0801ac4c 	.word	0x0801ac4c
 8008b10:	20000174 	.word	0x20000174
 8008b14:	0801ac50 	.word	0x0801ac50
 8008b18:	0801ac54 	.word	0x0801ac54
 8008b1c:	0801ac58 	.word	0x0801ac58

08008b20 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	4603      	mov	r3, r0
 8008b28:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	4a09      	ldr	r2, [pc, #36]	; (8008b54 <BSP_PB_GetState+0x34>)
 8008b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b36:	4611      	mov	r1, r2
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f001 f8ef 	bl	8009d1c <HAL_GPIO_ReadPin>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	bf0c      	ite	eq
 8008b44:	2301      	moveq	r3, #1
 8008b46:	2300      	movne	r3, #0
 8008b48:	b2db      	uxtb	r3, r3
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20000170 	.word	0x20000170

08008b58 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	f7f8 fc9b 	bl	8001498 <BSP_PB_Callback>
}
 8008b62:	bf00      	nop
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b088      	sub	sp, #32
 8008b6c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b6e:	4b19      	ldr	r3, [pc, #100]	; (8008bd4 <BUTTON_USER_GPIO_Init+0x6c>)
 8008b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b72:	4a18      	ldr	r2, [pc, #96]	; (8008bd4 <BUTTON_USER_GPIO_Init+0x6c>)
 8008b74:	f043 0304 	orr.w	r3, r3, #4
 8008b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b7a:	4b16      	ldr	r3, [pc, #88]	; (8008bd4 <BUTTON_USER_GPIO_Init+0x6c>)
 8008b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b7e:	f003 0304 	and.w	r3, r3, #4
 8008b82:	60bb      	str	r3, [r7, #8]
 8008b84:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b86:	f107 030c 	add.w	r3, r7, #12
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	605a      	str	r2, [r3, #4]
 8008b90:	609a      	str	r2, [r3, #8]
 8008b92:	60da      	str	r2, [r3, #12]
 8008b94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b96:	4b0f      	ldr	r3, [pc, #60]	; (8008bd4 <BUTTON_USER_GPIO_Init+0x6c>)
 8008b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b9a:	4a0e      	ldr	r2, [pc, #56]	; (8008bd4 <BUTTON_USER_GPIO_Init+0x6c>)
 8008b9c:	f043 0304 	orr.w	r3, r3, #4
 8008ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ba2:	4b0c      	ldr	r3, [pc, #48]	; (8008bd4 <BUTTON_USER_GPIO_Init+0x6c>)
 8008ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ba6:	f003 0304 	and.w	r3, r3, #4
 8008baa:	607b      	str	r3, [r7, #4]
 8008bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8008bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008bb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008bb4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8008bbe:	f107 030c 	add.w	r3, r7, #12
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	4804      	ldr	r0, [pc, #16]	; (8008bd8 <BUTTON_USER_GPIO_Init+0x70>)
 8008bc6:	f000 fe0b 	bl	80097e0 <HAL_GPIO_Init>

}
 8008bca:	bf00      	nop
 8008bcc:	3720      	adds	r7, #32
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	40021000 	.word	0x40021000
 8008bd8:	48000800 	.word	0x48000800

08008bdc <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	4603      	mov	r3, r0
 8008be4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8008be6:	2300      	movs	r3, #0
 8008be8:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8008bea:	79fb      	ldrb	r3, [r7, #7]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d903      	bls.n	8008bf8 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008bf0:	f06f 0301 	mvn.w	r3, #1
 8008bf4:	60fb      	str	r3, [r7, #12]
 8008bf6:	e025      	b.n	8008c44 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8008bf8:	79fb      	ldrb	r3, [r7, #7]
 8008bfa:	79fa      	ldrb	r2, [r7, #7]
 8008bfc:	4914      	ldr	r1, [pc, #80]	; (8008c50 <BSP_COM_Init+0x74>)
 8008bfe:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008c02:	4814      	ldr	r0, [pc, #80]	; (8008c54 <BSP_COM_Init+0x78>)
 8008c04:	4613      	mov	r3, r2
 8008c06:	015b      	lsls	r3, r3, #5
 8008c08:	4413      	add	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4403      	add	r3, r0
 8008c0e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8008c10:	79fa      	ldrb	r2, [r7, #7]
 8008c12:	4613      	mov	r3, r2
 8008c14:	015b      	lsls	r3, r3, #5
 8008c16:	4413      	add	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4a0e      	ldr	r2, [pc, #56]	; (8008c54 <BSP_COM_Init+0x78>)
 8008c1c:	4413      	add	r3, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 f84e 	bl	8008cc0 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8008c24:	79fa      	ldrb	r2, [r7, #7]
 8008c26:	4613      	mov	r3, r2
 8008c28:	015b      	lsls	r3, r3, #5
 8008c2a:	4413      	add	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4a09      	ldr	r2, [pc, #36]	; (8008c54 <BSP_COM_Init+0x78>)
 8008c30:	4413      	add	r3, r2
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 f810 	bl	8008c58 <MX_USART2_UART_Init>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008c3e:	f06f 0303 	mvn.w	r3, #3
 8008c42:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008c44:	68fb      	ldr	r3, [r7, #12]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	2000017c 	.word	0x2000017c
 8008c54:	20001ae8 	.word	0x20001ae8

08008c58 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a15      	ldr	r2, [pc, #84]	; (8008cbc <MX_USART2_UART_Init+0x64>)
 8008c68:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8008c70:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	220c      	movs	r2, #12
 8008c88:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f004 f9ca 	bl	800d03c <HAL_UART_Init>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	40004400 	.word	0x40004400

08008cc0 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08a      	sub	sp, #40	; 0x28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008cc8:	4b30      	ldr	r3, [pc, #192]	; (8008d8c <USART2_MspInit+0xcc>)
 8008cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ccc:	4a2f      	ldr	r2, [pc, #188]	; (8008d8c <USART2_MspInit+0xcc>)
 8008cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8008cd4:	4b2d      	ldr	r3, [pc, #180]	; (8008d8c <USART2_MspInit+0xcc>)
 8008cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cdc:	613b      	str	r3, [r7, #16]
 8008cde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ce0:	4b2a      	ldr	r3, [pc, #168]	; (8008d8c <USART2_MspInit+0xcc>)
 8008ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce4:	4a29      	ldr	r2, [pc, #164]	; (8008d8c <USART2_MspInit+0xcc>)
 8008ce6:	f043 0301 	orr.w	r3, r3, #1
 8008cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cec:	4b27      	ldr	r3, [pc, #156]	; (8008d8c <USART2_MspInit+0xcc>)
 8008cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	60fb      	str	r3, [r7, #12]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d00:	2300      	movs	r3, #0
 8008d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d04:	2303      	movs	r3, #3
 8008d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8008d08:	2307      	movs	r3, #7
 8008d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8008d0c:	f107 0314 	add.w	r3, r7, #20
 8008d10:	4619      	mov	r1, r3
 8008d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d16:	f000 fd63 	bl	80097e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8008d1a:	2308      	movs	r3, #8
 8008d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d1e:	2302      	movs	r3, #2
 8008d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d22:	2300      	movs	r3, #0
 8008d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d26:	2303      	movs	r3, #3
 8008d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8008d2a:	2307      	movs	r3, #7
 8008d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8008d2e:	f107 0314 	add.w	r3, r7, #20
 8008d32:	4619      	mov	r1, r3
 8008d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d38:	f000 fd52 	bl	80097e0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 8008d3c:	4b14      	ldr	r3, [pc, #80]	; (8008d90 <USART2_MspInit+0xd0>)
 8008d3e:	4a15      	ldr	r2, [pc, #84]	; (8008d94 <USART2_MspInit+0xd4>)
 8008d40:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8008d42:	4b13      	ldr	r3, [pc, #76]	; (8008d90 <USART2_MspInit+0xd0>)
 8008d44:	2202      	movs	r2, #2
 8008d46:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008d48:	4b11      	ldr	r3, [pc, #68]	; (8008d90 <USART2_MspInit+0xd0>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d4e:	4b10      	ldr	r3, [pc, #64]	; (8008d90 <USART2_MspInit+0xd0>)
 8008d50:	2200      	movs	r2, #0
 8008d52:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008d54:	4b0e      	ldr	r3, [pc, #56]	; (8008d90 <USART2_MspInit+0xd0>)
 8008d56:	2280      	movs	r2, #128	; 0x80
 8008d58:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008d5a:	4b0d      	ldr	r3, [pc, #52]	; (8008d90 <USART2_MspInit+0xd0>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008d60:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <USART2_MspInit+0xd0>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8008d66:	4b0a      	ldr	r3, [pc, #40]	; (8008d90 <USART2_MspInit+0xd0>)
 8008d68:	2220      	movs	r2, #32
 8008d6a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008d6c:	4b08      	ldr	r3, [pc, #32]	; (8008d90 <USART2_MspInit+0xd0>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 8008d72:	4807      	ldr	r0, [pc, #28]	; (8008d90 <USART2_MspInit+0xd0>)
 8008d74:	f000 fade 	bl	8009334 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a05      	ldr	r2, [pc, #20]	; (8008d90 <USART2_MspInit+0xd0>)
 8008d7c:	671a      	str	r2, [r3, #112]	; 0x70
 8008d7e:	4a04      	ldr	r2, [pc, #16]	; (8008d90 <USART2_MspInit+0xd0>)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8008d84:	bf00      	nop
 8008d86:	3728      	adds	r7, #40	; 0x28
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	40021000 	.word	0x40021000
 8008d90:	20001aa0 	.word	0x20001aa0
 8008d94:	4002006c 	.word	0x4002006c

08008d98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008d9c:	4b15      	ldr	r3, [pc, #84]	; (8008df4 <SystemInit+0x5c>)
 8008d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008da2:	4a14      	ldr	r2, [pc, #80]	; (8008df4 <SystemInit+0x5c>)
 8008da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008dac:	4b12      	ldr	r3, [pc, #72]	; (8008df8 <SystemInit+0x60>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a11      	ldr	r2, [pc, #68]	; (8008df8 <SystemInit+0x60>)
 8008db2:	f043 0301 	orr.w	r3, r3, #1
 8008db6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8008db8:	4b0f      	ldr	r3, [pc, #60]	; (8008df8 <SystemInit+0x60>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8008dbe:	4b0e      	ldr	r3, [pc, #56]	; (8008df8 <SystemInit+0x60>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a0d      	ldr	r2, [pc, #52]	; (8008df8 <SystemInit+0x60>)
 8008dc4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008dc8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8008dcc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8008dce:	4b0a      	ldr	r3, [pc, #40]	; (8008df8 <SystemInit+0x60>)
 8008dd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008dd4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008dd6:	4b08      	ldr	r3, [pc, #32]	; (8008df8 <SystemInit+0x60>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a07      	ldr	r2, [pc, #28]	; (8008df8 <SystemInit+0x60>)
 8008ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008de0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8008de2:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <SystemInit+0x60>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	619a      	str	r2, [r3, #24]
}
 8008de8:	bf00      	nop
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	e000ed00 	.word	0xe000ed00
 8008df8:	40021000 	.word	0x40021000

08008dfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <HAL_Init+0x3c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a0b      	ldr	r2, [pc, #44]	; (8008e38 <HAL_Init+0x3c>)
 8008e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e12:	2003      	movs	r0, #3
 8008e14:	f000 f962 	bl	80090dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008e18:	2000      	movs	r0, #0
 8008e1a:	f000 f80f 	bl	8008e3c <HAL_InitTick>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	71fb      	strb	r3, [r7, #7]
 8008e28:	e001      	b.n	8008e2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008e2a:	f7fa f8ff 	bl	800302c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008e2e:	79fb      	ldrb	r3, [r7, #7]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	40022000 	.word	0x40022000

08008e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008e48:	4b17      	ldr	r3, [pc, #92]	; (8008ea8 <HAL_InitTick+0x6c>)
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d023      	beq.n	8008e98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008e50:	4b16      	ldr	r3, [pc, #88]	; (8008eac <HAL_InitTick+0x70>)
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	4b14      	ldr	r3, [pc, #80]	; (8008ea8 <HAL_InitTick+0x6c>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 f96d 	bl	8009146 <HAL_SYSTICK_Config>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10f      	bne.n	8008e92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b0f      	cmp	r3, #15
 8008e76:	d809      	bhi.n	8008e8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e78:	2200      	movs	r2, #0
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e80:	f000 f937 	bl	80090f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008e84:	4a0a      	ldr	r2, [pc, #40]	; (8008eb0 <HAL_InitTick+0x74>)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6013      	str	r3, [r2, #0]
 8008e8a:	e007      	b.n	8008e9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	73fb      	strb	r3, [r7, #15]
 8008e90:	e004      	b.n	8008e9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	73fb      	strb	r3, [r7, #15]
 8008e96:	e001      	b.n	8008e9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20000188 	.word	0x20000188
 8008eac:	20000180 	.word	0x20000180
 8008eb0:	20000184 	.word	0x20000184

08008eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008eb8:	4b06      	ldr	r3, [pc, #24]	; (8008ed4 <HAL_IncTick+0x20>)
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <HAL_IncTick+0x24>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	4a04      	ldr	r2, [pc, #16]	; (8008ed8 <HAL_IncTick+0x24>)
 8008ec6:	6013      	str	r3, [r2, #0]
}
 8008ec8:	bf00      	nop
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	20000188 	.word	0x20000188
 8008ed8:	20001b6c 	.word	0x20001b6c

08008edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008edc:	b480      	push	{r7}
 8008ede:	af00      	add	r7, sp, #0
  return uwTick;
 8008ee0:	4b03      	ldr	r3, [pc, #12]	; (8008ef0 <HAL_GetTick+0x14>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	20001b6c 	.word	0x20001b6c

08008ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008efc:	f7ff ffee 	bl	8008edc <HAL_GetTick>
 8008f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0c:	d005      	beq.n	8008f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8008f0e:	4b0a      	ldr	r3, [pc, #40]	; (8008f38 <HAL_Delay+0x44>)
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4413      	add	r3, r2
 8008f18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008f1a:	bf00      	nop
 8008f1c:	f7ff ffde 	bl	8008edc <HAL_GetTick>
 8008f20:	4602      	mov	r2, r0
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d8f7      	bhi.n	8008f1c <HAL_Delay+0x28>
  {
  }
}
 8008f2c:	bf00      	nop
 8008f2e:	bf00      	nop
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20000188 	.word	0x20000188

08008f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f4c:	4b0c      	ldr	r3, [pc, #48]	; (8008f80 <__NVIC_SetPriorityGrouping+0x44>)
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f58:	4013      	ands	r3, r2
 8008f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f6e:	4a04      	ldr	r2, [pc, #16]	; (8008f80 <__NVIC_SetPriorityGrouping+0x44>)
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	60d3      	str	r3, [r2, #12]
}
 8008f74:	bf00      	nop
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	e000ed00 	.word	0xe000ed00

08008f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f84:	b480      	push	{r7}
 8008f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f88:	4b04      	ldr	r3, [pc, #16]	; (8008f9c <__NVIC_GetPriorityGrouping+0x18>)
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	0a1b      	lsrs	r3, r3, #8
 8008f8e:	f003 0307 	and.w	r3, r3, #7
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	e000ed00 	.word	0xe000ed00

08008fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	db0b      	blt.n	8008fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fb2:	79fb      	ldrb	r3, [r7, #7]
 8008fb4:	f003 021f 	and.w	r2, r3, #31
 8008fb8:	4907      	ldr	r1, [pc, #28]	; (8008fd8 <__NVIC_EnableIRQ+0x38>)
 8008fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fbe:	095b      	lsrs	r3, r3, #5
 8008fc0:	2001      	movs	r0, #1
 8008fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8008fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008fca:	bf00      	nop
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	e000e100 	.word	0xe000e100

08008fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	6039      	str	r1, [r7, #0]
 8008fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	db0a      	blt.n	8009006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	490c      	ldr	r1, [pc, #48]	; (8009028 <__NVIC_SetPriority+0x4c>)
 8008ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ffa:	0112      	lsls	r2, r2, #4
 8008ffc:	b2d2      	uxtb	r2, r2
 8008ffe:	440b      	add	r3, r1
 8009000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009004:	e00a      	b.n	800901c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	b2da      	uxtb	r2, r3
 800900a:	4908      	ldr	r1, [pc, #32]	; (800902c <__NVIC_SetPriority+0x50>)
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	f003 030f 	and.w	r3, r3, #15
 8009012:	3b04      	subs	r3, #4
 8009014:	0112      	lsls	r2, r2, #4
 8009016:	b2d2      	uxtb	r2, r2
 8009018:	440b      	add	r3, r1
 800901a:	761a      	strb	r2, [r3, #24]
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	e000e100 	.word	0xe000e100
 800902c:	e000ed00 	.word	0xe000ed00

08009030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009030:	b480      	push	{r7}
 8009032:	b089      	sub	sp, #36	; 0x24
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f003 0307 	and.w	r3, r3, #7
 8009042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	f1c3 0307 	rsb	r3, r3, #7
 800904a:	2b04      	cmp	r3, #4
 800904c:	bf28      	it	cs
 800904e:	2304      	movcs	r3, #4
 8009050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	3304      	adds	r3, #4
 8009056:	2b06      	cmp	r3, #6
 8009058:	d902      	bls.n	8009060 <NVIC_EncodePriority+0x30>
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	3b03      	subs	r3, #3
 800905e:	e000      	b.n	8009062 <NVIC_EncodePriority+0x32>
 8009060:	2300      	movs	r3, #0
 8009062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009064:	f04f 32ff 	mov.w	r2, #4294967295
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	fa02 f303 	lsl.w	r3, r2, r3
 800906e:	43da      	mvns	r2, r3
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	401a      	ands	r2, r3
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009078:	f04f 31ff 	mov.w	r1, #4294967295
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	fa01 f303 	lsl.w	r3, r1, r3
 8009082:	43d9      	mvns	r1, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009088:	4313      	orrs	r3, r2
         );
}
 800908a:	4618      	mov	r0, r3
 800908c:	3724      	adds	r7, #36	; 0x24
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
	...

08009098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	3b01      	subs	r3, #1
 80090a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090a8:	d301      	bcc.n	80090ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80090aa:	2301      	movs	r3, #1
 80090ac:	e00f      	b.n	80090ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090ae:	4a0a      	ldr	r2, [pc, #40]	; (80090d8 <SysTick_Config+0x40>)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80090b6:	210f      	movs	r1, #15
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295
 80090bc:	f7ff ff8e 	bl	8008fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090c0:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <SysTick_Config+0x40>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80090c6:	4b04      	ldr	r3, [pc, #16]	; (80090d8 <SysTick_Config+0x40>)
 80090c8:	2207      	movs	r2, #7
 80090ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	e000e010 	.word	0xe000e010

080090dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7ff ff29 	bl	8008f3c <__NVIC_SetPriorityGrouping>
}
 80090ea:	bf00      	nop
 80090ec:	3708      	adds	r7, #8
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b086      	sub	sp, #24
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	4603      	mov	r3, r0
 80090fa:	60b9      	str	r1, [r7, #8]
 80090fc:	607a      	str	r2, [r7, #4]
 80090fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009100:	2300      	movs	r3, #0
 8009102:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009104:	f7ff ff3e 	bl	8008f84 <__NVIC_GetPriorityGrouping>
 8009108:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	68b9      	ldr	r1, [r7, #8]
 800910e:	6978      	ldr	r0, [r7, #20]
 8009110:	f7ff ff8e 	bl	8009030 <NVIC_EncodePriority>
 8009114:	4602      	mov	r2, r0
 8009116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800911a:	4611      	mov	r1, r2
 800911c:	4618      	mov	r0, r3
 800911e:	f7ff ff5d 	bl	8008fdc <__NVIC_SetPriority>
}
 8009122:	bf00      	nop
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b082      	sub	sp, #8
 800912e:	af00      	add	r7, sp, #0
 8009130:	4603      	mov	r3, r0
 8009132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009138:	4618      	mov	r0, r3
 800913a:	f7ff ff31 	bl	8008fa0 <__NVIC_EnableIRQ>
}
 800913e:	bf00      	nop
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b082      	sub	sp, #8
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7ff ffa2 	bl	8009098 <SysTick_Config>
 8009154:	4603      	mov	r3, r0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
	...

08009160 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e054      	b.n	800921c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	7f5b      	ldrb	r3, [r3, #29]
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b00      	cmp	r3, #0
 800917a:	d105      	bne.n	8009188 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7f9 ff76 	bl	8003074 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	791b      	ldrb	r3, [r3, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10c      	bne.n	80091b0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a22      	ldr	r2, [pc, #136]	; (8009224 <HAL_CRC_Init+0xc4>)
 800919c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	689a      	ldr	r2, [r3, #8]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f022 0218 	bic.w	r2, r2, #24
 80091ac:	609a      	str	r2, [r3, #8]
 80091ae:	e00c      	b.n	80091ca <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6899      	ldr	r1, [r3, #8]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	461a      	mov	r2, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f834 	bl	8009228 <HAL_CRCEx_Polynomial_Set>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e028      	b.n	800921c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	795b      	ldrb	r3, [r3, #5]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d105      	bne.n	80091de <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f04f 32ff 	mov.w	r2, #4294967295
 80091da:	611a      	str	r2, [r3, #16]
 80091dc:	e004      	b.n	80091e8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	6912      	ldr	r2, [r2, #16]
 80091e6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	695a      	ldr	r2, [r3, #20]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	430a      	orrs	r2, r1
 80091fc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	699a      	ldr	r2, [r3, #24]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	430a      	orrs	r2, r1
 8009212:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	04c11db7 	.word	0x04c11db7

08009228 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009228:	b480      	push	{r7}
 800922a:	b087      	sub	sp, #28
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009238:	231f      	movs	r3, #31
 800923a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800923c:	bf00      	nop
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	1e5a      	subs	r2, r3, #1
 8009242:	613a      	str	r2, [r7, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d009      	beq.n	800925c <HAL_CRCEx_Polynomial_Set+0x34>
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f003 031f 	and.w	r3, r3, #31
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	fa22 f303 	lsr.w	r3, r2, r3
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	2b00      	cmp	r3, #0
 800925a:	d0f0      	beq.n	800923e <HAL_CRCEx_Polynomial_Set+0x16>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b18      	cmp	r3, #24
 8009260:	d846      	bhi.n	80092f0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8009262:	a201      	add	r2, pc, #4	; (adr r2, 8009268 <HAL_CRCEx_Polynomial_Set+0x40>)
 8009264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009268:	080092f7 	.word	0x080092f7
 800926c:	080092f1 	.word	0x080092f1
 8009270:	080092f1 	.word	0x080092f1
 8009274:	080092f1 	.word	0x080092f1
 8009278:	080092f1 	.word	0x080092f1
 800927c:	080092f1 	.word	0x080092f1
 8009280:	080092f1 	.word	0x080092f1
 8009284:	080092f1 	.word	0x080092f1
 8009288:	080092e5 	.word	0x080092e5
 800928c:	080092f1 	.word	0x080092f1
 8009290:	080092f1 	.word	0x080092f1
 8009294:	080092f1 	.word	0x080092f1
 8009298:	080092f1 	.word	0x080092f1
 800929c:	080092f1 	.word	0x080092f1
 80092a0:	080092f1 	.word	0x080092f1
 80092a4:	080092f1 	.word	0x080092f1
 80092a8:	080092d9 	.word	0x080092d9
 80092ac:	080092f1 	.word	0x080092f1
 80092b0:	080092f1 	.word	0x080092f1
 80092b4:	080092f1 	.word	0x080092f1
 80092b8:	080092f1 	.word	0x080092f1
 80092bc:	080092f1 	.word	0x080092f1
 80092c0:	080092f1 	.word	0x080092f1
 80092c4:	080092f1 	.word	0x080092f1
 80092c8:	080092cd 	.word	0x080092cd
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	2b06      	cmp	r3, #6
 80092d0:	d913      	bls.n	80092fa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80092d6:	e010      	b.n	80092fa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	2b07      	cmp	r3, #7
 80092dc:	d90f      	bls.n	80092fe <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80092e2:	e00c      	b.n	80092fe <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	2b0f      	cmp	r3, #15
 80092e8:	d90b      	bls.n	8009302 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80092ee:	e008      	b.n	8009302 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	75fb      	strb	r3, [r7, #23]
      break;
 80092f4:	e006      	b.n	8009304 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80092f6:	bf00      	nop
 80092f8:	e004      	b.n	8009304 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80092fa:	bf00      	nop
 80092fc:	e002      	b.n	8009304 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80092fe:	bf00      	nop
 8009300:	e000      	b.n	8009304 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009302:	bf00      	nop
  }
  if (status == HAL_OK)
 8009304:	7dfb      	ldrb	r3, [r7, #23]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10d      	bne.n	8009326 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	f023 0118 	bic.w	r1, r3, #24
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	430a      	orrs	r2, r1
 8009324:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009326:	7dfb      	ldrb	r3, [r7, #23]
}
 8009328:	4618      	mov	r0, r3
 800932a:	371c      	adds	r7, #28
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e098      	b.n	8009478 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	4b4d      	ldr	r3, [pc, #308]	; (8009484 <HAL_DMA_Init+0x150>)
 800934e:	429a      	cmp	r2, r3
 8009350:	d80f      	bhi.n	8009372 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	4b4b      	ldr	r3, [pc, #300]	; (8009488 <HAL_DMA_Init+0x154>)
 800935a:	4413      	add	r3, r2
 800935c:	4a4b      	ldr	r2, [pc, #300]	; (800948c <HAL_DMA_Init+0x158>)
 800935e:	fba2 2303 	umull	r2, r3, r2, r3
 8009362:	091b      	lsrs	r3, r3, #4
 8009364:	009a      	lsls	r2, r3, #2
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a48      	ldr	r2, [pc, #288]	; (8009490 <HAL_DMA_Init+0x15c>)
 800936e:	641a      	str	r2, [r3, #64]	; 0x40
 8009370:	e00e      	b.n	8009390 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	4b46      	ldr	r3, [pc, #280]	; (8009494 <HAL_DMA_Init+0x160>)
 800937a:	4413      	add	r3, r2
 800937c:	4a43      	ldr	r2, [pc, #268]	; (800948c <HAL_DMA_Init+0x158>)
 800937e:	fba2 2303 	umull	r2, r3, r2, r3
 8009382:	091b      	lsrs	r3, r3, #4
 8009384:	009a      	lsls	r2, r3, #2
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a42      	ldr	r2, [pc, #264]	; (8009498 <HAL_DMA_Init+0x164>)
 800938e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2202      	movs	r2, #2
 8009394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80093a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80093b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093ea:	d039      	beq.n	8009460 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f0:	4a27      	ldr	r2, [pc, #156]	; (8009490 <HAL_DMA_Init+0x15c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d11a      	bne.n	800942c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80093f6:	4b29      	ldr	r3, [pc, #164]	; (800949c <HAL_DMA_Init+0x168>)
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093fe:	f003 031c 	and.w	r3, r3, #28
 8009402:	210f      	movs	r1, #15
 8009404:	fa01 f303 	lsl.w	r3, r1, r3
 8009408:	43db      	mvns	r3, r3
 800940a:	4924      	ldr	r1, [pc, #144]	; (800949c <HAL_DMA_Init+0x168>)
 800940c:	4013      	ands	r3, r2
 800940e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009410:	4b22      	ldr	r3, [pc, #136]	; (800949c <HAL_DMA_Init+0x168>)
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6859      	ldr	r1, [r3, #4]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800941c:	f003 031c 	and.w	r3, r3, #28
 8009420:	fa01 f303 	lsl.w	r3, r1, r3
 8009424:	491d      	ldr	r1, [pc, #116]	; (800949c <HAL_DMA_Init+0x168>)
 8009426:	4313      	orrs	r3, r2
 8009428:	600b      	str	r3, [r1, #0]
 800942a:	e019      	b.n	8009460 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800942c:	4b1c      	ldr	r3, [pc, #112]	; (80094a0 <HAL_DMA_Init+0x16c>)
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009434:	f003 031c 	and.w	r3, r3, #28
 8009438:	210f      	movs	r1, #15
 800943a:	fa01 f303 	lsl.w	r3, r1, r3
 800943e:	43db      	mvns	r3, r3
 8009440:	4917      	ldr	r1, [pc, #92]	; (80094a0 <HAL_DMA_Init+0x16c>)
 8009442:	4013      	ands	r3, r2
 8009444:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009446:	4b16      	ldr	r3, [pc, #88]	; (80094a0 <HAL_DMA_Init+0x16c>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6859      	ldr	r1, [r3, #4]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009452:	f003 031c 	and.w	r3, r3, #28
 8009456:	fa01 f303 	lsl.w	r3, r1, r3
 800945a:	4911      	ldr	r1, [pc, #68]	; (80094a0 <HAL_DMA_Init+0x16c>)
 800945c:	4313      	orrs	r3, r2
 800945e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	40020407 	.word	0x40020407
 8009488:	bffdfff8 	.word	0xbffdfff8
 800948c:	cccccccd 	.word	0xcccccccd
 8009490:	40020000 	.word	0x40020000
 8009494:	bffdfbf8 	.word	0xbffdfbf8
 8009498:	40020400 	.word	0x40020400
 800949c:	400200a8 	.word	0x400200a8
 80094a0:	400204a8 	.word	0x400204a8

080094a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b086      	sub	sp, #24
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
 80094b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d101      	bne.n	80094c4 <HAL_DMA_Start_IT+0x20>
 80094c0:	2302      	movs	r3, #2
 80094c2:	e04b      	b.n	800955c <HAL_DMA_Start_IT+0xb8>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d13a      	bne.n	800954e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2202      	movs	r2, #2
 80094dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f022 0201 	bic.w	r2, r2, #1
 80094f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	68b9      	ldr	r1, [r7, #8]
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 f8e0 	bl	80096c2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009506:	2b00      	cmp	r3, #0
 8009508:	d008      	beq.n	800951c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f042 020e 	orr.w	r2, r2, #14
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	e00f      	b.n	800953c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f022 0204 	bic.w	r2, r2, #4
 800952a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f042 020a 	orr.w	r2, r2, #10
 800953a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f042 0201 	orr.w	r2, r2, #1
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	e005      	b.n	800955a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009556:	2302      	movs	r3, #2
 8009558:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800955a:	7dfb      	ldrb	r3, [r7, #23]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009580:	f003 031c 	and.w	r3, r3, #28
 8009584:	2204      	movs	r2, #4
 8009586:	409a      	lsls	r2, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	4013      	ands	r3, r2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d026      	beq.n	80095de <HAL_DMA_IRQHandler+0x7a>
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	f003 0304 	and.w	r3, r3, #4
 8009596:	2b00      	cmp	r3, #0
 8009598:	d021      	beq.n	80095de <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 0320 	and.w	r3, r3, #32
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d107      	bne.n	80095b8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f022 0204 	bic.w	r2, r2, #4
 80095b6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095bc:	f003 021c 	and.w	r2, r3, #28
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c4:	2104      	movs	r1, #4
 80095c6:	fa01 f202 	lsl.w	r2, r1, r2
 80095ca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d071      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80095dc:	e06c      	b.n	80096b8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e2:	f003 031c 	and.w	r3, r3, #28
 80095e6:	2202      	movs	r2, #2
 80095e8:	409a      	lsls	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	4013      	ands	r3, r2
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d02e      	beq.n	8009650 <HAL_DMA_IRQHandler+0xec>
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	f003 0302 	and.w	r3, r3, #2
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d029      	beq.n	8009650 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 0320 	and.w	r3, r3, #32
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10b      	bne.n	8009622 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 020a 	bic.w	r2, r2, #10
 8009618:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009626:	f003 021c 	and.w	r2, r3, #28
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962e:	2102      	movs	r1, #2
 8009630:	fa01 f202 	lsl.w	r2, r1, r2
 8009634:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009642:	2b00      	cmp	r3, #0
 8009644:	d038      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800964e:	e033      	b.n	80096b8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009654:	f003 031c 	and.w	r3, r3, #28
 8009658:	2208      	movs	r2, #8
 800965a:	409a      	lsls	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	4013      	ands	r3, r2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d02a      	beq.n	80096ba <HAL_DMA_IRQHandler+0x156>
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f003 0308 	and.w	r3, r3, #8
 800966a:	2b00      	cmp	r3, #0
 800966c:	d025      	beq.n	80096ba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f022 020e 	bic.w	r2, r2, #14
 800967c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009682:	f003 021c 	and.w	r2, r3, #28
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968a:	2101      	movs	r1, #1
 800968c:	fa01 f202 	lsl.w	r2, r1, r2
 8009690:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d004      	beq.n	80096ba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80096b8:	bf00      	nop
 80096ba:	bf00      	nop
}
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80096c2:	b480      	push	{r7}
 80096c4:	b085      	sub	sp, #20
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	60f8      	str	r0, [r7, #12]
 80096ca:	60b9      	str	r1, [r7, #8]
 80096cc:	607a      	str	r2, [r7, #4]
 80096ce:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d4:	f003 021c 	and.w	r2, r3, #28
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096dc:	2101      	movs	r1, #1
 80096de:	fa01 f202 	lsl.w	r2, r1, r2
 80096e2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	683a      	ldr	r2, [r7, #0]
 80096ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	2b10      	cmp	r3, #16
 80096f2:	d108      	bne.n	8009706 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009704:	e007      	b.n	8009716 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	60da      	str	r2, [r3, #12]
}
 8009716:	bf00      	nop
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr

08009722 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009722:	b480      	push	{r7}
 8009724:	b087      	sub	sp, #28
 8009726:	af00      	add	r7, sp, #0
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	460b      	mov	r3, r1
 800972c:	607a      	str	r2, [r7, #4]
 800972e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8009734:	7afb      	ldrb	r3, [r7, #11]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d103      	bne.n	8009742 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	605a      	str	r2, [r3, #4]
      break;
 8009740:	e002      	b.n	8009748 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	75fb      	strb	r3, [r7, #23]
      break;
 8009746:	bf00      	nop
  }

  return status;
 8009748:	7dfb      	ldrb	r3, [r7, #23]
}
 800974a:	4618      	mov	r0, r3
 800974c:	371c      	adds	r7, #28
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8009756:	b480      	push	{r7}
 8009758:	b083      	sub	sp, #12
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e003      	b.n	8009772 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009770:	2300      	movs	r3, #0
  }
}
 8009772:	4618      	mov	r0, r3
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
	...

08009780 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	0c1b      	lsrs	r3, r3, #16
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 031f 	and.w	r3, r3, #31
 800979c:	2201      	movs	r2, #1
 800979e:	fa02 f303 	lsl.w	r3, r2, r3
 80097a2:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	015a      	lsls	r2, r3, #5
 80097a8:	4b0c      	ldr	r3, [pc, #48]	; (80097dc <HAL_EXTI_IRQHandler+0x5c>)
 80097aa:	4413      	add	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	4013      	ands	r3, r2
 80097b6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d009      	beq.n	80097d2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	4798      	blx	r3
    }
  }
}
 80097d2:	bf00      	nop
 80097d4:	3718      	adds	r7, #24
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	40010414 	.word	0x40010414

080097e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b087      	sub	sp, #28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80097ea:	2300      	movs	r3, #0
 80097ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80097ee:	e17f      	b.n	8009af0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	2101      	movs	r1, #1
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	fa01 f303 	lsl.w	r3, r1, r3
 80097fc:	4013      	ands	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 8171 	beq.w	8009aea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	f003 0303 	and.w	r3, r3, #3
 8009810:	2b01      	cmp	r3, #1
 8009812:	d005      	beq.n	8009820 <HAL_GPIO_Init+0x40>
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	f003 0303 	and.w	r3, r3, #3
 800981c:	2b02      	cmp	r3, #2
 800981e:	d130      	bne.n	8009882 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	005b      	lsls	r3, r3, #1
 800982a:	2203      	movs	r2, #3
 800982c:	fa02 f303 	lsl.w	r3, r2, r3
 8009830:	43db      	mvns	r3, r3
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	4013      	ands	r3, r2
 8009836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	68da      	ldr	r2, [r3, #12]
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	005b      	lsls	r3, r3, #1
 8009840:	fa02 f303 	lsl.w	r3, r2, r3
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	4313      	orrs	r3, r2
 8009848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009856:	2201      	movs	r2, #1
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	fa02 f303 	lsl.w	r3, r2, r3
 800985e:	43db      	mvns	r3, r3
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	4013      	ands	r3, r2
 8009864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	091b      	lsrs	r3, r3, #4
 800986c:	f003 0201 	and.w	r2, r3, #1
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	fa02 f303 	lsl.w	r3, r2, r3
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	4313      	orrs	r3, r2
 800987a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	f003 0303 	and.w	r3, r3, #3
 800988a:	2b03      	cmp	r3, #3
 800988c:	d118      	bne.n	80098c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8009894:	2201      	movs	r2, #1
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	fa02 f303 	lsl.w	r3, r2, r3
 800989c:	43db      	mvns	r3, r3
 800989e:	693a      	ldr	r2, [r7, #16]
 80098a0:	4013      	ands	r3, r2
 80098a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	08db      	lsrs	r3, r3, #3
 80098aa:	f003 0201 	and.w	r2, r3, #1
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	fa02 f303 	lsl.w	r3, r2, r3
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	f003 0303 	and.w	r3, r3, #3
 80098c8:	2b03      	cmp	r3, #3
 80098ca:	d017      	beq.n	80098fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	005b      	lsls	r3, r3, #1
 80098d6:	2203      	movs	r2, #3
 80098d8:	fa02 f303 	lsl.w	r3, r2, r3
 80098dc:	43db      	mvns	r3, r3
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	4013      	ands	r3, r2
 80098e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	005b      	lsls	r3, r3, #1
 80098ec:	fa02 f303 	lsl.w	r3, r2, r3
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	693a      	ldr	r2, [r7, #16]
 80098fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	f003 0303 	and.w	r3, r3, #3
 8009904:	2b02      	cmp	r3, #2
 8009906:	d123      	bne.n	8009950 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	08da      	lsrs	r2, r3, #3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	3208      	adds	r2, #8
 8009910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009914:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f003 0307 	and.w	r3, r3, #7
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	220f      	movs	r2, #15
 8009920:	fa02 f303 	lsl.w	r3, r2, r3
 8009924:	43db      	mvns	r3, r3
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	4013      	ands	r3, r2
 800992a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	691a      	ldr	r2, [r3, #16]
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	f003 0307 	and.w	r3, r3, #7
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	fa02 f303 	lsl.w	r3, r2, r3
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	4313      	orrs	r3, r2
 8009940:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	08da      	lsrs	r2, r3, #3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	3208      	adds	r2, #8
 800994a:	6939      	ldr	r1, [r7, #16]
 800994c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	005b      	lsls	r3, r3, #1
 800995a:	2203      	movs	r2, #3
 800995c:	fa02 f303 	lsl.w	r3, r2, r3
 8009960:	43db      	mvns	r3, r3
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	4013      	ands	r3, r2
 8009966:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	f003 0203 	and.w	r2, r3, #3
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	fa02 f303 	lsl.w	r3, r2, r3
 8009978:	693a      	ldr	r2, [r7, #16]
 800997a:	4313      	orrs	r3, r2
 800997c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 80ac 	beq.w	8009aea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009992:	4b5f      	ldr	r3, [pc, #380]	; (8009b10 <HAL_GPIO_Init+0x330>)
 8009994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009996:	4a5e      	ldr	r2, [pc, #376]	; (8009b10 <HAL_GPIO_Init+0x330>)
 8009998:	f043 0301 	orr.w	r3, r3, #1
 800999c:	6613      	str	r3, [r2, #96]	; 0x60
 800999e:	4b5c      	ldr	r3, [pc, #368]	; (8009b10 <HAL_GPIO_Init+0x330>)
 80099a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	60bb      	str	r3, [r7, #8]
 80099a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80099aa:	4a5a      	ldr	r2, [pc, #360]	; (8009b14 <HAL_GPIO_Init+0x334>)
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	089b      	lsrs	r3, r3, #2
 80099b0:	3302      	adds	r3, #2
 80099b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	f003 0303 	and.w	r3, r3, #3
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	220f      	movs	r2, #15
 80099c2:	fa02 f303 	lsl.w	r3, r2, r3
 80099c6:	43db      	mvns	r3, r3
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	4013      	ands	r3, r2
 80099cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80099d4:	d025      	beq.n	8009a22 <HAL_GPIO_Init+0x242>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a4f      	ldr	r2, [pc, #316]	; (8009b18 <HAL_GPIO_Init+0x338>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d01f      	beq.n	8009a1e <HAL_GPIO_Init+0x23e>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a4e      	ldr	r2, [pc, #312]	; (8009b1c <HAL_GPIO_Init+0x33c>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d019      	beq.n	8009a1a <HAL_GPIO_Init+0x23a>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a4d      	ldr	r2, [pc, #308]	; (8009b20 <HAL_GPIO_Init+0x340>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d013      	beq.n	8009a16 <HAL_GPIO_Init+0x236>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a4c      	ldr	r2, [pc, #304]	; (8009b24 <HAL_GPIO_Init+0x344>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d00d      	beq.n	8009a12 <HAL_GPIO_Init+0x232>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a4b      	ldr	r2, [pc, #300]	; (8009b28 <HAL_GPIO_Init+0x348>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d007      	beq.n	8009a0e <HAL_GPIO_Init+0x22e>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a4a      	ldr	r2, [pc, #296]	; (8009b2c <HAL_GPIO_Init+0x34c>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d101      	bne.n	8009a0a <HAL_GPIO_Init+0x22a>
 8009a06:	2306      	movs	r3, #6
 8009a08:	e00c      	b.n	8009a24 <HAL_GPIO_Init+0x244>
 8009a0a:	2307      	movs	r3, #7
 8009a0c:	e00a      	b.n	8009a24 <HAL_GPIO_Init+0x244>
 8009a0e:	2305      	movs	r3, #5
 8009a10:	e008      	b.n	8009a24 <HAL_GPIO_Init+0x244>
 8009a12:	2304      	movs	r3, #4
 8009a14:	e006      	b.n	8009a24 <HAL_GPIO_Init+0x244>
 8009a16:	2303      	movs	r3, #3
 8009a18:	e004      	b.n	8009a24 <HAL_GPIO_Init+0x244>
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	e002      	b.n	8009a24 <HAL_GPIO_Init+0x244>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e000      	b.n	8009a24 <HAL_GPIO_Init+0x244>
 8009a22:	2300      	movs	r3, #0
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	f002 0203 	and.w	r2, r2, #3
 8009a2a:	0092      	lsls	r2, r2, #2
 8009a2c:	4093      	lsls	r3, r2
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009a34:	4937      	ldr	r1, [pc, #220]	; (8009b14 <HAL_GPIO_Init+0x334>)
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	089b      	lsrs	r3, r3, #2
 8009a3a:	3302      	adds	r3, #2
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009a42:	4b3b      	ldr	r3, [pc, #236]	; (8009b30 <HAL_GPIO_Init+0x350>)
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	43db      	mvns	r3, r3
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	4013      	ands	r3, r2
 8009a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d003      	beq.n	8009a66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009a66:	4a32      	ldr	r2, [pc, #200]	; (8009b30 <HAL_GPIO_Init+0x350>)
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009a6c:	4b30      	ldr	r3, [pc, #192]	; (8009b30 <HAL_GPIO_Init+0x350>)
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	43db      	mvns	r3, r3
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	4013      	ands	r3, r2
 8009a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d003      	beq.n	8009a90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009a90:	4a27      	ldr	r2, [pc, #156]	; (8009b30 <HAL_GPIO_Init+0x350>)
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009a96:	4b26      	ldr	r3, [pc, #152]	; (8009b30 <HAL_GPIO_Init+0x350>)
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	43db      	mvns	r3, r3
 8009aa0:	693a      	ldr	r2, [r7, #16]
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009aba:	4a1d      	ldr	r2, [pc, #116]	; (8009b30 <HAL_GPIO_Init+0x350>)
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8009ac0:	4b1b      	ldr	r3, [pc, #108]	; (8009b30 <HAL_GPIO_Init+0x350>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	43db      	mvns	r3, r3
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	4013      	ands	r3, r2
 8009ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d003      	beq.n	8009ae4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009ae4:	4a12      	ldr	r2, [pc, #72]	; (8009b30 <HAL_GPIO_Init+0x350>)
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	3301      	adds	r3, #1
 8009aee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	fa22 f303 	lsr.w	r3, r2, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f47f ae78 	bne.w	80097f0 <HAL_GPIO_Init+0x10>
  }
}
 8009b00:	bf00      	nop
 8009b02:	bf00      	nop
 8009b04:	371c      	adds	r7, #28
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	40021000 	.word	0x40021000
 8009b14:	40010000 	.word	0x40010000
 8009b18:	48000400 	.word	0x48000400
 8009b1c:	48000800 	.word	0x48000800
 8009b20:	48000c00 	.word	0x48000c00
 8009b24:	48001000 	.word	0x48001000
 8009b28:	48001400 	.word	0x48001400
 8009b2c:	48001800 	.word	0x48001800
 8009b30:	40010400 	.word	0x40010400

08009b34 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b087      	sub	sp, #28
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8009b42:	e0cd      	b.n	8009ce0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009b44:	2201      	movs	r2, #1
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4c:	683a      	ldr	r2, [r7, #0]
 8009b4e:	4013      	ands	r3, r2
 8009b50:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 80c0 	beq.w	8009cda <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8009b5a:	4a68      	ldr	r2, [pc, #416]	; (8009cfc <HAL_GPIO_DeInit+0x1c8>)
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	089b      	lsrs	r3, r3, #2
 8009b60:	3302      	adds	r3, #2
 8009b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b66:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	f003 0303 	and.w	r3, r3, #3
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	220f      	movs	r2, #15
 8009b72:	fa02 f303 	lsl.w	r3, r2, r3
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	4013      	ands	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009b82:	d025      	beq.n	8009bd0 <HAL_GPIO_DeInit+0x9c>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a5e      	ldr	r2, [pc, #376]	; (8009d00 <HAL_GPIO_DeInit+0x1cc>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d01f      	beq.n	8009bcc <HAL_GPIO_DeInit+0x98>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a5d      	ldr	r2, [pc, #372]	; (8009d04 <HAL_GPIO_DeInit+0x1d0>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d019      	beq.n	8009bc8 <HAL_GPIO_DeInit+0x94>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a5c      	ldr	r2, [pc, #368]	; (8009d08 <HAL_GPIO_DeInit+0x1d4>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d013      	beq.n	8009bc4 <HAL_GPIO_DeInit+0x90>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a5b      	ldr	r2, [pc, #364]	; (8009d0c <HAL_GPIO_DeInit+0x1d8>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d00d      	beq.n	8009bc0 <HAL_GPIO_DeInit+0x8c>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a5a      	ldr	r2, [pc, #360]	; (8009d10 <HAL_GPIO_DeInit+0x1dc>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d007      	beq.n	8009bbc <HAL_GPIO_DeInit+0x88>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a59      	ldr	r2, [pc, #356]	; (8009d14 <HAL_GPIO_DeInit+0x1e0>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d101      	bne.n	8009bb8 <HAL_GPIO_DeInit+0x84>
 8009bb4:	2306      	movs	r3, #6
 8009bb6:	e00c      	b.n	8009bd2 <HAL_GPIO_DeInit+0x9e>
 8009bb8:	2307      	movs	r3, #7
 8009bba:	e00a      	b.n	8009bd2 <HAL_GPIO_DeInit+0x9e>
 8009bbc:	2305      	movs	r3, #5
 8009bbe:	e008      	b.n	8009bd2 <HAL_GPIO_DeInit+0x9e>
 8009bc0:	2304      	movs	r3, #4
 8009bc2:	e006      	b.n	8009bd2 <HAL_GPIO_DeInit+0x9e>
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e004      	b.n	8009bd2 <HAL_GPIO_DeInit+0x9e>
 8009bc8:	2302      	movs	r3, #2
 8009bca:	e002      	b.n	8009bd2 <HAL_GPIO_DeInit+0x9e>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e000      	b.n	8009bd2 <HAL_GPIO_DeInit+0x9e>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	f002 0203 	and.w	r2, r2, #3
 8009bd8:	0092      	lsls	r2, r2, #2
 8009bda:	4093      	lsls	r3, r2
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d132      	bne.n	8009c48 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8009be2:	4b4d      	ldr	r3, [pc, #308]	; (8009d18 <HAL_GPIO_DeInit+0x1e4>)
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	43db      	mvns	r3, r3
 8009bea:	494b      	ldr	r1, [pc, #300]	; (8009d18 <HAL_GPIO_DeInit+0x1e4>)
 8009bec:	4013      	ands	r3, r2
 8009bee:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8009bf0:	4b49      	ldr	r3, [pc, #292]	; (8009d18 <HAL_GPIO_DeInit+0x1e4>)
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	43db      	mvns	r3, r3
 8009bf8:	4947      	ldr	r1, [pc, #284]	; (8009d18 <HAL_GPIO_DeInit+0x1e4>)
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8009bfe:	4b46      	ldr	r3, [pc, #280]	; (8009d18 <HAL_GPIO_DeInit+0x1e4>)
 8009c00:	68da      	ldr	r2, [r3, #12]
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	43db      	mvns	r3, r3
 8009c06:	4944      	ldr	r1, [pc, #272]	; (8009d18 <HAL_GPIO_DeInit+0x1e4>)
 8009c08:	4013      	ands	r3, r2
 8009c0a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8009c0c:	4b42      	ldr	r3, [pc, #264]	; (8009d18 <HAL_GPIO_DeInit+0x1e4>)
 8009c0e:	689a      	ldr	r2, [r3, #8]
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	43db      	mvns	r3, r3
 8009c14:	4940      	ldr	r1, [pc, #256]	; (8009d18 <HAL_GPIO_DeInit+0x1e4>)
 8009c16:	4013      	ands	r3, r2
 8009c18:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f003 0303 	and.w	r3, r3, #3
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	220f      	movs	r2, #15
 8009c24:	fa02 f303 	lsl.w	r3, r2, r3
 8009c28:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8009c2a:	4a34      	ldr	r2, [pc, #208]	; (8009cfc <HAL_GPIO_DeInit+0x1c8>)
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	089b      	lsrs	r3, r3, #2
 8009c30:	3302      	adds	r3, #2
 8009c32:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	43da      	mvns	r2, r3
 8009c3a:	4830      	ldr	r0, [pc, #192]	; (8009cfc <HAL_GPIO_DeInit+0x1c8>)
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	089b      	lsrs	r3, r3, #2
 8009c40:	400a      	ands	r2, r1
 8009c42:	3302      	adds	r3, #2
 8009c44:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	005b      	lsls	r3, r3, #1
 8009c50:	2103      	movs	r1, #3
 8009c52:	fa01 f303 	lsl.w	r3, r1, r3
 8009c56:	431a      	orrs	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	08da      	lsrs	r2, r3, #3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3208      	adds	r2, #8
 8009c64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	f003 0307 	and.w	r3, r3, #7
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	220f      	movs	r2, #15
 8009c72:	fa02 f303 	lsl.w	r3, r2, r3
 8009c76:	43db      	mvns	r3, r3
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	08d2      	lsrs	r2, r2, #3
 8009c7c:	4019      	ands	r1, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	3208      	adds	r2, #8
 8009c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	689a      	ldr	r2, [r3, #8]
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	005b      	lsls	r3, r3, #1
 8009c8e:	2103      	movs	r1, #3
 8009c90:	fa01 f303 	lsl.w	r3, r1, r3
 8009c94:	43db      	mvns	r3, r3
 8009c96:	401a      	ands	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685a      	ldr	r2, [r3, #4]
 8009ca0:	2101      	movs	r1, #1
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ca8:	43db      	mvns	r3, r3
 8009caa:	401a      	ands	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	68da      	ldr	r2, [r3, #12]
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	005b      	lsls	r3, r3, #1
 8009cb8:	2103      	movs	r1, #3
 8009cba:	fa01 f303 	lsl.w	r3, r1, r3
 8009cbe:	43db      	mvns	r3, r3
 8009cc0:	401a      	ands	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cca:	2101      	movs	r1, #1
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	fa01 f303 	lsl.w	r3, r1, r3
 8009cd2:	43db      	mvns	r3, r3
 8009cd4:	401a      	ands	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f47f af2b 	bne.w	8009b44 <HAL_GPIO_DeInit+0x10>
  }
}
 8009cee:	bf00      	nop
 8009cf0:	bf00      	nop
 8009cf2:	371c      	adds	r7, #28
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	40010000 	.word	0x40010000
 8009d00:	48000400 	.word	0x48000400
 8009d04:	48000800 	.word	0x48000800
 8009d08:	48000c00 	.word	0x48000c00
 8009d0c:	48001000 	.word	0x48001000
 8009d10:	48001400 	.word	0x48001400
 8009d14:	48001800 	.word	0x48001800
 8009d18:	40010400 	.word	0x40010400

08009d1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	460b      	mov	r3, r1
 8009d26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	691a      	ldr	r2, [r3, #16]
 8009d2c:	887b      	ldrh	r3, [r7, #2]
 8009d2e:	4013      	ands	r3, r2
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009d34:	2301      	movs	r3, #1
 8009d36:	73fb      	strb	r3, [r7, #15]
 8009d38:	e001      	b.n	8009d3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3714      	adds	r7, #20
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	807b      	strh	r3, [r7, #2]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009d5c:	787b      	ldrb	r3, [r7, #1]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009d62:	887a      	ldrh	r2, [r7, #2]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009d68:	e002      	b.n	8009d70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009d6a:	887a      	ldrh	r2, [r7, #2]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e081      	b.n	8009e92 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d106      	bne.n	8009da8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f8a8 	bl	8009ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2224      	movs	r2, #36	; 0x24
 8009dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f022 0201 	bic.w	r2, r2, #1
 8009dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009dcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	689a      	ldr	r2, [r3, #8]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ddc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d107      	bne.n	8009df6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	689a      	ldr	r2, [r3, #8]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009df2:	609a      	str	r2, [r3, #8]
 8009df4:	e006      	b.n	8009e04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	689a      	ldr	r2, [r3, #8]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009e02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d104      	bne.n	8009e16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	6812      	ldr	r2, [r2, #0]
 8009e20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68da      	ldr	r2, [r3, #12]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	691a      	ldr	r2, [r3, #16]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	699b      	ldr	r3, [r3, #24]
 8009e4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	430a      	orrs	r2, r1
 8009e52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	69d9      	ldr	r1, [r3, #28]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a1a      	ldr	r2, [r3, #32]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	430a      	orrs	r2, r1
 8009e62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f042 0201 	orr.w	r2, r2, #1
 8009e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2220      	movs	r2, #32
 8009e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b082      	sub	sp, #8
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e021      	b.n	8009ef0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2224      	movs	r2, #36	; 0x24
 8009eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f022 0201 	bic.w	r2, r2, #1
 8009ec2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f821 	bl	8009f0c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af02      	add	r7, sp, #8
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	4608      	mov	r0, r1
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	4603      	mov	r3, r0
 8009f30:	817b      	strh	r3, [r7, #10]
 8009f32:	460b      	mov	r3, r1
 8009f34:	813b      	strh	r3, [r7, #8]
 8009f36:	4613      	mov	r3, r2
 8009f38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b20      	cmp	r3, #32
 8009f44:	f040 80f9 	bne.w	800a13a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <HAL_I2C_Mem_Write+0x34>
 8009f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d105      	bne.n	8009f60 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e0ed      	b.n	800a13c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d101      	bne.n	8009f6e <HAL_I2C_Mem_Write+0x4e>
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	e0e6      	b.n	800a13c <HAL_I2C_Mem_Write+0x21c>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009f76:	f7fe ffb1 	bl	8008edc <HAL_GetTick>
 8009f7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	2319      	movs	r3, #25
 8009f82:	2201      	movs	r2, #1
 8009f84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 fadd 	bl	800a548 <I2C_WaitOnFlagUntilTimeout>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e0d1      	b.n	800a13c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2221      	movs	r2, #33	; 0x21
 8009f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2240      	movs	r2, #64	; 0x40
 8009fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6a3a      	ldr	r2, [r7, #32]
 8009fb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009fc0:	88f8      	ldrh	r0, [r7, #6]
 8009fc2:	893a      	ldrh	r2, [r7, #8]
 8009fc4:	8979      	ldrh	r1, [r7, #10]
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	9301      	str	r3, [sp, #4]
 8009fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	4603      	mov	r3, r0
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f000 f9ed 	bl	800a3b0 <I2C_RequestMemoryWrite>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d005      	beq.n	8009fe8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e0a9      	b.n	800a13c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	2bff      	cmp	r3, #255	; 0xff
 8009ff0:	d90e      	bls.n	800a010 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	22ff      	movs	r2, #255	; 0xff
 8009ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	8979      	ldrh	r1, [r7, #10]
 800a000:	2300      	movs	r3, #0
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 fc45 	bl	800a898 <I2C_TransferConfig>
 800a00e:	e00f      	b.n	800a030 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a014:	b29a      	uxth	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	8979      	ldrh	r1, [r7, #10]
 800a022:	2300      	movs	r3, #0
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f000 fc34 	bl	800a898 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f000 fac7 	bl	800a5c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e07b      	b.n	800a13c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a048:	781a      	ldrb	r2, [r3, #0]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a054:	1c5a      	adds	r2, r3, #1
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a05e:	b29b      	uxth	r3, r3
 800a060:	3b01      	subs	r3, #1
 800a062:	b29a      	uxth	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a06c:	3b01      	subs	r3, #1
 800a06e:	b29a      	uxth	r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a078:	b29b      	uxth	r3, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d034      	beq.n	800a0e8 <HAL_I2C_Mem_Write+0x1c8>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a082:	2b00      	cmp	r3, #0
 800a084:	d130      	bne.n	800a0e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08c:	2200      	movs	r2, #0
 800a08e:	2180      	movs	r1, #128	; 0x80
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 fa59 	bl	800a548 <I2C_WaitOnFlagUntilTimeout>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	e04d      	b.n	800a13c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	2bff      	cmp	r3, #255	; 0xff
 800a0a8:	d90e      	bls.n	800a0c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	22ff      	movs	r2, #255	; 0xff
 800a0ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0b4:	b2da      	uxtb	r2, r3
 800a0b6:	8979      	ldrh	r1, [r7, #10]
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f000 fbe9 	bl	800a898 <I2C_TransferConfig>
 800a0c6:	e00f      	b.n	800a0e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	8979      	ldrh	r1, [r7, #10]
 800a0da:	2300      	movs	r3, #0
 800a0dc:	9300      	str	r3, [sp, #0]
 800a0de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f000 fbd8 	bl	800a898 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d19e      	bne.n	800a030 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f000 faa6 	bl	800a648 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	e01a      	b.n	800a13c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2220      	movs	r2, #32
 800a10c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	6859      	ldr	r1, [r3, #4]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	4b0a      	ldr	r3, [pc, #40]	; (800a144 <HAL_I2C_Mem_Write+0x224>)
 800a11a:	400b      	ands	r3, r1
 800a11c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2220      	movs	r2, #32
 800a122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a136:	2300      	movs	r3, #0
 800a138:	e000      	b.n	800a13c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a13a:	2302      	movs	r3, #2
  }
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3718      	adds	r7, #24
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	fe00e800 	.word	0xfe00e800

0800a148 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b088      	sub	sp, #32
 800a14c:	af02      	add	r7, sp, #8
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	4608      	mov	r0, r1
 800a152:	4611      	mov	r1, r2
 800a154:	461a      	mov	r2, r3
 800a156:	4603      	mov	r3, r0
 800a158:	817b      	strh	r3, [r7, #10]
 800a15a:	460b      	mov	r3, r1
 800a15c:	813b      	strh	r3, [r7, #8]
 800a15e:	4613      	mov	r3, r2
 800a160:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	2b20      	cmp	r3, #32
 800a16c:	f040 80fd 	bne.w	800a36a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a170:	6a3b      	ldr	r3, [r7, #32]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d002      	beq.n	800a17c <HAL_I2C_Mem_Read+0x34>
 800a176:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d105      	bne.n	800a188 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a182:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	e0f1      	b.n	800a36c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d101      	bne.n	800a196 <HAL_I2C_Mem_Read+0x4e>
 800a192:	2302      	movs	r3, #2
 800a194:	e0ea      	b.n	800a36c <HAL_I2C_Mem_Read+0x224>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a19e:	f7fe fe9d 	bl	8008edc <HAL_GetTick>
 800a1a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	2319      	movs	r3, #25
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f000 f9c9 	bl	800a548 <I2C_WaitOnFlagUntilTimeout>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d001      	beq.n	800a1c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e0d5      	b.n	800a36c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2222      	movs	r2, #34	; 0x22
 800a1c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2240      	movs	r2, #64	; 0x40
 800a1cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6a3a      	ldr	r2, [r7, #32]
 800a1da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a1e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a1e8:	88f8      	ldrh	r0, [r7, #6]
 800a1ea:	893a      	ldrh	r2, [r7, #8]
 800a1ec:	8979      	ldrh	r1, [r7, #10]
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 f92d 	bl	800a458 <I2C_RequestMemoryRead>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d005      	beq.n	800a210 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e0ad      	b.n	800a36c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a214:	b29b      	uxth	r3, r3
 800a216:	2bff      	cmp	r3, #255	; 0xff
 800a218:	d90e      	bls.n	800a238 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	22ff      	movs	r2, #255	; 0xff
 800a21e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a224:	b2da      	uxtb	r2, r3
 800a226:	8979      	ldrh	r1, [r7, #10]
 800a228:	4b52      	ldr	r3, [pc, #328]	; (800a374 <HAL_I2C_Mem_Read+0x22c>)
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f000 fb31 	bl	800a898 <I2C_TransferConfig>
 800a236:	e00f      	b.n	800a258 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a246:	b2da      	uxtb	r2, r3
 800a248:	8979      	ldrh	r1, [r7, #10]
 800a24a:	4b4a      	ldr	r3, [pc, #296]	; (800a374 <HAL_I2C_Mem_Read+0x22c>)
 800a24c:	9300      	str	r3, [sp, #0]
 800a24e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f000 fb20 	bl	800a898 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25e:	2200      	movs	r2, #0
 800a260:	2104      	movs	r1, #4
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f000 f970 	bl	800a548 <I2C_WaitOnFlagUntilTimeout>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e07c      	b.n	800a36c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27c:	b2d2      	uxtb	r2, r2
 800a27e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a284:	1c5a      	adds	r2, r3, #1
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a28e:	3b01      	subs	r3, #1
 800a290:	b29a      	uxth	r2, r3
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	3b01      	subs	r3, #1
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d034      	beq.n	800a318 <HAL_I2C_Mem_Read+0x1d0>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d130      	bne.n	800a318 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2bc:	2200      	movs	r2, #0
 800a2be:	2180      	movs	r1, #128	; 0x80
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f000 f941 	bl	800a548 <I2C_WaitOnFlagUntilTimeout>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d001      	beq.n	800a2d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e04d      	b.n	800a36c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	2bff      	cmp	r3, #255	; 0xff
 800a2d8:	d90e      	bls.n	800a2f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	22ff      	movs	r2, #255	; 0xff
 800a2de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	8979      	ldrh	r1, [r7, #10]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f000 fad1 	bl	800a898 <I2C_TransferConfig>
 800a2f6:	e00f      	b.n	800a318 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a306:	b2da      	uxtb	r2, r3
 800a308:	8979      	ldrh	r1, [r7, #10]
 800a30a:	2300      	movs	r3, #0
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 fac0 	bl	800a898 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d19a      	bne.n	800a258 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f000 f98e 	bl	800a648 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d001      	beq.n	800a336 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e01a      	b.n	800a36c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2220      	movs	r2, #32
 800a33c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6859      	ldr	r1, [r3, #4]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	4b0b      	ldr	r3, [pc, #44]	; (800a378 <HAL_I2C_Mem_Read+0x230>)
 800a34a:	400b      	ands	r3, r1
 800a34c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2220      	movs	r2, #32
 800a352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a366:	2300      	movs	r3, #0
 800a368:	e000      	b.n	800a36c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a36a:	2302      	movs	r3, #2
  }
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3718      	adds	r7, #24
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	80002400 	.word	0x80002400
 800a378:	fe00e800 	.word	0xfe00e800

0800a37c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a38a:	b2db      	uxtb	r3, r3
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af02      	add	r7, sp, #8
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	4608      	mov	r0, r1
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	461a      	mov	r2, r3
 800a3be:	4603      	mov	r3, r0
 800a3c0:	817b      	strh	r3, [r7, #10]
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	813b      	strh	r3, [r7, #8]
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a3ca:	88fb      	ldrh	r3, [r7, #6]
 800a3cc:	b2da      	uxtb	r2, r3
 800a3ce:	8979      	ldrh	r1, [r7, #10]
 800a3d0:	4b20      	ldr	r3, [pc, #128]	; (800a454 <I2C_RequestMemoryWrite+0xa4>)
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f000 fa5d 	bl	800a898 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3de:	69fa      	ldr	r2, [r7, #28]
 800a3e0:	69b9      	ldr	r1, [r7, #24]
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 f8f0 	bl	800a5c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e02c      	b.n	800a44c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a3f2:	88fb      	ldrh	r3, [r7, #6]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d105      	bne.n	800a404 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a3f8:	893b      	ldrh	r3, [r7, #8]
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	629a      	str	r2, [r3, #40]	; 0x28
 800a402:	e015      	b.n	800a430 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a404:	893b      	ldrh	r3, [r7, #8]
 800a406:	0a1b      	lsrs	r3, r3, #8
 800a408:	b29b      	uxth	r3, r3
 800a40a:	b2da      	uxtb	r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a412:	69fa      	ldr	r2, [r7, #28]
 800a414:	69b9      	ldr	r1, [r7, #24]
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f000 f8d6 	bl	800a5c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	e012      	b.n	800a44c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a426:	893b      	ldrh	r3, [r7, #8]
 800a428:	b2da      	uxtb	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	2200      	movs	r2, #0
 800a438:	2180      	movs	r1, #128	; 0x80
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f000 f884 	bl	800a548 <I2C_WaitOnFlagUntilTimeout>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e000      	b.n	800a44c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	80002000 	.word	0x80002000

0800a458 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af02      	add	r7, sp, #8
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	4608      	mov	r0, r1
 800a462:	4611      	mov	r1, r2
 800a464:	461a      	mov	r2, r3
 800a466:	4603      	mov	r3, r0
 800a468:	817b      	strh	r3, [r7, #10]
 800a46a:	460b      	mov	r3, r1
 800a46c:	813b      	strh	r3, [r7, #8]
 800a46e:	4613      	mov	r3, r2
 800a470:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a472:	88fb      	ldrh	r3, [r7, #6]
 800a474:	b2da      	uxtb	r2, r3
 800a476:	8979      	ldrh	r1, [r7, #10]
 800a478:	4b20      	ldr	r3, [pc, #128]	; (800a4fc <I2C_RequestMemoryRead+0xa4>)
 800a47a:	9300      	str	r3, [sp, #0]
 800a47c:	2300      	movs	r3, #0
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 fa0a 	bl	800a898 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a484:	69fa      	ldr	r2, [r7, #28]
 800a486:	69b9      	ldr	r1, [r7, #24]
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f000 f89d 	bl	800a5c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d001      	beq.n	800a498 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e02c      	b.n	800a4f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a498:	88fb      	ldrh	r3, [r7, #6]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d105      	bne.n	800a4aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a49e:	893b      	ldrh	r3, [r7, #8]
 800a4a0:	b2da      	uxtb	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	629a      	str	r2, [r3, #40]	; 0x28
 800a4a8:	e015      	b.n	800a4d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a4aa:	893b      	ldrh	r3, [r7, #8]
 800a4ac:	0a1b      	lsrs	r3, r3, #8
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	b2da      	uxtb	r2, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4b8:	69fa      	ldr	r2, [r7, #28]
 800a4ba:	69b9      	ldr	r1, [r7, #24]
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 f883 	bl	800a5c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d001      	beq.n	800a4cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e012      	b.n	800a4f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a4cc:	893b      	ldrh	r3, [r7, #8]
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	2140      	movs	r1, #64	; 0x40
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f000 f831 	bl	800a548 <I2C_WaitOnFlagUntilTimeout>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d001      	beq.n	800a4f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e000      	b.n	800a4f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	80002000 	.word	0x80002000

0800a500 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	f003 0302 	and.w	r3, r3, #2
 800a512:	2b02      	cmp	r3, #2
 800a514:	d103      	bne.n	800a51e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2200      	movs	r2, #0
 800a51c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	699b      	ldr	r3, [r3, #24]
 800a524:	f003 0301 	and.w	r3, r3, #1
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d007      	beq.n	800a53c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	699a      	ldr	r2, [r3, #24]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f042 0201 	orr.w	r2, r2, #1
 800a53a:	619a      	str	r2, [r3, #24]
  }
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	603b      	str	r3, [r7, #0]
 800a554:	4613      	mov	r3, r2
 800a556:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a558:	e022      	b.n	800a5a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a560:	d01e      	beq.n	800a5a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a562:	f7fe fcbb 	bl	8008edc <HAL_GetTick>
 800a566:	4602      	mov	r2, r0
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	1ad3      	subs	r3, r2, r3
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d302      	bcc.n	800a578 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d113      	bne.n	800a5a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a57c:	f043 0220 	orr.w	r2, r3, #32
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2220      	movs	r2, #32
 800a588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2200      	movs	r2, #0
 800a598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	e00f      	b.n	800a5c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	699a      	ldr	r2, [r3, #24]
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	bf0c      	ite	eq
 800a5b0:	2301      	moveq	r3, #1
 800a5b2:	2300      	movne	r3, #0
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	79fb      	ldrb	r3, [r7, #7]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d0cd      	beq.n	800a55a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a5d4:	e02c      	b.n	800a630 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	68b9      	ldr	r1, [r7, #8]
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f000 f870 	bl	800a6c0 <I2C_IsErrorOccurred>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e02a      	b.n	800a640 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f0:	d01e      	beq.n	800a630 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5f2:	f7fe fc73 	bl	8008edc <HAL_GetTick>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d302      	bcc.n	800a608 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d113      	bne.n	800a630 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a60c:	f043 0220 	orr.w	r2, r3, #32
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2220      	movs	r2, #32
 800a618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e007      	b.n	800a640 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	f003 0302 	and.w	r3, r3, #2
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d1cb      	bne.n	800a5d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a654:	e028      	b.n	800a6a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	68b9      	ldr	r1, [r7, #8]
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f000 f830 	bl	800a6c0 <I2C_IsErrorOccurred>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a666:	2301      	movs	r3, #1
 800a668:	e026      	b.n	800a6b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a66a:	f7fe fc37 	bl	8008edc <HAL_GetTick>
 800a66e:	4602      	mov	r2, r0
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	429a      	cmp	r2, r3
 800a678:	d302      	bcc.n	800a680 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d113      	bne.n	800a6a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a684:	f043 0220 	orr.w	r2, r3, #32
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2220      	movs	r2, #32
 800a690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e007      	b.n	800a6b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	699b      	ldr	r3, [r3, #24]
 800a6ae:	f003 0320 	and.w	r3, r3, #32
 800a6b2:	2b20      	cmp	r3, #32
 800a6b4:	d1cf      	bne.n	800a656 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b08a      	sub	sp, #40	; 0x28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	f003 0310 	and.w	r3, r3, #16
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d075      	beq.n	800a7d8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2210      	movs	r2, #16
 800a6f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a6f4:	e056      	b.n	800a7a4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fc:	d052      	beq.n	800a7a4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a6fe:	f7fe fbed 	bl	8008edc <HAL_GetTick>
 800a702:	4602      	mov	r2, r0
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d302      	bcc.n	800a714 <I2C_IsErrorOccurred+0x54>
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d147      	bne.n	800a7a4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a71e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a726:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a736:	d12e      	bne.n	800a796 <I2C_IsErrorOccurred+0xd6>
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a73e:	d02a      	beq.n	800a796 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800a740:	7cfb      	ldrb	r3, [r7, #19]
 800a742:	2b20      	cmp	r3, #32
 800a744:	d027      	beq.n	800a796 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	685a      	ldr	r2, [r3, #4]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a754:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a756:	f7fe fbc1 	bl	8008edc <HAL_GetTick>
 800a75a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a75c:	e01b      	b.n	800a796 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a75e:	f7fe fbbd 	bl	8008edc <HAL_GetTick>
 800a762:	4602      	mov	r2, r0
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	2b19      	cmp	r3, #25
 800a76a:	d914      	bls.n	800a796 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a770:	f043 0220 	orr.w	r2, r3, #32
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2220      	movs	r2, #32
 800a77c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2200      	movs	r2, #0
 800a784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	f003 0320 	and.w	r3, r3, #32
 800a7a0:	2b20      	cmp	r3, #32
 800a7a2:	d1dc      	bne.n	800a75e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	699b      	ldr	r3, [r3, #24]
 800a7aa:	f003 0320 	and.w	r3, r3, #32
 800a7ae:	2b20      	cmp	r3, #32
 800a7b0:	d003      	beq.n	800a7ba <I2C_IsErrorOccurred+0xfa>
 800a7b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d09d      	beq.n	800a6f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a7ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d103      	bne.n	800a7ca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a7ca:	6a3b      	ldr	r3, [r7, #32]
 800a7cc:	f043 0304 	orr.w	r3, r3, #4
 800a7d0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00b      	beq.n	800a802 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	f043 0301 	orr.w	r3, r3, #1
 800a7f0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00b      	beq.n	800a824 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a80c:	6a3b      	ldr	r3, [r7, #32]
 800a80e:	f043 0308 	orr.w	r3, r3, #8
 800a812:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a81c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00b      	beq.n	800a846 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a82e:	6a3b      	ldr	r3, [r7, #32]
 800a830:	f043 0302 	orr.w	r3, r3, #2
 800a834:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a83e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d01c      	beq.n	800a888 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f7ff fe56 	bl	800a500 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6859      	ldr	r1, [r3, #4]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	4b0d      	ldr	r3, [pc, #52]	; (800a894 <I2C_IsErrorOccurred+0x1d4>)
 800a860:	400b      	ands	r3, r1
 800a862:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a868:	6a3b      	ldr	r3, [r7, #32]
 800a86a:	431a      	orrs	r2, r3
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2220      	movs	r2, #32
 800a874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3728      	adds	r7, #40	; 0x28
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	fe00e800 	.word	0xfe00e800

0800a898 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a898:	b480      	push	{r7}
 800a89a:	b087      	sub	sp, #28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	607b      	str	r3, [r7, #4]
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	817b      	strh	r3, [r7, #10]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a8aa:	897b      	ldrh	r3, [r7, #10]
 800a8ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a8b0:	7a7b      	ldrb	r3, [r7, #9]
 800a8b2:	041b      	lsls	r3, r3, #16
 800a8b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a8b8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a8be:	6a3b      	ldr	r3, [r7, #32]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8c6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	685a      	ldr	r2, [r3, #4]
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	0d5b      	lsrs	r3, r3, #21
 800a8d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a8d6:	4b08      	ldr	r3, [pc, #32]	; (800a8f8 <I2C_TransferConfig+0x60>)
 800a8d8:	430b      	orrs	r3, r1
 800a8da:	43db      	mvns	r3, r3
 800a8dc:	ea02 0103 	and.w	r1, r2, r3
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a8ea:	bf00      	nop
 800a8ec:	371c      	adds	r7, #28
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	03ff63ff 	.word	0x03ff63ff

0800a8fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b20      	cmp	r3, #32
 800a910:	d138      	bne.n	800a984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d101      	bne.n	800a920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a91c:	2302      	movs	r3, #2
 800a91e:	e032      	b.n	800a986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2224      	movs	r2, #36	; 0x24
 800a92c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f022 0201 	bic.w	r2, r2, #1
 800a93e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a94e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	6819      	ldr	r1, [r3, #0]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	430a      	orrs	r2, r1
 800a95e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f042 0201 	orr.w	r2, r2, #1
 800a96e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2220      	movs	r2, #32
 800a974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	e000      	b.n	800a986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a984:	2302      	movs	r3, #2
  }
}
 800a986:	4618      	mov	r0, r3
 800a988:	370c      	adds	r7, #12
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a992:	b480      	push	{r7}
 800a994:	b085      	sub	sp, #20
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	2b20      	cmp	r3, #32
 800a9a6:	d139      	bne.n	800aa1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d101      	bne.n	800a9b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a9b2:	2302      	movs	r3, #2
 800a9b4:	e033      	b.n	800aa1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2224      	movs	r2, #36	; 0x24
 800a9c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f022 0201 	bic.w	r2, r2, #1
 800a9d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a9e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	021b      	lsls	r3, r3, #8
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f042 0201 	orr.w	r2, r2, #1
 800aa06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2220      	movs	r2, #32
 800aa0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	e000      	b.n	800aa1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800aa1c:	2302      	movs	r3, #2
  }
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3714      	adds	r7, #20
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
	...

0800aa2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800aa30:	4b04      	ldr	r3, [pc, #16]	; (800aa44 <HAL_PWREx_GetVoltageRange+0x18>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	40007000 	.word	0x40007000

0800aa48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa56:	d130      	bne.n	800aaba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800aa58:	4b23      	ldr	r3, [pc, #140]	; (800aae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aa60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa64:	d038      	beq.n	800aad8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800aa66:	4b20      	ldr	r3, [pc, #128]	; (800aae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aa6e:	4a1e      	ldr	r2, [pc, #120]	; (800aae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800aa70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800aa76:	4b1d      	ldr	r3, [pc, #116]	; (800aaec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2232      	movs	r2, #50	; 0x32
 800aa7c:	fb02 f303 	mul.w	r3, r2, r3
 800aa80:	4a1b      	ldr	r2, [pc, #108]	; (800aaf0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800aa82:	fba2 2303 	umull	r2, r3, r2, r3
 800aa86:	0c9b      	lsrs	r3, r3, #18
 800aa88:	3301      	adds	r3, #1
 800aa8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aa8c:	e002      	b.n	800aa94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	3b01      	subs	r3, #1
 800aa92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aa94:	4b14      	ldr	r3, [pc, #80]	; (800aae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800aa96:	695b      	ldr	r3, [r3, #20]
 800aa98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaa0:	d102      	bne.n	800aaa8 <HAL_PWREx_ControlVoltageScaling+0x60>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1f2      	bne.n	800aa8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800aaa8:	4b0f      	ldr	r3, [pc, #60]	; (800aae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800aaaa:	695b      	ldr	r3, [r3, #20]
 800aaac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aab4:	d110      	bne.n	800aad8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800aab6:	2303      	movs	r3, #3
 800aab8:	e00f      	b.n	800aada <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800aaba:	4b0b      	ldr	r3, [pc, #44]	; (800aae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aac6:	d007      	beq.n	800aad8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800aac8:	4b07      	ldr	r3, [pc, #28]	; (800aae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aad0:	4a05      	ldr	r2, [pc, #20]	; (800aae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800aad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aad6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3714      	adds	r7, #20
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	40007000 	.word	0x40007000
 800aaec:	20000180 	.word	0x20000180
 800aaf0:	431bde83 	.word	0x431bde83

0800aaf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b088      	sub	sp, #32
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d101      	bne.n	800ab06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e3d4      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab06:	4ba1      	ldr	r3, [pc, #644]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	f003 030c 	and.w	r3, r3, #12
 800ab0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ab10:	4b9e      	ldr	r3, [pc, #632]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	f003 0303 	and.w	r3, r3, #3
 800ab18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 0310 	and.w	r3, r3, #16
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	f000 80e4 	beq.w	800acf0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d007      	beq.n	800ab3e <HAL_RCC_OscConfig+0x4a>
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	2b0c      	cmp	r3, #12
 800ab32:	f040 808b 	bne.w	800ac4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	f040 8087 	bne.w	800ac4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ab3e:	4b93      	ldr	r3, [pc, #588]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 0302 	and.w	r3, r3, #2
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d005      	beq.n	800ab56 <HAL_RCC_OscConfig+0x62>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d101      	bne.n	800ab56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e3ac      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a1a      	ldr	r2, [r3, #32]
 800ab5a:	4b8c      	ldr	r3, [pc, #560]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f003 0308 	and.w	r3, r3, #8
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d004      	beq.n	800ab70 <HAL_RCC_OscConfig+0x7c>
 800ab66:	4b89      	ldr	r3, [pc, #548]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab6e:	e005      	b.n	800ab7c <HAL_RCC_OscConfig+0x88>
 800ab70:	4b86      	ldr	r3, [pc, #536]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ab72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab76:	091b      	lsrs	r3, r3, #4
 800ab78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d223      	bcs.n	800abc8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a1b      	ldr	r3, [r3, #32]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f000 fd41 	bl	800b60c <RCC_SetFlashLatencyFromMSIRange>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d001      	beq.n	800ab94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e38d      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ab94:	4b7d      	ldr	r3, [pc, #500]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a7c      	ldr	r2, [pc, #496]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ab9a:	f043 0308 	orr.w	r3, r3, #8
 800ab9e:	6013      	str	r3, [r2, #0]
 800aba0:	4b7a      	ldr	r3, [pc, #488]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a1b      	ldr	r3, [r3, #32]
 800abac:	4977      	ldr	r1, [pc, #476]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800abae:	4313      	orrs	r3, r2
 800abb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800abb2:	4b76      	ldr	r3, [pc, #472]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	021b      	lsls	r3, r3, #8
 800abc0:	4972      	ldr	r1, [pc, #456]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800abc2:	4313      	orrs	r3, r2
 800abc4:	604b      	str	r3, [r1, #4]
 800abc6:	e025      	b.n	800ac14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800abc8:	4b70      	ldr	r3, [pc, #448]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a6f      	ldr	r2, [pc, #444]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800abce:	f043 0308 	orr.w	r3, r3, #8
 800abd2:	6013      	str	r3, [r2, #0]
 800abd4:	4b6d      	ldr	r3, [pc, #436]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a1b      	ldr	r3, [r3, #32]
 800abe0:	496a      	ldr	r1, [pc, #424]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800abe2:	4313      	orrs	r3, r2
 800abe4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800abe6:	4b69      	ldr	r3, [pc, #420]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	69db      	ldr	r3, [r3, #28]
 800abf2:	021b      	lsls	r3, r3, #8
 800abf4:	4965      	ldr	r1, [pc, #404]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800abf6:	4313      	orrs	r3, r2
 800abf8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d109      	bne.n	800ac14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a1b      	ldr	r3, [r3, #32]
 800ac04:	4618      	mov	r0, r3
 800ac06:	f000 fd01 	bl	800b60c <RCC_SetFlashLatencyFromMSIRange>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d001      	beq.n	800ac14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e34d      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ac14:	f000 fc36 	bl	800b484 <HAL_RCC_GetSysClockFreq>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	4b5c      	ldr	r3, [pc, #368]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	091b      	lsrs	r3, r3, #4
 800ac20:	f003 030f 	and.w	r3, r3, #15
 800ac24:	495a      	ldr	r1, [pc, #360]	; (800ad90 <HAL_RCC_OscConfig+0x29c>)
 800ac26:	5ccb      	ldrb	r3, [r1, r3]
 800ac28:	f003 031f 	and.w	r3, r3, #31
 800ac2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac30:	4a58      	ldr	r2, [pc, #352]	; (800ad94 <HAL_RCC_OscConfig+0x2a0>)
 800ac32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ac34:	4b58      	ldr	r3, [pc, #352]	; (800ad98 <HAL_RCC_OscConfig+0x2a4>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7fe f8ff 	bl	8008e3c <HAL_InitTick>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800ac42:	7bfb      	ldrb	r3, [r7, #15]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d052      	beq.n	800acee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
 800ac4a:	e331      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	699b      	ldr	r3, [r3, #24]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d032      	beq.n	800acba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ac54:	4b4d      	ldr	r3, [pc, #308]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a4c      	ldr	r2, [pc, #304]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ac5a:	f043 0301 	orr.w	r3, r3, #1
 800ac5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ac60:	f7fe f93c 	bl	8008edc <HAL_GetTick>
 800ac64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ac66:	e008      	b.n	800ac7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ac68:	f7fe f938 	bl	8008edc <HAL_GetTick>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d901      	bls.n	800ac7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800ac76:	2303      	movs	r3, #3
 800ac78:	e31a      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ac7a:	4b44      	ldr	r3, [pc, #272]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f003 0302 	and.w	r3, r3, #2
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d0f0      	beq.n	800ac68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ac86:	4b41      	ldr	r3, [pc, #260]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a40      	ldr	r2, [pc, #256]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ac8c:	f043 0308 	orr.w	r3, r3, #8
 800ac90:	6013      	str	r3, [r2, #0]
 800ac92:	4b3e      	ldr	r3, [pc, #248]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a1b      	ldr	r3, [r3, #32]
 800ac9e:	493b      	ldr	r1, [pc, #236]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800aca0:	4313      	orrs	r3, r2
 800aca2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aca4:	4b39      	ldr	r3, [pc, #228]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	69db      	ldr	r3, [r3, #28]
 800acb0:	021b      	lsls	r3, r3, #8
 800acb2:	4936      	ldr	r1, [pc, #216]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800acb4:	4313      	orrs	r3, r2
 800acb6:	604b      	str	r3, [r1, #4]
 800acb8:	e01a      	b.n	800acf0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800acba:	4b34      	ldr	r3, [pc, #208]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a33      	ldr	r2, [pc, #204]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800acc0:	f023 0301 	bic.w	r3, r3, #1
 800acc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800acc6:	f7fe f909 	bl	8008edc <HAL_GetTick>
 800acca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800accc:	e008      	b.n	800ace0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800acce:	f7fe f905 	bl	8008edc <HAL_GetTick>
 800acd2:	4602      	mov	r2, r0
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d901      	bls.n	800ace0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800acdc:	2303      	movs	r3, #3
 800acde:	e2e7      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ace0:	4b2a      	ldr	r3, [pc, #168]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 0302 	and.w	r3, r3, #2
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d1f0      	bne.n	800acce <HAL_RCC_OscConfig+0x1da>
 800acec:	e000      	b.n	800acf0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800acee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d074      	beq.n	800ade6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	2b08      	cmp	r3, #8
 800ad00:	d005      	beq.n	800ad0e <HAL_RCC_OscConfig+0x21a>
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	2b0c      	cmp	r3, #12
 800ad06:	d10e      	bne.n	800ad26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	2b03      	cmp	r3, #3
 800ad0c:	d10b      	bne.n	800ad26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad0e:	4b1f      	ldr	r3, [pc, #124]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d064      	beq.n	800ade4 <HAL_RCC_OscConfig+0x2f0>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d160      	bne.n	800ade4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e2c4      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad2e:	d106      	bne.n	800ad3e <HAL_RCC_OscConfig+0x24a>
 800ad30:	4b16      	ldr	r3, [pc, #88]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a15      	ldr	r2, [pc, #84]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ad36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad3a:	6013      	str	r3, [r2, #0]
 800ad3c:	e01d      	b.n	800ad7a <HAL_RCC_OscConfig+0x286>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad46:	d10c      	bne.n	800ad62 <HAL_RCC_OscConfig+0x26e>
 800ad48:	4b10      	ldr	r3, [pc, #64]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a0f      	ldr	r2, [pc, #60]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ad4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad52:	6013      	str	r3, [r2, #0]
 800ad54:	4b0d      	ldr	r3, [pc, #52]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a0c      	ldr	r2, [pc, #48]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ad5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad5e:	6013      	str	r3, [r2, #0]
 800ad60:	e00b      	b.n	800ad7a <HAL_RCC_OscConfig+0x286>
 800ad62:	4b0a      	ldr	r3, [pc, #40]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a09      	ldr	r2, [pc, #36]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ad68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad6c:	6013      	str	r3, [r2, #0]
 800ad6e:	4b07      	ldr	r3, [pc, #28]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a06      	ldr	r2, [pc, #24]	; (800ad8c <HAL_RCC_OscConfig+0x298>)
 800ad74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad78:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d01c      	beq.n	800adbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad82:	f7fe f8ab 	bl	8008edc <HAL_GetTick>
 800ad86:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ad88:	e011      	b.n	800adae <HAL_RCC_OscConfig+0x2ba>
 800ad8a:	bf00      	nop
 800ad8c:	40021000 	.word	0x40021000
 800ad90:	0801ac5c 	.word	0x0801ac5c
 800ad94:	20000180 	.word	0x20000180
 800ad98:	20000184 	.word	0x20000184
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad9c:	f7fe f89e 	bl	8008edc <HAL_GetTick>
 800ada0:	4602      	mov	r2, r0
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	2b64      	cmp	r3, #100	; 0x64
 800ada8:	d901      	bls.n	800adae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800adaa:	2303      	movs	r3, #3
 800adac:	e280      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800adae:	4baf      	ldr	r3, [pc, #700]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d0f0      	beq.n	800ad9c <HAL_RCC_OscConfig+0x2a8>
 800adba:	e014      	b.n	800ade6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adbc:	f7fe f88e 	bl	8008edc <HAL_GetTick>
 800adc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800adc2:	e008      	b.n	800add6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800adc4:	f7fe f88a 	bl	8008edc <HAL_GetTick>
 800adc8:	4602      	mov	r2, r0
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	2b64      	cmp	r3, #100	; 0x64
 800add0:	d901      	bls.n	800add6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800add2:	2303      	movs	r3, #3
 800add4:	e26c      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800add6:	4ba5      	ldr	r3, [pc, #660]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1f0      	bne.n	800adc4 <HAL_RCC_OscConfig+0x2d0>
 800ade2:	e000      	b.n	800ade6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ade4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 0302 	and.w	r3, r3, #2
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d060      	beq.n	800aeb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	2b04      	cmp	r3, #4
 800adf6:	d005      	beq.n	800ae04 <HAL_RCC_OscConfig+0x310>
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	2b0c      	cmp	r3, #12
 800adfc:	d119      	bne.n	800ae32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d116      	bne.n	800ae32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ae04:	4b99      	ldr	r3, [pc, #612]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d005      	beq.n	800ae1c <HAL_RCC_OscConfig+0x328>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d101      	bne.n	800ae1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e249      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae1c:	4b93      	ldr	r3, [pc, #588]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	061b      	lsls	r3, r3, #24
 800ae2a:	4990      	ldr	r1, [pc, #576]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ae30:	e040      	b.n	800aeb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d023      	beq.n	800ae82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ae3a:	4b8c      	ldr	r3, [pc, #560]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a8b      	ldr	r2, [pc, #556]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800ae40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae46:	f7fe f849 	bl	8008edc <HAL_GetTick>
 800ae4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ae4c:	e008      	b.n	800ae60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae4e:	f7fe f845 	bl	8008edc <HAL_GetTick>
 800ae52:	4602      	mov	r2, r0
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	1ad3      	subs	r3, r2, r3
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d901      	bls.n	800ae60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	e227      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ae60:	4b82      	ldr	r3, [pc, #520]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d0f0      	beq.n	800ae4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae6c:	4b7f      	ldr	r3, [pc, #508]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	061b      	lsls	r3, r3, #24
 800ae7a:	497c      	ldr	r1, [pc, #496]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	604b      	str	r3, [r1, #4]
 800ae80:	e018      	b.n	800aeb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae82:	4b7a      	ldr	r3, [pc, #488]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a79      	ldr	r2, [pc, #484]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800ae88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae8e:	f7fe f825 	bl	8008edc <HAL_GetTick>
 800ae92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ae94:	e008      	b.n	800aea8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae96:	f7fe f821 	bl	8008edc <HAL_GetTick>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d901      	bls.n	800aea8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800aea4:	2303      	movs	r3, #3
 800aea6:	e203      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800aea8:	4b70      	ldr	r3, [pc, #448]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1f0      	bne.n	800ae96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 0308 	and.w	r3, r3, #8
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d03c      	beq.n	800af3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	695b      	ldr	r3, [r3, #20]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d01c      	beq.n	800af02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aec8:	4b68      	ldr	r3, [pc, #416]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800aeca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aece:	4a67      	ldr	r2, [pc, #412]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800aed0:	f043 0301 	orr.w	r3, r3, #1
 800aed4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aed8:	f7fe f800 	bl	8008edc <HAL_GetTick>
 800aedc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800aede:	e008      	b.n	800aef2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aee0:	f7fd fffc 	bl	8008edc <HAL_GetTick>
 800aee4:	4602      	mov	r2, r0
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d901      	bls.n	800aef2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800aeee:	2303      	movs	r3, #3
 800aef0:	e1de      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800aef2:	4b5e      	ldr	r3, [pc, #376]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800aef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aef8:	f003 0302 	and.w	r3, r3, #2
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d0ef      	beq.n	800aee0 <HAL_RCC_OscConfig+0x3ec>
 800af00:	e01b      	b.n	800af3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af02:	4b5a      	ldr	r3, [pc, #360]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800af04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af08:	4a58      	ldr	r2, [pc, #352]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800af0a:	f023 0301 	bic.w	r3, r3, #1
 800af0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af12:	f7fd ffe3 	bl	8008edc <HAL_GetTick>
 800af16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800af18:	e008      	b.n	800af2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af1a:	f7fd ffdf 	bl	8008edc <HAL_GetTick>
 800af1e:	4602      	mov	r2, r0
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	2b02      	cmp	r3, #2
 800af26:	d901      	bls.n	800af2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800af28:	2303      	movs	r3, #3
 800af2a:	e1c1      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800af2c:	4b4f      	ldr	r3, [pc, #316]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800af2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1ef      	bne.n	800af1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 0304 	and.w	r3, r3, #4
 800af42:	2b00      	cmp	r3, #0
 800af44:	f000 80a6 	beq.w	800b094 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800af48:	2300      	movs	r3, #0
 800af4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800af4c:	4b47      	ldr	r3, [pc, #284]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800af4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10d      	bne.n	800af74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af58:	4b44      	ldr	r3, [pc, #272]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800af5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af5c:	4a43      	ldr	r2, [pc, #268]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800af5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af62:	6593      	str	r3, [r2, #88]	; 0x58
 800af64:	4b41      	ldr	r3, [pc, #260]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800af66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af6c:	60bb      	str	r3, [r7, #8]
 800af6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af70:	2301      	movs	r3, #1
 800af72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af74:	4b3e      	ldr	r3, [pc, #248]	; (800b070 <HAL_RCC_OscConfig+0x57c>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d118      	bne.n	800afb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af80:	4b3b      	ldr	r3, [pc, #236]	; (800b070 <HAL_RCC_OscConfig+0x57c>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a3a      	ldr	r2, [pc, #232]	; (800b070 <HAL_RCC_OscConfig+0x57c>)
 800af86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af8c:	f7fd ffa6 	bl	8008edc <HAL_GetTick>
 800af90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af92:	e008      	b.n	800afa6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af94:	f7fd ffa2 	bl	8008edc <HAL_GetTick>
 800af98:	4602      	mov	r2, r0
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	1ad3      	subs	r3, r2, r3
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d901      	bls.n	800afa6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800afa2:	2303      	movs	r3, #3
 800afa4:	e184      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800afa6:	4b32      	ldr	r3, [pc, #200]	; (800b070 <HAL_RCC_OscConfig+0x57c>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d0f0      	beq.n	800af94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d108      	bne.n	800afcc <HAL_RCC_OscConfig+0x4d8>
 800afba:	4b2c      	ldr	r3, [pc, #176]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800afbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afc0:	4a2a      	ldr	r2, [pc, #168]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800afc2:	f043 0301 	orr.w	r3, r3, #1
 800afc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800afca:	e024      	b.n	800b016 <HAL_RCC_OscConfig+0x522>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	2b05      	cmp	r3, #5
 800afd2:	d110      	bne.n	800aff6 <HAL_RCC_OscConfig+0x502>
 800afd4:	4b25      	ldr	r3, [pc, #148]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800afd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afda:	4a24      	ldr	r2, [pc, #144]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800afdc:	f043 0304 	orr.w	r3, r3, #4
 800afe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800afe4:	4b21      	ldr	r3, [pc, #132]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800afe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afea:	4a20      	ldr	r2, [pc, #128]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800afec:	f043 0301 	orr.w	r3, r3, #1
 800aff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aff4:	e00f      	b.n	800b016 <HAL_RCC_OscConfig+0x522>
 800aff6:	4b1d      	ldr	r3, [pc, #116]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800aff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800affc:	4a1b      	ldr	r2, [pc, #108]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800affe:	f023 0301 	bic.w	r3, r3, #1
 800b002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b006:	4b19      	ldr	r3, [pc, #100]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800b008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b00c:	4a17      	ldr	r2, [pc, #92]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800b00e:	f023 0304 	bic.w	r3, r3, #4
 800b012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d016      	beq.n	800b04c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b01e:	f7fd ff5d 	bl	8008edc <HAL_GetTick>
 800b022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b024:	e00a      	b.n	800b03c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b026:	f7fd ff59 	bl	8008edc <HAL_GetTick>
 800b02a:	4602      	mov	r2, r0
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	1ad3      	subs	r3, r2, r3
 800b030:	f241 3288 	movw	r2, #5000	; 0x1388
 800b034:	4293      	cmp	r3, r2
 800b036:	d901      	bls.n	800b03c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800b038:	2303      	movs	r3, #3
 800b03a:	e139      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b03c:	4b0b      	ldr	r3, [pc, #44]	; (800b06c <HAL_RCC_OscConfig+0x578>)
 800b03e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b042:	f003 0302 	and.w	r3, r3, #2
 800b046:	2b00      	cmp	r3, #0
 800b048:	d0ed      	beq.n	800b026 <HAL_RCC_OscConfig+0x532>
 800b04a:	e01a      	b.n	800b082 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b04c:	f7fd ff46 	bl	8008edc <HAL_GetTick>
 800b050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b052:	e00f      	b.n	800b074 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b054:	f7fd ff42 	bl	8008edc <HAL_GetTick>
 800b058:	4602      	mov	r2, r0
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	1ad3      	subs	r3, r2, r3
 800b05e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b062:	4293      	cmp	r3, r2
 800b064:	d906      	bls.n	800b074 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b066:	2303      	movs	r3, #3
 800b068:	e122      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
 800b06a:	bf00      	nop
 800b06c:	40021000 	.word	0x40021000
 800b070:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b074:	4b90      	ldr	r3, [pc, #576]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b07a:	f003 0302 	and.w	r3, r3, #2
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1e8      	bne.n	800b054 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b082:	7ffb      	ldrb	r3, [r7, #31]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d105      	bne.n	800b094 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b088:	4b8b      	ldr	r3, [pc, #556]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b08a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b08c:	4a8a      	ldr	r2, [pc, #552]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b08e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b092:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f000 8108 	beq.w	800b2ae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	f040 80d0 	bne.w	800b248 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b0a8:	4b83      	ldr	r3, [pc, #524]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f003 0203 	and.w	r2, r3, #3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d130      	bne.n	800b11e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d127      	bne.n	800b11e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d11f      	bne.n	800b11e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b0e8:	2a07      	cmp	r2, #7
 800b0ea:	bf14      	ite	ne
 800b0ec:	2201      	movne	r2, #1
 800b0ee:	2200      	moveq	r2, #0
 800b0f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d113      	bne.n	800b11e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b100:	085b      	lsrs	r3, r3, #1
 800b102:	3b01      	subs	r3, #1
 800b104:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800b106:	429a      	cmp	r2, r3
 800b108:	d109      	bne.n	800b11e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b114:	085b      	lsrs	r3, r3, #1
 800b116:	3b01      	subs	r3, #1
 800b118:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d06e      	beq.n	800b1fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	2b0c      	cmp	r3, #12
 800b122:	d069      	beq.n	800b1f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b124:	4b64      	ldr	r3, [pc, #400]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d105      	bne.n	800b13c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800b130:	4b61      	ldr	r3, [pc, #388]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e0b7      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b140:	4b5d      	ldr	r3, [pc, #372]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a5c      	ldr	r2, [pc, #368]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b14a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b14c:	f7fd fec6 	bl	8008edc <HAL_GetTick>
 800b150:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b152:	e008      	b.n	800b166 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b154:	f7fd fec2 	bl	8008edc <HAL_GetTick>
 800b158:	4602      	mov	r2, r0
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d901      	bls.n	800b166 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800b162:	2303      	movs	r3, #3
 800b164:	e0a4      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b166:	4b54      	ldr	r3, [pc, #336]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1f0      	bne.n	800b154 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b172:	4b51      	ldr	r3, [pc, #324]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b174:	68da      	ldr	r2, [r3, #12]
 800b176:	4b51      	ldr	r3, [pc, #324]	; (800b2bc <HAL_RCC_OscConfig+0x7c8>)
 800b178:	4013      	ands	r3, r2
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b182:	3a01      	subs	r2, #1
 800b184:	0112      	lsls	r2, r2, #4
 800b186:	4311      	orrs	r1, r2
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b18c:	0212      	lsls	r2, r2, #8
 800b18e:	4311      	orrs	r1, r2
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b194:	0852      	lsrs	r2, r2, #1
 800b196:	3a01      	subs	r2, #1
 800b198:	0552      	lsls	r2, r2, #21
 800b19a:	4311      	orrs	r1, r2
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b1a0:	0852      	lsrs	r2, r2, #1
 800b1a2:	3a01      	subs	r2, #1
 800b1a4:	0652      	lsls	r2, r2, #25
 800b1a6:	4311      	orrs	r1, r2
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b1ac:	0912      	lsrs	r2, r2, #4
 800b1ae:	0452      	lsls	r2, r2, #17
 800b1b0:	430a      	orrs	r2, r1
 800b1b2:	4941      	ldr	r1, [pc, #260]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b1b8:	4b3f      	ldr	r3, [pc, #252]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a3e      	ldr	r2, [pc, #248]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b1be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b1c4:	4b3c      	ldr	r3, [pc, #240]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	4a3b      	ldr	r2, [pc, #236]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b1ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b1d0:	f7fd fe84 	bl	8008edc <HAL_GetTick>
 800b1d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b1d6:	e008      	b.n	800b1ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1d8:	f7fd fe80 	bl	8008edc <HAL_GetTick>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	d901      	bls.n	800b1ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	e062      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b1ea:	4b33      	ldr	r3, [pc, #204]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d0f0      	beq.n	800b1d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b1f6:	e05a      	b.n	800b2ae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e059      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b1fc:	4b2e      	ldr	r3, [pc, #184]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b204:	2b00      	cmp	r3, #0
 800b206:	d152      	bne.n	800b2ae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b208:	4b2b      	ldr	r3, [pc, #172]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a2a      	ldr	r2, [pc, #168]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b20e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b212:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b214:	4b28      	ldr	r3, [pc, #160]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	4a27      	ldr	r2, [pc, #156]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b21a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b21e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b220:	f7fd fe5c 	bl	8008edc <HAL_GetTick>
 800b224:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b226:	e008      	b.n	800b23a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b228:	f7fd fe58 	bl	8008edc <HAL_GetTick>
 800b22c:	4602      	mov	r2, r0
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	2b02      	cmp	r3, #2
 800b234:	d901      	bls.n	800b23a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800b236:	2303      	movs	r3, #3
 800b238:	e03a      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b23a:	4b1f      	ldr	r3, [pc, #124]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b242:	2b00      	cmp	r3, #0
 800b244:	d0f0      	beq.n	800b228 <HAL_RCC_OscConfig+0x734>
 800b246:	e032      	b.n	800b2ae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	2b0c      	cmp	r3, #12
 800b24c:	d02d      	beq.n	800b2aa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b24e:	4b1a      	ldr	r3, [pc, #104]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a19      	ldr	r2, [pc, #100]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b254:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b258:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800b25a:	4b17      	ldr	r3, [pc, #92]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800b262:	2b00      	cmp	r3, #0
 800b264:	d105      	bne.n	800b272 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b266:	4b14      	ldr	r3, [pc, #80]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	4a13      	ldr	r2, [pc, #76]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b26c:	f023 0303 	bic.w	r3, r3, #3
 800b270:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800b272:	4b11      	ldr	r3, [pc, #68]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	4a10      	ldr	r2, [pc, #64]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b278:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b27c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b280:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b282:	f7fd fe2b 	bl	8008edc <HAL_GetTick>
 800b286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b288:	e008      	b.n	800b29c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b28a:	f7fd fe27 	bl	8008edc <HAL_GetTick>
 800b28e:	4602      	mov	r2, r0
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	2b02      	cmp	r3, #2
 800b296:	d901      	bls.n	800b29c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800b298:	2303      	movs	r3, #3
 800b29a:	e009      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b29c:	4b06      	ldr	r3, [pc, #24]	; (800b2b8 <HAL_RCC_OscConfig+0x7c4>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d1f0      	bne.n	800b28a <HAL_RCC_OscConfig+0x796>
 800b2a8:	e001      	b.n	800b2ae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e000      	b.n	800b2b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800b2ae:	2300      	movs	r3, #0
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3720      	adds	r7, #32
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	40021000 	.word	0x40021000
 800b2bc:	f99d808c 	.word	0xf99d808c

0800b2c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d101      	bne.n	800b2d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	e0c8      	b.n	800b466 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b2d4:	4b66      	ldr	r3, [pc, #408]	; (800b470 <HAL_RCC_ClockConfig+0x1b0>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 0307 	and.w	r3, r3, #7
 800b2dc:	683a      	ldr	r2, [r7, #0]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d910      	bls.n	800b304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2e2:	4b63      	ldr	r3, [pc, #396]	; (800b470 <HAL_RCC_ClockConfig+0x1b0>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f023 0207 	bic.w	r2, r3, #7
 800b2ea:	4961      	ldr	r1, [pc, #388]	; (800b470 <HAL_RCC_ClockConfig+0x1b0>)
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2f2:	4b5f      	ldr	r3, [pc, #380]	; (800b470 <HAL_RCC_ClockConfig+0x1b0>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 0307 	and.w	r3, r3, #7
 800b2fa:	683a      	ldr	r2, [r7, #0]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d001      	beq.n	800b304 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	e0b0      	b.n	800b466 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 0301 	and.w	r3, r3, #1
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d04c      	beq.n	800b3aa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	2b03      	cmp	r3, #3
 800b316:	d107      	bne.n	800b328 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b318:	4b56      	ldr	r3, [pc, #344]	; (800b474 <HAL_RCC_ClockConfig+0x1b4>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b320:	2b00      	cmp	r3, #0
 800b322:	d121      	bne.n	800b368 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	e09e      	b.n	800b466 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	d107      	bne.n	800b340 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b330:	4b50      	ldr	r3, [pc, #320]	; (800b474 <HAL_RCC_ClockConfig+0x1b4>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d115      	bne.n	800b368 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	e092      	b.n	800b466 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d107      	bne.n	800b358 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b348:	4b4a      	ldr	r3, [pc, #296]	; (800b474 <HAL_RCC_ClockConfig+0x1b4>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f003 0302 	and.w	r3, r3, #2
 800b350:	2b00      	cmp	r3, #0
 800b352:	d109      	bne.n	800b368 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	e086      	b.n	800b466 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b358:	4b46      	ldr	r3, [pc, #280]	; (800b474 <HAL_RCC_ClockConfig+0x1b4>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b360:	2b00      	cmp	r3, #0
 800b362:	d101      	bne.n	800b368 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b364:	2301      	movs	r3, #1
 800b366:	e07e      	b.n	800b466 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b368:	4b42      	ldr	r3, [pc, #264]	; (800b474 <HAL_RCC_ClockConfig+0x1b4>)
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	f023 0203 	bic.w	r2, r3, #3
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	493f      	ldr	r1, [pc, #252]	; (800b474 <HAL_RCC_ClockConfig+0x1b4>)
 800b376:	4313      	orrs	r3, r2
 800b378:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b37a:	f7fd fdaf 	bl	8008edc <HAL_GetTick>
 800b37e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b380:	e00a      	b.n	800b398 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b382:	f7fd fdab 	bl	8008edc <HAL_GetTick>
 800b386:	4602      	mov	r2, r0
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b390:	4293      	cmp	r3, r2
 800b392:	d901      	bls.n	800b398 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800b394:	2303      	movs	r3, #3
 800b396:	e066      	b.n	800b466 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b398:	4b36      	ldr	r3, [pc, #216]	; (800b474 <HAL_RCC_ClockConfig+0x1b4>)
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	f003 020c 	and.w	r2, r3, #12
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d1eb      	bne.n	800b382 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f003 0302 	and.w	r3, r3, #2
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d008      	beq.n	800b3c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b3b6:	4b2f      	ldr	r3, [pc, #188]	; (800b474 <HAL_RCC_ClockConfig+0x1b4>)
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	492c      	ldr	r1, [pc, #176]	; (800b474 <HAL_RCC_ClockConfig+0x1b4>)
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b3c8:	4b29      	ldr	r3, [pc, #164]	; (800b470 <HAL_RCC_ClockConfig+0x1b0>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f003 0307 	and.w	r3, r3, #7
 800b3d0:	683a      	ldr	r2, [r7, #0]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d210      	bcs.n	800b3f8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3d6:	4b26      	ldr	r3, [pc, #152]	; (800b470 <HAL_RCC_ClockConfig+0x1b0>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f023 0207 	bic.w	r2, r3, #7
 800b3de:	4924      	ldr	r1, [pc, #144]	; (800b470 <HAL_RCC_ClockConfig+0x1b0>)
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3e6:	4b22      	ldr	r3, [pc, #136]	; (800b470 <HAL_RCC_ClockConfig+0x1b0>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 0307 	and.w	r3, r3, #7
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d001      	beq.n	800b3f8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e036      	b.n	800b466 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f003 0304 	and.w	r3, r3, #4
 800b400:	2b00      	cmp	r3, #0
 800b402:	d008      	beq.n	800b416 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b404:	4b1b      	ldr	r3, [pc, #108]	; (800b474 <HAL_RCC_ClockConfig+0x1b4>)
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	4918      	ldr	r1, [pc, #96]	; (800b474 <HAL_RCC_ClockConfig+0x1b4>)
 800b412:	4313      	orrs	r3, r2
 800b414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 0308 	and.w	r3, r3, #8
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d009      	beq.n	800b436 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b422:	4b14      	ldr	r3, [pc, #80]	; (800b474 <HAL_RCC_ClockConfig+0x1b4>)
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	691b      	ldr	r3, [r3, #16]
 800b42e:	00db      	lsls	r3, r3, #3
 800b430:	4910      	ldr	r1, [pc, #64]	; (800b474 <HAL_RCC_ClockConfig+0x1b4>)
 800b432:	4313      	orrs	r3, r2
 800b434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b436:	f000 f825 	bl	800b484 <HAL_RCC_GetSysClockFreq>
 800b43a:	4602      	mov	r2, r0
 800b43c:	4b0d      	ldr	r3, [pc, #52]	; (800b474 <HAL_RCC_ClockConfig+0x1b4>)
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	091b      	lsrs	r3, r3, #4
 800b442:	f003 030f 	and.w	r3, r3, #15
 800b446:	490c      	ldr	r1, [pc, #48]	; (800b478 <HAL_RCC_ClockConfig+0x1b8>)
 800b448:	5ccb      	ldrb	r3, [r1, r3]
 800b44a:	f003 031f 	and.w	r3, r3, #31
 800b44e:	fa22 f303 	lsr.w	r3, r2, r3
 800b452:	4a0a      	ldr	r2, [pc, #40]	; (800b47c <HAL_RCC_ClockConfig+0x1bc>)
 800b454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b456:	4b0a      	ldr	r3, [pc, #40]	; (800b480 <HAL_RCC_ClockConfig+0x1c0>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fd fcee 	bl	8008e3c <HAL_InitTick>
 800b460:	4603      	mov	r3, r0
 800b462:	72fb      	strb	r3, [r7, #11]

  return status;
 800b464:	7afb      	ldrb	r3, [r7, #11]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	40022000 	.word	0x40022000
 800b474:	40021000 	.word	0x40021000
 800b478:	0801ac5c 	.word	0x0801ac5c
 800b47c:	20000180 	.word	0x20000180
 800b480:	20000184 	.word	0x20000184

0800b484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b484:	b480      	push	{r7}
 800b486:	b089      	sub	sp, #36	; 0x24
 800b488:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b48a:	2300      	movs	r3, #0
 800b48c:	61fb      	str	r3, [r7, #28]
 800b48e:	2300      	movs	r3, #0
 800b490:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b492:	4b3e      	ldr	r3, [pc, #248]	; (800b58c <HAL_RCC_GetSysClockFreq+0x108>)
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	f003 030c 	and.w	r3, r3, #12
 800b49a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b49c:	4b3b      	ldr	r3, [pc, #236]	; (800b58c <HAL_RCC_GetSysClockFreq+0x108>)
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	f003 0303 	and.w	r3, r3, #3
 800b4a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d005      	beq.n	800b4b8 <HAL_RCC_GetSysClockFreq+0x34>
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	2b0c      	cmp	r3, #12
 800b4b0:	d121      	bne.n	800b4f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d11e      	bne.n	800b4f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b4b8:	4b34      	ldr	r3, [pc, #208]	; (800b58c <HAL_RCC_GetSysClockFreq+0x108>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f003 0308 	and.w	r3, r3, #8
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d107      	bne.n	800b4d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b4c4:	4b31      	ldr	r3, [pc, #196]	; (800b58c <HAL_RCC_GetSysClockFreq+0x108>)
 800b4c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4ca:	0a1b      	lsrs	r3, r3, #8
 800b4cc:	f003 030f 	and.w	r3, r3, #15
 800b4d0:	61fb      	str	r3, [r7, #28]
 800b4d2:	e005      	b.n	800b4e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b4d4:	4b2d      	ldr	r3, [pc, #180]	; (800b58c <HAL_RCC_GetSysClockFreq+0x108>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	091b      	lsrs	r3, r3, #4
 800b4da:	f003 030f 	and.w	r3, r3, #15
 800b4de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b4e0:	4a2b      	ldr	r2, [pc, #172]	; (800b590 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10d      	bne.n	800b50c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b4f4:	e00a      	b.n	800b50c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	2b04      	cmp	r3, #4
 800b4fa:	d102      	bne.n	800b502 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b4fc:	4b25      	ldr	r3, [pc, #148]	; (800b594 <HAL_RCC_GetSysClockFreq+0x110>)
 800b4fe:	61bb      	str	r3, [r7, #24]
 800b500:	e004      	b.n	800b50c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	2b08      	cmp	r3, #8
 800b506:	d101      	bne.n	800b50c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b508:	4b23      	ldr	r3, [pc, #140]	; (800b598 <HAL_RCC_GetSysClockFreq+0x114>)
 800b50a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	2b0c      	cmp	r3, #12
 800b510:	d134      	bne.n	800b57c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b512:	4b1e      	ldr	r3, [pc, #120]	; (800b58c <HAL_RCC_GetSysClockFreq+0x108>)
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	f003 0303 	and.w	r3, r3, #3
 800b51a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	2b02      	cmp	r3, #2
 800b520:	d003      	beq.n	800b52a <HAL_RCC_GetSysClockFreq+0xa6>
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	2b03      	cmp	r3, #3
 800b526:	d003      	beq.n	800b530 <HAL_RCC_GetSysClockFreq+0xac>
 800b528:	e005      	b.n	800b536 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b52a:	4b1a      	ldr	r3, [pc, #104]	; (800b594 <HAL_RCC_GetSysClockFreq+0x110>)
 800b52c:	617b      	str	r3, [r7, #20]
      break;
 800b52e:	e005      	b.n	800b53c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b530:	4b19      	ldr	r3, [pc, #100]	; (800b598 <HAL_RCC_GetSysClockFreq+0x114>)
 800b532:	617b      	str	r3, [r7, #20]
      break;
 800b534:	e002      	b.n	800b53c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	617b      	str	r3, [r7, #20]
      break;
 800b53a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b53c:	4b13      	ldr	r3, [pc, #76]	; (800b58c <HAL_RCC_GetSysClockFreq+0x108>)
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	091b      	lsrs	r3, r3, #4
 800b542:	f003 0307 	and.w	r3, r3, #7
 800b546:	3301      	adds	r3, #1
 800b548:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b54a:	4b10      	ldr	r3, [pc, #64]	; (800b58c <HAL_RCC_GetSysClockFreq+0x108>)
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	0a1b      	lsrs	r3, r3, #8
 800b550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b554:	697a      	ldr	r2, [r7, #20]
 800b556:	fb02 f203 	mul.w	r2, r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b560:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b562:	4b0a      	ldr	r3, [pc, #40]	; (800b58c <HAL_RCC_GetSysClockFreq+0x108>)
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	0e5b      	lsrs	r3, r3, #25
 800b568:	f003 0303 	and.w	r3, r3, #3
 800b56c:	3301      	adds	r3, #1
 800b56e:	005b      	lsls	r3, r3, #1
 800b570:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b572:	697a      	ldr	r2, [r7, #20]
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	fbb2 f3f3 	udiv	r3, r2, r3
 800b57a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b57c:	69bb      	ldr	r3, [r7, #24]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3724      	adds	r7, #36	; 0x24
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	40021000 	.word	0x40021000
 800b590:	0801ac74 	.word	0x0801ac74
 800b594:	00f42400 	.word	0x00f42400
 800b598:	007a1200 	.word	0x007a1200

0800b59c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b59c:	b480      	push	{r7}
 800b59e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b5a0:	4b03      	ldr	r3, [pc, #12]	; (800b5b0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	20000180 	.word	0x20000180

0800b5b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b5b8:	f7ff fff0 	bl	800b59c <HAL_RCC_GetHCLKFreq>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	4b06      	ldr	r3, [pc, #24]	; (800b5d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	0a1b      	lsrs	r3, r3, #8
 800b5c4:	f003 0307 	and.w	r3, r3, #7
 800b5c8:	4904      	ldr	r1, [pc, #16]	; (800b5dc <HAL_RCC_GetPCLK1Freq+0x28>)
 800b5ca:	5ccb      	ldrb	r3, [r1, r3]
 800b5cc:	f003 031f 	and.w	r3, r3, #31
 800b5d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	40021000 	.word	0x40021000
 800b5dc:	0801ac6c 	.word	0x0801ac6c

0800b5e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b5e4:	f7ff ffda 	bl	800b59c <HAL_RCC_GetHCLKFreq>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	4b06      	ldr	r3, [pc, #24]	; (800b604 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	0adb      	lsrs	r3, r3, #11
 800b5f0:	f003 0307 	and.w	r3, r3, #7
 800b5f4:	4904      	ldr	r1, [pc, #16]	; (800b608 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b5f6:	5ccb      	ldrb	r3, [r1, r3]
 800b5f8:	f003 031f 	and.w	r3, r3, #31
 800b5fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b600:	4618      	mov	r0, r3
 800b602:	bd80      	pop	{r7, pc}
 800b604:	40021000 	.word	0x40021000
 800b608:	0801ac6c 	.word	0x0801ac6c

0800b60c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b086      	sub	sp, #24
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b614:	2300      	movs	r3, #0
 800b616:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b618:	4b2a      	ldr	r3, [pc, #168]	; (800b6c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b61a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b61c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b620:	2b00      	cmp	r3, #0
 800b622:	d003      	beq.n	800b62c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b624:	f7ff fa02 	bl	800aa2c <HAL_PWREx_GetVoltageRange>
 800b628:	6178      	str	r0, [r7, #20]
 800b62a:	e014      	b.n	800b656 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b62c:	4b25      	ldr	r3, [pc, #148]	; (800b6c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b62e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b630:	4a24      	ldr	r2, [pc, #144]	; (800b6c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b636:	6593      	str	r3, [r2, #88]	; 0x58
 800b638:	4b22      	ldr	r3, [pc, #136]	; (800b6c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b63a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b63c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b640:	60fb      	str	r3, [r7, #12]
 800b642:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b644:	f7ff f9f2 	bl	800aa2c <HAL_PWREx_GetVoltageRange>
 800b648:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b64a:	4b1e      	ldr	r3, [pc, #120]	; (800b6c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b64c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b64e:	4a1d      	ldr	r2, [pc, #116]	; (800b6c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b654:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b65c:	d10b      	bne.n	800b676 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2b80      	cmp	r3, #128	; 0x80
 800b662:	d919      	bls.n	800b698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2ba0      	cmp	r3, #160	; 0xa0
 800b668:	d902      	bls.n	800b670 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b66a:	2302      	movs	r3, #2
 800b66c:	613b      	str	r3, [r7, #16]
 800b66e:	e013      	b.n	800b698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b670:	2301      	movs	r3, #1
 800b672:	613b      	str	r3, [r7, #16]
 800b674:	e010      	b.n	800b698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2b80      	cmp	r3, #128	; 0x80
 800b67a:	d902      	bls.n	800b682 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b67c:	2303      	movs	r3, #3
 800b67e:	613b      	str	r3, [r7, #16]
 800b680:	e00a      	b.n	800b698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2b80      	cmp	r3, #128	; 0x80
 800b686:	d102      	bne.n	800b68e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b688:	2302      	movs	r3, #2
 800b68a:	613b      	str	r3, [r7, #16]
 800b68c:	e004      	b.n	800b698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2b70      	cmp	r3, #112	; 0x70
 800b692:	d101      	bne.n	800b698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b694:	2301      	movs	r3, #1
 800b696:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b698:	4b0b      	ldr	r3, [pc, #44]	; (800b6c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f023 0207 	bic.w	r2, r3, #7
 800b6a0:	4909      	ldr	r1, [pc, #36]	; (800b6c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b6a8:	4b07      	ldr	r3, [pc, #28]	; (800b6c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f003 0307 	and.w	r3, r3, #7
 800b6b0:	693a      	ldr	r2, [r7, #16]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d001      	beq.n	800b6ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e000      	b.n	800b6bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3718      	adds	r7, #24
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	40021000 	.word	0x40021000
 800b6c8:	40022000 	.word	0x40022000

0800b6cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b6d8:	2300      	movs	r3, #0
 800b6da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d041      	beq.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b6f0:	d02a      	beq.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b6f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b6f6:	d824      	bhi.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b6f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b6fc:	d008      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b6fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b702:	d81e      	bhi.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00a      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b70c:	d010      	beq.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b70e:	e018      	b.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b710:	4b86      	ldr	r3, [pc, #536]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	4a85      	ldr	r2, [pc, #532]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b71a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b71c:	e015      	b.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	3304      	adds	r3, #4
 800b722:	2100      	movs	r1, #0
 800b724:	4618      	mov	r0, r3
 800b726:	f000 fabb 	bl	800bca0 <RCCEx_PLLSAI1_Config>
 800b72a:	4603      	mov	r3, r0
 800b72c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b72e:	e00c      	b.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	3320      	adds	r3, #32
 800b734:	2100      	movs	r1, #0
 800b736:	4618      	mov	r0, r3
 800b738:	f000 fba6 	bl	800be88 <RCCEx_PLLSAI2_Config>
 800b73c:	4603      	mov	r3, r0
 800b73e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b740:	e003      	b.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b742:	2301      	movs	r3, #1
 800b744:	74fb      	strb	r3, [r7, #19]
      break;
 800b746:	e000      	b.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b74a:	7cfb      	ldrb	r3, [r7, #19]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d10b      	bne.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b750:	4b76      	ldr	r3, [pc, #472]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b756:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b75e:	4973      	ldr	r1, [pc, #460]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b760:	4313      	orrs	r3, r2
 800b762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b766:	e001      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b768:	7cfb      	ldrb	r3, [r7, #19]
 800b76a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b774:	2b00      	cmp	r3, #0
 800b776:	d041      	beq.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b77c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b780:	d02a      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800b782:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b786:	d824      	bhi.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b78c:	d008      	beq.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b78e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b792:	d81e      	bhi.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b794:	2b00      	cmp	r3, #0
 800b796:	d00a      	beq.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800b798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b79c:	d010      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b79e:	e018      	b.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b7a0:	4b62      	ldr	r3, [pc, #392]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	4a61      	ldr	r2, [pc, #388]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b7a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b7ac:	e015      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	3304      	adds	r3, #4
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f000 fa73 	bl	800bca0 <RCCEx_PLLSAI1_Config>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b7be:	e00c      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	3320      	adds	r3, #32
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f000 fb5e 	bl	800be88 <RCCEx_PLLSAI2_Config>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b7d0:	e003      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	74fb      	strb	r3, [r7, #19]
      break;
 800b7d6:	e000      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800b7d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7da:	7cfb      	ldrb	r3, [r7, #19]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d10b      	bne.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b7e0:	4b52      	ldr	r3, [pc, #328]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b7e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7ee:	494f      	ldr	r1, [pc, #316]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b7f6:	e001      	b.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7f8:	7cfb      	ldrb	r3, [r7, #19]
 800b7fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 80a0 	beq.w	800b94a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b80a:	2300      	movs	r3, #0
 800b80c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b80e:	4b47      	ldr	r3, [pc, #284]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b816:	2b00      	cmp	r3, #0
 800b818:	d101      	bne.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800b81a:	2301      	movs	r3, #1
 800b81c:	e000      	b.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800b81e:	2300      	movs	r3, #0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00d      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b824:	4b41      	ldr	r3, [pc, #260]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b828:	4a40      	ldr	r2, [pc, #256]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b82a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b82e:	6593      	str	r3, [r2, #88]	; 0x58
 800b830:	4b3e      	ldr	r3, [pc, #248]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b838:	60bb      	str	r3, [r7, #8]
 800b83a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b83c:	2301      	movs	r3, #1
 800b83e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b840:	4b3b      	ldr	r3, [pc, #236]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a3a      	ldr	r2, [pc, #232]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b84a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b84c:	f7fd fb46 	bl	8008edc <HAL_GetTick>
 800b850:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b852:	e009      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b854:	f7fd fb42 	bl	8008edc <HAL_GetTick>
 800b858:	4602      	mov	r2, r0
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	1ad3      	subs	r3, r2, r3
 800b85e:	2b02      	cmp	r3, #2
 800b860:	d902      	bls.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800b862:	2303      	movs	r3, #3
 800b864:	74fb      	strb	r3, [r7, #19]
        break;
 800b866:	e005      	b.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b868:	4b31      	ldr	r3, [pc, #196]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b870:	2b00      	cmp	r3, #0
 800b872:	d0ef      	beq.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800b874:	7cfb      	ldrb	r3, [r7, #19]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d15c      	bne.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b87a:	4b2c      	ldr	r3, [pc, #176]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b87c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b884:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d01f      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b892:	697a      	ldr	r2, [r7, #20]
 800b894:	429a      	cmp	r2, r3
 800b896:	d019      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b898:	4b24      	ldr	r3, [pc, #144]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b89a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b89e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b8a4:	4b21      	ldr	r3, [pc, #132]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b8a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8aa:	4a20      	ldr	r2, [pc, #128]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b8ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b8b4:	4b1d      	ldr	r3, [pc, #116]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b8b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8ba:	4a1c      	ldr	r2, [pc, #112]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b8bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b8c4:	4a19      	ldr	r2, [pc, #100]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d016      	beq.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8d6:	f7fd fb01 	bl	8008edc <HAL_GetTick>
 800b8da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b8dc:	e00b      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8de:	f7fd fafd 	bl	8008edc <HAL_GetTick>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	1ad3      	subs	r3, r2, r3
 800b8e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d902      	bls.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	74fb      	strb	r3, [r7, #19]
            break;
 800b8f4:	e006      	b.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b8f6:	4b0d      	ldr	r3, [pc, #52]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b8f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8fc:	f003 0302 	and.w	r3, r3, #2
 800b900:	2b00      	cmp	r3, #0
 800b902:	d0ec      	beq.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800b904:	7cfb      	ldrb	r3, [r7, #19]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10c      	bne.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b90a:	4b08      	ldr	r3, [pc, #32]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b91a:	4904      	ldr	r1, [pc, #16]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b91c:	4313      	orrs	r3, r2
 800b91e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b922:	e009      	b.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b924:	7cfb      	ldrb	r3, [r7, #19]
 800b926:	74bb      	strb	r3, [r7, #18]
 800b928:	e006      	b.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800b92a:	bf00      	nop
 800b92c:	40021000 	.word	0x40021000
 800b930:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b934:	7cfb      	ldrb	r3, [r7, #19]
 800b936:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b938:	7c7b      	ldrb	r3, [r7, #17]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d105      	bne.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b93e:	4b9e      	ldr	r3, [pc, #632]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b942:	4a9d      	ldr	r2, [pc, #628]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b948:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f003 0301 	and.w	r3, r3, #1
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00a      	beq.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b956:	4b98      	ldr	r3, [pc, #608]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b95c:	f023 0203 	bic.w	r2, r3, #3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b964:	4994      	ldr	r1, [pc, #592]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b966:	4313      	orrs	r3, r2
 800b968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f003 0302 	and.w	r3, r3, #2
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00a      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b978:	4b8f      	ldr	r3, [pc, #572]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b97a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b97e:	f023 020c 	bic.w	r2, r3, #12
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b986:	498c      	ldr	r1, [pc, #560]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b988:	4313      	orrs	r3, r2
 800b98a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f003 0304 	and.w	r3, r3, #4
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00a      	beq.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b99a:	4b87      	ldr	r3, [pc, #540]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b99c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a8:	4983      	ldr	r1, [pc, #524]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f003 0308 	and.w	r3, r3, #8
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00a      	beq.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b9bc:	4b7e      	ldr	r3, [pc, #504]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b9be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ca:	497b      	ldr	r1, [pc, #492]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f003 0310 	and.w	r3, r3, #16
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00a      	beq.n	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b9de:	4b76      	ldr	r3, [pc, #472]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b9e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9ec:	4972      	ldr	r1, [pc, #456]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f003 0320 	and.w	r3, r3, #32
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00a      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ba00:	4b6d      	ldr	r3, [pc, #436]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ba02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba0e:	496a      	ldr	r1, [pc, #424]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ba10:	4313      	orrs	r3, r2
 800ba12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d00a      	beq.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ba22:	4b65      	ldr	r3, [pc, #404]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ba24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba30:	4961      	ldr	r1, [pc, #388]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ba32:	4313      	orrs	r3, r2
 800ba34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00a      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ba44:	4b5c      	ldr	r3, [pc, #368]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ba46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba52:	4959      	ldr	r1, [pc, #356]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ba54:	4313      	orrs	r3, r2
 800ba56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00a      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ba66:	4b54      	ldr	r3, [pc, #336]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ba68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba74:	4950      	ldr	r1, [pc, #320]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ba76:	4313      	orrs	r3, r2
 800ba78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00a      	beq.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ba88:	4b4b      	ldr	r3, [pc, #300]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ba8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba96:	4948      	ldr	r1, [pc, #288]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00a      	beq.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800baaa:	4b43      	ldr	r3, [pc, #268]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800baac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bab0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bab8:	493f      	ldr	r1, [pc, #252]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800baba:	4313      	orrs	r3, r2
 800babc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d028      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bacc:	4b3a      	ldr	r3, [pc, #232]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bad2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bada:	4937      	ldr	r1, [pc, #220]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800badc:	4313      	orrs	r3, r2
 800bade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800baea:	d106      	bne.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800baec:	4b32      	ldr	r3, [pc, #200]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	4a31      	ldr	r2, [pc, #196]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800baf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800baf6:	60d3      	str	r3, [r2, #12]
 800baf8:	e011      	b.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bafe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb02:	d10c      	bne.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	3304      	adds	r3, #4
 800bb08:	2101      	movs	r1, #1
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f000 f8c8 	bl	800bca0 <RCCEx_PLLSAI1_Config>
 800bb10:	4603      	mov	r3, r0
 800bb12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800bb14:	7cfb      	ldrb	r3, [r7, #19]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800bb1a:	7cfb      	ldrb	r3, [r7, #19]
 800bb1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d028      	beq.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bb2a:	4b23      	ldr	r3, [pc, #140]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bb2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb38:	491f      	ldr	r1, [pc, #124]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb48:	d106      	bne.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bb4a:	4b1b      	ldr	r3, [pc, #108]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	4a1a      	ldr	r2, [pc, #104]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bb50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb54:	60d3      	str	r3, [r2, #12]
 800bb56:	e011      	b.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb60:	d10c      	bne.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	3304      	adds	r3, #4
 800bb66:	2101      	movs	r1, #1
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 f899 	bl	800bca0 <RCCEx_PLLSAI1_Config>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bb72:	7cfb      	ldrb	r3, [r7, #19]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d001      	beq.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800bb78:	7cfb      	ldrb	r3, [r7, #19]
 800bb7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d02b      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bb88:	4b0b      	ldr	r3, [pc, #44]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bb8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb96:	4908      	ldr	r1, [pc, #32]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bba6:	d109      	bne.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bba8:	4b03      	ldr	r3, [pc, #12]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	4a02      	ldr	r2, [pc, #8]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bbae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbb2:	60d3      	str	r3, [r2, #12]
 800bbb4:	e014      	b.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800bbb6:	bf00      	nop
 800bbb8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bbc4:	d10c      	bne.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	3304      	adds	r3, #4
 800bbca:	2101      	movs	r1, #1
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f000 f867 	bl	800bca0 <RCCEx_PLLSAI1_Config>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bbd6:	7cfb      	ldrb	r3, [r7, #19]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d001      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800bbdc:	7cfb      	ldrb	r3, [r7, #19]
 800bbde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d02f      	beq.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bbec:	4b2b      	ldr	r3, [pc, #172]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bbee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbfa:	4928      	ldr	r1, [pc, #160]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc0a:	d10d      	bne.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	3304      	adds	r3, #4
 800bc10:	2102      	movs	r1, #2
 800bc12:	4618      	mov	r0, r3
 800bc14:	f000 f844 	bl	800bca0 <RCCEx_PLLSAI1_Config>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bc1c:	7cfb      	ldrb	r3, [r7, #19]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d014      	beq.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800bc22:	7cfb      	ldrb	r3, [r7, #19]
 800bc24:	74bb      	strb	r3, [r7, #18]
 800bc26:	e011      	b.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc30:	d10c      	bne.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	3320      	adds	r3, #32
 800bc36:	2102      	movs	r1, #2
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 f925 	bl	800be88 <RCCEx_PLLSAI2_Config>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bc42:	7cfb      	ldrb	r3, [r7, #19]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d001      	beq.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800bc48:	7cfb      	ldrb	r3, [r7, #19]
 800bc4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d00a      	beq.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bc58:	4b10      	ldr	r3, [pc, #64]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bc5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc66:	490d      	ldr	r1, [pc, #52]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00b      	beq.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bc7a:	4b08      	ldr	r3, [pc, #32]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bc7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc8a:	4904      	ldr	r1, [pc, #16]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800bc92:	7cbb      	ldrb	r3, [r7, #18]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3718      	adds	r7, #24
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	40021000 	.word	0x40021000

0800bca0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800bcae:	4b75      	ldr	r3, [pc, #468]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	f003 0303 	and.w	r3, r3, #3
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d018      	beq.n	800bcec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800bcba:	4b72      	ldr	r3, [pc, #456]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	f003 0203 	and.w	r2, r3, #3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d10d      	bne.n	800bce6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
       ||
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d009      	beq.n	800bce6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800bcd2:	4b6c      	ldr	r3, [pc, #432]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	091b      	lsrs	r3, r3, #4
 800bcd8:	f003 0307 	and.w	r3, r3, #7
 800bcdc:	1c5a      	adds	r2, r3, #1
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	685b      	ldr	r3, [r3, #4]
       ||
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d047      	beq.n	800bd76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800bce6:	2301      	movs	r3, #1
 800bce8:	73fb      	strb	r3, [r7, #15]
 800bcea:	e044      	b.n	800bd76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2b03      	cmp	r3, #3
 800bcf2:	d018      	beq.n	800bd26 <RCCEx_PLLSAI1_Config+0x86>
 800bcf4:	2b03      	cmp	r3, #3
 800bcf6:	d825      	bhi.n	800bd44 <RCCEx_PLLSAI1_Config+0xa4>
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d002      	beq.n	800bd02 <RCCEx_PLLSAI1_Config+0x62>
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d009      	beq.n	800bd14 <RCCEx_PLLSAI1_Config+0x74>
 800bd00:	e020      	b.n	800bd44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800bd02:	4b60      	ldr	r3, [pc, #384]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f003 0302 	and.w	r3, r3, #2
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d11d      	bne.n	800bd4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bd12:	e01a      	b.n	800bd4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800bd14:	4b5b      	ldr	r3, [pc, #364]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d116      	bne.n	800bd4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bd24:	e013      	b.n	800bd4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800bd26:	4b57      	ldr	r3, [pc, #348]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d10f      	bne.n	800bd52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800bd32:	4b54      	ldr	r3, [pc, #336]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d109      	bne.n	800bd52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bd42:	e006      	b.n	800bd52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	73fb      	strb	r3, [r7, #15]
      break;
 800bd48:	e004      	b.n	800bd54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800bd4a:	bf00      	nop
 800bd4c:	e002      	b.n	800bd54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800bd4e:	bf00      	nop
 800bd50:	e000      	b.n	800bd54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800bd52:	bf00      	nop
    }

    if(status == HAL_OK)
 800bd54:	7bfb      	ldrb	r3, [r7, #15]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d10d      	bne.n	800bd76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800bd5a:	4b4a      	ldr	r3, [pc, #296]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6819      	ldr	r1, [r3, #0]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	011b      	lsls	r3, r3, #4
 800bd6e:	430b      	orrs	r3, r1
 800bd70:	4944      	ldr	r1, [pc, #272]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd72:	4313      	orrs	r3, r2
 800bd74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800bd76:	7bfb      	ldrb	r3, [r7, #15]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d17d      	bne.n	800be78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800bd7c:	4b41      	ldr	r3, [pc, #260]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a40      	ldr	r2, [pc, #256]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bd86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd88:	f7fd f8a8 	bl	8008edc <HAL_GetTick>
 800bd8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bd8e:	e009      	b.n	800bda4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bd90:	f7fd f8a4 	bl	8008edc <HAL_GetTick>
 800bd94:	4602      	mov	r2, r0
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	d902      	bls.n	800bda4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800bd9e:	2303      	movs	r3, #3
 800bda0:	73fb      	strb	r3, [r7, #15]
        break;
 800bda2:	e005      	b.n	800bdb0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bda4:	4b37      	ldr	r3, [pc, #220]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d1ef      	bne.n	800bd90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d160      	bne.n	800be78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d111      	bne.n	800bde0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bdbc:	4b31      	ldr	r3, [pc, #196]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800bdc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	6892      	ldr	r2, [r2, #8]
 800bdcc:	0211      	lsls	r1, r2, #8
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	68d2      	ldr	r2, [r2, #12]
 800bdd2:	0912      	lsrs	r2, r2, #4
 800bdd4:	0452      	lsls	r2, r2, #17
 800bdd6:	430a      	orrs	r2, r1
 800bdd8:	492a      	ldr	r1, [pc, #168]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bdda:	4313      	orrs	r3, r2
 800bddc:	610b      	str	r3, [r1, #16]
 800bdde:	e027      	b.n	800be30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d112      	bne.n	800be0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bde6:	4b27      	ldr	r3, [pc, #156]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800bdee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	6892      	ldr	r2, [r2, #8]
 800bdf6:	0211      	lsls	r1, r2, #8
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	6912      	ldr	r2, [r2, #16]
 800bdfc:	0852      	lsrs	r2, r2, #1
 800bdfe:	3a01      	subs	r2, #1
 800be00:	0552      	lsls	r2, r2, #21
 800be02:	430a      	orrs	r2, r1
 800be04:	491f      	ldr	r1, [pc, #124]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800be06:	4313      	orrs	r3, r2
 800be08:	610b      	str	r3, [r1, #16]
 800be0a:	e011      	b.n	800be30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800be0c:	4b1d      	ldr	r3, [pc, #116]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800be0e:	691b      	ldr	r3, [r3, #16]
 800be10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800be14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	6892      	ldr	r2, [r2, #8]
 800be1c:	0211      	lsls	r1, r2, #8
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	6952      	ldr	r2, [r2, #20]
 800be22:	0852      	lsrs	r2, r2, #1
 800be24:	3a01      	subs	r2, #1
 800be26:	0652      	lsls	r2, r2, #25
 800be28:	430a      	orrs	r2, r1
 800be2a:	4916      	ldr	r1, [pc, #88]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800be2c:	4313      	orrs	r3, r2
 800be2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800be30:	4b14      	ldr	r3, [pc, #80]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a13      	ldr	r2, [pc, #76]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800be36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be3c:	f7fd f84e 	bl	8008edc <HAL_GetTick>
 800be40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800be42:	e009      	b.n	800be58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800be44:	f7fd f84a 	bl	8008edc <HAL_GetTick>
 800be48:	4602      	mov	r2, r0
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	1ad3      	subs	r3, r2, r3
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d902      	bls.n	800be58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800be52:	2303      	movs	r3, #3
 800be54:	73fb      	strb	r3, [r7, #15]
          break;
 800be56:	e005      	b.n	800be64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800be58:	4b0a      	ldr	r3, [pc, #40]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d0ef      	beq.n	800be44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800be64:	7bfb      	ldrb	r3, [r7, #15]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d106      	bne.n	800be78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800be6a:	4b06      	ldr	r3, [pc, #24]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800be6c:	691a      	ldr	r2, [r3, #16]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	699b      	ldr	r3, [r3, #24]
 800be72:	4904      	ldr	r1, [pc, #16]	; (800be84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800be74:	4313      	orrs	r3, r2
 800be76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800be78:	7bfb      	ldrb	r3, [r7, #15]
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	40021000 	.word	0x40021000

0800be88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be92:	2300      	movs	r3, #0
 800be94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800be96:	4b6a      	ldr	r3, [pc, #424]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	f003 0303 	and.w	r3, r3, #3
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d018      	beq.n	800bed4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800bea2:	4b67      	ldr	r3, [pc, #412]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	f003 0203 	and.w	r2, r3, #3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d10d      	bne.n	800bece <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
       ||
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d009      	beq.n	800bece <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800beba:	4b61      	ldr	r3, [pc, #388]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	091b      	lsrs	r3, r3, #4
 800bec0:	f003 0307 	and.w	r3, r3, #7
 800bec4:	1c5a      	adds	r2, r3, #1
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	685b      	ldr	r3, [r3, #4]
       ||
 800beca:	429a      	cmp	r2, r3
 800becc:	d047      	beq.n	800bf5e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800bece:	2301      	movs	r3, #1
 800bed0:	73fb      	strb	r3, [r7, #15]
 800bed2:	e044      	b.n	800bf5e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b03      	cmp	r3, #3
 800beda:	d018      	beq.n	800bf0e <RCCEx_PLLSAI2_Config+0x86>
 800bedc:	2b03      	cmp	r3, #3
 800bede:	d825      	bhi.n	800bf2c <RCCEx_PLLSAI2_Config+0xa4>
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d002      	beq.n	800beea <RCCEx_PLLSAI2_Config+0x62>
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d009      	beq.n	800befc <RCCEx_PLLSAI2_Config+0x74>
 800bee8:	e020      	b.n	800bf2c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800beea:	4b55      	ldr	r3, [pc, #340]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f003 0302 	and.w	r3, r3, #2
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d11d      	bne.n	800bf32 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800befa:	e01a      	b.n	800bf32 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800befc:	4b50      	ldr	r3, [pc, #320]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d116      	bne.n	800bf36 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bf0c:	e013      	b.n	800bf36 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800bf0e:	4b4c      	ldr	r3, [pc, #304]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d10f      	bne.n	800bf3a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800bf1a:	4b49      	ldr	r3, [pc, #292]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d109      	bne.n	800bf3a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bf2a:	e006      	b.n	800bf3a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	73fb      	strb	r3, [r7, #15]
      break;
 800bf30:	e004      	b.n	800bf3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800bf32:	bf00      	nop
 800bf34:	e002      	b.n	800bf3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800bf36:	bf00      	nop
 800bf38:	e000      	b.n	800bf3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800bf3a:	bf00      	nop
    }

    if(status == HAL_OK)
 800bf3c:	7bfb      	ldrb	r3, [r7, #15]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d10d      	bne.n	800bf5e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800bf42:	4b3f      	ldr	r3, [pc, #252]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6819      	ldr	r1, [r3, #0]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	3b01      	subs	r3, #1
 800bf54:	011b      	lsls	r3, r3, #4
 800bf56:	430b      	orrs	r3, r1
 800bf58:	4939      	ldr	r1, [pc, #228]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800bf5e:	7bfb      	ldrb	r3, [r7, #15]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d167      	bne.n	800c034 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800bf64:	4b36      	ldr	r3, [pc, #216]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a35      	ldr	r2, [pc, #212]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bf6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf70:	f7fc ffb4 	bl	8008edc <HAL_GetTick>
 800bf74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800bf76:	e009      	b.n	800bf8c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bf78:	f7fc ffb0 	bl	8008edc <HAL_GetTick>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	d902      	bls.n	800bf8c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800bf86:	2303      	movs	r3, #3
 800bf88:	73fb      	strb	r3, [r7, #15]
        break;
 800bf8a:	e005      	b.n	800bf98 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800bf8c:	4b2c      	ldr	r3, [pc, #176]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d1ef      	bne.n	800bf78 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800bf98:	7bfb      	ldrb	r3, [r7, #15]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d14a      	bne.n	800c034 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d111      	bne.n	800bfc8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bfa4:	4b26      	ldr	r3, [pc, #152]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bfa6:	695b      	ldr	r3, [r3, #20]
 800bfa8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800bfac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	6892      	ldr	r2, [r2, #8]
 800bfb4:	0211      	lsls	r1, r2, #8
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	68d2      	ldr	r2, [r2, #12]
 800bfba:	0912      	lsrs	r2, r2, #4
 800bfbc:	0452      	lsls	r2, r2, #17
 800bfbe:	430a      	orrs	r2, r1
 800bfc0:	491f      	ldr	r1, [pc, #124]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	614b      	str	r3, [r1, #20]
 800bfc6:	e011      	b.n	800bfec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bfc8:	4b1d      	ldr	r3, [pc, #116]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bfca:	695b      	ldr	r3, [r3, #20]
 800bfcc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800bfd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	6892      	ldr	r2, [r2, #8]
 800bfd8:	0211      	lsls	r1, r2, #8
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	6912      	ldr	r2, [r2, #16]
 800bfde:	0852      	lsrs	r2, r2, #1
 800bfe0:	3a01      	subs	r2, #1
 800bfe2:	0652      	lsls	r2, r2, #25
 800bfe4:	430a      	orrs	r2, r1
 800bfe6:	4916      	ldr	r1, [pc, #88]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800bfec:	4b14      	ldr	r3, [pc, #80]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a13      	ldr	r2, [pc, #76]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bff6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bff8:	f7fc ff70 	bl	8008edc <HAL_GetTick>
 800bffc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bffe:	e009      	b.n	800c014 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c000:	f7fc ff6c 	bl	8008edc <HAL_GetTick>
 800c004:	4602      	mov	r2, r0
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	1ad3      	subs	r3, r2, r3
 800c00a:	2b02      	cmp	r3, #2
 800c00c:	d902      	bls.n	800c014 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800c00e:	2303      	movs	r3, #3
 800c010:	73fb      	strb	r3, [r7, #15]
          break;
 800c012:	e005      	b.n	800c020 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c014:	4b0a      	ldr	r3, [pc, #40]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d0ef      	beq.n	800c000 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800c020:	7bfb      	ldrb	r3, [r7, #15]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d106      	bne.n	800c034 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800c026:	4b06      	ldr	r3, [pc, #24]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c028:	695a      	ldr	r2, [r3, #20]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	695b      	ldr	r3, [r3, #20]
 800c02e:	4904      	ldr	r1, [pc, #16]	; (800c040 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c030:	4313      	orrs	r3, r2
 800c032:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800c034:	7bfb      	ldrb	r3, [r7, #15]
}
 800c036:	4618      	mov	r0, r3
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	40021000 	.word	0x40021000

0800c044 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d06c      	beq.n	800c130 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d106      	bne.n	800c070 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7f7 f822 	bl	80030b4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2202      	movs	r2, #2
 800c074:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	22ca      	movs	r2, #202	; 0xca
 800c07e:	625a      	str	r2, [r3, #36]	; 0x24
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2253      	movs	r2, #83	; 0x53
 800c086:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 fa49 	bl	800c520 <RTC_EnterInitMode>
 800c08e:	4603      	mov	r3, r0
 800c090:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c092:	7bfb      	ldrb	r3, [r7, #15]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d14b      	bne.n	800c130 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	6812      	ldr	r2, [r2, #0]
 800c0a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c0a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0aa:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	6899      	ldr	r1, [r3, #8]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	685a      	ldr	r2, [r3, #4]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	431a      	orrs	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	699b      	ldr	r3, [r3, #24]
 800c0c0:	431a      	orrs	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	68d2      	ldr	r2, [r2, #12]
 800c0d2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	6919      	ldr	r1, [r3, #16]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	041a      	lsls	r2, r3, #16
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	430a      	orrs	r2, r1
 800c0e6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 fa4d 	bl	800c588 <RTC_ExitInitMode>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800c0f2:	7bfb      	ldrb	r3, [r7, #15]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d11b      	bne.n	800c130 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f022 0203 	bic.w	r2, r2, #3
 800c106:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	69da      	ldr	r2, [r3, #28]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	695b      	ldr	r3, [r3, #20]
 800c116:	431a      	orrs	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	430a      	orrs	r2, r1
 800c11e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	22ff      	movs	r2, #255	; 0xff
 800c126:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2201      	movs	r2, #1
 800c12c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800c130:	7bfb      	ldrb	r3, [r7, #15]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c13a:	b590      	push	{r4, r7, lr}
 800c13c:	b087      	sub	sp, #28
 800c13e:	af00      	add	r7, sp, #0
 800c140:	60f8      	str	r0, [r7, #12]
 800c142:	60b9      	str	r1, [r7, #8]
 800c144:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d101      	bne.n	800c154 <HAL_RTC_SetTime+0x1a>
 800c150:	2302      	movs	r3, #2
 800c152:	e08b      	b.n	800c26c <HAL_RTC_SetTime+0x132>
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2202      	movs	r2, #2
 800c160:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	22ca      	movs	r2, #202	; 0xca
 800c16a:	625a      	str	r2, [r3, #36]	; 0x24
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2253      	movs	r2, #83	; 0x53
 800c172:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f000 f9d3 	bl	800c520 <RTC_EnterInitMode>
 800c17a:	4603      	mov	r3, r0
 800c17c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c17e:	7cfb      	ldrb	r3, [r7, #19]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d163      	bne.n	800c24c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d126      	bne.n	800c1d8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c194:	2b00      	cmp	r3, #0
 800c196:	d102      	bne.n	800c19e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2200      	movs	r2, #0
 800c19c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f000 fa2e 	bl	800c604 <RTC_ByteToBcd2>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	785b      	ldrb	r3, [r3, #1]
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f000 fa27 	bl	800c604 <RTC_ByteToBcd2>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c1ba:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	789b      	ldrb	r3, [r3, #2]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f000 fa1f 	bl	800c604 <RTC_ByteToBcd2>
 800c1c6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c1c8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	78db      	ldrb	r3, [r3, #3]
 800c1d0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	617b      	str	r3, [r7, #20]
 800c1d6:	e018      	b.n	800c20a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	689b      	ldr	r3, [r3, #8]
 800c1de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d102      	bne.n	800c1ec <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	785b      	ldrb	r3, [r3, #1]
 800c1f6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c1f8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c1fe:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	78db      	ldrb	r3, [r3, #3]
 800c204:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c206:	4313      	orrs	r3, r2
 800c208:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c214:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c218:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	689a      	ldr	r2, [r3, #8]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c228:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	6899      	ldr	r1, [r3, #8]
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	68da      	ldr	r2, [r3, #12]
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	691b      	ldr	r3, [r3, #16]
 800c238:	431a      	orrs	r2, r3
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	430a      	orrs	r2, r1
 800c240:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f000 f9a0 	bl	800c588 <RTC_ExitInitMode>
 800c248:	4603      	mov	r3, r0
 800c24a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	22ff      	movs	r2, #255	; 0xff
 800c252:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c254:	7cfb      	ldrb	r3, [r7, #19]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d103      	bne.n	800c262 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2201      	movs	r2, #1
 800c25e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c26a:	7cfb      	ldrb	r3, [r7, #19]
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	371c      	adds	r7, #28
 800c270:	46bd      	mov	sp, r7
 800c272:	bd90      	pop	{r4, r7, pc}

0800c274 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b086      	sub	sp, #24
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	691b      	ldr	r3, [r3, #16]
 800c290:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c2a2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c2a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	0c1b      	lsrs	r3, r3, #16
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2b2:	b2da      	uxtb	r2, r3
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	0a1b      	lsrs	r3, r3, #8
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2c2:	b2da      	uxtb	r2, r3
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2d0:	b2da      	uxtb	r2, r3
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	0d9b      	lsrs	r3, r3, #22
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	f003 0301 	and.w	r3, r3, #1
 800c2e0:	b2da      	uxtb	r2, r3
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d11a      	bne.n	800c322 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f000 f9a7 	bl	800c644 <RTC_Bcd2ToByte>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	785b      	ldrb	r3, [r3, #1]
 800c302:	4618      	mov	r0, r3
 800c304:	f000 f99e 	bl	800c644 <RTC_Bcd2ToByte>
 800c308:	4603      	mov	r3, r0
 800c30a:	461a      	mov	r2, r3
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	789b      	ldrb	r3, [r3, #2]
 800c314:	4618      	mov	r0, r3
 800c316:	f000 f995 	bl	800c644 <RTC_Bcd2ToByte>
 800c31a:	4603      	mov	r3, r0
 800c31c:	461a      	mov	r2, r3
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c322:	2300      	movs	r3, #0
}
 800c324:	4618      	mov	r0, r3
 800c326:	3718      	adds	r7, #24
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c32c:	b590      	push	{r4, r7, lr}
 800c32e:	b087      	sub	sp, #28
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d101      	bne.n	800c346 <HAL_RTC_SetDate+0x1a>
 800c342:	2302      	movs	r3, #2
 800c344:	e075      	b.n	800c432 <HAL_RTC_SetDate+0x106>
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2201      	movs	r2, #1
 800c34a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2202      	movs	r2, #2
 800c352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10e      	bne.n	800c37a <HAL_RTC_SetDate+0x4e>
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	785b      	ldrb	r3, [r3, #1]
 800c360:	f003 0310 	and.w	r3, r3, #16
 800c364:	2b00      	cmp	r3, #0
 800c366:	d008      	beq.n	800c37a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	785b      	ldrb	r3, [r3, #1]
 800c36c:	f023 0310 	bic.w	r3, r3, #16
 800c370:	b2db      	uxtb	r3, r3
 800c372:	330a      	adds	r3, #10
 800c374:	b2da      	uxtb	r2, r3
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d11c      	bne.n	800c3ba <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	78db      	ldrb	r3, [r3, #3]
 800c384:	4618      	mov	r0, r3
 800c386:	f000 f93d 	bl	800c604 <RTC_ByteToBcd2>
 800c38a:	4603      	mov	r3, r0
 800c38c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	785b      	ldrb	r3, [r3, #1]
 800c392:	4618      	mov	r0, r3
 800c394:	f000 f936 	bl	800c604 <RTC_ByteToBcd2>
 800c398:	4603      	mov	r3, r0
 800c39a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c39c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	789b      	ldrb	r3, [r3, #2]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 f92e 	bl	800c604 <RTC_ByteToBcd2>
 800c3a8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c3aa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	617b      	str	r3, [r7, #20]
 800c3b8:	e00e      	b.n	800c3d8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	78db      	ldrb	r3, [r3, #3]
 800c3be:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	785b      	ldrb	r3, [r3, #1]
 800c3c4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c3c6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c3cc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	22ca      	movs	r2, #202	; 0xca
 800c3de:	625a      	str	r2, [r3, #36]	; 0x24
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	2253      	movs	r2, #83	; 0x53
 800c3e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f000 f899 	bl	800c520 <RTC_EnterInitMode>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c3f2:	7cfb      	ldrb	r3, [r7, #19]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10c      	bne.n	800c412 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c402:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c406:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f000 f8bd 	bl	800c588 <RTC_ExitInitMode>
 800c40e:	4603      	mov	r3, r0
 800c410:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	22ff      	movs	r2, #255	; 0xff
 800c418:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c41a:	7cfb      	ldrb	r3, [r7, #19]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d103      	bne.n	800c428 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2201      	movs	r2, #1
 800c424:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c430:	7cfb      	ldrb	r3, [r7, #19]
}
 800c432:	4618      	mov	r0, r3
 800c434:	371c      	adds	r7, #28
 800c436:	46bd      	mov	sp, r7
 800c438:	bd90      	pop	{r4, r7, pc}

0800c43a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b086      	sub	sp, #24
 800c43e:	af00      	add	r7, sp, #0
 800c440:	60f8      	str	r0, [r7, #12]
 800c442:	60b9      	str	r1, [r7, #8]
 800c444:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c450:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c454:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	0c1b      	lsrs	r3, r3, #16
 800c45a:	b2da      	uxtb	r2, r3
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	0a1b      	lsrs	r3, r3, #8
 800c464:	b2db      	uxtb	r3, r3
 800c466:	f003 031f 	and.w	r3, r3, #31
 800c46a:	b2da      	uxtb	r2, r3
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	b2db      	uxtb	r3, r3
 800c474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c478:	b2da      	uxtb	r2, r3
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	0b5b      	lsrs	r3, r3, #13
 800c482:	b2db      	uxtb	r3, r3
 800c484:	f003 0307 	and.w	r3, r3, #7
 800c488:	b2da      	uxtb	r2, r3
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d11a      	bne.n	800c4ca <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	78db      	ldrb	r3, [r3, #3]
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 f8d3 	bl	800c644 <RTC_Bcd2ToByte>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	785b      	ldrb	r3, [r3, #1]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f000 f8ca 	bl	800c644 <RTC_Bcd2ToByte>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	789b      	ldrb	r3, [r3, #2]
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f000 f8c1 	bl	800c644 <RTC_Bcd2ToByte>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c4ca:	2300      	movs	r3, #0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3718      	adds	r7, #24
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	68da      	ldr	r2, [r3, #12]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c4ea:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800c4ec:	f7fc fcf6 	bl	8008edc <HAL_GetTick>
 800c4f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c4f2:	e009      	b.n	800c508 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c4f4:	f7fc fcf2 	bl	8008edc <HAL_GetTick>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	1ad3      	subs	r3, r2, r3
 800c4fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c502:	d901      	bls.n	800c508 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800c504:	2303      	movs	r3, #3
 800c506:	e007      	b.n	800c518 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	68db      	ldr	r3, [r3, #12]
 800c50e:	f003 0320 	and.w	r3, r3, #32
 800c512:	2b00      	cmp	r3, #0
 800c514:	d0ee      	beq.n	800c4f4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800c516:	2300      	movs	r3, #0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3710      	adds	r7, #16
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c528:	2300      	movs	r3, #0
 800c52a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c536:	2b00      	cmp	r3, #0
 800c538:	d120      	bne.n	800c57c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f04f 32ff 	mov.w	r2, #4294967295
 800c542:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c544:	f7fc fcca 	bl	8008edc <HAL_GetTick>
 800c548:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c54a:	e00d      	b.n	800c568 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c54c:	f7fc fcc6 	bl	8008edc <HAL_GetTick>
 800c550:	4602      	mov	r2, r0
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	1ad3      	subs	r3, r2, r3
 800c556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c55a:	d905      	bls.n	800c568 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c55c:	2303      	movs	r3, #3
 800c55e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2203      	movs	r2, #3
 800c564:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c572:	2b00      	cmp	r3, #0
 800c574:	d102      	bne.n	800c57c <RTC_EnterInitMode+0x5c>
 800c576:	7bfb      	ldrb	r3, [r7, #15]
 800c578:	2b03      	cmp	r3, #3
 800c57a:	d1e7      	bne.n	800c54c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800c57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
	...

0800c588 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c590:	2300      	movs	r3, #0
 800c592:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c594:	4b1a      	ldr	r3, [pc, #104]	; (800c600 <RTC_ExitInitMode+0x78>)
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	4a19      	ldr	r2, [pc, #100]	; (800c600 <RTC_ExitInitMode+0x78>)
 800c59a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c59e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c5a0:	4b17      	ldr	r3, [pc, #92]	; (800c600 <RTC_ExitInitMode+0x78>)
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	f003 0320 	and.w	r3, r3, #32
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10c      	bne.n	800c5c6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f7ff ff91 	bl	800c4d4 <HAL_RTC_WaitForSynchro>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d01e      	beq.n	800c5f6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2203      	movs	r2, #3
 800c5bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c5c0:	2303      	movs	r3, #3
 800c5c2:	73fb      	strb	r3, [r7, #15]
 800c5c4:	e017      	b.n	800c5f6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c5c6:	4b0e      	ldr	r3, [pc, #56]	; (800c600 <RTC_ExitInitMode+0x78>)
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	4a0d      	ldr	r2, [pc, #52]	; (800c600 <RTC_ExitInitMode+0x78>)
 800c5cc:	f023 0320 	bic.w	r3, r3, #32
 800c5d0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f7ff ff7e 	bl	800c4d4 <HAL_RTC_WaitForSynchro>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d005      	beq.n	800c5ea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2203      	movs	r2, #3
 800c5e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c5e6:	2303      	movs	r3, #3
 800c5e8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c5ea:	4b05      	ldr	r3, [pc, #20]	; (800c600 <RTC_ExitInitMode+0x78>)
 800c5ec:	689b      	ldr	r3, [r3, #8]
 800c5ee:	4a04      	ldr	r2, [pc, #16]	; (800c600 <RTC_ExitInitMode+0x78>)
 800c5f0:	f043 0320 	orr.w	r3, r3, #32
 800c5f4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	40002800 	.word	0x40002800

0800c604 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	4603      	mov	r3, r0
 800c60c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c60e:	2300      	movs	r3, #0
 800c610:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800c612:	79fb      	ldrb	r3, [r7, #7]
 800c614:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800c616:	e005      	b.n	800c624 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	3301      	adds	r3, #1
 800c61c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800c61e:	7afb      	ldrb	r3, [r7, #11]
 800c620:	3b0a      	subs	r3, #10
 800c622:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800c624:	7afb      	ldrb	r3, [r7, #11]
 800c626:	2b09      	cmp	r3, #9
 800c628:	d8f6      	bhi.n	800c618 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	011b      	lsls	r3, r3, #4
 800c630:	b2da      	uxtb	r2, r3
 800c632:	7afb      	ldrb	r3, [r7, #11]
 800c634:	4313      	orrs	r3, r2
 800c636:	b2db      	uxtb	r3, r3
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3714      	adds	r7, #20
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c644:	b480      	push	{r7}
 800c646:	b085      	sub	sp, #20
 800c648:	af00      	add	r7, sp, #0
 800c64a:	4603      	mov	r3, r0
 800c64c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c64e:	79fb      	ldrb	r3, [r7, #7]
 800c650:	091b      	lsrs	r3, r3, #4
 800c652:	b2db      	uxtb	r3, r3
 800c654:	461a      	mov	r2, r3
 800c656:	0092      	lsls	r2, r2, #2
 800c658:	4413      	add	r3, r2
 800c65a:	005b      	lsls	r3, r3, #1
 800c65c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800c65e:	79fb      	ldrb	r3, [r7, #7]
 800c660:	f003 030f 	and.w	r3, r3, #15
 800c664:	b2da      	uxtb	r2, r3
 800c666:	7bfb      	ldrb	r3, [r7, #15]
 800c668:	4413      	add	r3, r2
 800c66a:	b2db      	uxtb	r3, r3
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3714      	adds	r7, #20
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d101      	bne.n	800c68a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c686:	2301      	movs	r3, #1
 800c688:	e049      	b.n	800c71e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c690:	b2db      	uxtb	r3, r3
 800c692:	2b00      	cmp	r3, #0
 800c694:	d106      	bne.n	800c6a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f7f6 fd3a 	bl	8003118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2202      	movs	r2, #2
 800c6a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	3304      	adds	r3, #4
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	4610      	mov	r0, r2
 800c6b8:	f000 fae6 	bl	800cc88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2201      	movs	r2, #1
 800c6c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2201      	movs	r2, #1
 800c700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2201      	movs	r2, #1
 800c708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2201      	movs	r2, #1
 800c710:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2201      	movs	r2, #1
 800c718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3708      	adds	r7, #8
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
	...

0800c728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c736:	b2db      	uxtb	r3, r3
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d001      	beq.n	800c740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c73c:	2301      	movs	r3, #1
 800c73e:	e04f      	b.n	800c7e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2202      	movs	r2, #2
 800c744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	68da      	ldr	r2, [r3, #12]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f042 0201 	orr.w	r2, r2, #1
 800c756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a23      	ldr	r2, [pc, #140]	; (800c7ec <HAL_TIM_Base_Start_IT+0xc4>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d01d      	beq.n	800c79e <HAL_TIM_Base_Start_IT+0x76>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c76a:	d018      	beq.n	800c79e <HAL_TIM_Base_Start_IT+0x76>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a1f      	ldr	r2, [pc, #124]	; (800c7f0 <HAL_TIM_Base_Start_IT+0xc8>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d013      	beq.n	800c79e <HAL_TIM_Base_Start_IT+0x76>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a1e      	ldr	r2, [pc, #120]	; (800c7f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d00e      	beq.n	800c79e <HAL_TIM_Base_Start_IT+0x76>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a1c      	ldr	r2, [pc, #112]	; (800c7f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d009      	beq.n	800c79e <HAL_TIM_Base_Start_IT+0x76>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a1b      	ldr	r2, [pc, #108]	; (800c7fc <HAL_TIM_Base_Start_IT+0xd4>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d004      	beq.n	800c79e <HAL_TIM_Base_Start_IT+0x76>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a19      	ldr	r2, [pc, #100]	; (800c800 <HAL_TIM_Base_Start_IT+0xd8>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d115      	bne.n	800c7ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	689a      	ldr	r2, [r3, #8]
 800c7a4:	4b17      	ldr	r3, [pc, #92]	; (800c804 <HAL_TIM_Base_Start_IT+0xdc>)
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2b06      	cmp	r3, #6
 800c7ae:	d015      	beq.n	800c7dc <HAL_TIM_Base_Start_IT+0xb4>
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7b6:	d011      	beq.n	800c7dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f042 0201 	orr.w	r2, r2, #1
 800c7c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7c8:	e008      	b.n	800c7dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f042 0201 	orr.w	r2, r2, #1
 800c7d8:	601a      	str	r2, [r3, #0]
 800c7da:	e000      	b.n	800c7de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3714      	adds	r7, #20
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr
 800c7ec:	40012c00 	.word	0x40012c00
 800c7f0:	40000400 	.word	0x40000400
 800c7f4:	40000800 	.word	0x40000800
 800c7f8:	40000c00 	.word	0x40000c00
 800c7fc:	40013400 	.word	0x40013400
 800c800:	40014000 	.word	0x40014000
 800c804:	00010007 	.word	0x00010007

0800c808 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c808:	b480      	push	{r7}
 800c80a:	b083      	sub	sp, #12
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68da      	ldr	r2, [r3, #12]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f022 0201 	bic.w	r2, r2, #1
 800c81e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	6a1a      	ldr	r2, [r3, #32]
 800c826:	f241 1311 	movw	r3, #4369	; 0x1111
 800c82a:	4013      	ands	r3, r2
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d10f      	bne.n	800c850 <HAL_TIM_Base_Stop_IT+0x48>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	6a1a      	ldr	r2, [r3, #32]
 800c836:	f240 4344 	movw	r3, #1092	; 0x444
 800c83a:	4013      	ands	r3, r2
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d107      	bne.n	800c850 <HAL_TIM_Base_Stop_IT+0x48>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f022 0201 	bic.w	r2, r2, #1
 800c84e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	370c      	adds	r7, #12
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr

0800c866 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b082      	sub	sp, #8
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	f003 0302 	and.w	r3, r3, #2
 800c878:	2b02      	cmp	r3, #2
 800c87a:	d122      	bne.n	800c8c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	f003 0302 	and.w	r3, r3, #2
 800c886:	2b02      	cmp	r3, #2
 800c888:	d11b      	bne.n	800c8c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f06f 0202 	mvn.w	r2, #2
 800c892:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2201      	movs	r2, #1
 800c898:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	699b      	ldr	r3, [r3, #24]
 800c8a0:	f003 0303 	and.w	r3, r3, #3
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d003      	beq.n	800c8b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f9ce 	bl	800cc4a <HAL_TIM_IC_CaptureCallback>
 800c8ae:	e005      	b.n	800c8bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 f9c0 	bl	800cc36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 f9d1 	bl	800cc5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	691b      	ldr	r3, [r3, #16]
 800c8c8:	f003 0304 	and.w	r3, r3, #4
 800c8cc:	2b04      	cmp	r3, #4
 800c8ce:	d122      	bne.n	800c916 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	68db      	ldr	r3, [r3, #12]
 800c8d6:	f003 0304 	and.w	r3, r3, #4
 800c8da:	2b04      	cmp	r3, #4
 800c8dc:	d11b      	bne.n	800c916 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f06f 0204 	mvn.w	r2, #4
 800c8e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2202      	movs	r2, #2
 800c8ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	699b      	ldr	r3, [r3, #24]
 800c8f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d003      	beq.n	800c904 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f9a4 	bl	800cc4a <HAL_TIM_IC_CaptureCallback>
 800c902:	e005      	b.n	800c910 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f000 f996 	bl	800cc36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f9a7 	bl	800cc5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	f003 0308 	and.w	r3, r3, #8
 800c920:	2b08      	cmp	r3, #8
 800c922:	d122      	bne.n	800c96a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	f003 0308 	and.w	r3, r3, #8
 800c92e:	2b08      	cmp	r3, #8
 800c930:	d11b      	bne.n	800c96a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f06f 0208 	mvn.w	r2, #8
 800c93a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2204      	movs	r2, #4
 800c940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	69db      	ldr	r3, [r3, #28]
 800c948:	f003 0303 	and.w	r3, r3, #3
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d003      	beq.n	800c958 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 f97a 	bl	800cc4a <HAL_TIM_IC_CaptureCallback>
 800c956:	e005      	b.n	800c964 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 f96c 	bl	800cc36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 f97d 	bl	800cc5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	691b      	ldr	r3, [r3, #16]
 800c970:	f003 0310 	and.w	r3, r3, #16
 800c974:	2b10      	cmp	r3, #16
 800c976:	d122      	bne.n	800c9be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	f003 0310 	and.w	r3, r3, #16
 800c982:	2b10      	cmp	r3, #16
 800c984:	d11b      	bne.n	800c9be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f06f 0210 	mvn.w	r2, #16
 800c98e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2208      	movs	r2, #8
 800c994:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	69db      	ldr	r3, [r3, #28]
 800c99c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d003      	beq.n	800c9ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 f950 	bl	800cc4a <HAL_TIM_IC_CaptureCallback>
 800c9aa:	e005      	b.n	800c9b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 f942 	bl	800cc36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 f953 	bl	800cc5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	691b      	ldr	r3, [r3, #16]
 800c9c4:	f003 0301 	and.w	r3, r3, #1
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d10e      	bne.n	800c9ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	f003 0301 	and.w	r3, r3, #1
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d107      	bne.n	800c9ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f06f 0201 	mvn.w	r2, #1
 800c9e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f7f4 fab1 	bl	8000f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9f4:	2b80      	cmp	r3, #128	; 0x80
 800c9f6:	d10e      	bne.n	800ca16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	68db      	ldr	r3, [r3, #12]
 800c9fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca02:	2b80      	cmp	r3, #128	; 0x80
 800ca04:	d107      	bne.n	800ca16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ca0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 faff 	bl	800d014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	691b      	ldr	r3, [r3, #16]
 800ca1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca24:	d10e      	bne.n	800ca44 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca30:	2b80      	cmp	r3, #128	; 0x80
 800ca32:	d107      	bne.n	800ca44 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ca3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 faf2 	bl	800d028 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	691b      	ldr	r3, [r3, #16]
 800ca4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca4e:	2b40      	cmp	r3, #64	; 0x40
 800ca50:	d10e      	bne.n	800ca70 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	68db      	ldr	r3, [r3, #12]
 800ca58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca5c:	2b40      	cmp	r3, #64	; 0x40
 800ca5e:	d107      	bne.n	800ca70 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ca68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 f901 	bl	800cc72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	691b      	ldr	r3, [r3, #16]
 800ca76:	f003 0320 	and.w	r3, r3, #32
 800ca7a:	2b20      	cmp	r3, #32
 800ca7c:	d10e      	bne.n	800ca9c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	f003 0320 	and.w	r3, r3, #32
 800ca88:	2b20      	cmp	r3, #32
 800ca8a:	d107      	bne.n	800ca9c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f06f 0220 	mvn.w	r2, #32
 800ca94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 fab2 	bl	800d000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca9c:	bf00      	nop
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800caae:	2300      	movs	r3, #0
 800cab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d101      	bne.n	800cac0 <HAL_TIM_ConfigClockSource+0x1c>
 800cabc:	2302      	movs	r3, #2
 800cabe:	e0b6      	b.n	800cc2e <HAL_TIM_ConfigClockSource+0x18a>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2202      	movs	r2, #2
 800cacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cade:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800caea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cafc:	d03e      	beq.n	800cb7c <HAL_TIM_ConfigClockSource+0xd8>
 800cafe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb02:	f200 8087 	bhi.w	800cc14 <HAL_TIM_ConfigClockSource+0x170>
 800cb06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb0a:	f000 8086 	beq.w	800cc1a <HAL_TIM_ConfigClockSource+0x176>
 800cb0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb12:	d87f      	bhi.n	800cc14 <HAL_TIM_ConfigClockSource+0x170>
 800cb14:	2b70      	cmp	r3, #112	; 0x70
 800cb16:	d01a      	beq.n	800cb4e <HAL_TIM_ConfigClockSource+0xaa>
 800cb18:	2b70      	cmp	r3, #112	; 0x70
 800cb1a:	d87b      	bhi.n	800cc14 <HAL_TIM_ConfigClockSource+0x170>
 800cb1c:	2b60      	cmp	r3, #96	; 0x60
 800cb1e:	d050      	beq.n	800cbc2 <HAL_TIM_ConfigClockSource+0x11e>
 800cb20:	2b60      	cmp	r3, #96	; 0x60
 800cb22:	d877      	bhi.n	800cc14 <HAL_TIM_ConfigClockSource+0x170>
 800cb24:	2b50      	cmp	r3, #80	; 0x50
 800cb26:	d03c      	beq.n	800cba2 <HAL_TIM_ConfigClockSource+0xfe>
 800cb28:	2b50      	cmp	r3, #80	; 0x50
 800cb2a:	d873      	bhi.n	800cc14 <HAL_TIM_ConfigClockSource+0x170>
 800cb2c:	2b40      	cmp	r3, #64	; 0x40
 800cb2e:	d058      	beq.n	800cbe2 <HAL_TIM_ConfigClockSource+0x13e>
 800cb30:	2b40      	cmp	r3, #64	; 0x40
 800cb32:	d86f      	bhi.n	800cc14 <HAL_TIM_ConfigClockSource+0x170>
 800cb34:	2b30      	cmp	r3, #48	; 0x30
 800cb36:	d064      	beq.n	800cc02 <HAL_TIM_ConfigClockSource+0x15e>
 800cb38:	2b30      	cmp	r3, #48	; 0x30
 800cb3a:	d86b      	bhi.n	800cc14 <HAL_TIM_ConfigClockSource+0x170>
 800cb3c:	2b20      	cmp	r3, #32
 800cb3e:	d060      	beq.n	800cc02 <HAL_TIM_ConfigClockSource+0x15e>
 800cb40:	2b20      	cmp	r3, #32
 800cb42:	d867      	bhi.n	800cc14 <HAL_TIM_ConfigClockSource+0x170>
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d05c      	beq.n	800cc02 <HAL_TIM_ConfigClockSource+0x15e>
 800cb48:	2b10      	cmp	r3, #16
 800cb4a:	d05a      	beq.n	800cc02 <HAL_TIM_ConfigClockSource+0x15e>
 800cb4c:	e062      	b.n	800cc14 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6818      	ldr	r0, [r3, #0]
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	6899      	ldr	r1, [r3, #8]
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	685a      	ldr	r2, [r3, #4]
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	f000 f9a7 	bl	800ceb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cb70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	609a      	str	r2, [r3, #8]
      break;
 800cb7a:	e04f      	b.n	800cc1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6818      	ldr	r0, [r3, #0]
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	6899      	ldr	r1, [r3, #8]
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	685a      	ldr	r2, [r3, #4]
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	f000 f990 	bl	800ceb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	689a      	ldr	r2, [r3, #8]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb9e:	609a      	str	r2, [r3, #8]
      break;
 800cba0:	e03c      	b.n	800cc1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6818      	ldr	r0, [r3, #0]
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	6859      	ldr	r1, [r3, #4]
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	f000 f904 	bl	800cdbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2150      	movs	r1, #80	; 0x50
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f000 f95d 	bl	800ce7a <TIM_ITRx_SetConfig>
      break;
 800cbc0:	e02c      	b.n	800cc1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6818      	ldr	r0, [r3, #0]
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	6859      	ldr	r1, [r3, #4]
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	461a      	mov	r2, r3
 800cbd0:	f000 f923 	bl	800ce1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2160      	movs	r1, #96	; 0x60
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f000 f94d 	bl	800ce7a <TIM_ITRx_SetConfig>
      break;
 800cbe0:	e01c      	b.n	800cc1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6818      	ldr	r0, [r3, #0]
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	6859      	ldr	r1, [r3, #4]
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	461a      	mov	r2, r3
 800cbf0:	f000 f8e4 	bl	800cdbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2140      	movs	r1, #64	; 0x40
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f000 f93d 	bl	800ce7a <TIM_ITRx_SetConfig>
      break;
 800cc00:	e00c      	b.n	800cc1c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	4610      	mov	r0, r2
 800cc0e:	f000 f934 	bl	800ce7a <TIM_ITRx_SetConfig>
      break;
 800cc12:	e003      	b.n	800cc1c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	73fb      	strb	r3, [r7, #15]
      break;
 800cc18:	e000      	b.n	800cc1c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800cc1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cc36:	b480      	push	{r7}
 800cc38:	b083      	sub	sp, #12
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cc3e:	bf00      	nop
 800cc40:	370c      	adds	r7, #12
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr

0800cc4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cc4a:	b480      	push	{r7}
 800cc4c:	b083      	sub	sp, #12
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cc52:	bf00      	nop
 800cc54:	370c      	adds	r7, #12
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr

0800cc5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc5e:	b480      	push	{r7}
 800cc60:	b083      	sub	sp, #12
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc66:	bf00      	nop
 800cc68:	370c      	adds	r7, #12
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr

0800cc72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cc72:	b480      	push	{r7}
 800cc74:	b083      	sub	sp, #12
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cc7a:	bf00      	nop
 800cc7c:	370c      	adds	r7, #12
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr
	...

0800cc88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4a40      	ldr	r2, [pc, #256]	; (800cd9c <TIM_Base_SetConfig+0x114>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d013      	beq.n	800ccc8 <TIM_Base_SetConfig+0x40>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cca6:	d00f      	beq.n	800ccc8 <TIM_Base_SetConfig+0x40>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a3d      	ldr	r2, [pc, #244]	; (800cda0 <TIM_Base_SetConfig+0x118>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d00b      	beq.n	800ccc8 <TIM_Base_SetConfig+0x40>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4a3c      	ldr	r2, [pc, #240]	; (800cda4 <TIM_Base_SetConfig+0x11c>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d007      	beq.n	800ccc8 <TIM_Base_SetConfig+0x40>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	4a3b      	ldr	r2, [pc, #236]	; (800cda8 <TIM_Base_SetConfig+0x120>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d003      	beq.n	800ccc8 <TIM_Base_SetConfig+0x40>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	4a3a      	ldr	r2, [pc, #232]	; (800cdac <TIM_Base_SetConfig+0x124>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d108      	bne.n	800ccda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	68fa      	ldr	r2, [r7, #12]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4a2f      	ldr	r2, [pc, #188]	; (800cd9c <TIM_Base_SetConfig+0x114>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d01f      	beq.n	800cd22 <TIM_Base_SetConfig+0x9a>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cce8:	d01b      	beq.n	800cd22 <TIM_Base_SetConfig+0x9a>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4a2c      	ldr	r2, [pc, #176]	; (800cda0 <TIM_Base_SetConfig+0x118>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d017      	beq.n	800cd22 <TIM_Base_SetConfig+0x9a>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4a2b      	ldr	r2, [pc, #172]	; (800cda4 <TIM_Base_SetConfig+0x11c>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d013      	beq.n	800cd22 <TIM_Base_SetConfig+0x9a>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	4a2a      	ldr	r2, [pc, #168]	; (800cda8 <TIM_Base_SetConfig+0x120>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d00f      	beq.n	800cd22 <TIM_Base_SetConfig+0x9a>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4a29      	ldr	r2, [pc, #164]	; (800cdac <TIM_Base_SetConfig+0x124>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d00b      	beq.n	800cd22 <TIM_Base_SetConfig+0x9a>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4a28      	ldr	r2, [pc, #160]	; (800cdb0 <TIM_Base_SetConfig+0x128>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d007      	beq.n	800cd22 <TIM_Base_SetConfig+0x9a>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	4a27      	ldr	r2, [pc, #156]	; (800cdb4 <TIM_Base_SetConfig+0x12c>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d003      	beq.n	800cd22 <TIM_Base_SetConfig+0x9a>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4a26      	ldr	r2, [pc, #152]	; (800cdb8 <TIM_Base_SetConfig+0x130>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d108      	bne.n	800cd34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	4313      	orrs	r3, r2
 800cd32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	695b      	ldr	r3, [r3, #20]
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	689a      	ldr	r2, [r3, #8]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4a10      	ldr	r2, [pc, #64]	; (800cd9c <TIM_Base_SetConfig+0x114>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d00f      	beq.n	800cd80 <TIM_Base_SetConfig+0xf8>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	4a12      	ldr	r2, [pc, #72]	; (800cdac <TIM_Base_SetConfig+0x124>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d00b      	beq.n	800cd80 <TIM_Base_SetConfig+0xf8>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4a11      	ldr	r2, [pc, #68]	; (800cdb0 <TIM_Base_SetConfig+0x128>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d007      	beq.n	800cd80 <TIM_Base_SetConfig+0xf8>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4a10      	ldr	r2, [pc, #64]	; (800cdb4 <TIM_Base_SetConfig+0x12c>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d003      	beq.n	800cd80 <TIM_Base_SetConfig+0xf8>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4a0f      	ldr	r2, [pc, #60]	; (800cdb8 <TIM_Base_SetConfig+0x130>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d103      	bne.n	800cd88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	691a      	ldr	r2, [r3, #16]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	615a      	str	r2, [r3, #20]
}
 800cd8e:	bf00      	nop
 800cd90:	3714      	adds	r7, #20
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	40012c00 	.word	0x40012c00
 800cda0:	40000400 	.word	0x40000400
 800cda4:	40000800 	.word	0x40000800
 800cda8:	40000c00 	.word	0x40000c00
 800cdac:	40013400 	.word	0x40013400
 800cdb0:	40014000 	.word	0x40014000
 800cdb4:	40014400 	.word	0x40014400
 800cdb8:	40014800 	.word	0x40014800

0800cdbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b087      	sub	sp, #28
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	6a1b      	ldr	r3, [r3, #32]
 800cdcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6a1b      	ldr	r3, [r3, #32]
 800cdd2:	f023 0201 	bic.w	r2, r3, #1
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	699b      	ldr	r3, [r3, #24]
 800cdde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cde6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	011b      	lsls	r3, r3, #4
 800cdec:	693a      	ldr	r2, [r7, #16]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	f023 030a 	bic.w	r3, r3, #10
 800cdf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cdfa:	697a      	ldr	r2, [r7, #20]
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	693a      	ldr	r2, [r7, #16]
 800ce06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	697a      	ldr	r2, [r7, #20]
 800ce0c:	621a      	str	r2, [r3, #32]
}
 800ce0e:	bf00      	nop
 800ce10:	371c      	adds	r7, #28
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr

0800ce1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce1a:	b480      	push	{r7}
 800ce1c:	b087      	sub	sp, #28
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	60f8      	str	r0, [r7, #12]
 800ce22:	60b9      	str	r1, [r7, #8]
 800ce24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	6a1b      	ldr	r3, [r3, #32]
 800ce2a:	f023 0210 	bic.w	r2, r3, #16
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	699b      	ldr	r3, [r3, #24]
 800ce36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	6a1b      	ldr	r3, [r3, #32]
 800ce3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	031b      	lsls	r3, r3, #12
 800ce4a:	697a      	ldr	r2, [r7, #20]
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	011b      	lsls	r3, r3, #4
 800ce5c:	693a      	ldr	r2, [r7, #16]
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	697a      	ldr	r2, [r7, #20]
 800ce66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	693a      	ldr	r2, [r7, #16]
 800ce6c:	621a      	str	r2, [r3, #32]
}
 800ce6e:	bf00      	nop
 800ce70:	371c      	adds	r7, #28
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr

0800ce7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce7a:	b480      	push	{r7}
 800ce7c:	b085      	sub	sp, #20
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
 800ce82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	689b      	ldr	r3, [r3, #8]
 800ce88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce92:	683a      	ldr	r2, [r7, #0]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	4313      	orrs	r3, r2
 800ce98:	f043 0307 	orr.w	r3, r3, #7
 800ce9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	609a      	str	r2, [r3, #8]
}
 800cea4:	bf00      	nop
 800cea6:	3714      	adds	r7, #20
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b087      	sub	sp, #28
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	607a      	str	r2, [r7, #4]
 800cebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ceca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	021a      	lsls	r2, r3, #8
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	431a      	orrs	r2, r3
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	4313      	orrs	r3, r2
 800ced8:	697a      	ldr	r2, [r7, #20]
 800ceda:	4313      	orrs	r3, r2
 800cedc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	697a      	ldr	r2, [r7, #20]
 800cee2:	609a      	str	r2, [r3, #8]
}
 800cee4:	bf00      	nop
 800cee6:	371c      	adds	r7, #28
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d101      	bne.n	800cf08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf04:	2302      	movs	r3, #2
 800cf06:	e068      	b.n	800cfda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2202      	movs	r2, #2
 800cf14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4a2e      	ldr	r2, [pc, #184]	; (800cfe8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d004      	beq.n	800cf3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	4a2d      	ldr	r2, [pc, #180]	; (800cfec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d108      	bne.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cf42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	68fa      	ldr	r2, [r7, #12]
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4a1e      	ldr	r2, [pc, #120]	; (800cfe8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d01d      	beq.n	800cfae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf7a:	d018      	beq.n	800cfae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4a1b      	ldr	r2, [pc, #108]	; (800cff0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d013      	beq.n	800cfae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4a1a      	ldr	r2, [pc, #104]	; (800cff4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d00e      	beq.n	800cfae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	4a18      	ldr	r2, [pc, #96]	; (800cff8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d009      	beq.n	800cfae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4a13      	ldr	r2, [pc, #76]	; (800cfec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d004      	beq.n	800cfae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a14      	ldr	r2, [pc, #80]	; (800cffc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d10c      	bne.n	800cfc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	689b      	ldr	r3, [r3, #8]
 800cfba:	68ba      	ldr	r2, [r7, #8]
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	68ba      	ldr	r2, [r7, #8]
 800cfc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2201      	movs	r2, #1
 800cfcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3714      	adds	r7, #20
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	40012c00 	.word	0x40012c00
 800cfec:	40013400 	.word	0x40013400
 800cff0:	40000400 	.word	0x40000400
 800cff4:	40000800 	.word	0x40000800
 800cff8:	40000c00 	.word	0x40000c00
 800cffc:	40014000 	.word	0x40014000

0800d000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d008:	bf00      	nop
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d01c:	bf00      	nop
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d030:	bf00      	nop
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d101      	bne.n	800d04e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d04a:	2301      	movs	r3, #1
 800d04c:	e040      	b.n	800d0d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d052:	2b00      	cmp	r3, #0
 800d054:	d106      	bne.n	800d064 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 f83a 	bl	800d0d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2224      	movs	r2, #36	; 0x24
 800d068:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f022 0201 	bic.w	r2, r2, #1
 800d078:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 f94a 	bl	800d314 <UART_SetConfig>
 800d080:	4603      	mov	r3, r0
 800d082:	2b01      	cmp	r3, #1
 800d084:	d101      	bne.n	800d08a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d086:	2301      	movs	r3, #1
 800d088:	e022      	b.n	800d0d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d002      	beq.n	800d098 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 fbc8 	bl	800d828 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	685a      	ldr	r2, [r3, #4]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d0a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	689a      	ldr	r2, [r3, #8]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d0b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f042 0201 	orr.w	r2, r2, #1
 800d0c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fc4f 	bl	800d96c <UART_CheckIdleState>
 800d0ce:	4603      	mov	r3, r0
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800d0e0:	bf00      	nop
 800d0e2:	370c      	adds	r7, #12
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b08a      	sub	sp, #40	; 0x28
 800d0f0:	af02      	add	r7, sp, #8
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	603b      	str	r3, [r7, #0]
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d100:	2b20      	cmp	r3, #32
 800d102:	f040 8082 	bne.w	800d20a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d002      	beq.n	800d112 <HAL_UART_Transmit+0x26>
 800d10c:	88fb      	ldrh	r3, [r7, #6]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d101      	bne.n	800d116 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d112:	2301      	movs	r3, #1
 800d114:	e07a      	b.n	800d20c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d101      	bne.n	800d124 <HAL_UART_Transmit+0x38>
 800d120:	2302      	movs	r3, #2
 800d122:	e073      	b.n	800d20c <HAL_UART_Transmit+0x120>
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2201      	movs	r2, #1
 800d128:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2221      	movs	r2, #33	; 0x21
 800d138:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d13a:	f7fb fecf 	bl	8008edc <HAL_GetTick>
 800d13e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	88fa      	ldrh	r2, [r7, #6]
 800d144:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	88fa      	ldrh	r2, [r7, #6]
 800d14c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	689b      	ldr	r3, [r3, #8]
 800d154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d158:	d108      	bne.n	800d16c <HAL_UART_Transmit+0x80>
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d104      	bne.n	800d16c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800d162:	2300      	movs	r3, #0
 800d164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	61bb      	str	r3, [r7, #24]
 800d16a:	e003      	b.n	800d174 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d170:	2300      	movs	r3, #0
 800d172:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2200      	movs	r2, #0
 800d178:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800d17c:	e02d      	b.n	800d1da <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	2200      	movs	r2, #0
 800d186:	2180      	movs	r1, #128	; 0x80
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f000 fc38 	bl	800d9fe <UART_WaitOnFlagUntilTimeout>
 800d18e:	4603      	mov	r3, r0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d001      	beq.n	800d198 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800d194:	2303      	movs	r3, #3
 800d196:	e039      	b.n	800d20c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d10b      	bne.n	800d1b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d19e:	69bb      	ldr	r3, [r7, #24]
 800d1a0:	881a      	ldrh	r2, [r3, #0]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1aa:	b292      	uxth	r2, r2
 800d1ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	3302      	adds	r3, #2
 800d1b2:	61bb      	str	r3, [r7, #24]
 800d1b4:	e008      	b.n	800d1c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	781a      	ldrb	r2, [r3, #0]
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	b292      	uxth	r2, r2
 800d1c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1cb      	bne.n	800d17e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	9300      	str	r3, [sp, #0]
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	2140      	movs	r1, #64	; 0x40
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	f000 fc04 	bl	800d9fe <UART_WaitOnFlagUntilTimeout>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d001      	beq.n	800d200 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800d1fc:	2303      	movs	r3, #3
 800d1fe:	e005      	b.n	800d20c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2220      	movs	r2, #32
 800d204:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800d206:	2300      	movs	r3, #0
 800d208:	e000      	b.n	800d20c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800d20a:	2302      	movs	r3, #2
  }
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3720      	adds	r7, #32
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b08a      	sub	sp, #40	; 0x28
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	4613      	mov	r3, r2
 800d220:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d226:	2b20      	cmp	r3, #32
 800d228:	d142      	bne.n	800d2b0 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d002      	beq.n	800d236 <HAL_UART_Receive_DMA+0x22>
 800d230:	88fb      	ldrh	r3, [r7, #6]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d101      	bne.n	800d23a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800d236:	2301      	movs	r3, #1
 800d238:	e03b      	b.n	800d2b2 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d240:	2b01      	cmp	r3, #1
 800d242:	d101      	bne.n	800d248 <HAL_UART_Receive_DMA+0x34>
 800d244:	2302      	movs	r3, #2
 800d246:	e034      	b.n	800d2b2 <HAL_UART_Receive_DMA+0x9e>
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2201      	movs	r2, #1
 800d24c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2200      	movs	r2, #0
 800d254:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	4a18      	ldr	r2, [pc, #96]	; (800d2bc <HAL_UART_Receive_DMA+0xa8>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d01f      	beq.n	800d2a0 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d018      	beq.n	800d2a0 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	e853 3f00 	ldrex	r3, [r3]
 800d27a:	613b      	str	r3, [r7, #16]
   return(result);
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d282:	627b      	str	r3, [r7, #36]	; 0x24
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	461a      	mov	r2, r3
 800d28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28c:	623b      	str	r3, [r7, #32]
 800d28e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d290:	69f9      	ldr	r1, [r7, #28]
 800d292:	6a3a      	ldr	r2, [r7, #32]
 800d294:	e841 2300 	strex	r3, r2, [r1]
 800d298:	61bb      	str	r3, [r7, #24]
   return(result);
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d1e6      	bne.n	800d26e <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d2a0:	88fb      	ldrh	r3, [r7, #6]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	68b9      	ldr	r1, [r7, #8]
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f000 fc6e 	bl	800db88 <UART_Start_Receive_DMA>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	e000      	b.n	800d2b2 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800d2b0:	2302      	movs	r3, #2
  }
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3728      	adds	r7, #40	; 0x28
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	40008000 	.word	0x40008000

0800d2c0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b083      	sub	sp, #12
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d2c8:	bf00      	nop
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr

0800d2d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d2dc:	bf00      	nop
 800d2de:	370c      	adds	r7, #12
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr

0800d2e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b083      	sub	sp, #12
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d2f0:	bf00      	nop
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	460b      	mov	r3, r1
 800d306:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d308:	bf00      	nop
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d314:	b5b0      	push	{r4, r5, r7, lr}
 800d316:	b088      	sub	sp, #32
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d31c:	2300      	movs	r3, #0
 800d31e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	689a      	ldr	r2, [r3, #8]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	691b      	ldr	r3, [r3, #16]
 800d328:	431a      	orrs	r2, r3
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	695b      	ldr	r3, [r3, #20]
 800d32e:	431a      	orrs	r2, r3
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	69db      	ldr	r3, [r3, #28]
 800d334:	4313      	orrs	r3, r2
 800d336:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	4bad      	ldr	r3, [pc, #692]	; (800d5f4 <UART_SetConfig+0x2e0>)
 800d340:	4013      	ands	r3, r2
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	6812      	ldr	r2, [r2, #0]
 800d346:	69f9      	ldr	r1, [r7, #28]
 800d348:	430b      	orrs	r3, r1
 800d34a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	68da      	ldr	r2, [r3, #12]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	430a      	orrs	r2, r1
 800d360:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	699b      	ldr	r3, [r3, #24]
 800d366:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4aa2      	ldr	r2, [pc, #648]	; (800d5f8 <UART_SetConfig+0x2e4>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d004      	beq.n	800d37c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6a1b      	ldr	r3, [r3, #32]
 800d376:	69fa      	ldr	r2, [r7, #28]
 800d378:	4313      	orrs	r3, r2
 800d37a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	69fa      	ldr	r2, [r7, #28]
 800d38c:	430a      	orrs	r2, r1
 800d38e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a99      	ldr	r2, [pc, #612]	; (800d5fc <UART_SetConfig+0x2e8>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d121      	bne.n	800d3de <UART_SetConfig+0xca>
 800d39a:	4b99      	ldr	r3, [pc, #612]	; (800d600 <UART_SetConfig+0x2ec>)
 800d39c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3a0:	f003 0303 	and.w	r3, r3, #3
 800d3a4:	2b03      	cmp	r3, #3
 800d3a6:	d817      	bhi.n	800d3d8 <UART_SetConfig+0xc4>
 800d3a8:	a201      	add	r2, pc, #4	; (adr r2, 800d3b0 <UART_SetConfig+0x9c>)
 800d3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ae:	bf00      	nop
 800d3b0:	0800d3c1 	.word	0x0800d3c1
 800d3b4:	0800d3cd 	.word	0x0800d3cd
 800d3b8:	0800d3c7 	.word	0x0800d3c7
 800d3bc:	0800d3d3 	.word	0x0800d3d3
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	76fb      	strb	r3, [r7, #27]
 800d3c4:	e0e7      	b.n	800d596 <UART_SetConfig+0x282>
 800d3c6:	2302      	movs	r3, #2
 800d3c8:	76fb      	strb	r3, [r7, #27]
 800d3ca:	e0e4      	b.n	800d596 <UART_SetConfig+0x282>
 800d3cc:	2304      	movs	r3, #4
 800d3ce:	76fb      	strb	r3, [r7, #27]
 800d3d0:	e0e1      	b.n	800d596 <UART_SetConfig+0x282>
 800d3d2:	2308      	movs	r3, #8
 800d3d4:	76fb      	strb	r3, [r7, #27]
 800d3d6:	e0de      	b.n	800d596 <UART_SetConfig+0x282>
 800d3d8:	2310      	movs	r3, #16
 800d3da:	76fb      	strb	r3, [r7, #27]
 800d3dc:	e0db      	b.n	800d596 <UART_SetConfig+0x282>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4a88      	ldr	r2, [pc, #544]	; (800d604 <UART_SetConfig+0x2f0>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d132      	bne.n	800d44e <UART_SetConfig+0x13a>
 800d3e8:	4b85      	ldr	r3, [pc, #532]	; (800d600 <UART_SetConfig+0x2ec>)
 800d3ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3ee:	f003 030c 	and.w	r3, r3, #12
 800d3f2:	2b0c      	cmp	r3, #12
 800d3f4:	d828      	bhi.n	800d448 <UART_SetConfig+0x134>
 800d3f6:	a201      	add	r2, pc, #4	; (adr r2, 800d3fc <UART_SetConfig+0xe8>)
 800d3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3fc:	0800d431 	.word	0x0800d431
 800d400:	0800d449 	.word	0x0800d449
 800d404:	0800d449 	.word	0x0800d449
 800d408:	0800d449 	.word	0x0800d449
 800d40c:	0800d43d 	.word	0x0800d43d
 800d410:	0800d449 	.word	0x0800d449
 800d414:	0800d449 	.word	0x0800d449
 800d418:	0800d449 	.word	0x0800d449
 800d41c:	0800d437 	.word	0x0800d437
 800d420:	0800d449 	.word	0x0800d449
 800d424:	0800d449 	.word	0x0800d449
 800d428:	0800d449 	.word	0x0800d449
 800d42c:	0800d443 	.word	0x0800d443
 800d430:	2300      	movs	r3, #0
 800d432:	76fb      	strb	r3, [r7, #27]
 800d434:	e0af      	b.n	800d596 <UART_SetConfig+0x282>
 800d436:	2302      	movs	r3, #2
 800d438:	76fb      	strb	r3, [r7, #27]
 800d43a:	e0ac      	b.n	800d596 <UART_SetConfig+0x282>
 800d43c:	2304      	movs	r3, #4
 800d43e:	76fb      	strb	r3, [r7, #27]
 800d440:	e0a9      	b.n	800d596 <UART_SetConfig+0x282>
 800d442:	2308      	movs	r3, #8
 800d444:	76fb      	strb	r3, [r7, #27]
 800d446:	e0a6      	b.n	800d596 <UART_SetConfig+0x282>
 800d448:	2310      	movs	r3, #16
 800d44a:	76fb      	strb	r3, [r7, #27]
 800d44c:	e0a3      	b.n	800d596 <UART_SetConfig+0x282>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4a6d      	ldr	r2, [pc, #436]	; (800d608 <UART_SetConfig+0x2f4>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d120      	bne.n	800d49a <UART_SetConfig+0x186>
 800d458:	4b69      	ldr	r3, [pc, #420]	; (800d600 <UART_SetConfig+0x2ec>)
 800d45a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d45e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d462:	2b30      	cmp	r3, #48	; 0x30
 800d464:	d013      	beq.n	800d48e <UART_SetConfig+0x17a>
 800d466:	2b30      	cmp	r3, #48	; 0x30
 800d468:	d814      	bhi.n	800d494 <UART_SetConfig+0x180>
 800d46a:	2b20      	cmp	r3, #32
 800d46c:	d009      	beq.n	800d482 <UART_SetConfig+0x16e>
 800d46e:	2b20      	cmp	r3, #32
 800d470:	d810      	bhi.n	800d494 <UART_SetConfig+0x180>
 800d472:	2b00      	cmp	r3, #0
 800d474:	d002      	beq.n	800d47c <UART_SetConfig+0x168>
 800d476:	2b10      	cmp	r3, #16
 800d478:	d006      	beq.n	800d488 <UART_SetConfig+0x174>
 800d47a:	e00b      	b.n	800d494 <UART_SetConfig+0x180>
 800d47c:	2300      	movs	r3, #0
 800d47e:	76fb      	strb	r3, [r7, #27]
 800d480:	e089      	b.n	800d596 <UART_SetConfig+0x282>
 800d482:	2302      	movs	r3, #2
 800d484:	76fb      	strb	r3, [r7, #27]
 800d486:	e086      	b.n	800d596 <UART_SetConfig+0x282>
 800d488:	2304      	movs	r3, #4
 800d48a:	76fb      	strb	r3, [r7, #27]
 800d48c:	e083      	b.n	800d596 <UART_SetConfig+0x282>
 800d48e:	2308      	movs	r3, #8
 800d490:	76fb      	strb	r3, [r7, #27]
 800d492:	e080      	b.n	800d596 <UART_SetConfig+0x282>
 800d494:	2310      	movs	r3, #16
 800d496:	76fb      	strb	r3, [r7, #27]
 800d498:	e07d      	b.n	800d596 <UART_SetConfig+0x282>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4a5b      	ldr	r2, [pc, #364]	; (800d60c <UART_SetConfig+0x2f8>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d120      	bne.n	800d4e6 <UART_SetConfig+0x1d2>
 800d4a4:	4b56      	ldr	r3, [pc, #344]	; (800d600 <UART_SetConfig+0x2ec>)
 800d4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d4ae:	2bc0      	cmp	r3, #192	; 0xc0
 800d4b0:	d013      	beq.n	800d4da <UART_SetConfig+0x1c6>
 800d4b2:	2bc0      	cmp	r3, #192	; 0xc0
 800d4b4:	d814      	bhi.n	800d4e0 <UART_SetConfig+0x1cc>
 800d4b6:	2b80      	cmp	r3, #128	; 0x80
 800d4b8:	d009      	beq.n	800d4ce <UART_SetConfig+0x1ba>
 800d4ba:	2b80      	cmp	r3, #128	; 0x80
 800d4bc:	d810      	bhi.n	800d4e0 <UART_SetConfig+0x1cc>
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d002      	beq.n	800d4c8 <UART_SetConfig+0x1b4>
 800d4c2:	2b40      	cmp	r3, #64	; 0x40
 800d4c4:	d006      	beq.n	800d4d4 <UART_SetConfig+0x1c0>
 800d4c6:	e00b      	b.n	800d4e0 <UART_SetConfig+0x1cc>
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	76fb      	strb	r3, [r7, #27]
 800d4cc:	e063      	b.n	800d596 <UART_SetConfig+0x282>
 800d4ce:	2302      	movs	r3, #2
 800d4d0:	76fb      	strb	r3, [r7, #27]
 800d4d2:	e060      	b.n	800d596 <UART_SetConfig+0x282>
 800d4d4:	2304      	movs	r3, #4
 800d4d6:	76fb      	strb	r3, [r7, #27]
 800d4d8:	e05d      	b.n	800d596 <UART_SetConfig+0x282>
 800d4da:	2308      	movs	r3, #8
 800d4dc:	76fb      	strb	r3, [r7, #27]
 800d4de:	e05a      	b.n	800d596 <UART_SetConfig+0x282>
 800d4e0:	2310      	movs	r3, #16
 800d4e2:	76fb      	strb	r3, [r7, #27]
 800d4e4:	e057      	b.n	800d596 <UART_SetConfig+0x282>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4a49      	ldr	r2, [pc, #292]	; (800d610 <UART_SetConfig+0x2fc>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d125      	bne.n	800d53c <UART_SetConfig+0x228>
 800d4f0:	4b43      	ldr	r3, [pc, #268]	; (800d600 <UART_SetConfig+0x2ec>)
 800d4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d4fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4fe:	d017      	beq.n	800d530 <UART_SetConfig+0x21c>
 800d500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d504:	d817      	bhi.n	800d536 <UART_SetConfig+0x222>
 800d506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d50a:	d00b      	beq.n	800d524 <UART_SetConfig+0x210>
 800d50c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d510:	d811      	bhi.n	800d536 <UART_SetConfig+0x222>
 800d512:	2b00      	cmp	r3, #0
 800d514:	d003      	beq.n	800d51e <UART_SetConfig+0x20a>
 800d516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d51a:	d006      	beq.n	800d52a <UART_SetConfig+0x216>
 800d51c:	e00b      	b.n	800d536 <UART_SetConfig+0x222>
 800d51e:	2300      	movs	r3, #0
 800d520:	76fb      	strb	r3, [r7, #27]
 800d522:	e038      	b.n	800d596 <UART_SetConfig+0x282>
 800d524:	2302      	movs	r3, #2
 800d526:	76fb      	strb	r3, [r7, #27]
 800d528:	e035      	b.n	800d596 <UART_SetConfig+0x282>
 800d52a:	2304      	movs	r3, #4
 800d52c:	76fb      	strb	r3, [r7, #27]
 800d52e:	e032      	b.n	800d596 <UART_SetConfig+0x282>
 800d530:	2308      	movs	r3, #8
 800d532:	76fb      	strb	r3, [r7, #27]
 800d534:	e02f      	b.n	800d596 <UART_SetConfig+0x282>
 800d536:	2310      	movs	r3, #16
 800d538:	76fb      	strb	r3, [r7, #27]
 800d53a:	e02c      	b.n	800d596 <UART_SetConfig+0x282>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a2d      	ldr	r2, [pc, #180]	; (800d5f8 <UART_SetConfig+0x2e4>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d125      	bne.n	800d592 <UART_SetConfig+0x27e>
 800d546:	4b2e      	ldr	r3, [pc, #184]	; (800d600 <UART_SetConfig+0x2ec>)
 800d548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d54c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d550:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d554:	d017      	beq.n	800d586 <UART_SetConfig+0x272>
 800d556:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d55a:	d817      	bhi.n	800d58c <UART_SetConfig+0x278>
 800d55c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d560:	d00b      	beq.n	800d57a <UART_SetConfig+0x266>
 800d562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d566:	d811      	bhi.n	800d58c <UART_SetConfig+0x278>
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d003      	beq.n	800d574 <UART_SetConfig+0x260>
 800d56c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d570:	d006      	beq.n	800d580 <UART_SetConfig+0x26c>
 800d572:	e00b      	b.n	800d58c <UART_SetConfig+0x278>
 800d574:	2300      	movs	r3, #0
 800d576:	76fb      	strb	r3, [r7, #27]
 800d578:	e00d      	b.n	800d596 <UART_SetConfig+0x282>
 800d57a:	2302      	movs	r3, #2
 800d57c:	76fb      	strb	r3, [r7, #27]
 800d57e:	e00a      	b.n	800d596 <UART_SetConfig+0x282>
 800d580:	2304      	movs	r3, #4
 800d582:	76fb      	strb	r3, [r7, #27]
 800d584:	e007      	b.n	800d596 <UART_SetConfig+0x282>
 800d586:	2308      	movs	r3, #8
 800d588:	76fb      	strb	r3, [r7, #27]
 800d58a:	e004      	b.n	800d596 <UART_SetConfig+0x282>
 800d58c:	2310      	movs	r3, #16
 800d58e:	76fb      	strb	r3, [r7, #27]
 800d590:	e001      	b.n	800d596 <UART_SetConfig+0x282>
 800d592:	2310      	movs	r3, #16
 800d594:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4a17      	ldr	r2, [pc, #92]	; (800d5f8 <UART_SetConfig+0x2e4>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	f040 8087 	bne.w	800d6b0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d5a2:	7efb      	ldrb	r3, [r7, #27]
 800d5a4:	2b08      	cmp	r3, #8
 800d5a6:	d837      	bhi.n	800d618 <UART_SetConfig+0x304>
 800d5a8:	a201      	add	r2, pc, #4	; (adr r2, 800d5b0 <UART_SetConfig+0x29c>)
 800d5aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ae:	bf00      	nop
 800d5b0:	0800d5d5 	.word	0x0800d5d5
 800d5b4:	0800d619 	.word	0x0800d619
 800d5b8:	0800d5dd 	.word	0x0800d5dd
 800d5bc:	0800d619 	.word	0x0800d619
 800d5c0:	0800d5e3 	.word	0x0800d5e3
 800d5c4:	0800d619 	.word	0x0800d619
 800d5c8:	0800d619 	.word	0x0800d619
 800d5cc:	0800d619 	.word	0x0800d619
 800d5d0:	0800d5eb 	.word	0x0800d5eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5d4:	f7fd ffee 	bl	800b5b4 <HAL_RCC_GetPCLK1Freq>
 800d5d8:	6178      	str	r0, [r7, #20]
        break;
 800d5da:	e022      	b.n	800d622 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d5dc:	4b0d      	ldr	r3, [pc, #52]	; (800d614 <UART_SetConfig+0x300>)
 800d5de:	617b      	str	r3, [r7, #20]
        break;
 800d5e0:	e01f      	b.n	800d622 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d5e2:	f7fd ff4f 	bl	800b484 <HAL_RCC_GetSysClockFreq>
 800d5e6:	6178      	str	r0, [r7, #20]
        break;
 800d5e8:	e01b      	b.n	800d622 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5ee:	617b      	str	r3, [r7, #20]
        break;
 800d5f0:	e017      	b.n	800d622 <UART_SetConfig+0x30e>
 800d5f2:	bf00      	nop
 800d5f4:	efff69f3 	.word	0xefff69f3
 800d5f8:	40008000 	.word	0x40008000
 800d5fc:	40013800 	.word	0x40013800
 800d600:	40021000 	.word	0x40021000
 800d604:	40004400 	.word	0x40004400
 800d608:	40004800 	.word	0x40004800
 800d60c:	40004c00 	.word	0x40004c00
 800d610:	40005000 	.word	0x40005000
 800d614:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800d618:	2300      	movs	r3, #0
 800d61a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d61c:	2301      	movs	r3, #1
 800d61e:	76bb      	strb	r3, [r7, #26]
        break;
 800d620:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	2b00      	cmp	r3, #0
 800d626:	f000 80f1 	beq.w	800d80c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	685a      	ldr	r2, [r3, #4]
 800d62e:	4613      	mov	r3, r2
 800d630:	005b      	lsls	r3, r3, #1
 800d632:	4413      	add	r3, r2
 800d634:	697a      	ldr	r2, [r7, #20]
 800d636:	429a      	cmp	r2, r3
 800d638:	d305      	bcc.n	800d646 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d640:	697a      	ldr	r2, [r7, #20]
 800d642:	429a      	cmp	r2, r3
 800d644:	d902      	bls.n	800d64c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	76bb      	strb	r3, [r7, #26]
 800d64a:	e0df      	b.n	800d80c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	4618      	mov	r0, r3
 800d650:	f04f 0100 	mov.w	r1, #0
 800d654:	f04f 0200 	mov.w	r2, #0
 800d658:	f04f 0300 	mov.w	r3, #0
 800d65c:	020b      	lsls	r3, r1, #8
 800d65e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d662:	0202      	lsls	r2, r0, #8
 800d664:	6879      	ldr	r1, [r7, #4]
 800d666:	6849      	ldr	r1, [r1, #4]
 800d668:	0849      	lsrs	r1, r1, #1
 800d66a:	4608      	mov	r0, r1
 800d66c:	f04f 0100 	mov.w	r1, #0
 800d670:	1814      	adds	r4, r2, r0
 800d672:	eb43 0501 	adc.w	r5, r3, r1
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	461a      	mov	r2, r3
 800d67c:	f04f 0300 	mov.w	r3, #0
 800d680:	4620      	mov	r0, r4
 800d682:	4629      	mov	r1, r5
 800d684:	f7f3 fab0 	bl	8000be8 <__aeabi_uldivmod>
 800d688:	4602      	mov	r2, r0
 800d68a:	460b      	mov	r3, r1
 800d68c:	4613      	mov	r3, r2
 800d68e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d696:	d308      	bcc.n	800d6aa <UART_SetConfig+0x396>
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d69e:	d204      	bcs.n	800d6aa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	693a      	ldr	r2, [r7, #16]
 800d6a6:	60da      	str	r2, [r3, #12]
 800d6a8:	e0b0      	b.n	800d80c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	76bb      	strb	r3, [r7, #26]
 800d6ae:	e0ad      	b.n	800d80c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	69db      	ldr	r3, [r3, #28]
 800d6b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6b8:	d15b      	bne.n	800d772 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800d6ba:	7efb      	ldrb	r3, [r7, #27]
 800d6bc:	2b08      	cmp	r3, #8
 800d6be:	d828      	bhi.n	800d712 <UART_SetConfig+0x3fe>
 800d6c0:	a201      	add	r2, pc, #4	; (adr r2, 800d6c8 <UART_SetConfig+0x3b4>)
 800d6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6c6:	bf00      	nop
 800d6c8:	0800d6ed 	.word	0x0800d6ed
 800d6cc:	0800d6f5 	.word	0x0800d6f5
 800d6d0:	0800d6fd 	.word	0x0800d6fd
 800d6d4:	0800d713 	.word	0x0800d713
 800d6d8:	0800d703 	.word	0x0800d703
 800d6dc:	0800d713 	.word	0x0800d713
 800d6e0:	0800d713 	.word	0x0800d713
 800d6e4:	0800d713 	.word	0x0800d713
 800d6e8:	0800d70b 	.word	0x0800d70b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6ec:	f7fd ff62 	bl	800b5b4 <HAL_RCC_GetPCLK1Freq>
 800d6f0:	6178      	str	r0, [r7, #20]
        break;
 800d6f2:	e013      	b.n	800d71c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d6f4:	f7fd ff74 	bl	800b5e0 <HAL_RCC_GetPCLK2Freq>
 800d6f8:	6178      	str	r0, [r7, #20]
        break;
 800d6fa:	e00f      	b.n	800d71c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d6fc:	4b49      	ldr	r3, [pc, #292]	; (800d824 <UART_SetConfig+0x510>)
 800d6fe:	617b      	str	r3, [r7, #20]
        break;
 800d700:	e00c      	b.n	800d71c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d702:	f7fd febf 	bl	800b484 <HAL_RCC_GetSysClockFreq>
 800d706:	6178      	str	r0, [r7, #20]
        break;
 800d708:	e008      	b.n	800d71c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d70a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d70e:	617b      	str	r3, [r7, #20]
        break;
 800d710:	e004      	b.n	800d71c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800d712:	2300      	movs	r3, #0
 800d714:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d716:	2301      	movs	r3, #1
 800d718:	76bb      	strb	r3, [r7, #26]
        break;
 800d71a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d074      	beq.n	800d80c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	005a      	lsls	r2, r3, #1
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	085b      	lsrs	r3, r3, #1
 800d72c:	441a      	add	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	fbb2 f3f3 	udiv	r3, r2, r3
 800d736:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	2b0f      	cmp	r3, #15
 800d73c:	d916      	bls.n	800d76c <UART_SetConfig+0x458>
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d744:	d212      	bcs.n	800d76c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	b29b      	uxth	r3, r3
 800d74a:	f023 030f 	bic.w	r3, r3, #15
 800d74e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	085b      	lsrs	r3, r3, #1
 800d754:	b29b      	uxth	r3, r3
 800d756:	f003 0307 	and.w	r3, r3, #7
 800d75a:	b29a      	uxth	r2, r3
 800d75c:	89fb      	ldrh	r3, [r7, #14]
 800d75e:	4313      	orrs	r3, r2
 800d760:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	89fa      	ldrh	r2, [r7, #14]
 800d768:	60da      	str	r2, [r3, #12]
 800d76a:	e04f      	b.n	800d80c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800d76c:	2301      	movs	r3, #1
 800d76e:	76bb      	strb	r3, [r7, #26]
 800d770:	e04c      	b.n	800d80c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d772:	7efb      	ldrb	r3, [r7, #27]
 800d774:	2b08      	cmp	r3, #8
 800d776:	d828      	bhi.n	800d7ca <UART_SetConfig+0x4b6>
 800d778:	a201      	add	r2, pc, #4	; (adr r2, 800d780 <UART_SetConfig+0x46c>)
 800d77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d77e:	bf00      	nop
 800d780:	0800d7a5 	.word	0x0800d7a5
 800d784:	0800d7ad 	.word	0x0800d7ad
 800d788:	0800d7b5 	.word	0x0800d7b5
 800d78c:	0800d7cb 	.word	0x0800d7cb
 800d790:	0800d7bb 	.word	0x0800d7bb
 800d794:	0800d7cb 	.word	0x0800d7cb
 800d798:	0800d7cb 	.word	0x0800d7cb
 800d79c:	0800d7cb 	.word	0x0800d7cb
 800d7a0:	0800d7c3 	.word	0x0800d7c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d7a4:	f7fd ff06 	bl	800b5b4 <HAL_RCC_GetPCLK1Freq>
 800d7a8:	6178      	str	r0, [r7, #20]
        break;
 800d7aa:	e013      	b.n	800d7d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d7ac:	f7fd ff18 	bl	800b5e0 <HAL_RCC_GetPCLK2Freq>
 800d7b0:	6178      	str	r0, [r7, #20]
        break;
 800d7b2:	e00f      	b.n	800d7d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d7b4:	4b1b      	ldr	r3, [pc, #108]	; (800d824 <UART_SetConfig+0x510>)
 800d7b6:	617b      	str	r3, [r7, #20]
        break;
 800d7b8:	e00c      	b.n	800d7d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d7ba:	f7fd fe63 	bl	800b484 <HAL_RCC_GetSysClockFreq>
 800d7be:	6178      	str	r0, [r7, #20]
        break;
 800d7c0:	e008      	b.n	800d7d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7c6:	617b      	str	r3, [r7, #20]
        break;
 800d7c8:	e004      	b.n	800d7d4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	76bb      	strb	r3, [r7, #26]
        break;
 800d7d2:	bf00      	nop
    }

    if (pclk != 0U)
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d018      	beq.n	800d80c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	085a      	lsrs	r2, r3, #1
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	441a      	add	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7ec:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	2b0f      	cmp	r3, #15
 800d7f2:	d909      	bls.n	800d808 <UART_SetConfig+0x4f4>
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7fa:	d205      	bcs.n	800d808 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	b29a      	uxth	r2, r3
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	60da      	str	r2, [r3, #12]
 800d806:	e001      	b.n	800d80c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800d808:	2301      	movs	r3, #1
 800d80a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d818:	7ebb      	ldrb	r3, [r7, #26]
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3720      	adds	r7, #32
 800d81e:	46bd      	mov	sp, r7
 800d820:	bdb0      	pop	{r4, r5, r7, pc}
 800d822:	bf00      	nop
 800d824:	00f42400 	.word	0x00f42400

0800d828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d834:	f003 0301 	and.w	r3, r3, #1
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00a      	beq.n	800d852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	430a      	orrs	r2, r1
 800d850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d856:	f003 0302 	and.w	r3, r3, #2
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d00a      	beq.n	800d874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	430a      	orrs	r2, r1
 800d872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d878:	f003 0304 	and.w	r3, r3, #4
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00a      	beq.n	800d896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	430a      	orrs	r2, r1
 800d894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d89a:	f003 0308 	and.w	r3, r3, #8
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00a      	beq.n	800d8b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	430a      	orrs	r2, r1
 800d8b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8bc:	f003 0310 	and.w	r3, r3, #16
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00a      	beq.n	800d8da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	430a      	orrs	r2, r1
 800d8d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8de:	f003 0320 	and.w	r3, r3, #32
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00a      	beq.n	800d8fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	430a      	orrs	r2, r1
 800d8fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d904:	2b00      	cmp	r3, #0
 800d906:	d01a      	beq.n	800d93e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	430a      	orrs	r2, r1
 800d91c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d926:	d10a      	bne.n	800d93e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	430a      	orrs	r2, r1
 800d93c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00a      	beq.n	800d960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	430a      	orrs	r2, r1
 800d95e:	605a      	str	r2, [r3, #4]
  }
}
 800d960:	bf00      	nop
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr

0800d96c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b086      	sub	sp, #24
 800d970:	af02      	add	r7, sp, #8
 800d972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2200      	movs	r2, #0
 800d978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d97c:	f7fb faae 	bl	8008edc <HAL_GetTick>
 800d980:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f003 0308 	and.w	r3, r3, #8
 800d98c:	2b08      	cmp	r3, #8
 800d98e:	d10e      	bne.n	800d9ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d994:	9300      	str	r3, [sp, #0]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2200      	movs	r2, #0
 800d99a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 f82d 	bl	800d9fe <UART_WaitOnFlagUntilTimeout>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d001      	beq.n	800d9ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9aa:	2303      	movs	r3, #3
 800d9ac:	e023      	b.n	800d9f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f003 0304 	and.w	r3, r3, #4
 800d9b8:	2b04      	cmp	r3, #4
 800d9ba:	d10e      	bne.n	800d9da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d9c0:	9300      	str	r3, [sp, #0]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 f817 	bl	800d9fe <UART_WaitOnFlagUntilTimeout>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d001      	beq.n	800d9da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9d6:	2303      	movs	r3, #3
 800d9d8:	e00d      	b.n	800d9f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2220      	movs	r2, #32
 800d9de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2220      	movs	r2, #32
 800d9e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d9f4:	2300      	movs	r3, #0
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3710      	adds	r7, #16
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}

0800d9fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d9fe:	b580      	push	{r7, lr}
 800da00:	b09c      	sub	sp, #112	; 0x70
 800da02:	af00      	add	r7, sp, #0
 800da04:	60f8      	str	r0, [r7, #12]
 800da06:	60b9      	str	r1, [r7, #8]
 800da08:	603b      	str	r3, [r7, #0]
 800da0a:	4613      	mov	r3, r2
 800da0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da0e:	e0a5      	b.n	800db5c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da16:	f000 80a1 	beq.w	800db5c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da1a:	f7fb fa5f 	bl	8008edc <HAL_GetTick>
 800da1e:	4602      	mov	r2, r0
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	1ad3      	subs	r3, r2, r3
 800da24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800da26:	429a      	cmp	r2, r3
 800da28:	d302      	bcc.n	800da30 <UART_WaitOnFlagUntilTimeout+0x32>
 800da2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d13e      	bne.n	800daae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da38:	e853 3f00 	ldrex	r3, [r3]
 800da3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800da3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800da44:	667b      	str	r3, [r7, #100]	; 0x64
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	461a      	mov	r2, r3
 800da4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800da56:	e841 2300 	strex	r3, r2, [r1]
 800da5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800da5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d1e6      	bne.n	800da30 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	3308      	adds	r3, #8
 800da68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da6c:	e853 3f00 	ldrex	r3, [r3]
 800da70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800da72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da74:	f023 0301 	bic.w	r3, r3, #1
 800da78:	663b      	str	r3, [r7, #96]	; 0x60
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	3308      	adds	r3, #8
 800da80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da82:	64ba      	str	r2, [r7, #72]	; 0x48
 800da84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da8a:	e841 2300 	strex	r3, r2, [r1]
 800da8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800da90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da92:	2b00      	cmp	r3, #0
 800da94:	d1e5      	bne.n	800da62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2220      	movs	r2, #32
 800da9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2220      	movs	r2, #32
 800daa0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2200      	movs	r2, #0
 800daa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800daaa:	2303      	movs	r3, #3
 800daac:	e067      	b.n	800db7e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f003 0304 	and.w	r3, r3, #4
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d04f      	beq.n	800db5c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	69db      	ldr	r3, [r3, #28]
 800dac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800daca:	d147      	bne.n	800db5c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dad4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dade:	e853 3f00 	ldrex	r3, [r3]
 800dae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800daea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	461a      	mov	r2, r3
 800daf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daf4:	637b      	str	r3, [r7, #52]	; 0x34
 800daf6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dafa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dafc:	e841 2300 	strex	r3, r2, [r1]
 800db00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800db02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db04:	2b00      	cmp	r3, #0
 800db06:	d1e6      	bne.n	800dad6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	3308      	adds	r3, #8
 800db0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	e853 3f00 	ldrex	r3, [r3]
 800db16:	613b      	str	r3, [r7, #16]
   return(result);
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	f023 0301 	bic.w	r3, r3, #1
 800db1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	3308      	adds	r3, #8
 800db26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db28:	623a      	str	r2, [r7, #32]
 800db2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db2c:	69f9      	ldr	r1, [r7, #28]
 800db2e:	6a3a      	ldr	r2, [r7, #32]
 800db30:	e841 2300 	strex	r3, r2, [r1]
 800db34:	61bb      	str	r3, [r7, #24]
   return(result);
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d1e5      	bne.n	800db08 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2220      	movs	r2, #32
 800db40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2220      	movs	r2, #32
 800db46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2220      	movs	r2, #32
 800db4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2200      	movs	r2, #0
 800db54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800db58:	2303      	movs	r3, #3
 800db5a:	e010      	b.n	800db7e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	69da      	ldr	r2, [r3, #28]
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	4013      	ands	r3, r2
 800db66:	68ba      	ldr	r2, [r7, #8]
 800db68:	429a      	cmp	r2, r3
 800db6a:	bf0c      	ite	eq
 800db6c:	2301      	moveq	r3, #1
 800db6e:	2300      	movne	r3, #0
 800db70:	b2db      	uxtb	r3, r3
 800db72:	461a      	mov	r2, r3
 800db74:	79fb      	ldrb	r3, [r7, #7]
 800db76:	429a      	cmp	r2, r3
 800db78:	f43f af4a 	beq.w	800da10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db7c:	2300      	movs	r3, #0
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3770      	adds	r7, #112	; 0x70
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
	...

0800db88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b096      	sub	sp, #88	; 0x58
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	4613      	mov	r3, r2
 800db94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	68ba      	ldr	r2, [r7, #8]
 800db9a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	88fa      	ldrh	r2, [r7, #6]
 800dba0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2200      	movs	r2, #0
 800dba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2222      	movs	r2, #34	; 0x22
 800dbb0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d02b      	beq.n	800dc12 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbbe:	4a42      	ldr	r2, [pc, #264]	; (800dcc8 <UART_Start_Receive_DMA+0x140>)
 800dbc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbc6:	4a41      	ldr	r2, [pc, #260]	; (800dccc <UART_Start_Receive_DMA+0x144>)
 800dbc8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbce:	4a40      	ldr	r2, [pc, #256]	; (800dcd0 <UART_Start_Receive_DMA+0x148>)
 800dbd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	3324      	adds	r3, #36	; 0x24
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbea:	461a      	mov	r2, r3
 800dbec:	88fb      	ldrh	r3, [r7, #6]
 800dbee:	f7fb fc59 	bl	80094a4 <HAL_DMA_Start_IT>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d00c      	beq.n	800dc12 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2210      	movs	r2, #16
 800dbfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	2200      	movs	r2, #0
 800dc04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2220      	movs	r2, #32
 800dc0c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e055      	b.n	800dcbe <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2200      	movs	r2, #0
 800dc16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	691b      	ldr	r3, [r3, #16]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d018      	beq.n	800dc54 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc2a:	e853 3f00 	ldrex	r3, [r3]
 800dc2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc36:	657b      	str	r3, [r7, #84]	; 0x54
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc40:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc42:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc48:	e841 2300 	strex	r3, r2, [r1]
 800dc4c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dc4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1e6      	bne.n	800dc22 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	3308      	adds	r3, #8
 800dc5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5e:	e853 3f00 	ldrex	r3, [r3]
 800dc62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc66:	f043 0301 	orr.w	r3, r3, #1
 800dc6a:	653b      	str	r3, [r7, #80]	; 0x50
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	3308      	adds	r3, #8
 800dc72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc74:	637a      	str	r2, [r7, #52]	; 0x34
 800dc76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc7c:	e841 2300 	strex	r3, r2, [r1]
 800dc80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d1e5      	bne.n	800dc54 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	3308      	adds	r3, #8
 800dc8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	e853 3f00 	ldrex	r3, [r3]
 800dc96:	613b      	str	r3, [r7, #16]
   return(result);
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	3308      	adds	r3, #8
 800dca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dca8:	623a      	str	r2, [r7, #32]
 800dcaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcac:	69f9      	ldr	r1, [r7, #28]
 800dcae:	6a3a      	ldr	r2, [r7, #32]
 800dcb0:	e841 2300 	strex	r3, r2, [r1]
 800dcb4:	61bb      	str	r3, [r7, #24]
   return(result);
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d1e5      	bne.n	800dc88 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3758      	adds	r7, #88	; 0x58
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	0800dde7 	.word	0x0800dde7
 800dccc:	0800df0b 	.word	0x0800df0b
 800dcd0:	0800df43 	.word	0x0800df43

0800dcd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b089      	sub	sp, #36	; 0x24
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	e853 3f00 	ldrex	r3, [r3]
 800dce8:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dcf0:	61fb      	str	r3, [r7, #28]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	61bb      	str	r3, [r7, #24]
 800dcfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcfe:	6979      	ldr	r1, [r7, #20]
 800dd00:	69ba      	ldr	r2, [r7, #24]
 800dd02:	e841 2300 	strex	r3, r2, [r1]
 800dd06:	613b      	str	r3, [r7, #16]
   return(result);
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d1e6      	bne.n	800dcdc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2220      	movs	r2, #32
 800dd12:	679a      	str	r2, [r3, #120]	; 0x78
}
 800dd14:	bf00      	nop
 800dd16:	3724      	adds	r7, #36	; 0x24
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr

0800dd20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b095      	sub	sp, #84	; 0x54
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd30:	e853 3f00 	ldrex	r3, [r3]
 800dd34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	461a      	mov	r2, r3
 800dd44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd46:	643b      	str	r3, [r7, #64]	; 0x40
 800dd48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dd4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd4e:	e841 2300 	strex	r3, r2, [r1]
 800dd52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d1e6      	bne.n	800dd28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	3308      	adds	r3, #8
 800dd60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd62:	6a3b      	ldr	r3, [r7, #32]
 800dd64:	e853 3f00 	ldrex	r3, [r3]
 800dd68:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd6a:	69fb      	ldr	r3, [r7, #28]
 800dd6c:	f023 0301 	bic.w	r3, r3, #1
 800dd70:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	3308      	adds	r3, #8
 800dd78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd82:	e841 2300 	strex	r3, r2, [r1]
 800dd86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d1e5      	bne.n	800dd5a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d118      	bne.n	800ddc8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	e853 3f00 	ldrex	r3, [r3]
 800dda2:	60bb      	str	r3, [r7, #8]
   return(result);
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	f023 0310 	bic.w	r3, r3, #16
 800ddaa:	647b      	str	r3, [r7, #68]	; 0x44
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddb4:	61bb      	str	r3, [r7, #24]
 800ddb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddb8:	6979      	ldr	r1, [r7, #20]
 800ddba:	69ba      	ldr	r2, [r7, #24]
 800ddbc:	e841 2300 	strex	r3, r2, [r1]
 800ddc0:	613b      	str	r3, [r7, #16]
   return(result);
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d1e6      	bne.n	800dd96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2220      	movs	r2, #32
 800ddcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ddda:	bf00      	nop
 800dddc:	3754      	adds	r7, #84	; 0x54
 800ddde:	46bd      	mov	sp, r7
 800dde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde4:	4770      	bx	lr

0800dde6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b09c      	sub	sp, #112	; 0x70
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddf2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f003 0320 	and.w	r3, r3, #32
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d170      	bne.n	800dee4 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800de02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de04:	2200      	movs	r2, #0
 800de06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de12:	e853 3f00 	ldrex	r3, [r3]
 800de16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800de18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800de20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	461a      	mov	r2, r3
 800de26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de28:	65bb      	str	r3, [r7, #88]	; 0x58
 800de2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800de30:	e841 2300 	strex	r3, r2, [r1]
 800de34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800de36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1e6      	bne.n	800de0a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	3308      	adds	r3, #8
 800de42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de46:	e853 3f00 	ldrex	r3, [r3]
 800de4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800de4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de4e:	f023 0301 	bic.w	r3, r3, #1
 800de52:	667b      	str	r3, [r7, #100]	; 0x64
 800de54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	3308      	adds	r3, #8
 800de5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800de5c:	647a      	str	r2, [r7, #68]	; 0x44
 800de5e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800de62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de64:	e841 2300 	strex	r3, r2, [r1]
 800de68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800de6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d1e5      	bne.n	800de3c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	3308      	adds	r3, #8
 800de76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7a:	e853 3f00 	ldrex	r3, [r3]
 800de7e:	623b      	str	r3, [r7, #32]
   return(result);
 800de80:	6a3b      	ldr	r3, [r7, #32]
 800de82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de86:	663b      	str	r3, [r7, #96]	; 0x60
 800de88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	3308      	adds	r3, #8
 800de8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de90:	633a      	str	r2, [r7, #48]	; 0x30
 800de92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de98:	e841 2300 	strex	r3, r2, [r1]
 800de9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d1e5      	bne.n	800de70 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dea6:	2220      	movs	r2, #32
 800dea8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800deaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800deac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d118      	bne.n	800dee4 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800deb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	e853 3f00 	ldrex	r3, [r3]
 800debe:	60fb      	str	r3, [r7, #12]
   return(result);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f023 0310 	bic.w	r3, r3, #16
 800dec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	461a      	mov	r2, r3
 800dece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ded0:	61fb      	str	r3, [r7, #28]
 800ded2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ded4:	69b9      	ldr	r1, [r7, #24]
 800ded6:	69fa      	ldr	r2, [r7, #28]
 800ded8:	e841 2300 	strex	r3, r2, [r1]
 800dedc:	617b      	str	r3, [r7, #20]
   return(result);
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d1e6      	bne.n	800deb2 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dee8:	2b01      	cmp	r3, #1
 800deea:	d107      	bne.n	800defc <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800deec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800deee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800def2:	4619      	mov	r1, r3
 800def4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800def6:	f7ff fa01 	bl	800d2fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800defa:	e002      	b.n	800df02 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800defc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800defe:	f7ff f9df 	bl	800d2c0 <HAL_UART_RxCpltCallback>
}
 800df02:	bf00      	nop
 800df04:	3770      	adds	r7, #112	; 0x70
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b084      	sub	sp, #16
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df16:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d109      	bne.n	800df34 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800df26:	085b      	lsrs	r3, r3, #1
 800df28:	b29b      	uxth	r3, r3
 800df2a:	4619      	mov	r1, r3
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f7ff f9e5 	bl	800d2fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800df32:	e002      	b.n	800df3a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800df34:	68f8      	ldr	r0, [r7, #12]
 800df36:	f7ff f9cd 	bl	800d2d4 <HAL_UART_RxHalfCpltCallback>
}
 800df3a:	bf00      	nop
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800df42:	b580      	push	{r7, lr}
 800df44:	b086      	sub	sp, #24
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df4e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df54:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df5a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	689b      	ldr	r3, [r3, #8]
 800df62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df66:	2b80      	cmp	r3, #128	; 0x80
 800df68:	d109      	bne.n	800df7e <UART_DMAError+0x3c>
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	2b21      	cmp	r3, #33	; 0x21
 800df6e:	d106      	bne.n	800df7e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	2200      	movs	r2, #0
 800df74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800df78:	6978      	ldr	r0, [r7, #20]
 800df7a:	f7ff feab 	bl	800dcd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df88:	2b40      	cmp	r3, #64	; 0x40
 800df8a:	d109      	bne.n	800dfa0 <UART_DMAError+0x5e>
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2b22      	cmp	r3, #34	; 0x22
 800df90:	d106      	bne.n	800dfa0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	2200      	movs	r2, #0
 800df96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800df9a:	6978      	ldr	r0, [r7, #20]
 800df9c:	f7ff fec0 	bl	800dd20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfa6:	f043 0210 	orr.w	r2, r3, #16
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dfb0:	6978      	ldr	r0, [r7, #20]
 800dfb2:	f7ff f999 	bl	800d2e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dfb6:	bf00      	nop
 800dfb8:	3718      	adds	r7, #24
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
	...

0800dfc0 <DataHist_parameters>:
 800dfc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dfc6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dfc8:	7020      	strb	r0, [r4, #0]
 800dfca:	6808      	ldr	r0, [r1, #0]
 800dfcc:	6060      	str	r0, [r4, #4]
 800dfce:	6848      	ldr	r0, [r1, #4]
 800dfd0:	60a0      	str	r0, [r4, #8]
 800dfd2:	6888      	ldr	r0, [r1, #8]
 800dfd4:	60e0      	str	r0, [r4, #12]
 800dfd6:	68c8      	ldr	r0, [r1, #12]
 800dfd8:	6120      	str	r0, [r4, #16]
 800dfda:	6908      	ldr	r0, [r1, #16]
 800dfdc:	6160      	str	r0, [r4, #20]
 800dfde:	6948      	ldr	r0, [r1, #20]
 800dfe0:	61a0      	str	r0, [r4, #24]
 800dfe2:	6988      	ldr	r0, [r1, #24]
 800dfe4:	61e0      	str	r0, [r4, #28]
 800dfe6:	69c8      	ldr	r0, [r1, #28]
 800dfe8:	6220      	str	r0, [r4, #32]
 800dfea:	6a09      	ldr	r1, [r1, #32]
 800dfec:	6261      	str	r1, [r4, #36]	; 0x24
 800dfee:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800dff2:	8811      	ldrh	r1, [r2, #0]
 800dff4:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800dff8:	8521      	strh	r1, [r4, #40]	; 0x28
 800dffa:	f102 0c80 	add.w	ip, r2, #128	; 0x80
 800dffe:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800e002:	f04f 0e00 	mov.w	lr, #0
 800e006:	f1ac 0278 	sub.w	r2, ip, #120	; 0x78
 800e00a:	4641      	mov	r1, r8
 800e00c:	f852 0b04 	ldr.w	r0, [r2], #4
 800e010:	f841 0b04 	str.w	r0, [r1], #4
 800e014:	4562      	cmp	r2, ip
 800e016:	d1f9      	bne.n	800e00c <DataHist_parameters+0x4c>
 800e018:	f10e 0e1e 	add.w	lr, lr, #30
 800e01c:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800e020:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800e024:	f102 0c78 	add.w	ip, r2, #120	; 0x78
 800e028:	d1ed      	bne.n	800e006 <DataHist_parameters+0x46>
 800e02a:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800e02e:	881a      	ldrh	r2, [r3, #0]
 800e030:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800e034:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800e038:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800e03c:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 800e040:	f04f 0c00 	mov.w	ip, #0
 800e044:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800e048:	4672      	mov	r2, lr
 800e04a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e04e:	f842 1b04 	str.w	r1, [r2], #4
 800e052:	4283      	cmp	r3, r0
 800e054:	d1f9      	bne.n	800e04a <DataHist_parameters+0x8a>
 800e056:	f10c 0c1e 	add.w	ip, ip, #30
 800e05a:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
 800e05e:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800e062:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800e066:	d1ed      	bne.n	800e044 <DataHist_parameters+0x84>
 800e068:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800e06c:	883b      	ldrh	r3, [r7, #0]
 800e06e:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800e072:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800e076:	3780      	adds	r7, #128	; 0x80
 800e078:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800e07c:	2000      	movs	r0, #0
 800e07e:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800e082:	4662      	mov	r2, ip
 800e084:	f853 1b04 	ldr.w	r1, [r3], #4
 800e088:	f842 1b04 	str.w	r1, [r2], #4
 800e08c:	42bb      	cmp	r3, r7
 800e08e:	d1f9      	bne.n	800e084 <DataHist_parameters+0xc4>
 800e090:	301e      	adds	r0, #30
 800e092:	285a      	cmp	r0, #90	; 0x5a
 800e094:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800e098:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800e09c:	d1ef      	bne.n	800e07e <DataHist_parameters+0xbe>
 800e09e:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800e0a2:	8833      	ldrh	r3, [r6, #0]
 800e0a4:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800e0a8:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800e0ac:	3680      	adds	r6, #128	; 0x80
 800e0ae:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 800e0b2:	2000      	movs	r0, #0
 800e0b4:	f1a6 0378 	sub.w	r3, r6, #120	; 0x78
 800e0b8:	463a      	mov	r2, r7
 800e0ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800e0be:	f842 1b04 	str.w	r1, [r2], #4
 800e0c2:	429e      	cmp	r6, r3
 800e0c4:	d1f9      	bne.n	800e0ba <DataHist_parameters+0xfa>
 800e0c6:	301e      	adds	r0, #30
 800e0c8:	285a      	cmp	r0, #90	; 0x5a
 800e0ca:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800e0ce:	f106 0678 	add.w	r6, r6, #120	; 0x78
 800e0d2:	d1ef      	bne.n	800e0b4 <DataHist_parameters+0xf4>
 800e0d4:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800e0d8:	69aa      	ldr	r2, [r5, #24]
 800e0da:	f8c3 c004 	str.w	ip, [r3, #4]
 800e0de:	782b      	ldrb	r3, [r5, #0]
 800e0e0:	f884 35e8 	strb.w	r3, [r4, #1512]	; 0x5e8
 800e0e4:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800e0e8:	619a      	str	r2, [r3, #24]
 800e0ea:	686a      	ldr	r2, [r5, #4]
 800e0ec:	605a      	str	r2, [r3, #4]
 800e0ee:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800e0f2:	68a9      	ldr	r1, [r5, #8]
 800e0f4:	6011      	str	r1, [r2, #0]
 800e0f6:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800e0fa:	68e9      	ldr	r1, [r5, #12]
 800e0fc:	6011      	str	r1, [r2, #0]
 800e0fe:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800e102:	6929      	ldr	r1, [r5, #16]
 800e104:	6011      	str	r1, [r2, #0]
 800e106:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800e10a:	6969      	ldr	r1, [r5, #20]
 800e10c:	6011      	str	r1, [r2, #0]
 800e10e:	69ea      	ldr	r2, [r5, #28]
 800e110:	61da      	str	r2, [r3, #28]
 800e112:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 800e116:	6a2a      	ldr	r2, [r5, #32]
 800e118:	601a      	str	r2, [r3, #0]
 800e11a:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800e11e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e120:	601a      	str	r2, [r3, #0]
 800e122:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800e126:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e128:	601a      	str	r2, [r3, #0]
 800e12a:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800e12e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e130:	6023      	str	r3, [r4, #0]
 800e132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e136:	bf00      	nop

0800e138 <rotVect>:
 800e138:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800e13c:	ed92 5a01 	vldr	s10, [r2, #4]
 800e140:	edd2 5a00 	vldr	s11, [r2]
 800e144:	ed92 6a02 	vldr	s12, [r2, #8]
 800e148:	ee07 3a90 	vmov	s15, r3
 800e14c:	f991 3000 	ldrsb.w	r3, [r1]
 800e150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e154:	ee06 3a90 	vmov	s13, r3
 800e158:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e15c:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800e160:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e164:	ee07 3a10 	vmov	s14, r3
 800e168:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800e16c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e170:	eee7 7a06 	vfma.f32	s15, s14, s12
 800e174:	edc0 7a00 	vstr	s15, [r0]
 800e178:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800e17c:	ed92 5a01 	vldr	s10, [r2, #4]
 800e180:	edd2 5a00 	vldr	s11, [r2]
 800e184:	ed92 6a02 	vldr	s12, [r2, #8]
 800e188:	ee07 3a90 	vmov	s15, r3
 800e18c:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800e190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e194:	ee06 3a90 	vmov	s13, r3
 800e198:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e19c:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800e1a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e1a4:	ee07 3a10 	vmov	s14, r3
 800e1a8:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800e1ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e1b0:	eee7 7a06 	vfma.f32	s15, s14, s12
 800e1b4:	edc0 7a01 	vstr	s15, [r0, #4]
 800e1b8:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800e1bc:	ed92 5a01 	vldr	s10, [r2, #4]
 800e1c0:	edd2 5a00 	vldr	s11, [r2]
 800e1c4:	ed92 6a02 	vldr	s12, [r2, #8]
 800e1c8:	ee07 3a90 	vmov	s15, r3
 800e1cc:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800e1d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1d4:	ee06 3a90 	vmov	s13, r3
 800e1d8:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e1dc:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800e1e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e1e4:	ee07 3a10 	vmov	s14, r3
 800e1e8:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800e1ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e1f0:	eee7 7a06 	vfma.f32	s15, s14, s12
 800e1f4:	edc0 7a02 	vstr	s15, [r0, #8]
 800e1f8:	4770      	bx	lr
 800e1fa:	bf00      	nop

0800e1fc <findAxis>:
 800e1fc:	f990 3000 	ldrsb.w	r3, [r0]
 800e200:	2b01      	cmp	r3, #1
 800e202:	d027      	beq.n	800e254 <findAxis+0x58>
 800e204:	3301      	adds	r3, #1
 800e206:	d00e      	beq.n	800e226 <findAxis+0x2a>
 800e208:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d053      	beq.n	800e2b8 <findAxis+0xbc>
 800e210:	3301      	adds	r3, #1
 800e212:	d048      	beq.n	800e2a6 <findAxis+0xaa>
 800e214:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800e218:	2b01      	cmp	r3, #1
 800e21a:	d053      	beq.n	800e2c4 <findAxis+0xc8>
 800e21c:	3301      	adds	r3, #1
 800e21e:	d104      	bne.n	800e22a <findAxis+0x2e>
 800e220:	2364      	movs	r3, #100	; 0x64
 800e222:	700b      	strb	r3, [r1, #0]
 800e224:	e001      	b.n	800e22a <findAxis+0x2e>
 800e226:	2377      	movs	r3, #119	; 0x77
 800e228:	700b      	strb	r3, [r1, #0]
 800e22a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d016      	beq.n	800e260 <findAxis+0x64>
 800e232:	3301      	adds	r3, #1
 800e234:	d02e      	beq.n	800e294 <findAxis+0x98>
 800e236:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d039      	beq.n	800e2b2 <findAxis+0xb6>
 800e23e:	3301      	adds	r3, #1
 800e240:	d034      	beq.n	800e2ac <findAxis+0xb0>
 800e242:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800e246:	2b01      	cmp	r3, #1
 800e248:	d03f      	beq.n	800e2ca <findAxis+0xce>
 800e24a:	3301      	adds	r3, #1
 800e24c:	d10a      	bne.n	800e264 <findAxis+0x68>
 800e24e:	2364      	movs	r3, #100	; 0x64
 800e250:	704b      	strb	r3, [r1, #1]
 800e252:	e007      	b.n	800e264 <findAxis+0x68>
 800e254:	2365      	movs	r3, #101	; 0x65
 800e256:	700b      	strb	r3, [r1, #0]
 800e258:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d1e8      	bne.n	800e232 <findAxis+0x36>
 800e260:	2365      	movs	r3, #101	; 0x65
 800e262:	704b      	strb	r3, [r1, #1]
 800e264:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d010      	beq.n	800e28e <findAxis+0x92>
 800e26c:	3301      	adds	r3, #1
 800e26e:	d014      	beq.n	800e29a <findAxis+0x9e>
 800e270:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800e274:	2b01      	cmp	r3, #1
 800e276:	d022      	beq.n	800e2be <findAxis+0xc2>
 800e278:	3301      	adds	r3, #1
 800e27a:	d011      	beq.n	800e2a0 <findAxis+0xa4>
 800e27c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800e280:	2b01      	cmp	r3, #1
 800e282:	d025      	beq.n	800e2d0 <findAxis+0xd4>
 800e284:	3301      	adds	r3, #1
 800e286:	bf04      	itt	eq
 800e288:	2364      	moveq	r3, #100	; 0x64
 800e28a:	708b      	strbeq	r3, [r1, #2]
 800e28c:	4770      	bx	lr
 800e28e:	2365      	movs	r3, #101	; 0x65
 800e290:	708b      	strb	r3, [r1, #2]
 800e292:	4770      	bx	lr
 800e294:	2377      	movs	r3, #119	; 0x77
 800e296:	704b      	strb	r3, [r1, #1]
 800e298:	e7e4      	b.n	800e264 <findAxis+0x68>
 800e29a:	2377      	movs	r3, #119	; 0x77
 800e29c:	708b      	strb	r3, [r1, #2]
 800e29e:	4770      	bx	lr
 800e2a0:	2373      	movs	r3, #115	; 0x73
 800e2a2:	708b      	strb	r3, [r1, #2]
 800e2a4:	4770      	bx	lr
 800e2a6:	2373      	movs	r3, #115	; 0x73
 800e2a8:	700b      	strb	r3, [r1, #0]
 800e2aa:	e7be      	b.n	800e22a <findAxis+0x2e>
 800e2ac:	2373      	movs	r3, #115	; 0x73
 800e2ae:	704b      	strb	r3, [r1, #1]
 800e2b0:	e7d8      	b.n	800e264 <findAxis+0x68>
 800e2b2:	236e      	movs	r3, #110	; 0x6e
 800e2b4:	704b      	strb	r3, [r1, #1]
 800e2b6:	e7d5      	b.n	800e264 <findAxis+0x68>
 800e2b8:	236e      	movs	r3, #110	; 0x6e
 800e2ba:	700b      	strb	r3, [r1, #0]
 800e2bc:	e7b5      	b.n	800e22a <findAxis+0x2e>
 800e2be:	236e      	movs	r3, #110	; 0x6e
 800e2c0:	708b      	strb	r3, [r1, #2]
 800e2c2:	4770      	bx	lr
 800e2c4:	2375      	movs	r3, #117	; 0x75
 800e2c6:	700b      	strb	r3, [r1, #0]
 800e2c8:	e7af      	b.n	800e22a <findAxis+0x2e>
 800e2ca:	2375      	movs	r3, #117	; 0x75
 800e2cc:	704b      	strb	r3, [r1, #1]
 800e2ce:	e7c9      	b.n	800e264 <findAxis+0x68>
 800e2d0:	2375      	movs	r3, #117	; 0x75
 800e2d2:	708b      	strb	r3, [r1, #2]
 800e2d4:	4770      	bx	lr
 800e2d6:	bf00      	nop

0800e2d8 <findDirection>:
 800e2d8:	b5d0      	push	{r4, r6, r7, lr}
 800e2da:	ed2d 8b04 	vpush	{d8-d9}
 800e2de:	eef0 8ac0 	vabs.f32	s17, s0
 800e2e2:	eeb0 8ae0 	vabs.f32	s16, s1
 800e2e6:	eef4 8ac8 	vcmpe.f32	s17, s16
 800e2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	eeb0 9ac1 	vabs.f32	s18, s2
 800e2f4:	dd36      	ble.n	800e364 <findDirection+0x8c>
 800e2f6:	eef4 8ac9 	vcmpe.f32	s17, s18
 800e2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2fe:	dd31      	ble.n	800e364 <findDirection+0x8c>
 800e300:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e308:	ee18 0a90 	vmov	r0, s17
 800e30c:	f340 8094 	ble.w	800e438 <findDirection+0x160>
 800e310:	f7f2 f912 	bl	8000538 <__aeabi_f2d>
 800e314:	4606      	mov	r6, r0
 800e316:	ee18 0a10 	vmov	r0, s16
 800e31a:	460f      	mov	r7, r1
 800e31c:	f7f2 f90c 	bl	8000538 <__aeabi_f2d>
 800e320:	a387      	add	r3, pc, #540	; (adr r3, 800e540 <findDirection+0x268>)
 800e322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e326:	f7f2 f95f 	bl	80005e8 <__aeabi_dmul>
 800e32a:	4602      	mov	r2, r0
 800e32c:	460b      	mov	r3, r1
 800e32e:	4630      	mov	r0, r6
 800e330:	4639      	mov	r1, r7
 800e332:	f7f2 fbe9 	bl	8000b08 <__aeabi_dcmpgt>
 800e336:	b188      	cbz	r0, 800e35c <findDirection+0x84>
 800e338:	ee19 0a10 	vmov	r0, s18
 800e33c:	f7f2 f8fc 	bl	8000538 <__aeabi_f2d>
 800e340:	a37f      	add	r3, pc, #508	; (adr r3, 800e540 <findDirection+0x268>)
 800e342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e346:	f7f2 f94f 	bl	80005e8 <__aeabi_dmul>
 800e34a:	4602      	mov	r2, r0
 800e34c:	460b      	mov	r3, r1
 800e34e:	4630      	mov	r0, r6
 800e350:	4639      	mov	r1, r7
 800e352:	f7f2 fbd9 	bl	8000b08 <__aeabi_dcmpgt>
 800e356:	2800      	cmp	r0, #0
 800e358:	bf18      	it	ne
 800e35a:	2404      	movne	r4, #4
 800e35c:	ecbd 8b04 	vpop	{d8-d9}
 800e360:	4620      	mov	r0, r4
 800e362:	bdd0      	pop	{r4, r6, r7, pc}
 800e364:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800e368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e36c:	dd32      	ble.n	800e3d4 <findDirection+0xfc>
 800e36e:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800e372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e376:	ee18 0a10 	vmov	r0, s16
 800e37a:	f340 8086 	ble.w	800e48a <findDirection+0x1b2>
 800e37e:	f7f2 f8db 	bl	8000538 <__aeabi_f2d>
 800e382:	4606      	mov	r6, r0
 800e384:	ee18 0a90 	vmov	r0, s17
 800e388:	460f      	mov	r7, r1
 800e38a:	f7f2 f8d5 	bl	8000538 <__aeabi_f2d>
 800e38e:	a36c      	add	r3, pc, #432	; (adr r3, 800e540 <findDirection+0x268>)
 800e390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e394:	f7f2 f928 	bl	80005e8 <__aeabi_dmul>
 800e398:	4602      	mov	r2, r0
 800e39a:	460b      	mov	r3, r1
 800e39c:	4630      	mov	r0, r6
 800e39e:	4639      	mov	r1, r7
 800e3a0:	f7f2 fbb2 	bl	8000b08 <__aeabi_dcmpgt>
 800e3a4:	2800      	cmp	r0, #0
 800e3a6:	d0d9      	beq.n	800e35c <findDirection+0x84>
 800e3a8:	ee19 0a10 	vmov	r0, s18
 800e3ac:	f7f2 f8c4 	bl	8000538 <__aeabi_f2d>
 800e3b0:	a363      	add	r3, pc, #396	; (adr r3, 800e540 <findDirection+0x268>)
 800e3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b6:	f7f2 f917 	bl	80005e8 <__aeabi_dmul>
 800e3ba:	4602      	mov	r2, r0
 800e3bc:	460b      	mov	r3, r1
 800e3be:	4630      	mov	r0, r6
 800e3c0:	4639      	mov	r1, r7
 800e3c2:	f7f2 fba1 	bl	8000b08 <__aeabi_dcmpgt>
 800e3c6:	ecbd 8b04 	vpop	{d8-d9}
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	bf18      	it	ne
 800e3ce:	2401      	movne	r4, #1
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	bdd0      	pop	{r4, r6, r7, pc}
 800e3d4:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800e3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3dc:	ee19 0a10 	vmov	r0, s18
 800e3e0:	dd7f      	ble.n	800e4e2 <findDirection+0x20a>
 800e3e2:	f7f2 f8a9 	bl	8000538 <__aeabi_f2d>
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	ee18 0a10 	vmov	r0, s16
 800e3ec:	460f      	mov	r7, r1
 800e3ee:	f7f2 f8a3 	bl	8000538 <__aeabi_f2d>
 800e3f2:	a353      	add	r3, pc, #332	; (adr r3, 800e540 <findDirection+0x268>)
 800e3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f8:	f7f2 f8f6 	bl	80005e8 <__aeabi_dmul>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	460b      	mov	r3, r1
 800e400:	4630      	mov	r0, r6
 800e402:	4639      	mov	r1, r7
 800e404:	f7f2 fb80 	bl	8000b08 <__aeabi_dcmpgt>
 800e408:	2800      	cmp	r0, #0
 800e40a:	d0a7      	beq.n	800e35c <findDirection+0x84>
 800e40c:	ee18 0a90 	vmov	r0, s17
 800e410:	f7f2 f892 	bl	8000538 <__aeabi_f2d>
 800e414:	a34a      	add	r3, pc, #296	; (adr r3, 800e540 <findDirection+0x268>)
 800e416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41a:	f7f2 f8e5 	bl	80005e8 <__aeabi_dmul>
 800e41e:	4602      	mov	r2, r0
 800e420:	460b      	mov	r3, r1
 800e422:	4630      	mov	r0, r6
 800e424:	4639      	mov	r1, r7
 800e426:	f7f2 fb6f 	bl	8000b08 <__aeabi_dcmpgt>
 800e42a:	ecbd 8b04 	vpop	{d8-d9}
 800e42e:	2800      	cmp	r0, #0
 800e430:	bf18      	it	ne
 800e432:	2400      	movne	r4, #0
 800e434:	4620      	mov	r0, r4
 800e436:	bdd0      	pop	{r4, r6, r7, pc}
 800e438:	f7f2 f87e 	bl	8000538 <__aeabi_f2d>
 800e43c:	4606      	mov	r6, r0
 800e43e:	ee18 0a10 	vmov	r0, s16
 800e442:	460f      	mov	r7, r1
 800e444:	f7f2 f878 	bl	8000538 <__aeabi_f2d>
 800e448:	a33d      	add	r3, pc, #244	; (adr r3, 800e540 <findDirection+0x268>)
 800e44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e44e:	f7f2 f8cb 	bl	80005e8 <__aeabi_dmul>
 800e452:	4602      	mov	r2, r0
 800e454:	460b      	mov	r3, r1
 800e456:	4630      	mov	r0, r6
 800e458:	4639      	mov	r1, r7
 800e45a:	f7f2 fb55 	bl	8000b08 <__aeabi_dcmpgt>
 800e45e:	2800      	cmp	r0, #0
 800e460:	f43f af7c 	beq.w	800e35c <findDirection+0x84>
 800e464:	ee19 0a10 	vmov	r0, s18
 800e468:	f7f2 f866 	bl	8000538 <__aeabi_f2d>
 800e46c:	a334      	add	r3, pc, #208	; (adr r3, 800e540 <findDirection+0x268>)
 800e46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e472:	f7f2 f8b9 	bl	80005e8 <__aeabi_dmul>
 800e476:	4602      	mov	r2, r0
 800e478:	460b      	mov	r3, r1
 800e47a:	4630      	mov	r0, r6
 800e47c:	4639      	mov	r1, r7
 800e47e:	f7f2 fb43 	bl	8000b08 <__aeabi_dcmpgt>
 800e482:	2800      	cmp	r0, #0
 800e484:	bf18      	it	ne
 800e486:	2405      	movne	r4, #5
 800e488:	e768      	b.n	800e35c <findDirection+0x84>
 800e48a:	f7f2 f855 	bl	8000538 <__aeabi_f2d>
 800e48e:	4606      	mov	r6, r0
 800e490:	ee18 0a90 	vmov	r0, s17
 800e494:	460f      	mov	r7, r1
 800e496:	f7f2 f84f 	bl	8000538 <__aeabi_f2d>
 800e49a:	a329      	add	r3, pc, #164	; (adr r3, 800e540 <findDirection+0x268>)
 800e49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a0:	f7f2 f8a2 	bl	80005e8 <__aeabi_dmul>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	4639      	mov	r1, r7
 800e4ac:	f7f2 fb2c 	bl	8000b08 <__aeabi_dcmpgt>
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	f43f af53 	beq.w	800e35c <findDirection+0x84>
 800e4b6:	ee19 0a10 	vmov	r0, s18
 800e4ba:	f7f2 f83d 	bl	8000538 <__aeabi_f2d>
 800e4be:	a320      	add	r3, pc, #128	; (adr r3, 800e540 <findDirection+0x268>)
 800e4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c4:	f7f2 f890 	bl	80005e8 <__aeabi_dmul>
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	460b      	mov	r3, r1
 800e4cc:	4630      	mov	r0, r6
 800e4ce:	4639      	mov	r1, r7
 800e4d0:	f7f2 fb1a 	bl	8000b08 <__aeabi_dcmpgt>
 800e4d4:	ecbd 8b04 	vpop	{d8-d9}
 800e4d8:	2800      	cmp	r0, #0
 800e4da:	bf18      	it	ne
 800e4dc:	2403      	movne	r4, #3
 800e4de:	4620      	mov	r0, r4
 800e4e0:	bdd0      	pop	{r4, r6, r7, pc}
 800e4e2:	f7f2 f829 	bl	8000538 <__aeabi_f2d>
 800e4e6:	4606      	mov	r6, r0
 800e4e8:	ee18 0a10 	vmov	r0, s16
 800e4ec:	460f      	mov	r7, r1
 800e4ee:	f7f2 f823 	bl	8000538 <__aeabi_f2d>
 800e4f2:	a313      	add	r3, pc, #76	; (adr r3, 800e540 <findDirection+0x268>)
 800e4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f8:	f7f2 f876 	bl	80005e8 <__aeabi_dmul>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	460b      	mov	r3, r1
 800e500:	4630      	mov	r0, r6
 800e502:	4639      	mov	r1, r7
 800e504:	f7f2 fb00 	bl	8000b08 <__aeabi_dcmpgt>
 800e508:	2800      	cmp	r0, #0
 800e50a:	f43f af27 	beq.w	800e35c <findDirection+0x84>
 800e50e:	ee18 0a90 	vmov	r0, s17
 800e512:	f7f2 f811 	bl	8000538 <__aeabi_f2d>
 800e516:	a30a      	add	r3, pc, #40	; (adr r3, 800e540 <findDirection+0x268>)
 800e518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51c:	f7f2 f864 	bl	80005e8 <__aeabi_dmul>
 800e520:	4602      	mov	r2, r0
 800e522:	460b      	mov	r3, r1
 800e524:	4630      	mov	r0, r6
 800e526:	4639      	mov	r1, r7
 800e528:	f7f2 faee 	bl	8000b08 <__aeabi_dcmpgt>
 800e52c:	ecbd 8b04 	vpop	{d8-d9}
 800e530:	2800      	cmp	r0, #0
 800e532:	bf18      	it	ne
 800e534:	2402      	movne	r4, #2
 800e536:	4620      	mov	r0, r4
 800e538:	bdd0      	pop	{r4, r6, r7, pc}
 800e53a:	bf00      	nop
 800e53c:	f3af 8000 	nop.w
 800e540:	e0000000 	.word	0xe0000000
 800e544:	3ff6b851 	.word	0x3ff6b851

0800e548 <updateOrientation>:
 800e548:	b410      	push	{r4}
 800e54a:	2300      	movs	r3, #0
 800e54c:	6003      	str	r3, [r0, #0]
 800e54e:	6043      	str	r3, [r0, #4]
 800e550:	7203      	strb	r3, [r0, #8]
 800e552:	780c      	ldrb	r4, [r1, #0]
 800e554:	784a      	ldrb	r2, [r1, #1]
 800e556:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800e55a:	2b17      	cmp	r3, #23
 800e55c:	bf98      	it	ls
 800e55e:	3420      	addls	r4, #32
 800e560:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800e564:	bf98      	it	ls
 800e566:	b2e4      	uxtbls	r4, r4
 800e568:	2b17      	cmp	r3, #23
 800e56a:	788b      	ldrb	r3, [r1, #2]
 800e56c:	bf98      	it	ls
 800e56e:	3220      	addls	r2, #32
 800e570:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800e574:	bf98      	it	ls
 800e576:	b2d2      	uxtbls	r2, r2
 800e578:	2917      	cmp	r1, #23
 800e57a:	bf98      	it	ls
 800e57c:	3320      	addls	r3, #32
 800e57e:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800e582:	bf98      	it	ls
 800e584:	b2db      	uxtbls	r3, r3
 800e586:	2c13      	cmp	r4, #19
 800e588:	d80d      	bhi.n	800e5a6 <updateOrientation+0x5e>
 800e58a:	e8df f004 	tbb	[pc, r4]
 800e58e:	0a36      	.short	0x0a36
 800e590:	0c0c0c0c 	.word	0x0c0c0c0c
 800e594:	0c0c0c0c 	.word	0x0c0c0c0c
 800e598:	0c0c0c39 	.word	0x0c0c0c39
 800e59c:	3f0c3c0c 	.word	0x3f0c3c0c
 800e5a0:	420c      	.short	0x420c
 800e5a2:	2101      	movs	r1, #1
 800e5a4:	7001      	strb	r1, [r0, #0]
 800e5a6:	3a64      	subs	r2, #100	; 0x64
 800e5a8:	2a13      	cmp	r2, #19
 800e5aa:	d80d      	bhi.n	800e5c8 <updateOrientation+0x80>
 800e5ac:	e8df f002 	tbb	[pc, r2]
 800e5b0:	0c0c0a34 	.word	0x0c0c0a34
 800e5b4:	0c0c0c0c 	.word	0x0c0c0c0c
 800e5b8:	0c370c0c 	.word	0x0c370c0c
 800e5bc:	3a0c0c0c 	.word	0x3a0c0c0c
 800e5c0:	400c3d0c 	.word	0x400c3d0c
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	7042      	strb	r2, [r0, #1]
 800e5c8:	3b64      	subs	r3, #100	; 0x64
 800e5ca:	2b13      	cmp	r3, #19
 800e5cc:	d80d      	bhi.n	800e5ea <updateOrientation+0xa2>
 800e5ce:	e8df f003 	tbb	[pc, r3]
 800e5d2:	320a      	.short	0x320a
 800e5d4:	0c0c0c0c 	.word	0x0c0c0c0c
 800e5d8:	0c0c0c0c 	.word	0x0c0c0c0c
 800e5dc:	0c0c0c37 	.word	0x0c0c0c37
 800e5e0:	410c3c0c 	.word	0x410c3c0c
 800e5e4:	0f0c      	.short	0x0f0c
 800e5e6:	23ff      	movs	r3, #255	; 0xff
 800e5e8:	7203      	strb	r3, [r0, #8]
 800e5ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5ee:	4770      	bx	lr
 800e5f0:	23ff      	movs	r3, #255	; 0xff
 800e5f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5f6:	7083      	strb	r3, [r0, #2]
 800e5f8:	4770      	bx	lr
 800e5fa:	21ff      	movs	r1, #255	; 0xff
 800e5fc:	7181      	strb	r1, [r0, #6]
 800e5fe:	e7d2      	b.n	800e5a6 <updateOrientation+0x5e>
 800e600:	2101      	movs	r1, #1
 800e602:	70c1      	strb	r1, [r0, #3]
 800e604:	e7cf      	b.n	800e5a6 <updateOrientation+0x5e>
 800e606:	21ff      	movs	r1, #255	; 0xff
 800e608:	70c1      	strb	r1, [r0, #3]
 800e60a:	e7cc      	b.n	800e5a6 <updateOrientation+0x5e>
 800e60c:	2101      	movs	r1, #1
 800e60e:	7181      	strb	r1, [r0, #6]
 800e610:	e7c9      	b.n	800e5a6 <updateOrientation+0x5e>
 800e612:	21ff      	movs	r1, #255	; 0xff
 800e614:	7001      	strb	r1, [r0, #0]
 800e616:	e7c6      	b.n	800e5a6 <updateOrientation+0x5e>
 800e618:	22ff      	movs	r2, #255	; 0xff
 800e61a:	71c2      	strb	r2, [r0, #7]
 800e61c:	e7d4      	b.n	800e5c8 <updateOrientation+0x80>
 800e61e:	2201      	movs	r2, #1
 800e620:	7102      	strb	r2, [r0, #4]
 800e622:	e7d1      	b.n	800e5c8 <updateOrientation+0x80>
 800e624:	22ff      	movs	r2, #255	; 0xff
 800e626:	7102      	strb	r2, [r0, #4]
 800e628:	e7ce      	b.n	800e5c8 <updateOrientation+0x80>
 800e62a:	2201      	movs	r2, #1
 800e62c:	71c2      	strb	r2, [r0, #7]
 800e62e:	e7cb      	b.n	800e5c8 <updateOrientation+0x80>
 800e630:	22ff      	movs	r2, #255	; 0xff
 800e632:	7042      	strb	r2, [r0, #1]
 800e634:	e7c8      	b.n	800e5c8 <updateOrientation+0x80>
 800e636:	2301      	movs	r3, #1
 800e638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e63c:	7083      	strb	r3, [r0, #2]
 800e63e:	4770      	bx	lr
 800e640:	2301      	movs	r3, #1
 800e642:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e646:	7143      	strb	r3, [r0, #5]
 800e648:	4770      	bx	lr
 800e64a:	23ff      	movs	r3, #255	; 0xff
 800e64c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e650:	7143      	strb	r3, [r0, #5]
 800e652:	4770      	bx	lr
 800e654:	2301      	movs	r3, #1
 800e656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e65a:	7203      	strb	r3, [r0, #8]
 800e65c:	4770      	bx	lr
 800e65e:	bf00      	nop

0800e660 <qmult>:
 800e660:	ed91 2a03 	vldr	s4, [r1, #12]
 800e664:	ed90 3a01 	vldr	s6, [r0, #4]
 800e668:	edd0 5a02 	vldr	s11, [r0, #8]
 800e66c:	edd1 4a01 	vldr	s9, [r1, #4]
 800e670:	ed90 4a00 	vldr	s8, [r0]
 800e674:	edd1 3a00 	vldr	s7, [r1]
 800e678:	ed91 5a02 	vldr	s10, [r1, #8]
 800e67c:	edd0 2a03 	vldr	s5, [r0, #12]
 800e680:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800e684:	ee62 6a03 	vmul.f32	s13, s4, s6
 800e688:	ee22 7a25 	vmul.f32	s14, s4, s11
 800e68c:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800e690:	eea4 6a02 	vfma.f32	s12, s8, s4
 800e694:	eee4 6a05 	vfma.f32	s13, s8, s10
 800e698:	eea3 7a23 	vfma.f32	s14, s6, s7
 800e69c:	eee4 7a63 	vfms.f32	s15, s8, s7
 800e6a0:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800e6a4:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800e6a8:	eea5 7a22 	vfma.f32	s14, s10, s5
 800e6ac:	eee2 7a22 	vfma.f32	s15, s4, s5
 800e6b0:	eea3 6a45 	vfms.f32	s12, s6, s10
 800e6b4:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800e6b8:	eea4 7a64 	vfms.f32	s14, s8, s9
 800e6bc:	eee5 7a65 	vfms.f32	s15, s10, s11
 800e6c0:	ed82 6a00 	vstr	s12, [r2]
 800e6c4:	edc2 6a01 	vstr	s13, [r2, #4]
 800e6c8:	ed82 7a02 	vstr	s14, [r2, #8]
 800e6cc:	edc2 7a03 	vstr	s15, [r2, #12]
 800e6d0:	4770      	bx	lr
 800e6d2:	bf00      	nop

0800e6d4 <MEMS_setMagIndexToOne>:
 800e6d4:	291f      	cmp	r1, #31
 800e6d6:	b430      	push	{r4, r5}
 800e6d8:	d920      	bls.n	800e71c <MEMS_setMagIndexToOne+0x48>
 800e6da:	6885      	ldr	r5, [r0, #8]
 800e6dc:	3920      	subs	r1, #32
 800e6de:	2401      	movs	r4, #1
 800e6e0:	fa04 f101 	lsl.w	r1, r4, r1
 800e6e4:	ea21 0105 	bic.w	r1, r1, r5
 800e6e8:	4069      	eors	r1, r5
 800e6ea:	2a1f      	cmp	r2, #31
 800e6ec:	6081      	str	r1, [r0, #8]
 800e6ee:	d91f      	bls.n	800e730 <MEMS_setMagIndexToOne+0x5c>
 800e6f0:	6901      	ldr	r1, [r0, #16]
 800e6f2:	f1a2 0420 	sub.w	r4, r2, #32
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	40a2      	lsls	r2, r4
 800e6fa:	ea22 0201 	bic.w	r2, r2, r1
 800e6fe:	404a      	eors	r2, r1
 800e700:	2b1f      	cmp	r3, #31
 800e702:	6102      	str	r2, [r0, #16]
 800e704:	d91e      	bls.n	800e744 <MEMS_setMagIndexToOne+0x70>
 800e706:	69c2      	ldr	r2, [r0, #28]
 800e708:	f1a3 0120 	sub.w	r1, r3, #32
 800e70c:	2301      	movs	r3, #1
 800e70e:	408b      	lsls	r3, r1
 800e710:	ea23 0302 	bic.w	r3, r3, r2
 800e714:	4053      	eors	r3, r2
 800e716:	bc30      	pop	{r4, r5}
 800e718:	61c3      	str	r3, [r0, #28]
 800e71a:	4770      	bx	lr
 800e71c:	68c5      	ldr	r5, [r0, #12]
 800e71e:	2401      	movs	r4, #1
 800e720:	fa04 f101 	lsl.w	r1, r4, r1
 800e724:	ea21 0105 	bic.w	r1, r1, r5
 800e728:	4069      	eors	r1, r5
 800e72a:	2a1f      	cmp	r2, #31
 800e72c:	60c1      	str	r1, [r0, #12]
 800e72e:	d8df      	bhi.n	800e6f0 <MEMS_setMagIndexToOne+0x1c>
 800e730:	6944      	ldr	r4, [r0, #20]
 800e732:	2101      	movs	r1, #1
 800e734:	fa01 f202 	lsl.w	r2, r1, r2
 800e738:	ea22 0204 	bic.w	r2, r2, r4
 800e73c:	4062      	eors	r2, r4
 800e73e:	2b1f      	cmp	r3, #31
 800e740:	6142      	str	r2, [r0, #20]
 800e742:	d8e0      	bhi.n	800e706 <MEMS_setMagIndexToOne+0x32>
 800e744:	6981      	ldr	r1, [r0, #24]
 800e746:	2201      	movs	r2, #1
 800e748:	fa02 f303 	lsl.w	r3, r2, r3
 800e74c:	ea23 0301 	bic.w	r3, r3, r1
 800e750:	404b      	eors	r3, r1
 800e752:	bc30      	pop	{r4, r5}
 800e754:	6183      	str	r3, [r0, #24]
 800e756:	4770      	bx	lr

0800e758 <getRotationMatrix>:
 800e758:	b538      	push	{r3, r4, r5, lr}
 800e75a:	4605      	mov	r5, r0
 800e75c:	460c      	mov	r4, r1
 800e75e:	4610      	mov	r0, r2
 800e760:	2100      	movs	r1, #0
 800e762:	2224      	movs	r2, #36	; 0x24
 800e764:	f009 feea 	bl	801853c <memset>
 800e768:	edd5 5a00 	vldr	s11, [r5]
 800e76c:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800e894 <getRotationMatrix+0x13c>
 800e770:	edc0 5a02 	vstr	s11, [r0, #8]
 800e774:	ed95 7a01 	vldr	s14, [r5, #4]
 800e778:	ed80 7a05 	vstr	s14, [r0, #20]
 800e77c:	ed95 5a02 	vldr	s10, [r5, #8]
 800e780:	ed80 5a08 	vstr	s10, [r0, #32]
 800e784:	ed94 4a02 	vldr	s8, [r4, #8]
 800e788:	edd4 3a01 	vldr	s7, [r4, #4]
 800e78c:	edd4 4a00 	vldr	s9, [r4]
 800e790:	ee67 7a44 	vnmul.f32	s15, s14, s8
 800e794:	ee65 6ae3 	vnmul.f32	s13, s11, s7
 800e798:	eee3 7a85 	vfma.f32	s15, s7, s10
 800e79c:	4603      	mov	r3, r0
 800e79e:	eee4 6a87 	vfma.f32	s13, s9, s14
 800e7a2:	eeb0 7ae7 	vabs.f32	s14, s15
 800e7a6:	eeb4 7ac3 	vcmpe.f32	s14, s6
 800e7aa:	ee25 6a64 	vnmul.f32	s12, s10, s9
 800e7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7b2:	eea4 6a25 	vfma.f32	s12, s8, s11
 800e7b6:	bfdc      	itt	le
 800e7b8:	eec7 5a83 	vdivle.f32	s11, s15, s6
 800e7bc:	eeb0 7a43 	vmovle.f32	s14, s6
 800e7c0:	eeb0 5ac6 	vabs.f32	s10, s12
 800e7c4:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800e7c8:	edc0 6a06 	vstr	s13, [r0, #24]
 800e7cc:	bfd4      	ite	le
 800e7ce:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 800e7d2:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 800e7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7da:	ed80 6a03 	vstr	s12, [r0, #12]
 800e7de:	edc0 7a00 	vstr	s15, [r0]
 800e7e2:	d447      	bmi.n	800e874 <getRotationMatrix+0x11c>
 800e7e4:	eec6 5a07 	vdiv.f32	s11, s12, s14
 800e7e8:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800e7ec:	eef0 5a66 	vmov.f32	s11, s13
 800e7f0:	edd3 6a06 	vldr	s13, [r3, #24]
 800e7f4:	eeb0 5ae6 	vabs.f32	s10, s13
 800e7f8:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800e7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e800:	d543      	bpl.n	800e88a <getRotationMatrix+0x132>
 800e802:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800e806:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800e80a:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800e80e:	eeb0 7a45 	vmov.f32	s14, s10
 800e812:	eea5 4aa4 	vfma.f32	s8, s11, s9
 800e816:	eef0 5a44 	vmov.f32	s11, s8
 800e81a:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800e81e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800e822:	ee65 5a07 	vmul.f32	s11, s10, s14
 800e826:	edd3 3a08 	vldr	s7, [r3, #32]
 800e82a:	edd3 4a02 	vldr	s9, [r3, #8]
 800e82e:	ed93 4a05 	vldr	s8, [r3, #20]
 800e832:	ee83 7a25 	vdiv.f32	s14, s6, s11
 800e836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e83a:	ee26 6a07 	vmul.f32	s12, s12, s14
 800e83e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e842:	ee66 5a63 	vnmul.f32	s11, s12, s7
 800e846:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 800e84a:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 800e84e:	eea3 5aa7 	vfma.f32	s10, s7, s15
 800e852:	eee4 5a07 	vfma.f32	s11, s8, s14
 800e856:	eee6 6a24 	vfma.f32	s13, s12, s9
 800e85a:	edc3 7a00 	vstr	s15, [r3]
 800e85e:	ed83 6a03 	vstr	s12, [r3, #12]
 800e862:	ed83 7a06 	vstr	s14, [r3, #24]
 800e866:	ed83 5a04 	vstr	s10, [r3, #16]
 800e86a:	edc3 5a01 	vstr	s11, [r3, #4]
 800e86e:	edc3 6a07 	vstr	s13, [r3, #28]
 800e872:	bd38      	pop	{r3, r4, r5, pc}
 800e874:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800e878:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800e87c:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800e880:	eeb0 7a45 	vmov.f32	s14, s10
 800e884:	eee6 5aa4 	vfma.f32	s11, s13, s9
 800e888:	e7b2      	b.n	800e7f0 <getRotationMatrix+0x98>
 800e88a:	ee86 5a87 	vdiv.f32	s10, s13, s14
 800e88e:	eee5 5a05 	vfma.f32	s11, s10, s10
 800e892:	e7c2      	b.n	800e81a <getRotationMatrix+0xc2>
 800e894:	00000000 	.word	0x00000000

0800e898 <b_dcm2q>:
 800e898:	ed90 5a08 	vldr	s10, [r0, #32]
 800e89c:	edd0 7a00 	vldr	s15, [r0]
 800e8a0:	edd0 6a04 	vldr	s13, [r0, #16]
 800e8a4:	ee37 7a85 	vadd.f32	s14, s15, s10
 800e8a8:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800e8ac:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e8b0:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800e8b4:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800e8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8bc:	bfc5      	ittet	gt
 800e8be:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800e8c2:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800e8c6:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800e9d4 <b_dcm2q+0x13c>
 800e8ca:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800e8ce:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800e8d2:	ee35 6a47 	vsub.f32	s12, s10, s14
 800e8d6:	ee35 7a07 	vadd.f32	s14, s10, s14
 800e8da:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800e8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8e2:	bfc5      	ittet	gt
 800e8e4:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800e8e8:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800e8ec:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800e9d4 <b_dcm2q+0x13c>
 800e8f0:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800e8f4:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800e8f8:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800e8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e900:	dd5b      	ble.n	800e9ba <b_dcm2q+0x122>
 800e902:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800e906:	ee37 7a24 	vadd.f32	s14, s14, s9
 800e90a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800e90e:	eef1 4ac7 	vsqrt.f32	s9, s14
 800e912:	ee64 4a84 	vmul.f32	s9, s9, s8
 800e916:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e91a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e91e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e922:	edd0 6a07 	vldr	s13, [r0, #28]
 800e926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e92e:	bf85      	ittet	hi
 800e930:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800e934:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800e938:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800e9d4 <b_dcm2q+0x13c>
 800e93c:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800e940:	edd0 7a05 	vldr	s15, [r0, #20]
 800e944:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e948:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e950:	d43c      	bmi.n	800e9cc <b_dcm2q+0x134>
 800e952:	bfd8      	it	le
 800e954:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800e958:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e95c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e960:	ed81 7a00 	vstr	s14, [r1]
 800e964:	edd0 7a06 	vldr	s15, [r0, #24]
 800e968:	ed90 7a02 	vldr	s14, [r0, #8]
 800e96c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e970:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e978:	d425      	bmi.n	800e9c6 <b_dcm2q+0x12e>
 800e97a:	bfd8      	it	le
 800e97c:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800e980:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e984:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800e988:	edc1 5a01 	vstr	s11, [r1, #4]
 800e98c:	edd0 7a01 	vldr	s15, [r0, #4]
 800e990:	ed90 7a03 	vldr	s14, [r0, #12]
 800e994:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9a0:	d40e      	bmi.n	800e9c0 <b_dcm2q+0x128>
 800e9a2:	bfd8      	it	le
 800e9a4:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800e9a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e9ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e9b0:	edc1 4a03 	vstr	s9, [r1, #12]
 800e9b4:	ed81 6a02 	vstr	s12, [r1, #8]
 800e9b8:	4770      	bx	lr
 800e9ba:	eddf 4a06 	vldr	s9, [pc, #24]	; 800e9d4 <b_dcm2q+0x13c>
 800e9be:	e7aa      	b.n	800e916 <b_dcm2q+0x7e>
 800e9c0:	eeb1 6a46 	vneg.f32	s12, s12
 800e9c4:	e7f0      	b.n	800e9a8 <b_dcm2q+0x110>
 800e9c6:	eef1 5a65 	vneg.f32	s11, s11
 800e9ca:	e7d9      	b.n	800e980 <b_dcm2q+0xe8>
 800e9cc:	eeb1 7a47 	vneg.f32	s14, s14
 800e9d0:	e7c2      	b.n	800e958 <b_dcm2q+0xc0>
 800e9d2:	bf00      	nop
 800e9d4:	00000000 	.word	0x00000000

0800e9d8 <q2hpr>:
 800e9d8:	b510      	push	{r4, lr}
 800e9da:	ed90 7a00 	vldr	s14, [r0]
 800e9de:	edd0 6a01 	vldr	s13, [r0, #4]
 800e9e2:	edd0 7a02 	vldr	s15, [r0, #8]
 800e9e6:	ed90 5a03 	vldr	s10, [r0, #12]
 800e9ea:	ed2d 8b0a 	vpush	{d8-d12}
 800e9ee:	ee27 0a27 	vmul.f32	s0, s14, s15
 800e9f2:	ee27 8a26 	vmul.f32	s16, s14, s13
 800e9f6:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800e9fa:	ee67 0a07 	vmul.f32	s1, s14, s14
 800e9fe:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800ea02:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ea06:	ee27 7a05 	vmul.f32	s14, s14, s10
 800ea0a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ea0e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ea12:	ee78 aa08 	vadd.f32	s21, s16, s16
 800ea16:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800ea1a:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800ea1e:	ee30 ca00 	vadd.f32	s24, s0, s0
 800ea22:	ee36 ba06 	vadd.f32	s22, s12, s12
 800ea26:	ee77 8a07 	vadd.f32	s17, s14, s14
 800ea2a:	ee75 baa5 	vadd.f32	s23, s11, s11
 800ea2e:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800ea32:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800ea36:	460c      	mov	r4, r1
 800ea38:	bb8a      	cbnz	r2, 800ea9e <q2hpr+0xc6>
 800ea3a:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800ea3e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800ea42:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800ea46:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800ea4a:	f00a fc23 	bl	8019294 <atan2f>
 800ea4e:	eeb0 8a40 	vmov.f32	s16, s0
 800ea52:	ed84 8a00 	vstr	s16, [r4]
 800ea56:	ee38 0aab 	vadd.f32	s0, s17, s23
 800ea5a:	f00a fbe9 	bl	8019230 <asinf>
 800ea5e:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800ea62:	eef0 8a40 	vmov.f32	s17, s0
 800ea66:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800ea6a:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800ea6e:	f00a fc11 	bl	8019294 <atan2f>
 800ea72:	eef1 8a68 	vneg.f32	s17, s17
 800ea76:	eeb0 9a40 	vmov.f32	s18, s0
 800ea7a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ea7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea82:	ed84 9a02 	vstr	s18, [r4, #8]
 800ea86:	edc4 8a01 	vstr	s17, [r4, #4]
 800ea8a:	d505      	bpl.n	800ea98 <q2hpr+0xc0>
 800ea8c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800eae4 <q2hpr+0x10c>
 800ea90:	ee38 8a00 	vadd.f32	s16, s16, s0
 800ea94:	ed84 8a00 	vstr	s16, [r4]
 800ea98:	ecbd 8b0a 	vpop	{d8-d12}
 800ea9c:	bd10      	pop	{r4, pc}
 800ea9e:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800eaa2:	f00a fbc5 	bl	8019230 <asinf>
 800eaa6:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800eaaa:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800eaae:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800eab2:	eeb0 9a40 	vmov.f32	s18, s0
 800eab6:	ee38 0aab 	vadd.f32	s0, s17, s23
 800eaba:	f00a fbeb 	bl	8019294 <atan2f>
 800eabe:	ee3a 8a88 	vadd.f32	s16, s21, s16
 800eac2:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800eac6:	eef0 8a40 	vmov.f32	s17, s0
 800eaca:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800eace:	eeb1 0a48 	vneg.f32	s0, s16
 800ead2:	f00a fbdf 	bl	8019294 <atan2f>
 800ead6:	eef1 8a68 	vneg.f32	s17, s17
 800eada:	eeb0 8a40 	vmov.f32	s16, s0
 800eade:	ed84 0a00 	vstr	s0, [r4]
 800eae2:	e7ca      	b.n	800ea7a <q2hpr+0xa2>
 800eae4:	40c90fdb 	.word	0x40c90fdb

0800eae8 <llEvaluate.constprop.0>:
 800eae8:	edd2 0a00 	vldr	s1, [r2]
 800eaec:	ed90 1a00 	vldr	s2, [r0]
 800eaf0:	edd0 1a04 	vldr	s3, [r0, #16]
 800eaf4:	edd2 5a01 	vldr	s11, [r2, #4]
 800eaf8:	ed90 6a08 	vldr	s12, [r0, #32]
 800eafc:	ed90 2a05 	vldr	s4, [r0, #20]
 800eb00:	ed92 7a02 	vldr	s14, [r2, #8]
 800eb04:	ed90 3a09 	vldr	s6, [r0, #36]	; 0x24
 800eb08:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 800eb0c:	edd0 2a0c 	vldr	s5, [r0, #48]	; 0x30
 800eb10:	edd2 7a03 	vldr	s15, [r2, #12]
 800eb14:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
 800eb18:	edd0 4a0e 	vldr	s9, [r0, #56]	; 0x38
 800eb1c:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 800eb20:	eec0 6a81 	vdiv.f32	s13, s1, s2
 800eb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb28:	b084      	sub	sp, #16
 800eb2a:	f10d 0810 	add.w	r8, sp, #16
 800eb2e:	2704      	movs	r7, #4
 800eb30:	f101 0510 	add.w	r5, r1, #16
 800eb34:	2f04      	cmp	r7, #4
 800eb36:	4686      	mov	lr, r0
 800eb38:	f04f 0c03 	mov.w	ip, #3
 800eb3c:	b27b      	sxtb	r3, r7
 800eb3e:	eee1 5ae6 	vfms.f32	s11, s3, s13
 800eb42:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800eb46:	ee85 6a82 	vdiv.f32	s12, s11, s4
 800eb4a:	eee6 7ae2 	vfms.f32	s15, s13, s5
 800eb4e:	eea6 7a43 	vfms.f32	s14, s12, s6
 800eb52:	edcd 6a00 	vstr	s13, [sp]
 800eb56:	eec7 6a04 	vdiv.f32	s13, s14, s8
 800eb5a:	eee6 7a63 	vfms.f32	s15, s12, s7
 800eb5e:	ed8d 6a01 	vstr	s12, [sp, #4]
 800eb62:	eee6 7ae4 	vfms.f32	s15, s13, s9
 800eb66:	edcd 6a02 	vstr	s13, [sp, #8]
 800eb6a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800eb6e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800eb72:	ed78 7a01 	vldmdb	r8!, {s15}
 800eb76:	ed65 7a01 	vstmdb	r5!, {s15}
 800eb7a:	d029      	beq.n	800ebd0 <llEvaluate.constprop.0+0xe8>
 800eb7c:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800eb80:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800eb84:	4432      	add	r2, r6
 800eb86:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800eb8a:	edd2 6a00 	vldr	s13, [r2]
 800eb8e:	ed94 7a00 	vldr	s14, [r4]
 800eb92:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800eb96:	3301      	adds	r3, #1
 800eb98:	b2da      	uxtb	r2, r3
 800eb9a:	2a04      	cmp	r2, #4
 800eb9c:	b25b      	sxtb	r3, r3
 800eb9e:	edc5 7a00 	vstr	s15, [r5]
 800eba2:	d1ed      	bne.n	800eb80 <llEvaluate.constprop.0+0x98>
 800eba4:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800eba8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ebac:	f01c 0fff 	tst.w	ip, #255	; 0xff
 800ebb0:	ed85 7a00 	vstr	s14, [r5]
 800ebb4:	d013      	beq.n	800ebde <llEvaluate.constprop.0+0xf6>
 800ebb6:	3f01      	subs	r7, #1
 800ebb8:	b2ff      	uxtb	r7, r7
 800ebba:	ed78 7a01 	vldmdb	r8!, {s15}
 800ebbe:	2f04      	cmp	r7, #4
 800ebc0:	f1ae 0e14 	sub.w	lr, lr, #20
 800ebc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ebc8:	b27b      	sxtb	r3, r7
 800ebca:	ed65 7a01 	vstmdb	r5!, {s15}
 800ebce:	d1d5      	bne.n	800eb7c <llEvaluate.constprop.0+0x94>
 800ebd0:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800ebd4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ebd8:	ed85 7a00 	vstr	s14, [r5]
 800ebdc:	e7eb      	b.n	800ebb6 <llEvaluate.constprop.0+0xce>
 800ebde:	b004      	add	sp, #16
 800ebe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ebe4 <MEMS_updateMagBufferIndex>:
 800ebe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebe8:	ed2d 8b02 	vpush	{d8}
 800ebec:	7804      	ldrb	r4, [r0, #0]
 800ebee:	7842      	ldrb	r2, [r0, #1]
 800ebf0:	4606      	mov	r6, r0
 800ebf2:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	4294      	cmp	r4, r2
 800ebfa:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800ebfe:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800ec02:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800ec06:	b083      	sub	sp, #12
 800ec08:	460d      	mov	r5, r1
 800ec0a:	f100 0001 	add.w	r0, r0, #1
 800ec0e:	f000 8083 	beq.w	800ed18 <MEMS_updateMagBufferIndex+0x134>
 800ec12:	1b00      	subs	r0, r0, r4
 800ec14:	fb90 f8f2 	sdiv	r8, r0, r2
 800ec18:	fb02 0018 	mls	r0, r2, r8, r0
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	bfb6      	itet	lt
 800ec20:	eb02 0800 	addlt.w	r8, r2, r0
 800ec24:	fa0f f880 	sxthge.w	r8, r0
 800ec28:	fa0f f888 	sxthlt.w	r8, r8
 800ec2c:	b934      	cbnz	r4, 800ec3c <MEMS_updateMagBufferIndex+0x58>
 800ec2e:	23ff      	movs	r3, #255	; 0xff
 800ec30:	70b3      	strb	r3, [r6, #2]
 800ec32:	b003      	add	sp, #12
 800ec34:	ecbd 8b02 	vpop	{d8}
 800ec38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ec40:	2700      	movs	r7, #0
 800ec42:	ee87 8a80 	vdiv.f32	s16, s15, s0
 800ec46:	463b      	mov	r3, r7
 800ec48:	e000      	b.n	800ec4c <MEMS_updateMagBufferIndex+0x68>
 800ec4a:	7872      	ldrb	r2, [r6, #1]
 800ec4c:	4443      	add	r3, r8
 800ec4e:	fb93 f4f2 	sdiv	r4, r3, r2
 800ec52:	fb02 3314 	mls	r3, r2, r4, r3
 800ec56:	b2dc      	uxtb	r4, r3
 800ec58:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800ec5c:	3701      	adds	r7, #1
 800ec5e:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 800ec62:	fb92 f3f5 	sdiv	r3, r2, r5
 800ec66:	fb05 2313 	mls	r3, r5, r3, r2
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	bfb8      	it	lt
 800ec6e:	195b      	addlt	r3, r3, r5
 800ec70:	b21b      	sxth	r3, r3
 800ec72:	ee00 3a10 	vmov	s0, r3
 800ec76:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800ec7a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ec7e:	f00a f9df 	bl	8019040 <roundf>
 800ec82:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800ec86:	fb92 f3f5 	sdiv	r3, r2, r5
 800ec8a:	fb05 2313 	mls	r3, r5, r3, r2
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	bfb8      	it	lt
 800ec92:	195b      	addlt	r3, r3, r5
 800ec94:	b21b      	sxth	r3, r3
 800ec96:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ec9a:	ee00 3a10 	vmov	s0, r3
 800ec9e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800eca2:	edcd 7a01 	vstr	s15, [sp, #4]
 800eca6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ecaa:	f00a f9c9 	bl	8019040 <roundf>
 800ecae:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 800ecb2:	fb92 f3f5 	sdiv	r3, r2, r5
 800ecb6:	fb05 2313 	mls	r3, r5, r3, r2
 800ecba:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ecbe:	18ea      	adds	r2, r5, r3
 800ecc0:	b219      	sxth	r1, r3
 800ecc2:	b212      	sxth	r2, r2
 800ecc4:	f89d 9004 	ldrb.w	r9, [sp, #4]
 800ecc8:	edcd 7a01 	vstr	s15, [sp, #4]
 800eccc:	ee00 1a10 	vmov	s0, r1
 800ecd0:	ee07 2a90 	vmov	s15, r2
 800ecd4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800ecd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ece2:	bfb8      	it	lt
 800ece4:	ee27 0a88 	vmullt.f32	s0, s15, s16
 800ece8:	f00a f9aa 	bl	8019040 <roundf>
 800ecec:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ecf0:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800ecf4:	edcd 7a01 	vstr	s15, [sp, #4]
 800ecf8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ecfc:	4622      	mov	r2, r4
 800ecfe:	4649      	mov	r1, r9
 800ed00:	4630      	mov	r0, r6
 800ed02:	f7ff fce7 	bl	800e6d4 <MEMS_setMagIndexToOne>
 800ed06:	7832      	ldrb	r2, [r6, #0]
 800ed08:	b2fb      	uxtb	r3, r7
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d89d      	bhi.n	800ec4a <MEMS_updateMagBufferIndex+0x66>
 800ed0e:	b003      	add	sp, #12
 800ed10:	ecbd 8b02 	vpop	{d8}
 800ed14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed18:	fb90 f8f4 	sdiv	r8, r0, r4
 800ed1c:	fb04 0018 	mls	r0, r4, r8, r0
 800ed20:	fa0f f880 	sxth.w	r8, r0
 800ed24:	e782      	b.n	800ec2c <MEMS_updateMagBufferIndex+0x48>
 800ed26:	bf00      	nop

0800ed28 <getMagStats.constprop.0>:
 800ed28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ed2e:	2400      	movs	r4, #0
 800ed30:	4607      	mov	r7, r0
 800ed32:	6034      	str	r4, [r6, #0]
 800ed34:	601c      	str	r4, [r3, #0]
 800ed36:	7800      	ldrb	r0, [r0, #0]
 800ed38:	787d      	ldrb	r5, [r7, #1]
 800ed3a:	f997 4002 	ldrsb.w	r4, [r7, #2]
 800ed3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ed42:	42a8      	cmp	r0, r5
 800ed44:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800ed48:	f000 80c0 	beq.w	800eecc <getMagStats.constprop.0+0x1a4>
 800ed4c:	3401      	adds	r4, #1
 800ed4e:	eba4 0c00 	sub.w	ip, r4, r0
 800ed52:	fb9c f4f5 	sdiv	r4, ip, r5
 800ed56:	fb05 c414 	mls	r4, r5, r4, ip
 800ed5a:	2c00      	cmp	r4, #0
 800ed5c:	bfb8      	it	lt
 800ed5e:	1964      	addlt	r4, r4, r5
 800ed60:	b224      	sxth	r4, r4
 800ed62:	ee04 0a90 	vmov	s9, r0
 800ed66:	ed9f 5a60 	vldr	s10, [pc, #384]	; 800eee8 <getMagStats.constprop.0+0x1c0>
 800ed6a:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800ed6e:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ed72:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800ed76:	2800      	cmp	r0, #0
 800ed78:	f000 80b2 	beq.w	800eee0 <getMagStats.constprop.0+0x1b8>
 800ed7c:	3801      	subs	r0, #1
 800ed7e:	fa54 fc80 	uxtab	ip, r4, r0
 800ed82:	f8b1 9000 	ldrh.w	r9, [r1]
 800ed86:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800ed8a:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800ed8e:	ed9f 3a57 	vldr	s6, [pc, #348]	; 800eeec <getMagStats.constprop.0+0x1c4>
 800ed92:	2000      	movs	r0, #0
 800ed94:	e002      	b.n	800ed9c <getMagStats.constprop.0+0x74>
 800ed96:	ed93 3a00 	vldr	s6, [r3]
 800ed9a:	3401      	adds	r4, #1
 800ed9c:	fb94 f1f5 	sdiv	r1, r4, r5
 800eda0:	fb05 4111 	mls	r1, r5, r1, r4
 800eda4:	b2c9      	uxtb	r1, r1
 800eda6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800edaa:	edd2 3a00 	vldr	s7, [r2]
 800edae:	f8b1 a022 	ldrh.w	sl, [r1, #34]	; 0x22
 800edb2:	f8b1 b024 	ldrh.w	fp, [r1, #36]	; 0x24
 800edb6:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 800edb8:	ed92 4a04 	vldr	s8, [r2, #16]
 800edbc:	ed92 6a08 	vldr	s12, [r2, #32]
 800edc0:	ebaa 0a09 	sub.w	sl, sl, r9
 800edc4:	ebab 0b08 	sub.w	fp, fp, r8
 800edc8:	fa0f fa8a 	sxth.w	sl, sl
 800edcc:	ee07 aa10 	vmov	s14, sl
 800edd0:	fa0f fa8b 	sxth.w	sl, fp
 800edd4:	ee06 aa90 	vmov	s13, sl
 800edd8:	eba1 010e 	sub.w	r1, r1, lr
 800eddc:	b209      	sxth	r1, r1
 800edde:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ede2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ede6:	ee07 1a90 	vmov	s15, r1
 800edea:	ee27 7a23 	vmul.f32	s14, s14, s7
 800edee:	ee66 6a84 	vmul.f32	s13, s13, s8
 800edf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edf6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800edfa:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800edfe:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ee02:	ee16 1a90 	vmov	r1, s13
 800ee06:	ee17 aa10 	vmov	sl, s14
 800ee0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee0e:	fb11 f101 	smulbb	r1, r1, r1
 800ee12:	fa0f fa8a 	sxth.w	sl, sl
 800ee16:	fb0a 1a0a 	mla	sl, sl, sl, r1
 800ee1a:	ee17 1a90 	vmov	r1, s15
 800ee1e:	b209      	sxth	r1, r1
 800ee20:	fb01 a101 	mla	r1, r1, r1, sl
 800ee24:	ee07 1a90 	vmov	s15, r1
 800ee28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee2c:	f100 0a01 	add.w	sl, r0, #1
 800ee30:	eef1 6ae7 	vsqrt.f32	s13, s15
 800ee34:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800ee38:	ee17 1a90 	vmov	r1, s15
 800ee3c:	b209      	sxth	r1, r1
 800ee3e:	ee07 1a10 	vmov	s14, r1
 800ee42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ee46:	ee77 7a45 	vsub.f32	s15, s14, s10
 800ee4a:	ee37 7a03 	vadd.f32	s14, s14, s6
 800ee4e:	eef0 7ae7 	vabs.f32	s15, s15
 800ee52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee56:	ed83 7a00 	vstr	s14, [r3]
 800ee5a:	ee17 1a90 	vmov	r1, s15
 800ee5e:	b209      	sxth	r1, r1
 800ee60:	fb01 fb01 	mul.w	fp, r1, r1
 800ee64:	ee07 ba90 	vmov	s15, fp
 800ee68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee6c:	ee07 1a90 	vmov	s15, r1
 800ee70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee74:	eef4 5ae7 	vcmpe.f32	s11, s15
 800ee78:	edd6 7a00 	vldr	s15, [r6]
 800ee7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ee84:	bf48      	it	mi
 800ee86:	fa5f f08a 	uxtbmi.w	r0, sl
 800ee8a:	45a4      	cmp	ip, r4
 800ee8c:	edc6 7a00 	vstr	s15, [r6]
 800ee90:	d181      	bne.n	800ed96 <getMagStats.constprop.0+0x6e>
 800ee92:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800ee96:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800eef0 <getMagStats.constprop.0+0x1c8>
 800ee9a:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 800ee9e:	eef1 7ae6 	vsqrt.f32	s15, s13
 800eea2:	ee60 7a27 	vmul.f32	s15, s0, s15
 800eea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eeaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeae:	bfb8      	it	lt
 800eeb0:	eef0 7a47 	vmovlt.f32	s15, s14
 800eeb4:	edc6 7a00 	vstr	s15, [r6]
 800eeb8:	edd3 7a00 	vldr	s15, [r3]
 800eebc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800eec0:	eec0 7a24 	vdiv.f32	s15, s0, s9
 800eec4:	edc3 7a00 	vstr	s15, [r3]
 800eec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eecc:	1c65      	adds	r5, r4, #1
 800eece:	fb95 f4f0 	sdiv	r4, r5, r0
 800eed2:	fb00 5414 	mls	r4, r0, r4, r5
 800eed6:	ee04 0a90 	vmov	s9, r0
 800eeda:	b224      	sxth	r4, r4
 800eedc:	4605      	mov	r5, r0
 800eede:	e742      	b.n	800ed66 <getMagStats.constprop.0+0x3e>
 800eee0:	edd6 7a00 	vldr	s15, [r6]
 800eee4:	e7d5      	b.n	800ee92 <getMagStats.constprop.0+0x16a>
 800eee6:	bf00      	nop
 800eee8:	423c0000 	.word	0x423c0000
 800eeec:	00000000 	.word	0x00000000
 800eef0:	3f59999a 	.word	0x3f59999a

0800eef4 <MFX_emptyAttitude>:
 800eef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eef8:	ed2d 8b10 	vpush	{d8-d15}
 800eefc:	f6ad 6d34 	subw	sp, sp, #3636	; 0xe34
 800ef00:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 800ef04:	f04f 0a00 	mov.w	sl, #0
 800ef08:	4fef      	ldr	r7, [pc, #956]	; (800f2c8 <MFX_emptyAttitude+0x3d4>)
 800ef0a:	f8c4 a008 	str.w	sl, [r4, #8]
 800ef0e:	e9c4 aa00 	strd	sl, sl, [r4]
 800ef12:	f837 3b04 	ldrh.w	r3, [r7], #4
 800ef16:	f8ad 36a8 	strh.w	r3, [sp, #1704]	; 0x6a8
 800ef1a:	f88d a6aa 	strb.w	sl, [sp, #1706]	; 0x6aa
 800ef1e:	4680      	mov	r8, r0
 800ef20:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 800ef24:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 800ef28:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ef2c:	0c1b      	lsrs	r3, r3, #16
 800ef2e:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 800ef32:	ab27      	add	r3, sp, #156	; 0x9c
 800ef34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ef38:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 800ef3c:	ab2d      	add	r3, sp, #180	; 0xb4
 800ef3e:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800ef42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ef46:	ab30      	add	r3, sp, #192	; 0xc0
 800ef48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ef4c:	ab33      	add	r3, sp, #204	; 0xcc
 800ef4e:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 800ef52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ef56:	f04f 0c00 	mov.w	ip, #0
 800ef5a:	ab36      	add	r3, sp, #216	; 0xd8
 800ef5c:	f04f 0b00 	mov.w	fp, #0
 800ef60:	e9cd bc22 	strd	fp, ip, [sp, #136]	; 0x88
 800ef64:	e9cd bc24 	strd	fp, ip, [sp, #144]	; 0x90
 800ef68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	2224      	movs	r2, #36	; 0x24
 800ef70:	f009 fae4 	bl	801853c <memset>
 800ef74:	4651      	mov	r1, sl
 800ef76:	4620      	mov	r0, r4
 800ef78:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800ef7c:	ed9f bad3 	vldr	s22, [pc, #844]	; 800f2cc <MFX_emptyAttitude+0x3d8>
 800ef80:	eddf ead3 	vldr	s29, [pc, #844]	; 800f2d0 <MFX_emptyAttitude+0x3dc>
 800ef84:	f009 fada 	bl	801853c <memset>
 800ef88:	edd5 4a00 	vldr	s9, [r5]
 800ef8c:	ed95 5a01 	vldr	s10, [r5, #4]
 800ef90:	edd5 5a02 	vldr	s11, [r5, #8]
 800ef94:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 800ef98:	edcd 4a0b 	vstr	s9, [sp, #44]	; 0x2c
 800ef9c:	ed8d 5a3d 	vstr	s10, [sp, #244]	; 0xf4
 800efa0:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 800efa4:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 800efa8:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 800efac:	edcd ea45 	vstr	s29, [sp, #276]	; 0x114
 800efb0:	edcd ea4f 	vstr	s29, [sp, #316]	; 0x13c
 800efb4:	edcd ea59 	vstr	s29, [sp, #356]	; 0x164
 800efb8:	ed8d ba46 	vstr	s22, [sp, #280]	; 0x118
 800efbc:	ed8d ba47 	vstr	s22, [sp, #284]	; 0x11c
 800efc0:	ed8d ba48 	vstr	s22, [sp, #288]	; 0x120
 800efc4:	ed8d ba49 	vstr	s22, [sp, #292]	; 0x124
 800efc8:	ed8d ba4a 	vstr	s22, [sp, #296]	; 0x128
 800efcc:	ed8d ba4b 	vstr	s22, [sp, #300]	; 0x12c
 800efd0:	ed8d ba4c 	vstr	s22, [sp, #304]	; 0x130
 800efd4:	ed8d ba4d 	vstr	s22, [sp, #308]	; 0x134
 800efd8:	ed8d ba4e 	vstr	s22, [sp, #312]	; 0x138
 800efdc:	ed8d ba50 	vstr	s22, [sp, #320]	; 0x140
 800efe0:	ed8d ba51 	vstr	s22, [sp, #324]	; 0x144
 800efe4:	ed8d ba52 	vstr	s22, [sp, #328]	; 0x148
 800efe8:	ed8d ba53 	vstr	s22, [sp, #332]	; 0x14c
 800efec:	ed8d ba54 	vstr	s22, [sp, #336]	; 0x150
 800eff0:	ed8d ba55 	vstr	s22, [sp, #340]	; 0x154
 800eff4:	ed8d ba56 	vstr	s22, [sp, #344]	; 0x158
 800eff8:	ed8d ba57 	vstr	s22, [sp, #348]	; 0x15c
 800effc:	ed8d ba58 	vstr	s22, [sp, #352]	; 0x160
 800f000:	ed8d ba5a 	vstr	s22, [sp, #360]	; 0x168
 800f004:	ed8d ba5b 	vstr	s22, [sp, #364]	; 0x16c
 800f008:	ed8d ba5c 	vstr	s22, [sp, #368]	; 0x170
 800f00c:	ed95 6a03 	vldr	s12, [r5, #12]
 800f010:	edd5 6a04 	vldr	s13, [r5, #16]
 800f014:	ed95 7a05 	vldr	s14, [r5, #20]
 800f018:	ed8d 6a3f 	vstr	s12, [sp, #252]	; 0xfc
 800f01c:	ed8d 6a08 	vstr	s12, [sp, #32]
 800f020:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800f024:	edcd 6a07 	vstr	s13, [sp, #28]
 800f028:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 800f02c:	ed8d 7a06 	vstr	s14, [sp, #24]
 800f030:	ed8d ba5d 	vstr	s22, [sp, #372]	; 0x174
 800f034:	ed8d ba5e 	vstr	s22, [sp, #376]	; 0x178
 800f038:	ed8d ba5f 	vstr	s22, [sp, #380]	; 0x17c
 800f03c:	edcd ea63 	vstr	s29, [sp, #396]	; 0x18c
 800f040:	edcd ea6d 	vstr	s29, [sp, #436]	; 0x1b4
 800f044:	edcd ea77 	vstr	s29, [sp, #476]	; 0x1dc
 800f048:	ed8d ba60 	vstr	s22, [sp, #384]	; 0x180
 800f04c:	ed8d ba61 	vstr	s22, [sp, #388]	; 0x184
 800f050:	ed8d ba62 	vstr	s22, [sp, #392]	; 0x188
 800f054:	ed8d ba64 	vstr	s22, [sp, #400]	; 0x190
 800f058:	ed8d ba65 	vstr	s22, [sp, #404]	; 0x194
 800f05c:	ed8d ba66 	vstr	s22, [sp, #408]	; 0x198
 800f060:	ed8d ba67 	vstr	s22, [sp, #412]	; 0x19c
 800f064:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 800f068:	ed8d ba69 	vstr	s22, [sp, #420]	; 0x1a4
 800f06c:	ed8d ba6a 	vstr	s22, [sp, #424]	; 0x1a8
 800f070:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 800f074:	ed8d ba6c 	vstr	s22, [sp, #432]	; 0x1b0
 800f078:	ed8d ba6e 	vstr	s22, [sp, #440]	; 0x1b8
 800f07c:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 800f080:	ed8d ba70 	vstr	s22, [sp, #448]	; 0x1c0
 800f084:	ed8d ba71 	vstr	s22, [sp, #452]	; 0x1c4
 800f088:	ed8d ba72 	vstr	s22, [sp, #456]	; 0x1c8
 800f08c:	ed8d ba73 	vstr	s22, [sp, #460]	; 0x1cc
 800f090:	edd5 7a06 	vldr	s15, [r5, #24]
 800f094:	edd5 fa07 	vldr	s31, [r5, #28]
 800f098:	ed95 fa08 	vldr	s30, [r5, #32]
 800f09c:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800f0a0:	edcd 7a05 	vstr	s15, [sp, #20]
 800f0a4:	ed8d ba74 	vstr	s22, [sp, #464]	; 0x1d0
 800f0a8:	ed8d ba75 	vstr	s22, [sp, #468]	; 0x1d4
 800f0ac:	ed8d ba76 	vstr	s22, [sp, #472]	; 0x1d8
 800f0b0:	ed8d ba78 	vstr	s22, [sp, #480]	; 0x1e0
 800f0b4:	ed8d ba79 	vstr	s22, [sp, #484]	; 0x1e4
 800f0b8:	ed8d ba7a 	vstr	s22, [sp, #488]	; 0x1e8
 800f0bc:	edcd ea81 	vstr	s29, [sp, #516]	; 0x204
 800f0c0:	edcd ea8b 	vstr	s29, [sp, #556]	; 0x22c
 800f0c4:	edcd fa43 	vstr	s31, [sp, #268]	; 0x10c
 800f0c8:	ed8d fa44 	vstr	s30, [sp, #272]	; 0x110
 800f0cc:	ed8d ba7b 	vstr	s22, [sp, #492]	; 0x1ec
 800f0d0:	ed8d ba7c 	vstr	s22, [sp, #496]	; 0x1f0
 800f0d4:	ed8d ba7d 	vstr	s22, [sp, #500]	; 0x1f4
 800f0d8:	ed8d ba7e 	vstr	s22, [sp, #504]	; 0x1f8
 800f0dc:	ed8d ba7f 	vstr	s22, [sp, #508]	; 0x1fc
 800f0e0:	ed8d ba80 	vstr	s22, [sp, #512]	; 0x200
 800f0e4:	ed8d ba82 	vstr	s22, [sp, #520]	; 0x208
 800f0e8:	ed8d ba83 	vstr	s22, [sp, #524]	; 0x20c
 800f0ec:	ed8d ba84 	vstr	s22, [sp, #528]	; 0x210
 800f0f0:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
 800f0f4:	ed8d ba86 	vstr	s22, [sp, #536]	; 0x218
 800f0f8:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
 800f0fc:	ed8d ba88 	vstr	s22, [sp, #544]	; 0x220
 800f100:	ed8d ba89 	vstr	s22, [sp, #548]	; 0x224
 800f104:	ed8d ba8a 	vstr	s22, [sp, #552]	; 0x228
 800f108:	ed8d ba8c 	vstr	s22, [sp, #560]	; 0x230
 800f10c:	ed8d ba8d 	vstr	s22, [sp, #564]	; 0x234
 800f110:	ed8d ba8e 	vstr	s22, [sp, #568]	; 0x238
 800f114:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f116:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800f11a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f11e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f120:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	f8cc 3000 	str.w	r3, [ip]
 800f12a:	4651      	mov	r1, sl
 800f12c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f130:	4620      	mov	r0, r4
 800f132:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800f136:	ed8d ba8f 	vstr	s22, [sp, #572]	; 0x23c
 800f13a:	ed8d ba90 	vstr	s22, [sp, #576]	; 0x240
 800f13e:	ed8d ba91 	vstr	s22, [sp, #580]	; 0x244
 800f142:	ed8d ba92 	vstr	s22, [sp, #584]	; 0x248
 800f146:	f009 f9f9 	bl	801853c <memset>
 800f14a:	4621      	mov	r1, r4
 800f14c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f150:	a898      	add	r0, sp, #608	; 0x260
 800f152:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f156:	f8ad 7258 	strh.w	r7, [sp, #600]	; 0x258
 800f15a:	f009 f9e1 	bl	8018520 <memcpy>
 800f15e:	4651      	mov	r1, sl
 800f160:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f164:	4620      	mov	r0, r4
 800f166:	f50d 66a7 	add.w	r6, sp, #1336	; 0x538
 800f16a:	ed8d 8a97 	vstr	s16, [sp, #604]	; 0x25c
 800f16e:	f009 f9e5 	bl	801853c <memset>
 800f172:	4621      	mov	r1, r4
 800f174:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f178:	a8f4      	add	r0, sp, #976	; 0x3d0
 800f17a:	f8ad 73c8 	strh.w	r7, [sp, #968]	; 0x3c8
 800f17e:	f009 f9cf 	bl	8018520 <memcpy>
 800f182:	4651      	mov	r1, sl
 800f184:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f188:	4620      	mov	r0, r4
 800f18a:	ed8d 8af3 	vstr	s16, [sp, #972]	; 0x3cc
 800f18e:	f009 f9d5 	bl	801853c <memset>
 800f192:	4621      	mov	r1, r4
 800f194:	8037      	strh	r7, [r6, #0]
 800f196:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f19a:	f50d 60a8 	add.w	r0, sp, #1344	; 0x540
 800f19e:	f009 f9bf 	bl	8018520 <memcpy>
 800f1a2:	4651      	mov	r1, sl
 800f1a4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	ed86 8a01 	vstr	s16, [r6, #4]
 800f1ae:	f009 f9c5 	bl	801853c <memset>
 800f1b2:	4621      	mov	r1, r4
 800f1b4:	802f      	strh	r7, [r5, #0]
 800f1b6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f1ba:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
 800f1be:	f009 f9af 	bl	8018520 <memcpy>
 800f1c2:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 800f1c6:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 800f1ca:	2701      	movs	r7, #1
 800f1cc:	9600      	str	r6, [sp, #0]
 800f1ce:	9403      	str	r4, [sp, #12]
 800f1d0:	eddf 3a40 	vldr	s7, [pc, #256]	; 800f2d4 <MFX_emptyAttitude+0x3e0>
 800f1d4:	ed9f 4a40 	vldr	s8, [pc, #256]	; 800f2d8 <MFX_emptyAttitude+0x3e4>
 800f1d8:	ed85 8a01 	vstr	s16, [r5, #4]
 800f1dc:	483f      	ldr	r0, [pc, #252]	; (800f2dc <MFX_emptyAttitude+0x3e8>)
 800f1de:	4d40      	ldr	r5, [pc, #256]	; (800f2e0 <MFX_emptyAttitude+0x3ec>)
 800f1e0:	f8df e120 	ldr.w	lr, [pc, #288]	; 800f304 <MFX_emptyAttitude+0x410>
 800f1e4:	951c      	str	r5, [sp, #112]	; 0x70
 800f1e6:	abf2      	add	r3, sp, #968	; 0x3c8
 800f1e8:	aa96      	add	r2, sp, #600	; 0x258
 800f1ea:	a90d      	add	r1, sp, #52	; 0x34
 800f1ec:	9017      	str	r0, [sp, #92]	; 0x5c
 800f1ee:	4d3d      	ldr	r5, [pc, #244]	; (800f2e4 <MFX_emptyAttitude+0x3f0>)
 800f1f0:	edcd 3a18 	vstr	s7, [sp, #96]	; 0x60
 800f1f4:	4638      	mov	r0, r7
 800f1f6:	ae27      	add	r6, sp, #156	; 0x9c
 800f1f8:	ed8d 4a19 	vstr	s8, [sp, #100]	; 0x64
 800f1fc:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 800f200:	951b      	str	r5, [sp, #108]	; 0x6c
 800f202:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
 800f206:	ed8d ba1d 	vstr	s22, [sp, #116]	; 0x74
 800f20a:	ed8d ba1e 	vstr	s22, [sp, #120]	; 0x78
 800f20e:	ed8d ba1f 	vstr	s22, [sp, #124]	; 0x7c
 800f212:	ed8d ba20 	vstr	s22, [sp, #128]	; 0x80
 800f216:	ed8d ba21 	vstr	s22, [sp, #132]	; 0x84
 800f21a:	f7fe fed1 	bl	800dfc0 <DataHist_parameters>
 800f21e:	ce07      	ldmia	r6!, {r0, r1, r2}
 800f220:	4b31      	ldr	r3, [pc, #196]	; (800f2e8 <MFX_emptyAttitude+0x3f4>)
 800f222:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 800f226:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800f22a:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 800f22e:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 800f232:	f8c8 300c 	str.w	r3, [r8, #12]
 800f236:	4b2d      	ldr	r3, [pc, #180]	; (800f2ec <MFX_emptyAttitude+0x3f8>)
 800f238:	f8c8 3014 	str.w	r3, [r8, #20]
 800f23c:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
 800f240:	eddf 2a2b 	vldr	s5, [pc, #172]	; 800f2f0 <MFX_emptyAttitude+0x3fc>
 800f244:	ed9f 3a2b 	vldr	s6, [pc, #172]	; 800f2f4 <MFX_emptyAttitude+0x400>
 800f248:	eddf 3a2b 	vldr	s7, [pc, #172]	; 800f2f8 <MFX_emptyAttitude+0x404>
 800f24c:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800f2fc <MFX_emptyAttitude+0x408>
 800f250:	ed9f 4a2b 	vldr	s8, [pc, #172]	; 800f300 <MFX_emptyAttitude+0x40c>
 800f254:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 800f258:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800f308 <MFX_emptyAttitude+0x414>
 800f25c:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800f30c <MFX_emptyAttitude+0x418>
 800f260:	edc8 2a06 	vstr	s5, [r8, #24]
 800f264:	f04f 0b00 	mov.w	fp, #0
 800f268:	f04f 0c00 	mov.w	ip, #0
 800f26c:	e9c8 bc16 	strd	fp, ip, [r8, #88]	; 0x58
 800f270:	e9c8 bc18 	strd	fp, ip, [r8, #96]	; 0x60
 800f274:	e9c8 bc1a 	strd	fp, ip, [r8, #104]	; 0x68
 800f278:	ad2d      	add	r5, sp, #180	; 0xb4
 800f27a:	469b      	mov	fp, r3
 800f27c:	f8df c090 	ldr.w	ip, [pc, #144]	; 800f310 <MFX_emptyAttitude+0x41c>
 800f280:	ed88 3a07 	vstr	s6, [r8, #28]
 800f284:	f240 1301 	movw	r3, #257	; 0x101
 800f288:	edc8 3a08 	vstr	s7, [r8, #32]
 800f28c:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 800f290:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 800f294:	ed88 2a0b 	vstr	s4, [r8, #44]	; 0x2c
 800f298:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
 800f29c:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
 800f2a0:	f8a8 6070 	strh.w	r6, [r8, #112]	; 0x70
 800f2a4:	f888 b072 	strb.w	fp, [r8, #114]	; 0x72
 800f2a8:	f8c8 0080 	str.w	r0, [r8, #128]	; 0x80
 800f2ac:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
 800f2b0:	f8c8 3000 	str.w	r3, [r8]
 800f2b4:	f8a8 3004 	strh.w	r3, [r8, #4]
 800f2b8:	ed88 8a02 	vstr	s16, [r8, #8]
 800f2bc:	ed88 8a04 	vstr	s16, [r8, #16]
 800f2c0:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800f2c4:	e028      	b.n	800f318 <MFX_emptyAttitude+0x424>
 800f2c6:	bf00      	nop
 800f2c8:	0801abfc 	.word	0x0801abfc
 800f2cc:	00000000 	.word	0x00000000
 800f2d0:	447a0000 	.word	0x447a0000
 800f2d4:	3e93ffa3 	.word	0x3e93ffa3
 800f2d8:	3e5cec8f 	.word	0x3e5cec8f
 800f2dc:	3ea25c13 	.word	0x3ea25c13
 800f2e0:	40a00000 	.word	0x40a00000
 800f2e4:	3d57bb3d 	.word	0x3d57bb3d
 800f2e8:	01010100 	.word	0x01010100
 800f2ec:	41200000 	.word	0x41200000
 800f2f0:	3a9d4952 	.word	0x3a9d4952
 800f2f4:	3ac49ba6 	.word	0x3ac49ba6
 800f2f8:	3b03126f 	.word	0x3b03126f
 800f2fc:	402ab021 	.word	0x402ab021
 800f300:	3a83126f 	.word	0x3a83126f
 800f304:	3e006d36 	.word	0x3e006d36
 800f308:	3f639581 	.word	0x3f639581
 800f30c:	3f13f7cf 	.word	0x3f13f7cf
 800f310:	3f2ac083 	.word	0x3f2ac083
 800f314:	3f4ccccd 	.word	0x3f4ccccd
 800f318:	cd07      	ldmia	r5!, {r0, r1, r2}
 800f31a:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 800f31e:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 800f322:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 800f326:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 800f32a:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800f32e:	ab33      	add	r3, sp, #204	; 0xcc
 800f330:	f8c8 0098 	str.w	r0, [r8, #152]	; 0x98
 800f334:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 800f338:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 800f33c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f33e:	ab36      	add	r3, sp, #216	; 0xd8
 800f340:	f8c8 00a4 	str.w	r0, [r8, #164]	; 0xa4
 800f344:	f8c8 10a8 	str.w	r1, [r8, #168]	; 0xa8
 800f348:	f8c8 20ac 	str.w	r2, [r8, #172]	; 0xac
 800f34c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f34e:	ed1f 4a0f 	vldr	s8, [pc, #-60]	; 800f314 <MFX_emptyAttitude+0x420>
 800f352:	4bd6      	ldr	r3, [pc, #856]	; (800f6ac <MFX_emptyAttitude+0x7b8>)
 800f354:	f8c8 00b0 	str.w	r0, [r8, #176]	; 0xb0
 800f358:	f04f 5b7c 	mov.w	fp, #1056964608	; 0x3f000000
 800f35c:	f8c8 10b4 	str.w	r1, [r8, #180]	; 0xb4
 800f360:	f8c8 20b8 	str.w	r2, [r8, #184]	; 0xb8
 800f364:	ed88 4a65 	vstr	s8, [r8, #404]	; 0x194
 800f368:	f8c8 b198 	str.w	fp, [r8, #408]	; 0x198
 800f36c:	f8c8 319c 	str.w	r3, [r8, #412]	; 0x19c
 800f370:	ed88 ba64 	vstr	s22, [r8, #400]	; 0x190
 800f374:	ed88 ba30 	vstr	s22, [r8, #192]	; 0xc0
 800f378:	ed88 ba4a 	vstr	s22, [r8, #296]	; 0x128
 800f37c:	ed88 ba31 	vstr	s22, [r8, #196]	; 0xc4
 800f380:	ed88 ba4b 	vstr	s22, [r8, #300]	; 0x12c
 800f384:	ed88 ba32 	vstr	s22, [r8, #200]	; 0xc8
 800f388:	ed88 ba4c 	vstr	s22, [r8, #304]	; 0x130
 800f38c:	ed88 ba33 	vstr	s22, [r8, #204]	; 0xcc
 800f390:	ed88 ba4d 	vstr	s22, [r8, #308]	; 0x134
 800f394:	ed88 ba34 	vstr	s22, [r8, #208]	; 0xd0
 800f398:	ed88 ba4e 	vstr	s22, [r8, #312]	; 0x138
 800f39c:	ed88 ba35 	vstr	s22, [r8, #212]	; 0xd4
 800f3a0:	ed88 ba4f 	vstr	s22, [r8, #316]	; 0x13c
 800f3a4:	ed88 ba36 	vstr	s22, [r8, #216]	; 0xd8
 800f3a8:	ed88 ba50 	vstr	s22, [r8, #320]	; 0x140
 800f3ac:	ed88 ba37 	vstr	s22, [r8, #220]	; 0xdc
 800f3b0:	ed88 ba51 	vstr	s22, [r8, #324]	; 0x144
 800f3b4:	ed88 ba38 	vstr	s22, [r8, #224]	; 0xe0
 800f3b8:	ed88 ba52 	vstr	s22, [r8, #328]	; 0x148
 800f3bc:	ed88 ba39 	vstr	s22, [r8, #228]	; 0xe4
 800f3c0:	ed88 ba53 	vstr	s22, [r8, #332]	; 0x14c
 800f3c4:	ed88 ba3a 	vstr	s22, [r8, #232]	; 0xe8
 800f3c8:	ed88 ba54 	vstr	s22, [r8, #336]	; 0x150
 800f3cc:	ed88 ba3b 	vstr	s22, [r8, #236]	; 0xec
 800f3d0:	ed88 ba55 	vstr	s22, [r8, #340]	; 0x154
 800f3d4:	ed88 ba3c 	vstr	s22, [r8, #240]	; 0xf0
 800f3d8:	ed88 ba56 	vstr	s22, [r8, #344]	; 0x158
 800f3dc:	ed88 ba3d 	vstr	s22, [r8, #244]	; 0xf4
 800f3e0:	ed88 ba57 	vstr	s22, [r8, #348]	; 0x15c
 800f3e4:	ed88 ba3e 	vstr	s22, [r8, #248]	; 0xf8
 800f3e8:	ed88 ba58 	vstr	s22, [r8, #352]	; 0x160
 800f3ec:	ed88 ba3f 	vstr	s22, [r8, #252]	; 0xfc
 800f3f0:	ed88 ba59 	vstr	s22, [r8, #356]	; 0x164
 800f3f4:	ed88 ba40 	vstr	s22, [r8, #256]	; 0x100
 800f3f8:	ed88 ba5a 	vstr	s22, [r8, #360]	; 0x168
 800f3fc:	ed88 ba41 	vstr	s22, [r8, #260]	; 0x104
 800f400:	ed88 ba5b 	vstr	s22, [r8, #364]	; 0x16c
 800f404:	ed88 ba42 	vstr	s22, [r8, #264]	; 0x108
 800f408:	ed88 ba5c 	vstr	s22, [r8, #368]	; 0x170
 800f40c:	eddd 4a0b 	vldr	s9, [sp, #44]	; 0x2c
 800f410:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 800f414:	edc8 4a6c 	vstr	s9, [r8, #432]	; 0x1b0
 800f418:	ed88 5a6d 	vstr	s10, [r8, #436]	; 0x1b4
 800f41c:	ed88 ba43 	vstr	s22, [r8, #268]	; 0x10c
 800f420:	ed88 ba5d 	vstr	s22, [r8, #372]	; 0x174
 800f424:	ed88 ba44 	vstr	s22, [r8, #272]	; 0x110
 800f428:	ed88 ba5e 	vstr	s22, [r8, #376]	; 0x178
 800f42c:	ed88 ba45 	vstr	s22, [r8, #276]	; 0x114
 800f430:	ed88 ba5f 	vstr	s22, [r8, #380]	; 0x17c
 800f434:	ed88 ba46 	vstr	s22, [r8, #280]	; 0x118
 800f438:	ed88 ba60 	vstr	s22, [r8, #384]	; 0x180
 800f43c:	ed88 ba47 	vstr	s22, [r8, #284]	; 0x11c
 800f440:	ed88 ba61 	vstr	s22, [r8, #388]	; 0x184
 800f444:	ed88 ba48 	vstr	s22, [r8, #288]	; 0x120
 800f448:	ed88 ba62 	vstr	s22, [r8, #392]	; 0x188
 800f44c:	ed88 ba49 	vstr	s22, [r8, #292]	; 0x124
 800f450:	ed88 ba63 	vstr	s22, [r8, #396]	; 0x18c
 800f454:	f888 a1a4 	strb.w	sl, [r8, #420]	; 0x1a4
 800f458:	f8c8 a1a6 	str.w	sl, [r8, #422]	; 0x1a6
 800f45c:	edc8 ea75 	vstr	s29, [r8, #468]	; 0x1d4
 800f460:	ed88 ba76 	vstr	s22, [r8, #472]	; 0x1d8
 800f464:	ed88 ba77 	vstr	s22, [r8, #476]	; 0x1dc
 800f468:	ed88 ba78 	vstr	s22, [r8, #480]	; 0x1e0
 800f46c:	ed88 ba79 	vstr	s22, [r8, #484]	; 0x1e4
 800f470:	ed88 ba7a 	vstr	s22, [r8, #488]	; 0x1e8
 800f474:	ed88 ba7b 	vstr	s22, [r8, #492]	; 0x1ec
 800f478:	ed88 ba7c 	vstr	s22, [r8, #496]	; 0x1f0
 800f47c:	ed88 ba7d 	vstr	s22, [r8, #500]	; 0x1f4
 800f480:	ed88 ba7e 	vstr	s22, [r8, #504]	; 0x1f8
 800f484:	edc8 ea7f 	vstr	s29, [r8, #508]	; 0x1fc
 800f488:	ed88 ba80 	vstr	s22, [r8, #512]	; 0x200
 800f48c:	ed88 ba81 	vstr	s22, [r8, #516]	; 0x204
 800f490:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 800f494:	ed9d 6a08 	vldr	s12, [sp, #32]
 800f498:	eddd 6a07 	vldr	s13, [sp, #28]
 800f49c:	edc8 5a6e 	vstr	s11, [r8, #440]	; 0x1b8
 800f4a0:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800f4a4:	f8c8 c1a0 	str.w	ip, [r8, #416]	; 0x1a0
 800f4a8:	ed88 6a6f 	vstr	s12, [r8, #444]	; 0x1bc
 800f4ac:	edc8 6a70 	vstr	s13, [r8, #448]	; 0x1c0
 800f4b0:	ed88 ba82 	vstr	s22, [r8, #520]	; 0x208
 800f4b4:	ed88 ba83 	vstr	s22, [r8, #524]	; 0x20c
 800f4b8:	ed88 ba84 	vstr	s22, [r8, #528]	; 0x210
 800f4bc:	ed88 ba85 	vstr	s22, [r8, #532]	; 0x214
 800f4c0:	ed88 ba86 	vstr	s22, [r8, #536]	; 0x218
 800f4c4:	ed88 ba87 	vstr	s22, [r8, #540]	; 0x21c
 800f4c8:	ed88 ba88 	vstr	s22, [r8, #544]	; 0x220
 800f4cc:	edc8 ea89 	vstr	s29, [r8, #548]	; 0x224
 800f4d0:	ed88 ba8a 	vstr	s22, [r8, #552]	; 0x228
 800f4d4:	ed88 ba8b 	vstr	s22, [r8, #556]	; 0x22c
 800f4d8:	ed88 ba8c 	vstr	s22, [r8, #560]	; 0x230
 800f4dc:	ed88 ba8d 	vstr	s22, [r8, #564]	; 0x234
 800f4e0:	ed88 ba8e 	vstr	s22, [r8, #568]	; 0x238
 800f4e4:	ed88 ba8f 	vstr	s22, [r8, #572]	; 0x23c
 800f4e8:	ed88 ba90 	vstr	s22, [r8, #576]	; 0x240
 800f4ec:	ed88 ba91 	vstr	s22, [r8, #580]	; 0x244
 800f4f0:	ed88 ba92 	vstr	s22, [r8, #584]	; 0x248
 800f4f4:	edc8 ea93 	vstr	s29, [r8, #588]	; 0x24c
 800f4f8:	ed88 ba94 	vstr	s22, [r8, #592]	; 0x250
 800f4fc:	ed88 ba95 	vstr	s22, [r8, #596]	; 0x254
 800f500:	ed88 ba96 	vstr	s22, [r8, #600]	; 0x258
 800f504:	ed88 ba97 	vstr	s22, [r8, #604]	; 0x25c
 800f508:	ed88 ba98 	vstr	s22, [r8, #608]	; 0x260
 800f50c:	ed88 ba99 	vstr	s22, [r8, #612]	; 0x264
 800f510:	ed88 ba9a 	vstr	s22, [r8, #616]	; 0x268
 800f514:	ed88 ba9b 	vstr	s22, [r8, #620]	; 0x26c
 800f518:	ed9d 7a06 	vldr	s14, [sp, #24]
 800f51c:	eddd 7a05 	vldr	s15, [sp, #20]
 800f520:	ed88 7a71 	vstr	s14, [r8, #452]	; 0x1c4
 800f524:	f508 7e46 	add.w	lr, r8, #792	; 0x318
 800f528:	f50d 6649 	add.w	r6, sp, #3216	; 0xc90
 800f52c:	f50d 6532 	add.w	r5, sp, #2848	; 0xb20
 800f530:	edc8 7a72 	vstr	s15, [r8, #456]	; 0x1c8
 800f534:	ed88 ba9c 	vstr	s22, [r8, #624]	; 0x270
 800f538:	edc8 ea9d 	vstr	s29, [r8, #628]	; 0x274
 800f53c:	ed88 ba9e 	vstr	s22, [r8, #632]	; 0x278
 800f540:	ed88 ba9f 	vstr	s22, [r8, #636]	; 0x27c
 800f544:	ed88 baa0 	vstr	s22, [r8, #640]	; 0x280
 800f548:	ed88 baa1 	vstr	s22, [r8, #644]	; 0x284
 800f54c:	ed88 baa2 	vstr	s22, [r8, #648]	; 0x288
 800f550:	ed88 baa3 	vstr	s22, [r8, #652]	; 0x28c
 800f554:	ed88 baa4 	vstr	s22, [r8, #656]	; 0x290
 800f558:	ed88 baa5 	vstr	s22, [r8, #660]	; 0x294
 800f55c:	ed88 baa6 	vstr	s22, [r8, #664]	; 0x298
 800f560:	edc8 eaa7 	vstr	s29, [r8, #668]	; 0x29c
 800f564:	ed88 baa8 	vstr	s22, [r8, #672]	; 0x2a0
 800f568:	ed88 baa9 	vstr	s22, [r8, #676]	; 0x2a4
 800f56c:	ed88 baaa 	vstr	s22, [r8, #680]	; 0x2a8
 800f570:	ed88 baab 	vstr	s22, [r8, #684]	; 0x2ac
 800f574:	ed88 baac 	vstr	s22, [r8, #688]	; 0x2b0
 800f578:	ed88 baad 	vstr	s22, [r8, #692]	; 0x2b4
 800f57c:	ed88 baae 	vstr	s22, [r8, #696]	; 0x2b8
 800f580:	ed88 baaf 	vstr	s22, [r8, #700]	; 0x2bc
 800f584:	ed88 bab0 	vstr	s22, [r8, #704]	; 0x2c0
 800f588:	edc8 eab1 	vstr	s29, [r8, #708]	; 0x2c4
 800f58c:	ed88 bab2 	vstr	s22, [r8, #712]	; 0x2c8
 800f590:	ed88 bab3 	vstr	s22, [r8, #716]	; 0x2cc
 800f594:	edc8 fa73 	vstr	s31, [r8, #460]	; 0x1cc
 800f598:	ed88 bab4 	vstr	s22, [r8, #720]	; 0x2d0
 800f59c:	ed88 bab5 	vstr	s22, [r8, #724]	; 0x2d4
 800f5a0:	ed88 bab6 	vstr	s22, [r8, #728]	; 0x2d8
 800f5a4:	ed88 bab7 	vstr	s22, [r8, #732]	; 0x2dc
 800f5a8:	7820      	ldrb	r0, [r4, #0]
 800f5aa:	f888 71ac 	strb.w	r7, [r8, #428]	; 0x1ac
 800f5ae:	f50d 6460 	add.w	r4, sp, #3584	; 0xe00
 800f5b2:	ed88 bab8 	vstr	s22, [r8, #736]	; 0x2e0
 800f5b6:	ed88 bab9 	vstr	s22, [r8, #740]	; 0x2e4
 800f5ba:	ed88 baba 	vstr	s22, [r8, #744]	; 0x2e8
 800f5be:	edc8 eabb 	vstr	s29, [r8, #748]	; 0x2ec
 800f5c2:	ed88 babc 	vstr	s22, [r8, #752]	; 0x2f0
 800f5c6:	ed88 fa74 	vstr	s30, [r8, #464]	; 0x1d0
 800f5ca:	ed88 babd 	vstr	s22, [r8, #756]	; 0x2f4
 800f5ce:	ed88 babe 	vstr	s22, [r8, #760]	; 0x2f8
 800f5d2:	ed88 babf 	vstr	s22, [r8, #764]	; 0x2fc
 800f5d6:	ed88 bac0 	vstr	s22, [r8, #768]	; 0x300
 800f5da:	ed88 bac1 	vstr	s22, [r8, #772]	; 0x304
 800f5de:	ed88 bac2 	vstr	s22, [r8, #776]	; 0x308
 800f5e2:	edc8 eac5 	vstr	s29, [r8, #788]	; 0x314
 800f5e6:	ed88 bac3 	vstr	s22, [r8, #780]	; 0x30c
 800f5ea:	ed88 bac4 	vstr	s22, [r8, #784]	; 0x310
 800f5ee:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 800f5f2:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800f5f6:	f50d 6204 	add.w	r2, sp, #2112	; 0x840
 800f5fa:	f60d 011c 	addw	r1, sp, #2076	; 0x81c
 800f5fe:	f8cd e00c 	str.w	lr, [sp, #12]
 800f602:	9500      	str	r5, [sp, #0]
 800f604:	f7fe fcdc 	bl	800dfc0 <DataHist_parameters>
 800f608:	f608 123c 	addw	r2, r8, #2364	; 0x93c
 800f60c:	f608 1334 	addw	r3, r8, #2356	; 0x934
 800f610:	9205      	str	r2, [sp, #20]
 800f612:	f508 6b13 	add.w	fp, r8, #2352	; 0x930
 800f616:	ed8b ba00 	vstr	s22, [fp]
 800f61a:	f608 1154 	addw	r1, r8, #2388	; 0x954
 800f61e:	ed83 ba00 	vstr	s22, [r3]
 800f622:	9b05      	ldr	r3, [sp, #20]
 800f624:	9106      	str	r1, [sp, #24]
 800f626:	f608 1938 	addw	r9, r8, #2360	; 0x938
 800f62a:	ed89 ba00 	vstr	s22, [r9]
 800f62e:	f508 6217 	add.w	r2, r8, #2416	; 0x970
 800f632:	ed83 8a00 	vstr	s16, [r3]
 800f636:	9b06      	ldr	r3, [sp, #24]
 800f638:	9207      	str	r2, [sp, #28]
 800f63a:	f508 6e14 	add.w	lr, r8, #2368	; 0x940
 800f63e:	f608 1c5c 	addw	ip, r8, #2396	; 0x95c
 800f642:	f608 1744 	addw	r7, r8, #2372	; 0x944
 800f646:	f508 6616 	add.w	r6, r8, #2400	; 0x960
 800f64a:	f608 1548 	addw	r5, r8, #2376	; 0x948
 800f64e:	f608 1464 	addw	r4, r8, #2404	; 0x964
 800f652:	ed8e ba00 	vstr	s22, [lr]
 800f656:	ed8c ba00 	vstr	s22, [ip]
 800f65a:	ed87 ba00 	vstr	s22, [r7]
 800f65e:	ed86 ba00 	vstr	s22, [r6]
 800f662:	ed85 ba00 	vstr	s22, [r5]
 800f666:	ed84 ba00 	vstr	s22, [r4]
 800f66a:	f8c8 a94c 	str.w	sl, [r8, #2380]	; 0x94c
 800f66e:	f8a8 a950 	strh.w	sl, [r8, #2384]	; 0x950
 800f672:	ed83 ba00 	vstr	s22, [r3]
 800f676:	9b07      	ldr	r3, [sp, #28]
 800f678:	f608 1058 	addw	r0, r8, #2392	; 0x958
 800f67c:	f608 1168 	addw	r1, r8, #2408	; 0x968
 800f680:	ed80 8a00 	vstr	s16, [r0]
 800f684:	f608 126c 	addw	r2, r8, #2412	; 0x96c
 800f688:	ed81 ba00 	vstr	s22, [r1]
 800f68c:	ed83 ba00 	vstr	s22, [r3]
 800f690:	230a      	movs	r3, #10
 800f692:	ed82 ba00 	vstr	s22, [r2]
 800f696:	f888 a978 	strb.w	sl, [r8, #2424]	; 0x978
 800f69a:	f8c8 3974 	str.w	r3, [r8, #2420]	; 0x974
 800f69e:	f60d 6d34 	addw	sp, sp, #3636	; 0xe34
 800f6a2:	ecbd 8b10 	vpop	{d8-d15}
 800f6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6aa:	bf00      	nop
 800f6ac:	3f333333 	.word	0x3f333333

0800f6b0 <output_update>:
 800f6b0:	ed90 7a00 	vldr	s14, [r0]
 800f6b4:	edd0 7a01 	vldr	s15, [r0, #4]
 800f6b8:	ed90 5a03 	vldr	s10, [r0, #12]
 800f6bc:	edd0 5a02 	vldr	s11, [r0, #8]
 800f6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f6c8:	ee27 6a07 	vmul.f32	s12, s14, s14
 800f6cc:	ee67 6a05 	vmul.f32	s13, s14, s10
 800f6d0:	ee36 6a24 	vadd.f32	s12, s12, s9
 800f6d4:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800f6d8:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f6dc:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f6e0:	ee36 6a06 	vadd.f32	s12, s12, s12
 800f6e4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f6e8:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800f6ec:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f6f0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f6f4:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800f6f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f6fc:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800f700:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f704:	460f      	mov	r7, r1
 800f706:	4615      	mov	r5, r2
 800f708:	461e      	mov	r6, r3
 800f70a:	f1bc 0f00 	cmp.w	ip, #0
 800f70e:	d146      	bne.n	800f79e <output_update+0xee>
 800f710:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f714:	eef1 6a66 	vneg.f32	s13, s13
 800f718:	edc3 7a01 	vstr	s15, [r3, #4]
 800f71c:	edc3 6a00 	vstr	s13, [r3]
 800f720:	ed83 5a02 	vstr	s10, [r3, #8]
 800f724:	4662      	mov	r2, ip
 800f726:	4629      	mov	r1, r5
 800f728:	4604      	mov	r4, r0
 800f72a:	f7ff f955 	bl	800e9d8 <q2hpr>
 800f72e:	edd5 6a01 	vldr	s13, [r5, #4]
 800f732:	ed95 7a00 	vldr	s14, [r5]
 800f736:	edd5 7a02 	vldr	s15, [r5, #8]
 800f73a:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800f84c <output_update+0x19c>
 800f73e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f742:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800f746:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800f74a:	ed85 7a00 	vstr	s14, [r5]
 800f74e:	edc5 6a01 	vstr	s13, [r5, #4]
 800f752:	edc5 7a02 	vstr	s15, [r5, #8]
 800f756:	ed97 7a01 	vldr	s14, [r7, #4]
 800f75a:	edd6 7a00 	vldr	s15, [r6]
 800f75e:	6822      	ldr	r2, [r4, #0]
 800f760:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f764:	edc8 7a00 	vstr	s15, [r8]
 800f768:	ed97 7a00 	vldr	s14, [r7]
 800f76c:	edd6 7a01 	vldr	s15, [r6, #4]
 800f770:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f774:	edc8 7a01 	vstr	s15, [r8, #4]
 800f778:	edd6 7a02 	vldr	s15, [r6, #8]
 800f77c:	ed97 7a02 	vldr	s14, [r7, #8]
 800f780:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f784:	edc8 7a02 	vstr	s15, [r8, #8]
 800f788:	edd4 7a02 	vldr	s15, [r4, #8]
 800f78c:	6863      	ldr	r3, [r4, #4]
 800f78e:	6023      	str	r3, [r4, #0]
 800f790:	eef1 7a67 	vneg.f32	s15, s15
 800f794:	6062      	str	r2, [r4, #4]
 800f796:	edc4 7a02 	vstr	s15, [r4, #8]
 800f79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f79e:	f1bc 0f01 	cmp.w	ip, #1
 800f7a2:	d015      	beq.n	800f7d0 <output_update+0x120>
 800f7a4:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800f84c <output_update+0x19c>
 800f7a8:	edd2 6a00 	vldr	s13, [r2]
 800f7ac:	ed92 7a01 	vldr	s14, [r2, #4]
 800f7b0:	edd2 7a02 	vldr	s15, [r2, #8]
 800f7b4:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f7b8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f7bc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f7c0:	edc2 6a00 	vstr	s13, [r2]
 800f7c4:	ed82 7a01 	vstr	s14, [r2, #4]
 800f7c8:	edc2 7a02 	vstr	s15, [r2, #8]
 800f7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f7d4:	ee36 6a65 	vsub.f32	s12, s12, s11
 800f7d8:	eef1 6a66 	vneg.f32	s13, s13
 800f7dc:	edc3 7a00 	vstr	s15, [r3]
 800f7e0:	ed83 6a02 	vstr	s12, [r3, #8]
 800f7e4:	edc3 6a01 	vstr	s13, [r3, #4]
 800f7e8:	4662      	mov	r2, ip
 800f7ea:	4629      	mov	r1, r5
 800f7ec:	f7ff f8f4 	bl	800e9d8 <q2hpr>
 800f7f0:	edd5 6a00 	vldr	s13, [r5]
 800f7f4:	ed95 7a01 	vldr	s14, [r5, #4]
 800f7f8:	edd5 7a02 	vldr	s15, [r5, #8]
 800f7fc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800f84c <output_update+0x19c>
 800f800:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f804:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f808:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f80c:	ed85 7a01 	vstr	s14, [r5, #4]
 800f810:	edc5 6a00 	vstr	s13, [r5]
 800f814:	edc5 7a02 	vstr	s15, [r5, #8]
 800f818:	ed97 7a00 	vldr	s14, [r7]
 800f81c:	edd6 7a00 	vldr	s15, [r6]
 800f820:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f824:	edc8 7a00 	vstr	s15, [r8]
 800f828:	ed97 7a01 	vldr	s14, [r7, #4]
 800f82c:	edd6 7a01 	vldr	s15, [r6, #4]
 800f830:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f834:	edc8 7a01 	vstr	s15, [r8, #4]
 800f838:	edd6 7a02 	vldr	s15, [r6, #8]
 800f83c:	ed97 7a02 	vldr	s14, [r7, #8]
 800f840:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f844:	edc8 7a02 	vstr	s15, [r8, #8]
 800f848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f84c:	42652ee1 	.word	0x42652ee1

0800f850 <kalman_3gyro.constprop.0>:
 800f850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f854:	ed2d 8b10 	vpush	{d8-d15}
 800f858:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800f85c:	edd2 9a02 	vldr	s19, [r2, #8]
 800f860:	edd2 8a03 	vldr	s17, [r2, #12]
 800f864:	edd2 6a04 	vldr	s13, [r2, #16]
 800f868:	ed92 6a05 	vldr	s12, [r2, #20]
 800f86c:	6854      	ldr	r4, [r2, #4]
 800f86e:	f2ad 7dcc 	subw	sp, sp, #1996	; 0x7cc
 800f872:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800f876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f87a:	4683      	mov	fp, r0
 800f87c:	edd2 7a00 	vldr	s15, [r2]
 800f880:	48e3      	ldr	r0, [pc, #908]	; (800fc10 <kalman_3gyro.constprop.0+0x3c0>)
 800f882:	9108      	str	r1, [sp, #32]
 800f884:	904a      	str	r0, [sp, #296]	; 0x128
 800f886:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800f88a:	460d      	mov	r5, r1
 800f88c:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
 800f890:	2100      	movs	r1, #0
 800f892:	9328      	str	r3, [sp, #160]	; 0xa0
 800f894:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800f898:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
 800f89c:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 800f8a0:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 800f8a4:	ed8d 7a7a 	vstr	s14, [sp, #488]	; 0x1e8
 800f8a8:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800f8ac:	edcd 7a43 	vstr	s15, [sp, #268]	; 0x10c
 800f8b0:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800f8b4:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 800f8b8:	ed8d 6a79 	vstr	s12, [sp, #484]	; 0x1e4
 800f8bc:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 800f8c0:	946f      	str	r4, [sp, #444]	; 0x1bc
 800f8c2:	9470      	str	r4, [sp, #448]	; 0x1c0
 800f8c4:	9471      	str	r4, [sp, #452]	; 0x1c4
 800f8c6:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 800f8ca:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800f8ce:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800f8d2:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800f8d6:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800f8da:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800f8de:	eeb0 8a60 	vmov.f32	s16, s1
 800f8e2:	ed8d 0a46 	vstr	s0, [sp, #280]	; 0x118
 800f8e6:	ed8d 0a47 	vstr	s0, [sp, #284]	; 0x11c
 800f8ea:	ed8d 1a07 	vstr	s2, [sp, #28]
 800f8ee:	f008 fe25 	bl	801853c <memset>
 800f8f2:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 800f8f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f8fa:	600b      	str	r3, [r1, #0]
 800f8fc:	f20d 61f4 	addw	r1, sp, #1780	; 0x6f4
 800f900:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800f904:	600b      	str	r3, [r1, #0]
 800f906:	f50d 61e5 	add.w	r1, sp, #1832	; 0x728
 800f90a:	600b      	str	r3, [r1, #0]
 800f90c:	f20d 715c 	addw	r1, sp, #1884	; 0x75c
 800f910:	600b      	str	r3, [r1, #0]
 800f912:	f50d 61f2 	add.w	r1, sp, #1936	; 0x790
 800f916:	600b      	str	r3, [r1, #0]
 800f918:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
 800f91c:	600b      	str	r3, [r1, #0]
 800f91e:	2a00      	cmp	r2, #0
 800f920:	f001 82c2 	beq.w	8010ea8 <kalman_3gyro.constprop.0+0x1658>
 800f924:	ed95 5a02 	vldr	s10, [r5, #8]
 800f928:	edd5 5a01 	vldr	s11, [r5, #4]
 800f92c:	ed95 3a00 	vldr	s6, [r5]
 800f930:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800f934:	ee65 4aa7 	vmul.f32	s9, s11, s15
 800f938:	ee35 4a05 	vadd.f32	s8, s10, s10
 800f93c:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800f940:	ee25 5a27 	vmul.f32	s10, s10, s15
 800f944:	ee63 7a27 	vmul.f32	s15, s6, s15
 800f948:	ee33 3a03 	vadd.f32	s6, s6, s6
 800f94c:	9b08      	ldr	r3, [sp, #32]
 800f94e:	f20d 621c 	addw	r2, sp, #1564	; 0x61c
 800f952:	ed82 4a00 	vstr	s8, [r2]
 800f956:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 800f95a:	edc2 4a00 	vstr	s9, [r2]
 800f95e:	ed93 6a05 	vldr	s12, [r3, #20]
 800f962:	edd3 6a04 	vldr	s13, [r3, #16]
 800f966:	ed93 7a03 	vldr	s14, [r3, #12]
 800f96a:	edcd 6a51 	vstr	s13, [sp, #324]	; 0x144
 800f96e:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 800f972:	ed82 5a00 	vstr	s10, [r2]
 800f976:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 800f97a:	ed82 3a00 	vstr	s6, [r2]
 800f97e:	eef1 3a46 	vneg.f32	s7, s12
 800f982:	f50d 62cf 	add.w	r2, sp, #1656	; 0x678
 800f986:	edc2 5a00 	vstr	s11, [r2]
 800f98a:	eeb1 4a66 	vneg.f32	s8, s13
 800f98e:	ee33 5aa3 	vadd.f32	s10, s7, s7
 800f992:	f20d 627c 	addw	r2, sp, #1660	; 0x67c
 800f996:	edc2 7a00 	vstr	s15, [r2]
 800f99a:	ee34 3a04 	vadd.f32	s6, s8, s8
 800f99e:	f20d 6254 	addw	r2, sp, #1620	; 0x654
 800f9a2:	eef1 4a47 	vneg.f32	s9, s14
 800f9a6:	ed82 5a00 	vstr	s10, [r2]
 800f9aa:	f20d 612c 	addw	r1, sp, #1580	; 0x62c
 800f9ae:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800f9b2:	ed81 3a00 	vstr	s6, [r1]
 800f9b6:	ee74 5aa4 	vadd.f32	s11, s9, s9
 800f9ba:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 800f9be:	ed81 5a00 	vstr	s10, [r1]
 800f9c2:	ee77 7a07 	vadd.f32	s15, s14, s14
 800f9c6:	f50d 61d1 	add.w	r1, sp, #1672	; 0x688
 800f9ca:	edc1 5a00 	vstr	s11, [r1]
 800f9ce:	f20d 615c 	addw	r1, sp, #1628	; 0x65c
 800f9d2:	edc1 7a00 	vstr	s15, [r1]
 800f9d6:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
 800f9da:	2300      	movs	r3, #0
 800f9dc:	600b      	str	r3, [r1, #0]
 800f9de:	f20d 614c 	addw	r1, sp, #1612	; 0x64c
 800f9e2:	ee76 2a06 	vadd.f32	s5, s12, s12
 800f9e6:	600b      	str	r3, [r1, #0]
 800f9e8:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 800f9ec:	f50d 62c5 	add.w	r2, sp, #1576	; 0x628
 800f9f0:	600b      	str	r3, [r1, #0]
 800f9f2:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 800f9f6:	edc2 2a00 	vstr	s5, [r2]
 800f9fa:	600b      	str	r3, [r1, #0]
 800f9fc:	f50d 61cb 	add.w	r1, sp, #1624	; 0x658
 800fa00:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800fa04:	600b      	str	r3, [r1, #0]
 800fa06:	f20d 618c 	addw	r1, sp, #1676	; 0x68c
 800fa0a:	a87b      	add	r0, sp, #492	; 0x1ec
 800fa0c:	600b      	str	r3, [r1, #0]
 800fa0e:	2230      	movs	r2, #48	; 0x30
 800fa10:	2100      	movs	r1, #0
 800fa12:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800fa16:	934b      	str	r3, [sp, #300]	; 0x12c
 800fa18:	934f      	str	r3, [sp, #316]	; 0x13c
 800fa1a:	9353      	str	r3, [sp, #332]	; 0x14c
 800fa1c:	edcd 3a4e 	vstr	s7, [sp, #312]	; 0x138
 800fa20:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 800fa24:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800fa28:	edcd 4a52 	vstr	s9, [sp, #328]	; 0x148
 800fa2c:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 800fa30:	942c      	str	r4, [sp, #176]	; 0xb0
 800fa32:	f008 fd83 	bl	801853c <memset>
 800fa36:	eddb 6a06 	vldr	s13, [fp, #24]
 800fa3a:	ed9b 7a07 	vldr	s14, [fp, #28]
 800fa3e:	eddb 7a08 	vldr	s15, [fp, #32]
 800fa42:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 800fa46:	ee68 6a26 	vmul.f32	s13, s16, s13
 800fa4a:	ee28 7a07 	vmul.f32	s14, s16, s14
 800fa4e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800fa52:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800fa56:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800fa5a:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	f043 84a8 	bne.w	80133b4 <kalman_3gyro.constprop.0+0x3b64>
 800fa64:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	f043 81e7 	bne.w	8012e3c <kalman_3gyro.constprop.0+0x35ec>
 800fa6e:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 800fa72:	9304      	str	r3, [sp, #16]
 800fa74:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 800fa78:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800fa7c:	9310      	str	r3, [sp, #64]	; 0x40
 800fa7e:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800fa82:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800fa86:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 800fa8a:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa8c:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 800fa90:	edd0 7a00 	vldr	s15, [r0]
 800fa94:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 800fa98:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 800fa9c:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 800faa0:	ed93 6a00 	vldr	s12, [r3]
 800faa4:	ed91 7a00 	vldr	s14, [r1]
 800faa8:	edd2 6a00 	vldr	s13, [r2]
 800faac:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800fab0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fab4:	2300      	movs	r3, #0
 800fab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faba:	ed8d 7a37 	vstr	s14, [sp, #220]	; 0xdc
 800fabe:	edcd 6a38 	vstr	s13, [sp, #224]	; 0xe0
 800fac2:	ed8d 6a39 	vstr	s12, [sp, #228]	; 0xe4
 800fac6:	933a      	str	r3, [sp, #232]	; 0xe8
 800fac8:	933b      	str	r3, [sp, #236]	; 0xec
 800faca:	933c      	str	r3, [sp, #240]	; 0xf0
 800facc:	933d      	str	r3, [sp, #244]	; 0xf4
 800face:	d14e      	bne.n	800fb6e <kalman_3gyro.constprop.0+0x31e>
 800fad0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fad8:	d149      	bne.n	800fb6e <kalman_3gyro.constprop.0+0x31e>
 800fada:	eef5 6a40 	vcmp.f32	s13, #0.0
 800fade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fae2:	d144      	bne.n	800fb6e <kalman_3gyro.constprop.0+0x31e>
 800fae4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faec:	d13f      	bne.n	800fb6e <kalman_3gyro.constprop.0+0x31e>
 800faee:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800faf0:	9336      	str	r3, [sp, #216]	; 0xd8
 800faf2:	7802      	ldrb	r2, [r0, #0]
 800faf4:	9337      	str	r3, [sp, #220]	; 0xdc
 800faf6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fafa:	9338      	str	r3, [sp, #224]	; 0xe0
 800fafc:	2300      	movs	r3, #0
 800fafe:	ed90 7a03 	vldr	s14, [r0, #12]
 800fb02:	edd0 6a01 	vldr	s13, [r0, #4]
 800fb06:	edd0 7a02 	vldr	s15, [r0, #8]
 800fb0a:	9139      	str	r1, [sp, #228]	; 0xe4
 800fb0c:	f88b 31ac 	strb.w	r3, [fp, #428]	; 0x1ac
 800fb10:	2a00      	cmp	r2, #0
 800fb12:	f003 8568 	beq.w	80135e6 <kalman_3gyro.constprop.0+0x3d96>
 800fb16:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fb1a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800fb1e:	eee7 7a07 	vfma.f32	s15, s14, s14
 800fb22:	eef1 6ae7 	vsqrt.f32	s13, s15
 800fb26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fb2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fb2e:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 800fb32:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 800fb36:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800fb3a:	2100      	movs	r1, #0
 800fb3c:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 800fb40:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 800fb44:	f008 fcfa 	bl	801853c <memset>
 800fb48:	4b32      	ldr	r3, [pc, #200]	; (800fc14 <kalman_3gyro.constprop.0+0x3c4>)
 800fb4a:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 800fb4e:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 800fb52:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 800fb56:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 800fb5a:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 800fb5e:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 800fb62:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 800fb66:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 800fb6a:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 800fb6e:	9b08      	ldr	r3, [sp, #32]
 800fb70:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800fc18 <kalman_3gyro.constprop.0+0x3c8>
 800fb74:	ed93 7a01 	vldr	s14, [r3, #4]
 800fb78:	edd3 5a00 	vldr	s11, [r3]
 800fb7c:	edd3 7a02 	vldr	s15, [r3, #8]
 800fb80:	ee67 6a07 	vmul.f32	s13, s14, s14
 800fb84:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800fb88:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800fb8c:	eef4 6ac6 	vcmpe.f32	s13, s12
 800fb90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb94:	f101 8127 	bmi.w	8010de6 <kalman_3gyro.constprop.0+0x1596>
 800fb98:	eeb1 9ae6 	vsqrt.f32	s18, s13
 800fb9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fba0:	ee79 6a66 	vsub.f32	s13, s18, s13
 800fba4:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 800fba8:	eef0 6ae6 	vabs.f32	s13, s13
 800fbac:	ee76 aaea 	vsub.f32	s21, s13, s21
 800fbb0:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800fbb4:	ed93 5a04 	vldr	s10, [r3, #16]
 800fbb8:	ed93 3a03 	vldr	s6, [r3, #12]
 800fbbc:	edd3 1a05 	vldr	s3, [r3, #20]
 800fbc0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800fc18 <kalman_3gyro.constprop.0+0x3c8>
 800fbc4:	9b04      	ldr	r3, [sp, #16]
 800fbc6:	ed95 ca00 	vldr	s24, [r5]
 800fbca:	ed93 ba00 	vldr	s22, [r3]
 800fbce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fbd2:	ee86 2a89 	vdiv.f32	s4, s13, s18
 800fbd6:	f20b 43bc 	addw	r3, fp, #1212	; 0x4bc
 800fbda:	461e      	mov	r6, r3
 800fbdc:	f20b 652c 	addw	r5, fp, #1580	; 0x62c
 800fbe0:	9502      	str	r5, [sp, #8]
 800fbe2:	f50b 619d 	add.w	r1, fp, #1256	; 0x4e8
 800fbe6:	f20b 4aec 	addw	sl, fp, #1260	; 0x4ec
 800fbea:	9327      	str	r3, [sp, #156]	; 0x9c
 800fbec:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 800fbf0:	f50b 639c 	add.w	r3, fp, #1248	; 0x4e0
 800fbf4:	f20b 44c4 	addw	r4, fp, #1220	; 0x4c4
 800fbf8:	f20b 40dc 	addw	r0, fp, #1244	; 0x4dc
 800fbfc:	f50b 6299 	add.w	r2, fp, #1224	; 0x4c8
 800fc00:	9501      	str	r5, [sp, #4]
 800fc02:	ee65 6a05 	vmul.f32	s13, s10, s10
 800fc06:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800fc0a:	eee3 6a03 	vfma.f32	s13, s6, s6
 800fc0e:	e009      	b.n	800fc24 <kalman_3gyro.constprop.0+0x3d4>
 800fc10:	3a9d4952 	.word	0x3a9d4952
 800fc14:	40a00000 	.word	0x40a00000
 800fc18:	3c23d70a 	.word	0x3c23d70a
 800fc1c:	3dcccccd 	.word	0x3dcccccd
 800fc20:	4b000000 	.word	0x4b000000
 800fc24:	f20b 4ccc 	addw	ip, fp, #1228	; 0x4cc
 800fc28:	f20b 45e4 	addw	r5, fp, #1252	; 0x4e4
 800fc2c:	ee25 8a82 	vmul.f32	s16, s11, s4
 800fc30:	eee1 6aa1 	vfma.f32	s13, s3, s3
 800fc34:	950c      	str	r5, [sp, #48]	; 0x30
 800fc36:	f50b 69c7 	add.w	r9, fp, #1592	; 0x638
 800fc3a:	ee67 fa02 	vmul.f32	s31, s14, s4
 800fc3e:	eef4 6ac6 	vcmpe.f32	s13, s12
 800fc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc46:	bf58      	it	pl
 800fc48:	eeb1 aae6 	vsqrtpl.f32	s20, s13
 800fc4c:	f20b 6e5c 	addw	lr, fp, #1628	; 0x65c
 800fc50:	f20b 6534 	addw	r5, fp, #1588	; 0x634
 800fc54:	bf48      	it	mi
 800fc56:	ed1f aa0f 	vldrmi	s20, [pc, #-60]	; 800fc1c <kalman_3gyro.constprop.0+0x3cc>
 800fc5a:	ed96 6a00 	vldr	s12, [r6]
 800fc5e:	edda 4a00 	vldr	s9, [sl]
 800fc62:	ed93 fa00 	vldr	s30, [r3]
 800fc66:	ed90 ea00 	vldr	s28, [r0]
 800fc6a:	edd4 3a00 	vldr	s7, [r4]
 800fc6e:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 800fc72:	eec4 6a0a 	vdiv.f32	s13, s8, s20
 800fc76:	f20b 76a4 	addw	r6, fp, #1956	; 0x7a4
 800fc7a:	9617      	str	r6, [sp, #92]	; 0x5c
 800fc7c:	f20b 76bc 	addw	r6, fp, #1980	; 0x7bc
 800fc80:	961a      	str	r6, [sp, #104]	; 0x68
 800fc82:	f20b 769c 	addw	r6, fp, #1948	; 0x79c
 800fc86:	9611      	str	r6, [sp, #68]	; 0x44
 800fc88:	f50b 66f5 	add.w	r6, fp, #1960	; 0x7a8
 800fc8c:	9618      	str	r6, [sp, #96]	; 0x60
 800fc8e:	9e02      	ldr	r6, [sp, #8]
 800fc90:	f50b 63c6 	add.w	r3, fp, #1584	; 0x630
 800fc94:	9303      	str	r3, [sp, #12]
 800fc96:	f20b 604c 	addw	r0, fp, #1612	; 0x64c
 800fc9a:	ee27 2a82 	vmul.f32	s4, s15, s4
 800fc9e:	ee23 3a26 	vmul.f32	s6, s6, s13
 800fca2:	ee25 5a26 	vmul.f32	s10, s10, s13
 800fca6:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800fcaa:	edd1 6a00 	vldr	s13, [r1]
 800fcae:	edcd fa2e 	vstr	s31, [sp, #184]	; 0xb8
 800fcb2:	ed8d 3a30 	vstr	s6, [sp, #192]	; 0xc0
 800fcb6:	ed8d 5a31 	vstr	s10, [sp, #196]	; 0xc4
 800fcba:	edcd 6a05 	vstr	s13, [sp, #20]
 800fcbe:	ed8d 6a06 	vstr	s12, [sp, #24]
 800fcc2:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800fcc6:	ed92 6a00 	vldr	s12, [r2]
 800fcca:	ed8d 2a2f 	vstr	s4, [sp, #188]	; 0xbc
 800fcce:	edcd 1a32 	vstr	s3, [sp, #200]	; 0xc8
 800fcd2:	edd6 2a00 	vldr	s5, [r6]
 800fcd6:	eddc 4a00 	vldr	s9, [ip]
 800fcda:	9e01      	ldr	r6, [sp, #4]
 800fcdc:	edd0 ca00 	vldr	s25, [r0]
 800fce0:	ed96 1a00 	vldr	s2, [r6]
 800fce4:	9803      	ldr	r0, [sp, #12]
 800fce6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fce8:	edcd 4a0a 	vstr	s9, [sp, #40]	; 0x28
 800fcec:	f50b 6c9e 	add.w	ip, fp, #1264	; 0x4f0
 800fcf0:	eddc 0a00 	vldr	s1, [ip]
 800fcf4:	ed96 da00 	vldr	s26, [r6]
 800fcf8:	edd0 4a00 	vldr	s9, [r0]
 800fcfc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fcfe:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 800fd02:	f50b 6cf8 	add.w	ip, fp, #1984	; 0x7c0
 800fd06:	eec4 da0c 	vdiv.f32	s27, s8, s24
 800fd0a:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800fd0e:	f20b 7ccc 	addw	ip, fp, #1996	; 0x7cc
 800fd12:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800fd16:	f50b 6cf4 	add.w	ip, fp, #1952	; 0x7a0
 800fd1a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800fd1e:	f20b 7cac 	addw	ip, fp, #1964	; 0x7ac
 800fd22:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800fd26:	f50b 6cf9 	add.w	ip, fp, #1992	; 0x7c8
 800fd2a:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 800fd2e:	f20b 7cc4 	addw	ip, fp, #1988	; 0x7c4
 800fd32:	f20b 6354 	addw	r3, fp, #1620	; 0x654
 800fd36:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800fd3a:	f50b 64cb 	add.w	r4, fp, #1624	; 0x658
 800fd3e:	edd6 4a00 	vldr	s9, [r6]
 800fd42:	edd9 6a00 	vldr	s13, [r9]
 800fd46:	edde ba00 	vldr	s23, [lr]
 800fd4a:	ed95 4a00 	vldr	s8, [r5]
 800fd4e:	ed94 0a00 	vldr	s0, [r4]
 800fd52:	edcd 2a14 	vstr	s5, [sp, #80]	; 0x50
 800fd56:	f50b 6cfa 	add.w	ip, fp, #2000	; 0x7d0
 800fd5a:	f20b 613c 	addw	r1, fp, #1596	; 0x63c
 800fd5e:	f50b 62cc 	add.w	r2, fp, #1632	; 0x660
 800fd62:	f50b 69ca 	add.w	r9, fp, #1616	; 0x650
 800fd66:	edd9 ea00 	vldr	s29, [r9]
 800fd6a:	edd1 2a00 	vldr	s5, [r1]
 800fd6e:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 800fd72:	edcd ca0c 	vstr	s25, [sp, #48]	; 0x30
 800fd76:	ed92 1a00 	vldr	s2, [r2]
 800fd7a:	edd3 ca00 	vldr	s25, [r3]
 800fd7e:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800fd82:	edcd 4a24 	vstr	s9, [sp, #144]	; 0x90
 800fd86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd88:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800fd8a:	edd3 4a00 	vldr	s9, [r3]
 800fd8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd90:	edcd 4a23 	vstr	s9, [sp, #140]	; 0x8c
 800fd94:	ee25 5a2f 	vmul.f32	s10, s10, s31
 800fd98:	edd3 fa00 	vldr	s31, [r3]
 800fd9c:	eef0 4a6f 	vmov.f32	s9, s31
 800fda0:	edd6 fa00 	vldr	s31, [r6]
 800fda4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800fda6:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 800fdaa:	eea3 5a08 	vfma.f32	s10, s6, s16
 800fdae:	ed96 3a00 	vldr	s6, [r6]
 800fdb2:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800fdb4:	ed8d 3a26 	vstr	s6, [sp, #152]	; 0x98
 800fdb8:	ee25 8aad 	vmul.f32	s16, s11, s27
 800fdbc:	eddd 5a06 	vldr	s11, [sp, #24]
 800fdc0:	edd6 fa00 	vldr	s31, [r6]
 800fdc4:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800fdc6:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 800fdca:	ee95 6a83 	vfnms.f32	s12, s11, s6
 800fdce:	eddd 5a14 	vldr	s11, [sp, #80]	; 0x50
 800fdd2:	eed5 6a83 	vfnms.f32	s13, s11, s6
 800fdd6:	eddd 5a26 	vldr	s11, [sp, #152]	; 0x98
 800fdda:	eed5 fa83 	vfnms.f32	s31, s11, s6
 800fdde:	edd8 5a00 	vldr	s11, [r8]
 800fde2:	eed5 3a83 	vfnms.f32	s7, s11, s6
 800fde6:	eef0 5a44 	vmov.f32	s11, s8
 800fdea:	ed97 4a00 	vldr	s8, [r7]
 800fdee:	ee76 6aae 	vadd.f32	s13, s13, s29
 800fdf2:	eed4 5a03 	vfnms.f32	s11, s8, s6
 800fdf6:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 800fdfa:	ed9d 4a24 	vldr	s8, [sp, #144]	; 0x90
 800fdfe:	eede 2a83 	vfnms.f32	s5, s29, s6
 800fe02:	ee94 4a83 	vfnms.f32	s8, s9, s6
 800fe06:	ee73 3a8e 	vadd.f32	s7, s7, s28
 800fe0a:	eddd 4a0a 	vldr	s9, [sp, #40]	; 0x28
 800fe0e:	ed9d ea0b 	vldr	s28, [sp, #44]	; 0x2c
 800fe12:	eede 4a03 	vfnms.f32	s9, s28, s6
 800fe16:	ed9d ea0c 	vldr	s28, [sp, #48]	; 0x30
 800fe1a:	ee72 2aac 	vadd.f32	s5, s5, s25
 800fe1e:	ee75 5a8e 	vadd.f32	s11, s11, s28
 800fe22:	edd6 ca00 	vldr	s25, [r6]
 800fe26:	ed9d ea25 	vldr	s28, [sp, #148]	; 0x94
 800fe2a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800fe2c:	ee34 4a0e 	vadd.f32	s8, s8, s28
 800fe30:	ed96 ea00 	vldr	s28, [r6]
 800fe34:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800fe36:	ee74 4a8d 	vadd.f32	s9, s9, s26
 800fe3a:	ed96 da00 	vldr	s26, [r6]
 800fe3e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800fe40:	ee7f faac 	vadd.f32	s31, s31, s25
 800fe44:	edd6 ca00 	vldr	s25, [r6]
 800fe48:	eedd ca03 	vfnms.f32	s25, s26, s6
 800fe4c:	ed9d da09 	vldr	s26, [sp, #36]	; 0x24
 800fe50:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800fe52:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800fe56:	eeeb 6a83 	vfma.f32	s13, s23, s6
 800fe5a:	eee0 5a03 	vfma.f32	s11, s0, s6
 800fe5e:	eddd ba05 	vldr	s23, [sp, #20]
 800fe62:	ed96 0a00 	vldr	s0, [r6]
 800fe66:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800fe68:	ee36 6a0f 	vadd.f32	s12, s12, s30
 800fe6c:	eeee fa03 	vfma.f32	s31, s28, s6
 800fe70:	eead 6a03 	vfma.f32	s12, s26, s6
 800fe74:	eeeb 3a83 	vfma.f32	s7, s23, s6
 800fe78:	eea0 4a03 	vfma.f32	s8, s0, s6
 800fe7c:	eddd ba23 	vldr	s23, [sp, #140]	; 0x8c
 800fe80:	ed1f 0a9a 	vldr	s0, [pc, #-616]	; 800fc1c <kalman_3gyro.constprop.0+0x3cc>
 800fe84:	eee1 2a03 	vfma.f32	s5, s2, s6
 800fe88:	ee2c ca00 	vmul.f32	s24, s24, s0
 800fe8c:	ee6b ba80 	vmul.f32	s23, s23, s0
 800fe90:	ed96 1a00 	vldr	s2, [r6]
 800fe94:	ee2b 0a00 	vmul.f32	s0, s22, s0
 800fe98:	eee0 4a83 	vfma.f32	s9, s1, s6
 800fe9c:	ee26 6a0c 	vmul.f32	s12, s12, s24
 800fea0:	ee6f faab 	vmul.f32	s31, s31, s23
 800fea4:	ee3c 1a81 	vadd.f32	s2, s25, s2
 800fea8:	ee60 6a26 	vmul.f32	s13, s0, s13
 800feac:	eddc 0a00 	vldr	s1, [ip]
 800feb0:	ee63 3a8c 	vmul.f32	s7, s7, s24
 800feb4:	ee24 4a2b 	vmul.f32	s8, s8, s23
 800feb8:	ee60 5a25 	vmul.f32	s11, s0, s11
 800febc:	eea0 1a83 	vfma.f32	s2, s1, s6
 800fec0:	ee26 6a06 	vmul.f32	s12, s12, s12
 800fec4:	ee6f faaf 	vmul.f32	s31, s31, s31
 800fec8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800fecc:	eea3 6aa3 	vfma.f32	s12, s7, s7
 800fed0:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800fed4:	eee4 fa04 	vfma.f32	s31, s8, s8
 800fed8:	ee64 4a8c 	vmul.f32	s9, s9, s24
 800fedc:	ee21 1a2b 	vmul.f32	s2, s2, s23
 800fee0:	ee60 2a22 	vmul.f32	s5, s0, s5
 800fee4:	eea4 6aa4 	vfma.f32	s12, s9, s9
 800fee8:	eee1 fa01 	vfma.f32	s31, s2, s2
 800feec:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800fef0:	eea1 5a82 	vfma.f32	s10, s3, s4
 800fef4:	ed5f 5ab6 	vldr	s11, [pc, #-728]	; 800fc20 <kalman_3gyro.constprop.0+0x3d0>
 800fef8:	eef0 4ac8 	vabs.f32	s9, s16
 800fefc:	eef4 4ae5 	vcmpe.f32	s9, s11
 800ff00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff04:	ee27 ea2d 	vmul.f32	s28, s14, s27
 800ff08:	eeb1 dac6 	vsqrt.f32	s26, s12
 800ff0c:	eef1 caef 	vsqrt.f32	s25, s31
 800ff10:	eef1 bae6 	vsqrt.f32	s23, s13
 800ff14:	ee67 daad 	vmul.f32	s27, s15, s27
 800ff18:	eeb0 ca45 	vmov.f32	s24, s10
 800ff1c:	d517      	bpl.n	800ff4e <kalman_3gyro.constprop.0+0x6fe>
 800ff1e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ff22:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ff26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff2a:	f2c1 806f 	blt.w	801100c <kalman_3gyro.constprop.0+0x17bc>
 800ff2e:	ee78 7a27 	vadd.f32	s15, s16, s15
 800ff32:	ee17 0a90 	vmov	r0, s15
 800ff36:	f7f0 faff 	bl	8000538 <__aeabi_f2d>
 800ff3a:	ec41 0b10 	vmov	d0, r0, r1
 800ff3e:	f008 ffbf 	bl	8018ec0 <floor>
 800ff42:	ec51 0b10 	vmov	r0, r1, d0
 800ff46:	f7f0 fdff 	bl	8000b48 <__aeabi_d2f>
 800ff4a:	ee08 0a10 	vmov	s16, r0
 800ff4e:	ed5f 7acc 	vldr	s15, [pc, #-816]	; 800fc20 <kalman_3gyro.constprop.0+0x3d0>
 800ff52:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 800ff56:	eef0 6ace 	vabs.f32	s13, s28
 800ff5a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ff5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff62:	d517      	bpl.n	800ff94 <kalman_3gyro.constprop.0+0x744>
 800ff64:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ff68:	eeb4 eae7 	vcmpe.f32	s28, s15
 800ff6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff70:	f2c1 8040 	blt.w	8010ff4 <kalman_3gyro.constprop.0+0x17a4>
 800ff74:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800ff78:	ee17 0a90 	vmov	r0, s15
 800ff7c:	f7f0 fadc 	bl	8000538 <__aeabi_f2d>
 800ff80:	ec41 0b10 	vmov	d0, r0, r1
 800ff84:	f008 ff9c 	bl	8018ec0 <floor>
 800ff88:	ec51 0b10 	vmov	r0, r1, d0
 800ff8c:	f7f0 fddc 	bl	8000b48 <__aeabi_d2f>
 800ff90:	ee0e 0a10 	vmov	s28, r0
 800ff94:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 800fc20 <kalman_3gyro.constprop.0+0x3d0>
 800ff98:	ed8d ea34 	vstr	s28, [sp, #208]	; 0xd0
 800ff9c:	eeb0 7aed 	vabs.f32	s14, s27
 800ffa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ffa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa8:	d517      	bpl.n	800ffda <kalman_3gyro.constprop.0+0x78a>
 800ffaa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ffae:	eef4 dae7 	vcmpe.f32	s27, s15
 800ffb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb6:	f2c1 8011 	blt.w	8010fdc <kalman_3gyro.constprop.0+0x178c>
 800ffba:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800ffbe:	ee17 0a90 	vmov	r0, s15
 800ffc2:	f7f0 fab9 	bl	8000538 <__aeabi_f2d>
 800ffc6:	ec41 0b10 	vmov	d0, r0, r1
 800ffca:	f008 ff79 	bl	8018ec0 <floor>
 800ffce:	ec51 0b10 	vmov	r0, r1, d0
 800ffd2:	f7f0 fdb9 	bl	8000b48 <__aeabi_d2f>
 800ffd6:	ee0d 0a90 	vmov	s27, r0
 800ffda:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 800ffde:	edcd da35 	vstr	s27, [sp, #212]	; 0xd4
 800ffe2:	1e61      	subs	r1, r4, #1
 800ffe4:	b249      	sxtb	r1, r1
 800ffe6:	2900      	cmp	r1, #0
 800ffe8:	dd1a      	ble.n	8010020 <kalman_3gyro.constprop.0+0x7d0>
 800ffea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ffee:	1ea0      	subs	r0, r4, #2
 800fff0:	0089      	lsls	r1, r1, #2
 800fff2:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 800fff6:	b2c0      	uxtb	r0, r0
 800fff8:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 800fffc:	440a      	add	r2, r1
 800fffe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8010002:	445b      	add	r3, fp
 8010004:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 8010008:	6819      	ldr	r1, [r3, #0]
 801000a:	6858      	ldr	r0, [r3, #4]
 801000c:	60d9      	str	r1, [r3, #12]
 801000e:	6899      	ldr	r1, [r3, #8]
 8010010:	6118      	str	r0, [r3, #16]
 8010012:	6159      	str	r1, [r3, #20]
 8010014:	3b0c      	subs	r3, #12
 8010016:	4293      	cmp	r3, r2
 8010018:	d1f6      	bne.n	8010008 <kalman_3gyro.constprop.0+0x7b8>
 801001a:	9b04      	ldr	r3, [sp, #16]
 801001c:	ed93 ba00 	vldr	s22, [r3]
 8010020:	ed88 8a00 	vstr	s16, [r8]
 8010024:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010028:	ee87 8a8b 	vdiv.f32	s16, s15, s22
 801002c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801002e:	ed83 ea00 	vstr	s28, [r3]
 8010032:	9b01      	ldr	r3, [sp, #4]
 8010034:	eddf 7aa5 	vldr	s15, [pc, #660]	; 80102cc <kalman_3gyro.constprop.0+0xa7c>
 8010038:	edc3 da00 	vstr	s27, [r3]
 801003c:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 8010040:	3301      	adds	r3, #1
 8010042:	b2db      	uxtb	r3, r3
 8010044:	429c      	cmp	r4, r3
 8010046:	bf28      	it	cs
 8010048:	461c      	movcs	r4, r3
 801004a:	9b08      	ldr	r3, [sp, #32]
 801004c:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 8010050:	edd3 da03 	vldr	s27, [r3, #12]
 8010054:	ed93 ba04 	vldr	s22, [r3, #16]
 8010058:	edd3 6a05 	vldr	s13, [r3, #20]
 801005c:	ee68 da2d 	vmul.f32	s27, s16, s27
 8010060:	ee28 ba0b 	vmul.f32	s22, s16, s22
 8010064:	eeb0 7aed 	vabs.f32	s14, s27
 8010068:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801006c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010070:	ee28 8a26 	vmul.f32	s16, s16, s13
 8010074:	d517      	bpl.n	80100a6 <kalman_3gyro.constprop.0+0x856>
 8010076:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801007a:	eef4 dae7 	vcmpe.f32	s27, s15
 801007e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010082:	f2c0 879f 	blt.w	8010fc4 <kalman_3gyro.constprop.0+0x1774>
 8010086:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 801008a:	ee17 0a90 	vmov	r0, s15
 801008e:	f7f0 fa53 	bl	8000538 <__aeabi_f2d>
 8010092:	ec41 0b10 	vmov	d0, r0, r1
 8010096:	f008 ff13 	bl	8018ec0 <floor>
 801009a:	ec51 0b10 	vmov	r0, r1, d0
 801009e:	f7f0 fd53 	bl	8000b48 <__aeabi_d2f>
 80100a2:	ee0d 0a90 	vmov	s27, r0
 80100a6:	eddf 7a89 	vldr	s15, [pc, #548]	; 80102cc <kalman_3gyro.constprop.0+0xa7c>
 80100aa:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 80100ae:	eeb0 7acb 	vabs.f32	s14, s22
 80100b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ba:	d517      	bpl.n	80100ec <kalman_3gyro.constprop.0+0x89c>
 80100bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80100c0:	eeb4 bae7 	vcmpe.f32	s22, s15
 80100c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c8:	f2c0 8770 	blt.w	8010fac <kalman_3gyro.constprop.0+0x175c>
 80100cc:	ee7b 7a27 	vadd.f32	s15, s22, s15
 80100d0:	ee17 0a90 	vmov	r0, s15
 80100d4:	f7f0 fa30 	bl	8000538 <__aeabi_f2d>
 80100d8:	ec41 0b10 	vmov	d0, r0, r1
 80100dc:	f008 fef0 	bl	8018ec0 <floor>
 80100e0:	ec51 0b10 	vmov	r0, r1, d0
 80100e4:	f7f0 fd30 	bl	8000b48 <__aeabi_d2f>
 80100e8:	ee0b 0a10 	vmov	s22, r0
 80100ec:	eddf 7a77 	vldr	s15, [pc, #476]	; 80102cc <kalman_3gyro.constprop.0+0xa7c>
 80100f0:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 80100f4:	eeb0 7ac8 	vabs.f32	s14, s16
 80100f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010100:	d517      	bpl.n	8010132 <kalman_3gyro.constprop.0+0x8e2>
 8010102:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010106:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801010a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801010e:	f2c0 8741 	blt.w	8010f94 <kalman_3gyro.constprop.0+0x1744>
 8010112:	ee78 7a27 	vadd.f32	s15, s16, s15
 8010116:	ee17 0a90 	vmov	r0, s15
 801011a:	f7f0 fa0d 	bl	8000538 <__aeabi_f2d>
 801011e:	ec41 0b10 	vmov	d0, r0, r1
 8010122:	f008 fecd 	bl	8018ec0 <floor>
 8010126:	ec51 0b10 	vmov	r0, r1, d0
 801012a:	f7f0 fd0d 	bl	8000b48 <__aeabi_d2f>
 801012e:	ee08 0a10 	vmov	s16, r0
 8010132:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 8010136:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 801013a:	1e61      	subs	r1, r4, #1
 801013c:	b249      	sxtb	r1, r1
 801013e:	2900      	cmp	r1, #0
 8010140:	dd17      	ble.n	8010172 <kalman_3gyro.constprop.0+0x922>
 8010142:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010146:	1ea2      	subs	r2, r4, #2
 8010148:	0089      	lsls	r1, r1, #2
 801014a:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 801014e:	b2d2      	uxtb	r2, r2
 8010150:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 8010154:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010158:	4401      	add	r1, r0
 801015a:	445b      	add	r3, fp
 801015c:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	6858      	ldr	r0, [r3, #4]
 8010164:	60da      	str	r2, [r3, #12]
 8010166:	689a      	ldr	r2, [r3, #8]
 8010168:	6118      	str	r0, [r3, #16]
 801016a:	615a      	str	r2, [r3, #20]
 801016c:	3b0c      	subs	r3, #12
 801016e:	4299      	cmp	r1, r3
 8010170:	d1f6      	bne.n	8010160 <kalman_3gyro.constprop.0+0x910>
 8010172:	9b02      	ldr	r3, [sp, #8]
 8010174:	edc7 da00 	vstr	s27, [r7]
 8010178:	ed83 ba00 	vstr	s22, [r3]
 801017c:	9b03      	ldr	r3, [sp, #12]
 801017e:	eddf 7a53 	vldr	s15, [pc, #332]	; 80102cc <kalman_3gyro.constprop.0+0xa7c>
 8010182:	ed83 8a00 	vstr	s16, [r3]
 8010186:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 801018a:	3301      	adds	r3, #1
 801018c:	b2db      	uxtb	r3, r3
 801018e:	429c      	cmp	r4, r3
 8010190:	bf28      	it	cs
 8010192:	461c      	movcs	r4, r3
 8010194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010196:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 801019a:	ed93 7a00 	vldr	s14, [r3]
 801019e:	9b08      	ldr	r3, [sp, #32]
 80101a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80101a4:	ee86 8a07 	vdiv.f32	s16, s12, s14
 80101a8:	edd3 da06 	vldr	s27, [r3, #24]
 80101ac:	ed93 ba07 	vldr	s22, [r3, #28]
 80101b0:	edd3 6a08 	vldr	s13, [r3, #32]
 80101b4:	ee68 da2d 	vmul.f32	s27, s16, s27
 80101b8:	ee28 ba0b 	vmul.f32	s22, s16, s22
 80101bc:	eeb0 7aed 	vabs.f32	s14, s27
 80101c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80101c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c8:	ee28 8a26 	vmul.f32	s16, s16, s13
 80101cc:	d517      	bpl.n	80101fe <kalman_3gyro.constprop.0+0x9ae>
 80101ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80101d2:	eef4 dae7 	vcmpe.f32	s27, s15
 80101d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101da:	f2c0 86cf 	blt.w	8010f7c <kalman_3gyro.constprop.0+0x172c>
 80101de:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 80101e2:	ee17 0a90 	vmov	r0, s15
 80101e6:	f7f0 f9a7 	bl	8000538 <__aeabi_f2d>
 80101ea:	ec41 0b10 	vmov	d0, r0, r1
 80101ee:	f008 fe67 	bl	8018ec0 <floor>
 80101f2:	ec51 0b10 	vmov	r0, r1, d0
 80101f6:	f7f0 fca7 	bl	8000b48 <__aeabi_d2f>
 80101fa:	ee0d 0a90 	vmov	s27, r0
 80101fe:	eddf 7a33 	vldr	s15, [pc, #204]	; 80102cc <kalman_3gyro.constprop.0+0xa7c>
 8010202:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 8010206:	eeb0 7acb 	vabs.f32	s14, s22
 801020a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801020e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010212:	d517      	bpl.n	8010244 <kalman_3gyro.constprop.0+0x9f4>
 8010214:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010218:	eeb4 bae7 	vcmpe.f32	s22, s15
 801021c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010220:	f2c0 86a0 	blt.w	8010f64 <kalman_3gyro.constprop.0+0x1714>
 8010224:	ee7b 7a27 	vadd.f32	s15, s22, s15
 8010228:	ee17 0a90 	vmov	r0, s15
 801022c:	f7f0 f984 	bl	8000538 <__aeabi_f2d>
 8010230:	ec41 0b10 	vmov	d0, r0, r1
 8010234:	f008 fe44 	bl	8018ec0 <floor>
 8010238:	ec51 0b10 	vmov	r0, r1, d0
 801023c:	f7f0 fc84 	bl	8000b48 <__aeabi_d2f>
 8010240:	ee0b 0a10 	vmov	s22, r0
 8010244:	eddf 7a21 	vldr	s15, [pc, #132]	; 80102cc <kalman_3gyro.constprop.0+0xa7c>
 8010248:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 801024c:	eeb0 7ac8 	vabs.f32	s14, s16
 8010250:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010258:	d517      	bpl.n	801028a <kalman_3gyro.constprop.0+0xa3a>
 801025a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801025e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010266:	f2c0 8671 	blt.w	8010f4c <kalman_3gyro.constprop.0+0x16fc>
 801026a:	ee78 7a27 	vadd.f32	s15, s16, s15
 801026e:	ee17 0a90 	vmov	r0, s15
 8010272:	f7f0 f961 	bl	8000538 <__aeabi_f2d>
 8010276:	ec41 0b10 	vmov	d0, r0, r1
 801027a:	f008 fe21 	bl	8018ec0 <floor>
 801027e:	ec51 0b10 	vmov	r0, r1, d0
 8010282:	f7f0 fc61 	bl	8000b48 <__aeabi_d2f>
 8010286:	ee08 0a10 	vmov	s16, r0
 801028a:	f89b 4791 	ldrb.w	r4, [fp, #1937]	; 0x791
 801028e:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 8010292:	1e63      	subs	r3, r4, #1
 8010294:	b25b      	sxtb	r3, r3
 8010296:	2b00      	cmp	r3, #0
 8010298:	dd1c      	ble.n	80102d4 <kalman_3gyro.constprop.0+0xa84>
 801029a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801029e:	1ea2      	subs	r2, r4, #2
 80102a0:	0099      	lsls	r1, r3, #2
 80102a2:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 80102a6:	b2d2      	uxtb	r2, r2
 80102a8:	f201 738c 	addw	r3, r1, #1932	; 0x78c
 80102ac:	4408      	add	r0, r1
 80102ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80102b2:	445b      	add	r3, fp
 80102b4:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	6859      	ldr	r1, [r3, #4]
 80102bc:	60da      	str	r2, [r3, #12]
 80102be:	689a      	ldr	r2, [r3, #8]
 80102c0:	6119      	str	r1, [r3, #16]
 80102c2:	615a      	str	r2, [r3, #20]
 80102c4:	3b0c      	subs	r3, #12
 80102c6:	4283      	cmp	r3, r0
 80102c8:	d1f6      	bne.n	80102b8 <kalman_3gyro.constprop.0+0xa68>
 80102ca:	e003      	b.n	80102d4 <kalman_3gyro.constprop.0+0xa84>
 80102cc:	4b000000 	.word	0x4b000000
 80102d0:	00000000 	.word	0x00000000
 80102d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80102d6:	edc3 da00 	vstr	s27, [r3]
 80102da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80102dc:	ed83 ba00 	vstr	s22, [r3]
 80102e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80102e2:	ed83 8a00 	vstr	s16, [r3]
 80102e6:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 80102ea:	3301      	adds	r3, #1
 80102ec:	b2db      	uxtb	r3, r3
 80102ee:	429c      	cmp	r4, r3
 80102f0:	bf28      	it	cs
 80102f2:	461c      	movcs	r4, r3
 80102f4:	f88b 4790 	strb.w	r4, [fp, #1936]	; 0x790
 80102f8:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 80102fc:	aa54      	add	r2, sp, #336	; 0x150
 80102fe:	a92d      	add	r1, sp, #180	; 0xb4
 8010300:	a830      	add	r0, sp, #192	; 0xc0
 8010302:	461c      	mov	r4, r3
 8010304:	9314      	str	r3, [sp, #80]	; 0x50
 8010306:	f7fe fa27 	bl	800e758 <getRotationMatrix>
 801030a:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 801030e:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 8010312:	6820      	ldr	r0, [r4, #0]
 8010314:	6861      	ldr	r1, [r4, #4]
 8010316:	68a2      	ldr	r2, [r4, #8]
 8010318:	68e3      	ldr	r3, [r4, #12]
 801031a:	4635      	mov	r5, r6
 801031c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801031e:	3410      	adds	r4, #16
 8010320:	42bc      	cmp	r4, r7
 8010322:	462e      	mov	r6, r5
 8010324:	d1f5      	bne.n	8010312 <kalman_3gyro.constprop.0+0xac2>
 8010326:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 801032a:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 801032e:	6820      	ldr	r0, [r4, #0]
 8010330:	6028      	str	r0, [r5, #0]
 8010332:	eef0 7ae7 	vabs.f32	s15, s15
 8010336:	eeb0 7ac7 	vabs.f32	s14, s14
 801033a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801033e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010342:	f140 85a4 	bpl.w	8010e8e <kalman_3gyro.constprop.0+0x163e>
 8010346:	2303      	movs	r3, #3
 8010348:	2706      	movs	r7, #6
 801034a:	e9cd 3701 	strd	r3, r7, [sp, #4]
 801034e:	2604      	movs	r6, #4
 8010350:	2400      	movs	r4, #0
 8010352:	eef0 7a47 	vmov.f32	s15, s14
 8010356:	4632      	mov	r2, r6
 8010358:	46a2      	mov	sl, r4
 801035a:	2107      	movs	r1, #7
 801035c:	f04f 0c01 	mov.w	ip, #1
 8010360:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 8010364:	eeb0 7ac7 	vabs.f32	s14, s14
 8010368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801036c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010370:	f340 85ae 	ble.w	8010ed0 <kalman_3gyro.constprop.0+0x1680>
 8010374:	2304      	movs	r3, #4
 8010376:	2007      	movs	r0, #7
 8010378:	2108      	movs	r1, #8
 801037a:	9301      	str	r3, [sp, #4]
 801037c:	461c      	mov	r4, r3
 801037e:	9002      	str	r0, [sp, #8]
 8010380:	460a      	mov	r2, r1
 8010382:	2306      	movs	r3, #6
 8010384:	2003      	movs	r0, #3
 8010386:	2605      	movs	r6, #5
 8010388:	f04f 0800 	mov.w	r8, #0
 801038c:	f04f 0a01 	mov.w	sl, #1
 8010390:	f04f 0c02 	mov.w	ip, #2
 8010394:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8010396:	442c      	add	r4, r5
 8010398:	442a      	add	r2, r5
 801039a:	edd4 6a00 	vldr	s13, [r4]
 801039e:	ed92 7a00 	vldr	s14, [r2]
 80103a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80103a6:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 80103aa:	eb02 048a 	add.w	r4, r2, sl, lsl #2
 80103ae:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 80103b2:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 80103b6:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 80103ba:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 80103be:	970c      	str	r7, [sp, #48]	; 0x30
 80103c0:	9f01      	ldr	r7, [sp, #4]
 80103c2:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 80103c6:	00b6      	lsls	r6, r6, #2
 80103c8:	960a      	str	r6, [sp, #40]	; 0x28
 80103ca:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 80103ce:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 80103d2:	edc4 7a00 	vstr	s15, [r4]
 80103d6:	edd2 7a00 	vldr	s15, [r2]
 80103da:	ed99 7a00 	vldr	s14, [r9]
 80103de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80103e2:	ea4f 028a 	mov.w	r2, sl, lsl #2
 80103e6:	9204      	str	r2, [sp, #16]
 80103e8:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80103ec:	9205      	str	r2, [sp, #20]
 80103ee:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80103f2:	9209      	str	r2, [sp, #36]	; 0x24
 80103f4:	00ba      	lsls	r2, r7, #2
 80103f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80103f8:	9206      	str	r2, [sp, #24]
 80103fa:	0080      	lsls	r0, r0, #2
 80103fc:	9003      	str	r0, [sp, #12]
 80103fe:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 8010402:	0089      	lsls	r1, r1, #2
 8010404:	910b      	str	r1, [sp, #44]	; 0x2c
 8010406:	edc9 6a00 	vstr	s13, [r9]
 801040a:	ed94 6a00 	vldr	s12, [r4]
 801040e:	ed97 7a00 	vldr	s14, [r7]
 8010412:	edd5 7a00 	vldr	s15, [r5]
 8010416:	9902      	ldr	r1, [sp, #8]
 8010418:	9a02      	ldr	r2, [sp, #8]
 801041a:	eee6 7a47 	vfms.f32	s15, s12, s14
 801041e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8010422:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8010426:	0092      	lsls	r2, r2, #2
 8010428:	edc5 7a00 	vstr	s15, [r5]
 801042c:	ed97 7a00 	vldr	s14, [r7]
 8010430:	edde 7a00 	vldr	s15, [lr]
 8010434:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010438:	009b      	lsls	r3, r3, #2
 801043a:	edce 7a00 	vstr	s15, [lr]
 801043e:	edd0 5a00 	vldr	s11, [r0]
 8010442:	ed91 7a00 	vldr	s14, [r1]
 8010446:	eea6 7a65 	vfms.f32	s14, s12, s11
 801044a:	eef0 7ae7 	vabs.f32	s15, s15
 801044e:	ed81 7a00 	vstr	s14, [r1]
 8010452:	ed90 6a00 	vldr	s12, [r0]
 8010456:	ed96 7a00 	vldr	s14, [r6]
 801045a:	eea6 7ac6 	vfms.f32	s14, s13, s12
 801045e:	ed86 7a00 	vstr	s14, [r6]
 8010462:	ed95 7a00 	vldr	s14, [r5]
 8010466:	eeb0 7ac7 	vabs.f32	s14, s14
 801046a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801046e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010472:	dd10      	ble.n	8010496 <kalman_3gyro.constprop.0+0xc46>
 8010474:	4652      	mov	r2, sl
 8010476:	46c2      	mov	sl, r8
 8010478:	4690      	mov	r8, r2
 801047a:	461a      	mov	r2, r3
 801047c:	9b01      	ldr	r3, [sp, #4]
 801047e:	9902      	ldr	r1, [sp, #8]
 8010480:	9803      	ldr	r0, [sp, #12]
 8010482:	9006      	str	r0, [sp, #24]
 8010484:	009b      	lsls	r3, r3, #2
 8010486:	9303      	str	r3, [sp, #12]
 8010488:	008b      	lsls	r3, r1, #2
 801048a:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801048e:	9105      	str	r1, [sp, #20]
 8010490:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8010494:	9104      	str	r1, [sp, #16]
 8010496:	9903      	ldr	r1, [sp, #12]
 8010498:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 801049c:	4401      	add	r1, r0
 801049e:	460c      	mov	r4, r1
 80104a0:	9906      	ldr	r1, [sp, #24]
 80104a2:	ed94 7a00 	vldr	s14, [r4]
 80104a6:	4401      	add	r1, r0
 80104a8:	edd1 7a00 	vldr	s15, [r1]
 80104ac:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80104b0:	4608      	mov	r0, r1
 80104b2:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80104b6:	440a      	add	r2, r1
 80104b8:	440b      	add	r3, r1
 80104ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80104bc:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 80104c0:	4429      	add	r1, r5
 80104c2:	460d      	mov	r5, r1
 80104c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80104c6:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 80104ca:	4431      	add	r1, r6
 80104cc:	468e      	mov	lr, r1
 80104ce:	ed84 3a00 	vstr	s6, [r4]
 80104d2:	ed92 7a00 	vldr	s14, [r2]
 80104d6:	edd3 7a00 	vldr	s15, [r3]
 80104da:	9904      	ldr	r1, [sp, #16]
 80104dc:	eee3 7a47 	vfms.f32	s15, s6, s14
 80104e0:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 80104e4:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 80104e8:	440e      	add	r6, r1
 80104ea:	1879      	adds	r1, r7, r1
 80104ec:	edc3 7a00 	vstr	s15, [r3]
 80104f0:	9101      	str	r1, [sp, #4]
 80104f2:	9b05      	ldr	r3, [sp, #20]
 80104f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80104f6:	edd2 0a00 	vldr	s1, [r2]
 80104fa:	ed95 1a00 	vldr	s2, [r5]
 80104fe:	ed9e 2a00 	vldr	s4, [lr]
 8010502:	f5a6 66cf 	sub.w	r6, r6, #1656	; 0x678
 8010506:	edd6 6a00 	vldr	s13, [r6]
 801050a:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 801050e:	1874      	adds	r4, r6, r1
 8010510:	18f7      	adds	r7, r6, r3
 8010512:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 8010516:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 801051a:	eb06 0903 	add.w	r9, r6, r3
 801051e:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 8010522:	ee82 0aa7 	vdiv.f32	s0, s5, s15
 8010526:	eb03 068c 	add.w	r6, r3, ip, lsl #2
 801052a:	4633      	mov	r3, r6
 801052c:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 8010530:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8010534:	f20d 4cd4 	addw	ip, sp, #1236	; 0x4d4
 8010538:	448c      	add	ip, r1
 801053a:	9901      	ldr	r1, [sp, #4]
 801053c:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 8010540:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 8010544:	ed94 7a00 	vldr	s14, [r4]
 8010548:	ed93 6a00 	vldr	s12, [r3]
 801054c:	edd0 7a00 	vldr	s15, [r0]
 8010550:	ed99 8a00 	vldr	s16, [r9]
 8010554:	ed91 ba00 	vldr	s22, [r1]
 8010558:	ed97 4a00 	vldr	s8, [r7]
 801055c:	edd6 4a00 	vldr	s9, [r6]
 8010560:	eddc da00 	vldr	s27, [ip]
 8010564:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 8010568:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 801056c:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8010570:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 8010574:	46a2      	mov	sl, r4
 8010576:	4613      	mov	r3, r2
 8010578:	eec2 1aa7 	vdiv.f32	s3, s5, s15
 801057c:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 8010580:	f5aa 6acc 	sub.w	sl, sl, #1632	; 0x660
 8010584:	f2a2 626c 	subw	r2, r2, #1644	; 0x66c
 8010588:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 801058c:	eeeb 6a47 	vfms.f32	s13, s22, s14
 8010590:	eea8 4a47 	vfms.f32	s8, s16, s14
 8010594:	ed94 5a00 	vldr	s10, [r4]
 8010598:	edda 3a00 	vldr	s7, [sl]
 801059c:	edd2 5a00 	vldr	s11, [r2]
 80105a0:	edd3 7a00 	vldr	s15, [r3]
 80105a4:	eeab 5a64 	vfms.f32	s10, s22, s9
 80105a8:	eee8 5a64 	vfms.f32	s11, s16, s9
 80105ac:	eee6 3a4b 	vfms.f32	s7, s12, s22
 80105b0:	eee6 7a48 	vfms.f32	s15, s12, s16
 80105b4:	eea6 4ac3 	vfms.f32	s8, s13, s6
 80105b8:	ee82 8aad 	vdiv.f32	s16, s5, s27
 80105bc:	eee3 5a45 	vfms.f32	s11, s6, s10
 80105c0:	eee3 7a63 	vfms.f32	s15, s6, s7
 80105c4:	ee20 4a04 	vmul.f32	s8, s0, s8
 80105c8:	ee60 5a25 	vmul.f32	s11, s0, s11
 80105cc:	ee67 7a80 	vmul.f32	s15, s15, s0
 80105d0:	eee0 6ac4 	vfms.f32	s13, s1, s8
 80105d4:	eea0 5ae5 	vfms.f32	s10, s1, s11
 80105d8:	eee7 3ae0 	vfms.f32	s7, s15, s1
 80105dc:	eea1 7a44 	vfms.f32	s14, s2, s8
 80105e0:	ee61 6aa6 	vmul.f32	s13, s3, s13
 80105e4:	eee1 4a65 	vfms.f32	s9, s2, s11
 80105e8:	eea7 6ac1 	vfms.f32	s12, s15, s2
 80105ec:	ee21 5a85 	vmul.f32	s10, s3, s10
 80105f0:	eea2 7a66 	vfms.f32	s14, s4, s13
 80105f4:	ee63 1aa1 	vmul.f32	s3, s7, s3
 80105f8:	eee2 4a45 	vfms.f32	s9, s4, s10
 80105fc:	eea1 6ac2 	vfms.f32	s12, s3, s4
 8010600:	ee28 7a07 	vmul.f32	s14, s16, s14
 8010604:	ee37 3a85 	vadd.f32	s6, s15, s10
 8010608:	ee68 4a24 	vmul.f32	s9, s16, s9
 801060c:	ee26 8a08 	vmul.f32	s16, s12, s16
 8010610:	ee37 6a43 	vsub.f32	s12, s14, s6
 8010614:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
 8010618:	eeb4 6ae3 	vcmpe.f32	s12, s7
 801061c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010620:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 8010624:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 8010628:	edcd 5a50 	vstr	s11, [sp, #320]	; 0x140
 801062c:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8010630:	bfc8      	it	gt
 8010632:	ee76 2a22 	vaddgt.f32	s5, s12, s5
 8010636:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801063a:	bfcc      	ite	gt
 801063c:	eef1 3ae2 	vsqrtgt.f32	s7, s5
 8010640:	ed5f 3add 	vldrle	s7, [pc, #-884]	; 80102d0 <kalman_3gyro.constprop.0+0xa80>
 8010644:	ed8d 7a4b 	vstr	s14, [sp, #300]	; 0x12c
 8010648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801064c:	edcd 4a4e 	vstr	s9, [sp, #312]	; 0x138
 8010650:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 8010654:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 8010658:	edcd 1a52 	vstr	s3, [sp, #328]	; 0x148
 801065c:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 8010660:	f100 84e4 	bmi.w	801102c <kalman_3gyro.constprop.0+0x17dc>
 8010664:	bfd8      	it	le
 8010666:	ee63 3aa5 	vmulle.f32	s7, s7, s11
 801066a:	ee37 6a87 	vadd.f32	s12, s15, s14
 801066e:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 8010672:	ee35 6a46 	vsub.f32	s12, s10, s12
 8010676:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801067a:	eeb4 6ac3 	vcmpe.f32	s12, s6
 801067e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010682:	ee63 5aa5 	vmul.f32	s11, s7, s11
 8010686:	ee38 4a44 	vsub.f32	s8, s16, s8
 801068a:	bf84      	itt	hi
 801068c:	eef7 3a00 	vmovhi.f32	s7, #112	; 0x3f800000  1.0
 8010690:	ee36 6a23 	vaddhi.f32	s12, s12, s7
 8010694:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 8010698:	bf8c      	ite	hi
 801069a:	eef1 3ac6 	vsqrthi.f32	s7, s12
 801069e:	eddf 3ae0 	vldrls	s7, [pc, #896]	; 8010a20 <kalman_3gyro.constprop.0+0x11d0>
 80106a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106a6:	f100 84bd 	bmi.w	8011024 <kalman_3gyro.constprop.0+0x17d4>
 80106aa:	bfd8      	it	le
 80106ac:	ee63 3a84 	vmulle.f32	s7, s7, s8
 80106b0:	ee37 7a05 	vadd.f32	s14, s14, s10
 80106b4:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80106b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80106bc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80106c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80106c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106c8:	bf84      	itt	hi
 80106ca:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 80106ce:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 80106d2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80106d6:	bf8c      	ite	hi
 80106d8:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 80106dc:	ed9f 7ad0 	vldrls	s14, [pc, #832]	; 8010a20 <kalman_3gyro.constprop.0+0x11d0>
 80106e0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80106e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106e8:	ee63 3a86 	vmul.f32	s7, s7, s12
 80106ec:	f102 8399 	bmi.w	8012e22 <kalman_3gyro.constprop.0+0x35d2>
 80106f0:	bfd8      	it	le
 80106f2:	ee27 7a26 	vmulle.f32	s14, s14, s13
 80106f6:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 80106fa:	1e53      	subs	r3, r2, #1
 80106fc:	b25b      	sxtb	r3, r3
 80106fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010702:	2b00      	cmp	r3, #0
 8010704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010708:	dd1c      	ble.n	8010744 <kalman_3gyro.constprop.0+0xef4>
 801070a:	3a02      	subs	r2, #2
 801070c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010710:	b2d2      	uxtb	r2, r2
 8010712:	f1ab 000c 	sub.w	r0, fp, #12
 8010716:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801071a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801071e:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 8010722:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8010726:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 801072a:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 801072e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 8010732:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 8010736:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 801073a:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 801073e:	3b0c      	subs	r3, #12
 8010740:	4283      	cmp	r3, r0
 8010742:	d1f0      	bne.n	8010726 <kalman_3gyro.constprop.0+0xed6>
 8010744:	eddd 6a07 	vldr	s13, [sp, #28]
 8010748:	4ab6      	ldr	r2, [pc, #728]	; (8010a24 <kalman_3gyro.constprop.0+0x11d4>)
 801074a:	4bb7      	ldr	r3, [pc, #732]	; (8010a28 <kalman_3gyro.constprop.0+0x11d8>)
 801074c:	ed92 8a00 	vldr	s16, [r2]
 8010750:	ed93 ba00 	vldr	s22, [r3]
 8010754:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 8010758:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801075c:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8010760:	f20d 214b 	addw	r1, sp, #587	; 0x24b
 8010764:	f1c1 0101 	rsb	r1, r1, #1
 8010768:	910c      	str	r1, [sp, #48]	; 0x30
 801076a:	a92d      	add	r1, sp, #180	; 0xb4
 801076c:	e9cd b10a 	strd	fp, r1, [sp, #40]	; 0x28
 8010770:	9123      	str	r1, [sp, #140]	; 0x8c
 8010772:	2100      	movs	r1, #0
 8010774:	9109      	str	r1, [sp, #36]	; 0x24
 8010776:	f50d 7913 	add.w	r9, sp, #588	; 0x24c
 801077a:	f50d 7a64 	add.w	sl, sp, #912	; 0x390
 801077e:	ee75 5aa5 	vadd.f32	s11, s11, s11
 8010782:	ee73 7aa3 	vadd.f32	s15, s7, s7
 8010786:	ee37 7a07 	vadd.f32	s14, s14, s14
 801078a:	ee65 5aa6 	vmul.f32	s11, s11, s13
 801078e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010792:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010796:	edcb 5ad2 	vstr	s11, [fp, #840]	; 0x348
 801079a:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 801079e:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 80107a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80107a8:	3301      	adds	r3, #1
 80107aa:	9309      	str	r3, [sp, #36]	; 0x24
 80107ac:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80107b0:	f20d 234b 	addw	r3, sp, #587	; 0x24b
 80107b4:	18e0      	adds	r0, r4, r3
 80107b6:	f803 0f01 	strb.w	r0, [r3, #1]!
 80107ba:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 80107be:	f841 0b04 	str.w	r0, [r1], #4
 80107c2:	f20d 2069 	addw	r0, sp, #617	; 0x269
 80107c6:	4298      	cmp	r0, r3
 80107c8:	f102 020c 	add.w	r2, r2, #12
 80107cc:	d1f2      	bne.n	80107b4 <kalman_3gyro.constprop.0+0xf64>
 80107ce:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 80107d2:	ed93 7a00 	vldr	s14, [r3]
 80107d6:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 80107da:	edd3 7a00 	vldr	s15, [r3]
 80107de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80107e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e6:	bf84      	itt	hi
 80107e8:	f44f 7381 	movhi.w	r3, #258	; 0x102
 80107ec:	f8a9 3000 	strhhi.w	r3, [r9]
 80107f0:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 80107f4:	ed93 7a00 	vldr	s14, [r3]
 80107f8:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 80107fc:	edd3 7a00 	vldr	s15, [r3]
 8010800:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010808:	bf84      	itt	hi
 801080a:	f44f 7341 	movhi.w	r3, #772	; 0x304
 801080e:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 8010812:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 8010816:	ed93 7a00 	vldr	s14, [r3]
 801081a:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 801081e:	edd3 7a00 	vldr	s15, [r3]
 8010822:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801082a:	bf84      	itt	hi
 801082c:	f240 5306 	movwhi	r3, #1286	; 0x506
 8010830:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 8010834:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 8010838:	ed93 7a00 	vldr	s14, [r3]
 801083c:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 8010840:	edd3 7a00 	vldr	s15, [r3]
 8010844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801084c:	bf84      	itt	hi
 801084e:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 8010852:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 8010856:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 801085a:	ed93 7a00 	vldr	s14, [r3]
 801085e:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 8010862:	edd3 7a00 	vldr	s15, [r3]
 8010866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801086a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801086e:	bf84      	itt	hi
 8010870:	f640 130a 	movwhi	r3, #2314	; 0x90a
 8010874:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 8010878:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 801087c:	ed93 7a00 	vldr	s14, [r3]
 8010880:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 8010884:	edd3 7a00 	vldr	s15, [r3]
 8010888:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801088c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010890:	bf84      	itt	hi
 8010892:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 8010896:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 801089a:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 801089e:	ed93 7a00 	vldr	s14, [r3]
 80108a2:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 80108a6:	edd3 7a00 	vldr	s15, [r3]
 80108aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80108ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b2:	bf84      	itt	hi
 80108b4:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 80108b8:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 80108bc:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 80108c0:	ed93 7a00 	vldr	s14, [r3]
 80108c4:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 80108c8:	edd3 7a00 	vldr	s15, [r3]
 80108cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80108d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d4:	bf84      	itt	hi
 80108d6:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 80108da:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 80108de:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 80108e2:	ed93 7a00 	vldr	s14, [r3]
 80108e6:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 80108ea:	edd3 7a00 	vldr	s15, [r3]
 80108ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80108f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108f6:	bf84      	itt	hi
 80108f8:	f241 1312 	movwhi	r3, #4370	; 0x1112
 80108fc:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 8010900:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 8010904:	ed93 7a00 	vldr	s14, [r3]
 8010908:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 801090c:	edd3 7a00 	vldr	s15, [r3]
 8010910:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010918:	bf84      	itt	hi
 801091a:	f241 3314 	movwhi	r3, #4884	; 0x1314
 801091e:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 8010922:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 8010926:	ed93 7a00 	vldr	s14, [r3]
 801092a:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 801092e:	edd3 7a00 	vldr	s15, [r3]
 8010932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801093a:	bf84      	itt	hi
 801093c:	f241 5316 	movwhi	r3, #5398	; 0x1516
 8010940:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 8010944:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 8010948:	ed93 7a00 	vldr	s14, [r3]
 801094c:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 8010950:	edd3 7a00 	vldr	s15, [r3]
 8010954:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801095c:	bf84      	itt	hi
 801095e:	f241 7318 	movwhi	r3, #5912	; 0x1718
 8010962:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 8010966:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 801096a:	ed93 7a00 	vldr	s14, [r3]
 801096e:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 8010972:	edd3 7a00 	vldr	s15, [r3]
 8010976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801097a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801097e:	bf84      	itt	hi
 8010980:	f641 131a 	movwhi	r3, #6426	; 0x191a
 8010984:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 8010988:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 801098c:	ed93 7a00 	vldr	s14, [r3]
 8010990:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 8010994:	edd3 7a00 	vldr	s15, [r3]
 8010998:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801099c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a0:	bf84      	itt	hi
 80109a2:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 80109a6:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 80109aa:	f20d 5344 	addw	r3, sp, #1348	; 0x544
 80109ae:	ed93 7a00 	vldr	s14, [r3]
 80109b2:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
 80109b6:	edd3 7a00 	vldr	s15, [r3]
 80109ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80109be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109c2:	bf84      	itt	hi
 80109c4:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 80109c8:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 80109cc:	221e      	movs	r2, #30
 80109ce:	2101      	movs	r1, #1
 80109d0:	4650      	mov	r0, sl
 80109d2:	f007 fdb3 	bl	801853c <memset>
 80109d6:	2304      	movs	r3, #4
 80109d8:	9307      	str	r3, [sp, #28]
 80109da:	2302      	movs	r3, #2
 80109dc:	9305      	str	r3, [sp, #20]
 80109de:	9b05      	ldr	r3, [sp, #20]
 80109e0:	9306      	str	r3, [sp, #24]
 80109e2:	1c5f      	adds	r7, r3, #1
 80109e4:	005b      	lsls	r3, r3, #1
 80109e6:	9305      	str	r3, [sp, #20]
 80109e8:	f04f 0b01 	mov.w	fp, #1
 80109ec:	9b05      	ldr	r3, [sp, #20]
 80109ee:	f8cd b004 	str.w	fp, [sp, #4]
 80109f2:	445b      	add	r3, fp
 80109f4:	2b1f      	cmp	r3, #31
 80109f6:	bfa8      	it	ge
 80109f8:	231f      	movge	r3, #31
 80109fa:	465a      	mov	r2, fp
 80109fc:	eba3 0802 	sub.w	r8, r3, r2
 8010a00:	f1b8 0f00 	cmp.w	r8, #0
 8010a04:	469b      	mov	fp, r3
 8010a06:	f107 35ff 	add.w	r5, r7, #4294967295
 8010a0a:	dd44      	ble.n	8010a96 <kalman_3gyro.constprop.0+0x1246>
 8010a0c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010a10:	9302      	str	r3, [sp, #8]
 8010a12:	f1ab 0302 	sub.w	r3, fp, #2
 8010a16:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8010a1a:	4616      	mov	r6, r2
 8010a1c:	2400      	movs	r4, #0
 8010a1e:	e00f      	b.n	8010a40 <kalman_3gyro.constprop.0+0x11f0>
 8010a20:	00000000 	.word	0x00000000
 8010a24:	20001f84 	.word	0x20001f84
 8010a28:	20001f94 	.word	0x20001f94
 8010a2c:	3f333333 	.word	0x3f333333
 8010a30:	3f4ccccd 	.word	0x3f4ccccd
 8010a34:	3f666666 	.word	0x3f666666
 8010a38:	3ecccccc 	.word	0x3ecccccc
 8010a3c:	3dcccccd 	.word	0x3dcccccd
 8010a40:	1e71      	subs	r1, r6, #1
 8010a42:	f919 0005 	ldrsb.w	r0, [r9, r5]
 8010a46:	f919 2001 	ldrsb.w	r2, [r9, r1]
 8010a4a:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8010a4e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010a52:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8010a56:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8010a5a:	ed1e 7a01 	vldr	s14, [lr, #-4]
 8010a5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a66:	f105 0c02 	add.w	ip, r5, #2
 8010a6a:	f105 0801 	add.w	r8, r5, #1
 8010a6e:	f240 81d3 	bls.w	8010e18 <kalman_3gyro.constprop.0+0x15c8>
 8010a72:	45e3      	cmp	fp, ip
 8010a74:	f80a 0004 	strb.w	r0, [sl, r4]
 8010a78:	f000 81bf 	beq.w	8010dfa <kalman_3gyro.constprop.0+0x15aa>
 8010a7c:	4645      	mov	r5, r8
 8010a7e:	9b03      	ldr	r3, [sp, #12]
 8010a80:	3401      	adds	r4, #1
 8010a82:	42a3      	cmp	r3, r4
 8010a84:	dcdc      	bgt.n	8010a40 <kalman_3gyro.constprop.0+0x11f0>
 8010a86:	4698      	mov	r8, r3
 8010a88:	9b01      	ldr	r3, [sp, #4]
 8010a8a:	1e58      	subs	r0, r3, #1
 8010a8c:	4448      	add	r0, r9
 8010a8e:	4642      	mov	r2, r8
 8010a90:	4651      	mov	r1, sl
 8010a92:	f007 fd45 	bl	8018520 <memcpy>
 8010a96:	9b06      	ldr	r3, [sp, #24]
 8010a98:	eb0b 0703 	add.w	r7, fp, r3
 8010a9c:	2f1e      	cmp	r7, #30
 8010a9e:	dda5      	ble.n	80109ec <kalman_3gyro.constprop.0+0x119c>
 8010aa0:	9b07      	ldr	r3, [sp, #28]
 8010aa2:	3b01      	subs	r3, #1
 8010aa4:	9307      	str	r3, [sp, #28]
 8010aa6:	d19a      	bne.n	80109de <kalman_3gyro.constprop.0+0x118e>
 8010aa8:	f999 200e 	ldrsb.w	r2, [r9, #14]
 8010aac:	f999 300f 	ldrsb.w	r3, [r9, #15]
 8010ab0:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8010ab4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010ab8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010abc:	ed52 7a01 	vldr	s15, [r2, #-4]
 8010ac0:	ed13 7a01 	vldr	s14, [r3, #-4]
 8010ac4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010acc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010ad0:	460a      	mov	r2, r1
 8010ad2:	bf4c      	ite	mi
 8010ad4:	2201      	movmi	r2, #1
 8010ad6:	2200      	movpl	r2, #0
 8010ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010adc:	bf4c      	ite	mi
 8010ade:	2301      	movmi	r3, #1
 8010ae0:	2300      	movpl	r3, #0
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	f000 81b4 	beq.w	8010e50 <kalman_3gyro.constprop.0+0x1600>
 8010ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010aec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010af0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010af4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010af6:	ece3 7a01 	vstmia	r3!, {s15}
 8010afa:	930b      	str	r3, [sp, #44]	; 0x2c
 8010afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010afe:	3304      	adds	r3, #4
 8010b00:	930a      	str	r3, [sp, #40]	; 0x28
 8010b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b04:	2b03      	cmp	r3, #3
 8010b06:	f47f ae4c 	bne.w	80107a2 <kalman_3gyro.constprop.0+0xf52>
 8010b0a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8010b0e:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 8010b12:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 8010b16:	ed5f 4a3b 	vldr	s9, [pc, #-236]	; 8010a2c <kalman_3gyro.constprop.0+0x11dc>
 8010b1a:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 8010b1e:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 8010a30 <kalman_3gyro.constprop.0+0x11e0>
 8010b22:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 8010b26:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010b2a:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8010b2e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8010b32:	ee2c 5aa6 	vmul.f32	s10, s25, s13
 8010b36:	eee6 7a06 	vfma.f32	s15, s12, s12
 8010b3a:	ee6d 5a26 	vmul.f32	s11, s26, s13
 8010b3e:	eeb0 6a67 	vmov.f32	s12, s15
 8010b42:	edcd 7a03 	vstr	s15, [sp, #12]
 8010b46:	ee6b 7aa6 	vmul.f32	s15, s23, s13
 8010b4a:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 8010b4e:	eeb1 4ac6 	vsqrt.f32	s8, s12
 8010b52:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8010b56:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 8010b5a:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 8010b5e:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8010b62:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8010b66:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 8010b6a:	eec5 5a27 	vdiv.f32	s11, s10, s15
 8010b6e:	ee2c 5aa4 	vmul.f32	s10, s25, s9
 8010b72:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010b76:	eeab 5aa7 	vfma.f32	s10, s23, s15
 8010b7a:	ee64 7a27 	vmul.f32	s15, s8, s15
 8010b7e:	ee25 7a07 	vmul.f32	s14, s10, s14
 8010b82:	ed8d 5a02 	vstr	s10, [sp, #8]
 8010b86:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 8010b8a:	edcd 5a40 	vstr	s11, [sp, #256]	; 0x100
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	f040 81a4 	bne.w	8010edc <kalman_3gyro.constprop.0+0x168c>
 8010b94:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 8010b98:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 8010b9c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8010ba0:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 8010ba4:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8010ba8:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8010bac:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8010bb0:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 8010bb4:	f8c8 3020 	str.w	r3, [r8, #32]
 8010bb8:	ed88 7a07 	vstr	s14, [r8, #28]
 8010bbc:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 8010bc0:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 8010bc4:	ed93 7a00 	vldr	s14, [r3]
 8010bc8:	ed92 8a00 	vldr	s16, [r2]
 8010bcc:	eddb ea02 	vldr	s29, [fp, #8]
 8010bd0:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 8010bd4:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 8010bd8:	ed92 5a00 	vldr	s10, [r2]
 8010bdc:	ee28 8a07 	vmul.f32	s16, s16, s14
 8010be0:	ed93 7a00 	vldr	s14, [r3]
 8010be4:	eea5 8a07 	vfma.f32	s16, s10, s14
 8010be8:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 8010bec:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 8010bf0:	ed92 5a00 	vldr	s10, [r2]
 8010bf4:	ed93 7a00 	vldr	s14, [r3]
 8010bf8:	eea5 8a07 	vfma.f32	s16, s10, s14
 8010bfc:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 8010c00:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 8010c04:	ed92 5a00 	vldr	s10, [r2]
 8010c08:	ed93 7a00 	vldr	s14, [r3]
 8010c0c:	eea5 8a07 	vfma.f32	s16, s10, s14
 8010c10:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 8010c14:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 8010c18:	ed92 5a00 	vldr	s10, [r2]
 8010c1c:	ed93 7a00 	vldr	s14, [r3]
 8010c20:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8010c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c28:	eea5 8a07 	vfma.f32	s16, s10, s14
 8010c2c:	f340 8232 	ble.w	8011094 <kalman_3gyro.constprop.0+0x1844>
 8010c30:	ed9b 7a30 	vldr	s14, [fp, #192]	; 0xc0
 8010c34:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c3c:	f100 815e 	bmi.w	8010efc <kalman_3gyro.constprop.0+0x16ac>
 8010c40:	ed9b ba31 	vldr	s22, [fp, #196]	; 0xc4
 8010c44:	ed9b 7a4a 	vldr	s14, [fp, #296]	; 0x128
 8010c48:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c50:	f142 84bd 	bpl.w	80135ce <kalman_3gyro.constprop.0+0x3d7e>
 8010c54:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 8010c58:	eeb4 5ac8 	vcmpe.f32	s10, s16
 8010c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c60:	f342 850a 	ble.w	8013678 <kalman_3gyro.constprop.0+0x3e28>
 8010c64:	eddb 2a4c 	vldr	s5, [fp, #304]	; 0x130
 8010c68:	eef4 2ac8 	vcmpe.f32	s5, s16
 8010c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c70:	f342 86c5 	ble.w	80139fe <kalman_3gyro.constprop.0+0x41ae>
 8010c74:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 8010c78:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 8010c7c:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 8010c80:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010c84:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010c88:	ee32 7ac7 	vsub.f32	s14, s5, s14
 8010c8c:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010c90:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010c94:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c9c:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010ca0:	f202 86c5 	bhi.w	8013a2e <kalman_3gyro.constprop.0+0x41de>
 8010ca4:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 8010ca8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cb0:	f342 86c5 	ble.w	8013a3e <kalman_3gyro.constprop.0+0x41ee>
 8010cb4:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 8010cb8:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 8010cbc:	ee38 3a64 	vsub.f32	s6, s16, s9
 8010cc0:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010cc4:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010cc8:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010ccc:	ee84 ea87 	vdiv.f32	s28, s9, s14
 8010cd0:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010cd4:	ed9b 7a52 	vldr	s14, [fp, #328]	; 0x148
 8010cd8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce0:	f202 86c5 	bhi.w	8013a6e <kalman_3gyro.constprop.0+0x421e>
 8010ce4:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 8010ce8:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cf0:	f343 8371 	ble.w	80143d6 <kalman_3gyro.constprop.0+0x4b86>
 8010cf4:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 8010cf8:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 8010cfc:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010d00:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010d04:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010d08:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010d0c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010d10:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010d14:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 8010d18:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d20:	f202 86c5 	bhi.w	8013aae <kalman_3gyro.constprop.0+0x425e>
 8010d24:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 8010d28:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d30:	f343 8359 	ble.w	80143e6 <kalman_3gyro.constprop.0+0x4b96>
 8010d34:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 8010d38:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 8010d3c:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010d40:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010d44:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010d48:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010d4c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010d50:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010d54:	ed9b 7a5a 	vldr	s14, [fp, #360]	; 0x168
 8010d58:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d60:	f2c2 86c5 	blt.w	8013aee <kalman_3gyro.constprop.0+0x429e>
 8010d64:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 8010d68:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d70:	f143 832d 	bpl.w	80143ce <kalman_3gyro.constprop.0+0x4b7e>
 8010d74:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 8010d78:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 8010d7c:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010d80:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010d84:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010d88:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010d8c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010d90:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010d94:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 8010d98:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010da0:	f2c2 86c5 	blt.w	8013b2e <kalman_3gyro.constprop.0+0x42de>
 8010da4:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 8010da8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db0:	f142 86c5 	bpl.w	8013b3e <kalman_3gyro.constprop.0+0x42ee>
 8010db4:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 8010db8:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 8010dbc:	ee78 3a64 	vsub.f32	s7, s16, s9
 8010dc0:	ee35 5a44 	vsub.f32	s10, s10, s8
 8010dc4:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010dc8:	ee25 5a23 	vmul.f32	s10, s10, s7
 8010dcc:	ee85 ea07 	vdiv.f32	s28, s10, s14
 8010dd0:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010dd4:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8010dd8:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8010ddc:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010de0:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8010de4:	e15a      	b.n	801109c <kalman_3gyro.constprop.0+0x184c>
 8010de6:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 8010a34 <kalman_3gyro.constprop.0+0x11e4>
 8010dea:	ed5f aaed 	vldr	s21, [pc, #-948]	; 8010a38 <kalman_3gyro.constprop.0+0x11e8>
 8010dee:	ed1f 9aed 	vldr	s18, [pc, #-948]	; 8010a3c <kalman_3gyro.constprop.0+0x11ec>
 8010df2:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 8010df6:	f7fe bedd 	b.w	800fbb4 <kalman_3gyro.constprop.0+0x364>
 8010dfa:	1c60      	adds	r0, r4, #1
 8010dfc:	42be      	cmp	r6, r7
 8010dfe:	eba7 0206 	sub.w	r2, r7, r6
 8010e02:	4449      	add	r1, r9
 8010e04:	4450      	add	r0, sl
 8010e06:	f6bf ae39 	bge.w	8010a7c <kalman_3gyro.constprop.0+0x122c>
 8010e0a:	443c      	add	r4, r7
 8010e0c:	1ba4      	subs	r4, r4, r6
 8010e0e:	f007 fb87 	bl	8018520 <memcpy>
 8010e12:	463e      	mov	r6, r7
 8010e14:	4645      	mov	r5, r8
 8010e16:	e632      	b.n	8010a7e <kalman_3gyro.constprop.0+0x122e>
 8010e18:	3601      	adds	r6, #1
 8010e1a:	42be      	cmp	r6, r7
 8010e1c:	f80a 2004 	strb.w	r2, [sl, r4]
 8010e20:	f47f ae2d 	bne.w	8010a7e <kalman_3gyro.constprop.0+0x122e>
 8010e24:	9b02      	ldr	r3, [sp, #8]
 8010e26:	f105 0801 	add.w	r8, r5, #1
 8010e2a:	1c60      	adds	r0, r4, #1
 8010e2c:	45c3      	cmp	fp, r8
 8010e2e:	eba3 0205 	sub.w	r2, r3, r5
 8010e32:	eb09 0105 	add.w	r1, r9, r5
 8010e36:	4450      	add	r0, sl
 8010e38:	f77f ae21 	ble.w	8010a7e <kalman_3gyro.constprop.0+0x122e>
 8010e3c:	f007 fb70 	bl	8018520 <memcpy>
 8010e40:	9b02      	ldr	r3, [sp, #8]
 8010e42:	441c      	add	r4, r3
 8010e44:	9b04      	ldr	r3, [sp, #16]
 8010e46:	1b5a      	subs	r2, r3, r5
 8010e48:	1b64      	subs	r4, r4, r5
 8010e4a:	eb02 0508 	add.w	r5, r2, r8
 8010e4e:	e616      	b.n	8010a7e <kalman_3gyro.constprop.0+0x122e>
 8010e50:	eef4 7a48 	vcmp.f32	s15, s16
 8010e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e58:	f43f ae46 	beq.w	8010ae8 <kalman_3gyro.constprop.0+0x1298>
 8010e5c:	eef4 7a4b 	vcmp.f32	s15, s22
 8010e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e64:	f43f ae40 	beq.w	8010ae8 <kalman_3gyro.constprop.0+0x1298>
 8010e68:	eeb4 7a48 	vcmp.f32	s14, s16
 8010e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e70:	f43f ae3a 	beq.w	8010ae8 <kalman_3gyro.constprop.0+0x1298>
 8010e74:	eeb4 7a4b 	vcmp.f32	s14, s22
 8010e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e7c:	f43f ae34 	beq.w	8010ae8 <kalman_3gyro.constprop.0+0x1298>
 8010e80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010e84:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010e88:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010e8c:	e632      	b.n	8010af4 <kalman_3gyro.constprop.0+0x12a4>
 8010e8e:	2304      	movs	r3, #4
 8010e90:	9301      	str	r3, [sp, #4]
 8010e92:	2200      	movs	r2, #0
 8010e94:	461c      	mov	r4, r3
 8010e96:	2307      	movs	r3, #7
 8010e98:	4694      	mov	ip, r2
 8010e9a:	2106      	movs	r1, #6
 8010e9c:	9302      	str	r3, [sp, #8]
 8010e9e:	2603      	movs	r6, #3
 8010ea0:	f04f 0a01 	mov.w	sl, #1
 8010ea4:	f7ff ba5c 	b.w	8010360 <kalman_3gyro.constprop.0+0xb10>
 8010ea8:	9a08      	ldr	r2, [sp, #32]
 8010eaa:	eddf 7a62 	vldr	s15, [pc, #392]	; 8011034 <kalman_3gyro.constprop.0+0x17e4>
 8010eae:	eddf 5a62 	vldr	s11, [pc, #392]	; 8011038 <kalman_3gyro.constprop.0+0x17e8>
 8010eb2:	ed9f 5a62 	vldr	s10, [pc, #392]	; 801103c <kalman_3gyro.constprop.0+0x17ec>
 8010eb6:	4b62      	ldr	r3, [pc, #392]	; (8011040 <kalman_3gyro.constprop.0+0x17f0>)
 8010eb8:	edc2 7a00 	vstr	s15, [r2]
 8010ebc:	eeb0 4a65 	vmov.f32	s8, s11
 8010ec0:	eeb0 3a67 	vmov.f32	s6, s15
 8010ec4:	eef0 4a45 	vmov.f32	s9, s10
 8010ec8:	6053      	str	r3, [r2, #4]
 8010eca:	6093      	str	r3, [r2, #8]
 8010ecc:	f7fe bd3e 	b.w	800f94c <kalman_3gyro.constprop.0+0xfc>
 8010ed0:	2308      	movs	r3, #8
 8010ed2:	2005      	movs	r0, #5
 8010ed4:	f04f 0802 	mov.w	r8, #2
 8010ed8:	f7ff ba5c 	b.w	8010394 <kalman_3gyro.constprop.0+0xb44>
 8010edc:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 8010ee6:	ed88 7a07 	vstr	s14, [r8, #28]
 8010eea:	ed88 7a08 	vstr	s14, [r8, #32]
 8010eee:	ed88 7a09 	vstr	s14, [r8, #36]	; 0x24
 8010ef2:	ed88 7a0a 	vstr	s14, [r8, #40]	; 0x28
 8010ef6:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
 8010efa:	e65f      	b.n	8010bbc <kalman_3gyro.constprop.0+0x136c>
 8010efc:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 8010f00:	eeb4 5ac8 	vcmpe.f32	s10, s16
 8010f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f08:	f342 83b2 	ble.w	8013670 <kalman_3gyro.constprop.0+0x3e20>
 8010f0c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f14:	f2c2 86e9 	blt.w	8013cea <kalman_3gyro.constprop.0+0x449a>
 8010f18:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 8010f1c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f24:	f342 8712 	ble.w	8013d4c <kalman_3gyro.constprop.0+0x44fc>
 8010f28:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 8010f2c:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 8010f30:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010f34:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f38:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010f3c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010f40:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010f44:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010f48:	f002 bed8 	b.w	8013cfc <kalman_3gyro.constprop.0+0x44ac>
 8010f4c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010f50:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f58:	f342 84bd 	ble.w	80138d6 <kalman_3gyro.constprop.0+0x4086>
 8010f5c:	ed9f 8a39 	vldr	s16, [pc, #228]	; 8011044 <kalman_3gyro.constprop.0+0x17f4>
 8010f60:	f7ff b993 	b.w	801028a <kalman_3gyro.constprop.0+0xa3a>
 8010f64:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010f68:	eeb4 bac7 	vcmpe.f32	s22, s14
 8010f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f70:	f342 849f 	ble.w	80138b2 <kalman_3gyro.constprop.0+0x4062>
 8010f74:	ed9f ba33 	vldr	s22, [pc, #204]	; 8011044 <kalman_3gyro.constprop.0+0x17f4>
 8010f78:	f7ff b964 	b.w	8010244 <kalman_3gyro.constprop.0+0x9f4>
 8010f7c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010f80:	eef4 dac7 	vcmpe.f32	s27, s14
 8010f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f88:	f342 84b7 	ble.w	80138fa <kalman_3gyro.constprop.0+0x40aa>
 8010f8c:	eddf da2d 	vldr	s27, [pc, #180]	; 8011044 <kalman_3gyro.constprop.0+0x17f4>
 8010f90:	f7ff b935 	b.w	80101fe <kalman_3gyro.constprop.0+0x9ae>
 8010f94:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010f98:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa0:	f342 8475 	ble.w	801388e <kalman_3gyro.constprop.0+0x403e>
 8010fa4:	ed9f 8a27 	vldr	s16, [pc, #156]	; 8011044 <kalman_3gyro.constprop.0+0x17f4>
 8010fa8:	f7ff b8c3 	b.w	8010132 <kalman_3gyro.constprop.0+0x8e2>
 8010fac:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010fb0:	eeb4 bac7 	vcmpe.f32	s22, s14
 8010fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb8:	f342 83a0 	ble.w	80136fc <kalman_3gyro.constprop.0+0x3eac>
 8010fbc:	ed9f ba21 	vldr	s22, [pc, #132]	; 8011044 <kalman_3gyro.constprop.0+0x17f4>
 8010fc0:	f7ff b894 	b.w	80100ec <kalman_3gyro.constprop.0+0x89c>
 8010fc4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010fc8:	eef4 dac7 	vcmpe.f32	s27, s14
 8010fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd0:	f342 8382 	ble.w	80136d8 <kalman_3gyro.constprop.0+0x3e88>
 8010fd4:	eddf da1b 	vldr	s27, [pc, #108]	; 8011044 <kalman_3gyro.constprop.0+0x17f4>
 8010fd8:	f7ff b865 	b.w	80100a6 <kalman_3gyro.constprop.0+0x856>
 8010fdc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010fe0:	eef4 dac7 	vcmpe.f32	s27, s14
 8010fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe8:	f342 8364 	ble.w	80136b4 <kalman_3gyro.constprop.0+0x3e64>
 8010fec:	eddf da15 	vldr	s27, [pc, #84]	; 8011044 <kalman_3gyro.constprop.0+0x17f4>
 8010ff0:	f7fe bff3 	b.w	800ffda <kalman_3gyro.constprop.0+0x78a>
 8010ff4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010ff8:	eeb4 eac7 	vcmpe.f32	s28, s14
 8010ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011000:	f342 8346 	ble.w	8013690 <kalman_3gyro.constprop.0+0x3e40>
 8011004:	ed9f ea0f 	vldr	s28, [pc, #60]	; 8011044 <kalman_3gyro.constprop.0+0x17f4>
 8011008:	f7fe bfc4 	b.w	800ff94 <kalman_3gyro.constprop.0+0x744>
 801100c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011010:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011018:	f342 839e 	ble.w	8013758 <kalman_3gyro.constprop.0+0x3f08>
 801101c:	ed9f 8a09 	vldr	s16, [pc, #36]	; 8011044 <kalman_3gyro.constprop.0+0x17f4>
 8011020:	f7fe bf95 	b.w	800ff4e <kalman_3gyro.constprop.0+0x6fe>
 8011024:	eef1 3a63 	vneg.f32	s7, s7
 8011028:	f7ff bb42 	b.w	80106b0 <kalman_3gyro.constprop.0+0xe60>
 801102c:	eef1 3a63 	vneg.f32	s7, s7
 8011030:	f7ff bb1b 	b.w	801066a <kalman_3gyro.constprop.0+0xe1a>
 8011034:	00000000 	.word	0x00000000
 8011038:	3fb33333 	.word	0x3fb33333
 801103c:	bfb33333 	.word	0xbfb33333
 8011040:	3f333333 	.word	0x3f333333
 8011044:	80000000 	.word	0x80000000
 8011048:	3fb77778 	.word	0x3fb77778
 801104c:	3f99999a 	.word	0x3f99999a
 8011050:	3f4ccccd 	.word	0x3f4ccccd
 8011054:	42d40000 	.word	0x42d40000
 8011058:	46979000 	.word	0x46979000
 801105c:	4415c000 	.word	0x4415c000
 8011060:	3ba3d70a 	.word	0x3ba3d70a
 8011064:	3b449ba6 	.word	0x3b449ba6
 8011068:	3c75c28f 	.word	0x3c75c28f
 801106c:	3c23d70a 	.word	0x3c23d70a
 8011070:	3d4cccc0 	.word	0x3d4cccc0
 8011074:	43480000 	.word	0x43480000
 8011078:	3d4ccccd 	.word	0x3d4ccccd
 801107c:	3cf5c28f 	.word	0x3cf5c28f
 8011080:	3eb33334 	.word	0x3eb33334
 8011084:	3f933333 	.word	0x3f933333
 8011088:	4247ffff 	.word	0x4247ffff
 801108c:	3dcccccd 	.word	0x3dcccccd
 8011090:	3e4ccccd 	.word	0x3e4ccccd
 8011094:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 8011098:	eeb0 ba4e 	vmov.f32	s22, s28
 801109c:	eddb da74 	vldr	s27, [fp, #464]	; 0x1d0
 80110a0:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 80110a4:	ed5f 4a07 	vldr	s9, [pc, #-28]	; 801108c <kalman_3gyro.constprop.0+0x183c>
 80110a8:	ee79 da6d 	vsub.f32	s27, s18, s27
 80110ac:	ee3c 5a47 	vsub.f32	s10, s24, s14
 80110b0:	eef0 daed 	vabs.f32	s27, s27
 80110b4:	eeb0 5ac5 	vabs.f32	s10, s10
 80110b8:	ee35 5a2d 	vadd.f32	s10, s10, s27
 80110bc:	eeb4 5ae4 	vcmpe.f32	s10, s9
 80110c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c4:	f340 821c 	ble.w	8011500 <kalman_3gyro.constprop.0+0x1cb0>
 80110c8:	ed1f 4a21 	vldr	s8, [pc, #-132]	; 8011048 <kalman_3gyro.constprop.0+0x17f8>
 80110cc:	eeb4 5ac4 	vcmpe.f32	s10, s8
 80110d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110d4:	f302 828b 	bgt.w	80135ee <kalman_3gyro.constprop.0+0x3d9e>
 80110d8:	ee35 5a64 	vsub.f32	s10, s10, s9
 80110dc:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 80110e0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80110e4:	eee5 4a04 	vfma.f32	s9, s10, s8
 80110e8:	eeb0 5a64 	vmov.f32	s10, s9
 80110ec:	eeb4 5aea 	vcmpe.f32	s10, s21
 80110f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110f4:	f89b 3000 	ldrb.w	r3, [fp]
 80110f8:	bfb8      	it	lt
 80110fa:	eeb0 5a6a 	vmovlt.f32	s10, s21
 80110fe:	ed8d 5a01 	vstr	s10, [sp, #4]
 8011102:	2b00      	cmp	r3, #0
 8011104:	f000 81f9 	beq.w	80114fa <kalman_3gyro.constprop.0+0x1caa>
 8011108:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801110c:	2b00      	cmp	r3, #0
 801110e:	f000 81de 	beq.w	80114ce <kalman_3gyro.constprop.0+0x1c7e>
 8011112:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 8011116:	2300      	movs	r3, #0
 8011118:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 801111c:	eeb0 6a61 	vmov.f32	s12, s3
 8011120:	eea7 6a47 	vfms.f32	s12, s14, s14
 8011124:	9908      	ldr	r1, [sp, #32]
 8011126:	eddd 3a37 	vldr	s7, [sp, #220]	; 0xdc
 801112a:	ed9d 5a38 	vldr	s10, [sp, #224]	; 0xe0
 801112e:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 8011132:	eddd 6a39 	vldr	s13, [sp, #228]	; 0xe4
 8011136:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 801113a:	eef1 0ac6 	vsqrt.f32	s1, s12
 801113e:	2200      	movs	r2, #0
 8011140:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 8011144:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 8011148:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 801114c:	9233      	str	r2, [sp, #204]	; 0xcc
 801114e:	ee23 6aa3 	vmul.f32	s12, s7, s7
 8011152:	ee23 4a85 	vmul.f32	s8, s7, s10
 8011156:	ee36 2a06 	vadd.f32	s4, s12, s12
 801115a:	ee25 6a05 	vmul.f32	s12, s10, s10
 801115e:	ee22 1aa2 	vmul.f32	s2, s5, s5
 8011162:	ee36 6a06 	vadd.f32	s12, s12, s12
 8011166:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801116a:	ee63 4aa6 	vmul.f32	s9, s7, s13
 801116e:	ee34 4a04 	vadd.f32	s8, s8, s8
 8011172:	eeb0 3a42 	vmov.f32	s6, s4
 8011176:	ee22 0aa6 	vmul.f32	s0, s5, s13
 801117a:	eea1 3a25 	vfma.f32	s6, s2, s11
 801117e:	eef0 aa46 	vmov.f32	s21, s12
 8011182:	ee62 3aa3 	vmul.f32	s7, s5, s7
 8011186:	eee1 aa25 	vfma.f32	s21, s2, s11
 801118a:	ee74 4aa4 	vadd.f32	s9, s9, s9
 801118e:	ee65 6a26 	vmul.f32	s13, s10, s13
 8011192:	ee22 5a85 	vmul.f32	s10, s5, s10
 8011196:	eef0 2a44 	vmov.f32	s5, s8
 801119a:	eee0 2a25 	vfma.f32	s5, s0, s11
 801119e:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80111a2:	eeb0 fa64 	vmov.f32	s30, s9
 80111a6:	eea0 4a65 	vfms.f32	s8, s0, s11
 80111aa:	ee71 fac3 	vsub.f32	s31, s3, s6
 80111ae:	ee95 fa25 	vfnms.f32	s30, s10, s11
 80111b2:	eeb0 1a6a 	vmov.f32	s2, s21
 80111b6:	eef0 aa66 	vmov.f32	s21, s13
 80111ba:	eee3 aaa5 	vfma.f32	s21, s7, s11
 80111be:	ee31 1ac1 	vsub.f32	s2, s3, s2
 80111c2:	ee2f 0a87 	vmul.f32	s0, s31, s14
 80111c6:	ee32 6a06 	vadd.f32	s12, s4, s12
 80111ca:	ee22 2a87 	vmul.f32	s4, s5, s14
 80111ce:	eea0 0a84 	vfma.f32	s0, s1, s8
 80111d2:	eea0 2a81 	vfma.f32	s4, s1, s2
 80111d6:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80111da:	eed3 6aa5 	vfnms.f32	s13, s7, s11
 80111de:	eef0 3a64 	vmov.f32	s7, s9
 80111e2:	eee5 3a65 	vfms.f32	s7, s10, s11
 80111e6:	eee5 4a25 	vfma.f32	s9, s10, s11
 80111ea:	ee33 3a61 	vsub.f32	s6, s6, s3
 80111ee:	edd1 5a02 	vldr	s11, [r1, #8]
 80111f2:	ed91 5a05 	vldr	s10, [r1, #20]
 80111f6:	edcd fa53 	vstr	s31, [sp, #332]	; 0x14c
 80111fa:	ee31 6ac6 	vsub.f32	s12, s3, s12
 80111fe:	eea0 7aaa 	vfma.f32	s14, s1, s21
 8011202:	edd1 1a01 	vldr	s3, [r1, #4]
 8011206:	edd1 fa00 	vldr	s31, [r1]
 801120a:	ed8d 4a52 	vstr	s8, [sp, #328]	; 0x148
 801120e:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8011212:	ee31 2ac2 	vsub.f32	s4, s3, s4
 8011216:	edd1 5a03 	vldr	s11, [r1, #12]
 801121a:	edd1 1a04 	vldr	s3, [r1, #16]
 801121e:	ed1f 4a75 	vldr	s8, [pc, #-468]	; 801104c <kalman_3gyro.constprop.0+0x17fc>
 8011222:	edcd 2a50 	vstr	s5, [sp, #320]	; 0x140
 8011226:	ee33 3a05 	vadd.f32	s6, s6, s10
 801122a:	ee71 2ae2 	vsub.f32	s5, s3, s5
 801122e:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8011232:	ee3f 7ac7 	vsub.f32	s14, s31, s14
 8011236:	eef4 7ac4 	vcmpe.f32	s15, s8
 801123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801123e:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
 8011242:	ed8d 0a7d 	vstr	s0, [sp, #500]	; 0x1f4
 8011246:	ed8d 1a4f 	vstr	s2, [sp, #316]	; 0x13c
 801124a:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 801124e:	ed8d 2a7c 	vstr	s4, [sp, #496]	; 0x1f0
 8011252:	ed8d fa4d 	vstr	s30, [sp, #308]	; 0x134
 8011256:	edcd aa4c 	vstr	s21, [sp, #304]	; 0x130
 801125a:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 801125e:	ed8d 7a7b 	vstr	s14, [sp, #492]	; 0x1ec
 8011262:	edcd 2a2e 	vstr	s5, [sp, #184]	; 0xb8
 8011266:	edcd 2a7f 	vstr	s5, [sp, #508]	; 0x1fc
 801126a:	edcd 4a51 	vstr	s9, [sp, #324]	; 0x144
 801126e:	edcd 3a2d 	vstr	s7, [sp, #180]	; 0xb4
 8011272:	edcd 3a7e 	vstr	s7, [sp, #504]	; 0x1f8
 8011276:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 801127a:	ed8d 3a80 	vstr	s6, [sp, #512]	; 0x200
 801127e:	ed8d ca84 	vstr	s24, [sp, #528]	; 0x210
 8011282:	ed8d aa85 	vstr	s20, [sp, #532]	; 0x214
 8011286:	ed8d 9a86 	vstr	s18, [sp, #536]	; 0x218
 801128a:	d506      	bpl.n	801129a <kalman_3gyro.constprop.0+0x1a4a>
 801128c:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 8011050 <kalman_3gyro.constprop.0+0x1800>
 8011290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011298:	dc01      	bgt.n	801129e <kalman_3gyro.constprop.0+0x1a4e>
 801129a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801129e:	ee7a 7a67 	vsub.f32	s15, s20, s15
 80112a2:	eef0 7ae7 	vabs.f32	s15, s15
 80112a6:	ee77 7aab 	vadd.f32	s15, s15, s23
 80112aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80112ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112b2:	f340 8141 	ble.w	8011538 <kalman_3gyro.constprop.0+0x1ce8>
 80112b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c2:	f142 8198 	bpl.w	80135f6 <kalman_3gyro.constprop.0+0x3da6>
 80112c6:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 8011060 <kalman_3gyro.constprop.0+0x1810>
 80112ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112ce:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 801106c <kalman_3gyro.constprop.0+0x181c>
 80112d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112da:	f102 8221 	bmi.w	8013720 <kalman_3gyro.constprop.0+0x3ed0>
 80112de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e2:	f142 8221 	bpl.w	8013728 <kalman_3gyro.constprop.0+0x3ed8>
 80112e6:	ed1f 7aa0 	vldr	s14, [pc, #-640]	; 8011068 <kalman_3gyro.constprop.0+0x1818>
 80112ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112f2:	f282 84a4 	bge.w	8013c3e <kalman_3gyro.constprop.0+0x43ee>
 80112f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112fa:	ed5f 6aa0 	vldr	s13, [pc, #-640]	; 801107c <kalman_3gyro.constprop.0+0x182c>
 80112fe:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011306:	f2c2 84b0 	blt.w	8013c6a <kalman_3gyro.constprop.0+0x441a>
 801130a:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 8011078 <kalman_3gyro.constprop.0+0x1828>
 801130e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011316:	f142 84b0 	bpl.w	8013c7a <kalman_3gyro.constprop.0+0x442a>
 801131a:	ed5f 6aa8 	vldr	s13, [pc, #-672]	; 801107c <kalman_3gyro.constprop.0+0x182c>
 801131e:	ed1f 6aa6 	vldr	s12, [pc, #-664]	; 8011088 <kalman_3gyro.constprop.0+0x1838>
 8011322:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011326:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801132a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801132e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011332:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011336:	ed5f 6aab 	vldr	s13, [pc, #-684]	; 801108c <kalman_3gyro.constprop.0+0x183c>
 801133a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011342:	f2c2 84b0 	blt.w	8013ca6 <kalman_3gyro.constprop.0+0x4456>
 8011346:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 8011090 <kalman_3gyro.constprop.0+0x1840>
 801134a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011352:	f142 84b0 	bpl.w	8013cb6 <kalman_3gyro.constprop.0+0x4466>
 8011356:	ed5f 6ab3 	vldr	s13, [pc, #-716]	; 801108c <kalman_3gyro.constprop.0+0x183c>
 801135a:	ed1f 7ac2 	vldr	s14, [pc, #-776]	; 8011054 <kalman_3gyro.constprop.0+0x1804>
 801135e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011362:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8011366:	ee66 6a87 	vmul.f32	s13, s13, s14
 801136a:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 801136e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011372:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011376:	eef4 7ae6 	vcmpe.f32	s15, s13
 801137a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801137e:	db0d      	blt.n	801139c <kalman_3gyro.constprop.0+0x1b4c>
 8011380:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011384:	ed1f 6acc 	vldr	s12, [pc, #-816]	; 8011058 <kalman_3gyro.constprop.0+0x1808>
 8011388:	ed1f 7acc 	vldr	s14, [pc, #-816]	; 801105c <kalman_3gyro.constprop.0+0x180c>
 801138c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011390:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011394:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011398:	eea6 7a86 	vfma.f32	s14, s13, s12
 801139c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80113a0:	ee77 6a26 	vadd.f32	s13, s14, s13
 80113a4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80113a8:	eec6 4a26 	vdiv.f32	s9, s12, s13
 80113ac:	ed1f 6ad2 	vldr	s12, [pc, #-840]	; 8011068 <kalman_3gyro.constprop.0+0x1818>
 80113b0:	ed5f 3ad5 	vldr	s7, [pc, #-852]	; 8011060 <kalman_3gyro.constprop.0+0x1810>
 80113b4:	ed5f 6ad3 	vldr	s13, [pc, #-844]	; 801106c <kalman_3gyro.constprop.0+0x181c>
 80113b8:	ed1f 4ad6 	vldr	s8, [pc, #-856]	; 8011064 <kalman_3gyro.constprop.0+0x1814>
 80113bc:	eef4 4ac6 	vcmpe.f32	s9, s12
 80113c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113c4:	eef4 7ae3 	vcmpe.f32	s15, s7
 80113c8:	bfb8      	it	lt
 80113ca:	eef0 4a46 	vmovlt.f32	s9, s12
 80113ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d2:	ee24 4a84 	vmul.f32	s8, s9, s8
 80113d6:	ee24 6aa6 	vmul.f32	s12, s9, s13
 80113da:	eef4 7ae6 	vcmpe.f32	s15, s13
 80113de:	f142 841f 	bpl.w	8013c20 <kalman_3gyro.constprop.0+0x43d0>
 80113e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e6:	f2c2 841f 	blt.w	8013c28 <kalman_3gyro.constprop.0+0x43d8>
 80113ea:	ed5f 6ae1 	vldr	s13, [pc, #-900]	; 8011068 <kalman_3gyro.constprop.0+0x1818>
 80113ee:	eef4 7ae6 	vcmpe.f32	s15, s13
 80113f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f6:	f142 83ba 	bpl.w	8013b6e <kalman_3gyro.constprop.0+0x431e>
 80113fa:	ed5f 3ae4 	vldr	s7, [pc, #-912]	; 801106c <kalman_3gyro.constprop.0+0x181c>
 80113fe:	ed5f 2ae4 	vldr	s5, [pc, #-912]	; 8011070 <kalman_3gyro.constprop.0+0x1820>
 8011402:	ed1f 3ae4 	vldr	s6, [pc, #-912]	; 8011074 <kalman_3gyro.constprop.0+0x1824>
 8011406:	ee77 3ae3 	vsub.f32	s7, s15, s7
 801140a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801140e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8011412:	eee3 6a83 	vfma.f32	s13, s7, s6
 8011416:	eeb0 ca66 	vmov.f32	s24, s13
 801141a:	ed5f 6ae8 	vldr	s13, [pc, #-928]	; 801107c <kalman_3gyro.constprop.0+0x182c>
 801141e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011426:	f2c2 83ba 	blt.w	8013b9e <kalman_3gyro.constprop.0+0x434e>
 801142a:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 8011078 <kalman_3gyro.constprop.0+0x1828>
 801142e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011436:	f142 83ba 	bpl.w	8013bae <kalman_3gyro.constprop.0+0x435e>
 801143a:	ed5f 3af0 	vldr	s7, [pc, #-960]	; 801107c <kalman_3gyro.constprop.0+0x182c>
 801143e:	ed5f 2af0 	vldr	s5, [pc, #-960]	; 8011080 <kalman_3gyro.constprop.0+0x1830>
 8011442:	ed1f 3aef 	vldr	s6, [pc, #-956]	; 8011088 <kalman_3gyro.constprop.0+0x1838>
 8011446:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 8011084 <kalman_3gyro.constprop.0+0x1834>
 801144a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 801144e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8011452:	eee3 6a83 	vfma.f32	s13, s7, s6
 8011456:	eeb0 ca66 	vmov.f32	s24, s13
 801145a:	ed5f 6af4 	vldr	s13, [pc, #-976]	; 801108c <kalman_3gyro.constprop.0+0x183c>
 801145e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011466:	f2c2 83ba 	blt.w	8013bde <kalman_3gyro.constprop.0+0x438e>
 801146a:	ed5f 6af7 	vldr	s13, [pc, #-988]	; 8011090 <kalman_3gyro.constprop.0+0x1840>
 801146e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011476:	f142 83ba 	bpl.w	8013bee <kalman_3gyro.constprop.0+0x439e>
 801147a:	eddf 3a23 	vldr	s7, [pc, #140]	; 8011508 <kalman_3gyro.constprop.0+0x1cb8>
 801147e:	eddf 6a23 	vldr	s13, [pc, #140]	; 801150c <kalman_3gyro.constprop.0+0x1cbc>
 8011482:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8011486:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
 801148a:	ee63 3aa6 	vmul.f32	s7, s7, s13
 801148e:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 8011492:	eee3 6a83 	vfma.f32	s13, s7, s6
 8011496:	eeb0 ca66 	vmov.f32	s24, s13
 801149a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801149e:	eef4 7ae6 	vcmpe.f32	s15, s13
 80114a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114a6:	f2c2 80b0 	blt.w	801360a <kalman_3gyro.constprop.0+0x3dba>
 80114aa:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80114ae:	ee37 3ae3 	vsub.f32	s6, s15, s7
 80114b2:	eddf 3a17 	vldr	s7, [pc, #92]	; 8011510 <kalman_3gyro.constprop.0+0x1cc0>
 80114b6:	eddf 6a17 	vldr	s13, [pc, #92]	; 8011514 <kalman_3gyro.constprop.0+0x1cc4>
 80114ba:	ee63 3a23 	vmul.f32	s7, s6, s7
 80114be:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 80114c2:	eee3 6a83 	vfma.f32	s13, s7, s6
 80114c6:	eeb0 ca66 	vmov.f32	s24, s13
 80114ca:	f002 b89e 	b.w	801360a <kalman_3gyro.constprop.0+0x3dba>
 80114ce:	ee76 6a26 	vadd.f32	s13, s12, s13
 80114d2:	ed9b 6a05 	vldr	s12, [fp, #20]
 80114d6:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80114da:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 80114de:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80114e2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80114e6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80114ea:	ee66 6a26 	vmul.f32	s13, s12, s13
 80114ee:	eef4 7ae6 	vcmpe.f32	s15, s13
 80114f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114f6:	f102 8246 	bmi.w	8013986 <kalman_3gyro.constprop.0+0x4136>
 80114fa:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 80114fe:	e60b      	b.n	8011118 <kalman_3gyro.constprop.0+0x18c8>
 8011500:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8011504:	e5f2      	b.n	80110ec <kalman_3gyro.constprop.0+0x189c>
 8011506:	bf00      	nop
 8011508:	3dcccccd 	.word	0x3dcccccd
 801150c:	410c0000 	.word	0x410c0000
 8011510:	42c80000 	.word	0x42c80000
 8011514:	424a0000 	.word	0x424a0000
 8011518:	3c23d70a 	.word	0x3c23d70a
 801151c:	3b449ba6 	.word	0x3b449ba6
 8011520:	3fb33333 	.word	0x3fb33333
 8011524:	3ecccccd 	.word	0x3ecccccd
 8011528:	3f8f5c29 	.word	0x3f8f5c29
 801152c:	3f59999a 	.word	0x3f59999a
 8011530:	3e4ccccd 	.word	0x3e4ccccd
 8011534:	3f99999a 	.word	0x3f99999a
 8011538:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 801153c:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 8011518 <kalman_3gyro.constprop.0+0x1cc8>
 8011540:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 801151c <kalman_3gyro.constprop.0+0x1ccc>
 8011544:	eeb0 7a4c 	vmov.f32	s14, s24
 8011548:	eef0 4a4c 	vmov.f32	s9, s24
 801154c:	eddd 6a01 	vldr	s13, [sp, #4]
 8011550:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 8011554:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 8011558:	ed9d 2a72 	vldr	s4, [sp, #456]	; 0x1c8
 801155c:	ed8d 4a48 	vstr	s8, [sp, #288]	; 0x120
 8011560:	ee66 aa8b 	vmul.f32	s21, s13, s22
 8011564:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 8011568:	ed9d ba71 	vldr	s22, [sp, #452]	; 0x1c4
 801156c:	ed9d 4a0d 	vldr	s8, [sp, #52]	; 0x34
 8011570:	f89b 200c 	ldrb.w	r2, [fp, #12]
 8011574:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 8011578:	ee76 3aa6 	vadd.f32	s7, s13, s13
 801157c:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 8011580:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 8011584:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011588:	ee2a 3a83 	vmul.f32	s6, s21, s6
 801158c:	ee62 2aaa 	vmul.f32	s5, s5, s21
 8011590:	ee63 3a87 	vmul.f32	s7, s7, s14
 8011594:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011598:	ee6b aa2a 	vmul.f32	s21, s22, s21
 801159c:	ee2e ea02 	vmul.f32	s28, s28, s4
 80115a0:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 80115a4:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 80115a8:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 80115ac:	ed8d 4a7a 	vstr	s8, [sp, #488]	; 0x1e8
 80115b0:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 80115b4:	edcd 2a70 	vstr	s5, [sp, #448]	; 0x1c0
 80115b8:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 80115bc:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 80115c0:	2a00      	cmp	r2, #0
 80115c2:	f001 8411 	beq.w	8012de8 <kalman_3gyro.constprop.0+0x3598>
 80115c6:	ee77 2a07 	vadd.f32	s5, s14, s14
 80115ca:	ed9d 4a29 	vldr	s8, [sp, #164]	; 0xa4
 80115ce:	f89b 100e 	ldrb.w	r1, [fp, #14]
 80115d2:	f89b 200d 	ldrb.w	r2, [fp, #13]
 80115d6:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 80115da:	ee24 4a24 	vmul.f32	s8, s8, s9
 80115de:	ee27 ea0e 	vmul.f32	s28, s14, s28
 80115e2:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80115e6:	ee29 7a87 	vmul.f32	s14, s19, s14
 80115ea:	ee26 6a24 	vmul.f32	s12, s12, s9
 80115ee:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 80115f2:	ed8d 4a42 	vstr	s8, [sp, #264]	; 0x108
 80115f6:	ed8d 4a43 	vstr	s8, [sp, #268]	; 0x10c
 80115fa:	ed8d 4a44 	vstr	s8, [sp, #272]	; 0x110
 80115fe:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 8011602:	ed8d 7a73 	vstr	s14, [sp, #460]	; 0x1cc
 8011606:	ed8d 7a74 	vstr	s14, [sp, #464]	; 0x1d0
 801160a:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 801160e:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 8011612:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 8011616:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 801161a:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 801161e:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 8011622:	b159      	cbz	r1, 801163c <kalman_3gyro.constprop.0+0x1dec>
 8011624:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011628:	eef4 7ac7 	vcmpe.f32	s15, s14
 801162c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011630:	dd04      	ble.n	801163c <kalman_3gyro.constprop.0+0x1dec>
 8011632:	2000      	movs	r0, #0
 8011634:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 8011638:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 801163c:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8011640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011644:	dd09      	ble.n	801165a <kalman_3gyro.constprop.0+0x1e0a>
 8011646:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 801164a:	eef4 7ac8 	vcmpe.f32	s15, s16
 801164e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011652:	db02      	blt.n	801165a <kalman_3gyro.constprop.0+0x1e0a>
 8011654:	2b00      	cmp	r3, #0
 8011656:	f002 8001 	beq.w	801365c <kalman_3gyro.constprop.0+0x3e0c>
 801165a:	b132      	cbz	r2, 801166a <kalman_3gyro.constprop.0+0x1e1a>
 801165c:	f240 1001 	movw	r0, #257	; 0x101
 8011660:	2301      	movs	r3, #1
 8011662:	f8ad 00a8 	strh.w	r0, [sp, #168]	; 0xa8
 8011666:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 801166a:	2301      	movs	r3, #1
 801166c:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8011670:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8011674:	ed5f 7a56 	vldr	s15, [pc, #-344]	; 8011520 <kalman_3gyro.constprop.0+0x1cd0>
 8011678:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011680:	dc09      	bgt.n	8011696 <kalman_3gyro.constprop.0+0x1e46>
 8011682:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 8011524 <kalman_3gyro.constprop.0+0x1cd4>
 8011686:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801168a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801168e:	d402      	bmi.n	8011696 <kalman_3gyro.constprop.0+0x1e46>
 8011690:	2a00      	cmp	r2, #0
 8011692:	f042 80e4 	bne.w	801385e <kalman_3gyro.constprop.0+0x400e>
 8011696:	2300      	movs	r3, #0
 8011698:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 801169c:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 80116a0:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 80116a4:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 80116a8:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 8011528 <kalman_3gyro.constprop.0+0x1cd8>
 80116ac:	eeb4 aae7 	vcmpe.f32	s20, s15
 80116b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116b4:	dc09      	bgt.n	80116ca <kalman_3gyro.constprop.0+0x1e7a>
 80116b6:	ed5f 7a63 	vldr	s15, [pc, #-396]	; 801152c <kalman_3gyro.constprop.0+0x1cdc>
 80116ba:	eeb4 aae7 	vcmpe.f32	s20, s15
 80116be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116c2:	d402      	bmi.n	80116ca <kalman_3gyro.constprop.0+0x1e7a>
 80116c4:	2900      	cmp	r1, #0
 80116c6:	f042 8097 	bne.w	80137f8 <kalman_3gyro.constprop.0+0x3fa8>
 80116ca:	2300      	movs	r3, #0
 80116cc:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 80116d0:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 80116d4:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 80116d8:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
 80116dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80116e0:	eef4 dae7 	vcmpe.f32	s27, s15
 80116e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116e8:	f341 836b 	ble.w	8012dc2 <kalman_3gyro.constprop.0+0x3572>
 80116ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80116f0:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 80116f4:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 80116f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80116fc:	2300      	movs	r3, #0
 80116fe:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8011702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011706:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801170a:	eef4 dac7 	vcmpe.f32	s27, s14
 801170e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011712:	bfc4      	itt	gt
 8011714:	f88d 30b1 	strbgt.w	r3, [sp, #177]	; 0xb1
 8011718:	f88d 30b3 	strbgt.w	r3, [sp, #179]	; 0xb3
 801171c:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8011720:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8011724:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8011728:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 801172c:	2b0e      	cmp	r3, #14
 801172e:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 8011732:	dc02      	bgt.n	801173a <kalman_3gyro.constprop.0+0x1eea>
 8011734:	3305      	adds	r3, #5
 8011736:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 801173a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801173e:	eef4 7acd 	vcmpe.f32	s15, s26
 8011742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011746:	f340 82e9 	ble.w	8011d1c <kalman_3gyro.constprop.0+0x24cc>
 801174a:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 801174e:	eef4 7aeb 	vcmpe.f32	s15, s23
 8011752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011756:	f340 82e1 	ble.w	8011d1c <kalman_3gyro.constprop.0+0x24cc>
 801175a:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 801175e:	eef4 7aec 	vcmpe.f32	s15, s25
 8011762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011766:	f340 82d9 	ble.w	8011d1c <kalman_3gyro.constprop.0+0x24cc>
 801176a:	9b08      	ldr	r3, [sp, #32]
 801176c:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 8011530 <kalman_3gyro.constprop.0+0x1ce0>
 8011770:	ed93 7a06 	vldr	s14, [r3, #24]
 8011774:	eef0 6ac7 	vabs.f32	s13, s14
 8011778:	eef4 6ae7 	vcmpe.f32	s13, s15
 801177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011780:	f140 82cc 	bpl.w	8011d1c <kalman_3gyro.constprop.0+0x24cc>
 8011784:	edd3 6a07 	vldr	s13, [r3, #28]
 8011788:	eeb0 6ae6 	vabs.f32	s12, s13
 801178c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011794:	f140 82c2 	bpl.w	8011d1c <kalman_3gyro.constprop.0+0x24cc>
 8011798:	ed93 6a08 	vldr	s12, [r3, #32]
 801179c:	eef0 4ac6 	vabs.f32	s9, s12
 80117a0:	eef4 4ae7 	vcmpe.f32	s9, s15
 80117a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117a8:	f140 82b8 	bpl.w	8011d1c <kalman_3gyro.constprop.0+0x24cc>
 80117ac:	ed5f 7a9f 	vldr	s15, [pc, #-636]	; 8011534 <kalman_3gyro.constprop.0+0x1ce4>
 80117b0:	eef0 5ae5 	vabs.f32	s11, s11
 80117b4:	eef4 5ae7 	vcmpe.f32	s11, s15
 80117b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117bc:	f140 82ae 	bpl.w	8011d1c <kalman_3gyro.constprop.0+0x24cc>
 80117c0:	eef0 1ae1 	vabs.f32	s3, s3
 80117c4:	eef4 1ae7 	vcmpe.f32	s3, s15
 80117c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117cc:	f140 82a6 	bpl.w	8011d1c <kalman_3gyro.constprop.0+0x24cc>
 80117d0:	eeb0 5ac5 	vabs.f32	s10, s10
 80117d4:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80117d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117dc:	f140 829e 	bpl.w	8011d1c <kalman_3gyro.constprop.0+0x24cc>
 80117e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80117e2:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 80117e6:	edd3 5a00 	vldr	s11, [r3]
 80117ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117ec:	991d      	ldr	r1, [sp, #116]	; 0x74
 80117ee:	ed93 5a00 	vldr	s10, [r3]
 80117f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80117f4:	eef4 5ac5 	vcmpe.f32	s11, s10
 80117f8:	2a09      	cmp	r2, #9
 80117fa:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 80117fe:	ed93 4a00 	vldr	s8, [r3]
 8011802:	edd4 3a00 	vldr	s7, [r4]
 8011806:	bf8c      	ite	hi
 8011808:	230a      	movhi	r3, #10
 801180a:	2305      	movls	r3, #5
 801180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011810:	bfb4      	ite	lt
 8011812:	eef0 7a45 	vmovlt.f32	s15, s10
 8011816:	eef0 7a65 	vmovge.f32	s15, s11
 801181a:	bf8c      	ite	hi
 801181c:	eef0 4a45 	vmovhi.f32	s9, s10
 8011820:	eef0 4a65 	vmovls.f32	s9, s11
 8011824:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801182c:	eef4 4ae3 	vcmpe.f32	s9, s7
 8011830:	bfb8      	it	lt
 8011832:	eef0 7a63 	vmovlt.f32	s15, s7
 8011836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801183a:	bf88      	it	hi
 801183c:	eef0 4a63 	vmovhi.f32	s9, s7
 8011840:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011848:	ee35 5a85 	vadd.f32	s10, s11, s10
 801184c:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011850:	edd1 5a00 	vldr	s11, [r1]
 8011854:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011856:	bfb8      	it	lt
 8011858:	eef0 7a44 	vmovlt.f32	s15, s8
 801185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011860:	bf88      	it	hi
 8011862:	eef0 4a44 	vmovhi.f32	s9, s8
 8011866:	eef4 7ae5 	vcmpe.f32	s15, s11
 801186a:	ee35 5a23 	vadd.f32	s10, s10, s7
 801186e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011872:	eef4 4ae5 	vcmpe.f32	s9, s11
 8011876:	bfb8      	it	lt
 8011878:	eef0 7a65 	vmovlt.f32	s15, s11
 801187c:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011884:	bf88      	it	hi
 8011886:	eef0 4a65 	vmovhi.f32	s9, s11
 801188a:	2b05      	cmp	r3, #5
 801188c:	ee35 5a25 	vadd.f32	s10, s10, s11
 8011890:	edd1 5a00 	vldr	s11, [r1]
 8011894:	d065      	beq.n	8011962 <kalman_3gyro.constprop.0+0x2112>
 8011896:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 801189a:	edd1 3a00 	vldr	s7, [r1]
 801189e:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 80118a2:	eef4 7ae3 	vcmpe.f32	s15, s7
 80118a6:	ed91 4a00 	vldr	s8, [r1]
 80118aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ae:	eef4 4ae3 	vcmpe.f32	s9, s7
 80118b2:	bfb8      	it	lt
 80118b4:	eef0 7a63 	vmovlt.f32	s15, s7
 80118b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118bc:	bf88      	it	hi
 80118be:	eef0 4a63 	vmovhi.f32	s9, s7
 80118c2:	eef4 7ac4 	vcmpe.f32	s15, s8
 80118c6:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 80118ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ce:	ee35 5a23 	vadd.f32	s10, s10, s7
 80118d2:	eef4 4ac4 	vcmpe.f32	s9, s8
 80118d6:	edd1 3a00 	vldr	s7, [r1]
 80118da:	bfb8      	it	lt
 80118dc:	eef0 7a44 	vmovlt.f32	s15, s8
 80118e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118e4:	bf88      	it	hi
 80118e6:	eef0 4a44 	vmovhi.f32	s9, s8
 80118ea:	eef4 7ae3 	vcmpe.f32	s15, s7
 80118ee:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 80118f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f6:	ee35 5a04 	vadd.f32	s10, s10, s8
 80118fa:	eef4 4ae3 	vcmpe.f32	s9, s7
 80118fe:	ed91 4a00 	vldr	s8, [r1]
 8011902:	bfb8      	it	lt
 8011904:	eef0 7a63 	vmovlt.f32	s15, s7
 8011908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801190c:	bf88      	it	hi
 801190e:	eef0 4a63 	vmovhi.f32	s9, s7
 8011912:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191a:	eef4 4ac4 	vcmpe.f32	s9, s8
 801191e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011922:	bfb8      	it	lt
 8011924:	eef0 7a44 	vmovlt.f32	s15, s8
 8011928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801192c:	bf88      	it	hi
 801192e:	eef0 4a44 	vmovhi.f32	s9, s8
 8011932:	2b0a      	cmp	r3, #10
 8011934:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011938:	d113      	bne.n	8011962 <kalman_3gyro.constprop.0+0x2112>
 801193a:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 801193e:	ed91 4a00 	vldr	s8, [r1]
 8011942:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801194a:	eef4 4ac4 	vcmpe.f32	s9, s8
 801194e:	bfb8      	it	lt
 8011950:	eef0 7a44 	vmovlt.f32	s15, s8
 8011954:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801195c:	bf88      	it	hi
 801195e:	eef0 4a44 	vmovhi.f32	s9, s8
 8011962:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8011966:	eddf 4ae7 	vldr	s9, [pc, #924]	; 8011d04 <kalman_3gyro.constprop.0+0x24b4>
 801196a:	ed9f 4ae7 	vldr	s8, [pc, #924]	; 8011d08 <kalman_3gyro.constprop.0+0x24b8>
 801196e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011972:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011976:	eef4 7ae4 	vcmpe.f32	s15, s9
 801197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801197e:	f300 81cd 	bgt.w	8011d1c <kalman_3gyro.constprop.0+0x24cc>
 8011982:	eef0 7ac5 	vabs.f32	s15, s10
 8011986:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801198a:	ed9f 5ae0 	vldr	s10, [pc, #896]	; 8011d0c <kalman_3gyro.constprop.0+0x24bc>
 801198e:	eef4 7ac5 	vcmpe.f32	s15, s10
 8011992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011996:	f300 81c1 	bgt.w	8011d1c <kalman_3gyro.constprop.0+0x24cc>
 801199a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801199c:	ed91 5a00 	vldr	s10, [r1]
 80119a0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80119a2:	ed91 4a00 	vldr	s8, [r1]
 80119a6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80119a8:	eeb4 5ac4 	vcmpe.f32	s10, s8
 80119ac:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 80119b0:	ed90 3a00 	vldr	s6, [r0]
 80119b4:	edd1 3a00 	vldr	s7, [r1]
 80119b8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80119ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119be:	bfb4      	ite	lt
 80119c0:	eef0 7a44 	vmovlt.f32	s15, s8
 80119c4:	eef0 7a45 	vmovge.f32	s15, s10
 80119c8:	bf8c      	ite	hi
 80119ca:	eef0 4a44 	vmovhi.f32	s9, s8
 80119ce:	eef0 4a45 	vmovls.f32	s9, s10
 80119d2:	eef4 7ac3 	vcmpe.f32	s15, s6
 80119d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119da:	eef4 4ac3 	vcmpe.f32	s9, s6
 80119de:	bfb8      	it	lt
 80119e0:	eef0 7a43 	vmovlt.f32	s15, s6
 80119e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119e8:	bf88      	it	hi
 80119ea:	eef0 4a43 	vmovhi.f32	s9, s6
 80119ee:	eef4 7ae3 	vcmpe.f32	s15, s7
 80119f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119f6:	ee35 5a04 	vadd.f32	s10, s10, s8
 80119fa:	eef4 4ae3 	vcmpe.f32	s9, s7
 80119fe:	ed91 4a00 	vldr	s8, [r1]
 8011a02:	bfb8      	it	lt
 8011a04:	eef0 7a63 	vmovlt.f32	s15, s7
 8011a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a0c:	bf88      	it	hi
 8011a0e:	eef0 4a63 	vmovhi.f32	s9, s7
 8011a12:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011a16:	ee35 5a03 	vadd.f32	s10, s10, s6
 8011a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a1e:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011a22:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011a26:	bfb8      	it	lt
 8011a28:	eef0 7a44 	vmovlt.f32	s15, s8
 8011a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a30:	bf88      	it	hi
 8011a32:	eef0 4a44 	vmovhi.f32	s9, s8
 8011a36:	2b05      	cmp	r3, #5
 8011a38:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011a3c:	d065      	beq.n	8011b0a <kalman_3gyro.constprop.0+0x22ba>
 8011a3e:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 8011a42:	edd1 3a00 	vldr	s7, [r1]
 8011a46:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 8011a4a:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011a4e:	ed91 4a00 	vldr	s8, [r1]
 8011a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a56:	eef4 4ae3 	vcmpe.f32	s9, s7
 8011a5a:	bfb8      	it	lt
 8011a5c:	eef0 7a63 	vmovlt.f32	s15, s7
 8011a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a64:	bf88      	it	hi
 8011a66:	eef0 4a63 	vmovhi.f32	s9, s7
 8011a6a:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011a6e:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8011a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a76:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011a7a:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011a7e:	edd1 3a00 	vldr	s7, [r1]
 8011a82:	bfb8      	it	lt
 8011a84:	eef0 7a44 	vmovlt.f32	s15, s8
 8011a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a8c:	bf88      	it	hi
 8011a8e:	eef0 4a44 	vmovhi.f32	s9, s8
 8011a92:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011a96:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 8011a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a9e:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011aa2:	eef4 4ae3 	vcmpe.f32	s9, s7
 8011aa6:	ed91 4a00 	vldr	s8, [r1]
 8011aaa:	bfb8      	it	lt
 8011aac:	eef0 7a63 	vmovlt.f32	s15, s7
 8011ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ab4:	bf88      	it	hi
 8011ab6:	eef0 4a63 	vmovhi.f32	s9, s7
 8011aba:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ac2:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011ac6:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011aca:	bfb8      	it	lt
 8011acc:	eef0 7a44 	vmovlt.f32	s15, s8
 8011ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad4:	bf88      	it	hi
 8011ad6:	eef0 4a44 	vmovhi.f32	s9, s8
 8011ada:	2b0a      	cmp	r3, #10
 8011adc:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011ae0:	d113      	bne.n	8011b0a <kalman_3gyro.constprop.0+0x22ba>
 8011ae2:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 8011ae6:	ed91 4a00 	vldr	s8, [r1]
 8011aea:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af2:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011af6:	bfb8      	it	lt
 8011af8:	eef0 7a44 	vmovlt.f32	s15, s8
 8011afc:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b04:	bf88      	it	hi
 8011b06:	eef0 4a44 	vmovhi.f32	s9, s8
 8011b0a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8011b0e:	eddf 4a7d 	vldr	s9, [pc, #500]	; 8011d04 <kalman_3gyro.constprop.0+0x24b4>
 8011b12:	ed9f 4a7d 	vldr	s8, [pc, #500]	; 8011d08 <kalman_3gyro.constprop.0+0x24b8>
 8011b16:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011b1a:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011b1e:	eef4 7ae4 	vcmpe.f32	s15, s9
 8011b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b26:	f300 80f9 	bgt.w	8011d1c <kalman_3gyro.constprop.0+0x24cc>
 8011b2a:	eef0 7ac5 	vabs.f32	s15, s10
 8011b2e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011b32:	ed9f 5a76 	vldr	s10, [pc, #472]	; 8011d0c <kalman_3gyro.constprop.0+0x24bc>
 8011b36:	eef4 7ac5 	vcmpe.f32	s15, s10
 8011b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b3e:	f300 80ed 	bgt.w	8011d1c <kalman_3gyro.constprop.0+0x24cc>
 8011b42:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011b44:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8011b46:	edd1 4a00 	vldr	s9, [r1]
 8011b4a:	9919      	ldr	r1, [sp, #100]	; 0x64
 8011b4c:	ed91 3a00 	vldr	s6, [r1]
 8011b50:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011b52:	eef4 4ac3 	vcmpe.f32	s9, s6
 8011b56:	ed91 4a00 	vldr	s8, [r1]
 8011b5a:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 8011b5e:	edd1 3a00 	vldr	s7, [r1]
 8011b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b66:	bfb4      	ite	lt
 8011b68:	eef0 7a43 	vmovlt.f32	s15, s6
 8011b6c:	eef0 7a64 	vmovge.f32	s15, s9
 8011b70:	bf8c      	ite	hi
 8011b72:	eeb0 5a43 	vmovhi.f32	s10, s6
 8011b76:	eeb0 5a64 	vmovls.f32	s10, s9
 8011b7a:	eef4 3ae7 	vcmpe.f32	s7, s15
 8011b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b82:	eef4 3ac5 	vcmpe.f32	s7, s10
 8011b86:	bfa8      	it	ge
 8011b88:	eef0 7a63 	vmovge.f32	s15, s7
 8011b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b90:	bf98      	it	ls
 8011b92:	eeb0 5a63 	vmovls.f32	s10, s7
 8011b96:	eeb4 4ae7 	vcmpe.f32	s8, s15
 8011b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b9e:	ee34 3a83 	vadd.f32	s6, s9, s6
 8011ba2:	eeb4 4ac5 	vcmpe.f32	s8, s10
 8011ba6:	edd5 4a00 	vldr	s9, [r5]
 8011baa:	bfa8      	it	ge
 8011bac:	eef0 7a44 	vmovge.f32	s15, s8
 8011bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb4:	bf98      	it	ls
 8011bb6:	eeb0 5a44 	vmovls.f32	s10, s8
 8011bba:	eef4 7ae4 	vcmpe.f32	s15, s9
 8011bbe:	ee73 3a83 	vadd.f32	s7, s7, s6
 8011bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bc6:	eef4 4ac5 	vcmpe.f32	s9, s10
 8011bca:	bfb8      	it	lt
 8011bcc:	eef0 7a64 	vmovlt.f32	s15, s9
 8011bd0:	ee34 4a23 	vadd.f32	s8, s8, s7
 8011bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bd8:	bf98      	it	ls
 8011bda:	eeb0 5a64 	vmovls.f32	s10, s9
 8011bde:	2b05      	cmp	r3, #5
 8011be0:	ee74 4a84 	vadd.f32	s9, s9, s8
 8011be4:	d065      	beq.n	8011cb2 <kalman_3gyro.constprop.0+0x2462>
 8011be6:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 8011bea:	ed95 4a00 	vldr	s8, [r5]
 8011bee:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 8011bf2:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011bf6:	ed95 3a00 	vldr	s6, [r5]
 8011bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bfe:	eeb4 5ac4 	vcmpe.f32	s10, s8
 8011c02:	bfb8      	it	lt
 8011c04:	eef0 7a44 	vmovlt.f32	s15, s8
 8011c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c0c:	bf88      	it	hi
 8011c0e:	eeb0 5a44 	vmovhi.f32	s10, s8
 8011c12:	eef4 7ac3 	vcmpe.f32	s15, s6
 8011c16:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 8011c1a:	edd5 3a00 	vldr	s7, [r5]
 8011c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c22:	eeb4 5ac3 	vcmpe.f32	s10, s6
 8011c26:	bfb8      	it	lt
 8011c28:	eef0 7a43 	vmovlt.f32	s15, s6
 8011c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c30:	bf88      	it	hi
 8011c32:	eeb0 5a43 	vmovhi.f32	s10, s6
 8011c36:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011c3a:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 8011c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c42:	ee34 4a24 	vadd.f32	s8, s8, s9
 8011c46:	eeb4 5ae3 	vcmpe.f32	s10, s7
 8011c4a:	edd5 4a00 	vldr	s9, [r5]
 8011c4e:	bfb8      	it	lt
 8011c50:	eef0 7a63 	vmovlt.f32	s15, s7
 8011c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c58:	bf88      	it	hi
 8011c5a:	eeb0 5a63 	vmovhi.f32	s10, s7
 8011c5e:	eef4 7ae4 	vcmpe.f32	s15, s9
 8011c62:	ee34 4a03 	vadd.f32	s8, s8, s6
 8011c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c6a:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8011c6e:	bfb8      	it	lt
 8011c70:	eef0 7a64 	vmovlt.f32	s15, s9
 8011c74:	ee34 4a23 	vadd.f32	s8, s8, s7
 8011c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c7c:	bf88      	it	hi
 8011c7e:	eeb0 5a64 	vmovhi.f32	s10, s9
 8011c82:	2b0a      	cmp	r3, #10
 8011c84:	ee74 4a24 	vadd.f32	s9, s8, s9
 8011c88:	d113      	bne.n	8011cb2 <kalman_3gyro.constprop.0+0x2462>
 8011c8a:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 8011c8e:	ed93 4a00 	vldr	s8, [r3]
 8011c92:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c9a:	eeb4 5ac4 	vcmpe.f32	s10, s8
 8011c9e:	bfb8      	it	lt
 8011ca0:	eef0 7a44 	vmovlt.f32	s15, s8
 8011ca4:	ee74 4a84 	vadd.f32	s9, s9, s8
 8011ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cac:	bf88      	it	hi
 8011cae:	eeb0 5a44 	vmovhi.f32	s10, s8
 8011cb2:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8011cb6:	ed9f 4a13 	vldr	s8, [pc, #76]	; 8011d04 <kalman_3gyro.constprop.0+0x24b4>
 8011cba:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8011d08 <kalman_3gyro.constprop.0+0x24b8>
 8011cbe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011cc2:	ee64 4a85 	vmul.f32	s9, s9, s10
 8011cc6:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cce:	dc25      	bgt.n	8011d1c <kalman_3gyro.constprop.0+0x24cc>
 8011cd0:	eef0 7ae4 	vabs.f32	s15, s9
 8011cd4:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8011cd8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8011d0c <kalman_3gyro.constprop.0+0x24bc>
 8011cdc:	eef4 5ae7 	vcmpe.f32	s11, s15
 8011ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce4:	dc1a      	bgt.n	8011d1c <kalman_3gyro.constprop.0+0x24cc>
 8011ce6:	f89b 5005 	ldrb.w	r5, [fp, #5]
 8011cea:	2d00      	cmp	r5, #0
 8011cec:	f000 80e0 	beq.w	8011eb0 <kalman_3gyro.constprop.0+0x2660>
 8011cf0:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	f002 8439 	beq.w	801456c <kalman_3gyro.constprop.0+0x4d1c>
 8011cfa:	2201      	movs	r2, #1
 8011cfc:	462b      	mov	r3, r5
 8011cfe:	9201      	str	r2, [sp, #4]
 8011d00:	e01c      	b.n	8011d3c <kalman_3gyro.constprop.0+0x24ec>
 8011d02:	bf00      	nop
 8011d04:	3be56041 	.word	0x3be56041
 8011d08:	3dcccccd 	.word	0x3dcccccd
 8011d0c:	3e333333 	.word	0x3e333333
 8011d10:	3d088889 	.word	0x3d088889
 8011d14:	42480000 	.word	0x42480000
 8011d18:	00000000 	.word	0x00000000
 8011d1c:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8011d20:	2100      	movs	r1, #0
 8011d22:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 8011d26:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	f000 80c1 	beq.w	8011eb2 <kalman_3gyro.constprop.0+0x2662>
 8011d30:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8011d34:	2a01      	cmp	r2, #1
 8011d36:	f001 8615 	beq.w	8013964 <kalman_3gyro.constprop.0+0x4114>
 8011d3a:	9101      	str	r1, [sp, #4]
 8011d3c:	2b02      	cmp	r3, #2
 8011d3e:	f041 87d2 	bne.w	8013ce6 <kalman_3gyro.constprop.0+0x4496>
 8011d42:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8011d46:	eecd 6a27 	vdiv.f32	s13, s26, s15
 8011d4a:	f240 1301 	movw	r3, #257	; 0x101
 8011d4e:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 8011d52:	2301      	movs	r3, #1
 8011d54:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8011d58:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8011d5c:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8011d60:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 8011d64:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8011d68:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 8011d6c:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
 8011d70:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 8011d74:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 8011d78:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
 8011d7c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011d80:	eef4 7ac8 	vcmpe.f32	s15, s16
 8011d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d88:	f2c2 809a 	blt.w	8013ec0 <kalman_3gyro.constprop.0+0x4670>
 8011d8c:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8011d90:	2a00      	cmp	r2, #0
 8011d92:	f002 83db 	beq.w	801454c <kalman_3gyro.constprop.0+0x4cfc>
 8011d96:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8011da0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011da4:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 8011da8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011dac:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8011db0:	f002 84da 	beq.w	8014768 <kalman_3gyro.constprop.0+0x4f18>
 8011db4:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8011db8:	f002 80d0 	beq.w	8013f5c <kalman_3gyro.constprop.0+0x470c>
 8011dbc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011dc0:	2a00      	cmp	r2, #0
 8011dc2:	f042 80d0 	bne.w	8013f66 <kalman_3gyro.constprop.0+0x4716>
 8011dc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011dc8:	a830      	add	r0, sp, #192	; 0xc0
 8011dca:	f04f 31ff 	mov.w	r1, #4294967295
 8011dce:	4613      	mov	r3, r2
 8011dd0:	edd2 7a00 	vldr	s15, [r2]
 8011dd4:	3101      	adds	r1, #1
 8011dd6:	330c      	adds	r3, #12
 8011dd8:	3204      	adds	r2, #4
 8011dda:	461c      	mov	r4, r3
 8011ddc:	ed94 7a00 	vldr	s14, [r4]
 8011de0:	330c      	adds	r3, #12
 8011de2:	4598      	cmp	r8, r3
 8011de4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011de8:	d1f7      	bne.n	8011dda <kalman_3gyro.constprop.0+0x258a>
 8011dea:	2902      	cmp	r1, #2
 8011dec:	ece0 7a01 	vstmia	r0!, {s15}
 8011df0:	f108 0804 	add.w	r8, r8, #4
 8011df4:	d1eb      	bne.n	8011dce <kalman_3gyro.constprop.0+0x257e>
 8011df6:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8011d10 <kalman_3gyro.constprop.0+0x24c0>
 8011dfa:	ed9d 4a30 	vldr	s8, [sp, #192]	; 0xc0
 8011dfe:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 8011e02:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8011e06:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8011e08:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 8011e0c:	ee24 4a27 	vmul.f32	s8, s8, s15
 8011e10:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8011e14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011e18:	460a      	mov	r2, r1
 8011e1a:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 8011e1e:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 8011e22:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 8011e26:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 8011e2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e32:	f103 030c 	add.w	r3, r3, #12
 8011e36:	bf88      	it	hi
 8011e38:	eef0 7a47 	vmovhi.f32	s15, s14
 8011e3c:	4293      	cmp	r3, r2
 8011e3e:	d1f2      	bne.n	8011e26 <kalman_3gyro.constprop.0+0x25d6>
 8011e40:	1d1a      	adds	r2, r3, #4
 8011e42:	4290      	cmp	r0, r2
 8011e44:	ece4 7a01 	vstmia	r4!, {s15}
 8011e48:	d1e9      	bne.n	8011e1e <kalman_3gyro.constprop.0+0x25ce>
 8011e4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011e4c:	ed9d 5a2d 	vldr	s10, [sp, #180]	; 0xb4
 8011e50:	edd3 7a00 	vldr	s15, [r3]
 8011e54:	eddd 5a2e 	vldr	s11, [sp, #184]	; 0xb8
 8011e58:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 8011e5c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8011e60:	ee97 5a84 	vfnms.f32	s10, s15, s8
 8011e64:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 8011e68:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 8011e6c:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 8011e70:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 8011e74:	ed8d 6a32 	vstr	s12, [sp, #200]	; 0xc8
 8011e78:	b14b      	cbz	r3, 8011e8e <kalman_3gyro.constprop.0+0x263e>
 8011e7a:	ed9d 7a03 	vldr	s14, [sp, #12]
 8011e7e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8011e82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e8a:	f102 8553 	bmi.w	8014934 <kalman_3gyro.constprop.0+0x50e4>
 8011e8e:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 8011e92:	2a1e      	cmp	r2, #30
 8011e94:	f002 84dd 	beq.w	8014852 <kalman_3gyro.constprop.0+0x5002>
 8011e98:	1c53      	adds	r3, r2, #1
 8011e9a:	2aff      	cmp	r2, #255	; 0xff
 8011e9c:	bf14      	ite	ne
 8011e9e:	b2db      	uxtbne	r3, r3
 8011ea0:	23ff      	moveq	r3, #255	; 0xff
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 8011ea8:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011eac:	9b01      	ldr	r3, [sp, #4]
 8011eae:	e012      	b.n	8011ed6 <kalman_3gyro.constprop.0+0x2686>
 8011eb0:	2301      	movs	r3, #1
 8011eb2:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 8011eb6:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 8011eba:	9181      	str	r1, [sp, #516]	; 0x204
 8011ebc:	9282      	str	r2, [sp, #520]	; 0x208
 8011ebe:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8011ec2:	9183      	str	r1, [sp, #524]	; 0x20c
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 8011eca:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 8011ece:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011ed2:	f88b 2001 	strb.w	r2, [fp, #1]
 8011ed6:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 8011d14 <kalman_3gyro.constprop.0+0x24c4>
 8011eda:	eeb4 cae7 	vcmpe.f32	s24, s15
 8011ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee2:	f2c0 875f 	blt.w	8012da4 <kalman_3gyro.constprop.0+0x3554>
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 8011eec:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 8011ef0:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 8011ef4:	2b01      	cmp	r3, #1
 8011ef6:	d125      	bne.n	8011f44 <kalman_3gyro.constprop.0+0x26f4>
 8011ef8:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 8011efc:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 8011f00:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 8011f04:	eddd 6a42 	vldr	s13, [sp, #264]	; 0x108
 8011f08:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8011f0c:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 8011f10:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 8011f14:	ee25 5a24 	vmul.f32	s10, s10, s9
 8011f18:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8011f1c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011f20:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011f24:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011f28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011f2c:	ed8d 5a72 	vstr	s10, [sp, #456]	; 0x1c8
 8011f30:	edcd 5a73 	vstr	s11, [sp, #460]	; 0x1cc
 8011f34:	ed8d 6a74 	vstr	s12, [sp, #464]	; 0x1d0
 8011f38:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 8011f3c:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8011f40:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 8011f44:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8011f48:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 8011f4c:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 8011f50:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 8011f54:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 8011f58:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 8011f5c:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 8011f60:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 8011f64:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 8011f68:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 8011f6c:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 8011f70:	ed9d 0a44 	vldr	s0, [sp, #272]	; 0x110
 8011f74:	eddd 0a45 	vldr	s1, [sp, #276]	; 0x114
 8011f78:	ed9d 1a46 	vldr	s2, [sp, #280]	; 0x118
 8011f7c:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
 8011f80:	ed9d 2a48 	vldr	s4, [sp, #288]	; 0x120
 8011f84:	eddd 2a49 	vldr	s5, [sp, #292]	; 0x124
 8011f88:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 8011f8c:	eee7 3a07 	vfma.f32	s7, s14, s14
 8011f90:	f50b 73ea 	add.w	r3, fp, #468	; 0x1d4
 8011f94:	9301      	str	r3, [sp, #4]
 8011f96:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 8011f9a:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 8011f9e:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8011fa2:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 8011fa6:	f50d 64c3 	add.w	r4, sp, #1560	; 0x618
 8011faa:	eea8 3a08 	vfma.f32	s6, s16, s16
 8011fae:	2500      	movs	r5, #0
 8011fb0:	eea0 4a00 	vfma.f32	s8, s0, s0
 8011fb4:	eee0 4aa0 	vfma.f32	s9, s1, s1
 8011fb8:	eea1 5a01 	vfma.f32	s10, s2, s2
 8011fbc:	eee1 5aa1 	vfma.f32	s11, s3, s3
 8011fc0:	eea2 6a02 	vfma.f32	s12, s4, s4
 8011fc4:	eee2 6aa2 	vfma.f32	s13, s5, s5
 8011fc8:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 8011fcc:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 8011fd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011fd4:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 8011fd8:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 8011fdc:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 8011fe0:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 8011fe4:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 8011fe8:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 8011fec:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 8011ff0:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 8011ff4:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 8011ff8:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 8011ffc:	ed9d 4a70 	vldr	s8, [sp, #448]	; 0x1c0
 8012000:	eddd 4a71 	vldr	s9, [sp, #452]	; 0x1c4
 8012004:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 8012008:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 801200c:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 8012010:	eddd 6a78 	vldr	s13, [sp, #480]	; 0x1e0
 8012014:	ed9d 7a79 	vldr	s14, [sp, #484]	; 0x1e4
 8012018:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 801201c:	ed1f 8ac2 	vldr	s16, [pc, #-776]	; 8011d18 <kalman_3gyro.constprop.0+0x24c8>
 8012020:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8012024:	ee24 4a04 	vmul.f32	s8, s8, s8
 8012028:	ee64 4aa4 	vmul.f32	s9, s9, s9
 801202c:	ee25 5a05 	vmul.f32	s10, s10, s10
 8012030:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8012034:	ee26 6a06 	vmul.f32	s12, s12, s12
 8012038:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801203c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012040:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012044:	ed8d 4a88 	vstr	s8, [sp, #544]	; 0x220
 8012048:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 801204c:	edcd 8a8e 	vstr	s17, [sp, #568]	; 0x238
 8012050:	edcd 8a8f 	vstr	s17, [sp, #572]	; 0x23c
 8012054:	edcd 4a89 	vstr	s9, [sp, #548]	; 0x224
 8012058:	ed8d 5a8a 	vstr	s10, [sp, #552]	; 0x228
 801205c:	edcd 5a8b 	vstr	s11, [sp, #556]	; 0x22c
 8012060:	ed8d 6a8c 	vstr	s12, [sp, #560]	; 0x230
 8012064:	edcd 6a90 	vstr	s13, [sp, #576]	; 0x240
 8012068:	ed8d 7a91 	vstr	s14, [sp, #580]	; 0x244
 801206c:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 8012070:	e005      	b.n	801207e <kalman_3gyro.constprop.0+0x282e>
 8012072:	3501      	adds	r5, #1
 8012074:	2d0c      	cmp	r5, #12
 8012076:	f104 0404 	add.w	r4, r4, #4
 801207a:	f000 84fe 	beq.w	8012a7a <kalman_3gyro.constprop.0+0x322a>
 801207e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012082:	2b00      	cmp	r3, #0
 8012084:	d0f5      	beq.n	8012072 <kalman_3gyro.constprop.0+0x2822>
 8012086:	edd4 da00 	vldr	s27, [r4]
 801208a:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 801208e:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 8012092:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 8012096:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 801209a:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 801209e:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 80120a2:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 80120a6:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 80120aa:	9b01      	ldr	r3, [sp, #4]
 80120ac:	ed89 8a00 	vstr	s16, [r9]
 80120b0:	ed89 8a01 	vstr	s16, [r9, #4]
 80120b4:	ed89 8a02 	vstr	s16, [r9, #8]
 80120b8:	ed89 8a03 	vstr	s16, [r9, #12]
 80120bc:	ed89 8a04 	vstr	s16, [r9, #16]
 80120c0:	ed89 8a05 	vstr	s16, [r9, #20]
 80120c4:	ed89 8a06 	vstr	s16, [r9, #24]
 80120c8:	ed89 8a07 	vstr	s16, [r9, #28]
 80120cc:	ed89 8a08 	vstr	s16, [r9, #32]
 80120d0:	464e      	mov	r6, r9
 80120d2:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 80120d6:	464a      	mov	r2, r9
 80120d8:	ecb3 7a01 	vldmia	r3!, {s14}
 80120dc:	ecf2 7a01 	vldmia	r2!, {s15}
 80120e0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80120e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120e8:	d006      	beq.n	80120f8 <kalman_3gyro.constprop.0+0x28a8>
 80120ea:	eef5 da40 	vcmp.f32	s27, #0.0
 80120ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120f2:	bf18      	it	ne
 80120f4:	eeed 7a87 	vfmane.f32	s15, s27, s14
 80120f8:	ed93 7a08 	vldr	s14, [r3, #32]
 80120fc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012104:	d006      	beq.n	8012114 <kalman_3gyro.constprop.0+0x28c4>
 8012106:	eeb5 ea40 	vcmp.f32	s28, #0.0
 801210a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801210e:	bf18      	it	ne
 8012110:	eeee 7a07 	vfmane.f32	s15, s28, s14
 8012114:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8012118:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012120:	d006      	beq.n	8012130 <kalman_3gyro.constprop.0+0x28e0>
 8012122:	eef5 ea40 	vcmp.f32	s29, #0.0
 8012126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801212a:	bf18      	it	ne
 801212c:	eeee 7a87 	vfmane.f32	s15, s29, s14
 8012130:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8012134:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801213c:	d006      	beq.n	801214c <kalman_3gyro.constprop.0+0x28fc>
 801213e:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8012142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012146:	bf18      	it	ne
 8012148:	eeef 7a07 	vfmane.f32	s15, s30, s14
 801214c:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8012150:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012158:	d006      	beq.n	8012168 <kalman_3gyro.constprop.0+0x2918>
 801215a:	eef5 fa40 	vcmp.f32	s31, #0.0
 801215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012162:	bf18      	it	ne
 8012164:	eeef 7a87 	vfmane.f32	s15, s31, s14
 8012168:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 801216c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012174:	d006      	beq.n	8012184 <kalman_3gyro.constprop.0+0x2934>
 8012176:	eef5 6a40 	vcmp.f32	s13, #0.0
 801217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801217e:	bf18      	it	ne
 8012180:	eee6 7a87 	vfmane.f32	s15, s13, s14
 8012184:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8012188:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012190:	d006      	beq.n	80121a0 <kalman_3gyro.constprop.0+0x2950>
 8012192:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801219a:	bf18      	it	ne
 801219c:	eee6 7a07 	vfmane.f32	s15, s12, s14
 80121a0:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 80121a4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80121a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ac:	d006      	beq.n	80121bc <kalman_3gyro.constprop.0+0x296c>
 80121ae:	eef5 5a40 	vcmp.f32	s11, #0.0
 80121b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b6:	bf18      	it	ne
 80121b8:	eee5 7a87 	vfmane.f32	s15, s11, s14
 80121bc:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 80121c0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80121c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c8:	d006      	beq.n	80121d8 <kalman_3gyro.constprop.0+0x2988>
 80121ca:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80121ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121d2:	bf18      	it	ne
 80121d4:	eee5 7a07 	vfmane.f32	s15, s10, s14
 80121d8:	428b      	cmp	r3, r1
 80121da:	ed42 7a01 	vstr	s15, [r2, #-4]
 80121de:	f47f af7b 	bne.w	80120d8 <kalman_3gyro.constprop.0+0x2888>
 80121e2:	eef5 da40 	vcmp.f32	s27, #0.0
 80121e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ea:	edd9 8a00 	vldr	s17, [r9]
 80121ee:	f040 8543 	bne.w	8012c78 <kalman_3gyro.constprop.0+0x3428>
 80121f2:	eef0 7a6d 	vmov.f32	s15, s27
 80121f6:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80121fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121fe:	ed99 9a01 	vldr	s18, [r9, #4]
 8012202:	d006      	beq.n	8012212 <kalman_3gyro.constprop.0+0x29c2>
 8012204:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801220c:	bf18      	it	ne
 801220e:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 8012212:	eef5 ea40 	vcmp.f32	s29, #0.0
 8012216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801221a:	edd9 aa02 	vldr	s21, [r9, #8]
 801221e:	d006      	beq.n	801222e <kalman_3gyro.constprop.0+0x29de>
 8012220:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012228:	bf18      	it	ne
 801222a:	eeea 7aae 	vfmane.f32	s15, s21, s29
 801222e:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8012232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012236:	edd9 ba03 	vldr	s23, [r9, #12]
 801223a:	d006      	beq.n	801224a <kalman_3gyro.constprop.0+0x29fa>
 801223c:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012244:	bf18      	it	ne
 8012246:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 801224a:	eef5 fa40 	vcmp.f32	s31, #0.0
 801224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012252:	edd9 ca04 	vldr	s25, [r9, #16]
 8012256:	d006      	beq.n	8012266 <kalman_3gyro.constprop.0+0x2a16>
 8012258:	eef5 ca40 	vcmp.f32	s25, #0.0
 801225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012260:	bf18      	it	ne
 8012262:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 8012266:	eef5 6a40 	vcmp.f32	s13, #0.0
 801226a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801226e:	ed99 ca05 	vldr	s24, [r9, #20]
 8012272:	d006      	beq.n	8012282 <kalman_3gyro.constprop.0+0x2a32>
 8012274:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801227c:	bf18      	it	ne
 801227e:	eeec 7a26 	vfmane.f32	s15, s24, s13
 8012282:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801228a:	ed99 da06 	vldr	s26, [r9, #24]
 801228e:	d006      	beq.n	801229e <kalman_3gyro.constprop.0+0x2a4e>
 8012290:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012298:	bf18      	it	ne
 801229a:	eeed 7a06 	vfmane.f32	s15, s26, s12
 801229e:	eef5 5a40 	vcmp.f32	s11, #0.0
 80122a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122a6:	ed99 aa07 	vldr	s20, [r9, #28]
 80122aa:	d006      	beq.n	80122ba <kalman_3gyro.constprop.0+0x2a6a>
 80122ac:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80122b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122b4:	bf18      	it	ne
 80122b6:	eeea 7a25 	vfmane.f32	s15, s20, s11
 80122ba:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80122be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122c2:	ed99 ba08 	vldr	s22, [r9, #32]
 80122c6:	d006      	beq.n	80122d6 <kalman_3gyro.constprop.0+0x2a86>
 80122c8:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80122cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122d0:	bf18      	it	ne
 80122d2:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 80122d6:	ab87      	add	r3, sp, #540	; 0x21c
 80122d8:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 80122dc:	ed92 7a00 	vldr	s14, [r2]
 80122e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80122e4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80122e8:	eec4 7a87 	vdiv.f32	s15, s9, s14
 80122ec:	2d05      	cmp	r5, #5
 80122ee:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80122f2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80122f6:	ee29 9a27 	vmul.f32	s18, s18, s15
 80122fa:	ee6a aaa7 	vmul.f32	s21, s21, s15
 80122fe:	ee6b baa7 	vmul.f32	s23, s23, s15
 8012302:	ee6c caa7 	vmul.f32	s25, s25, s15
 8012306:	ee2c ca27 	vmul.f32	s24, s24, s15
 801230a:	ee2d da27 	vmul.f32	s26, s26, s15
 801230e:	ee2a aa27 	vmul.f32	s20, s20, s15
 8012312:	ee2b ba27 	vmul.f32	s22, s22, s15
 8012316:	edc9 8a00 	vstr	s17, [r9]
 801231a:	ed89 9a01 	vstr	s18, [r9, #4]
 801231e:	edc9 aa02 	vstr	s21, [r9, #8]
 8012322:	edc9 ba03 	vstr	s23, [r9, #12]
 8012326:	edc9 ca04 	vstr	s25, [r9, #16]
 801232a:	ed89 ca05 	vstr	s24, [r9, #20]
 801232e:	ed89 da06 	vstr	s26, [r9, #24]
 8012332:	ed89 aa07 	vstr	s20, [r9, #28]
 8012336:	ed89 ba08 	vstr	s22, [r9, #32]
 801233a:	f340 8497 	ble.w	8012c6c <kalman_3gyro.constprop.0+0x341c>
 801233e:	eef5 da40 	vcmp.f32	s27, #0.0
 8012342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012346:	f000 8510 	beq.w	8012d6a <kalman_3gyro.constprop.0+0x351a>
 801234a:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 801234e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012356:	d001      	beq.n	801235c <kalman_3gyro.constprop.0+0x2b0c>
 8012358:	ee67 7aad 	vmul.f32	s15, s15, s27
 801235c:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8012360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012364:	d008      	beq.n	8012378 <kalman_3gyro.constprop.0+0x2b28>
 8012366:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 801236a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801236e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012372:	bf18      	it	ne
 8012374:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 8012378:	eef5 ea40 	vcmp.f32	s29, #0.0
 801237c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012380:	d008      	beq.n	8012394 <kalman_3gyro.constprop.0+0x2b44>
 8012382:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 8012386:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801238a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801238e:	bf18      	it	ne
 8012390:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8012394:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8012398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801239c:	d008      	beq.n	80123b0 <kalman_3gyro.constprop.0+0x2b60>
 801239e:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 80123a2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80123a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123aa:	bf18      	it	ne
 80123ac:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 80123b0:	eef5 fa40 	vcmp.f32	s31, #0.0
 80123b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b8:	d008      	beq.n	80123cc <kalman_3gyro.constprop.0+0x2b7c>
 80123ba:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 80123be:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80123c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123c6:	bf18      	it	ne
 80123c8:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 80123cc:	eef5 6a40 	vcmp.f32	s13, #0.0
 80123d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123d4:	d008      	beq.n	80123e8 <kalman_3gyro.constprop.0+0x2b98>
 80123d6:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 80123da:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80123de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e2:	bf18      	it	ne
 80123e4:	eee7 7a26 	vfmane.f32	s15, s14, s13
 80123e8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80123ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123f0:	d008      	beq.n	8012404 <kalman_3gyro.constprop.0+0x2bb4>
 80123f2:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 80123f6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80123fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123fe:	bf18      	it	ne
 8012400:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8012404:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801240c:	d008      	beq.n	8012420 <kalman_3gyro.constprop.0+0x2bd0>
 801240e:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 8012412:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801241a:	bf18      	it	ne
 801241c:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8012420:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012428:	d008      	beq.n	801243c <kalman_3gyro.constprop.0+0x2bec>
 801242a:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 801242e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012436:	bf18      	it	ne
 8012438:	eee7 7a05 	vfmane.f32	s15, s14, s10
 801243c:	aa7b      	add	r2, sp, #492	; 0x1ec
 801243e:	4413      	add	r3, r2
 8012440:	edd3 9a00 	vldr	s19, [r3]
 8012444:	ee79 9ae7 	vsub.f32	s19, s19, s15
 8012448:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801244c:	2100      	movs	r1, #0
 801244e:	4650      	mov	r0, sl
 8012450:	ed8d 5a05 	vstr	s10, [sp, #20]
 8012454:	edcd 5a04 	vstr	s11, [sp, #16]
 8012458:	ed8d 6a03 	vstr	s12, [sp, #12]
 801245c:	edcd 6a02 	vstr	s13, [sp, #8]
 8012460:	f006 f86c 	bl	801853c <memset>
 8012464:	ed9d 5a05 	vldr	s10, [sp, #20]
 8012468:	eddd 5a04 	vldr	s11, [sp, #16]
 801246c:	ed9d 6a03 	vldr	s12, [sp, #12]
 8012470:	eddd 6a02 	vldr	s13, [sp, #8]
 8012474:	4651      	mov	r1, sl
 8012476:	f109 0224 	add.w	r2, r9, #36	; 0x24
 801247a:	4653      	mov	r3, sl
 801247c:	ecf6 7a01 	vldmia	r6!, {s15}
 8012480:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012488:	d062      	beq.n	8012550 <kalman_3gyro.constprop.0+0x2d00>
 801248a:	eef5 da40 	vcmp.f32	s27, #0.0
 801248e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012492:	d005      	beq.n	80124a0 <kalman_3gyro.constprop.0+0x2c50>
 8012494:	ed93 7a00 	vldr	s14, [r3]
 8012498:	eead 7aa7 	vfma.f32	s14, s27, s15
 801249c:	ed83 7a00 	vstr	s14, [r3]
 80124a0:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80124a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124a8:	d005      	beq.n	80124b6 <kalman_3gyro.constprop.0+0x2c66>
 80124aa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80124ae:	eeae 7a27 	vfma.f32	s14, s28, s15
 80124b2:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 80124b6:	eef5 ea40 	vcmp.f32	s29, #0.0
 80124ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124be:	d005      	beq.n	80124cc <kalman_3gyro.constprop.0+0x2c7c>
 80124c0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80124c4:	eeae 7aa7 	vfma.f32	s14, s29, s15
 80124c8:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 80124cc:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80124d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124d4:	d005      	beq.n	80124e2 <kalman_3gyro.constprop.0+0x2c92>
 80124d6:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80124da:	eeaf 7a27 	vfma.f32	s14, s30, s15
 80124de:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 80124e2:	eef5 fa40 	vcmp.f32	s31, #0.0
 80124e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ea:	d005      	beq.n	80124f8 <kalman_3gyro.constprop.0+0x2ca8>
 80124ec:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80124f0:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 80124f4:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 80124f8:	eef5 6a40 	vcmp.f32	s13, #0.0
 80124fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012500:	d005      	beq.n	801250e <kalman_3gyro.constprop.0+0x2cbe>
 8012502:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8012506:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801250a:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 801250e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012516:	d005      	beq.n	8012524 <kalman_3gyro.constprop.0+0x2cd4>
 8012518:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 801251c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012520:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 8012524:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801252c:	d005      	beq.n	801253a <kalman_3gyro.constprop.0+0x2cea>
 801252e:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 8012532:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012536:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 801253a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012542:	d005      	beq.n	8012550 <kalman_3gyro.constprop.0+0x2d00>
 8012544:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 8012548:	eea5 7a27 	vfma.f32	s14, s10, s15
 801254c:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 8012550:	4296      	cmp	r6, r2
 8012552:	f103 0304 	add.w	r3, r3, #4
 8012556:	d191      	bne.n	801247c <kalman_3gyro.constprop.0+0x2c2c>
 8012558:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 801255c:	4656      	mov	r6, sl
 801255e:	463b      	mov	r3, r7
 8012560:	2208      	movs	r2, #8
 8012562:	2000      	movs	r0, #0
 8012564:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012568:	e074      	b.n	8012654 <kalman_3gyro.constprop.0+0x2e04>
 801256a:	edd6 7a00 	vldr	s15, [r6]
 801256e:	ed83 8a01 	vstr	s16, [r3, #4]
 8012572:	eef1 7a67 	vneg.f32	s15, s15
 8012576:	2801      	cmp	r0, #1
 8012578:	edc6 7a00 	vstr	s15, [r6]
 801257c:	f1a2 0c07 	sub.w	ip, r2, #7
 8012580:	f000 831e 	beq.w	8012bc0 <kalman_3gyro.constprop.0+0x3370>
 8012584:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8012588:	eddc 7a00 	vldr	s15, [ip]
 801258c:	ed83 8a02 	vstr	s16, [r3, #8]
 8012590:	eef1 7a67 	vneg.f32	s15, s15
 8012594:	2802      	cmp	r0, #2
 8012596:	edcc 7a00 	vstr	s15, [ip]
 801259a:	f1a2 0c06 	sub.w	ip, r2, #6
 801259e:	f000 82f8 	beq.w	8012b92 <kalman_3gyro.constprop.0+0x3342>
 80125a2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 80125a6:	eddc 7a00 	vldr	s15, [ip]
 80125aa:	ed83 8a03 	vstr	s16, [r3, #12]
 80125ae:	eef1 7a67 	vneg.f32	s15, s15
 80125b2:	2803      	cmp	r0, #3
 80125b4:	edcc 7a00 	vstr	s15, [ip]
 80125b8:	f1a2 0c05 	sub.w	ip, r2, #5
 80125bc:	d170      	bne.n	80126a0 <kalman_3gyro.constprop.0+0x2e50>
 80125be:	edd6 7a03 	vldr	s15, [r6, #12]
 80125c2:	ed83 8a04 	vstr	s16, [r3, #16]
 80125c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80125ca:	f1a2 0e04 	sub.w	lr, r2, #4
 80125ce:	edc6 7a03 	vstr	s15, [r6, #12]
 80125d2:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 80125d6:	edde 7a00 	vldr	s15, [lr]
 80125da:	ed83 8a05 	vstr	s16, [r3, #20]
 80125de:	eef1 7a67 	vneg.f32	s15, s15
 80125e2:	f1a2 0c03 	sub.w	ip, r2, #3
 80125e6:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 80125ea:	edce 7a00 	vstr	s15, [lr]
 80125ee:	eddc 7a00 	vldr	s15, [ip]
 80125f2:	ed83 8a06 	vstr	s16, [r3, #24]
 80125f6:	eef1 7a67 	vneg.f32	s15, s15
 80125fa:	edcc 7a00 	vstr	s15, [ip]
 80125fe:	f1a2 0c02 	sub.w	ip, r2, #2
 8012602:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8012606:	eddc 7a00 	vldr	s15, [ip]
 801260a:	ed83 8a07 	vstr	s16, [r3, #28]
 801260e:	eef1 7a67 	vneg.f32	s15, s15
 8012612:	2807      	cmp	r0, #7
 8012614:	edcc 7a00 	vstr	s15, [ip]
 8012618:	f102 3cff 	add.w	ip, r2, #4294967295
 801261c:	f040 80a2 	bne.w	8012764 <kalman_3gyro.constprop.0+0x2f14>
 8012620:	edd6 7a07 	vldr	s15, [r6, #28]
 8012624:	ed83 8a08 	vstr	s16, [r3, #32]
 8012628:	ee77 7a67 	vsub.f32	s15, s14, s15
 801262c:	edc6 7a07 	vstr	s15, [r6, #28]
 8012630:	eb0a 0c82 	add.w	ip, sl, r2, lsl #2
 8012634:	eddc 7a00 	vldr	s15, [ip]
 8012638:	3001      	adds	r0, #1
 801263a:	eef1 7a67 	vneg.f32	s15, s15
 801263e:	2809      	cmp	r0, #9
 8012640:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8012644:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8012648:	f102 0209 	add.w	r2, r2, #9
 801264c:	edcc 7a00 	vstr	s15, [ip]
 8012650:	f000 809f 	beq.w	8012792 <kalman_3gyro.constprop.0+0x2f42>
 8012654:	ed83 8a00 	vstr	s16, [r3]
 8012658:	2800      	cmp	r0, #0
 801265a:	d186      	bne.n	801256a <kalman_3gyro.constprop.0+0x2d1a>
 801265c:	edda 7a00 	vldr	s15, [sl]
 8012660:	ed83 8a01 	vstr	s16, [r3, #4]
 8012664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012668:	f1a2 0e07 	sub.w	lr, r2, #7
 801266c:	edc6 7a00 	vstr	s15, [r6]
 8012670:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012674:	edde 7a00 	vldr	s15, [lr]
 8012678:	ed83 8a02 	vstr	s16, [r3, #8]
 801267c:	eef1 7a67 	vneg.f32	s15, s15
 8012680:	f1a2 0c06 	sub.w	ip, r2, #6
 8012684:	edce 7a00 	vstr	s15, [lr]
 8012688:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 801268c:	eddc 7a00 	vldr	s15, [ip]
 8012690:	ed83 8a03 	vstr	s16, [r3, #12]
 8012694:	eef1 7a67 	vneg.f32	s15, s15
 8012698:	edcc 7a00 	vstr	s15, [ip]
 801269c:	f1a2 0c05 	sub.w	ip, r2, #5
 80126a0:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 80126a4:	eddc 7a00 	vldr	s15, [ip]
 80126a8:	ed83 8a04 	vstr	s16, [r3, #16]
 80126ac:	eef1 7a67 	vneg.f32	s15, s15
 80126b0:	2804      	cmp	r0, #4
 80126b2:	edcc 7a00 	vstr	s15, [ip]
 80126b6:	f1a2 0c04 	sub.w	ip, r2, #4
 80126ba:	d031      	beq.n	8012720 <kalman_3gyro.constprop.0+0x2ed0>
 80126bc:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 80126c0:	eddc 7a00 	vldr	s15, [ip]
 80126c4:	ed83 8a05 	vstr	s16, [r3, #20]
 80126c8:	eef1 7a67 	vneg.f32	s15, s15
 80126cc:	2805      	cmp	r0, #5
 80126ce:	edcc 7a00 	vstr	s15, [ip]
 80126d2:	f1a2 0c03 	sub.w	ip, r2, #3
 80126d6:	f000 8245 	beq.w	8012b64 <kalman_3gyro.constprop.0+0x3314>
 80126da:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 80126de:	eddc 7a00 	vldr	s15, [ip]
 80126e2:	ed83 8a06 	vstr	s16, [r3, #24]
 80126e6:	eef1 7a67 	vneg.f32	s15, s15
 80126ea:	2806      	cmp	r0, #6
 80126ec:	edcc 7a00 	vstr	s15, [ip]
 80126f0:	f1a2 0c02 	sub.w	ip, r2, #2
 80126f4:	d185      	bne.n	8012602 <kalman_3gyro.constprop.0+0x2db2>
 80126f6:	edd6 7a06 	vldr	s15, [r6, #24]
 80126fa:	ed83 8a07 	vstr	s16, [r3, #28]
 80126fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012702:	f102 3cff 	add.w	ip, r2, #4294967295
 8012706:	edc6 7a06 	vstr	s15, [r6, #24]
 801270a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 801270e:	eddc 7a00 	vldr	s15, [ip]
 8012712:	ed83 8a08 	vstr	s16, [r3, #32]
 8012716:	eef1 7a67 	vneg.f32	s15, s15
 801271a:	edcc 7a00 	vstr	s15, [ip]
 801271e:	e787      	b.n	8012630 <kalman_3gyro.constprop.0+0x2de0>
 8012720:	edd6 7a04 	vldr	s15, [r6, #16]
 8012724:	ed83 8a05 	vstr	s16, [r3, #20]
 8012728:	ee77 7a67 	vsub.f32	s15, s14, s15
 801272c:	f1a2 0e03 	sub.w	lr, r2, #3
 8012730:	edc6 7a04 	vstr	s15, [r6, #16]
 8012734:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012738:	edde 7a00 	vldr	s15, [lr]
 801273c:	ed83 8a06 	vstr	s16, [r3, #24]
 8012740:	eef1 7a67 	vneg.f32	s15, s15
 8012744:	f1a2 0c02 	sub.w	ip, r2, #2
 8012748:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 801274c:	edce 7a00 	vstr	s15, [lr]
 8012750:	eddc 7a00 	vldr	s15, [ip]
 8012754:	ed83 8a07 	vstr	s16, [r3, #28]
 8012758:	eef1 7a67 	vneg.f32	s15, s15
 801275c:	edcc 7a00 	vstr	s15, [ip]
 8012760:	f102 3cff 	add.w	ip, r2, #4294967295
 8012764:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8012768:	eddc 7a00 	vldr	s15, [ip]
 801276c:	ed83 8a08 	vstr	s16, [r3, #32]
 8012770:	eef1 7a67 	vneg.f32	s15, s15
 8012774:	2808      	cmp	r0, #8
 8012776:	edcc 7a00 	vstr	s15, [ip]
 801277a:	f47f af59 	bne.w	8012630 <kalman_3gyro.constprop.0+0x2de0>
 801277e:	ed96 7a08 	vldr	s14, [r6, #32]
 8012782:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012786:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801278a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801278e:	edc2 7a00 	vstr	s15, [r2]
 8012792:	2000      	movs	r0, #0
 8012794:	f50b 76a2 	add.w	r6, fp, #324	; 0x144
 8012798:	ecb1 3a01 	vldmia	r1!, {s6}
 801279c:	edd1 3a08 	vldr	s7, [r1, #32]
 80127a0:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 80127a4:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 80127a8:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 80127ac:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 80127b0:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 80127b4:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 80127b8:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 80127bc:	465a      	mov	r2, fp
 80127be:	463b      	mov	r3, r7
 80127c0:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80127c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127c8:	d00c      	beq.n	80127e4 <kalman_3gyro.constprop.0+0x2f94>
 80127ca:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 80127ce:	eef5 2a40 	vcmp.f32	s5, #0.0
 80127d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127d6:	d005      	beq.n	80127e4 <kalman_3gyro.constprop.0+0x2f94>
 80127d8:	edd3 7a00 	vldr	s15, [r3]
 80127dc:	eee3 7a22 	vfma.f32	s15, s6, s5
 80127e0:	edc3 7a00 	vstr	s15, [r3]
 80127e4:	eef5 3a40 	vcmp.f32	s7, #0.0
 80127e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ec:	d00c      	beq.n	8012808 <kalman_3gyro.constprop.0+0x2fb8>
 80127ee:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 80127f2:	eef5 2a40 	vcmp.f32	s5, #0.0
 80127f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127fa:	d005      	beq.n	8012808 <kalman_3gyro.constprop.0+0x2fb8>
 80127fc:	edd3 7a00 	vldr	s15, [r3]
 8012800:	eee3 7aa2 	vfma.f32	s15, s7, s5
 8012804:	edc3 7a00 	vstr	s15, [r3]
 8012808:	eeb5 4a40 	vcmp.f32	s8, #0.0
 801280c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012810:	d00c      	beq.n	801282c <kalman_3gyro.constprop.0+0x2fdc>
 8012812:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 8012816:	eef5 2a40 	vcmp.f32	s5, #0.0
 801281a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801281e:	d005      	beq.n	801282c <kalman_3gyro.constprop.0+0x2fdc>
 8012820:	edd3 7a00 	vldr	s15, [r3]
 8012824:	eee4 7a22 	vfma.f32	s15, s8, s5
 8012828:	edc3 7a00 	vstr	s15, [r3]
 801282c:	eef5 4a40 	vcmp.f32	s9, #0.0
 8012830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012834:	d00c      	beq.n	8012850 <kalman_3gyro.constprop.0+0x3000>
 8012836:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 801283a:	eef5 2a40 	vcmp.f32	s5, #0.0
 801283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012842:	d005      	beq.n	8012850 <kalman_3gyro.constprop.0+0x3000>
 8012844:	edd3 7a00 	vldr	s15, [r3]
 8012848:	eee4 7aa2 	vfma.f32	s15, s9, s5
 801284c:	edc3 7a00 	vstr	s15, [r3]
 8012850:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012858:	d00c      	beq.n	8012874 <kalman_3gyro.constprop.0+0x3024>
 801285a:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 801285e:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012866:	d005      	beq.n	8012874 <kalman_3gyro.constprop.0+0x3024>
 8012868:	edd3 7a00 	vldr	s15, [r3]
 801286c:	eee5 7a22 	vfma.f32	s15, s10, s5
 8012870:	edc3 7a00 	vstr	s15, [r3]
 8012874:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801287c:	d00c      	beq.n	8012898 <kalman_3gyro.constprop.0+0x3048>
 801287e:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 8012882:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801288a:	d005      	beq.n	8012898 <kalman_3gyro.constprop.0+0x3048>
 801288c:	edd3 7a00 	vldr	s15, [r3]
 8012890:	eee5 7aa2 	vfma.f32	s15, s11, s5
 8012894:	edc3 7a00 	vstr	s15, [r3]
 8012898:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801289c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a0:	d00c      	beq.n	80128bc <kalman_3gyro.constprop.0+0x306c>
 80128a2:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 80128a6:	eef5 2a40 	vcmp.f32	s5, #0.0
 80128aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ae:	d005      	beq.n	80128bc <kalman_3gyro.constprop.0+0x306c>
 80128b0:	edd3 7a00 	vldr	s15, [r3]
 80128b4:	eee6 7a22 	vfma.f32	s15, s12, s5
 80128b8:	edc3 7a00 	vstr	s15, [r3]
 80128bc:	eef5 6a40 	vcmp.f32	s13, #0.0
 80128c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128c4:	d00c      	beq.n	80128e0 <kalman_3gyro.constprop.0+0x3090>
 80128c6:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 80128ca:	eef5 2a40 	vcmp.f32	s5, #0.0
 80128ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128d2:	d005      	beq.n	80128e0 <kalman_3gyro.constprop.0+0x3090>
 80128d4:	edd3 7a00 	vldr	s15, [r3]
 80128d8:	eee6 7aa2 	vfma.f32	s15, s13, s5
 80128dc:	edc3 7a00 	vstr	s15, [r3]
 80128e0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80128e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128e8:	d00c      	beq.n	8012904 <kalman_3gyro.constprop.0+0x30b4>
 80128ea:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 80128ee:	eef5 2a40 	vcmp.f32	s5, #0.0
 80128f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128f6:	d005      	beq.n	8012904 <kalman_3gyro.constprop.0+0x30b4>
 80128f8:	edd3 7a00 	vldr	s15, [r3]
 80128fc:	eee7 7a22 	vfma.f32	s15, s14, s5
 8012900:	edc3 7a00 	vstr	s15, [r3]
 8012904:	3224      	adds	r2, #36	; 0x24
 8012906:	4296      	cmp	r6, r2
 8012908:	f103 0324 	add.w	r3, r3, #36	; 0x24
 801290c:	f47f af58 	bne.w	80127c0 <kalman_3gyro.constprop.0+0x2f70>
 8012910:	3001      	adds	r0, #1
 8012912:	2809      	cmp	r0, #9
 8012914:	f107 0704 	add.w	r7, r7, #4
 8012918:	f47f af3e 	bne.w	8012798 <kalman_3gyro.constprop.0+0x2f48>
 801291c:	9801      	ldr	r0, [sp, #4]
 801291e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8012922:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8012926:	f005 fdfb 	bl	8018520 <memcpy>
 801292a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801292e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012932:	f000 817c 	beq.w	8012c2e <kalman_3gyro.constprop.0+0x33de>
 8012936:	eef5 9a40 	vcmp.f32	s19, #0.0
 801293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801293e:	f000 8176 	beq.w	8012c2e <kalman_3gyro.constprop.0+0x33de>
 8012942:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801294a:	ee69 8aa8 	vmul.f32	s17, s19, s17
 801294e:	f040 8212 	bne.w	8012d76 <kalman_3gyro.constprop.0+0x3526>
 8012952:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801295a:	f000 8177 	beq.w	8012c4c <kalman_3gyro.constprop.0+0x33fc>
 801295e:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012966:	ee29 7aaa 	vmul.f32	s14, s19, s21
 801296a:	f040 81cb 	bne.w	8012d04 <kalman_3gyro.constprop.0+0x34b4>
 801296e:	eef0 ba47 	vmov.f32	s23, s14
 8012972:	eef0 aa49 	vmov.f32	s21, s18
 8012976:	eef5 ca40 	vcmp.f32	s25, #0.0
 801297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801297e:	f000 8138 	beq.w	8012bf2 <kalman_3gyro.constprop.0+0x33a2>
 8012982:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801298a:	f000 824e 	beq.w	8012e2a <kalman_3gyro.constprop.0+0x35da>
 801298e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012996:	ee29 7aac 	vmul.f32	s14, s19, s25
 801299a:	eef0 7a48 	vmov.f32	s15, s16
 801299e:	f040 81c5 	bne.w	8012d2c <kalman_3gyro.constprop.0+0x34dc>
 80129a2:	eeb0 ca47 	vmov.f32	s24, s14
 80129a6:	eef0 ca67 	vmov.f32	s25, s15
 80129aa:	eeb5 da40 	vcmp.f32	s26, #0.0
 80129ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129b2:	f000 8179 	beq.w	8012ca8 <kalman_3gyro.constprop.0+0x3458>
 80129b6:	eef5 9a40 	vcmp.f32	s19, #0.0
 80129ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129be:	f000 8125 	beq.w	8012c0c <kalman_3gyro.constprop.0+0x33bc>
 80129c2:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80129c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ca:	ee29 7a8d 	vmul.f32	s14, s19, s26
 80129ce:	eef0 7a48 	vmov.f32	s15, s16
 80129d2:	f040 81be 	bne.w	8012d52 <kalman_3gyro.constprop.0+0x3502>
 80129d6:	eeb0 aa47 	vmov.f32	s20, s14
 80129da:	eeb0 da67 	vmov.f32	s26, s15
 80129de:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80129e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e6:	f000 811f 	beq.w	8012c28 <kalman_3gyro.constprop.0+0x33d8>
 80129ea:	eef5 9a40 	vcmp.f32	s19, #0.0
 80129ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f2:	f000 821d 	beq.w	8012e30 <kalman_3gyro.constprop.0+0x35e0>
 80129f6:	eef0 7a48 	vmov.f32	s15, s16
 80129fa:	ee2b ba29 	vmul.f32	s22, s22, s19
 80129fe:	eef0 9a67 	vmov.f32	s19, s15
 8012a02:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 8012a06:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 8012a0a:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 8012a0e:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 8012a12:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 8012a16:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 8012a1a:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 8012a1e:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 8012a22:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 8012a26:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8012a2a:	ee74 aa2a 	vadd.f32	s21, s8, s21
 8012a2e:	ee74 baab 	vadd.f32	s23, s9, s23
 8012a32:	ee75 ca2c 	vadd.f32	s25, s10, s25
 8012a36:	ee35 ca8c 	vadd.f32	s24, s11, s24
 8012a3a:	ee36 da0d 	vadd.f32	s26, s12, s26
 8012a3e:	ee36 aa8a 	vadd.f32	s20, s13, s20
 8012a42:	ee77 9a29 	vadd.f32	s19, s14, s19
 8012a46:	ee37 ba8b 	vadd.f32	s22, s15, s22
 8012a4a:	3501      	adds	r5, #1
 8012a4c:	2d0c      	cmp	r5, #12
 8012a4e:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 8012a52:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 8012a56:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 8012a5a:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 8012a5e:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 8012a62:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 8012a66:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 8012a6a:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 8012a6e:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 8012a72:	f104 0404 	add.w	r4, r4, #4
 8012a76:	f47f ab02 	bne.w	801207e <kalman_3gyro.constprop.0+0x282e>
 8012a7a:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 8012a7e:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 8012a82:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 8012a86:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8012a8a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012a8e:	eee6 7a06 	vfma.f32	s15, s12, s12
 8012a92:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012a96:	eef4 7ae5 	vcmpe.f32	s15, s11
 8012a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a9e:	f100 81b5 	bmi.w	8012e0c <kalman_3gyro.constprop.0+0x35bc>
 8012aa2:	eef1 4ae7 	vsqrt.f32	s9, s15
 8012aa6:	ed9f 5ae4 	vldr	s10, [pc, #912]	; 8012e38 <kalman_3gyro.constprop.0+0x35e8>
 8012aaa:	eec5 7aa4 	vdiv.f32	s15, s11, s9
 8012aae:	ee67 4a86 	vmul.f32	s9, s15, s12
 8012ab2:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8012ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012aba:	f8dd 3834 	ldr.w	r3, [sp, #2100]	; 0x834
 8012abe:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 8012ac2:	aa36      	add	r2, sp, #216	; 0xd8
 8012ac4:	edc3 4a00 	vstr	s9, [r3]
 8012ac8:	edc3 5a01 	vstr	s11, [r3, #4]
 8012acc:	edc3 7a02 	vstr	s15, [r3, #8]
 8012ad0:	ed83 5a03 	vstr	s10, [r3, #12]
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	4611      	mov	r1, r2
 8012ad8:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 8012adc:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
 8012ae0:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 8012ae4:	f7fb fdbc 	bl	800e660 <qmult>
 8012ae8:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 8012aec:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 8012af0:	eddd 6a38 	vldr	s13, [sp, #224]	; 0xe0
 8012af4:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 8012af8:	f8dd 3830 	ldr.w	r3, [sp, #2096]	; 0x830
 8012afc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012afe:	ee66 7a06 	vmul.f32	s15, s12, s12
 8012b02:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8012b06:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8012b0a:	ae54      	add	r6, sp, #336	; 0x150
 8012b0c:	af5c      	add	r7, sp, #368	; 0x170
 8012b0e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8012b12:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012b16:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8012b1a:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8012b1e:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8012b22:	ee26 6a27 	vmul.f32	s12, s12, s15
 8012b26:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012b2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012b2e:	edc3 5a00 	vstr	s11, [r3]
 8012b32:	ed83 6a01 	vstr	s12, [r3, #4]
 8012b36:	edc3 6a02 	vstr	s13, [r3, #8]
 8012b3a:	ed83 7a03 	vstr	s14, [r3, #12]
 8012b3e:	4634      	mov	r4, r6
 8012b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b42:	42bc      	cmp	r4, r7
 8012b44:	6028      	str	r0, [r5, #0]
 8012b46:	6069      	str	r1, [r5, #4]
 8012b48:	60aa      	str	r2, [r5, #8]
 8012b4a:	60eb      	str	r3, [r5, #12]
 8012b4c:	4626      	mov	r6, r4
 8012b4e:	f105 0510 	add.w	r5, r5, #16
 8012b52:	d1f4      	bne.n	8012b3e <kalman_3gyro.constprop.0+0x32ee>
 8012b54:	6820      	ldr	r0, [r4, #0]
 8012b56:	6028      	str	r0, [r5, #0]
 8012b58:	f20d 7dcc 	addw	sp, sp, #1996	; 0x7cc
 8012b5c:	ecbd 8b10 	vpop	{d8-d15}
 8012b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b64:	edd6 7a05 	vldr	s15, [r6, #20]
 8012b68:	ed83 8a06 	vstr	s16, [r3, #24]
 8012b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b70:	f1a2 0e02 	sub.w	lr, r2, #2
 8012b74:	edc6 7a05 	vstr	s15, [r6, #20]
 8012b78:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012b7c:	edde 7a00 	vldr	s15, [lr]
 8012b80:	ed83 8a07 	vstr	s16, [r3, #28]
 8012b84:	eef1 7a67 	vneg.f32	s15, s15
 8012b88:	f102 3cff 	add.w	ip, r2, #4294967295
 8012b8c:	edce 7a00 	vstr	s15, [lr]
 8012b90:	e5bb      	b.n	801270a <kalman_3gyro.constprop.0+0x2eba>
 8012b92:	edd6 7a02 	vldr	s15, [r6, #8]
 8012b96:	ed83 8a03 	vstr	s16, [r3, #12]
 8012b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b9e:	f1a2 0c05 	sub.w	ip, r2, #5
 8012ba2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8012ba6:	edc6 7a02 	vstr	s15, [r6, #8]
 8012baa:	eddc 7a00 	vldr	s15, [ip]
 8012bae:	ed83 8a04 	vstr	s16, [r3, #16]
 8012bb2:	eef1 7a67 	vneg.f32	s15, s15
 8012bb6:	edcc 7a00 	vstr	s15, [ip]
 8012bba:	f1a2 0c04 	sub.w	ip, r2, #4
 8012bbe:	e57d      	b.n	80126bc <kalman_3gyro.constprop.0+0x2e6c>
 8012bc0:	edd6 7a01 	vldr	s15, [r6, #4]
 8012bc4:	ed83 8a02 	vstr	s16, [r3, #8]
 8012bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012bcc:	f1a2 0c06 	sub.w	ip, r2, #6
 8012bd0:	edc6 7a01 	vstr	s15, [r6, #4]
 8012bd4:	e558      	b.n	8012688 <kalman_3gyro.constprop.0+0x2e38>
 8012bd6:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bde:	ee69 7aab 	vmul.f32	s15, s19, s23
 8012be2:	eeb0 7a48 	vmov.f32	s14, s16
 8012be6:	f040 8097 	bne.w	8012d18 <kalman_3gyro.constprop.0+0x34c8>
 8012bea:	eef0 ca67 	vmov.f32	s25, s15
 8012bee:	eef0 ba47 	vmov.f32	s23, s14
 8012bf2:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bfa:	f43f aed6 	beq.w	80129aa <kalman_3gyro.constprop.0+0x315a>
 8012bfe:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c06:	d142      	bne.n	8012c8e <kalman_3gyro.constprop.0+0x343e>
 8012c08:	eeb0 ca69 	vmov.f32	s24, s19
 8012c0c:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c14:	f040 80ba 	bne.w	8012d8c <kalman_3gyro.constprop.0+0x353c>
 8012c18:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c20:	eeb0 da4a 	vmov.f32	s26, s20
 8012c24:	f47f aee1 	bne.w	80129ea <kalman_3gyro.constprop.0+0x319a>
 8012c28:	eef0 9a4b 	vmov.f32	s19, s22
 8012c2c:	e6e9      	b.n	8012a02 <kalman_3gyro.constprop.0+0x31b2>
 8012c2e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c36:	d051      	beq.n	8012cdc <kalman_3gyro.constprop.0+0x348c>
 8012c38:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c40:	f040 8097 	bne.w	8012d72 <kalman_3gyro.constprop.0+0x3522>
 8012c44:	eef0 aa69 	vmov.f32	s21, s19
 8012c48:	eef0 8a69 	vmov.f32	s17, s19
 8012c4c:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c54:	f43f ae8f 	beq.w	8012976 <kalman_3gyro.constprop.0+0x3126>
 8012c58:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c60:	d1b9      	bne.n	8012bd6 <kalman_3gyro.constprop.0+0x3386>
 8012c62:	eef0 ca69 	vmov.f32	s25, s19
 8012c66:	eef0 ba69 	vmov.f32	s23, s19
 8012c6a:	e7c2      	b.n	8012bf2 <kalman_3gyro.constprop.0+0x33a2>
 8012c6c:	aa7b      	add	r2, sp, #492	; 0x1ec
 8012c6e:	4413      	add	r3, r2
 8012c70:	edd3 9a00 	vldr	s19, [r3]
 8012c74:	f7ff bbe8 	b.w	8012448 <kalman_3gyro.constprop.0+0x2bf8>
 8012c78:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c80:	bf14      	ite	ne
 8012c82:	ee68 7aad 	vmulne.f32	s15, s17, s27
 8012c86:	eef0 7a68 	vmoveq.f32	s15, s17
 8012c8a:	f7ff bab4 	b.w	80121f6 <kalman_3gyro.constprop.0+0x29a6>
 8012c8e:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c96:	ee69 7a8c 	vmul.f32	s15, s19, s24
 8012c9a:	eeb0 7a48 	vmov.f32	s14, s16
 8012c9e:	d14e      	bne.n	8012d3e <kalman_3gyro.constprop.0+0x34ee>
 8012ca0:	eeb0 da67 	vmov.f32	s26, s15
 8012ca4:	eeb0 ca47 	vmov.f32	s24, s14
 8012ca8:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb0:	f43f ae95 	beq.w	80129de <kalman_3gyro.constprop.0+0x318e>
 8012cb4:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cbc:	f000 84bd 	beq.w	801363a <kalman_3gyro.constprop.0+0x3dea>
 8012cc0:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cc8:	ee69 7a8a 	vmul.f32	s15, s19, s20
 8012ccc:	eeb0 7a48 	vmov.f32	s14, s16
 8012cd0:	d148      	bne.n	8012d64 <kalman_3gyro.constprop.0+0x3514>
 8012cd2:	eef0 9a67 	vmov.f32	s19, s15
 8012cd6:	eeb0 aa47 	vmov.f32	s20, s14
 8012cda:	e692      	b.n	8012a02 <kalman_3gyro.constprop.0+0x31b2>
 8012cdc:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce4:	d05b      	beq.n	8012d9e <kalman_3gyro.constprop.0+0x354e>
 8012ce6:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cee:	d0a9      	beq.n	8012c44 <kalman_3gyro.constprop.0+0x33f4>
 8012cf0:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf8:	ee29 7aaa 	vmul.f32	s14, s19, s21
 8012cfc:	eef0 8a49 	vmov.f32	s17, s18
 8012d00:	f43f ae35 	beq.w	801296e <kalman_3gyro.constprop.0+0x311e>
 8012d04:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d0c:	ee69 7aab 	vmul.f32	s15, s19, s23
 8012d10:	eef0 aa49 	vmov.f32	s21, s18
 8012d14:	f43f af69 	beq.w	8012bea <kalman_3gyro.constprop.0+0x339a>
 8012d18:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d20:	eef0 ba47 	vmov.f32	s23, s14
 8012d24:	ee29 7aac 	vmul.f32	s14, s19, s25
 8012d28:	f43f ae3b 	beq.w	80129a2 <kalman_3gyro.constprop.0+0x3152>
 8012d2c:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d34:	eef0 ca67 	vmov.f32	s25, s15
 8012d38:	ee69 7a8c 	vmul.f32	s15, s19, s24
 8012d3c:	d0b0      	beq.n	8012ca0 <kalman_3gyro.constprop.0+0x3450>
 8012d3e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d46:	eeb0 ca47 	vmov.f32	s24, s14
 8012d4a:	ee29 7a8d 	vmul.f32	s14, s19, s26
 8012d4e:	f43f ae42 	beq.w	80129d6 <kalman_3gyro.constprop.0+0x3186>
 8012d52:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d5a:	eeb0 da67 	vmov.f32	s26, s15
 8012d5e:	ee69 7a8a 	vmul.f32	s15, s19, s20
 8012d62:	d0b6      	beq.n	8012cd2 <kalman_3gyro.constprop.0+0x3482>
 8012d64:	eeb0 aa47 	vmov.f32	s20, s14
 8012d68:	e647      	b.n	80129fa <kalman_3gyro.constprop.0+0x31aa>
 8012d6a:	eef0 7a6d 	vmov.f32	s15, s27
 8012d6e:	f7ff baf5 	b.w	801235c <kalman_3gyro.constprop.0+0x2b0c>
 8012d72:	eef0 8a48 	vmov.f32	s17, s16
 8012d76:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d7e:	ee29 9a29 	vmul.f32	s18, s18, s19
 8012d82:	f47f adec 	bne.w	801295e <kalman_3gyro.constprop.0+0x310e>
 8012d86:	eef0 aa49 	vmov.f32	s21, s18
 8012d8a:	e75f      	b.n	8012c4c <kalman_3gyro.constprop.0+0x33fc>
 8012d8c:	ed9f ba2a 	vldr	s22, [pc, #168]	; 8012e38 <kalman_3gyro.constprop.0+0x35e8>
 8012d90:	eef0 9a48 	vmov.f32	s19, s16
 8012d94:	eeb0 aa48 	vmov.f32	s20, s16
 8012d98:	eeb0 da48 	vmov.f32	s26, s16
 8012d9c:	e631      	b.n	8012a02 <kalman_3gyro.constprop.0+0x31b2>
 8012d9e:	eef0 8a6a 	vmov.f32	s17, s21
 8012da2:	e753      	b.n	8012c4c <kalman_3gyro.constprop.0+0x33fc>
 8012da4:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 8012da8:	2a31      	cmp	r2, #49	; 0x31
 8012daa:	f63f a8a3 	bhi.w	8011ef4 <kalman_3gyro.constprop.0+0x26a4>
 8012dae:	2100      	movs	r1, #0
 8012db0:	3201      	adds	r2, #1
 8012db2:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 8012db6:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 8012dba:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8012dbe:	f7ff b899 	b.w	8011ef4 <kalman_3gyro.constprop.0+0x26a4>
 8012dc2:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	f340 8423 	ble.w	8013612 <kalman_3gyro.constprop.0+0x3dc2>
 8012dcc:	3b01      	subs	r3, #1
 8012dce:	2200      	movs	r2, #0
 8012dd0:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 8012dd4:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 8012dd8:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 8012ddc:	f88d 20b1 	strb.w	r2, [sp, #177]	; 0xb1
 8012de0:	f88d 20b3 	strb.w	r2, [sp, #179]	; 0xb3
 8012de4:	f7fe bca9 	b.w	801173a <kalman_3gyro.constprop.0+0x1eea>
 8012de8:	f89b 200d 	ldrb.w	r2, [fp, #13]
 8012dec:	f89b 100e 	ldrb.w	r1, [fp, #14]
 8012df0:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8012df4:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 8012df8:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 8012dfc:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 8012e00:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 8012e04:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 8012e08:	f7fe bc18 	b.w	801163c <kalman_3gyro.constprop.0+0x1dec>
 8012e0c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8012e10:	eef0 4a46 	vmov.f32	s9, s12
 8012e14:	eeb1 5ae5 	vsqrt.f32	s10, s11
 8012e18:	eef0 7a47 	vmov.f32	s15, s14
 8012e1c:	eef0 5a66 	vmov.f32	s11, s13
 8012e20:	e64b      	b.n	8012aba <kalman_3gyro.constprop.0+0x326a>
 8012e22:	eeb1 7a47 	vneg.f32	s14, s14
 8012e26:	f7fd bc66 	b.w	80106f6 <kalman_3gyro.constprop.0+0xea6>
 8012e2a:	eef0 ca69 	vmov.f32	s25, s19
 8012e2e:	e6e0      	b.n	8012bf2 <kalman_3gyro.constprop.0+0x33a2>
 8012e30:	eeb0 ba69 	vmov.f32	s22, s19
 8012e34:	e5e5      	b.n	8012a02 <kalman_3gyro.constprop.0+0x31b2>
 8012e36:	bf00      	nop
 8012e38:	00000000 	.word	0x00000000
 8012e3c:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 8012e40:	49dc      	ldr	r1, [pc, #880]	; (80131b4 <kalman_3gyro.constprop.0+0x3964>)
 8012e42:	4bdd      	ldr	r3, [pc, #884]	; (80131b8 <kalman_3gyro.constprop.0+0x3968>)
 8012e44:	4add      	ldr	r2, [pc, #884]	; (80131bc <kalman_3gyro.constprop.0+0x396c>)
 8012e46:	2000      	movs	r0, #0
 8012e48:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 8012e4c:	6029      	str	r1, [r5, #0]
 8012e4e:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 8012e52:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 8012e56:	6002      	str	r2, [r0, #0]
 8012e58:	600b      	str	r3, [r1, #0]
 8012e5a:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 8012e5e:	9004      	str	r0, [sp, #16]
 8012e60:	9110      	str	r1, [sp, #64]	; 0x40
 8012e62:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	f000 80b4 	beq.w	8012fd4 <kalman_3gyro.constprop.0+0x3784>
 8012e6c:	240c      	movs	r4, #12
 8012e6e:	eddf bad4 	vldr	s23, [pc, #848]	; 80131c0 <kalman_3gyro.constprop.0+0x3970>
 8012e72:	ed9f bad4 	vldr	s22, [pc, #848]	; 80131c4 <kalman_3gyro.constprop.0+0x3974>
 8012e76:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 80131c8 <kalman_3gyro.constprop.0+0x3978>
 8012e7a:	ed9f aad4 	vldr	s20, [pc, #848]	; 80131cc <kalman_3gyro.constprop.0+0x397c>
 8012e7e:	eddf aad4 	vldr	s21, [pc, #848]	; 80131d0 <kalman_3gyro.constprop.0+0x3980>
 8012e82:	9f08      	ldr	r7, [sp, #32]
 8012e84:	fb14 8403 	smlabb	r4, r4, r3, r8
 8012e88:	4646      	mov	r6, r8
 8012e8a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8012e8e:	e06b      	b.n	8012f68 <kalman_3gyro.constprop.0+0x3718>
 8012e90:	eeb4 7aca 	vcmpe.f32	s14, s20
 8012e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e98:	f300 815a 	bgt.w	8013150 <kalman_3gyro.constprop.0+0x3900>
 8012e9c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8012ea0:	ee17 0a90 	vmov	r0, s15
 8012ea4:	f7ed fb48 	bl	8000538 <__aeabi_f2d>
 8012ea8:	ec41 0b10 	vmov	d0, r0, r1
 8012eac:	f005 ff84 	bl	8018db8 <ceil>
 8012eb0:	ec51 0b10 	vmov	r0, r1, d0
 8012eb4:	f7ed fe48 	bl	8000b48 <__aeabi_d2f>
 8012eb8:	ee07 0a90 	vmov	s15, r0
 8012ebc:	edc6 7a00 	vstr	s15, [r6]
 8012ec0:	ed97 7a01 	vldr	s14, [r7, #4]
 8012ec4:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8012ec8:	eef0 6ae7 	vabs.f32	s13, s15
 8012ecc:	eef4 6acb 	vcmpe.f32	s13, s22
 8012ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ed4:	d51b      	bpl.n	8012f0e <kalman_3gyro.constprop.0+0x36be>
 8012ed6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8012eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ede:	f280 8120 	bge.w	8013122 <kalman_3gyro.constprop.0+0x38d2>
 8012ee2:	eeb4 7aca 	vcmpe.f32	s14, s20
 8012ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eea:	f300 812e 	bgt.w	801314a <kalman_3gyro.constprop.0+0x38fa>
 8012eee:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8012ef2:	ee17 0a90 	vmov	r0, s15
 8012ef6:	f7ed fb1f 	bl	8000538 <__aeabi_f2d>
 8012efa:	ec41 0b10 	vmov	d0, r0, r1
 8012efe:	f005 ff5b 	bl	8018db8 <ceil>
 8012f02:	ec51 0b10 	vmov	r0, r1, d0
 8012f06:	f7ed fe1f 	bl	8000b48 <__aeabi_d2f>
 8012f0a:	ee07 0a90 	vmov	s15, r0
 8012f0e:	edc6 7a01 	vstr	s15, [r6, #4]
 8012f12:	ed97 7a02 	vldr	s14, [r7, #8]
 8012f16:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8012f1a:	eef0 6ae7 	vabs.f32	s13, s15
 8012f1e:	eef4 6acb 	vcmpe.f32	s13, s22
 8012f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f26:	d51a      	bpl.n	8012f5e <kalman_3gyro.constprop.0+0x370e>
 8012f28:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8012f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f30:	da3b      	bge.n	8012faa <kalman_3gyro.constprop.0+0x375a>
 8012f32:	eeb4 7aca 	vcmpe.f32	s14, s20
 8012f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f3a:	f300 8103 	bgt.w	8013144 <kalman_3gyro.constprop.0+0x38f4>
 8012f3e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8012f42:	ee17 0a90 	vmov	r0, s15
 8012f46:	f7ed faf7 	bl	8000538 <__aeabi_f2d>
 8012f4a:	ec41 0b10 	vmov	d0, r0, r1
 8012f4e:	f005 ff33 	bl	8018db8 <ceil>
 8012f52:	ec51 0b10 	vmov	r0, r1, d0
 8012f56:	f7ed fdf7 	bl	8000b48 <__aeabi_d2f>
 8012f5a:	ee07 0a90 	vmov	s15, r0
 8012f5e:	edc6 7a02 	vstr	s15, [r6, #8]
 8012f62:	360c      	adds	r6, #12
 8012f64:	42b4      	cmp	r4, r6
 8012f66:	d035      	beq.n	8012fd4 <kalman_3gyro.constprop.0+0x3784>
 8012f68:	ed97 7a00 	vldr	s14, [r7]
 8012f6c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8012f70:	eef0 6ae7 	vabs.f32	s13, s15
 8012f74:	eef4 6acb 	vcmpe.f32	s13, s22
 8012f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f7c:	d59e      	bpl.n	8012ebc <kalman_3gyro.constprop.0+0x366c>
 8012f7e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8012f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f86:	db83      	blt.n	8012e90 <kalman_3gyro.constprop.0+0x3640>
 8012f88:	ee77 7a89 	vadd.f32	s15, s15, s18
 8012f8c:	ee17 0a90 	vmov	r0, s15
 8012f90:	f7ed fad2 	bl	8000538 <__aeabi_f2d>
 8012f94:	ec41 0b10 	vmov	d0, r0, r1
 8012f98:	f005 ff92 	bl	8018ec0 <floor>
 8012f9c:	ec51 0b10 	vmov	r0, r1, d0
 8012fa0:	f7ed fdd2 	bl	8000b48 <__aeabi_d2f>
 8012fa4:	ee07 0a90 	vmov	s15, r0
 8012fa8:	e788      	b.n	8012ebc <kalman_3gyro.constprop.0+0x366c>
 8012faa:	ee77 7a89 	vadd.f32	s15, s15, s18
 8012fae:	360c      	adds	r6, #12
 8012fb0:	ee17 0a90 	vmov	r0, s15
 8012fb4:	f7ed fac0 	bl	8000538 <__aeabi_f2d>
 8012fb8:	ec41 0b10 	vmov	d0, r0, r1
 8012fbc:	f005 ff80 	bl	8018ec0 <floor>
 8012fc0:	ec51 0b10 	vmov	r0, r1, d0
 8012fc4:	f7ed fdc0 	bl	8000b48 <__aeabi_d2f>
 8012fc8:	ee07 0a90 	vmov	s15, r0
 8012fcc:	ed46 7a01 	vstr	s15, [r6, #-4]
 8012fd0:	42b4      	cmp	r4, r6
 8012fd2:	d1c9      	bne.n	8012f68 <kalman_3gyro.constprop.0+0x3718>
 8012fd4:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 8012fd8:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	f000 80cf 	beq.w	8013180 <kalman_3gyro.constprop.0+0x3930>
 8012fe2:	240c      	movs	r4, #12
 8012fe4:	eddf ba7b 	vldr	s23, [pc, #492]	; 80131d4 <kalman_3gyro.constprop.0+0x3984>
 8012fe8:	ed9f ba76 	vldr	s22, [pc, #472]	; 80131c4 <kalman_3gyro.constprop.0+0x3974>
 8012fec:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 80131d8 <kalman_3gyro.constprop.0+0x3988>
 8012ff0:	ed9f aa7a 	vldr	s20, [pc, #488]	; 80131dc <kalman_3gyro.constprop.0+0x398c>
 8012ff4:	eddf aa76 	vldr	s21, [pc, #472]	; 80131d0 <kalman_3gyro.constprop.0+0x3980>
 8012ff8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012ffc:	fb14 7403 	smlabb	r4, r4, r3, r7
 8013000:	463e      	mov	r6, r7
 8013002:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8013006:	e06b      	b.n	80130e0 <kalman_3gyro.constprop.0+0x3890>
 8013008:	eeb4 7aca 	vcmpe.f32	s14, s20
 801300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013010:	f300 81a2 	bgt.w	8013358 <kalman_3gyro.constprop.0+0x3b08>
 8013014:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013018:	ee17 0a90 	vmov	r0, s15
 801301c:	f7ed fa8c 	bl	8000538 <__aeabi_f2d>
 8013020:	ec41 0b10 	vmov	d0, r0, r1
 8013024:	f005 fec8 	bl	8018db8 <ceil>
 8013028:	ec51 0b10 	vmov	r0, r1, d0
 801302c:	f7ed fd8c 	bl	8000b48 <__aeabi_d2f>
 8013030:	ee07 0a90 	vmov	s15, r0
 8013034:	edc6 7a00 	vstr	s15, [r6]
 8013038:	ed99 7a04 	vldr	s14, [r9, #16]
 801303c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013040:	eef0 6ae7 	vabs.f32	s13, s15
 8013044:	eef4 6acb 	vcmpe.f32	s13, s22
 8013048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801304c:	d51b      	bpl.n	8013086 <kalman_3gyro.constprop.0+0x3836>
 801304e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013056:	f280 8168 	bge.w	801332a <kalman_3gyro.constprop.0+0x3ada>
 801305a:	eeb4 7aca 	vcmpe.f32	s14, s20
 801305e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013062:	f300 8176 	bgt.w	8013352 <kalman_3gyro.constprop.0+0x3b02>
 8013066:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801306a:	ee17 0a90 	vmov	r0, s15
 801306e:	f7ed fa63 	bl	8000538 <__aeabi_f2d>
 8013072:	ec41 0b10 	vmov	d0, r0, r1
 8013076:	f005 fe9f 	bl	8018db8 <ceil>
 801307a:	ec51 0b10 	vmov	r0, r1, d0
 801307e:	f7ed fd63 	bl	8000b48 <__aeabi_d2f>
 8013082:	ee07 0a90 	vmov	s15, r0
 8013086:	edc6 7a01 	vstr	s15, [r6, #4]
 801308a:	ed99 7a05 	vldr	s14, [r9, #20]
 801308e:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013092:	eef0 6ae7 	vabs.f32	s13, s15
 8013096:	eef4 6acb 	vcmpe.f32	s13, s22
 801309a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801309e:	d51a      	bpl.n	80130d6 <kalman_3gyro.constprop.0+0x3886>
 80130a0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80130a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130a8:	da55      	bge.n	8013156 <kalman_3gyro.constprop.0+0x3906>
 80130aa:	eeb4 7aca 	vcmpe.f32	s14, s20
 80130ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130b2:	f300 814b 	bgt.w	801334c <kalman_3gyro.constprop.0+0x3afc>
 80130b6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80130ba:	ee17 0a90 	vmov	r0, s15
 80130be:	f7ed fa3b 	bl	8000538 <__aeabi_f2d>
 80130c2:	ec41 0b10 	vmov	d0, r0, r1
 80130c6:	f005 fe77 	bl	8018db8 <ceil>
 80130ca:	ec51 0b10 	vmov	r0, r1, d0
 80130ce:	f7ed fd3b 	bl	8000b48 <__aeabi_d2f>
 80130d2:	ee07 0a90 	vmov	s15, r0
 80130d6:	edc6 7a02 	vstr	s15, [r6, #8]
 80130da:	360c      	adds	r6, #12
 80130dc:	42b4      	cmp	r4, r6
 80130de:	d04f      	beq.n	8013180 <kalman_3gyro.constprop.0+0x3930>
 80130e0:	ed99 7a03 	vldr	s14, [r9, #12]
 80130e4:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80130e8:	eef0 6ae7 	vabs.f32	s13, s15
 80130ec:	eef4 6acb 	vcmpe.f32	s13, s22
 80130f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130f4:	d59e      	bpl.n	8013034 <kalman_3gyro.constprop.0+0x37e4>
 80130f6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80130fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130fe:	db83      	blt.n	8013008 <kalman_3gyro.constprop.0+0x37b8>
 8013100:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013104:	ee17 0a90 	vmov	r0, s15
 8013108:	f7ed fa16 	bl	8000538 <__aeabi_f2d>
 801310c:	ec41 0b10 	vmov	d0, r0, r1
 8013110:	f005 fed6 	bl	8018ec0 <floor>
 8013114:	ec51 0b10 	vmov	r0, r1, d0
 8013118:	f7ed fd16 	bl	8000b48 <__aeabi_d2f>
 801311c:	ee07 0a90 	vmov	s15, r0
 8013120:	e788      	b.n	8013034 <kalman_3gyro.constprop.0+0x37e4>
 8013122:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013126:	ee17 0a90 	vmov	r0, s15
 801312a:	f7ed fa05 	bl	8000538 <__aeabi_f2d>
 801312e:	ec41 0b10 	vmov	d0, r0, r1
 8013132:	f005 fec5 	bl	8018ec0 <floor>
 8013136:	ec51 0b10 	vmov	r0, r1, d0
 801313a:	f7ed fd05 	bl	8000b48 <__aeabi_d2f>
 801313e:	ee07 0a90 	vmov	s15, r0
 8013142:	e6e4      	b.n	8012f0e <kalman_3gyro.constprop.0+0x36be>
 8013144:	eef0 7a6a 	vmov.f32	s15, s21
 8013148:	e709      	b.n	8012f5e <kalman_3gyro.constprop.0+0x370e>
 801314a:	eef0 7a6a 	vmov.f32	s15, s21
 801314e:	e6de      	b.n	8012f0e <kalman_3gyro.constprop.0+0x36be>
 8013150:	eef0 7a6a 	vmov.f32	s15, s21
 8013154:	e6b2      	b.n	8012ebc <kalman_3gyro.constprop.0+0x366c>
 8013156:	ee77 7a89 	vadd.f32	s15, s15, s18
 801315a:	360c      	adds	r6, #12
 801315c:	ee17 0a90 	vmov	r0, s15
 8013160:	f7ed f9ea 	bl	8000538 <__aeabi_f2d>
 8013164:	ec41 0b10 	vmov	d0, r0, r1
 8013168:	f005 feaa 	bl	8018ec0 <floor>
 801316c:	ec51 0b10 	vmov	r0, r1, d0
 8013170:	f7ed fcea 	bl	8000b48 <__aeabi_d2f>
 8013174:	ee07 0a90 	vmov	s15, r0
 8013178:	ed46 7a01 	vstr	s15, [r6, #-4]
 801317c:	42b4      	cmp	r4, r6
 801317e:	d1af      	bne.n	80130e0 <kalman_3gyro.constprop.0+0x3890>
 8013180:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 8013184:	2b00      	cmp	r3, #0
 8013186:	f43c ac7e 	beq.w	800fa86 <kalman_3gyro.constprop.0+0x236>
 801318a:	f50b 66f3 	add.w	r6, fp, #1944	; 0x798
 801318e:	240c      	movs	r4, #12
 8013190:	eddf ba13 	vldr	s23, [pc, #76]	; 80131e0 <kalman_3gyro.constprop.0+0x3990>
 8013194:	ed9f ba0b 	vldr	s22, [pc, #44]	; 80131c4 <kalman_3gyro.constprop.0+0x3974>
 8013198:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80131e4 <kalman_3gyro.constprop.0+0x3994>
 801319c:	ed9f aa12 	vldr	s20, [pc, #72]	; 80131e8 <kalman_3gyro.constprop.0+0x3998>
 80131a0:	eddf aa0b 	vldr	s21, [pc, #44]	; 80131d0 <kalman_3gyro.constprop.0+0x3980>
 80131a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80131a8:	960f      	str	r6, [sp, #60]	; 0x3c
 80131aa:	fb14 6403 	smlabb	r4, r4, r3, r6
 80131ae:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80131b2:	e099      	b.n	80132e8 <kalman_3gyro.constprop.0+0x3a98>
 80131b4:	3a7001e0 	.word	0x3a7001e0
 80131b8:	3a8c0118 	.word	0x3a8c0118
 80131bc:	3a000100 	.word	0x3a000100
 80131c0:	44888777 	.word	0x44888777
 80131c4:	4b000000 	.word	0x4b000000
 80131c8:	39f001e1 	.word	0x39f001e1
 80131cc:	b9f001e1 	.word	0xb9f001e1
 80131d0:	80000000 	.word	0x80000000
 80131d4:	44fffe00 	.word	0x44fffe00
 80131d8:	39800100 	.word	0x39800100
 80131dc:	b9800100 	.word	0xb9800100
 80131e0:	446a0ccd 	.word	0x446a0ccd
 80131e4:	3a0c0118 	.word	0x3a0c0118
 80131e8:	ba0c0118 	.word	0xba0c0118
 80131ec:	bf666666 	.word	0xbf666666
 80131f0:	3d072b02 	.word	0x3d072b02
 80131f4:	3cb43958 	.word	0x3cb43958
 80131f8:	3cf5c28f 	.word	0x3cf5c28f
 80131fc:	3d75c28f 	.word	0x3d75c28f
 8013200:	3d23d70a 	.word	0x3d23d70a
 8013204:	3ca3d70a 	.word	0x3ca3d70a
 8013208:	3d4ccccd 	.word	0x3d4ccccd
 801320c:	3d8f5c29 	.word	0x3d8f5c29
 8013210:	eeb4 7aca 	vcmpe.f32	s14, s20
 8013214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013218:	f300 80c6 	bgt.w	80133a8 <kalman_3gyro.constprop.0+0x3b58>
 801321c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013220:	ee17 0a90 	vmov	r0, s15
 8013224:	f7ed f988 	bl	8000538 <__aeabi_f2d>
 8013228:	ec41 0b10 	vmov	d0, r0, r1
 801322c:	f005 fdc4 	bl	8018db8 <ceil>
 8013230:	ec51 0b10 	vmov	r0, r1, d0
 8013234:	f7ed fc88 	bl	8000b48 <__aeabi_d2f>
 8013238:	ee07 0a90 	vmov	s15, r0
 801323c:	edc6 7a00 	vstr	s15, [r6]
 8013240:	ed99 7a07 	vldr	s14, [r9, #28]
 8013244:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013248:	eef0 6ae7 	vabs.f32	s13, s15
 801324c:	eef4 6acb 	vcmpe.f32	s13, s22
 8013250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013254:	d51b      	bpl.n	801328e <kalman_3gyro.constprop.0+0x3a3e>
 8013256:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801325a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801325e:	f280 808f 	bge.w	8013380 <kalman_3gyro.constprop.0+0x3b30>
 8013262:	eeb4 7aca 	vcmpe.f32	s14, s20
 8013266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801326a:	f300 809a 	bgt.w	80133a2 <kalman_3gyro.constprop.0+0x3b52>
 801326e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013272:	ee17 0a90 	vmov	r0, s15
 8013276:	f7ed f95f 	bl	8000538 <__aeabi_f2d>
 801327a:	ec41 0b10 	vmov	d0, r0, r1
 801327e:	f005 fd9b 	bl	8018db8 <ceil>
 8013282:	ec51 0b10 	vmov	r0, r1, d0
 8013286:	f7ed fc5f 	bl	8000b48 <__aeabi_d2f>
 801328a:	ee07 0a90 	vmov	s15, r0
 801328e:	edc6 7a01 	vstr	s15, [r6, #4]
 8013292:	ed99 7a08 	vldr	s14, [r9, #32]
 8013296:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801329a:	eef0 6ae7 	vabs.f32	s13, s15
 801329e:	eef4 6acb 	vcmpe.f32	s13, s22
 80132a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132a6:	d519      	bpl.n	80132dc <kalman_3gyro.constprop.0+0x3a8c>
 80132a8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80132ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b0:	da55      	bge.n	801335e <kalman_3gyro.constprop.0+0x3b0e>
 80132b2:	eeb4 7aca 	vcmpe.f32	s14, s20
 80132b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ba:	dc78      	bgt.n	80133ae <kalman_3gyro.constprop.0+0x3b5e>
 80132bc:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80132c0:	ee17 0a90 	vmov	r0, s15
 80132c4:	f7ed f938 	bl	8000538 <__aeabi_f2d>
 80132c8:	ec41 0b10 	vmov	d0, r0, r1
 80132cc:	f005 fd74 	bl	8018db8 <ceil>
 80132d0:	ec51 0b10 	vmov	r0, r1, d0
 80132d4:	f7ed fc38 	bl	8000b48 <__aeabi_d2f>
 80132d8:	ee07 0a90 	vmov	s15, r0
 80132dc:	edc6 7a02 	vstr	s15, [r6, #8]
 80132e0:	360c      	adds	r6, #12
 80132e2:	42b4      	cmp	r4, r6
 80132e4:	f43c abd2 	beq.w	800fa8c <kalman_3gyro.constprop.0+0x23c>
 80132e8:	ed99 7a06 	vldr	s14, [r9, #24]
 80132ec:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80132f0:	eef0 6ae7 	vabs.f32	s13, s15
 80132f4:	eef4 6acb 	vcmpe.f32	s13, s22
 80132f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132fc:	d59e      	bpl.n	801323c <kalman_3gyro.constprop.0+0x39ec>
 80132fe:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013306:	db83      	blt.n	8013210 <kalman_3gyro.constprop.0+0x39c0>
 8013308:	ee77 7a89 	vadd.f32	s15, s15, s18
 801330c:	ee17 0a90 	vmov	r0, s15
 8013310:	f7ed f912 	bl	8000538 <__aeabi_f2d>
 8013314:	ec41 0b10 	vmov	d0, r0, r1
 8013318:	f005 fdd2 	bl	8018ec0 <floor>
 801331c:	ec51 0b10 	vmov	r0, r1, d0
 8013320:	f7ed fc12 	bl	8000b48 <__aeabi_d2f>
 8013324:	ee07 0a90 	vmov	s15, r0
 8013328:	e788      	b.n	801323c <kalman_3gyro.constprop.0+0x39ec>
 801332a:	ee77 7a89 	vadd.f32	s15, s15, s18
 801332e:	ee17 0a90 	vmov	r0, s15
 8013332:	f7ed f901 	bl	8000538 <__aeabi_f2d>
 8013336:	ec41 0b10 	vmov	d0, r0, r1
 801333a:	f005 fdc1 	bl	8018ec0 <floor>
 801333e:	ec51 0b10 	vmov	r0, r1, d0
 8013342:	f7ed fc01 	bl	8000b48 <__aeabi_d2f>
 8013346:	ee07 0a90 	vmov	s15, r0
 801334a:	e69c      	b.n	8013086 <kalman_3gyro.constprop.0+0x3836>
 801334c:	eef0 7a6a 	vmov.f32	s15, s21
 8013350:	e6c1      	b.n	80130d6 <kalman_3gyro.constprop.0+0x3886>
 8013352:	eef0 7a6a 	vmov.f32	s15, s21
 8013356:	e696      	b.n	8013086 <kalman_3gyro.constprop.0+0x3836>
 8013358:	eef0 7a6a 	vmov.f32	s15, s21
 801335c:	e66a      	b.n	8013034 <kalman_3gyro.constprop.0+0x37e4>
 801335e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013362:	ee17 0a90 	vmov	r0, s15
 8013366:	f7ed f8e7 	bl	8000538 <__aeabi_f2d>
 801336a:	ec41 0b10 	vmov	d0, r0, r1
 801336e:	f005 fda7 	bl	8018ec0 <floor>
 8013372:	ec51 0b10 	vmov	r0, r1, d0
 8013376:	f7ed fbe7 	bl	8000b48 <__aeabi_d2f>
 801337a:	ee07 0a90 	vmov	s15, r0
 801337e:	e7ad      	b.n	80132dc <kalman_3gyro.constprop.0+0x3a8c>
 8013380:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013384:	ee17 0a90 	vmov	r0, s15
 8013388:	f7ed f8d6 	bl	8000538 <__aeabi_f2d>
 801338c:	ec41 0b10 	vmov	d0, r0, r1
 8013390:	f005 fd96 	bl	8018ec0 <floor>
 8013394:	ec51 0b10 	vmov	r0, r1, d0
 8013398:	f7ed fbd6 	bl	8000b48 <__aeabi_d2f>
 801339c:	ee07 0a90 	vmov	s15, r0
 80133a0:	e775      	b.n	801328e <kalman_3gyro.constprop.0+0x3a3e>
 80133a2:	eef0 7a6a 	vmov.f32	s15, s21
 80133a6:	e772      	b.n	801328e <kalman_3gyro.constprop.0+0x3a3e>
 80133a8:	eef0 7a6a 	vmov.f32	s15, s21
 80133ac:	e746      	b.n	801323c <kalman_3gyro.constprop.0+0x39ec>
 80133ae:	eef0 7a6a 	vmov.f32	s15, s21
 80133b2:	e793      	b.n	80132dc <kalman_3gyro.constprop.0+0x3a8c>
 80133b4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80133b6:	7813      	ldrb	r3, [r2, #0]
 80133b8:	ed92 7a03 	vldr	s14, [r2, #12]
 80133bc:	edd2 6a01 	vldr	s13, [r2, #4]
 80133c0:	edd2 7a02 	vldr	s15, [r2, #8]
 80133c4:	2200      	movs	r2, #0
 80133c6:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	f040 813b 	bne.w	8013646 <kalman_3gyro.constprop.0+0x3df6>
 80133d0:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 80131ec <kalman_3gyro.constprop.0+0x399c>
 80133d4:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 80133d8:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80133dc:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 80133e0:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 80133e4:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80133e8:	2100      	movs	r1, #0
 80133ea:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 80133ee:	f005 f8a5 	bl	801853c <memset>
 80133f2:	eddb 7a02 	vldr	s15, [fp, #8]
 80133f6:	ed5f 5a82 	vldr	s11, [pc, #-520]	; 80131f0 <kalman_3gyro.constprop.0+0x39a0>
 80133fa:	ed1f 6a82 	vldr	s12, [pc, #-520]	; 80131f4 <kalman_3gyro.constprop.0+0x39a4>
 80133fe:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 80131f8 <kalman_3gyro.constprop.0+0x39a8>
 8013402:	ed5f 4a82 	vldr	s9, [pc, #-520]	; 80131fc <kalman_3gyro.constprop.0+0x39ac>
 8013406:	ed5f 3a82 	vldr	s7, [pc, #-520]	; 8013200 <kalman_3gyro.constprop.0+0x39b0>
 801340a:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 8013204 <kalman_3gyro.constprop.0+0x39b4>
 801340e:	ed1f 5a82 	vldr	s10, [pc, #-520]	; 8013208 <kalman_3gyro.constprop.0+0x39b8>
 8013412:	ed1f 4a82 	vldr	s8, [pc, #-520]	; 801320c <kalman_3gyro.constprop.0+0x39bc>
 8013416:	4bd9      	ldr	r3, [pc, #868]	; (801377c <kalman_3gyro.constprop.0+0x3f2c>)
 8013418:	49d9      	ldr	r1, [pc, #868]	; (8013780 <kalman_3gyro.constprop.0+0x3f30>)
 801341a:	4dda      	ldr	r5, [pc, #872]	; (8013784 <kalman_3gyro.constprop.0+0x3f34>)
 801341c:	ed9f 3ada 	vldr	s6, [pc, #872]	; 8013788 <kalman_3gyro.constprop.0+0x3f38>
 8013420:	48da      	ldr	r0, [pc, #872]	; (801378c <kalman_3gyro.constprop.0+0x3f3c>)
 8013422:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 8013426:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801342a:	ee27 6a86 	vmul.f32	s12, s15, s12
 801342e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8013432:	edcb 5a34 	vstr	s11, [fp, #208]	; 0xd0
 8013436:	eddf 5ad6 	vldr	s11, [pc, #856]	; 8013790 <kalman_3gyro.constprop.0+0x3f40>
 801343a:	ed8b 6a4e 	vstr	s12, [fp, #312]	; 0x138
 801343e:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8013442:	ee67 3aa3 	vmul.f32	s7, s15, s7
 8013446:	edcb 6a50 	vstr	s13, [fp, #320]	; 0x140
 801344a:	ed9f 6ad2 	vldr	s12, [pc, #840]	; 8013794 <kalman_3gyro.constprop.0+0x3f44>
 801344e:	eddf 6ad2 	vldr	s13, [pc, #840]	; 8013798 <kalman_3gyro.constprop.0+0x3f48>
 8013452:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 8013456:	ee27 7a87 	vmul.f32	s14, s15, s14
 801345a:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801345e:	ee27 5a85 	vmul.f32	s10, s15, s10
 8013462:	ee27 4a84 	vmul.f32	s8, s15, s8
 8013466:	ee27 6a86 	vmul.f32	s12, s15, s12
 801346a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801346e:	2200      	movs	r2, #0
 8013470:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 8013474:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 8013478:	edcb 4a38 	vstr	s9, [fp, #224]	; 0xe0
 801347c:	4cc7      	ldr	r4, [pc, #796]	; (801379c <kalman_3gyro.constprop.0+0x3f4c>)
 801347e:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 8013482:	f8cb 10d4 	str.w	r1, [fp, #212]	; 0xd4
 8013486:	eddf 3ac6 	vldr	s7, [pc, #792]	; 80137a0 <kalman_3gyro.constprop.0+0x3f50>
 801348a:	49c6      	ldr	r1, [pc, #792]	; (80137a4 <kalman_3gyro.constprop.0+0x3f54>)
 801348c:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
 8013490:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 8013494:	eddf 4ac4 	vldr	s9, [pc, #784]	; 80137a8 <kalman_3gyro.constprop.0+0x3f58>
 8013498:	4bc4      	ldr	r3, [pc, #784]	; (80137ac <kalman_3gyro.constprop.0+0x3f5c>)
 801349a:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 801349e:	f8cb 2128 	str.w	r2, [fp, #296]	; 0x128
 80134a2:	f8cb 513c 	str.w	r5, [fp, #316]	; 0x13c
 80134a6:	4ac2      	ldr	r2, [pc, #776]	; (80137b0 <kalman_3gyro.constprop.0+0x3f60>)
 80134a8:	f8cb 4144 	str.w	r4, [fp, #324]	; 0x144
 80134ac:	f8cb 014c 	str.w	r0, [fp, #332]	; 0x14c
 80134b0:	f8cb 10ec 	str.w	r1, [fp, #236]	; 0xec
 80134b4:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 80134b8:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 80134bc:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 80134c0:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 80134c4:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 80134c8:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 80134cc:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 80134d0:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 80134d4:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 80134d8:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 80134dc:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 80134e0:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 80134e4:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 80134e8:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 80134ec:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 80134f0:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 80134f4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80134f8:	ee67 4aa4 	vmul.f32	s9, s15, s9
 80134fc:	4cad      	ldr	r4, [pc, #692]	; (80137b4 <kalman_3gyro.constprop.0+0x3f64>)
 80134fe:	48ae      	ldr	r0, [pc, #696]	; (80137b8 <kalman_3gyro.constprop.0+0x3f68>)
 8013500:	49ae      	ldr	r1, [pc, #696]	; (80137bc <kalman_3gyro.constprop.0+0x3f6c>)
 8013502:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 8013506:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 801350a:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 801350e:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 8013512:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 8013516:	ee27 6a83 	vmul.f32	s12, s15, s6
 801351a:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 801351e:	f8cb 2154 	str.w	r2, [fp, #340]	; 0x154
 8013522:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8013526:	f8cb 210c 	str.w	r2, [fp, #268]	; 0x10c
 801352a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801352e:	4aa4      	ldr	r2, [pc, #656]	; (80137c0 <kalman_3gyro.constprop.0+0x3f70>)
 8013530:	f8cb 40fc 	str.w	r4, [fp, #252]	; 0xfc
 8013534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013538:	f8cb 0164 	str.w	r0, [fp, #356]	; 0x164
 801353c:	f8cb 1174 	str.w	r1, [fp, #372]	; 0x174
 8013540:	f8cb 219c 	str.w	r2, [fp, #412]	; 0x19c
 8013544:	4e9f      	ldr	r6, [pc, #636]	; (80137c4 <kalman_3gyro.constprop.0+0x3f74>)
 8013546:	4da0      	ldr	r5, [pc, #640]	; (80137c8 <kalman_3gyro.constprop.0+0x3f78>)
 8013548:	49a0      	ldr	r1, [pc, #640]	; (80137cc <kalman_3gyro.constprop.0+0x3f7c>)
 801354a:	4aa1      	ldr	r2, [pc, #644]	; (80137d0 <kalman_3gyro.constprop.0+0x3f80>)
 801354c:	f8cb 317c 	str.w	r3, [fp, #380]	; 0x17c
 8013550:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
 8013554:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8013558:	f8cb 311c 	str.w	r3, [fp, #284]	; 0x11c
 801355c:	f8cb 3124 	str.w	r3, [fp, #292]	; 0x124
 8013560:	ed8b 3a3d 	vstr	s6, [fp, #244]	; 0xf4
 8013564:	ed8b 6a42 	vstr	s12, [fp, #264]	; 0x108
 8013568:	ed8b 6a5c 	vstr	s12, [fp, #368]	; 0x170
 801356c:	edcb 5a66 	vstr	s11, [fp, #408]	; 0x198
 8013570:	edcb 6a44 	vstr	s13, [fp, #272]	; 0x110
 8013574:	edcb 6a5e 	vstr	s13, [fp, #376]	; 0x178
 8013578:	edcb 3a65 	vstr	s7, [fp, #404]	; 0x194
 801357c:	edcb 7a46 	vstr	s15, [fp, #280]	; 0x118
 8013580:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 8013584:	f8cb 615c 	str.w	r6, [fp, #348]	; 0x15c
 8013588:	f8cb 516c 	str.w	r5, [fp, #364]	; 0x16c
 801358c:	f8cb 4104 	str.w	r4, [fp, #260]	; 0x104
 8013590:	f8cb 0114 	str.w	r0, [fp, #276]	; 0x114
 8013594:	f8cb 1184 	str.w	r1, [fp, #388]	; 0x184
 8013598:	f8cb 218c 	str.w	r2, [fp, #396]	; 0x18c
 801359c:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 80135a0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80135a4:	b973      	cbnz	r3, 80135c4 <kalman_3gyro.constprop.0+0x3d74>
 80135a6:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 80135aa:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 80135ae:	6811      	ldr	r1, [r2, #0]
 80135b0:	681a      	ldr	r2, [r3, #0]
 80135b2:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 80135b6:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 80135c0:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 80135c4:	2300      	movs	r3, #0
 80135c6:	f88b 3001 	strb.w	r3, [fp, #1]
 80135ca:	f7fc ba4b 	b.w	800fa64 <kalman_3gyro.constprop.0+0x214>
 80135ce:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 80135d2:	ed9b ea4b 	vldr	s28, [fp, #300]	; 0x12c
 80135d6:	ee27 7a0b 	vmul.f32	s14, s14, s22
 80135da:	ee69 9a8e 	vmul.f32	s19, s19, s28
 80135de:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 80135e2:	f7fd bd5b 	b.w	801109c <kalman_3gyro.constprop.0+0x184c>
 80135e6:	eddf 7a7b 	vldr	s15, [pc, #492]	; 80137d4 <kalman_3gyro.constprop.0+0x3f84>
 80135ea:	f7fc ba9e 	b.w	800fb2a <kalman_3gyro.constprop.0+0x2da>
 80135ee:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 80135f2:	f7fd bd7b 	b.w	80110ec <kalman_3gyro.constprop.0+0x189c>
 80135f6:	ed9f 6a78 	vldr	s12, [pc, #480]	; 80137d8 <kalman_3gyro.constprop.0+0x3f88>
 80135fa:	ed9f 4a78 	vldr	s8, [pc, #480]	; 80137dc <kalman_3gyro.constprop.0+0x3f8c>
 80135fe:	eddf 4a78 	vldr	s9, [pc, #480]	; 80137e0 <kalman_3gyro.constprop.0+0x3f90>
 8013602:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80137e4 <kalman_3gyro.constprop.0+0x3f94>
 8013606:	ed9f ca78 	vldr	s24, [pc, #480]	; 80137e8 <kalman_3gyro.constprop.0+0x3f98>
 801360a:	ee68 8a8c 	vmul.f32	s17, s17, s24
 801360e:	f7fd bf9d 	b.w	801154c <kalman_3gyro.constprop.0+0x1cfc>
 8013612:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 8013616:	2a00      	cmp	r2, #0
 8013618:	f340 8181 	ble.w	801391e <kalman_3gyro.constprop.0+0x40ce>
 801361c:	ed9d 7a02 	vldr	s14, [sp, #8]
 8013620:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 8013624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801362c:	f340 8177 	ble.w	801391e <kalman_3gyro.constprop.0+0x40ce>
 8013630:	3a01      	subs	r2, #1
 8013632:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 8013636:	f7fe b880 	b.w	801173a <kalman_3gyro.constprop.0+0x1eea>
 801363a:	eeb0 aa69 	vmov.f32	s20, s19
 801363e:	eeb0 ba69 	vmov.f32	s22, s19
 8013642:	f7ff b9de 	b.w	8012a02 <kalman_3gyro.constprop.0+0x31b2>
 8013646:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801364a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801364e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013652:	eef1 6ae7 	vsqrt.f32	s13, s15
 8013656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801365a:	e6bb      	b.n	80133d4 <kalman_3gyro.constprop.0+0x3b84>
 801365c:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8013660:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8013664:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8013668:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 801366c:	f7fe b802 	b.w	8011674 <kalman_3gyro.constprop.0+0x1e24>
 8013670:	ed9b ba49 	vldr	s22, [fp, #292]	; 0x124
 8013674:	f7fd bae6 	b.w	8010c44 <kalman_3gyro.constprop.0+0x13f4>
 8013678:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 801367c:	ed9b ea63 	vldr	s28, [fp, #396]	; 0x18c
 8013680:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8013684:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8013688:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 801368c:	f7fd bd06 	b.w	801109c <kalman_3gyro.constprop.0+0x184c>
 8013690:	ee7e 7a67 	vsub.f32	s15, s28, s15
 8013694:	ee17 0a90 	vmov	r0, s15
 8013698:	f7ec ff4e 	bl	8000538 <__aeabi_f2d>
 801369c:	ec41 0b10 	vmov	d0, r0, r1
 80136a0:	f005 fb8a 	bl	8018db8 <ceil>
 80136a4:	ec51 0b10 	vmov	r0, r1, d0
 80136a8:	f7ed fa4e 	bl	8000b48 <__aeabi_d2f>
 80136ac:	ee0e 0a10 	vmov	s28, r0
 80136b0:	f7fc bc70 	b.w	800ff94 <kalman_3gyro.constprop.0+0x744>
 80136b4:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80136b8:	ee17 0a90 	vmov	r0, s15
 80136bc:	f7ec ff3c 	bl	8000538 <__aeabi_f2d>
 80136c0:	ec41 0b10 	vmov	d0, r0, r1
 80136c4:	f005 fb78 	bl	8018db8 <ceil>
 80136c8:	ec51 0b10 	vmov	r0, r1, d0
 80136cc:	f7ed fa3c 	bl	8000b48 <__aeabi_d2f>
 80136d0:	ee0d 0a90 	vmov	s27, r0
 80136d4:	f7fc bc81 	b.w	800ffda <kalman_3gyro.constprop.0+0x78a>
 80136d8:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80136dc:	ee17 0a90 	vmov	r0, s15
 80136e0:	f7ec ff2a 	bl	8000538 <__aeabi_f2d>
 80136e4:	ec41 0b10 	vmov	d0, r0, r1
 80136e8:	f005 fb66 	bl	8018db8 <ceil>
 80136ec:	ec51 0b10 	vmov	r0, r1, d0
 80136f0:	f7ed fa2a 	bl	8000b48 <__aeabi_d2f>
 80136f4:	ee0d 0a90 	vmov	s27, r0
 80136f8:	f7fc bcd5 	b.w	80100a6 <kalman_3gyro.constprop.0+0x856>
 80136fc:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8013700:	ee17 0a90 	vmov	r0, s15
 8013704:	f7ec ff18 	bl	8000538 <__aeabi_f2d>
 8013708:	ec41 0b10 	vmov	d0, r0, r1
 801370c:	f005 fb54 	bl	8018db8 <ceil>
 8013710:	ec51 0b10 	vmov	r0, r1, d0
 8013714:	f7ed fa18 	bl	8000b48 <__aeabi_d2f>
 8013718:	ee0b 0a10 	vmov	s22, r0
 801371c:	f7fc bce6 	b.w	80100ec <kalman_3gyro.constprop.0+0x89c>
 8013720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013724:	f6fd addf 	blt.w	80112e6 <kalman_3gyro.constprop.0+0x1a96>
 8013728:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80137e0 <kalman_3gyro.constprop.0+0x3f90>
 801372c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013734:	f140 8283 	bpl.w	8013c3e <kalman_3gyro.constprop.0+0x43ee>
 8013738:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80137ec <kalman_3gyro.constprop.0+0x3f9c>
 801373c:	eddf 4a2c 	vldr	s9, [pc, #176]	; 80137f0 <kalman_3gyro.constprop.0+0x3fa0>
 8013740:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80137f4 <kalman_3gyro.constprop.0+0x3fa4>
 8013744:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013748:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801374c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8013750:	eea6 7a86 	vfma.f32	s14, s13, s12
 8013754:	f7fd bdd1 	b.w	80112fa <kalman_3gyro.constprop.0+0x1aaa>
 8013758:	ee78 7a67 	vsub.f32	s15, s16, s15
 801375c:	ee17 0a90 	vmov	r0, s15
 8013760:	f7ec feea 	bl	8000538 <__aeabi_f2d>
 8013764:	ec41 0b10 	vmov	d0, r0, r1
 8013768:	f005 fb26 	bl	8018db8 <ceil>
 801376c:	ec51 0b10 	vmov	r0, r1, d0
 8013770:	f7ed f9ea 	bl	8000b48 <__aeabi_d2f>
 8013774:	ee08 0a10 	vmov	s16, r0
 8013778:	f7fc bbe9 	b.w	800ff4e <kalman_3gyro.constprop.0+0x6fe>
 801377c:	3eb33333 	.word	0x3eb33333
 8013780:	3ee66666 	.word	0x3ee66666
 8013784:	3f866666 	.word	0x3f866666
 8013788:	3ecccccd 	.word	0x3ecccccd
 801378c:	3f933333 	.word	0x3f933333
 8013790:	3dcccccd 	.word	0x3dcccccd
 8013794:	3e4ccccd 	.word	0x3e4ccccd
 8013798:	3e99999a 	.word	0x3e99999a
 801379c:	3f8ccccd 	.word	0x3f8ccccd
 80137a0:	3f4ccccd 	.word	0x3f4ccccd
 80137a4:	3ebd70a4 	.word	0x3ebd70a4
 80137a8:	3f666666 	.word	0x3f666666
 80137ac:	40a00000 	.word	0x40a00000
 80137b0:	3f99999a 	.word	0x3f99999a
 80137b4:	3f19999a 	.word	0x3f19999a
 80137b8:	3fb9999a 	.word	0x3fb9999a
 80137bc:	3fe66666 	.word	0x3fe66666
 80137c0:	3f333333 	.word	0x3f333333
 80137c4:	3fa66666 	.word	0x3fa66666
 80137c8:	3fcccccd 	.word	0x3fcccccd
 80137cc:	40200000 	.word	0x40200000
 80137d0:	40400000 	.word	0x40400000
 80137d4:	bf666666 	.word	0xbf666666
 80137d8:	391d4951 	.word	0x391d4951
 80137dc:	383cbe62 	.word	0x383cbe62
 80137e0:	3c75c28f 	.word	0x3c75c28f
 80137e4:	469c3e00 	.word	0x469c3e00
 80137e8:	43168000 	.word	0x43168000
 80137ec:	3c23d70a 	.word	0x3c23d70a
 80137f0:	3f19999a 	.word	0x3f19999a
 80137f4:	43480000 	.word	0x43480000
 80137f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80137fc:	ee3a aa47 	vsub.f32	s20, s20, s14
 8013800:	eef0 7aca 	vabs.f32	s15, s20
 8013804:	ee2a aa0a 	vmul.f32	s20, s20, s20
 8013808:	eef4 7ae6 	vcmpe.f32	s15, s13
 801380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013810:	eeb4 aac7 	vcmpe.f32	s20, s14
 8013814:	bfb8      	it	lt
 8013816:	eef0 7a66 	vmovlt.f32	s15, s13
 801381a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801381e:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 8013822:	f77d af5b 	ble.w	80116dc <kalman_3gyro.constprop.0+0x1e8c>
 8013826:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 801382a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801382e:	eeb4 aac7 	vcmpe.f32	s20, s14
 8013832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013836:	f77d af51 	ble.w	80116dc <kalman_3gyro.constprop.0+0x1e8c>
 801383a:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 801383e:	ed9d 7a74 	vldr	s14, [sp, #464]	; 0x1d0
 8013842:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8013846:	ee66 6a8a 	vmul.f32	s13, s13, s20
 801384a:	ee27 aa0a 	vmul.f32	s20, s14, s20
 801384e:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 8013852:	edcd 6a73 	vstr	s13, [sp, #460]	; 0x1cc
 8013856:	ed8d aa74 	vstr	s20, [sp, #464]	; 0x1d0
 801385a:	f7fd bf3f 	b.w	80116dc <kalman_3gyro.constprop.0+0x1e8c>
 801385e:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 8013862:	2a01      	cmp	r2, #1
 8013864:	d002      	beq.n	801386c <kalman_3gyro.constprop.0+0x401c>
 8013866:	2b01      	cmp	r3, #1
 8013868:	f47d af1e 	bne.w	80116a8 <kalman_3gyro.constprop.0+0x1e58>
 801386c:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8013870:	eef4 7ac3 	vcmpe.f32	s15, s6
 8013874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013878:	bfa8      	it	ge
 801387a:	eeb0 3a67 	vmovge.f32	s6, s15
 801387e:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 8013882:	ed8d 3a70 	vstr	s6, [sp, #448]	; 0x1c0
 8013886:	ed8d 3a71 	vstr	s6, [sp, #452]	; 0x1c4
 801388a:	f7fd bf0d 	b.w	80116a8 <kalman_3gyro.constprop.0+0x1e58>
 801388e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8013892:	ee17 0a90 	vmov	r0, s15
 8013896:	f7ec fe4f 	bl	8000538 <__aeabi_f2d>
 801389a:	ec41 0b10 	vmov	d0, r0, r1
 801389e:	f005 fa8b 	bl	8018db8 <ceil>
 80138a2:	ec51 0b10 	vmov	r0, r1, d0
 80138a6:	f7ed f94f 	bl	8000b48 <__aeabi_d2f>
 80138aa:	ee08 0a10 	vmov	s16, r0
 80138ae:	f7fc bc40 	b.w	8010132 <kalman_3gyro.constprop.0+0x8e2>
 80138b2:	ee7b 7a67 	vsub.f32	s15, s22, s15
 80138b6:	ee17 0a90 	vmov	r0, s15
 80138ba:	f7ec fe3d 	bl	8000538 <__aeabi_f2d>
 80138be:	ec41 0b10 	vmov	d0, r0, r1
 80138c2:	f005 fa79 	bl	8018db8 <ceil>
 80138c6:	ec51 0b10 	vmov	r0, r1, d0
 80138ca:	f7ed f93d 	bl	8000b48 <__aeabi_d2f>
 80138ce:	ee0b 0a10 	vmov	s22, r0
 80138d2:	f7fc bcb7 	b.w	8010244 <kalman_3gyro.constprop.0+0x9f4>
 80138d6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80138da:	ee17 0a90 	vmov	r0, s15
 80138de:	f7ec fe2b 	bl	8000538 <__aeabi_f2d>
 80138e2:	ec41 0b10 	vmov	d0, r0, r1
 80138e6:	f005 fa67 	bl	8018db8 <ceil>
 80138ea:	ec51 0b10 	vmov	r0, r1, d0
 80138ee:	f7ed f92b 	bl	8000b48 <__aeabi_d2f>
 80138f2:	ee08 0a10 	vmov	s16, r0
 80138f6:	f7fc bcc8 	b.w	801028a <kalman_3gyro.constprop.0+0xa3a>
 80138fa:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80138fe:	ee17 0a90 	vmov	r0, s15
 8013902:	f7ec fe19 	bl	8000538 <__aeabi_f2d>
 8013906:	ec41 0b10 	vmov	d0, r0, r1
 801390a:	f005 fa55 	bl	8018db8 <ceil>
 801390e:	ec51 0b10 	vmov	r0, r1, d0
 8013912:	f7ed f919 	bl	8000b48 <__aeabi_d2f>
 8013916:	ee0d 0a90 	vmov	s27, r0
 801391a:	f7fc bc70 	b.w	80101fe <kalman_3gyro.constprop.0+0x9ae>
 801391e:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 8013922:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013926:	ee27 7a27 	vmul.f32	s14, s14, s15
 801392a:	eeb4 7aeb 	vcmpe.f32	s14, s23
 801392e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013932:	f77d af02 	ble.w	801173a <kalman_3gyro.constprop.0+0x1eea>
 8013936:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 801393a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801393e:	eef4 7aec 	vcmpe.f32	s15, s25
 8013942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013946:	f77d aef8 	ble.w	801173a <kalman_3gyro.constprop.0+0x1eea>
 801394a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801394e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013952:	eef4 7acd 	vcmpe.f32	s15, s26
 8013956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801395a:	f140 8711 	bpl.w	8014780 <kalman_3gyro.constprop.0+0x4f30>
 801395e:	3303      	adds	r3, #3
 8013960:	f7ff ba35 	b.w	8012dce <kalman_3gyro.constprop.0+0x357e>
 8013964:	460b      	mov	r3, r1
 8013966:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 801396a:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 801396e:	9181      	str	r1, [sp, #516]	; 0x204
 8013970:	9282      	str	r2, [sp, #520]	; 0x208
 8013972:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8013976:	9183      	str	r1, [sp, #524]	; 0x20c
 8013978:	2200      	movs	r2, #0
 801397a:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 801397e:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8013982:	f7fe baa8 	b.w	8011ed6 <kalman_3gyro.constprop.0+0x2686>
 8013986:	a936      	add	r1, sp, #216	; 0xd8
 8013988:	a854      	add	r0, sp, #336	; 0x150
 801398a:	f7fa ff85 	bl	800e898 <b_dcm2q>
 801398e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8013992:	4619      	mov	r1, r3
 8013994:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 8013998:	ed8b ca72 	vstr	s24, [fp, #456]	; 0x1c8
 801399c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80139a0:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 80139a4:	f004 fdca 	bl	801853c <memset>
 80139a8:	4bd8      	ldr	r3, [pc, #864]	; (8013d0c <kalman_3gyro.constprop.0+0x44bc>)
 80139aa:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 80139ae:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 80139b2:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 80139b6:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 80139ba:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 80139be:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 80139c2:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 80139c6:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 80139ca:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 80139ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80139d0:	781a      	ldrb	r2, [r3, #0]
 80139d2:	ee07 2a90 	vmov	s15, r2
 80139d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80139de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139e2:	f040 84dc 	bne.w	801439e <kalman_3gyro.constprop.0+0x4b4e>
 80139e6:	eeb0 7a4c 	vmov.f32	s14, s24
 80139ea:	2300      	movs	r3, #0
 80139ec:	f88b 3000 	strb.w	r3, [fp]
 80139f0:	eddb ea02 	vldr	s29, [fp, #8]
 80139f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80139f8:	2301      	movs	r3, #1
 80139fa:	f7fd bb8d 	b.w	8011118 <kalman_3gyro.constprop.0+0x18c8>
 80139fe:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 8013a02:	eef4 4ac8 	vcmpe.f32	s9, s16
 8013a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a0a:	f340 85da 	ble.w	80145c2 <kalman_3gyro.constprop.0+0x4d72>
 8013a0e:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 8013a12:	ed9b 7a4f 	vldr	s14, [fp, #316]	; 0x13c
 8013a16:	ee78 3a62 	vsub.f32	s7, s16, s5
 8013a1a:	ee37 7a44 	vsub.f32	s14, s14, s8
 8013a1e:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8013a22:	ee27 7a23 	vmul.f32	s14, s14, s7
 8013a26:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8013a2a:	ee3e ea04 	vadd.f32	s28, s28, s8
 8013a2e:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 8013a32:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a3a:	f63d a94b 	bhi.w	8010cd4 <kalman_3gyro.constprop.0+0x1484>
 8013a3e:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 8013a42:	eef4 4ac8 	vcmpe.f32	s9, s16
 8013a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a4a:	f340 84bc 	ble.w	80143c6 <kalman_3gyro.constprop.0+0x4b76>
 8013a4e:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 8013a52:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 8013a56:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013a5a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013a5e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013a62:	ee24 4a03 	vmul.f32	s8, s8, s6
 8013a66:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8013a6a:	ee3e ea23 	vadd.f32	s28, s28, s7
 8013a6e:	ed9b 7a54 	vldr	s14, [fp, #336]	; 0x150
 8013a72:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a7a:	f63d a94b 	bhi.w	8010d14 <kalman_3gyro.constprop.0+0x14c4>
 8013a7e:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 8013a82:	eef4 4ac8 	vcmpe.f32	s9, s16
 8013a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a8a:	f340 84a8 	ble.w	80143de <kalman_3gyro.constprop.0+0x4b8e>
 8013a8e:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 8013a92:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 8013a96:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013a9a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013a9e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013aa2:	ee24 4a03 	vmul.f32	s8, s8, s6
 8013aa6:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8013aaa:	ee3e ea23 	vadd.f32	s28, s28, s7
 8013aae:	ed9b 7a58 	vldr	s14, [fp, #352]	; 0x160
 8013ab2:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aba:	f63d a94b 	bhi.w	8010d54 <kalman_3gyro.constprop.0+0x1504>
 8013abe:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 8013ac2:	eef4 4ac8 	vcmpe.f32	s9, s16
 8013ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aca:	f340 8490 	ble.w	80143ee <kalman_3gyro.constprop.0+0x4b9e>
 8013ace:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 8013ad2:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 8013ad6:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013ada:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013ade:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013ae2:	ee24 4a03 	vmul.f32	s8, s8, s6
 8013ae6:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8013aea:	ee3e ea23 	vadd.f32	s28, s28, s7
 8013aee:	ed9b 7a5c 	vldr	s14, [fp, #368]	; 0x170
 8013af2:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013afa:	f6fd a94b 	blt.w	8010d94 <kalman_3gyro.constprop.0+0x1544>
 8013afe:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 8013b02:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8013b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b0a:	f57d a94b 	bpl.w	8010da4 <kalman_3gyro.constprop.0+0x1554>
 8013b0e:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 8013b12:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 8013b16:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013b1a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013b1e:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8013b22:	ee24 7a03 	vmul.f32	s14, s8, s6
 8013b26:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8013b2a:	ee3e ea23 	vadd.f32	s28, s28, s7
 8013b2e:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 8013b32:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b3a:	f6fd a94b 	blt.w	8010dd4 <kalman_3gyro.constprop.0+0x1584>
 8013b3e:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8013b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b46:	f57d a945 	bpl.w	8010dd4 <kalman_3gyro.constprop.0+0x1584>
 8013b4a:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 8013b4e:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 8013b52:	ee78 3a47 	vsub.f32	s7, s16, s14
 8013b56:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8013b5a:	ee35 7a47 	vsub.f32	s14, s10, s14
 8013b5e:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8013b62:	ee85 ea07 	vdiv.f32	s28, s10, s14
 8013b66:	ee3e ea04 	vadd.f32	s28, s28, s8
 8013b6a:	f7fd b933 	b.w	8010dd4 <kalman_3gyro.constprop.0+0x1584>
 8013b6e:	eddf 6a68 	vldr	s13, [pc, #416]	; 8013d10 <kalman_3gyro.constprop.0+0x44c0>
 8013b72:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b7a:	f57d ac56 	bpl.w	801142a <kalman_3gyro.constprop.0+0x1bda>
 8013b7e:	eddf 3a65 	vldr	s7, [pc, #404]	; 8013d14 <kalman_3gyro.constprop.0+0x44c4>
 8013b82:	eddf 2a65 	vldr	s5, [pc, #404]	; 8013d18 <kalman_3gyro.constprop.0+0x44c8>
 8013b86:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8013d1c <kalman_3gyro.constprop.0+0x44cc>
 8013b8a:	eddf 6a65 	vldr	s13, [pc, #404]	; 8013d20 <kalman_3gyro.constprop.0+0x44d0>
 8013b8e:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8013b92:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8013b96:	eee3 6a83 	vfma.f32	s13, s7, s6
 8013b9a:	eeb0 ca66 	vmov.f32	s24, s13
 8013b9e:	eddf 6a61 	vldr	s13, [pc, #388]	; 8013d24 <kalman_3gyro.constprop.0+0x44d4>
 8013ba2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013baa:	f6fd ac56 	blt.w	801145a <kalman_3gyro.constprop.0+0x1c0a>
 8013bae:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8013d28 <kalman_3gyro.constprop.0+0x44d8>
 8013bb2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bba:	f57d ac56 	bpl.w	801146a <kalman_3gyro.constprop.0+0x1c1a>
 8013bbe:	eddf 3a59 	vldr	s7, [pc, #356]	; 8013d24 <kalman_3gyro.constprop.0+0x44d4>
 8013bc2:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8013bc6:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8013bca:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8013bce:	eeb3 3a04 	vmov.f32	s6, #52	; 0x41a00000  20.0
 8013bd2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8013bd6:	eee3 6a83 	vfma.f32	s13, s7, s6
 8013bda:	eeb0 ca66 	vmov.f32	s24, s13
 8013bde:	eddf 6a53 	vldr	s13, [pc, #332]	; 8013d2c <kalman_3gyro.constprop.0+0x44dc>
 8013be2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bea:	f6fd ac56 	blt.w	801149a <kalman_3gyro.constprop.0+0x1c4a>
 8013bee:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8013bf2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bfa:	f57d ac56 	bpl.w	80114aa <kalman_3gyro.constprop.0+0x1c5a>
 8013bfe:	eddf 3a4b 	vldr	s7, [pc, #300]	; 8013d2c <kalman_3gyro.constprop.0+0x44dc>
 8013c02:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8013d30 <kalman_3gyro.constprop.0+0x44e0>
 8013c06:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 8013d34 <kalman_3gyro.constprop.0+0x44e4>
 8013c0a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8013c0e:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8013c12:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8013c16:	eee3 6a83 	vfma.f32	s13, s7, s6
 8013c1a:	eeb0 ca66 	vmov.f32	s24, s13
 8013c1e:	e4f4      	b.n	801360a <kalman_3gyro.constprop.0+0x3dba>
 8013c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c24:	f57d abe1 	bpl.w	80113ea <kalman_3gyro.constprop.0+0x1b9a>
 8013c28:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8013d14 <kalman_3gyro.constprop.0+0x44c4>
 8013c2c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c34:	da9b      	bge.n	8013b6e <kalman_3gyro.constprop.0+0x431e>
 8013c36:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8013c3a:	f7fd bbee 	b.w	801141a <kalman_3gyro.constprop.0+0x1bca>
 8013c3e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013d10 <kalman_3gyro.constprop.0+0x44c0>
 8013c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c4a:	f57d ab5e 	bpl.w	801130a <kalman_3gyro.constprop.0+0x1aba>
 8013c4e:	eddf 6a31 	vldr	s13, [pc, #196]	; 8013d14 <kalman_3gyro.constprop.0+0x44c4>
 8013c52:	eddf 4a39 	vldr	s9, [pc, #228]	; 8013d38 <kalman_3gyro.constprop.0+0x44e8>
 8013c56:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8013d1c <kalman_3gyro.constprop.0+0x44cc>
 8013c5a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013d3c <kalman_3gyro.constprop.0+0x44ec>
 8013c5e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013c62:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8013c66:	eea6 7a86 	vfma.f32	s14, s13, s12
 8013c6a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8013d24 <kalman_3gyro.constprop.0+0x44d4>
 8013c6e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c76:	f6fd ab5e 	blt.w	8011336 <kalman_3gyro.constprop.0+0x1ae6>
 8013c7a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8013d28 <kalman_3gyro.constprop.0+0x44d8>
 8013c7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c86:	f57d ab5e 	bpl.w	8011346 <kalman_3gyro.constprop.0+0x1af6>
 8013c8a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8013d24 <kalman_3gyro.constprop.0+0x44d4>
 8013c8e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013c92:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8013c96:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013c9a:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8013c9e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8013ca2:	eea6 7a86 	vfma.f32	s14, s13, s12
 8013ca6:	eddf 6a21 	vldr	s13, [pc, #132]	; 8013d2c <kalman_3gyro.constprop.0+0x44dc>
 8013caa:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cb2:	f6fd ab5e 	blt.w	8011372 <kalman_3gyro.constprop.0+0x1b22>
 8013cb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cc2:	f57d ab5d 	bpl.w	8011380 <kalman_3gyro.constprop.0+0x1b30>
 8013cc6:	eddf 6a19 	vldr	s13, [pc, #100]	; 8013d2c <kalman_3gyro.constprop.0+0x44dc>
 8013cca:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8013d40 <kalman_3gyro.constprop.0+0x44f0>
 8013cce:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8013d34 <kalman_3gyro.constprop.0+0x44e4>
 8013cd2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8013d44 <kalman_3gyro.constprop.0+0x44f4>
 8013cd6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013cda:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8013cde:	eea6 7a86 	vfma.f32	s14, s13, s12
 8013ce2:	f7fd bb5b 	b.w	801139c <kalman_3gyro.constprop.0+0x1b4c>
 8013ce6:	9b01      	ldr	r3, [sp, #4]
 8013ce8:	e63d      	b.n	8013966 <kalman_3gyro.constprop.0+0x4116>
 8013cea:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 8013cee:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cf6:	da2b      	bge.n	8013d50 <kalman_3gyro.constprop.0+0x4500>
 8013cf8:	ed9f ba13 	vldr	s22, [pc, #76]	; 8013d48 <kalman_3gyro.constprop.0+0x44f8>
 8013cfc:	ed9b 7a34 	vldr	s14, [fp, #208]	; 0xd0
 8013d00:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d08:	db3a      	blt.n	8013d80 <kalman_3gyro.constprop.0+0x4530>
 8013d0a:	e386      	b.n	801441a <kalman_3gyro.constprop.0+0x4bca>
 8013d0c:	40a00000 	.word	0x40a00000
 8013d10:	3cf5c28f 	.word	0x3cf5c28f
 8013d14:	3c75c28f 	.word	0x3c75c28f
 8013d18:	3dccccd0 	.word	0x3dccccd0
 8013d1c:	42855556 	.word	0x42855556
 8013d20:	3f866666 	.word	0x3f866666
 8013d24:	3d4ccccd 	.word	0x3d4ccccd
 8013d28:	3dcccccd 	.word	0x3dcccccd
 8013d2c:	3e4ccccd 	.word	0x3e4ccccd
 8013d30:	42200000 	.word	0x42200000
 8013d34:	40555555 	.word	0x40555555
 8013d38:	3ecccccc 	.word	0x3ecccccc
 8013d3c:	3fcccccd 	.word	0x3fcccccd
 8013d40:	43f00000 	.word	0x43f00000
 8013d44:	42ee0000 	.word	0x42ee0000
 8013d48:	00000000 	.word	0x00000000
 8013d4c:	eeb0 7a64 	vmov.f32	s14, s9
 8013d50:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 8013d54:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8013d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d5c:	f140 8359 	bpl.w	8014412 <kalman_3gyro.constprop.0+0x4bc2>
 8013d60:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 8013d64:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 8013d68:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013d6c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013d70:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013d74:	ee64 4a03 	vmul.f32	s9, s8, s6
 8013d78:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8013d7c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8013d80:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
 8013d84:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d8c:	f2c0 835d 	blt.w	801444a <kalman_3gyro.constprop.0+0x4bfa>
 8013d90:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 8013d94:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8013d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d9c:	f140 8402 	bpl.w	80145a4 <kalman_3gyro.constprop.0+0x4d54>
 8013da0:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 8013da4:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 8013da8:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013dac:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013db0:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013db4:	ee64 4a03 	vmul.f32	s9, s8, s6
 8013db8:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8013dbc:	ee3b ba23 	vadd.f32	s22, s22, s7
 8013dc0:	ed9b 7a3a 	vldr	s14, [fp, #232]	; 0xe8
 8013dc4:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dcc:	f200 835d 	bhi.w	801448a <kalman_3gyro.constprop.0+0x4c3a>
 8013dd0:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 8013dd4:	eef4 4ac8 	vcmpe.f32	s9, s16
 8013dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ddc:	f340 83e8 	ble.w	80145b0 <kalman_3gyro.constprop.0+0x4d60>
 8013de0:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 8013de4:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 8013de8:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013dec:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013df0:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013df4:	ee64 4a03 	vmul.f32	s9, s8, s6
 8013df8:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8013dfc:	ee3b ba23 	vadd.f32	s22, s22, s7
 8013e00:	ed9b 7a3e 	vldr	s14, [fp, #248]	; 0xf8
 8013e04:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e0c:	f200 835d 	bhi.w	80144ca <kalman_3gyro.constprop.0+0x4c7a>
 8013e10:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 8013e14:	eef4 4ac8 	vcmpe.f32	s9, s16
 8013e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e1c:	f340 83b4 	ble.w	8014588 <kalman_3gyro.constprop.0+0x4d38>
 8013e20:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 8013e24:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 8013e28:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013e2c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013e30:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013e34:	ee64 4a03 	vmul.f32	s9, s8, s6
 8013e38:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8013e3c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8013e40:	ed9b 7a42 	vldr	s14, [fp, #264]	; 0x108
 8013e44:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e4c:	f2c0 835c 	blt.w	8014508 <kalman_3gyro.constprop.0+0x4cb8>
 8013e50:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8013e54:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8013e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e5c:	f140 835c 	bpl.w	8014518 <kalman_3gyro.constprop.0+0x4cc8>
 8013e60:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 8013e64:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8013e68:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013e6c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013e70:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8013e74:	ee24 7a03 	vmul.f32	s14, s8, s6
 8013e78:	ee87 ba24 	vdiv.f32	s22, s14, s9
 8013e7c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8013e80:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 8013e84:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e8c:	f6fc aeda 	blt.w	8010c44 <kalman_3gyro.constprop.0+0x13f4>
 8013e90:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8013e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e98:	f57c aed4 	bpl.w	8010c44 <kalman_3gyro.constprop.0+0x13f4>
 8013e9c:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 8013ea0:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 8013ea4:	ee78 3a47 	vsub.f32	s7, s16, s14
 8013ea8:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8013eac:	ee35 7a47 	vsub.f32	s14, s10, s14
 8013eb0:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8013eb4:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8013eb8:	ee3b ba04 	vadd.f32	s22, s22, s8
 8013ebc:	f7fc bec2 	b.w	8010c44 <kalman_3gyro.constprop.0+0x13f4>
 8013ec0:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8013ec4:	eef4 7acd 	vcmpe.f32	s15, s26
 8013ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ecc:	dd2c      	ble.n	8013f28 <kalman_3gyro.constprop.0+0x46d8>
 8013ece:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8013ed2:	eef4 7aeb 	vcmpe.f32	s15, s23
 8013ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eda:	dd25      	ble.n	8013f28 <kalman_3gyro.constprop.0+0x46d8>
 8013edc:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8013ee0:	eef4 7aec 	vcmpe.f32	s15, s25
 8013ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee8:	dd1e      	ble.n	8013f28 <kalman_3gyro.constprop.0+0x46d8>
 8013eea:	eddd 5a03 	vldr	s11, [sp, #12]
 8013eee:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8013ef2:	eef4 5ae7 	vcmpe.f32	s11, s15
 8013ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013efa:	d515      	bpl.n	8013f28 <kalman_3gyro.constprop.0+0x46d8>
 8013efc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013f00:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013f04:	ee37 7a26 	vadd.f32	s14, s14, s13
 8013f08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f10:	d50a      	bpl.n	8013f28 <kalman_3gyro.constprop.0+0x46d8>
 8013f12:	2300      	movs	r3, #0
 8013f14:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013f18:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013f1c:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8013f20:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8013f24:	f7fd bf4c 	b.w	8011dc0 <kalman_3gyro.constprop.0+0x2570>
 8013f28:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 8013f2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f34:	dd0b      	ble.n	8013f4e <kalman_3gyro.constprop.0+0x46fe>
 8013f36:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8013f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f42:	f100 843f 	bmi.w	80147c4 <kalman_3gyro.constprop.0+0x4f74>
 8013f46:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8013f4a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013f4e:	2300      	movs	r3, #0
 8013f50:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8013f54:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8013f58:	f7fd bf32 	b.w	8011dc0 <kalman_3gyro.constprop.0+0x2570>
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013f62:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 8013f66:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 8013f6a:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 8013f6e:	edd2 5a00 	vldr	s11, [r2]
 8013f72:	ed93 7a00 	vldr	s14, [r3]
 8013f76:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 8013f7a:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 8013f7e:	ed92 5a00 	vldr	s10, [r2]
 8013f82:	edd3 6a00 	vldr	s13, [r3]
 8013f86:	ee25 4aa5 	vmul.f32	s8, s11, s11
 8013f8a:	ee67 4a07 	vmul.f32	s9, s14, s14
 8013f8e:	eea5 4a05 	vfma.f32	s8, s10, s10
 8013f92:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 8013f96:	f20b 611c 	addw	r1, fp, #1564	; 0x61c
 8013f9a:	eee6 4aa6 	vfma.f32	s9, s13, s13
 8013f9e:	aa5d      	add	r2, sp, #372	; 0x174
 8013fa0:	a833      	add	r0, sp, #204	; 0xcc
 8013fa2:	ed91 6a00 	vldr	s12, [r1]
 8013fa6:	edd3 7a00 	vldr	s15, [r3]
 8013faa:	eea6 4a06 	vfma.f32	s8, s12, s12
 8013fae:	a92d      	add	r1, sp, #180	; 0xb4
 8013fb0:	ad5d      	add	r5, sp, #372	; 0x174
 8013fb2:	eee7 4aa7 	vfma.f32	s9, s15, s15
 8013fb6:	ac66      	add	r4, sp, #408	; 0x198
 8013fb8:	eef1 2ac4 	vsqrt.f32	s5, s8
 8013fbc:	eeb1 3ae4 	vsqrt.f32	s6, s9
 8013fc0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8013fc4:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 8013fc8:	eec3 4a83 	vdiv.f32	s9, s7, s6
 8013fcc:	ee25 5a04 	vmul.f32	s10, s10, s8
 8013fd0:	ee27 7a24 	vmul.f32	s14, s14, s9
 8013fd4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8013fd8:	ee65 5a84 	vmul.f32	s11, s11, s8
 8013fdc:	ee26 6a04 	vmul.f32	s12, s12, s8
 8013fe0:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8013fe4:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
 8013fe8:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8013fec:	ed8d 5a2d 	vstr	s10, [sp, #180]	; 0xb4
 8013ff0:	edcd 5a2e 	vstr	s11, [sp, #184]	; 0xb8
 8013ff4:	ed8d 6a2f 	vstr	s12, [sp, #188]	; 0xbc
 8013ff8:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 8013ffc:	f7fa fbac 	bl	800e758 <getRotationMatrix>
 8014000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014008:	682e      	ldr	r6, [r5, #0]
 801400a:	6026      	str	r6, [r4, #0]
 801400c:	ad66      	add	r5, sp, #408	; 0x198
 801400e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014010:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8014014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801401a:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 801401e:	ed9d 7a67 	vldr	s14, [sp, #412]	; 0x19c
 8014022:	6026      	str	r6, [r4, #0]
 8014024:	eef0 7ae7 	vabs.f32	s15, s15
 8014028:	eeb0 7ac7 	vabs.f32	s14, s14
 801402c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014034:	f100 81df 	bmi.w	80143f6 <kalman_3gyro.constprop.0+0x4ba6>
 8014038:	2307      	movs	r3, #7
 801403a:	f04f 0c04 	mov.w	ip, #4
 801403e:	9305      	str	r3, [sp, #20]
 8014040:	2300      	movs	r3, #0
 8014042:	4662      	mov	r2, ip
 8014044:	2003      	movs	r0, #3
 8014046:	2706      	movs	r7, #6
 8014048:	f04f 0e01 	mov.w	lr, #1
 801404c:	9304      	str	r3, [sp, #16]
 801404e:	ed9d 7a68 	vldr	s14, [sp, #416]	; 0x1a0
 8014052:	eeb0 7ac7 	vabs.f32	s14, s14
 8014056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801405a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801405e:	f340 8296 	ble.w	801458e <kalman_3gyro.constprop.0+0x4d3e>
 8014062:	2306      	movs	r3, #6
 8014064:	930a      	str	r3, [sp, #40]	; 0x28
 8014066:	2307      	movs	r3, #7
 8014068:	9305      	str	r3, [sp, #20]
 801406a:	2300      	movs	r3, #0
 801406c:	2708      	movs	r7, #8
 801406e:	f04f 0c04 	mov.w	ip, #4
 8014072:	9302      	str	r3, [sp, #8]
 8014074:	2302      	movs	r3, #2
 8014076:	9707      	str	r7, [sp, #28]
 8014078:	4662      	mov	r2, ip
 801407a:	2005      	movs	r0, #5
 801407c:	f04f 0e01 	mov.w	lr, #1
 8014080:	9304      	str	r3, [sp, #16]
 8014082:	ab66      	add	r3, sp, #408	; 0x198
 8014084:	441a      	add	r2, r3
 8014086:	9b07      	ldr	r3, [sp, #28]
 8014088:	edd2 6a00 	vldr	s13, [r2]
 801408c:	9a02      	ldr	r2, [sp, #8]
 801408e:	a966      	add	r1, sp, #408	; 0x198
 8014090:	440b      	add	r3, r1
 8014092:	ed93 7a00 	vldr	s14, [r3]
 8014096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801409a:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 801409e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80140a2:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 80140a6:	9a04      	ldr	r2, [sp, #16]
 80140a8:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 80140ac:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 80140b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80140b4:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80140b8:	0080      	lsls	r0, r0, #2
 80140ba:	900e      	str	r0, [sp, #56]	; 0x38
 80140bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80140be:	940d      	str	r4, [sp, #52]	; 0x34
 80140c0:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 80140c4:	edc3 7a00 	vstr	s15, [r3]
 80140c8:	ed96 7a00 	vldr	s14, [r6]
 80140cc:	edd1 7a00 	vldr	s15, [r1]
 80140d0:	930c      	str	r3, [sp, #48]	; 0x30
 80140d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80140d6:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 80140da:	0080      	lsls	r0, r0, #2
 80140dc:	9006      	str	r0, [sp, #24]
 80140de:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 80140e2:	00bf      	lsls	r7, r7, #2
 80140e4:	9711      	str	r7, [sp, #68]	; 0x44
 80140e6:	9f05      	ldr	r7, [sp, #20]
 80140e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140ea:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80140ee:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 80140f2:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 80140f6:	009b      	lsls	r3, r3, #2
 80140f8:	9307      	str	r3, [sp, #28]
 80140fa:	9b02      	ldr	r3, [sp, #8]
 80140fc:	edc6 6a00 	vstr	s13, [r6]
 8014100:	009b      	lsls	r3, r3, #2
 8014102:	930b      	str	r3, [sp, #44]	; 0x2c
 8014104:	9b04      	ldr	r3, [sp, #16]
 8014106:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8014108:	009b      	lsls	r3, r3, #2
 801410a:	9312      	str	r3, [sp, #72]	; 0x48
 801410c:	9b05      	ldr	r3, [sp, #20]
 801410e:	ed96 7a00 	vldr	s14, [r6]
 8014112:	009b      	lsls	r3, r3, #2
 8014114:	9309      	str	r3, [sp, #36]	; 0x24
 8014116:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 801411a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801411c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8014120:	ed93 6a00 	vldr	s12, [r3]
 8014124:	edd2 7a00 	vldr	s15, [r2]
 8014128:	eee6 7a47 	vfms.f32	s15, s12, s14
 801412c:	ea4f 058e 	mov.w	r5, lr, lsl #2
 8014130:	950a      	str	r5, [sp, #40]	; 0x28
 8014132:	ea4f 058c 	mov.w	r5, ip, lsl #2
 8014136:	edc2 7a00 	vstr	s15, [r2]
 801413a:	ed96 7a00 	vldr	s14, [r6]
 801413e:	edd4 7a00 	vldr	s15, [r4]
 8014142:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8014146:	edc4 7a00 	vstr	s15, [r4]
 801414a:	edd0 5a00 	vldr	s11, [r0]
 801414e:	ed97 7a00 	vldr	s14, [r7]
 8014152:	eea6 7a65 	vfms.f32	s14, s12, s11
 8014156:	eef0 7ae7 	vabs.f32	s15, s15
 801415a:	ed87 7a00 	vstr	s14, [r7]
 801415e:	ed90 6a00 	vldr	s12, [r0]
 8014162:	ed91 7a00 	vldr	s14, [r1]
 8014166:	eea6 7ac6 	vfms.f32	s14, s13, s12
 801416a:	ed81 7a00 	vstr	s14, [r1]
 801416e:	ed92 7a00 	vldr	s14, [r2]
 8014172:	eeb0 7ac7 	vabs.f32	s14, s14
 8014176:	eef4 7ac7 	vcmpe.f32	s15, s14
 801417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801417e:	dd12      	ble.n	80141a6 <kalman_3gyro.constprop.0+0x4956>
 8014180:	9a07      	ldr	r2, [sp, #28]
 8014182:	9f05      	ldr	r7, [sp, #20]
 8014184:	9806      	ldr	r0, [sp, #24]
 8014186:	9209      	str	r2, [sp, #36]	; 0x24
 8014188:	4673      	mov	r3, lr
 801418a:	f8dd e008 	ldr.w	lr, [sp, #8]
 801418e:	9302      	str	r3, [sp, #8]
 8014190:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8014194:	009b      	lsls	r3, r3, #2
 8014196:	9206      	str	r2, [sp, #24]
 8014198:	930b      	str	r3, [sp, #44]	; 0x2c
 801419a:	00ba      	lsls	r2, r7, #2
 801419c:	ea4f 038e 	mov.w	r3, lr, lsl #2
 80141a0:	4605      	mov	r5, r0
 80141a2:	9207      	str	r2, [sp, #28]
 80141a4:	930a      	str	r3, [sp, #40]	; 0x28
 80141a6:	9b06      	ldr	r3, [sp, #24]
 80141a8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80141aa:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 80141ae:	4413      	add	r3, r2
 80141b0:	461c      	mov	r4, r3
 80141b2:	462b      	mov	r3, r5
 80141b4:	4413      	add	r3, r2
 80141b6:	ed94 7a00 	vldr	s14, [r4]
 80141ba:	edd3 7a00 	vldr	s15, [r3]
 80141be:	ee87 2a27 	vdiv.f32	s4, s14, s15
 80141c2:	4618      	mov	r0, r3
 80141c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141c6:	4413      	add	r3, r2
 80141c8:	461a      	mov	r2, r3
 80141ca:	9b07      	ldr	r3, [sp, #28]
 80141cc:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80141d0:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 80141d4:	440b      	add	r3, r1
 80141d6:	4619      	mov	r1, r3
 80141d8:	442e      	add	r6, r5
 80141da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80141dc:	9607      	str	r6, [sp, #28]
 80141de:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80141e0:	ed84 2a00 	vstr	s4, [r4]
 80141e4:	442b      	add	r3, r5
 80141e6:	f50d 67f9 	add.w	r7, sp, #1992	; 0x7c8
 80141ea:	9306      	str	r3, [sp, #24]
 80141ec:	19bb      	adds	r3, r7, r6
 80141ee:	ed92 7a00 	vldr	s14, [r2]
 80141f2:	edd1 7a00 	vldr	s15, [r1]
 80141f6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80141f8:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 80141fc:	edd3 3a00 	vldr	s7, [r3]
 8014200:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 8014204:	eee2 7a47 	vfms.f32	s15, s4, s14
 8014208:	4423      	add	r3, r4
 801420a:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 801420e:	ed93 5a00 	vldr	s10, [r3]
 8014212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014214:	edc1 7a00 	vstr	s15, [r1]
 8014218:	462f      	mov	r7, r5
 801421a:	f50d 65f9 	add.w	r5, sp, #1992	; 0x7c8
 801421e:	4629      	mov	r1, r5
 8014220:	eb05 0c03 	add.w	ip, r5, r3
 8014224:	9d04      	ldr	r5, [sp, #16]
 8014226:	ed92 1a00 	vldr	s2, [r2]
 801422a:	4437      	add	r7, r6
 801422c:	9705      	str	r7, [sp, #20]
 801422e:	eb01 068e 	add.w	r6, r1, lr, lsl #2
 8014232:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 8014236:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 801423a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801423e:	4419      	add	r1, r3
 8014240:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8014244:	ee80 4aa7 	vdiv.f32	s8, s1, s15
 8014248:	191c      	adds	r4, r3, r4
 801424a:	9b02      	ldr	r3, [sp, #8]
 801424c:	9104      	str	r1, [sp, #16]
 801424e:	f50d 61f9 	add.w	r1, sp, #1992	; 0x7c8
 8014252:	9409      	str	r4, [sp, #36]	; 0x24
 8014254:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8014258:	463d      	mov	r5, r7
 801425a:	9904      	ldr	r1, [sp, #16]
 801425c:	46b6      	mov	lr, r6
 801425e:	4623      	mov	r3, r4
 8014260:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8014264:	f5ac 6ccf 	sub.w	ip, ip, #1656	; 0x678
 8014268:	edd0 7a00 	vldr	s15, [r0]
 801426c:	9805      	ldr	r0, [sp, #20]
 801426e:	ed91 0a00 	vldr	s0, [r1]
 8014272:	ed90 8a00 	vldr	s16, [r0]
 8014276:	eddc 4a00 	vldr	s9, [ip]
 801427a:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 801427e:	f5ae 6ecc 	sub.w	lr, lr, #1632	; 0x660
 8014282:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 8014286:	f2a7 676c 	subw	r7, r7, #1644	; 0x66c
 801428a:	f5a5 65cc 	sub.w	r5, r5, #1632	; 0x660
 801428e:	eec0 2aa7 	vdiv.f32	s5, s1, s15
 8014292:	a85d      	add	r0, sp, #372	; 0x174
 8014294:	a93e      	add	r1, sp, #248	; 0xf8
 8014296:	edd7 5a00 	vldr	s11, [r7]
 801429a:	ed96 6a00 	vldr	s12, [r6]
 801429e:	9a06      	ldr	r2, [sp, #24]
 80142a0:	ed95 7a00 	vldr	s14, [r5]
 80142a4:	edd4 6a00 	vldr	s13, [r4]
 80142a8:	ed93 3a00 	vldr	s6, [r3]
 80142ac:	edde 7a00 	vldr	s15, [lr]
 80142b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80142b2:	edd2 1a00 	vldr	s3, [r2]
 80142b6:	9e07      	ldr	r6, [sp, #28]
 80142b8:	eee8 3a45 	vfms.f32	s7, s16, s10
 80142bc:	eee0 4a45 	vfms.f32	s9, s0, s10
 80142c0:	eea8 6a65 	vfms.f32	s12, s16, s11
 80142c4:	eee7 7a48 	vfms.f32	s15, s14, s16
 80142c8:	eee0 6a65 	vfms.f32	s13, s0, s11
 80142cc:	eea7 3a40 	vfms.f32	s6, s14, s0
 80142d0:	ed94 0a00 	vldr	s0, [r4]
 80142d4:	eea2 3a67 	vfms.f32	s6, s4, s15
 80142d8:	eee3 4ac2 	vfms.f32	s9, s7, s4
 80142dc:	eee2 6a46 	vfms.f32	s13, s4, s12
 80142e0:	ee80 2a80 	vdiv.f32	s4, s1, s0
 80142e4:	ee64 6a26 	vmul.f32	s13, s8, s13
 80142e8:	ee64 4a24 	vmul.f32	s9, s8, s9
 80142ec:	ee24 4a03 	vmul.f32	s8, s8, s6
 80142f0:	eea1 6a66 	vfms.f32	s12, s2, s13
 80142f4:	eee4 3ac1 	vfms.f32	s7, s9, s2
 80142f8:	eee4 7a41 	vfms.f32	s15, s8, s2
 80142fc:	eee1 5ae6 	vfms.f32	s11, s3, s13
 8014300:	eea4 5ae1 	vfms.f32	s10, s9, s3
 8014304:	eea4 7a61 	vfms.f32	s14, s8, s3
 8014308:	ed96 3a00 	vldr	s6, [r6]
 801430c:	edcd 6a62 	vstr	s13, [sp, #392]	; 0x188
 8014310:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8014314:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8014318:	ee22 6a86 	vmul.f32	s12, s5, s12
 801431c:	eea7 7ac3 	vfms.f32	s14, s15, s6
 8014320:	eea3 5ac3 	vfms.f32	s10, s7, s6
 8014324:	eee3 5a46 	vfms.f32	s11, s6, s12
 8014328:	ee27 7a02 	vmul.f32	s14, s14, s4
 801432c:	ee22 5a05 	vmul.f32	s10, s4, s10
 8014330:	ee62 5a25 	vmul.f32	s11, s4, s11
 8014334:	ed8d 7a63 	vstr	s14, [sp, #396]	; 0x18c
 8014338:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 801433c:	edcd 4a5f 	vstr	s9, [sp, #380]	; 0x17c
 8014340:	edcd 3a5e 	vstr	s7, [sp, #376]	; 0x178
 8014344:	ed8d 5a5d 	vstr	s10, [sp, #372]	; 0x174
 8014348:	edcd 5a60 	vstr	s11, [sp, #384]	; 0x180
 801434c:	ed8d 6a61 	vstr	s12, [sp, #388]	; 0x184
 8014350:	ed8d 4a65 	vstr	s8, [sp, #404]	; 0x194
 8014354:	f7fa faa0 	bl	800e898 <b_dcm2q>
 8014358:	eddd 6a3f 	vldr	s13, [sp, #252]	; 0xfc
 801435c:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 8014360:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 8014364:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 8014368:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801436c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8014370:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014374:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8014378:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 801437c:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 8014380:	2b00      	cmp	r3, #0
 8014382:	f43d ad20 	beq.w	8011dc6 <kalman_3gyro.constprop.0+0x2576>
 8014386:	2200      	movs	r2, #0
 8014388:	9b01      	ldr	r3, [sp, #4]
 801438a:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 801438e:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 8014392:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 8014396:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801439a:	f7fd bd9c 	b.w	8011ed6 <kalman_3gyro.constprop.0+0x2686>
 801439e:	edd3 7a02 	vldr	s15, [r3, #8]
 80143a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80143a6:	edd3 6a03 	vldr	s13, [r3, #12]
 80143aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80143ae:	eee7 7a07 	vfma.f32	s15, s14, s14
 80143b2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80143b6:	eeb1 6ae7 	vsqrt.f32	s12, s15
 80143ba:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80143be:	ed8b 7a72 	vstr	s14, [fp, #456]	; 0x1c8
 80143c2:	f7ff bb12 	b.w	80139ea <kalman_3gyro.constprop.0+0x419a>
 80143c6:	eeb0 7a64 	vmov.f32	s14, s9
 80143ca:	f7fc bc8b 	b.w	8010ce4 <kalman_3gyro.constprop.0+0x1494>
 80143ce:	eeb0 7a64 	vmov.f32	s14, s9
 80143d2:	f7ff bb94 	b.w	8013afe <kalman_3gyro.constprop.0+0x42ae>
 80143d6:	eeb0 7a64 	vmov.f32	s14, s9
 80143da:	f7ff bb50 	b.w	8013a7e <kalman_3gyro.constprop.0+0x422e>
 80143de:	eeb0 7a64 	vmov.f32	s14, s9
 80143e2:	f7fc bc9f 	b.w	8010d24 <kalman_3gyro.constprop.0+0x14d4>
 80143e6:	eeb0 7a64 	vmov.f32	s14, s9
 80143ea:	f7ff bb68 	b.w	8013abe <kalman_3gyro.constprop.0+0x426e>
 80143ee:	eeb0 7a64 	vmov.f32	s14, s9
 80143f2:	f7fc bcb7 	b.w	8010d64 <kalman_3gyro.constprop.0+0x1514>
 80143f6:	2200      	movs	r2, #0
 80143f8:	2004      	movs	r0, #4
 80143fa:	2301      	movs	r3, #1
 80143fc:	2406      	movs	r4, #6
 80143fe:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8014402:	9007      	str	r0, [sp, #28]
 8014404:	eef0 7a47 	vmov.f32	s15, s14
 8014408:	4696      	mov	lr, r2
 801440a:	f04f 0c03 	mov.w	ip, #3
 801440e:	2707      	movs	r7, #7
 8014410:	e61d      	b.n	801404e <kalman_3gyro.constprop.0+0x47fe>
 8014412:	ed9f bae2 	vldr	s22, [pc, #904]	; 801479c <kalman_3gyro.constprop.0+0x4f4c>
 8014416:	eeb0 7a64 	vmov.f32	s14, s9
 801441a:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 801441e:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8014422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014426:	f140 80b9 	bpl.w	801459c <kalman_3gyro.constprop.0+0x4d4c>
 801442a:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 801442e:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 8014432:	ee38 3a47 	vsub.f32	s6, s16, s14
 8014436:	ee34 4a63 	vsub.f32	s8, s8, s7
 801443a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801443e:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014442:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8014446:	ee3b ba23 	vadd.f32	s22, s22, s7
 801444a:	ed9b 7a38 	vldr	s14, [fp, #224]	; 0xe0
 801444e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8014452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014456:	f6ff acb3 	blt.w	8013dc0 <kalman_3gyro.constprop.0+0x4570>
 801445a:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 801445e:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8014462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014466:	f140 80a0 	bpl.w	80145aa <kalman_3gyro.constprop.0+0x4d5a>
 801446a:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 801446e:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 8014472:	ee38 3a47 	vsub.f32	s6, s16, s14
 8014476:	ee34 4a63 	vsub.f32	s8, s8, s7
 801447a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801447e:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014482:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8014486:	ee3b ba23 	vadd.f32	s22, s22, s7
 801448a:	ed9b 7a3c 	vldr	s14, [fp, #240]	; 0xf0
 801448e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8014492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014496:	f63f acb3 	bhi.w	8013e00 <kalman_3gyro.constprop.0+0x45b0>
 801449a:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 801449e:	eef4 4ac8 	vcmpe.f32	s9, s16
 80144a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144a6:	f340 8086 	ble.w	80145b6 <kalman_3gyro.constprop.0+0x4d66>
 80144aa:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 80144ae:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 80144b2:	ee38 3a47 	vsub.f32	s6, s16, s14
 80144b6:	ee34 4a63 	vsub.f32	s8, s8, s7
 80144ba:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80144be:	ee64 4a03 	vmul.f32	s9, s8, s6
 80144c2:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80144c6:	ee3b ba23 	vadd.f32	s22, s22, s7
 80144ca:	ed9b 7a40 	vldr	s14, [fp, #256]	; 0x100
 80144ce:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80144d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144d6:	f63f acb3 	bhi.w	8013e40 <kalman_3gyro.constprop.0+0x45f0>
 80144da:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 80144de:	eef4 4ac8 	vcmpe.f32	s9, s16
 80144e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e6:	dd69      	ble.n	80145bc <kalman_3gyro.constprop.0+0x4d6c>
 80144e8:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 80144ec:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 80144f0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80144f4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80144f8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80144fc:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014500:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8014504:	ee3b ba23 	vadd.f32	s22, s22, s7
 8014508:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 801450c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014514:	f63f acb4 	bhi.w	8013e80 <kalman_3gyro.constprop.0+0x4630>
 8014518:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 801451c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8014520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014524:	f77f acb4 	ble.w	8013e90 <kalman_3gyro.constprop.0+0x4640>
 8014528:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 801452c:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 8014530:	ee78 3a64 	vsub.f32	s7, s16, s9
 8014534:	ee35 5a44 	vsub.f32	s10, s10, s8
 8014538:	ee37 7a64 	vsub.f32	s14, s14, s9
 801453c:	ee25 5a23 	vmul.f32	s10, s10, s7
 8014540:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8014544:	ee3b ba04 	vadd.f32	s22, s22, s8
 8014548:	f7fc bb7c 	b.w	8010c44 <kalman_3gyro.constprop.0+0x13f4>
 801454c:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8014550:	eddf 7a93 	vldr	s15, [pc, #588]	; 80147a0 <kalman_3gyro.constprop.0+0x4f50>
 8014554:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80147a4 <kalman_3gyro.constprop.0+0x4f54>
 8014558:	3301      	adds	r3, #1
 801455a:	b29b      	uxth	r3, r3
 801455c:	2b31      	cmp	r3, #49	; 0x31
 801455e:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8014562:	bf98      	it	ls
 8014564:	eef0 7a47 	vmovls.f32	s15, s14
 8014568:	f7fd bc1c 	b.w	8011da4 <kalman_3gyro.constprop.0+0x2554>
 801456c:	2a0a      	cmp	r2, #10
 801456e:	d02c      	beq.n	80145ca <kalman_3gyro.constprop.0+0x4d7a>
 8014570:	2100      	movs	r1, #0
 8014572:	3201      	adds	r2, #1
 8014574:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8014578:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 801457c:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8014580:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 8014584:	f7fd bca7 	b.w	8011ed6 <kalman_3gyro.constprop.0+0x2686>
 8014588:	eeb0 7a64 	vmov.f32	s14, s9
 801458c:	e7a5      	b.n	80144da <kalman_3gyro.constprop.0+0x4c8a>
 801458e:	2305      	movs	r3, #5
 8014590:	2108      	movs	r1, #8
 8014592:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
 8014596:	2302      	movs	r3, #2
 8014598:	9302      	str	r3, [sp, #8]
 801459a:	e572      	b.n	8014082 <kalman_3gyro.constprop.0+0x4832>
 801459c:	eeb0 7a64 	vmov.f32	s14, s9
 80145a0:	f7ff bbf6 	b.w	8013d90 <kalman_3gyro.constprop.0+0x4540>
 80145a4:	eeb0 7a64 	vmov.f32	s14, s9
 80145a8:	e757      	b.n	801445a <kalman_3gyro.constprop.0+0x4c0a>
 80145aa:	eeb0 7a64 	vmov.f32	s14, s9
 80145ae:	e40f      	b.n	8013dd0 <kalman_3gyro.constprop.0+0x4580>
 80145b0:	eeb0 7a64 	vmov.f32	s14, s9
 80145b4:	e771      	b.n	801449a <kalman_3gyro.constprop.0+0x4c4a>
 80145b6:	eeb0 7a64 	vmov.f32	s14, s9
 80145ba:	e429      	b.n	8013e10 <kalman_3gyro.constprop.0+0x45c0>
 80145bc:	eeb0 7a64 	vmov.f32	s14, s9
 80145c0:	e446      	b.n	8013e50 <kalman_3gyro.constprop.0+0x4600>
 80145c2:	ed9f ea76 	vldr	s28, [pc, #472]	; 801479c <kalman_3gyro.constprop.0+0x4f4c>
 80145c6:	f7fc bb6d 	b.w	8010ca4 <kalman_3gyro.constprop.0+0x1454>
 80145ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80145cc:	ed94 3a00 	vldr	s6, [r4]
 80145d0:	edd2 5a00 	vldr	s11, [r2]
 80145d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80145d6:	edd0 3a00 	vldr	s7, [r0]
 80145da:	ed92 1a00 	vldr	s2, [r2]
 80145de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80145e0:	ed91 4a00 	vldr	s8, [r1]
 80145e4:	edd2 4a00 	vldr	s9, [r2]
 80145e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80145ea:	ed8d 7a81 	vstr	s14, [sp, #516]	; 0x204
 80145ee:	ed92 2a00 	vldr	s4, [r2]
 80145f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80145f4:	edcd 6a82 	vstr	s13, [sp, #520]	; 0x208
 80145f8:	edd2 7a00 	vldr	s15, [r2]
 80145fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80145fe:	edd2 2a00 	vldr	s5, [r2]
 8014602:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014604:	ee75 5a81 	vadd.f32	s11, s11, s2
 8014608:	edd2 1a00 	vldr	s3, [r2]
 801460c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801460e:	ee74 4a82 	vadd.f32	s9, s9, s4
 8014612:	ee75 5a83 	vadd.f32	s11, s11, s6
 8014616:	ed92 3a00 	vldr	s6, [r2]
 801461a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801461c:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8014620:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8014624:	edd2 3a00 	vldr	s7, [r2]
 8014628:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801462a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801462e:	ed92 4a00 	vldr	s8, [r2]
 8014632:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014634:	ee74 4a83 	vadd.f32	s9, s9, s6
 8014638:	ed92 2a00 	vldr	s4, [r2]
 801463c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801463e:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 8014642:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8014646:	edd2 2a00 	vldr	s5, [r2]
 801464a:	ed91 3a00 	vldr	s6, [r1]
 801464e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014652:	ee74 4a82 	vadd.f32	s9, s9, s4
 8014656:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 801465a:	ee75 5a84 	vadd.f32	s11, s11, s8
 801465e:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 8014662:	ed90 4a00 	vldr	s8, [r0]
 8014666:	edd2 3a00 	vldr	s7, [r2]
 801466a:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 801466e:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 8014672:	ed91 2a00 	vldr	s4, [r1]
 8014676:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 801467a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 801467e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8014682:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 8014686:	ee75 5a84 	vadd.f32	s11, s11, s8
 801468a:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 801468e:	ed90 4a00 	vldr	s8, [r0]
 8014692:	edd2 2a00 	vldr	s5, [r2]
 8014696:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 801469a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801469e:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 80146a2:	edd1 3a00 	vldr	s7, [r1]
 80146a6:	ed90 3a00 	vldr	s6, [r0]
 80146aa:	ee74 4a82 	vadd.f32	s9, s9, s4
 80146ae:	ee75 5a84 	vadd.f32	s11, s11, s8
 80146b2:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 80146b6:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 80146ba:	ed92 4a00 	vldr	s8, [r2]
 80146be:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80146c2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80146c6:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 80146ca:	edd0 3a00 	vldr	s7, [r0]
 80146ce:	edd4 2a00 	vldr	s5, [r4]
 80146d2:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80146d6:	ee75 5a83 	vadd.f32	s11, s11, s6
 80146da:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 80146de:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 80146e2:	ed91 3a00 	vldr	s6, [r1]
 80146e6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80146ea:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80146ee:	ed92 4a00 	vldr	s8, [r2]
 80146f2:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 80146f6:	f60b 0404 	addw	r4, fp, #2052	; 0x804
 80146fa:	edd4 3a00 	vldr	s7, [r4]
 80146fe:	f60b 010c 	addw	r1, fp, #2060	; 0x80c
 8014702:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8014706:	ee77 7a84 	vadd.f32	s15, s15, s8
 801470a:	ee74 4a83 	vadd.f32	s9, s9, s6
 801470e:	ed91 4a00 	vldr	s8, [r1]
 8014712:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8014716:	ee77 7a84 	vadd.f32	s15, s15, s8
 801471a:	ee64 4a85 	vmul.f32	s9, s9, s10
 801471e:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
 8014722:	ee65 5a85 	vmul.f32	s11, s11, s10
 8014726:	edc1 4a00 	vstr	s9, [r1]
 801472a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801472e:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8014732:	edc1 5a00 	vstr	s11, [r1]
 8014736:	f240 1501 	movw	r5, #257	; 0x101
 801473a:	3201      	adds	r2, #1
 801473c:	f20d 41dc 	addw	r1, sp, #1244	; 0x4dc
 8014740:	f8ad 50ae 	strh.w	r5, [sp, #174]	; 0xae
 8014744:	edc1 7a00 	vstr	s15, [r1]
 8014748:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801474c:	2800      	cmp	r0, #0
 801474e:	f43d abc2 	beq.w	8011ed6 <kalman_3gyro.constprop.0+0x2686>
 8014752:	2200      	movs	r2, #0
 8014754:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 8014758:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 801475c:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 8014760:	f88b 2001 	strb.w	r2, [fp, #1]
 8014764:	f7fd bbb7 	b.w	8011ed6 <kalman_3gyro.constprop.0+0x2686>
 8014768:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801476c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014770:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8014774:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8014778:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 801477c:	f7fd bb20 	b.w	8011dc0 <kalman_3gyro.constprop.0+0x2570>
 8014780:	2a00      	cmp	r2, #0
 8014782:	f340 80c1 	ble.w	8014908 <kalman_3gyro.constprop.0+0x50b8>
 8014786:	2300      	movs	r3, #0
 8014788:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 801478c:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8014790:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8014794:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8014798:	f7fc bfcf 	b.w	801173a <kalman_3gyro.constprop.0+0x1eea>
 801479c:	00000000 	.word	0x00000000
 80147a0:	3e4cccce 	.word	0x3e4cccce
 80147a4:	3eaaaaab 	.word	0x3eaaaaab
 80147a8:	3e999998 	.word	0x3e999998
 80147ac:	3f99999a 	.word	0x3f99999a
 80147b0:	3dccccd0 	.word	0x3dccccd0
 80147b4:	3f8ccccd 	.word	0x3f8ccccd
 80147b8:	3e4ccccd 	.word	0x3e4ccccd
 80147bc:	3d088889 	.word	0x3d088889
 80147c0:	3d0d3dcb 	.word	0x3d0d3dcb
 80147c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80147c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80147cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147d0:	d55b      	bpl.n	801488a <kalman_3gyro.constprop.0+0x503a>
 80147d2:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80147b0 <kalman_3gyro.constprop.0+0x4f60>
 80147d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80147da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80147de:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80147e2:	eef0 5a66 	vmov.f32	s11, s13
 80147e6:	eee7 5a06 	vfma.f32	s11, s14, s12
 80147ea:	eef4 7ae6 	vcmpe.f32	s15, s13
 80147ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f2:	eeb0 7a65 	vmov.f32	s14, s11
 80147f6:	db5b      	blt.n	80148b0 <kalman_3gyro.constprop.0+0x5060>
 80147f8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80147fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014804:	d55b      	bpl.n	80148be <kalman_3gyro.constprop.0+0x506e>
 8014806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801480a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801480e:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 80147a8 <kalman_3gyro.constprop.0+0x4f58>
 8014812:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 80147ac <kalman_3gyro.constprop.0+0x4f5c>
 8014816:	eea6 7a86 	vfma.f32	s14, s13, s12
 801481a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 801481e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014826:	db5b      	blt.n	80148e0 <kalman_3gyro.constprop.0+0x5090>
 8014828:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801482c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014834:	d55b      	bpl.n	80148ee <kalman_3gyro.constprop.0+0x509e>
 8014836:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801483a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801483e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014842:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014846:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801484a:	ee68 8a87 	vmul.f32	s17, s17, s14
 801484e:	f7ff bb7e 	b.w	8013f4e <kalman_3gyro.constprop.0+0x46fe>
 8014852:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8014856:	2b27      	cmp	r3, #39	; 0x27
 8014858:	f200 80c3 	bhi.w	80149e2 <kalman_3gyro.constprop.0+0x5192>
 801485c:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8014860:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8014864:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8014868:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 801486c:	2201      	movs	r2, #1
 801486e:	4413      	add	r3, r2
 8014870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014874:	bf14      	ite	ne
 8014876:	b29b      	uxthne	r3, r3
 8014878:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 801487c:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8014880:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8014884:	9b01      	ldr	r3, [sp, #4]
 8014886:	f7fd bb26 	b.w	8011ed6 <kalman_3gyro.constprop.0+0x2686>
 801488a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801488e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014896:	d5af      	bpl.n	80147f8 <kalman_3gyro.constprop.0+0x4fa8>
 8014898:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801489c:	ed1f 6a3c 	vldr	s12, [pc, #-240]	; 80147b0 <kalman_3gyro.constprop.0+0x4f60>
 80148a0:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 80147b4 <kalman_3gyro.constprop.0+0x4f64>
 80148a4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80148a8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80148ac:	eea6 7a86 	vfma.f32	s14, s13, s12
 80148b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80148b4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80148b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148bc:	dbad      	blt.n	801481a <kalman_3gyro.constprop.0+0x4fca>
 80148be:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80148c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80148c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ca:	d5ad      	bpl.n	8014828 <kalman_3gyro.constprop.0+0x4fd8>
 80148cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80148d0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80148d4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80148d8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80148dc:	eea6 7a86 	vfma.f32	s14, s13, s12
 80148e0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80148e4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80148e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ec:	dbad      	blt.n	801484a <kalman_3gyro.constprop.0+0x4ffa>
 80148ee:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80148f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80148f6:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 80147b8 <kalman_3gyro.constprop.0+0x4f68>
 80148fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80148fe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8014902:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014906:	e7a0      	b.n	801484a <kalman_3gyro.constprop.0+0x4ffa>
 8014908:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 801490c:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 8014910:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 8014914:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8014918:	ee66 6a86 	vmul.f32	s13, s13, s12
 801491c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014920:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014924:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 8014928:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 801492c:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 8014930:	f7fc bf03 	b.w	801173a <kalman_3gyro.constprop.0+0x1eea>
 8014934:	ed1f 4a5f 	vldr	s8, [pc, #-380]	; 80147bc <kalman_3gyro.constprop.0+0x4f6c>
 8014938:	ed5f 4a5f 	vldr	s9, [pc, #-380]	; 80147c0 <kalman_3gyro.constprop.0+0x4f70>
 801493c:	ac33      	add	r4, sp, #204	; 0xcc
 801493e:	f04f 30ff 	mov.w	r0, #4294967295
 8014942:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 8014946:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 801494a:	eef0 7a66 	vmov.f32	s15, s13
 801494e:	3001      	adds	r0, #1
 8014950:	461a      	mov	r2, r3
 8014952:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 8014956:	320c      	adds	r2, #12
 8014958:	428a      	cmp	r2, r1
 801495a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801495e:	d1f8      	bne.n	8014952 <kalman_3gyro.constprop.0+0x5102>
 8014960:	ee27 7a84 	vmul.f32	s14, s15, s8
 8014964:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8014968:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801496c:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 8014970:	330c      	adds	r3, #12
 8014972:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014976:	428b      	cmp	r3, r1
 8014978:	eee7 6aa7 	vfma.f32	s13, s15, s15
 801497c:	d1f6      	bne.n	801496c <kalman_3gyro.constprop.0+0x511c>
 801497e:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8014982:	2802      	cmp	r0, #2
 8014984:	f103 0104 	add.w	r1, r3, #4
 8014988:	ece4 6a01 	vstmia	r4!, {s13}
 801498c:	d1d9      	bne.n	8014942 <kalman_3gyro.constprop.0+0x50f2>
 801498e:	eddd 6a34 	vldr	s13, [sp, #208]	; 0xd0
 8014992:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 8014996:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 801499a:	eef1 3ae7 	vsqrt.f32	s7, s15
 801499e:	eeb1 4ae6 	vsqrt.f32	s8, s13
 80149a2:	eef1 4ac7 	vsqrt.f32	s9, s14
 80149a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80149aa:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80149ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80149b2:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 80149b6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80149ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149be:	ed8d 4a34 	vstr	s8, [sp, #208]	; 0xd0
 80149c2:	edcd 4a35 	vstr	s9, [sp, #212]	; 0xd4
 80149c6:	f57d aa62 	bpl.w	8011e8e <kalman_3gyro.constprop.0+0x263e>
 80149ca:	2200      	movs	r2, #0
 80149cc:	9b01      	ldr	r3, [sp, #4]
 80149ce:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 80149d2:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 80149d6:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 80149da:	f88b 2001 	strb.w	r2, [fp, #1]
 80149de:	f7fd ba7a 	b.w	8011ed6 <kalman_3gyro.constprop.0+0x2686>
 80149e2:	9b08      	ldr	r3, [sp, #32]
 80149e4:	6999      	ldr	r1, [r3, #24]
 80149e6:	69da      	ldr	r2, [r3, #28]
 80149e8:	6a1b      	ldr	r3, [r3, #32]
 80149ea:	9181      	str	r1, [sp, #516]	; 0x204
 80149ec:	9282      	str	r2, [sp, #520]	; 0x208
 80149ee:	9383      	str	r3, [sp, #524]	; 0x20c
 80149f0:	e73a      	b.n	8014868 <kalman_3gyro.constprop.0+0x5018>
 80149f2:	bf00      	nop
 80149f4:	0000      	movs	r0, r0
	...

080149f8 <iNemoEngine_API_Update>:
 80149f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149fc:	ed2d 8b0c 	vpush	{d8-d13}
 8014a00:	4604      	mov	r4, r0
 8014a02:	b0c1      	sub	sp, #260	; 0x104
 8014a04:	460d      	mov	r5, r1
 8014a06:	4617      	mov	r7, r2
 8014a08:	eeb0 8a40 	vmov.f32	s16, s0
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	f000 8253 	beq.w	8014eb8 <iNemoEngine_API_Update+0x4c0>
 8014a12:	461e      	mov	r6, r3
 8014a14:	463b      	mov	r3, r7
 8014a16:	f894 c978 	ldrb.w	ip, [r4, #2424]	; 0x978
 8014a1a:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 8014a1e:	6859      	ldr	r1, [r3, #4]
 8014a20:	689a      	ldr	r2, [r3, #8]
 8014a22:	ab33      	add	r3, sp, #204	; 0xcc
 8014a24:	c307      	stmia	r3!, {r0, r1, r2}
 8014a26:	6879      	ldr	r1, [r7, #4]
 8014a28:	68ba      	ldr	r2, [r7, #8]
 8014a2a:	6838      	ldr	r0, [r7, #0]
 8014a2c:	ab30      	add	r3, sp, #192	; 0xc0
 8014a2e:	c307      	stmia	r3!, {r0, r1, r2}
 8014a30:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8014a34:	6879      	ldr	r1, [r7, #4]
 8014a36:	68ba      	ldr	r2, [r7, #8]
 8014a38:	ab36      	add	r3, sp, #216	; 0xd8
 8014a3a:	c307      	stmia	r3!, {r0, r1, r2}
 8014a3c:	f1bc 0f00 	cmp.w	ip, #0
 8014a40:	d005      	beq.n	8014a4e <iNemoEngine_API_Update+0x56>
 8014a42:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8014a46:	7923      	ldrb	r3, [r4, #4]
 8014a48:	429a      	cmp	r2, r3
 8014a4a:	f080 829b 	bcs.w	8014f84 <iNemoEngine_API_Update+0x58c>
 8014a4e:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 8014a52:	f10d 0a14 	add.w	sl, sp, #20
 8014a56:	2300      	movs	r3, #0
 8014a58:	4649      	mov	r1, r9
 8014a5a:	4650      	mov	r0, sl
 8014a5c:	aa33      	add	r2, sp, #204	; 0xcc
 8014a5e:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8014a62:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8014a66:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8014a6a:	f7f9 fb65 	bl	800e138 <rotVect>
 8014a6e:	aa36      	add	r2, sp, #216	; 0xd8
 8014a70:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8014a74:	a808      	add	r0, sp, #32
 8014a76:	f7f9 fb5f 	bl	800e138 <rotVect>
 8014a7a:	aa30      	add	r2, sp, #192	; 0xc0
 8014a7c:	4640      	mov	r0, r8
 8014a7e:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8014a82:	f7f9 fb59 	bl	800e138 <rotVect>
 8014a86:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8014a8a:	b923      	cbnz	r3, 8014a96 <iNemoEngine_API_Update+0x9e>
 8014a8c:	4b8c      	ldr	r3, [pc, #560]	; (8014cc0 <iNemoEngine_API_Update+0x2c8>)
 8014a8e:	930c      	str	r3, [sp, #48]	; 0x30
 8014a90:	2200      	movs	r2, #0
 8014a92:	920b      	str	r2, [sp, #44]	; 0x2c
 8014a94:	930d      	str	r3, [sp, #52]	; 0x34
 8014a96:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8014a9a:	2f09      	cmp	r7, #9
 8014a9c:	d851      	bhi.n	8014b42 <iNemoEngine_API_Update+0x14a>
 8014a9e:	ed9d ba06 	vldr	s22, [sp, #24]
 8014aa2:	eddd ba05 	vldr	s23, [sp, #20]
 8014aa6:	eddd aa07 	vldr	s21, [sp, #28]
 8014aaa:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 8014aae:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8014ab2:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8014ab6:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8014aba:	ee17 0a90 	vmov	r0, s15
 8014abe:	f7eb fd3b 	bl	8000538 <__aeabi_f2d>
 8014ac2:	ec41 0b10 	vmov	d0, r0, r1
 8014ac6:	f004 fb4d 	bl	8019164 <sqrt>
 8014aca:	ec51 0b10 	vmov	r0, r1, d0
 8014ace:	f7ec f83b 	bl	8000b48 <__aeabi_d2f>
 8014ad2:	ee07 0a90 	vmov	s15, r0
 8014ad6:	ee8c 7a27 	vdiv.f32	s14, s24, s15
 8014ada:	eddd 9a0c 	vldr	s19, [sp, #48]	; 0x30
 8014ade:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 8014ae2:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 8014ae6:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8014aea:	ee6b ba87 	vmul.f32	s23, s23, s14
 8014aee:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8014af2:	ee2b ba07 	vmul.f32	s22, s22, s14
 8014af6:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8014afa:	ee6a aa87 	vmul.f32	s21, s21, s14
 8014afe:	ee17 0a90 	vmov	r0, s15
 8014b02:	edcd ba05 	vstr	s23, [sp, #20]
 8014b06:	ed8d ba06 	vstr	s22, [sp, #24]
 8014b0a:	edcd aa07 	vstr	s21, [sp, #28]
 8014b0e:	f7eb fd13 	bl	8000538 <__aeabi_f2d>
 8014b12:	ec41 0b10 	vmov	d0, r0, r1
 8014b16:	f004 fb25 	bl	8019164 <sqrt>
 8014b1a:	ec51 0b10 	vmov	r0, r1, d0
 8014b1e:	f7ec f813 	bl	8000b48 <__aeabi_d2f>
 8014b22:	ee07 0a90 	vmov	s15, r0
 8014b26:	eecc 7a27 	vdiv.f32	s15, s24, s15
 8014b2a:	ee2a aa27 	vmul.f32	s20, s20, s15
 8014b2e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8014b32:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014b36:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
 8014b3a:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
 8014b3e:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 8014b42:	7923      	ldrb	r3, [r4, #4]
 8014b44:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8014b48:	429a      	cmp	r2, r3
 8014b4a:	f080 80dd 	bcs.w	8014d08 <iNemoEngine_API_Update+0x310>
 8014b4e:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8014b52:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8014b56:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8014b5a:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8014b5e:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8014b62:	3701      	adds	r7, #1
 8014b64:	aa33      	add	r2, sp, #204	; 0xcc
 8014b66:	4649      	mov	r1, r9
 8014b68:	4640      	mov	r0, r8
 8014b6a:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8014b6e:	9303      	str	r3, [sp, #12]
 8014b70:	f7f9 fae2 	bl	800e138 <rotVect>
 8014b74:	9b03      	ldr	r3, [sp, #12]
 8014b76:	f8db 1000 	ldr.w	r1, [fp]
 8014b7a:	6818      	ldr	r0, [r3, #0]
 8014b7c:	f8da 2000 	ldr.w	r2, [sl]
 8014b80:	6833      	ldr	r3, [r6, #0]
 8014b82:	61ab      	str	r3, [r5, #24]
 8014b84:	60e8      	str	r0, [r5, #12]
 8014b86:	6129      	str	r1, [r5, #16]
 8014b88:	616a      	str	r2, [r5, #20]
 8014b8a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014b8e:	9301      	str	r3, [sp, #4]
 8014b90:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8014b94:	4641      	mov	r1, r8
 8014b96:	9300      	str	r3, [sp, #0]
 8014b98:	462a      	mov	r2, r5
 8014b9a:	f105 031c 	add.w	r3, r5, #28
 8014b9e:	f105 000c 	add.w	r0, r5, #12
 8014ba2:	f7fa fd85 	bl	800f6b0 <output_update>
 8014ba6:	ed95 8a00 	vldr	s16, [r5]
 8014baa:	edd5 9a01 	vldr	s19, [r5, #4]
 8014bae:	eeb0 0a48 	vmov.f32	s0, s16
 8014bb2:	f004 fa6b 	bl	801908c <sinf>
 8014bb6:	eddf 7a43 	vldr	s15, [pc, #268]	; 8014cc4 <iNemoEngine_API_Update+0x2cc>
 8014bba:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8014cc8 <iNemoEngine_API_Update+0x2d0>
 8014bbe:	ee60 8a00 	vmul.f32	s17, s0, s0
 8014bc2:	eef0 6ae9 	vabs.f32	s13, s19
 8014bc6:	eee8 7aa7 	vfma.f32	s15, s17, s15
 8014bca:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bd2:	eef0 8a67 	vmov.f32	s17, s15
 8014bd6:	d56e      	bpl.n	8014cb6 <iNemoEngine_API_Update+0x2be>
 8014bd8:	eeb0 0a69 	vmov.f32	s0, s19
 8014bdc:	f004 fa98 	bl	8019110 <tanf>
 8014be0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014be4:	eea0 9a28 	vfma.f32	s18, s0, s17
 8014be8:	eef1 7ac9 	vsqrt.f32	s15, s18
 8014bec:	eddf 6a37 	vldr	s13, [pc, #220]	; 8014ccc <iNemoEngine_API_Update+0x2d4>
 8014bf0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8014ce0 <iNemoEngine_API_Update+0x2e8>
 8014bf4:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8014bf8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014bfc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c04:	bf88      	it	hi
 8014c06:	eef0 7a66 	vmovhi.f32	s15, s13
 8014c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c12:	bfb8      	it	lt
 8014c14:	eef0 7a47 	vmovlt.f32	s15, s14
 8014c18:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8014c1c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014c20:	4c2b      	ldr	r4, [pc, #172]	; (8014cd0 <iNemoEngine_API_Update+0x2d8>)
 8014c22:	bba3      	cbnz	r3, 8014c8e <iNemoEngine_API_Update+0x296>
 8014c24:	6820      	ldr	r0, [r4, #0]
 8014c26:	edd5 0a08 	vldr	s1, [r5, #32]
 8014c2a:	ed95 0a07 	vldr	s0, [r5, #28]
 8014c2e:	edd5 9a03 	vldr	s19, [r5, #12]
 8014c32:	ed95 aa04 	vldr	s20, [r5, #16]
 8014c36:	ed95 9a05 	vldr	s18, [r5, #20]
 8014c3a:	edd5 8a06 	vldr	s17, [r5, #24]
 8014c3e:	f7f9 fb4b 	bl	800e2d8 <findDirection>
 8014c42:	6020      	str	r0, [r4, #0]
 8014c44:	2805      	cmp	r0, #5
 8014c46:	f200 833d 	bhi.w	80152c4 <iNemoEngine_API_Update+0x8cc>
 8014c4a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8014c4e:	000a      	.short	0x000a
 8014c50:	00060137 	.word	0x00060137
 8014c54:	00060169 	.word	0x00060169
 8014c58:	000a      	.short	0x000a
 8014c5a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8014cd4 <iNemoEngine_API_Update+0x2dc>
 8014c5e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8014c62:	eddf 7a28 	vldr	s15, [pc, #160]	; 8014d04 <iNemoEngine_API_Update+0x30c>
 8014c66:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c6e:	bfa8      	it	ge
 8014c70:	ee38 8a67 	vsubge.f32	s16, s16, s15
 8014c74:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c7c:	f100 8111 	bmi.w	8014ea2 <iNemoEngine_API_Update+0x4aa>
 8014c80:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 8014c84:	b041      	add	sp, #260	; 0x104
 8014c86:	ecbd 8b0c 	vpop	{d8-d13}
 8014c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c8e:	ed95 9a05 	vldr	s18, [r5, #20]
 8014c92:	6820      	ldr	r0, [r4, #0]
 8014c94:	edd5 0a07 	vldr	s1, [r5, #28]
 8014c98:	ed95 0a08 	vldr	s0, [r5, #32]
 8014c9c:	edd5 9a04 	vldr	s19, [r5, #16]
 8014ca0:	ed95 aa03 	vldr	s20, [r5, #12]
 8014ca4:	edd5 8a06 	vldr	s17, [r5, #24]
 8014ca8:	eeb1 1a41 	vneg.f32	s2, s2
 8014cac:	eeb1 9a49 	vneg.f32	s18, s18
 8014cb0:	f7f9 fb12 	bl	800e2d8 <findDirection>
 8014cb4:	e7c5      	b.n	8014c42 <iNemoEngine_API_Update+0x24a>
 8014cb6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014cd8 <iNemoEngine_API_Update+0x2e0>
 8014cba:	eea8 9aa7 	vfma.f32	s18, s17, s15
 8014cbe:	e793      	b.n	8014be8 <iNemoEngine_API_Update+0x1f0>
 8014cc0:	3f333333 	.word	0x3f333333
 8014cc4:	00000000 	.word	0x00000000
 8014cc8:	3fbc430e 	.word	0x3fbc430e
 8014ccc:	40490fdb 	.word	0x40490fdb
 8014cd0:	20000218 	.word	0x20000218
 8014cd4:	43340000 	.word	0x43340000
 8014cd8:	42c6ab07 	.word	0x42c6ab07
 8014cdc:	3c03126f 	.word	0x3c03126f
 8014ce0:	3c8efa35 	.word	0x3c8efa35
 8014ce4:	3e4ccccd 	.word	0x3e4ccccd
 8014ce8:	3fb50481 	.word	0x3fb50481
 8014cec:	3ed93dd9 	.word	0x3ed93dd9
 8014cf0:	3b656042 	.word	0x3b656042
 8014cf4:	42c80000 	.word	0x42c80000
 8014cf8:	3a83126f 	.word	0x3a83126f
 8014cfc:	3d4ccccd 	.word	0x3d4ccccd
 8014d00:	3f333333 	.word	0x3f333333
 8014d04:	43b40000 	.word	0x43b40000
 8014d08:	ee07 3a90 	vmov	s15, r3
 8014d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014d10:	ed5f 5a0e 	vldr	s11, [pc, #-56]	; 8014cdc <iNemoEngine_API_Update+0x2e4>
 8014d14:	ed1f 4a0e 	vldr	s8, [pc, #-56]	; 8014ce0 <iNemoEngine_API_Update+0x2e8>
 8014d18:	ed1f 3a0b 	vldr	s6, [pc, #-44]	; 8014cf0 <iNemoEngine_API_Update+0x2f8>
 8014d1c:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8014cec <iNemoEngine_API_Update+0x2f4>
 8014d20:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 8014ce8 <iNemoEngine_API_Update+0x2f0>
 8014d24:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8014ce4 <iNemoEngine_API_Update+0x2ec>
 8014d28:	ee27 1a88 	vmul.f32	s2, s15, s16
 8014d2c:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 8014d30:	ee85 5a81 	vdiv.f32	s10, s11, s2
 8014d34:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8014d38:	2700      	movs	r7, #0
 8014d3a:	f8a4 7950 	strh.w	r7, [r4, #2384]	; 0x950
 8014d3e:	f04f 0c00 	mov.w	ip, #0
 8014d42:	f504 6716 	add.w	r7, r4, #2400	; 0x960
 8014d46:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8014d4a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8014d4e:	edd3 5a00 	vldr	s11, [r3]
 8014d52:	f8c3 c000 	str.w	ip, [r3]
 8014d56:	eef1 7ac5 	vsqrt.f32	s15, s10
 8014d5a:	f604 1364 	addw	r3, r4, #2404	; 0x964
 8014d5e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8014d62:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8014d66:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8014d6a:	edd7 4a00 	vldr	s9, [r7]
 8014d6e:	f8c7 c000 	str.w	ip, [r7]
 8014d72:	ed93 5a00 	vldr	s10, [r3]
 8014d76:	f8c3 c000 	str.w	ip, [r3]
 8014d7a:	7963      	ldrb	r3, [r4, #5]
 8014d7c:	ee64 4a84 	vmul.f32	s9, s9, s8
 8014d80:	ee25 5a04 	vmul.f32	s10, s10, s8
 8014d84:	ee65 5a84 	vmul.f32	s11, s11, s8
 8014d88:	2b01      	cmp	r3, #1
 8014d8a:	eec3 3a27 	vdiv.f32	s7, s6, s15
 8014d8e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8014d92:	ee27 6a86 	vmul.f32	s12, s15, s12
 8014d96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014d9a:	edcd 4a2b 	vstr	s9, [sp, #172]	; 0xac
 8014d9e:	ed8d 5a2c 	vstr	s10, [sp, #176]	; 0xb0
 8014da2:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 8014da6:	f000 812e 	beq.w	8015006 <iNemoEngine_API_Update+0x60e>
 8014daa:	2b02      	cmp	r3, #2
 8014dac:	f000 8122 	beq.w	8014ff4 <iNemoEngine_API_Update+0x5fc>
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	f000 80ef 	beq.w	8014f94 <iNemoEngine_API_Update+0x59c>
 8014db6:	edd4 0a05 	vldr	s1, [r4, #20]
 8014dba:	ed1f 5a32 	vldr	s10, [pc, #-200]	; 8014cf4 <iNemoEngine_API_Update+0x2fc>
 8014dbe:	ed1f 0a32 	vldr	s0, [pc, #-200]	; 8014cf8 <iNemoEngine_API_Update+0x300>
 8014dc2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8014dc6:	ee60 0a85 	vmul.f32	s1, s1, s10
 8014dca:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014dce:	8863      	ldrh	r3, [r4, #2]
 8014dd0:	1e5a      	subs	r2, r3, #1
 8014dd2:	2a12      	cmp	r2, #18
 8014dd4:	f200 80e7 	bhi.w	8014fa6 <iNemoEngine_API_Update+0x5ae>
 8014dd8:	3301      	adds	r3, #1
 8014dda:	b21a      	sxth	r2, r3
 8014ddc:	b29b      	uxth	r3, r3
 8014dde:	2b03      	cmp	r3, #3
 8014de0:	8062      	strh	r2, [r4, #2]
 8014de2:	f240 8115 	bls.w	8015010 <iNemoEngine_API_Update+0x618>
 8014de6:	ee05 2a90 	vmov	s11, r2
 8014dea:	ed1f 5a3c 	vldr	s10, [pc, #-240]	; 8014cfc <iNemoEngine_API_Update+0x304>
 8014dee:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014df2:	ee65 5a85 	vmul.f32	s11, s11, s10
 8014df6:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8014dfa:	eec3 7aa5 	vdiv.f32	s15, s7, s11
 8014dfe:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 8014e02:	ed1f 5a41 	vldr	s10, [pc, #-260]	; 8014d00 <iNemoEngine_API_Update+0x308>
 8014e06:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 8014e0a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8014e0e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014e12:	ee26 6a25 	vmul.f32	s12, s12, s11
 8014e16:	ee27 7a05 	vmul.f32	s14, s14, s10
 8014e1a:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8014e1e:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8014e22:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 8014e26:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8014e2a:	aa1a      	add	r2, sp, #104	; 0x68
 8014e2c:	af16      	add	r7, sp, #88	; 0x58
 8014e2e:	e9cd 7200 	strd	r7, r2, [sp]
 8014e32:	ab12      	add	r3, sp, #72	; 0x48
 8014e34:	aa1e      	add	r2, sp, #120	; 0x78
 8014e36:	4641      	mov	r1, r8
 8014e38:	4620      	mov	r0, r4
 8014e3a:	f7fa fd09 	bl	800f850 <kalman_3gyro.constprop.0>
 8014e3e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014e40:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 8014e44:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 8014e48:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 8014e4c:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 8014e50:	f8c7 a000 	str.w	sl, [r7]
 8014e54:	f604 1744 	addw	r7, r4, #2372	; 0x944
 8014e58:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8014e5c:	f8c7 e000 	str.w	lr, [r7]
 8014e60:	f604 1748 	addw	r7, r4, #2376	; 0x948
 8014e64:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8014e68:	f8c7 c000 	str.w	ip, [r7]
 8014e6c:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8014e70:	6030      	str	r0, [r6, #0]
 8014e72:	60f3      	str	r3, [r6, #12]
 8014e74:	6071      	str	r1, [r6, #4]
 8014e76:	60b2      	str	r2, [r6, #8]
 8014e78:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8014e7c:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8014e80:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8014e84:	9819      	ldr	r0, [sp, #100]	; 0x64
 8014e86:	ed94 9a75 	vldr	s18, [r4, #468]	; 0x1d4
 8014e8a:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8014e8e:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8014e92:	edc3 7a00 	vstr	s15, [r3]
 8014e96:	f8cb e000 	str.w	lr, [fp]
 8014e9a:	f8ca c000 	str.w	ip, [sl]
 8014e9e:	6030      	str	r0, [r6, #0]
 8014ea0:	e65f      	b.n	8014b62 <iNemoEngine_API_Update+0x16a>
 8014ea2:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8014d04 <iNemoEngine_API_Update+0x30c>
 8014ea6:	ee38 8a27 	vadd.f32	s16, s16, s15
 8014eaa:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 8014eae:	b041      	add	sp, #260	; 0x104
 8014eb0:	ecbd 8b0c 	vpop	{d8-d13}
 8014eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eb8:	ae0e      	add	r6, sp, #56	; 0x38
 8014eba:	e5ab      	b.n	8014a14 <iNemoEngine_API_Update+0x1c>
 8014ebc:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8014ec0:	ee69 8a28 	vmul.f32	s17, s18, s17
 8014ec4:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8014ec8:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8014ecc:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8014ed0:	eee9 7a49 	vfms.f32	s15, s18, s18
 8014ed4:	ee17 0a90 	vmov	r0, s15
 8014ed8:	f7eb fb2e 	bl	8000538 <__aeabi_f2d>
 8014edc:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8014ee0:	4602      	mov	r2, r0
 8014ee2:	460b      	mov	r3, r1
 8014ee4:	ee17 0a90 	vmov	r0, s15
 8014ee8:	ec43 2b18 	vmov	d8, r2, r3
 8014eec:	f7eb fb24 	bl	8000538 <__aeabi_f2d>
 8014ef0:	eeb0 1a48 	vmov.f32	s2, s16
 8014ef4:	eef0 1a68 	vmov.f32	s3, s17
 8014ef8:	ec41 0b10 	vmov	d0, r0, r1
 8014efc:	f004 f930 	bl	8019160 <atan2>
 8014f00:	a3f3      	add	r3, pc, #972	; (adr r3, 80152d0 <iNemoEngine_API_Update+0x8d8>)
 8014f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f06:	ec51 0b10 	vmov	r0, r1, d0
 8014f0a:	f7eb fb6d 	bl	80005e8 <__aeabi_dmul>
 8014f0e:	4bf2      	ldr	r3, [pc, #968]	; (80152d8 <iNemoEngine_API_Update+0x8e0>)
 8014f10:	2200      	movs	r2, #0
 8014f12:	f7eb f9b1 	bl	8000278 <__aeabi_dsub>
 8014f16:	f7eb fe17 	bl	8000b48 <__aeabi_d2f>
 8014f1a:	ee08 0a10 	vmov	s16, r0
 8014f1e:	e6a0      	b.n	8014c62 <iNemoEngine_API_Update+0x26a>
 8014f20:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8014f24:	ee69 8a28 	vmul.f32	s17, s18, s17
 8014f28:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8014f2c:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8014f30:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8014f34:	eee9 7a49 	vfms.f32	s15, s18, s18
 8014f38:	ee17 0a90 	vmov	r0, s15
 8014f3c:	f7eb fafc 	bl	8000538 <__aeabi_f2d>
 8014f40:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8014f44:	4602      	mov	r2, r0
 8014f46:	460b      	mov	r3, r1
 8014f48:	ee17 0a90 	vmov	r0, s15
 8014f4c:	ec43 2b18 	vmov	d8, r2, r3
 8014f50:	f7eb faf2 	bl	8000538 <__aeabi_f2d>
 8014f54:	eeb0 1a48 	vmov.f32	s2, s16
 8014f58:	eef0 1a68 	vmov.f32	s3, s17
 8014f5c:	ec41 0b10 	vmov	d0, r0, r1
 8014f60:	f004 f8fe 	bl	8019160 <atan2>
 8014f64:	a3da      	add	r3, pc, #872	; (adr r3, 80152d0 <iNemoEngine_API_Update+0x8d8>)
 8014f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f6a:	ec51 0b10 	vmov	r0, r1, d0
 8014f6e:	f7eb fb3b 	bl	80005e8 <__aeabi_dmul>
 8014f72:	4bd9      	ldr	r3, [pc, #868]	; (80152d8 <iNemoEngine_API_Update+0x8e0>)
 8014f74:	2200      	movs	r2, #0
 8014f76:	f7eb f981 	bl	800027c <__adddf3>
 8014f7a:	f7eb fde5 	bl	8000b48 <__aeabi_d2f>
 8014f7e:	ee08 0a10 	vmov	s16, r0
 8014f82:	e66e      	b.n	8014c62 <iNemoEngine_API_Update+0x26a>
 8014f84:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	dd44      	ble.n	8015016 <iNemoEngine_API_Update+0x61e>
 8014f8c:	3b01      	subs	r3, #1
 8014f8e:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 8014f92:	e55c      	b.n	8014a4e <iNemoEngine_API_Update+0x56>
 8014f94:	8863      	ldrh	r3, [r4, #2]
 8014f96:	eddf 0ad1 	vldr	s1, [pc, #836]	; 80152dc <iNemoEngine_API_Update+0x8e4>
 8014f9a:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 80152e0 <iNemoEngine_API_Update+0x8e8>
 8014f9e:	1e5a      	subs	r2, r3, #1
 8014fa0:	2a12      	cmp	r2, #18
 8014fa2:	f67f af19 	bls.w	8014dd8 <iNemoEngine_API_Update+0x3e0>
 8014fa6:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 8014faa:	eddf 2ace 	vldr	s5, [pc, #824]	; 80152e4 <iNemoEngine_API_Update+0x8ec>
 8014fae:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 8014fb2:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8014fb6:	ee34 4a22 	vadd.f32	s8, s8, s5
 8014fba:	ee64 7aa6 	vmul.f32	s15, s9, s13
 8014fbe:	eec3 4a84 	vdiv.f32	s9, s7, s8
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	8063      	strh	r3, [r4, #2]
 8014fc6:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 8014fca:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 8014fce:	ed9f 3ac6 	vldr	s6, [pc, #792]	; 80152e8 <iNemoEngine_API_Update+0x8f0>
 8014fd2:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
 8014fd6:	ee65 6a26 	vmul.f32	s13, s10, s13
 8014fda:	ee25 6a86 	vmul.f32	s12, s11, s12
 8014fde:	ee27 7a03 	vmul.f32	s14, s14, s6
 8014fe2:	edcd 4a1e 	vstr	s9, [sp, #120]	; 0x78
 8014fe6:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8014fea:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 8014fee:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8014ff2:	e71a      	b.n	8014e2a <iNemoEngine_API_Update+0x432>
 8014ff4:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8014ff8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014ffc:	edd4 0a05 	vldr	s1, [r4, #20]
 8015000:	ed9f 0aba 	vldr	s0, [pc, #744]	; 80152ec <iNemoEngine_API_Update+0x8f4>
 8015004:	e6e3      	b.n	8014dce <iNemoEngine_API_Update+0x3d6>
 8015006:	edd4 0a05 	vldr	s1, [r4, #20]
 801500a:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 80152f0 <iNemoEngine_API_Update+0x8f8>
 801500e:	e6de      	b.n	8014dce <iNemoEngine_API_Update+0x3d6>
 8015010:	eddf 5ab8 	vldr	s11, [pc, #736]	; 80152f4 <iNemoEngine_API_Update+0x8fc>
 8015014:	e6ef      	b.n	8014df6 <iNemoEngine_API_Update+0x3fe>
 8015016:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 801501a:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 801501e:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 8015022:	ed97 5a00 	vldr	s10, [r7]
 8015026:	ed92 da00 	vldr	s26, [r2]
 801502a:	ed93 6a00 	vldr	s12, [r3]
 801502e:	ed9f 0aab 	vldr	s0, [pc, #684]	; 80152dc <iNemoEngine_API_Update+0x8e4>
 8015032:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 8015036:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 801503a:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 801503e:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 8015042:	ed91 3a00 	vldr	s6, [r1]
 8015046:	ed92 1a00 	vldr	s2, [r2]
 801504a:	ed97 7a00 	vldr	s14, [r7]
 801504e:	edd3 3a00 	vldr	s7, [r3]
 8015052:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 8015056:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 801505a:	eeb8 4a00 	vmov.f32	s8, #128	; 0xc0000000 -2.0
 801505e:	ed91 ba00 	vldr	s22, [r1]
 8015062:	edd0 6a00 	vldr	s13, [r0]
 8015066:	f504 619d 	add.w	r1, r4, #1256	; 0x4e8
 801506a:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
 801506e:	edd1 aa00 	vldr	s21, [r1]
 8015072:	ed92 2a00 	vldr	s4, [r2]
 8015076:	ee96 7a04 	vfnms.f32	s14, s12, s8
 801507a:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 801507e:	f504 61c5 	add.w	r1, r4, #1576	; 0x628
 8015082:	eed1 3a04 	vfnms.f32	s7, s2, s8
 8015086:	f204 6234 	addw	r2, r4, #1588	; 0x634
 801508a:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
 801508e:	edd0 7a00 	vldr	s15, [r0]
 8015092:	edd2 1a00 	vldr	s3, [r2]
 8015096:	ed93 ca00 	vldr	s24, [r3]
 801509a:	eed5 6a04 	vfnms.f32	s13, s10, s8
 801509e:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 80150a2:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
 80150a6:	ed91 5a00 	vldr	s10, [r1]
 80150aa:	edd0 5a00 	vldr	s11, [r0]
 80150ae:	edd7 9a00 	vldr	s19, [r7]
 80150b2:	f204 6024 	addw	r0, r4, #1572	; 0x624
 80150b6:	eed5 1a04 	vfnms.f32	s3, s10, s8
 80150ba:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
 80150be:	f504 67f3 	add.w	r7, r4, #1944	; 0x798
 80150c2:	edd0 2a00 	vldr	s5, [r0]
 80150c6:	edd3 0a00 	vldr	s1, [r3]
 80150ca:	f204 70a4 	addw	r0, r4, #1956	; 0x7a4
 80150ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80150d2:	ee73 3aa5 	vadd.f32	s7, s7, s11
 80150d6:	edd7 7a00 	vldr	s15, [r7]
 80150da:	edd0 5a00 	vldr	s11, [r0]
 80150de:	f504 63cb 	add.w	r3, r4, #1624	; 0x658
 80150e2:	f504 6ac6 	add.w	sl, r4, #1584	; 0x630
 80150e6:	f204 693c 	addw	r9, r4, #1596	; 0x63c
 80150ea:	ed93 6a00 	vldr	s12, [r3]
 80150ee:	edda ba00 	vldr	s23, [sl]
 80150f2:	ed99 5a00 	vldr	s10, [r9]
 80150f6:	ee76 6a83 	vadd.f32	s13, s13, s6
 80150fa:	f204 4ccc 	addw	ip, r4, #1228	; 0x4cc
 80150fe:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
 8015102:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 8015106:	eed7 5a84 	vfnms.f32	s11, s15, s8
 801510a:	f504 68cc 	add.w	r8, r4, #1632	; 0x660
 801510e:	f204 6e54 	addw	lr, r4, #1620	; 0x654
 8015112:	eddc 4a00 	vldr	s9, [ip]
 8015116:	edd3 7a00 	vldr	s15, [r3]
 801511a:	ed98 1a00 	vldr	s2, [r8]
 801511e:	edde 8a00 	vldr	s17, [lr]
 8015122:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 8015126:	f504 61f9 	add.w	r1, r4, #1992	; 0x7c8
 801512a:	f204 72bc 	addw	r2, r4, #1980	; 0x7bc
 801512e:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 8015132:	f204 6b4c 	addw	fp, r4, #1612	; 0x64c
 8015136:	ee9b 5a84 	vfnms.f32	s10, s23, s8
 801513a:	f504 68f8 	add.w	r8, r4, #1984	; 0x7c0
 801513e:	f204 7ecc 	addw	lr, r4, #1996	; 0x7cc
 8015142:	ed9c aa00 	vldr	s20, [ip]
 8015146:	eeed 6a03 	vfma.f32	s13, s26, s6
 801514a:	f504 67f4 	add.w	r7, r4, #1952	; 0x7a0
 801514e:	f204 7cac 	addw	ip, r4, #1964	; 0x7ac
 8015152:	ed92 da00 	vldr	s26, [r2]
 8015156:	eeab 7a03 	vfma.f32	s14, s22, s6
 801515a:	f204 70c4 	addw	r0, r4, #1988	; 0x7c4
 801515e:	ed91 ba00 	vldr	s22, [r1]
 8015162:	eef0 ca61 	vmov.f32	s25, s3
 8015166:	eddb 1a00 	vldr	s3, [fp]
 801516a:	edd3 ba00 	vldr	s23, [r3]
 801516e:	f9b4 2976 	ldrsh.w	r2, [r4, #2422]	; 0x976
 8015172:	eedb 7a84 	vfnms.f32	s15, s23, s8
 8015176:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 801517a:	1c53      	adds	r3, r2, #1
 801517c:	eeea 3a83 	vfma.f32	s7, s21, s6
 8015180:	ee7c 1aa1 	vadd.f32	s3, s25, s3
 8015184:	edd8 aa00 	vldr	s21, [r8]
 8015188:	eee6 1a03 	vfma.f32	s3, s12, s6
 801518c:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8015190:	ed9e 6a00 	vldr	s12, [lr]
 8015194:	edd7 aa00 	vldr	s21, [r7]
 8015198:	eee6 7a03 	vfma.f32	s15, s12, s6
 801519c:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 80151a0:	ed9c 6a00 	vldr	s12, [ip]
 80151a4:	eedc 4a04 	vfnms.f32	s9, s24, s8
 80151a8:	ee9a 6a84 	vfnms.f32	s12, s21, s8
 80151ac:	ee75 5a8d 	vadd.f32	s11, s11, s26
 80151b0:	ee2a 4a00 	vmul.f32	s8, s20, s0
 80151b4:	ee22 2a00 	vmul.f32	s4, s4, s0
 80151b8:	ee62 2a80 	vmul.f32	s5, s5, s0
 80151bc:	eeeb 5a03 	vfma.f32	s11, s22, s6
 80151c0:	ed90 0a00 	vldr	s0, [r0]
 80151c4:	ee64 7a27 	vmul.f32	s15, s8, s15
 80151c8:	ee36 6a00 	vadd.f32	s12, s12, s0
 80151cc:	ee74 4aa9 	vadd.f32	s9, s9, s19
 80151d0:	ed91 0a00 	vldr	s0, [r1]
 80151d4:	ee35 5a28 	vadd.f32	s10, s10, s17
 80151d8:	ee66 6a82 	vmul.f32	s13, s13, s4
 80151dc:	ee22 7a87 	vmul.f32	s14, s5, s14
 80151e0:	ee64 5a25 	vmul.f32	s11, s8, s11
 80151e4:	eee0 4a83 	vfma.f32	s9, s1, s6
 80151e8:	f604 1068 	addw	r0, r4, #2408	; 0x968
 80151ec:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 80151f0:	eea1 5a03 	vfma.f32	s10, s2, s6
 80151f4:	eea0 6a03 	vfma.f32	s12, s0, s6
 80151f8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80151fc:	ee63 3a82 	vmul.f32	s7, s7, s4
 8015200:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015204:	ee62 1aa1 	vmul.f32	s3, s5, s3
 8015208:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801520c:	eee3 6aa3 	vfma.f32	s13, s7, s7
 8015210:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8015214:	eea1 7aa1 	vfma.f32	s14, s3, s3
 8015218:	ee24 6a06 	vmul.f32	s12, s8, s12
 801521c:	ee62 4a24 	vmul.f32	s9, s4, s9
 8015220:	ee22 5a85 	vmul.f32	s10, s5, s10
 8015224:	eee4 6aa4 	vfma.f32	s13, s9, s9
 8015228:	eea5 7a05 	vfma.f32	s14, s10, s10
 801522c:	eee6 7a06 	vfma.f32	s15, s12, s12
 8015230:	eeb1 6ae6 	vsqrt.f32	s12, s13
 8015234:	eef1 6ac7 	vsqrt.f32	s13, s14
 8015238:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801523c:	ee07 3a90 	vmov	s15, r3
 8015240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015244:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015248:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 801524c:	b21b      	sxth	r3, r3
 801524e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8015252:	ee07 2a90 	vmov	s15, r2
 8015256:	ed90 4a00 	vldr	s8, [r0]
 801525a:	edd1 4a00 	vldr	s9, [r1]
 801525e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8015262:	edd7 7a00 	vldr	s15, [r7]
 8015266:	eee5 6a84 	vfma.f32	s13, s11, s8
 801526a:	eea7 6aa5 	vfma.f32	s12, s15, s11
 801526e:	eea5 7aa4 	vfma.f32	s14, s11, s9
 8015272:	ee66 7a05 	vmul.f32	s15, s12, s10
 8015276:	ee66 6a85 	vmul.f32	s13, s13, s10
 801527a:	ee27 7a05 	vmul.f32	s14, s14, s10
 801527e:	edc7 7a00 	vstr	s15, [r7]
 8015282:	edc0 6a00 	vstr	s13, [r0]
 8015286:	ed81 7a00 	vstr	s14, [r1]
 801528a:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 801528e:	f47f abde 	bne.w	8014a4e <iNemoEngine_API_Update+0x56>
 8015292:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015296:	ee66 6a86 	vmul.f32	s13, s13, s12
 801529a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801529e:	ee67 7a86 	vmul.f32	s15, s15, s12
 80152a2:	2300      	movs	r3, #0
 80152a4:	2200      	movs	r2, #0
 80152a6:	edc4 6a07 	vstr	s13, [r4, #28]
 80152aa:	ed84 7a08 	vstr	s14, [r4, #32]
 80152ae:	edc4 7a06 	vstr	s15, [r4, #24]
 80152b2:	603b      	str	r3, [r7, #0]
 80152b4:	6003      	str	r3, [r0, #0]
 80152b6:	600b      	str	r3, [r1, #0]
 80152b8:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 80152bc:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 80152c0:	f7ff bbc5 	b.w	8014a4e <iNemoEngine_API_Update+0x56>
 80152c4:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80152f8 <iNemoEngine_API_Update+0x900>
 80152c8:	e4da      	b.n	8014c80 <iNemoEngine_API_Update+0x288>
 80152ca:	bf00      	nop
 80152cc:	f3af 8000 	nop.w
 80152d0:	20000000 	.word	0x20000000
 80152d4:	404ca5dc 	.word	0x404ca5dc
 80152d8:	40568000 	.word	0x40568000
 80152dc:	3dcccccd 	.word	0x3dcccccd
 80152e0:	3a83126f 	.word	0x3a83126f
 80152e4:	358637bd 	.word	0x358637bd
 80152e8:	3f333333 	.word	0x3f333333
 80152ec:	3727c5ac 	.word	0x3727c5ac
 80152f0:	3ac49ba6 	.word	0x3ac49ba6
 80152f4:	3e4ccccd 	.word	0x3e4ccccd
 80152f8:	00000000 	.word	0x00000000

080152fc <MEMS_getSensorData_I16>:
 80152fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015300:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 8015304:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8015308:	68c5      	ldr	r5, [r0, #12]
 801530a:	4596      	cmp	lr, r2
 801530c:	fa1f f882 	uxth.w	r8, r2
 8015310:	d94d      	bls.n	80153ae <MEMS_getSensorData_I16+0xb2>
 8015312:	f10e 33ff 	add.w	r3, lr, #4294967295
 8015316:	fb04 5313 	mls	r3, r4, r3, r5
 801531a:	ebae 0c02 	sub.w	ip, lr, r2
 801531e:	f8a1 8004 	strh.w	r8, [r1, #4]
 8015322:	600b      	str	r3, [r1, #0]
 8015324:	fa5f fc8c 	uxtb.w	ip, ip
 8015328:	4647      	mov	r7, r8
 801532a:	f1b8 0f00 	cmp.w	r8, #0
 801532e:	d017      	beq.n	8015360 <MEMS_getSensorData_I16+0x64>
 8015330:	688e      	ldr	r6, [r1, #8]
 8015332:	6905      	ldr	r5, [r0, #16]
 8015334:	2300      	movs	r3, #0
 8015336:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 801533a:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 801533e:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8015342:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8015346:	f8d4 9002 	ldr.w	r9, [r4, #2]
 801534a:	f8c1 9002 	str.w	r9, [r1, #2]
 801534e:	3301      	adds	r3, #1
 8015350:	88e4      	ldrh	r4, [r4, #6]
 8015352:	80cc      	strh	r4, [r1, #6]
 8015354:	b2d9      	uxtb	r1, r3
 8015356:	42b9      	cmp	r1, r7
 8015358:	460b      	mov	r3, r1
 801535a:	d3ec      	bcc.n	8015336 <MEMS_getSensorData_I16+0x3a>
 801535c:	45c6      	cmp	lr, r8
 801535e:	d934      	bls.n	80153ca <MEMS_getSensorData_I16+0xce>
 8015360:	ebae 0308 	sub.w	r3, lr, r8
 8015364:	b29b      	uxth	r3, r3
 8015366:	8103      	strh	r3, [r0, #8]
 8015368:	f1bc 0f00 	cmp.w	ip, #0
 801536c:	d01d      	beq.n	80153aa <MEMS_getSensorData_I16+0xae>
 801536e:	6903      	ldr	r3, [r0, #16]
 8015370:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015374:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8015378:	f103 000a 	add.w	r0, r3, #10
 801537c:	fa5f fc8c 	uxtb.w	ip, ip
 8015380:	3202      	adds	r2, #2
 8015382:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 8015386:	3302      	adds	r3, #2
 8015388:	2400      	movs	r4, #0
 801538a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801538e:	f803 1c02 	strb.w	r1, [r3, #-2]
 8015392:	6811      	ldr	r1, [r2, #0]
 8015394:	6019      	str	r1, [r3, #0]
 8015396:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801539a:	8099      	strh	r1, [r3, #4]
 801539c:	3308      	adds	r3, #8
 801539e:	4283      	cmp	r3, r0
 80153a0:	f802 4c02 	strb.w	r4, [r2, #-2]
 80153a4:	f102 0208 	add.w	r2, r2, #8
 80153a8:	d1ef      	bne.n	801538a <MEMS_getSensorData_I16+0x8e>
 80153aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153ae:	f10e 33ff 	add.w	r3, lr, #4294967295
 80153b2:	fb04 5313 	mls	r3, r4, r3, r5
 80153b6:	f8a1 e004 	strh.w	lr, [r1, #4]
 80153ba:	600b      	str	r3, [r1, #0]
 80153bc:	f1be 0f00 	cmp.w	lr, #0
 80153c0:	d005      	beq.n	80153ce <MEMS_getSensorData_I16+0xd2>
 80153c2:	4677      	mov	r7, lr
 80153c4:	f04f 0c00 	mov.w	ip, #0
 80153c8:	e7b2      	b.n	8015330 <MEMS_getSensorData_I16+0x34>
 80153ca:	2300      	movs	r3, #0
 80153cc:	e7cb      	b.n	8015366 <MEMS_getSensorData_I16+0x6a>
 80153ce:	f8a0 e008 	strh.w	lr, [r0, #8]
 80153d2:	e7ea      	b.n	80153aa <MEMS_getSensorData_I16+0xae>

080153d4 <MEMS_SolveLinearEq>:
 80153d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153d8:	ed2d 8b0c 	vpush	{d8-d13}
 80153dc:	4617      	mov	r7, r2
 80153de:	2400      	movs	r4, #0
 80153e0:	b0a9      	sub	sp, #164	; 0xa4
 80153e2:	2200      	movs	r2, #0
 80153e4:	601a      	str	r2, [r3, #0]
 80153e6:	460d      	mov	r5, r1
 80153e8:	2240      	movs	r2, #64	; 0x40
 80153ea:	4621      	mov	r1, r4
 80153ec:	4680      	mov	r8, r0
 80153ee:	603c      	str	r4, [r7, #0]
 80153f0:	607c      	str	r4, [r7, #4]
 80153f2:	60bc      	str	r4, [r7, #8]
 80153f4:	60fc      	str	r4, [r7, #12]
 80153f6:	a808      	add	r0, sp, #32
 80153f8:	461e      	mov	r6, r3
 80153fa:	eeb0 8a40 	vmov.f32	s16, s0
 80153fe:	e9cd 4400 	strd	r4, r4, [sp]
 8015402:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8015406:	f003 f899 	bl	801853c <memset>
 801540a:	4621      	mov	r1, r4
 801540c:	a818      	add	r0, sp, #96	; 0x60
 801540e:	2240      	movs	r2, #64	; 0x40
 8015410:	f003 f894 	bl	801853c <memset>
 8015414:	edd5 2a03 	vldr	s5, [r5, #12]
 8015418:	eddf 7ae4 	vldr	s15, [pc, #912]	; 80157ac <MEMS_SolveLinearEq+0x3d8>
 801541c:	eef4 2ae7 	vcmpe.f32	s5, s15
 8015420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015424:	d47e      	bmi.n	8015524 <MEMS_SolveLinearEq+0x150>
 8015426:	f898 1000 	ldrb.w	r1, [r8]
 801542a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801542e:	f998 3002 	ldrsb.w	r3, [r8, #2]
 8015432:	4291      	cmp	r1, r2
 8015434:	d07c      	beq.n	8015530 <MEMS_SolveLinearEq+0x15c>
 8015436:	3301      	adds	r3, #1
 8015438:	1a58      	subs	r0, r3, r1
 801543a:	fb90 f3f2 	sdiv	r3, r0, r2
 801543e:	fb02 0313 	mls	r3, r2, r3, r0
 8015442:	2b00      	cmp	r3, #0
 8015444:	bfb8      	it	lt
 8015446:	189b      	addlt	r3, r3, r2
 8015448:	b21b      	sxth	r3, r3
 801544a:	2900      	cmp	r1, #0
 801544c:	f000 81d6 	beq.w	80157fc <MEMS_SolveLinearEq+0x428>
 8015450:	3901      	subs	r1, #1
 8015452:	b2c9      	uxtb	r1, r1
 8015454:	3101      	adds	r1, #1
 8015456:	edd5 3a00 	vldr	s7, [r5]
 801545a:	ed95 4a01 	vldr	s8, [r5, #4]
 801545e:	edd5 4a02 	vldr	s9, [r5, #8]
 8015462:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8015466:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 80157b0 <MEMS_SolveLinearEq+0x3dc>
 801546a:	4419      	add	r1, r3
 801546c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8015470:	fb93 f4f2 	sdiv	r4, r3, r2
 8015474:	fb02 3414 	mls	r4, r2, r4, r3
 8015478:	b2e4      	uxtb	r4, r4
 801547a:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 801547e:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 8015482:	ee07 0a90 	vmov	s15, r0
 8015486:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801548a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801548e:	ee06 0a10 	vmov	s12, r0
 8015492:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015496:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 801549a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801549e:	ee77 6ac4 	vsub.f32	s13, s15, s8
 80154a2:	ee26 6a08 	vmul.f32	s12, s12, s16
 80154a6:	ee07 0a10 	vmov	s14, r0
 80154aa:	ee36 5a63 	vsub.f32	s10, s12, s7
 80154ae:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80154b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80154b6:	eee5 6a05 	vfma.f32	s13, s10, s10
 80154ba:	ee27 7a08 	vmul.f32	s14, s14, s16
 80154be:	ee33 6ac6 	vsub.f32	s12, s7, s12
 80154c2:	ee74 aac7 	vsub.f32	s21, s9, s14
 80154c6:	ee37 7a64 	vsub.f32	s14, s14, s9
 80154ca:	ee74 7a67 	vsub.f32	s15, s8, s15
 80154ce:	eee7 6a07 	vfma.f32	s13, s14, s14
 80154d2:	eef4 6ac2 	vcmpe.f32	s13, s4
 80154d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154da:	d531      	bpl.n	8015540 <MEMS_SolveLinearEq+0x16c>
 80154dc:	3301      	adds	r3, #1
 80154de:	4299      	cmp	r1, r3
 80154e0:	d1c6      	bne.n	8015470 <MEMS_SolveLinearEq+0x9c>
 80154e2:	eef0 7a65 	vmov.f32	s15, s11
 80154e6:	2101      	movs	r1, #1
 80154e8:	4608      	mov	r0, r1
 80154ea:	2200      	movs	r2, #0
 80154ec:	e006      	b.n	80154fc <MEMS_SolveLinearEq+0x128>
 80154ee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80154f2:	ac28      	add	r4, sp, #160	; 0xa0
 80154f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80154f8:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 80154fc:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8015500:	3001      	adds	r0, #1
 8015502:	ac28      	add	r4, sp, #160	; 0xa0
 8015504:	b2c0      	uxtb	r0, r0
 8015506:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801550a:	2804      	cmp	r0, #4
 801550c:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 8015510:	4613      	mov	r3, r2
 8015512:	d1ec      	bne.n	80154ee <MEMS_SolveLinearEq+0x11a>
 8015514:	1c48      	adds	r0, r1, #1
 8015516:	b2c0      	uxtb	r0, r0
 8015518:	2804      	cmp	r0, #4
 801551a:	d076      	beq.n	801560a <MEMS_SolveLinearEq+0x236>
 801551c:	460b      	mov	r3, r1
 801551e:	460a      	mov	r2, r1
 8015520:	4601      	mov	r1, r0
 8015522:	e7e4      	b.n	80154ee <MEMS_SolveLinearEq+0x11a>
 8015524:	2000      	movs	r0, #0
 8015526:	b029      	add	sp, #164	; 0xa4
 8015528:	ecbd 8b0c 	vpop	{d8-d13}
 801552c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015530:	1c5a      	adds	r2, r3, #1
 8015532:	fb92 f3f1 	sdiv	r3, r2, r1
 8015536:	fb01 2313 	mls	r3, r1, r3, r2
 801553a:	b21b      	sxth	r3, r3
 801553c:	460a      	mov	r2, r1
 801553e:	e784      	b.n	801544a <MEMS_SolveLinearEq+0x76>
 8015540:	eef1 cae6 	vsqrt.f32	s25, s13
 8015544:	3301      	adds	r3, #1
 8015546:	428b      	cmp	r3, r1
 8015548:	ed9d ca00 	vldr	s24, [sp]
 801554c:	eddd ba08 	vldr	s23, [sp, #32]
 8015550:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
 8015554:	ed9d aa01 	vldr	s20, [sp, #4]
 8015558:	eddd 9a02 	vldr	s19, [sp, #8]
 801555c:	ed9d 9a0d 	vldr	s18, [sp, #52]	; 0x34
 8015560:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 8015564:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
 8015568:	ed9d 0a03 	vldr	s0, [sp, #12]
 801556c:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 8015570:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 8015574:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
 8015578:	ed9d da17 	vldr	s26, [sp, #92]	; 0x5c
 801557c:	eec1 6aac 	vdiv.f32	s13, s3, s25
 8015580:	ee3d da21 	vadd.f32	s26, s26, s3
 8015584:	ee26 7a26 	vmul.f32	s14, s12, s13
 8015588:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801558c:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 8015590:	ee72 aaec 	vsub.f32	s21, s5, s25
 8015594:	eee7 5a27 	vfma.f32	s11, s14, s15
 8015598:	eea7 ba26 	vfma.f32	s22, s14, s13
 801559c:	eee7 8aa6 	vfma.f32	s17, s15, s13
 80155a0:	eeaa ca87 	vfma.f32	s24, s21, s14
 80155a4:	eee7 ba07 	vfma.f32	s23, s14, s14
 80155a8:	eeaa aaa7 	vfma.f32	s20, s21, s15
 80155ac:	eeea 9aa6 	vfma.f32	s19, s21, s13
 80155b0:	eea7 9aa7 	vfma.f32	s18, s15, s15
 80155b4:	eea6 3aa6 	vfma.f32	s6, s13, s13
 80155b8:	ee3c 6ae2 	vsub.f32	s12, s25, s5
 80155bc:	ee30 7ac7 	vsub.f32	s14, s1, s14
 80155c0:	ee30 6a06 	vadd.f32	s12, s0, s12
 80155c4:	ee71 7a67 	vsub.f32	s15, s2, s15
 80155c8:	ee75 6a66 	vsub.f32	s13, s10, s13
 80155cc:	ed8d da17 	vstr	s26, [sp, #92]	; 0x5c
 80155d0:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 80155d4:	ed8d ca00 	vstr	s24, [sp]
 80155d8:	edcd ba08 	vstr	s23, [sp, #32]
 80155dc:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
 80155e0:	ed8d aa01 	vstr	s20, [sp, #4]
 80155e4:	edcd 9a02 	vstr	s19, [sp, #8]
 80155e8:	ed8d 9a0d 	vstr	s18, [sp, #52]	; 0x34
 80155ec:	edcd 8a0e 	vstr	s17, [sp, #56]	; 0x38
 80155f0:	ed8d 6a03 	vstr	s12, [sp, #12]
 80155f4:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 80155f8:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 80155fc:	ed8d 3a12 	vstr	s6, [sp, #72]	; 0x48
 8015600:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 8015604:	f47f af34 	bne.w	8015470 <MEMS_SolveLinearEq+0x9c>
 8015608:	e76b      	b.n	80154e2 <MEMS_SolveLinearEq+0x10e>
 801560a:	2240      	movs	r2, #64	; 0x40
 801560c:	2100      	movs	r1, #0
 801560e:	a818      	add	r0, sp, #96	; 0x60
 8015610:	f002 ff94 	bl	801853c <memset>
 8015614:	ab08      	add	r3, sp, #32
 8015616:	ed9f 5a67 	vldr	s10, [pc, #412]	; 80157b4 <MEMS_SolveLinearEq+0x3e0>
 801561a:	4618      	mov	r0, r3
 801561c:	aa18      	add	r2, sp, #96	; 0x60
 801561e:	2100      	movs	r1, #0
 8015620:	b24c      	sxtb	r4, r1
 8015622:	2900      	cmp	r1, #0
 8015624:	f000 80b5 	beq.w	8015792 <MEMS_SolveLinearEq+0x3be>
 8015628:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 801562c:	eeb0 7ae7 	vabs.f32	s14, s15
 8015630:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8015634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015638:	f53f af74 	bmi.w	8015524 <MEMS_SolveLinearEq+0x150>
 801563c:	ed93 7a00 	vldr	s14, [r3]
 8015640:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015644:	2c01      	cmp	r4, #1
 8015646:	edc2 6a00 	vstr	s13, [r2]
 801564a:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 801564e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015652:	f000 80b5 	beq.w	80157c0 <MEMS_SolveLinearEq+0x3ec>
 8015656:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 801565a:	eeb0 7ac6 	vabs.f32	s14, s12
 801565e:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8015662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015666:	f53f af5d 	bmi.w	8015524 <MEMS_SolveLinearEq+0x150>
 801566a:	ed93 7a01 	vldr	s14, [r3, #4]
 801566e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015672:	2c02      	cmp	r4, #2
 8015674:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8015678:	edc2 7a01 	vstr	s15, [r2, #4]
 801567c:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8015680:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 8015684:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015688:	eea6 7a26 	vfma.f32	s14, s12, s13
 801568c:	f000 80a7 	beq.w	80157de <MEMS_SolveLinearEq+0x40a>
 8015690:	eddd 4a22 	vldr	s9, [sp, #136]	; 0x88
 8015694:	eeb0 6ae4 	vabs.f32	s12, s9
 8015698:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801569c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156a0:	f53f af40 	bmi.w	8015524 <MEMS_SolveLinearEq+0x150>
 80156a4:	edd3 5a02 	vldr	s11, [r3, #8]
 80156a8:	ed90 6a00 	vldr	s12, [r0]
 80156ac:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80156b0:	eec7 5a24 	vdiv.f32	s11, s14, s9
 80156b4:	edc2 5a02 	vstr	s11, [r2, #8]
 80156b8:	ed9d 4a25 	vldr	s8, [sp, #148]	; 0x94
 80156bc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80156c0:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80156c4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80156c8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80156cc:	eee5 7a87 	vfma.f32	s15, s11, s14
 80156d0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80156d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156d8:	f77f af24 	ble.w	8015524 <MEMS_SolveLinearEq+0x150>
 80156dc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80156e0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80156e4:	ed82 7a03 	vstr	s14, [r2, #12]
 80156e8:	3101      	adds	r1, #1
 80156ea:	2904      	cmp	r1, #4
 80156ec:	f103 0310 	add.w	r3, r3, #16
 80156f0:	f102 0210 	add.w	r2, r2, #16
 80156f4:	f100 0014 	add.w	r0, r0, #20
 80156f8:	d192      	bne.n	8015620 <MEMS_SolveLinearEq+0x24c>
 80156fa:	466a      	mov	r2, sp
 80156fc:	4639      	mov	r1, r7
 80156fe:	a818      	add	r0, sp, #96	; 0x60
 8015700:	f7f9 f9f2 	bl	800eae8 <llEvaluate.constprop.0>
 8015704:	4b2c      	ldr	r3, [pc, #176]	; (80157b8 <MEMS_SolveLinearEq+0x3e4>)
 8015706:	6033      	str	r3, [r6, #0]
 8015708:	f10d 0910 	add.w	r9, sp, #16
 801570c:	46e8      	mov	r8, sp
 801570e:	f10d 0b0c 	add.w	fp, sp, #12
 8015712:	2400      	movs	r4, #0
 8015714:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8015718:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801571c:	e9cd 4400 	strd	r4, r4, [sp]
 8015720:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8015724:	466a      	mov	r2, sp
 8015726:	f848 ab04 	str.w	sl, [r8], #4
 801572a:	a904      	add	r1, sp, #16
 801572c:	a818      	add	r0, sp, #96	; 0x60
 801572e:	f7f9 f9db 	bl	800eae8 <llEvaluate.constprop.0>
 8015732:	ecf9 7a01 	vldmia	r9!, {s15}
 8015736:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801573a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801573e:	dd23      	ble.n	8015788 <MEMS_SolveLinearEq+0x3b4>
 8015740:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8015744:	edd6 7a00 	vldr	s15, [r6]
 8015748:	eef4 7ac7 	vcmpe.f32	s15, s14
 801574c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015750:	bfb8      	it	lt
 8015752:	eef0 7a47 	vmovlt.f32	s15, s14
 8015756:	45c3      	cmp	fp, r8
 8015758:	edc6 7a00 	vstr	s15, [r6]
 801575c:	d1de      	bne.n	801571c <MEMS_SolveLinearEq+0x348>
 801575e:	edd5 7a03 	vldr	s15, [r5, #12]
 8015762:	ed97 7a03 	vldr	s14, [r7, #12]
 8015766:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 801576a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801576e:	2001      	movs	r0, #1
 8015770:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015778:	bf48      	it	mi
 801577a:	edc7 7a03 	vstrmi	s15, [r7, #12]
 801577e:	b029      	add	sp, #164	; 0xa4
 8015780:	ecbd 8b0c 	vpop	{d8-d13}
 8015784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015788:	45c3      	cmp	fp, r8
 801578a:	ed86 0a00 	vstr	s0, [r6]
 801578e:	d1c5      	bne.n	801571c <MEMS_SolveLinearEq+0x348>
 8015790:	e7e5      	b.n	801575e <MEMS_SolveLinearEq+0x38a>
 8015792:	edd0 7a00 	vldr	s15, [r0]
 8015796:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801579a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801579e:	f77f aec1 	ble.w	8015524 <MEMS_SolveLinearEq+0x150>
 80157a2:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80157a6:	ed82 7a00 	vstr	s14, [r2]
 80157aa:	e79d      	b.n	80156e8 <MEMS_SolveLinearEq+0x314>
 80157ac:	3dcccccd 	.word	0x3dcccccd
 80157b0:	2b8cbccb 	.word	0x2b8cbccb
 80157b4:	358637bd 	.word	0x358637bd
 80157b8:	3dcccccd 	.word	0x3dcccccd
 80157bc:	00000000 	.word	0x00000000
 80157c0:	ed90 7a00 	vldr	s14, [r0]
 80157c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80157c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157cc:	f77f aeaa 	ble.w	8015524 <MEMS_SolveLinearEq+0x150>
 80157d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80157d4:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80157d8:	ed82 7a01 	vstr	s14, [r2, #4]
 80157dc:	e784      	b.n	80156e8 <MEMS_SolveLinearEq+0x314>
 80157de:	edd0 7a00 	vldr	s15, [r0]
 80157e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80157e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157ea:	f77f ae9b 	ble.w	8015524 <MEMS_SolveLinearEq+0x150>
 80157ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80157f2:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80157f6:	ed82 7a02 	vstr	s14, [r2, #8]
 80157fa:	e775      	b.n	80156e8 <MEMS_SolveLinearEq+0x314>
 80157fc:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 80157bc <MEMS_SolveLinearEq+0x3e8>
 8015800:	e671      	b.n	80154e6 <MEMS_SolveLinearEq+0x112>
 8015802:	bf00      	nop

08015804 <MEMS_EIG3>:
 8015804:	edd0 6a02 	vldr	s13, [r0, #8]
 8015808:	ed90 7a01 	vldr	s14, [r0, #4]
 801580c:	edd0 4a04 	vldr	s9, [r0, #16]
 8015810:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8015960 <MEMS_EIG3+0x15c>
 8015814:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8015818:	b510      	push	{r4, lr}
 801581a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801581e:	460c      	mov	r4, r1
 8015820:	ed2d 8b04 	vpush	{d8-d9}
 8015824:	eee4 7aa4 	vfma.f32	s15, s9, s9
 8015828:	b08a      	sub	sp, #40	; 0x28
 801582a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801582e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015832:	d509      	bpl.n	8015848 <MEMS_EIG3+0x44>
 8015834:	6803      	ldr	r3, [r0, #0]
 8015836:	600b      	str	r3, [r1, #0]
 8015838:	68c3      	ldr	r3, [r0, #12]
 801583a:	604b      	str	r3, [r1, #4]
 801583c:	6943      	ldr	r3, [r0, #20]
 801583e:	608b      	str	r3, [r1, #8]
 8015840:	b00a      	add	sp, #40	; 0x28
 8015842:	ecbd 8b04 	vpop	{d8-d9}
 8015846:	bd10      	pop	{r4, pc}
 8015848:	ed90 4a00 	vldr	s8, [r0]
 801584c:	edd0 5a03 	vldr	s11, [r0, #12]
 8015850:	edd0 2a05 	vldr	s5, [r0, #20]
 8015854:	eddf 9a43 	vldr	s19, [pc, #268]	; 8015964 <MEMS_EIG3+0x160>
 8015858:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8015968 <MEMS_EIG3+0x164>
 801585c:	ee34 8a25 	vadd.f32	s16, s8, s11
 8015860:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 8015864:	ee38 8a22 	vadd.f32	s16, s16, s5
 8015868:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801586c:	ee28 8a29 	vmul.f32	s16, s16, s19
 8015870:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 8015874:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8015878:	ee34 4a48 	vsub.f32	s8, s8, s16
 801587c:	ee25 5aa5 	vmul.f32	s10, s11, s11
 8015880:	ee72 2ac8 	vsub.f32	s5, s5, s16
 8015884:	eea4 5a04 	vfma.f32	s10, s8, s8
 8015888:	eea7 5aa3 	vfma.f32	s10, s15, s7
 801588c:	eef0 7a45 	vmov.f32	s15, s10
 8015890:	eee2 7aa2 	vfma.f32	s15, s5, s5
 8015894:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015898:	eef1 8ae7 	vsqrt.f32	s17, s15
 801589c:	ee80 6a28 	vdiv.f32	s12, s0, s17
 80158a0:	ee82 5aa8 	vdiv.f32	s10, s5, s17
 80158a4:	eec4 2a28 	vdiv.f32	s5, s8, s17
 80158a8:	ee66 6a26 	vmul.f32	s13, s12, s13
 80158ac:	ee65 5a86 	vmul.f32	s11, s11, s12
 80158b0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80158b4:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 80158b8:	ee26 6a24 	vmul.f32	s12, s12, s9
 80158bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80158c0:	ee66 4a46 	vnmul.f32	s9, s12, s12
 80158c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80158c8:	eee5 4a85 	vfma.f32	s9, s11, s10
 80158cc:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80158d0:	eee4 7aa2 	vfma.f32	s15, s9, s5
 80158d4:	eea6 5a26 	vfma.f32	s10, s12, s13
 80158d8:	eee5 7a07 	vfma.f32	s15, s10, s14
 80158dc:	eef4 7ac3 	vcmpe.f32	s15, s6
 80158e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158e4:	d909      	bls.n	80158fa <MEMS_EIG3+0xf6>
 80158e6:	eef4 7ae3 	vcmpe.f32	s15, s7
 80158ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158ee:	db22      	blt.n	8015936 <MEMS_EIG3+0x132>
 80158f0:	eeb0 9a40 	vmov.f32	s18, s0
 80158f4:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 801596c <MEMS_EIG3+0x168>
 80158f8:	e003      	b.n	8015902 <MEMS_EIG3+0xfe>
 80158fa:	ed9f 9a1d 	vldr	s18, [pc, #116]	; 8015970 <MEMS_EIG3+0x16c>
 80158fe:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015902:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8015906:	eef0 7a48 	vmov.f32	s15, s16
 801590a:	eeb0 7a48 	vmov.f32	s14, s16
 801590e:	eee8 7a89 	vfma.f32	s15, s17, s18
 8015912:	eea8 7a80 	vfma.f32	s14, s17, s0
 8015916:	edc4 7a00 	vstr	s15, [r4]
 801591a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801591e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8015922:	eed8 7a26 	vfnms.f32	s15, s16, s13
 8015926:	ed84 7a02 	vstr	s14, [r4, #8]
 801592a:	edc4 7a01 	vstr	s15, [r4, #4]
 801592e:	b00a      	add	sp, #40	; 0x28
 8015930:	ecbd 8b04 	vpop	{d8-d9}
 8015934:	bd10      	pop	{r4, pc}
 8015936:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801593a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801593e:	f003 fc45 	bl	80191cc <acosf>
 8015942:	ee60 9a29 	vmul.f32	s19, s0, s19
 8015946:	eeb0 0a69 	vmov.f32	s0, s19
 801594a:	f003 fb39 	bl	8018fc0 <cosf>
 801594e:	eeb0 9a40 	vmov.f32	s18, s0
 8015952:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8015974 <MEMS_EIG3+0x170>
 8015956:	ee39 0a80 	vadd.f32	s0, s19, s0
 801595a:	f003 fb31 	bl	8018fc0 <cosf>
 801595e:	e7d0      	b.n	8015902 <MEMS_EIG3+0xfe>
 8015960:	358637bd 	.word	0x358637bd
 8015964:	3eaaaaab 	.word	0x3eaaaaab
 8015968:	3e2aaaab 	.word	0x3e2aaaab
 801596c:	bf000001 	.word	0xbf000001
 8015970:	3effffff 	.word	0x3effffff
 8015974:	40060a92 	.word	0x40060a92

08015978 <MEMS_runMagCal>:
 8015978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801597c:	ed2d 8b0a 	vpush	{d8-d12}
 8015980:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8015984:	2282      	movs	r2, #130	; 0x82
 8015986:	ab36      	add	r3, sp, #216	; 0xd8
 8015988:	460c      	mov	r4, r1
 801598a:	9105      	str	r1, [sp, #20]
 801598c:	4683      	mov	fp, r0
 801598e:	4608      	mov	r0, r1
 8015990:	a917      	add	r1, sp, #92	; 0x5c
 8015992:	9319      	str	r3, [sp, #100]	; 0x64
 8015994:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8015998:	f7ff fcb0 	bl	80152fc <MEMS_getSensorData_I16>
 801599c:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 80159a0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80159a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80159a6:	9209      	str	r2, [sp, #36]	; 0x24
 80159a8:	f108 31ff 	add.w	r1, r8, #4294967295
 80159ac:	9106      	str	r1, [sp, #24]
 80159ae:	fb01 2103 	mla	r1, r1, r3, r2
 80159b2:	9108      	str	r1, [sp, #32]
 80159b4:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
 80159b8:	f1b8 0f00 	cmp.w	r8, #0
 80159bc:	f000 8417 	beq.w	80161ee <MEMS_runMagCal+0x876>
 80159c0:	f8db 3008 	ldr.w	r3, [fp, #8]
 80159c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80159c8:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 80159cc:	fb02 f203 	mul.w	r2, r2, r3
 80159d0:	31a0      	adds	r1, #160	; 0xa0
 80159d2:	4291      	cmp	r1, r2
 80159d4:	f080 8411 	bcs.w	80161fa <MEMS_runMagCal+0x882>
 80159d8:	3b00      	subs	r3, #0
 80159da:	bf18      	it	ne
 80159dc:	2301      	movne	r3, #1
 80159de:	e9cb 3301 	strd	r3, r3, [fp, #4]
 80159e2:	2200      	movs	r2, #0
 80159e4:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 80159e8:	f8cb 200c 	str.w	r2, [fp, #12]
 80159ec:	2300      	movs	r3, #0
 80159ee:	e9cb 3325 	strd	r3, r3, [fp, #148]	; 0x94
 80159f2:	e9cb 3327 	strd	r3, r3, [fp, #156]	; 0x9c
 80159f6:	e9cb 3329 	strd	r3, r3, [fp, #164]	; 0xa4
 80159fa:	22ff      	movs	r2, #255	; 0xff
 80159fc:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8015a00:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8015a04:	4cd5      	ldr	r4, [pc, #852]	; (8015d5c <MEMS_runMagCal+0x3e4>)
 8015a06:	eddf 7ad8 	vldr	s15, [pc, #864]	; 8015d68 <MEMS_runMagCal+0x3f0>
 8015a0a:	9b05      	ldr	r3, [sp, #20]
 8015a0c:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8015a10:	edd3 5a01 	vldr	s11, [r3, #4]
 8015a14:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8015a18:	4652      	mov	r2, sl
 8015a1a:	2a03      	cmp	r2, #3
 8015a1c:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8015a20:	bf28      	it	cs
 8015a22:	2203      	movcs	r2, #3
 8015a24:	2100      	movs	r1, #0
 8015a26:	9207      	str	r2, [sp, #28]
 8015a28:	eeb0 0a67 	vmov.f32	s0, s15
 8015a2c:	464b      	mov	r3, r9
 8015a2e:	9402      	str	r4, [sp, #8]
 8015a30:	4627      	mov	r7, r4
 8015a32:	9503      	str	r5, [sp, #12]
 8015a34:	462e      	mov	r6, r5
 8015a36:	460a      	mov	r2, r1
 8015a38:	9404      	str	r4, [sp, #16]
 8015a3a:	7818      	ldrb	r0, [r3, #0]
 8015a3c:	3201      	adds	r2, #1
 8015a3e:	b292      	uxth	r2, r2
 8015a40:	2800      	cmp	r0, #0
 8015a42:	d04b      	beq.n	8015adc <MEMS_runMagCal+0x164>
 8015a44:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8015a48:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8015a4c:	eddb 3a18 	vldr	s7, [fp, #96]	; 0x60
 8015a50:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8015a54:	ed9b 4a17 	vldr	s8, [fp, #92]	; 0x5c
 8015a58:	ed9b 5a1a 	vldr	s10, [fp, #104]	; 0x68
 8015a5c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8015a60:	9c02      	ldr	r4, [sp, #8]
 8015a62:	ed9b 6a19 	vldr	s12, [fp, #100]	; 0x64
 8015a66:	eddb 6a22 	vldr	s13, [fp, #136]	; 0x88
 8015a6a:	ee07 ea90 	vmov	s15, lr
 8015a6e:	ee07 ca10 	vmov	s14, ip
 8015a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015a7a:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8015a7e:	ee37 7a44 	vsub.f32	s14, s14, s8
 8015a82:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015a86:	ee27 7a05 	vmul.f32	s14, s14, s10
 8015a8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015a8e:	4574      	cmp	r4, lr
 8015a90:	eee7 7a07 	vfma.f32	s15, s14, s14
 8015a94:	bfb8      	it	lt
 8015a96:	4674      	movlt	r4, lr
 8015a98:	9402      	str	r4, [sp, #8]
 8015a9a:	ee07 0a10 	vmov	s14, r0
 8015a9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015aa2:	9c03      	ldr	r4, [sp, #12]
 8015aa4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015aa8:	ee77 7a46 	vsub.f32	s15, s14, s12
 8015aac:	4574      	cmp	r4, lr
 8015aae:	bfa8      	it	ge
 8015ab0:	4674      	movge	r4, lr
 8015ab2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015ab6:	4567      	cmp	r7, ip
 8015ab8:	9403      	str	r4, [sp, #12]
 8015aba:	9c04      	ldr	r4, [sp, #16]
 8015abc:	bfb8      	it	lt
 8015abe:	4667      	movlt	r7, ip
 8015ac0:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8015ac4:	4566      	cmp	r6, ip
 8015ac6:	bfa8      	it	ge
 8015ac8:	4666      	movge	r6, ip
 8015aca:	4284      	cmp	r4, r0
 8015acc:	bfb8      	it	lt
 8015ace:	4604      	movlt	r4, r0
 8015ad0:	3101      	adds	r1, #1
 8015ad2:	4285      	cmp	r5, r0
 8015ad4:	b249      	sxtb	r1, r1
 8015ad6:	9404      	str	r4, [sp, #16]
 8015ad8:	bfa8      	it	ge
 8015ada:	4605      	movge	r5, r0
 8015adc:	9807      	ldr	r0, [sp, #28]
 8015ade:	4282      	cmp	r2, r0
 8015ae0:	f103 0308 	add.w	r3, r3, #8
 8015ae4:	d9a9      	bls.n	8015a3a <MEMS_runMagCal+0xc2>
 8015ae6:	4590      	cmp	r8, r2
 8015ae8:	9c04      	ldr	r4, [sp, #16]
 8015aea:	f240 8767 	bls.w	80169bc <MEMS_runMagCal+0x1044>
 8015aee:	ebaa 0a02 	sub.w	sl, sl, r2
 8015af2:	fa12 fa8a 	uxtah	sl, r2, sl
 8015af6:	f109 0308 	add.w	r3, r9, #8
 8015afa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015afe:	9307      	str	r3, [sp, #28]
 8015b00:	2300      	movs	r3, #0
 8015b02:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 8015b06:	9304      	str	r3, [sp, #16]
 8015b08:	7813      	ldrb	r3, [r2, #0]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	f000 8096 	beq.w	8015c3c <MEMS_runMagCal+0x2c4>
 8015b10:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8015b14:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8015b18:	f932 ac16 	ldrsh.w	sl, [r2, #-22]
 8015b1c:	f932 8c1e 	ldrsh.w	r8, [r2, #-30]
 8015b20:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 8015b24:	eddb 6a18 	vldr	s13, [fp, #96]	; 0x60
 8015b28:	f932 9c1c 	ldrsh.w	r9, [r2, #-28]
 8015b2c:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 8015b30:	eddb 3a17 	vldr	s7, [fp, #92]	; 0x5c
 8015b34:	ed9b 6a1a 	vldr	s12, [fp, #104]	; 0x68
 8015b38:	ed9b 3a1e 	vldr	s6, [fp, #120]	; 0x78
 8015b3c:	ed9b 4a19 	vldr	s8, [fp, #100]	; 0x64
 8015b40:	eddb 4a22 	vldr	s9, [fp, #136]	; 0x88
 8015b44:	ebae 0808 	sub.w	r8, lr, r8
 8015b48:	eba0 000a 	sub.w	r0, r0, sl
 8015b4c:	ee07 ca10 	vmov	s14, ip
 8015b50:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8015b54:	ee07 0a90 	vmov	s15, r0
 8015b58:	f932 ac14 	ldrsh.w	sl, [r2, #-20]
 8015b5c:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8015b60:	f932 8c1a 	ldrsh.w	r8, [r2, #-26]
 8015b64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015b68:	eba3 030a 	sub.w	r3, r3, sl
 8015b6c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015b74:	ee06 ea90 	vmov	s13, lr
 8015b78:	ebac 0909 	sub.w	r9, ip, r9
 8015b7c:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8015b80:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 8015b84:	eef0 7ae7 	vabs.f32	s15, s15
 8015b88:	ee06 9a90 	vmov	s13, r9
 8015b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015b90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b98:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8015b9c:	f932 9c12 	ldrsh.w	r9, [r2, #-18]
 8015ba0:	eef0 6ae6 	vabs.f32	s13, s13
 8015ba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015ba8:	eba0 0808 	sub.w	r8, r0, r8
 8015bac:	ee06 0a90 	vmov	s13, r0
 8015bb0:	eba3 0309 	sub.w	r3, r3, r9
 8015bb4:	ee35 5a63 	vsub.f32	s10, s10, s7
 8015bb8:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 8015bbc:	ee25 5a06 	vmul.f32	s10, s10, s12
 8015bc0:	9b02      	ldr	r3, [sp, #8]
 8015bc2:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8015bc6:	4577      	cmp	r7, lr
 8015bc8:	ee27 7a03 	vmul.f32	s14, s14, s6
 8015bcc:	ee06 8a90 	vmov	s13, r8
 8015bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015bd4:	bfb8      	it	lt
 8015bd6:	4677      	movlt	r7, lr
 8015bd8:	4576      	cmp	r6, lr
 8015bda:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015bde:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015be2:	bfa8      	it	ge
 8015be4:	4676      	movge	r6, lr
 8015be6:	4563      	cmp	r3, ip
 8015be8:	bfb8      	it	lt
 8015bea:	4663      	movlt	r3, ip
 8015bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015bf0:	eea5 7a05 	vfma.f32	s14, s10, s10
 8015bf4:	9302      	str	r3, [sp, #8]
 8015bf6:	9b03      	ldr	r3, [sp, #12]
 8015bf8:	eef0 6ae6 	vabs.f32	s13, s13
 8015bfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015c00:	4563      	cmp	r3, ip
 8015c02:	ee36 6a44 	vsub.f32	s12, s12, s8
 8015c06:	bfa8      	it	ge
 8015c08:	4663      	movge	r3, ip
 8015c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015c0e:	4284      	cmp	r4, r0
 8015c10:	ee37 0a00 	vadd.f32	s0, s14, s0
 8015c14:	bfb8      	it	lt
 8015c16:	4604      	movlt	r4, r0
 8015c18:	ee26 7a24 	vmul.f32	s14, s12, s9
 8015c1c:	4285      	cmp	r5, r0
 8015c1e:	bfa8      	it	ge
 8015c20:	4605      	movge	r5, r0
 8015c22:	9303      	str	r3, [sp, #12]
 8015c24:	ee17 0a90 	vmov	r0, s15
 8015c28:	9b04      	ldr	r3, [sp, #16]
 8015c2a:	eea7 0a07 	vfma.f32	s0, s14, s14
 8015c2e:	4283      	cmp	r3, r0
 8015c30:	f101 0101 	add.w	r1, r1, #1
 8015c34:	bf38      	it	cc
 8015c36:	4603      	movcc	r3, r0
 8015c38:	b249      	sxtb	r1, r1
 8015c3a:	9304      	str	r3, [sp, #16]
 8015c3c:	9b07      	ldr	r3, [sp, #28]
 8015c3e:	3208      	adds	r2, #8
 8015c40:	4293      	cmp	r3, r2
 8015c42:	f47f af61 	bne.w	8015b08 <MEMS_runMagCal+0x190>
 8015c46:	2900      	cmp	r1, #0
 8015c48:	f000 86b6 	beq.w	80169b8 <MEMS_runMagCal+0x1040>
 8015c4c:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8015c50:	f280 82df 	bge.w	8016212 <MEMS_runMagCal+0x89a>
 8015c54:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 8015c58:	f2c0 82db 	blt.w	8016212 <MEMS_runMagCal+0x89a>
 8015c5c:	9b02      	ldr	r3, [sp, #8]
 8015c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015c62:	f280 82d6 	bge.w	8016212 <MEMS_runMagCal+0x89a>
 8015c66:	9a03      	ldr	r2, [sp, #12]
 8015c68:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 8015c6c:	f2c0 82d1 	blt.w	8016212 <MEMS_runMagCal+0x89a>
 8015c70:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8015c74:	f280 82cd 	bge.w	8016212 <MEMS_runMagCal+0x89a>
 8015c78:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 8015c7c:	f2c0 82c9 	blt.w	8016212 <MEMS_runMagCal+0x89a>
 8015c80:	ee07 1a90 	vmov	s15, r1
 8015c84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015c88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015c8c:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8015c90:	1bbe      	subs	r6, r7, r6
 8015c92:	1a9f      	subs	r7, r3, r2
 8015c94:	42be      	cmp	r6, r7
 8015c96:	4633      	mov	r3, r6
 8015c98:	eba4 0405 	sub.w	r4, r4, r5
 8015c9c:	bfb8      	it	lt
 8015c9e:	463b      	movlt	r3, r7
 8015ca0:	42a3      	cmp	r3, r4
 8015ca2:	bfb8      	it	lt
 8015ca4:	4623      	movlt	r3, r4
 8015ca6:	eec7 6a25 	vdiv.f32	s13, s14, s11
 8015caa:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8015cae:	ee07 3a10 	vmov	s14, r3
 8015cb2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8015d60 <MEMS_runMagCal+0x3e8>
 8015cb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015cbe:	ee25 0a80 	vmul.f32	s0, s11, s0
 8015cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cca:	f100 82a2 	bmi.w	8016212 <MEMS_runMagCal+0x89a>
 8015cce:	eddd 7a04 	vldr	s15, [sp, #16]
 8015cd2:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8015d64 <MEMS_runMagCal+0x3ec>
 8015cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015cda:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8015cde:	eef4 5ac6 	vcmpe.f32	s11, s12
 8015ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ce6:	f300 8294 	bgt.w	8016212 <MEMS_runMagCal+0x89a>
 8015cea:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8015cee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015cf2:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cfa:	f301 81f8 	bgt.w	80170ee <MEMS_runMagCal+0x1776>
 8015cfe:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8015d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015d06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d0e:	f340 8552 	ble.w	80167b6 <MEMS_runMagCal+0xe3e>
 8015d12:	ee07 6a90 	vmov	s15, r6
 8015d16:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8015d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d1e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d26:	f340 8546 	ble.w	80167b6 <MEMS_runMagCal+0xe3e>
 8015d2a:	ee07 7a90 	vmov	s15, r7
 8015d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d32:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d3a:	f140 853c 	bpl.w	80167b6 <MEMS_runMagCal+0xe3e>
 8015d3e:	ee07 4a90 	vmov	s15, r4
 8015d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d46:	2300      	movs	r3, #0
 8015d48:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d50:	9303      	str	r3, [sp, #12]
 8015d52:	bf48      	it	mi
 8015d54:	2301      	movmi	r3, #1
 8015d56:	9307      	str	r3, [sp, #28]
 8015d58:	f000 bd30 	b.w	80167bc <MEMS_runMagCal+0xe44>
 8015d5c:	ffff8000 	.word	0xffff8000
 8015d60:	43020000 	.word	0x43020000
 8015d64:	447a0000 	.word	0x447a0000
 8015d68:	00000000 	.word	0x00000000
 8015d6c:	41f00001 	.word	0x41f00001
 8015d70:	400ccccd 	.word	0x400ccccd
 8015d74:	3dcccccd 	.word	0x3dcccccd
 8015d78:	423c0000 	.word	0x423c0000
 8015d7c:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8015d68 <MEMS_runMagCal+0x3f0>
 8015d80:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 8015d6c <MEMS_runMagCal+0x3f4>
 8015d84:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8015d88:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d90:	dc10      	bgt.n	8015db4 <MEMS_runMagCal+0x43c>
 8015d92:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8015d70 <MEMS_runMagCal+0x3f8>
 8015d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d9e:	dc09      	bgt.n	8015db4 <MEMS_runMagCal+0x43c>
 8015da0:	ed94 9a03 	vldr	s18, [r4, #12]
 8015da4:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 8015d74 <MEMS_runMagCal+0x3fc>
 8015da8:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8015dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015db0:	f201 8527 	bhi.w	8017802 <MEMS_runMagCal+0x1e8a>
 8015db4:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 8015d78 <MEMS_runMagCal+0x400>
 8015db8:	edd4 6a03 	vldr	s13, [r4, #12]
 8015dbc:	ed94 5a00 	vldr	s10, [r4]
 8015dc0:	edd4 5a01 	vldr	s11, [r4, #4]
 8015dc4:	ed94 6a02 	vldr	s12, [r4, #8]
 8015dc8:	edc4 7a06 	vstr	s15, [r4, #24]
 8015dcc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015dd0:	ad2e      	add	r5, sp, #184	; 0xb8
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	e9c5 3300 	strd	r3, r3, [r5]
 8015dd8:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8015ddc:	60ab      	str	r3, [r5, #8]
 8015dde:	61ab      	str	r3, [r5, #24]
 8015de0:	4be7      	ldr	r3, [pc, #924]	; (8016180 <MEMS_runMagCal+0x808>)
 8015de2:	9311      	str	r3, [sp, #68]	; 0x44
 8015de4:	ee85 0a08 	vdiv.f32	s0, s10, s16
 8015de8:	eec5 9a88 	vdiv.f32	s19, s11, s16
 8015dec:	ee86 aa08 	vdiv.f32	s20, s12, s16
 8015df0:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8015df4:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8015df8:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8015dfc:	eef0 6a67 	vmov.f32	s13, s15
 8015e00:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8015e04:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8015e08:	ee39 9a46 	vsub.f32	s18, s18, s12
 8015e0c:	eddf 6add 	vldr	s13, [pc, #884]	; 8016184 <MEMS_runMagCal+0x80c>
 8015e10:	ed9f 6add 	vldr	s12, [pc, #884]	; 8016188 <MEMS_runMagCal+0x810>
 8015e14:	ee77 6a66 	vsub.f32	s13, s14, s13
 8015e18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015e1c:	eef0 6ae6 	vabs.f32	s13, s13
 8015e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e24:	eef4 6ac6 	vcmpe.f32	s13, s12
 8015e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e2c:	eef0 7ae7 	vabs.f32	s15, s15
 8015e30:	f101 84dd 	bmi.w	80177ee <MEMS_runMagCal+0x1e76>
 8015e34:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 801618c <MEMS_runMagCal+0x814>
 8015e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e40:	f281 8438 	bge.w	80176b4 <MEMS_runMagCal+0x1d3c>
 8015e44:	eddf 7ad2 	vldr	s15, [pc, #840]	; 8016190 <MEMS_runMagCal+0x818>
 8015e48:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8015e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e50:	f101 8430 	bmi.w	80176b4 <MEMS_runMagCal+0x1d3c>
 8015e54:	f003 f8f4 	bl	8019040 <roundf>
 8015e58:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015e5c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8015e60:	ee17 3a90 	vmov	r3, s15
 8015e64:	eeb0 0a69 	vmov.f32	s0, s19
 8015e68:	f8a9 3000 	strh.w	r3, [r9]
 8015e6c:	f003 f8e8 	bl	8019040 <roundf>
 8015e70:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015e74:	eeb0 0a4a 	vmov.f32	s0, s20
 8015e78:	ee17 3a90 	vmov	r3, s15
 8015e7c:	f8a9 3002 	strh.w	r3, [r9, #2]
 8015e80:	f003 f8de 	bl	8019040 <roundf>
 8015e84:	eddd 7a08 	vldr	s15, [sp, #32]
 8015e88:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 8015e8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015e90:	ee16 3a90 	vmov	r3, s13
 8015e94:	eddf 7abf 	vldr	s15, [pc, #764]	; 8016194 <MEMS_runMagCal+0x81c>
 8015e98:	f8a9 3004 	strh.w	r3, [r9, #4]
 8015e9c:	ee27 0a27 	vmul.f32	s0, s14, s15
 8015ea0:	f003 f8ce 	bl	8019040 <roundf>
 8015ea4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8015ea8:	ae0f      	add	r6, sp, #60	; 0x3c
 8015eaa:	ed8b 0a01 	vstr	s0, [fp, #4]
 8015eae:	ab10      	add	r3, sp, #64	; 0x40
 8015eb0:	ee1c 0a10 	vmov	r0, s24
 8015eb4:	eeb0 0a48 	vmov.f32	s0, s16
 8015eb8:	4649      	mov	r1, r9
 8015eba:	9600      	str	r6, [sp, #0]
 8015ebc:	aa2d      	add	r2, sp, #180	; 0xb4
 8015ebe:	f7f8 ff33 	bl	800ed28 <getMagStats.constprop.0>
 8015ec2:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8015ec6:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8016198 <MEMS_runMagCal+0x820>
 8015eca:	461f      	mov	r7, r3
 8015ecc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8015ed0:	005b      	lsls	r3, r3, #1
 8015ed2:	ee07 3a90 	vmov	s15, r3
 8015ed6:	ee07 0a10 	vmov	s14, r0
 8015eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ede:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015ee2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015ee6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eee:	dc0f      	bgt.n	8015f10 <MEMS_runMagCal+0x598>
 8015ef0:	ed96 7a00 	vldr	s14, [r6]
 8015ef4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015ef8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f00:	bfc3      	ittte	gt
 8015f02:	f89b 3040 	ldrbgt.w	r3, [fp, #64]	; 0x40
 8015f06:	fab3 f383 	clzgt	r3, r3
 8015f0a:	095b      	lsrgt	r3, r3, #5
 8015f0c:	2301      	movle	r3, #1
 8015f0e:	9303      	str	r3, [sp, #12]
 8015f10:	ed96 0a00 	vldr	s0, [r6]
 8015f14:	f8db 6004 	ldr.w	r6, [fp, #4]
 8015f18:	9620      	str	r6, [sp, #128]	; 0x80
 8015f1a:	ee28 0a80 	vmul.f32	s0, s17, s0
 8015f1e:	ee80 0a09 	vdiv.f32	s0, s0, s18
 8015f22:	f003 f88d 	bl	8019040 <roundf>
 8015f26:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 8015f2a:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8015f2e:	ee17 3a10 	vmov	r3, s14
 8015f32:	ee28 0aa7 	vmul.f32	s0, s17, s15
 8015f36:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8015f3a:	f003 f881 	bl	8019040 <roundf>
 8015f3e:	ed9f 6a97 	vldr	s12, [pc, #604]	; 801619c <MEMS_runMagCal+0x824>
 8015f42:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 8015f46:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8015f4a:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 8015f4e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8015f52:	f8d9 0000 	ldr.w	r0, [r9]
 8015f56:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
 8015f5a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015f5e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015f62:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015f66:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8015f6a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8015f6e:	ee16 2a90 	vmov	r2, s13
 8015f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015f76:	eebc 6ac0 	vcvt.u32.f32	s12, s0
 8015f7a:	f1b8 0f01 	cmp.w	r8, #1
 8015f7e:	fa1f fc82 	uxth.w	ip, r2
 8015f82:	bf08      	it	eq
 8015f84:	23ff      	moveq	r3, #255	; 0xff
 8015f86:	ee17 2a10 	vmov	r2, s14
 8015f8a:	ee17 1a90 	vmov	r1, s15
 8015f8e:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 8015f92:	ee16 0a10 	vmov	r0, s12
 8015f96:	bf08      	it	eq
 8015f98:	f88d 3084 	strbeq.w	r3, [sp, #132]	; 0x84
 8015f9c:	9b03      	ldr	r3, [sp, #12]
 8015f9e:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
 8015fa2:	b292      	uxth	r2, r2
 8015fa4:	b289      	uxth	r1, r1
 8015fa6:	2000      	movs	r0, #0
 8015fa8:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
 8015fac:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8015fb0:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 8015fb4:	f88b 0000 	strb.w	r0, [fp]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	f000 8118 	beq.w	80161ee <MEMS_runMagCal+0x876>
 8015fbe:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8015fc2:	f88b 0001 	strb.w	r0, [fp, #1]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	f041 80fd 	bne.w	80171c6 <MEMS_runMagCal+0x184e>
 8015fcc:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8015fd0:	ad0e      	add	r5, sp, #56	; 0x38
 8015fd2:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 8015fd6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015fda:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8015fde:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
 8015fe2:	f8cb 6008 	str.w	r6, [fp, #8]
 8015fe6:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 8015fea:	f8bd 608e 	ldrh.w	r6, [sp, #142]	; 0x8e
 8015fee:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80161a0 <MEMS_runMagCal+0x828>
 8015ff2:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
 8015ff6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015ffa:	fb00 f404 	mul.w	r4, r0, r4
 8015ffe:	ee05 4a90 	vmov	s11, r4
 8016002:	fb00 f406 	mul.w	r4, r0, r6
 8016006:	fb00 f00e 	mul.w	r0, r0, lr
 801600a:	ee06 0a10 	vmov	s12, r0
 801600e:	f9bd 0086 	ldrsh.w	r0, [sp, #134]	; 0x86
 8016012:	f8cb 204c 	str.w	r2, [fp, #76]	; 0x4c
 8016016:	ee03 0a90 	vmov	s7, r0
 801601a:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
 801601e:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
 8016022:	ee05 4a10 	vmov	s10, r4
 8016026:	ee04 0a10 	vmov	s8, r0
 801602a:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	; 0x8a
 801602e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8016032:	ee04 0a90 	vmov	s9, r0
 8016036:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801603a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801603e:	f8dc 0000 	ldr.w	r0, [ip]
 8016042:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 8016046:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801604a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801604e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016052:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8016056:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801605a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801605e:	2001      	movs	r0, #1
 8016060:	24ff      	movs	r4, #255	; 0xff
 8016062:	edcb 5a1a 	vstr	s11, [fp, #104]	; 0x68
 8016066:	ed8b 5a1e 	vstr	s10, [fp, #120]	; 0x78
 801606a:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 801606e:	edcb 3a17 	vstr	s7, [fp, #92]	; 0x5c
 8016072:	ed8b 4a18 	vstr	s8, [fp, #96]	; 0x60
 8016076:	edcb 4a19 	vstr	s9, [fp, #100]	; 0x64
 801607a:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
 801607e:	f88b 0059 	strb.w	r0, [fp, #89]	; 0x59
 8016082:	f88b 4012 	strb.w	r4, [fp, #18]
 8016086:	2f00      	cmp	r7, #0
 8016088:	f001 82c8 	beq.w	801761c <MEMS_runMagCal+0x1ca4>
 801608c:	9b05      	ldr	r3, [sp, #20]
 801608e:	ed9f 3a47 	vldr	s6, [pc, #284]	; 80161ac <MEMS_runMagCal+0x834>
 8016092:	ed93 0a01 	vldr	s0, [r3, #4]
 8016096:	f89b 1011 	ldrb.w	r1, [fp, #17]
 801609a:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 801609e:	2200      	movs	r2, #0
 80160a0:	ee20 3a03 	vmul.f32	s6, s0, s6
 80160a4:	f04f 34ff 	mov.w	r4, #4294967295
 80160a8:	4616      	mov	r6, r2
 80160aa:	fb96 f3f0 	sdiv	r3, r6, r0
 80160ae:	fb00 6313 	mls	r3, r0, r3, r6
 80160b2:	b2db      	uxtb	r3, r3
 80160b4:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80160b8:	1c66      	adds	r6, r4, #1
 80160ba:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 80160be:	ee07 4a90 	vmov	s15, r4
 80160c2:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 80160c6:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80160ca:	ee06 4a90 	vmov	s13, r4
 80160ce:	fb96 f4f1 	sdiv	r4, r6, r1
 80160d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80160d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80160da:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80160de:	ee07 3a10 	vmov	s14, r3
 80160e2:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80160e6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80160ea:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80160ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80160f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80160f6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80160fa:	fb01 6414 	mls	r4, r1, r4, r6
 80160fe:	b264      	sxtb	r4, r4
 8016100:	ee37 7a64 	vsub.f32	s14, s14, s9
 8016104:	3201      	adds	r2, #1
 8016106:	ee27 7a06 	vmul.f32	s14, s14, s12
 801610a:	b212      	sxth	r2, r2
 801610c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8016110:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 8016114:	42ba      	cmp	r2, r7
 8016116:	4616      	mov	r6, r2
 8016118:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801611c:	ee67 7a03 	vmul.f32	s15, s14, s6
 8016120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016124:	ee17 ca90 	vmov	ip, s15
 8016128:	f8a3 c014 	strh.w	ip, [r3, #20]
 801612c:	dbbd      	blt.n	80160aa <MEMS_runMagCal+0x732>
 801612e:	f88b 4012 	strb.w	r4, [fp, #18]
 8016132:	428f      	cmp	r7, r1
 8016134:	bf28      	it	cs
 8016136:	460f      	movcs	r7, r1
 8016138:	f88b 7010 	strb.w	r7, [fp, #16]
 801613c:	ee1c 0a10 	vmov	r0, s24
 8016140:	9500      	str	r5, [sp, #0]
 8016142:	4642      	mov	r2, r8
 8016144:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8016148:	ab0d      	add	r3, sp, #52	; 0x34
 801614a:	f7f8 fded 	bl	800ed28 <getMagStats.constprop.0>
 801614e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80161a4 <MEMS_runMagCal+0x82c>
 8016152:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8016156:	edd5 6a00 	vldr	s13, [r5]
 801615a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801615e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8016162:	eef0 7ae7 	vabs.f32	s15, s15
 8016166:	eef4 7ac7 	vcmpe.f32	s15, s14
 801616a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801616e:	d525      	bpl.n	80161bc <MEMS_runMagCal+0x844>
 8016170:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016178:	f101 8257 	bmi.w	801762a <MEMS_runMagCal+0x1cb2>
 801617c:	e01e      	b.n	80161bc <MEMS_runMagCal+0x844>
 801617e:	bf00      	nop
 8016180:	41f00001 	.word	0x41f00001
 8016184:	3f8ccccd 	.word	0x3f8ccccd
 8016188:	3f266666 	.word	0x3f266666
 801618c:	3eb33333 	.word	0x3eb33333
 8016190:	3f19999a 	.word	0x3f19999a
 8016194:	3a83126f 	.word	0x3a83126f
 8016198:	3c23d70a 	.word	0x3c23d70a
 801619c:	447a0000 	.word	0x447a0000
 80161a0:	358637bd 	.word	0x358637bd
 80161a4:	423c0000 	.word	0x423c0000
 80161a8:	4423d666 	.word	0x4423d666
 80161ac:	42c80000 	.word	0x42c80000
 80161b0:	427c0000 	.word	0x427c0000
 80161b4:	3f666666 	.word	0x3f666666
 80161b8:	3eaaaaab 	.word	0x3eaaaaab
 80161bc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80161c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80161c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161c8:	d507      	bpl.n	80161da <MEMS_runMagCal+0x862>
 80161ca:	eef4 6a47 	vcmp.f32	s13, s14
 80161ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161d2:	9b03      	ldr	r3, [sp, #12]
 80161d4:	bf48      	it	mi
 80161d6:	2302      	movmi	r3, #2
 80161d8:	9303      	str	r3, [sp, #12]
 80161da:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80161de:	9a03      	ldr	r2, [sp, #12]
 80161e0:	f88b 2058 	strb.w	r2, [fp, #88]	; 0x58
 80161e4:	2bc8      	cmp	r3, #200	; 0xc8
 80161e6:	d902      	bls.n	80161ee <MEMS_runMagCal+0x876>
 80161e8:	2302      	movs	r3, #2
 80161ea:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80161ee:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 80161f2:	ecbd 8b0a 	vpop	{d8-d12}
 80161f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161fa:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80161fe:	4291      	cmp	r1, r2
 8016200:	f4ff abea 	bcc.w	80159d8 <MEMS_runMagCal+0x60>
 8016204:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8016208:	2b00      	cmp	r3, #0
 801620a:	f47f abf9 	bne.w	8015a00 <MEMS_runMagCal+0x88>
 801620e:	f7ff bbed 	b.w	80159ec <MEMS_runMagCal+0x74>
 8016212:	2702      	movs	r7, #2
 8016214:	2300      	movs	r3, #0
 8016216:	9307      	str	r3, [sp, #28]
 8016218:	9303      	str	r3, [sp, #12]
 801621a:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 80161a8 <MEMS_runMagCal+0x830>
 801621e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016226:	f140 8260 	bpl.w	80166ea <MEMS_runMagCal+0xd72>
 801622a:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 80161ac <MEMS_runMagCal+0x834>
 801622e:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8016232:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016236:	2b01      	cmp	r3, #1
 8016238:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 801623c:	d911      	bls.n	8016262 <MEMS_runMagCal+0x8ea>
 801623e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016242:	ee17 3a90 	vmov	r3, s15
 8016246:	b29b      	uxth	r3, r3
 8016248:	2bc7      	cmp	r3, #199	; 0xc7
 801624a:	f201 8359 	bhi.w	8017900 <MEMS_runMagCal+0x1f88>
 801624e:	2300      	movs	r3, #0
 8016250:	22ff      	movs	r2, #255	; 0xff
 8016252:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8016256:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 801625a:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 801625e:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8016262:	2f00      	cmp	r7, #0
 8016264:	f040 824d 	bne.w	8016702 <MEMS_runMagCal+0xd8a>
 8016268:	f99b 3012 	ldrsb.w	r3, [fp, #18]
 801626c:	2b00      	cmp	r3, #0
 801626e:	f2c0 839e 	blt.w	80169ae <MEMS_runMagCal+0x1036>
 8016272:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8016276:	1c5a      	adds	r2, r3, #1
 8016278:	fbb2 f3f6 	udiv	r3, r2, r6
 801627c:	fb06 2313 	mls	r3, r6, r3, r2
 8016280:	b25b      	sxtb	r3, r3
 8016282:	461d      	mov	r5, r3
 8016284:	f89b 4010 	ldrb.w	r4, [fp, #16]
 8016288:	f88b 3012 	strb.w	r3, [fp, #18]
 801628c:	3401      	adds	r4, #1
 801628e:	42b4      	cmp	r4, r6
 8016290:	bfa8      	it	ge
 8016292:	4634      	movge	r4, r6
 8016294:	fa5f f884 	uxtb.w	r8, r4
 8016298:	f88b 8010 	strb.w	r8, [fp, #16]
 801629c:	f002 fed0 	bl	8019040 <roundf>
 80162a0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80162a4:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
 80162a8:	ee10 2a10 	vmov	r2, s0
 80162ac:	829a      	strh	r2, [r3, #20]
 80162ae:	2f00      	cmp	r7, #0
 80162b0:	f040 8227 	bne.w	8016702 <MEMS_runMagCal+0xd8a>
 80162b4:	f8db 200c 	ldr.w	r2, [fp, #12]
 80162b8:	b122      	cbz	r2, 80162c4 <MEMS_runMagCal+0x94c>
 80162ba:	9908      	ldr	r1, [sp, #32]
 80162bc:	f502 6396 	add.w	r3, r2, #1200	; 0x4b0
 80162c0:	4299      	cmp	r1, r3
 80162c2:	d394      	bcc.n	80161ee <MEMS_runMagCal+0x876>
 80162c4:	9b03      	ldr	r3, [sp, #12]
 80162c6:	2b01      	cmp	r3, #1
 80162c8:	d091      	beq.n	80161ee <MEMS_runMagCal+0x876>
 80162ca:	f89b 7058 	ldrb.w	r7, [fp, #88]	; 0x58
 80162ce:	1ebb      	subs	r3, r7, #2
 80162d0:	2b01      	cmp	r3, #1
 80162d2:	f240 8232 	bls.w	801673a <MEMS_runMagCal+0xdc2>
 80162d6:	9b05      	ldr	r3, [sp, #20]
 80162d8:	ed5f 7a4b 	vldr	s15, [pc, #-300]	; 80161b0 <MEMS_runMagCal+0x838>
 80162dc:	ed93 8a01 	vldr	s16, [r3, #4]
 80162e0:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 80162e4:	9a06      	ldr	r2, [sp, #24]
 80162e6:	f8db 6090 	ldr.w	r6, [fp, #144]	; 0x90
 80162ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80162f0:	eec7 8a08 	vdiv.f32	s17, s14, s16
 80162f4:	fb02 1404 	mla	r4, r2, r4, r1
 80162f8:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80162fc:	f10b 028c 	add.w	r2, fp, #140	; 0x8c
 8016300:	3310      	adds	r3, #16
 8016302:	42a3      	cmp	r3, r4
 8016304:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 8016308:	ee28 9a89 	vmul.f32	s18, s17, s18
 801630c:	ee0c 2a10 	vmov	s24, r2
 8016310:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016318:	ee17 2a90 	vmov	r2, s15
 801631c:	fa1f f982 	uxth.w	r9, r2
 8016320:	f080 81fe 	bcs.w	8016720 <MEMS_runMagCal+0xda8>
 8016324:	f242 3328 	movw	r3, #9000	; 0x2328
 8016328:	429c      	cmp	r4, r3
 801632a:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 801632e:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
 8016332:	f99b 208e 	ldrsb.w	r2, [fp, #142]	; 0x8e
 8016336:	bf1a      	itte	ne
 8016338:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 801633c:	3c28      	subne	r4, #40	; 0x28
 801633e:	2400      	moveq	r4, #0
 8016340:	42a8      	cmp	r0, r5
 8016342:	f102 0201 	add.w	r2, r2, #1
 8016346:	f000 8727 	beq.w	8017198 <MEMS_runMagCal+0x1820>
 801634a:	1a12      	subs	r2, r2, r0
 801634c:	fb92 f1f5 	sdiv	r1, r2, r5
 8016350:	fb05 2211 	mls	r2, r5, r1, r2
 8016354:	2a00      	cmp	r2, #0
 8016356:	bfb8      	it	lt
 8016358:	1952      	addlt	r2, r2, r5
 801635a:	b211      	sxth	r1, r2
 801635c:	b358      	cbz	r0, 80163b6 <MEMS_runMagCal+0xa3e>
 801635e:	3801      	subs	r0, #1
 8016360:	b280      	uxth	r0, r0
 8016362:	3001      	adds	r0, #1
 8016364:	1b36      	subs	r6, r6, r4
 8016366:	9f03      	ldr	r7, [sp, #12]
 8016368:	b2b6      	uxth	r6, r6
 801636a:	4408      	add	r0, r1
 801636c:	e002      	b.n	8016374 <MEMS_runMagCal+0x9fc>
 801636e:	3101      	adds	r1, #1
 8016370:	4281      	cmp	r1, r0
 8016372:	d01b      	beq.n	80163ac <MEMS_runMagCal+0xa34>
 8016374:	fb91 f3f5 	sdiv	r3, r1, r5
 8016378:	fb05 1313 	mls	r3, r5, r3, r1
 801637c:	b2db      	uxtb	r3, r3
 801637e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016382:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8016386:	4432      	add	r2, r6
 8016388:	b212      	sxth	r2, r2
 801638a:	2a00      	cmp	r2, #0
 801638c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8016390:	daed      	bge.n	801636e <MEMS_runMagCal+0x9f6>
 8016392:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8016396:	1e5a      	subs	r2, r3, #1
 8016398:	2b00      	cmp	r3, #0
 801639a:	f000 8306 	beq.w	80169aa <MEMS_runMagCal+0x1032>
 801639e:	3101      	adds	r1, #1
 80163a0:	4281      	cmp	r1, r0
 80163a2:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 80163a6:	f04f 0701 	mov.w	r7, #1
 80163aa:	d1e3      	bne.n	8016374 <MEMS_runMagCal+0x9fc>
 80163ac:	2f01      	cmp	r7, #1
 80163ae:	f001 80ea 	beq.w	8017586 <MEMS_runMagCal+0x1c0e>
 80163b2:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 80163b6:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
 80163ba:	2800      	cmp	r0, #0
 80163bc:	f000 81b6 	beq.w	801672c <MEMS_runMagCal+0xdb4>
 80163c0:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80163c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80163c6:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80163ca:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 80163ce:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80163d2:	3308      	adds	r3, #8
 80163d4:	441c      	add	r4, r3
 80163d6:	42a2      	cmp	r2, r4
 80163d8:	f200 86e6 	bhi.w	80171a8 <MEMS_runMagCal+0x1830>
 80163dc:	9b07      	ldr	r3, [sp, #28]
 80163de:	b923      	cbnz	r3, 80163ea <MEMS_runMagCal+0xa72>
 80163e0:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80163e4:	2b0a      	cmp	r3, #10
 80163e6:	f240 81a5 	bls.w	8016734 <MEMS_runMagCal+0xdbc>
 80163ea:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80163ee:	9302      	str	r3, [sp, #8]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	f000 819f 	beq.w	8016734 <MEMS_runMagCal+0xdbc>
 80163f6:	ee29 aa09 	vmul.f32	s20, s18, s18
 80163fa:	ed5f 6a92 	vldr	s13, [pc, #-584]	; 80161b4 <MEMS_runMagCal+0x83c>
 80163fe:	ed1f 7a92 	vldr	s14, [pc, #-584]	; 80161b8 <MEMS_runMagCal+0x840>
 8016402:	9b03      	ldr	r3, [sp, #12]
 8016404:	9309      	str	r3, [sp, #36]	; 0x24
 8016406:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 801640a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801640e:	2100      	movs	r1, #0
 8016410:	ee2a aa26 	vmul.f32	s20, s20, s13
 8016414:	ee28 8a07 	vmul.f32	s16, s16, s14
 8016418:	ee69 9a29 	vmul.f32	s19, s18, s19
 801641c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8016420:	468a      	mov	sl, r1
 8016422:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016424:	f812 303a 	ldrb.w	r3, [r2, sl, lsl #3]
 8016428:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 801642c:	2b00      	cmp	r3, #0
 801642e:	f000 80e2 	beq.w	80165f6 <MEMS_runMagCal+0xc7e>
 8016432:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8016436:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 801643a:	ee07 4a90 	vmov	s15, r4
 801643e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016442:	eef0 7ae7 	vabs.f32	s15, s15
 8016446:	eef4 7ae8 	vcmpe.f32	s15, s17
 801644a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801644e:	f100 820b 	bmi.w	8016868 <MEMS_runMagCal+0xef0>
 8016452:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8016456:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 801645a:	2f00      	cmp	r7, #0
 801645c:	f000 8223 	beq.w	80168a6 <MEMS_runMagCal+0xf2e>
 8016460:	f9bb 23a6 	ldrsh.w	r2, [fp, #934]	; 0x3a6
 8016464:	f9bb 03a4 	ldrsh.w	r0, [fp, #932]	; 0x3a4
 8016468:	f9bb 33a8 	ldrsh.w	r3, [fp, #936]	; 0x3a8
 801646c:	1b52      	subs	r2, r2, r5
 801646e:	fb02 f102 	mul.w	r1, r2, r2
 8016472:	1b02      	subs	r2, r0, r4
 8016474:	fb02 1202 	mla	r2, r2, r2, r1
 8016478:	1b9b      	subs	r3, r3, r6
 801647a:	fb03 2303 	mla	r3, r3, r3, r2
 801647e:	ee07 3a90 	vmov	s15, r3
 8016482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016486:	eeb4 aae7 	vcmpe.f32	s20, s15
 801648a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801648e:	f300 80b2 	bgt.w	80165f6 <MEMS_runMagCal+0xc7e>
 8016492:	fb94 f3f9 	sdiv	r3, r4, r9
 8016496:	fb09 4313 	mls	r3, r9, r3, r4
 801649a:	2b00      	cmp	r3, #0
 801649c:	bfb8      	it	lt
 801649e:	444b      	addlt	r3, r9
 80164a0:	b21b      	sxth	r3, r3
 80164a2:	ee00 3a10 	vmov	s0, r3
 80164a6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80164aa:	ee20 0a08 	vmul.f32	s0, s0, s16
 80164ae:	f002 fdc7 	bl	8019040 <roundf>
 80164b2:	fb95 f3f9 	sdiv	r3, r5, r9
 80164b6:	fb09 5313 	mls	r3, r9, r3, r5
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	bfb8      	it	lt
 80164be:	444b      	addlt	r3, r9
 80164c0:	b21b      	sxth	r3, r3
 80164c2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80164c6:	ee00 3a10 	vmov	s0, r3
 80164ca:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80164ce:	edcd 7a04 	vstr	s15, [sp, #16]
 80164d2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80164d6:	f002 fdb3 	bl	8019040 <roundf>
 80164da:	fb96 f3f9 	sdiv	r3, r6, r9
 80164de:	fb09 6313 	mls	r3, r9, r3, r6
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	bfb8      	it	lt
 80164e6:	444b      	addlt	r3, r9
 80164e8:	b21b      	sxth	r3, r3
 80164ea:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80164ee:	ee00 3a10 	vmov	s0, r3
 80164f2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80164f6:	f89d 8010 	ldrb.w	r8, [sp, #16]
 80164fa:	edcd 7a04 	vstr	s15, [sp, #16]
 80164fe:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8016502:	9204      	str	r2, [sp, #16]
 8016504:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016508:	f002 fd9a 	bl	8019040 <roundf>
 801650c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016510:	f1b8 0f1f 	cmp.w	r8, #31
 8016514:	edcd 7a06 	vstr	s15, [sp, #24]
 8016518:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801651c:	9106      	str	r1, [sp, #24]
 801651e:	e9db 3225 	ldrd	r3, r2, [fp, #148]	; 0x94
 8016522:	f240 823d 	bls.w	80169a0 <MEMS_runMagCal+0x1028>
 8016526:	f1a8 0220 	sub.w	r2, r8, #32
 801652a:	2101      	movs	r1, #1
 801652c:	fa01 f202 	lsl.w	r2, r1, r2
 8016530:	401a      	ands	r2, r3
 8016532:	9804      	ldr	r0, [sp, #16]
 8016534:	281f      	cmp	r0, #31
 8016536:	e9db 3127 	ldrd	r3, r1, [fp, #156]	; 0x9c
 801653a:	f240 821f 	bls.w	801697c <MEMS_runMagCal+0x1004>
 801653e:	f1a0 0120 	sub.w	r1, r0, #32
 8016542:	2001      	movs	r0, #1
 8016544:	fa00 f101 	lsl.w	r1, r0, r1
 8016548:	ea01 0c03 	and.w	ip, r1, r3
 801654c:	9906      	ldr	r1, [sp, #24]
 801654e:	291f      	cmp	r1, #31
 8016550:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8016554:	f240 821e 	bls.w	8016994 <MEMS_runMagCal+0x101c>
 8016558:	f1a1 0020 	sub.w	r0, r1, #32
 801655c:	2101      	movs	r1, #1
 801655e:	fa01 f000 	lsl.w	r0, r1, r0
 8016562:	4003      	ands	r3, r0
 8016564:	2b00      	cmp	r3, #0
 8016566:	f040 812b 	bne.w	80167c0 <MEMS_runMagCal+0xe48>
 801656a:	ea52 030c 	orrs.w	r3, r2, ip
 801656e:	f040 812c 	bne.w	80167ca <MEMS_runMagCal+0xe52>
 8016572:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 8016576:	930a      	str	r3, [sp, #40]	; 0x28
 8016578:	461a      	mov	r2, r3
 801657a:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 801657e:	3301      	adds	r3, #1
 8016580:	4694      	mov	ip, r2
 8016582:	930b      	str	r3, [sp, #44]	; 0x2c
 8016584:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016586:	fb92 f3fc 	sdiv	r3, r2, ip
 801658a:	3701      	adds	r7, #1
 801658c:	4567      	cmp	r7, ip
 801658e:	bfa8      	it	ge
 8016590:	4667      	movge	r7, ip
 8016592:	fb0c 2c13 	mls	ip, ip, r3, r2
 8016596:	b2ff      	uxtb	r7, r7
 8016598:	fa4f fc8c 	sxtb.w	ip, ip
 801659c:	9905      	ldr	r1, [sp, #20]
 801659e:	f88b c08e 	strb.w	ip, [fp, #142]	; 0x8e
 80165a2:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80165a6:	f88b 708c 	strb.w	r7, [fp, #140]	; 0x8c
 80165aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80165ac:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80165b0:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 80165b4:	1a9b      	subs	r3, r3, r2
 80165b6:	fb01 330a 	mla	r3, r1, sl, r3
 80165ba:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 80165be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165c0:	f8ac 40ae 	strh.w	r4, [ip, #174]	; 0xae
 80165c4:	429f      	cmp	r7, r3
 80165c6:	f8ac 50b0 	strh.w	r5, [ip, #176]	; 0xb0
 80165ca:	f8ac 60b2 	strh.w	r6, [ip, #178]	; 0xb2
 80165ce:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 80165d2:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 80165d6:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 80165da:	f000 8758 	beq.w	801748e <MEMS_runMagCal+0x1b16>
 80165de:	9b06      	ldr	r3, [sp, #24]
 80165e0:	9a04      	ldr	r2, [sp, #16]
 80165e2:	ee1c 0a10 	vmov	r0, s24
 80165e6:	4641      	mov	r1, r8
 80165e8:	f7f8 f874 	bl	800e6d4 <MEMS_setMagIndexToOne>
 80165ec:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80165f0:	9302      	str	r3, [sp, #8]
 80165f2:	2301      	movs	r3, #1
 80165f4:	9309      	str	r3, [sp, #36]	; 0x24
 80165f6:	9b02      	ldr	r3, [sp, #8]
 80165f8:	f10a 0a01 	add.w	sl, sl, #1
 80165fc:	fa0f fa8a 	sxth.w	sl, sl
 8016600:	459a      	cmp	sl, r3
 8016602:	4651      	mov	r1, sl
 8016604:	f6ff af0d 	blt.w	8016422 <MEMS_runMagCal+0xaaa>
 8016608:	f89b 3000 	ldrb.w	r3, [fp]
 801660c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801660e:	431a      	orrs	r2, r3
 8016610:	b2d3      	uxtb	r3, r2
 8016612:	f88b 3000 	strb.w	r3, [fp]
 8016616:	2b00      	cmp	r3, #0
 8016618:	f43f ade9 	beq.w	80161ee <MEMS_runMagCal+0x876>
 801661c:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8016620:	9306      	str	r3, [sp, #24]
 8016622:	2b19      	cmp	r3, #25
 8016624:	f67f ade3 	bls.w	80161ee <MEMS_runMagCal+0x876>
 8016628:	f8db 3008 	ldr.w	r3, [fp, #8]
 801662c:	9309      	str	r3, [sp, #36]	; 0x24
 801662e:	b123      	cbz	r3, 801663a <MEMS_runMagCal+0xcc2>
 8016630:	f8db 3004 	ldr.w	r3, [fp, #4]
 8016634:	2b00      	cmp	r3, #0
 8016636:	f040 8583 	bne.w	8017140 <MEMS_runMagCal+0x17c8>
 801663a:	9b07      	ldr	r3, [sp, #28]
 801663c:	2b00      	cmp	r3, #0
 801663e:	f040 872f 	bne.w	80174a0 <MEMS_runMagCal+0x1b28>
 8016642:	9b05      	ldr	r3, [sp, #20]
 8016644:	9903      	ldr	r1, [sp, #12]
 8016646:	ed93 8a01 	vldr	s16, [r3, #4]
 801664a:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 801664e:	9302      	str	r3, [sp, #8]
 8016650:	2600      	movs	r6, #0
 8016652:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 8016656:	9304      	str	r3, [sp, #16]
 8016658:	f04f 0a01 	mov.w	sl, #1
 801665c:	e9db 8e25 	ldrd	r8, lr, [fp, #148]	; 0x94
 8016660:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
 8016664:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
 8016668:	9624      	str	r6, [sp, #144]	; 0x90
 801666a:	4657      	mov	r7, sl
 801666c:	460b      	mov	r3, r1
 801666e:	460c      	mov	r4, r1
 8016670:	e013      	b.n	801669a <MEMS_runMagCal+0xd22>
 8016672:	f1b9 0f00 	cmp.w	r9, #0
 8016676:	bf18      	it	ne
 8016678:	3101      	addne	r1, #1
 801667a:	2d00      	cmp	r5, #0
 801667c:	bf18      	it	ne
 801667e:	3401      	addne	r4, #1
 8016680:	2a00      	cmp	r2, #0
 8016682:	bf18      	it	ne
 8016684:	3301      	addne	r3, #1
 8016686:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 801668a:	b2c9      	uxtb	r1, r1
 801668c:	b2e4      	uxtb	r4, r4
 801668e:	b2db      	uxtb	r3, r3
 8016690:	f000 81a2 	beq.w	80169d8 <MEMS_runMagCal+0x1060>
 8016694:	3601      	adds	r6, #1
 8016696:	fa5f fa8c 	uxtb.w	sl, ip
 801669a:	9804      	ldr	r0, [sp, #16]
 801669c:	f1a6 0220 	sub.w	r2, r6, #32
 80166a0:	fa07 f202 	lsl.w	r2, r7, r2
 80166a4:	ea02 0500 	and.w	r5, r2, r0
 80166a8:	9802      	ldr	r0, [sp, #8]
 80166aa:	2e1f      	cmp	r6, #31
 80166ac:	ea08 0902 	and.w	r9, r8, r2
 80166b0:	f10a 0c01 	add.w	ip, sl, #1
 80166b4:	ea02 0200 	and.w	r2, r2, r0
 80166b8:	fa07 f006 	lsl.w	r0, r7, r6
 80166bc:	d8d9      	bhi.n	8016672 <MEMS_runMagCal+0xcfa>
 80166be:	e9db 2528 	ldrd	r2, r5, [fp, #160]	; 0xa0
 80166c2:	ea00 0902 	and.w	r9, r0, r2
 80166c6:	4005      	ands	r5, r0
 80166c8:	ea0e 0000 	and.w	r0, lr, r0
 80166cc:	f1b9 0f00 	cmp.w	r9, #0
 80166d0:	bf18      	it	ne
 80166d2:	3401      	addne	r4, #1
 80166d4:	2d00      	cmp	r5, #0
 80166d6:	bf0c      	ite	eq
 80166d8:	461d      	moveq	r5, r3
 80166da:	1c5d      	addne	r5, r3, #1
 80166dc:	2800      	cmp	r0, #0
 80166de:	bf18      	it	ne
 80166e0:	3101      	addne	r1, #1
 80166e2:	b2e4      	uxtb	r4, r4
 80166e4:	b2eb      	uxtb	r3, r5
 80166e6:	b2c9      	uxtb	r1, r1
 80166e8:	e7d4      	b.n	8016694 <MEMS_runMagCal+0xd1c>
 80166ea:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80166ee:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 80169c4 <MEMS_runMagCal+0x104c>
 80166f2:	2b01      	cmp	r3, #1
 80166f4:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 80166f8:	f63f ada9 	bhi.w	801624e <MEMS_runMagCal+0x8d6>
 80166fc:	2f00      	cmp	r7, #0
 80166fe:	f43f adb3 	beq.w	8016268 <MEMS_runMagCal+0x8f0>
 8016702:	9908      	ldr	r1, [sp, #32]
 8016704:	f8cb 100c 	str.w	r1, [fp, #12]
 8016708:	2200      	movs	r2, #0
 801670a:	23ff      	movs	r3, #255	; 0xff
 801670c:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8016710:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8016714:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8016718:	ecbd 8b0a 	vpop	{d8-d12}
 801671c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016720:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 8016724:	4634      	mov	r4, r6
 8016726:	2800      	cmp	r0, #0
 8016728:	f47f ae4a 	bne.w	80163c0 <MEMS_runMagCal+0xa48>
 801672c:	9b07      	ldr	r3, [sp, #28]
 801672e:	2b00      	cmp	r3, #0
 8016730:	f47f ae5b 	bne.w	80163ea <MEMS_runMagCal+0xa72>
 8016734:	9b03      	ldr	r3, [sp, #12]
 8016736:	9309      	str	r3, [sp, #36]	; 0x24
 8016738:	e766      	b.n	8016608 <MEMS_runMagCal+0xc90>
 801673a:	45b0      	cmp	r8, r6
 801673c:	f000 86b9 	beq.w	80174b2 <MEMS_runMagCal+0x1b3a>
 8016740:	2f03      	cmp	r7, #3
 8016742:	f47f adc8 	bne.w	80162d6 <MEMS_runMagCal+0x95e>
 8016746:	ee07 2a90 	vmov	s15, r2
 801674a:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80169c8 <MEMS_runMagCal+0x1050>
 801674e:	ed9b 7a01 	vldr	s14, [fp, #4]
 8016752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016756:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801675a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801675e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016766:	f77f adb6 	ble.w	80162d6 <MEMS_runMagCal+0x95e>
 801676a:	f8db 3008 	ldr.w	r3, [fp, #8]
 801676e:	2b00      	cmp	r3, #0
 8016770:	f43f adb1 	beq.w	80162d6 <MEMS_runMagCal+0x95e>
 8016774:	eddd 7a08 	vldr	s15, [sp, #32]
 8016778:	330a      	adds	r3, #10
 801677a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801677e:	ee07 3a90 	vmov	s15, r3
 8016782:	ee67 6a26 	vmul.f32	s13, s14, s13
 8016786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801678a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801678e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016792:	f77f ada0 	ble.w	80162d6 <MEMS_runMagCal+0x95e>
 8016796:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801679a:	2b00      	cmp	r3, #0
 801679c:	f47f ad9b 	bne.w	80162d6 <MEMS_runMagCal+0x95e>
 80167a0:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	f43f ad22 	beq.w	80161ee <MEMS_runMagCal+0x876>
 80167aa:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 80167ae:	2bff      	cmp	r3, #255	; 0xff
 80167b0:	f47f ad1d 	bne.w	80161ee <MEMS_runMagCal+0x876>
 80167b4:	e58f      	b.n	80162d6 <MEMS_runMagCal+0x95e>
 80167b6:	2300      	movs	r3, #0
 80167b8:	9307      	str	r3, [sp, #28]
 80167ba:	9303      	str	r3, [sp, #12]
 80167bc:	2700      	movs	r7, #0
 80167be:	e52c      	b.n	801621a <MEMS_runMagCal+0x8a2>
 80167c0:	b11a      	cbz	r2, 80167ca <MEMS_runMagCal+0xe52>
 80167c2:	f1bc 0f00 	cmp.w	ip, #0
 80167c6:	f47f af16 	bne.w	80165f6 <MEMS_runMagCal+0xc7e>
 80167ca:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 80167ce:	930a      	str	r3, [sp, #40]	; 0x28
 80167d0:	461a      	mov	r2, r3
 80167d2:	4297      	cmp	r7, r2
 80167d4:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80167d8:	f000 848f 	beq.w	80170fa <MEMS_runMagCal+0x1782>
 80167dc:	3301      	adds	r3, #1
 80167de:	4611      	mov	r1, r2
 80167e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80167e2:	1bdb      	subs	r3, r3, r7
 80167e4:	fb93 f2f2 	sdiv	r2, r3, r2
 80167e8:	fb01 3212 	mls	r2, r1, r2, r3
 80167ec:	2a00      	cmp	r2, #0
 80167ee:	bfbc      	itt	lt
 80167f0:	460b      	movlt	r3, r1
 80167f2:	18d2      	addlt	r2, r2, r3
 80167f4:	468c      	mov	ip, r1
 80167f6:	b212      	sxth	r2, r2
 80167f8:	f107 3eff 	add.w	lr, r7, #4294967295
 80167fc:	fa5f fe8e 	uxtb.w	lr, lr
 8016800:	f10e 0e01 	add.w	lr, lr, #1
 8016804:	4496      	add	lr, r2
 8016806:	e002      	b.n	801680e <MEMS_runMagCal+0xe96>
 8016808:	4572      	cmp	r2, lr
 801680a:	f43f aebb 	beq.w	8016584 <MEMS_runMagCal+0xc0c>
 801680e:	fb92 f3fc 	sdiv	r3, r2, ip
 8016812:	fb0c 2313 	mls	r3, ip, r3, r2
 8016816:	b2db      	uxtb	r3, r3
 8016818:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801681c:	3201      	adds	r2, #1
 801681e:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8016822:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 8016826:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801682a:	1a20      	subs	r0, r4, r0
 801682c:	1a69      	subs	r1, r5, r1
 801682e:	ee07 0a90 	vmov	s15, r0
 8016832:	ee06 1a90 	vmov	s13, r1
 8016836:	1af3      	subs	r3, r6, r3
 8016838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801683c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016840:	ee07 3a10 	vmov	s14, r3
 8016844:	eef0 7ae7 	vabs.f32	s15, s15
 8016848:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801684c:	eef0 6ae6 	vabs.f32	s13, s13
 8016850:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016854:	eeb0 7ac7 	vabs.f32	s14, s14
 8016858:	ee77 7a87 	vadd.f32	s15, s15, s14
 801685c:	eef4 9ae7 	vcmpe.f32	s19, s15
 8016860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016864:	ddd0      	ble.n	8016808 <MEMS_runMagCal+0xe90>
 8016866:	e6c6      	b.n	80165f6 <MEMS_runMagCal+0xc7e>
 8016868:	ee07 5a90 	vmov	s15, r5
 801686c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016870:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8016874:	eef0 7ae7 	vabs.f32	s15, s15
 8016878:	eef4 8ae7 	vcmpe.f32	s17, s15
 801687c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016880:	f77f ade9 	ble.w	8016456 <MEMS_runMagCal+0xade>
 8016884:	ee07 6a90 	vmov	s15, r6
 8016888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801688c:	eef0 7ae7 	vabs.f32	s15, s15
 8016890:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016898:	f73f aead 	bgt.w	80165f6 <MEMS_runMagCal+0xc7e>
 801689c:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 80168a0:	2f00      	cmp	r7, #0
 80168a2:	f47f addd 	bne.w	8016460 <MEMS_runMagCal+0xae8>
 80168a6:	fb94 f2f9 	sdiv	r2, r4, r9
 80168aa:	f04f 0301 	mov.w	r3, #1
 80168ae:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 80168b2:	9b05      	ldr	r3, [sp, #20]
 80168b4:	f88b 708e 	strb.w	r7, [fp, #142]	; 0x8e
 80168b8:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80168bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80168be:	f8ab 40ae 	strh.w	r4, [fp, #174]	; 0xae
 80168c2:	fb09 4212 	mls	r2, r9, r2, r4
 80168c6:	2a00      	cmp	r2, #0
 80168c8:	fb01 3300 	mla	r3, r1, r0, r3
 80168cc:	bfb8      	it	lt
 80168ce:	444a      	addlt	r2, r9
 80168d0:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
 80168d4:	b213      	sxth	r3, r2
 80168d6:	ee00 3a10 	vmov	s0, r3
 80168da:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80168de:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 80168e2:	f8ab 50b0 	strh.w	r5, [fp, #176]	; 0xb0
 80168e6:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 80168ea:	f8ab 60b2 	strh.w	r6, [fp, #178]	; 0xb2
 80168ee:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 80168f2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80168f6:	f8ab 70ac 	strh.w	r7, [fp, #172]	; 0xac
 80168fa:	f002 fba1 	bl	8019040 <roundf>
 80168fe:	fb95 f3f9 	sdiv	r3, r5, r9
 8016902:	fb09 5513 	mls	r5, r9, r3, r5
 8016906:	2d00      	cmp	r5, #0
 8016908:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801690c:	bfb8      	it	lt
 801690e:	444d      	addlt	r5, r9
 8016910:	b22d      	sxth	r5, r5
 8016912:	edcd 7a02 	vstr	s15, [sp, #8]
 8016916:	ee07 5a90 	vmov	s15, r5
 801691a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801691e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8016922:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016926:	f002 fb8b 	bl	8019040 <roundf>
 801692a:	fb96 f3f9 	sdiv	r3, r6, r9
 801692e:	fb09 6613 	mls	r6, r9, r3, r6
 8016932:	2e00      	cmp	r6, #0
 8016934:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016938:	bfb8      	it	lt
 801693a:	444e      	addlt	r6, r9
 801693c:	b236      	sxth	r6, r6
 801693e:	edcd 7a02 	vstr	s15, [sp, #8]
 8016942:	ee07 6a90 	vmov	s15, r6
 8016946:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801694a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801694e:	9204      	str	r2, [sp, #16]
 8016950:	2301      	movs	r3, #1
 8016952:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016956:	9309      	str	r3, [sp, #36]	; 0x24
 8016958:	f002 fb72 	bl	8019040 <roundf>
 801695c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016960:	9a04      	ldr	r2, [sp, #16]
 8016962:	edcd 7a02 	vstr	s15, [sp, #8]
 8016966:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801696a:	ee1c 0a10 	vmov	r0, s24
 801696e:	4621      	mov	r1, r4
 8016970:	f7f7 feb0 	bl	800e6d4 <MEMS_setMagIndexToOne>
 8016974:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8016978:	9302      	str	r3, [sp, #8]
 801697a:	e63c      	b.n	80165f6 <MEMS_runMagCal+0xc7e>
 801697c:	4603      	mov	r3, r0
 801697e:	2001      	movs	r0, #1
 8016980:	fa00 f303 	lsl.w	r3, r0, r3
 8016984:	ea01 0c03 	and.w	ip, r1, r3
 8016988:	9906      	ldr	r1, [sp, #24]
 801698a:	291f      	cmp	r1, #31
 801698c:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8016990:	f63f ade2 	bhi.w	8016558 <MEMS_runMagCal+0xbe0>
 8016994:	460b      	mov	r3, r1
 8016996:	2101      	movs	r1, #1
 8016998:	fa01 f303 	lsl.w	r3, r1, r3
 801699c:	4003      	ands	r3, r0
 801699e:	e5e1      	b.n	8016564 <MEMS_runMagCal+0xbec>
 80169a0:	2301      	movs	r3, #1
 80169a2:	fa03 f308 	lsl.w	r3, r3, r8
 80169a6:	401a      	ands	r2, r3
 80169a8:	e5c3      	b.n	8016532 <MEMS_runMagCal+0xbba>
 80169aa:	2701      	movs	r7, #1
 80169ac:	e4df      	b.n	801636e <MEMS_runMagCal+0x9f6>
 80169ae:	2500      	movs	r5, #0
 80169b0:	f89b 6011 	ldrb.w	r6, [fp, #17]
 80169b4:	462b      	mov	r3, r5
 80169b6:	e465      	b.n	8016284 <MEMS_runMagCal+0x90c>
 80169b8:	460f      	mov	r7, r1
 80169ba:	e42b      	b.n	8016214 <MEMS_runMagCal+0x89c>
 80169bc:	2300      	movs	r3, #0
 80169be:	9304      	str	r3, [sp, #16]
 80169c0:	f7ff b941 	b.w	8015c46 <MEMS_runMagCal+0x2ce>
 80169c4:	477fff00 	.word	0x477fff00
 80169c8:	3a83126f 	.word	0x3a83126f
 80169cc:	42340000 	.word	0x42340000
 80169d0:	3faccccd 	.word	0x3faccccd
 80169d4:	00000000 	.word	0x00000000
 80169d8:	2905      	cmp	r1, #5
 80169da:	f240 8383 	bls.w	80170e4 <MEMS_runMagCal+0x176c>
 80169de:	2c05      	cmp	r4, #5
 80169e0:	f240 8380 	bls.w	80170e4 <MEMS_runMagCal+0x176c>
 80169e4:	2b05      	cmp	r3, #5
 80169e6:	f240 837d 	bls.w	80170e4 <MEMS_runMagCal+0x176c>
 80169ea:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80169ee:	f89b a08d 	ldrb.w	sl, [fp, #141]	; 0x8d
 80169f2:	9302      	str	r3, [sp, #8]
 80169f4:	9b06      	ldr	r3, [sp, #24]
 80169f6:	4553      	cmp	r3, sl
 80169f8:	f000 85f1 	beq.w	80175de <MEMS_runMagCal+0x1c66>
 80169fc:	461a      	mov	r2, r3
 80169fe:	9b02      	ldr	r3, [sp, #8]
 8016a00:	3301      	adds	r3, #1
 8016a02:	9304      	str	r3, [sp, #16]
 8016a04:	1a9b      	subs	r3, r3, r2
 8016a06:	fb93 f2fa 	sdiv	r2, r3, sl
 8016a0a:	fb0a 3212 	mls	r2, sl, r2, r3
 8016a0e:	2a00      	cmp	r2, #0
 8016a10:	bfb8      	it	lt
 8016a12:	4452      	addlt	r2, sl
 8016a14:	46d1      	mov	r9, sl
 8016a16:	b212      	sxth	r2, r2
 8016a18:	9906      	ldr	r1, [sp, #24]
 8016a1a:	eb0b 03c2 	add.w	r3, fp, r2, lsl #3
 8016a1e:	f101 38ff 	add.w	r8, r1, #4294967295
 8016a22:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8016a26:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 8016a2a:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 8016a2e:	fa5f f888 	uxtb.w	r8, r8
 8016a32:	f108 0801 	add.w	r8, r8, #1
 8016a36:	468e      	mov	lr, r1
 8016a38:	463e      	mov	r6, r7
 8016a3a:	46ac      	mov	ip, r5
 8016a3c:	4490      	add	r8, r2
 8016a3e:	fb92 f3f9 	sdiv	r3, r2, r9
 8016a42:	fb09 2313 	mls	r3, r9, r3, r2
 8016a46:	b2db      	uxtb	r3, r3
 8016a48:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016a4c:	3201      	adds	r2, #1
 8016a4e:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8016a52:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 8016a56:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8016a5a:	42a1      	cmp	r1, r4
 8016a5c:	bfb8      	it	lt
 8016a5e:	4621      	movlt	r1, r4
 8016a60:	45a6      	cmp	lr, r4
 8016a62:	bfa8      	it	ge
 8016a64:	46a6      	movge	lr, r4
 8016a66:	4285      	cmp	r5, r0
 8016a68:	bfb8      	it	lt
 8016a6a:	4605      	movlt	r5, r0
 8016a6c:	4584      	cmp	ip, r0
 8016a6e:	bfa8      	it	ge
 8016a70:	4684      	movge	ip, r0
 8016a72:	429f      	cmp	r7, r3
 8016a74:	bfb8      	it	lt
 8016a76:	461f      	movlt	r7, r3
 8016a78:	429e      	cmp	r6, r3
 8016a7a:	bfa8      	it	ge
 8016a7c:	461e      	movge	r6, r3
 8016a7e:	4542      	cmp	r2, r8
 8016a80:	d1dd      	bne.n	8016a3e <MEMS_runMagCal+0x10c6>
 8016a82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016a86:	eec7 8a88 	vdiv.f32	s17, s15, s16
 8016a8a:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8016a8e:	eba1 010e 	sub.w	r1, r1, lr
 8016a92:	eba5 050c 	sub.w	r5, r5, ip
 8016a96:	1bbe      	subs	r6, r7, r6
 8016a98:	b209      	sxth	r1, r1
 8016a9a:	b22d      	sxth	r5, r5
 8016a9c:	b236      	sxth	r6, r6
 8016a9e:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 80169cc <MEMS_runMagCal+0x1054>
 8016aa2:	ee28 7a87 	vmul.f32	s14, s17, s14
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	f040 8593 	bne.w	80175d2 <MEMS_runMagCal+0x1c5a>
 8016aac:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8016ab0:	fab3 f883 	clz	r8, r3
 8016ab4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8016ab8:	ee06 1a90 	vmov	s13, r1
 8016abc:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8016ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ac4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016ac8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ad0:	f300 8562 	bgt.w	8017598 <MEMS_runMagCal+0x1c20>
 8016ad4:	ee06 5a10 	vmov	s12, r5
 8016ad8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8016adc:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ae4:	f100 8558 	bmi.w	8017598 <MEMS_runMagCal+0x1c20>
 8016ae8:	ee05 6a90 	vmov	s11, r6
 8016aec:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8016af0:	eef4 7ae5 	vcmpe.f32	s15, s11
 8016af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016af8:	f100 854e 	bmi.w	8017598 <MEMS_runMagCal+0x1c20>
 8016afc:	428d      	cmp	r5, r1
 8016afe:	462b      	mov	r3, r5
 8016b00:	bfb8      	it	lt
 8016b02:	460b      	movlt	r3, r1
 8016b04:	42b3      	cmp	r3, r6
 8016b06:	461a      	mov	r2, r3
 8016b08:	bfb8      	it	lt
 8016b0a:	4632      	movlt	r2, r6
 8016b0c:	428e      	cmp	r6, r1
 8016b0e:	4633      	mov	r3, r6
 8016b10:	bfa8      	it	ge
 8016b12:	460b      	movge	r3, r1
 8016b14:	42ab      	cmp	r3, r5
 8016b16:	bfa8      	it	ge
 8016b18:	462b      	movge	r3, r5
 8016b1a:	428a      	cmp	r2, r1
 8016b1c:	9202      	str	r2, [sp, #8]
 8016b1e:	f340 8588 	ble.w	8017632 <MEMS_runMagCal+0x1cba>
 8016b22:	4299      	cmp	r1, r3
 8016b24:	bfb8      	it	lt
 8016b26:	4619      	movlt	r1, r3
 8016b28:	42aa      	cmp	r2, r5
 8016b2a:	dd02      	ble.n	8016b32 <MEMS_runMagCal+0x11ba>
 8016b2c:	42ab      	cmp	r3, r5
 8016b2e:	bfb8      	it	lt
 8016b30:	4629      	movlt	r1, r5
 8016b32:	9a02      	ldr	r2, [sp, #8]
 8016b34:	4296      	cmp	r6, r2
 8016b36:	da02      	bge.n	8016b3e <MEMS_runMagCal+0x11c6>
 8016b38:	429e      	cmp	r6, r3
 8016b3a:	bfc8      	it	gt
 8016b3c:	4631      	movgt	r1, r6
 8016b3e:	f1b8 0f00 	cmp.w	r8, #0
 8016b42:	f000 8299 	beq.w	8017078 <MEMS_runMagCal+0x1700>
 8016b46:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b4e:	dc0d      	bgt.n	8016b6c <MEMS_runMagCal+0x11f4>
 8016b50:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8016b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b58:	dc08      	bgt.n	8016b6c <MEMS_runMagCal+0x11f4>
 8016b5a:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8016b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b62:	bfcc      	ite	gt
 8016b64:	f04f 0801 	movgt.w	r8, #1
 8016b68:	f04f 0800 	movle.w	r8, #0
 8016b6c:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 80169d0 <MEMS_runMagCal+0x1058>
 8016b70:	ed9d 5a02 	vldr	s10, [sp, #8]
 8016b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016b78:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8016b7c:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8016b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b84:	f2c0 8558 	blt.w	8017638 <MEMS_runMagCal+0x1cc0>
 8016b88:	ee07 1a90 	vmov	s15, r1
 8016b8c:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 8016b90:	ee27 5a05 	vmul.f32	s10, s14, s10
 8016b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b98:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ba0:	f2c0 854a 	blt.w	8017638 <MEMS_runMagCal+0x1cc0>
 8016ba4:	9a02      	ldr	r2, [sp, #8]
 8016ba6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8016baa:	f280 8545 	bge.w	8017638 <MEMS_runMagCal+0x1cc0>
 8016bae:	ee07 3a90 	vmov	s15, r3
 8016bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016bb6:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 8016bba:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016bbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bc6:	f140 8537 	bpl.w	8017638 <MEMS_runMagCal+0x1cc0>
 8016bca:	9b06      	ldr	r3, [sp, #24]
 8016bcc:	4553      	cmp	r3, sl
 8016bce:	f000 8569 	beq.w	80176a4 <MEMS_runMagCal+0x1d2c>
 8016bd2:	461a      	mov	r2, r3
 8016bd4:	9b04      	ldr	r3, [sp, #16]
 8016bd6:	1a9b      	subs	r3, r3, r2
 8016bd8:	fb93 f7f9 	sdiv	r7, r3, r9
 8016bdc:	fb09 3717 	mls	r7, r9, r7, r3
 8016be0:	2f00      	cmp	r7, #0
 8016be2:	bfb8      	it	lt
 8016be4:	4457      	addlt	r7, sl
 8016be6:	b23f      	sxth	r7, r7
 8016be8:	9b03      	ldr	r3, [sp, #12]
 8016bea:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8016bee:	b27f      	sxtb	r7, r7
 8016bf0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016bf4:	9304      	str	r3, [sp, #16]
 8016bf6:	f1c7 0e01 	rsb	lr, r7, #1
 8016bfa:	469c      	mov	ip, r3
 8016bfc:	463b      	mov	r3, r7
 8016bfe:	fb93 f1f9 	sdiv	r1, r3, r9
 8016c02:	fb09 3111 	mls	r1, r9, r1, r3
 8016c06:	b24a      	sxtb	r2, r1
 8016c08:	2a00      	cmp	r2, #0
 8016c0a:	f107 0701 	add.w	r7, r7, #1
 8016c0e:	bfb8      	it	lt
 8016c10:	eb0a 0201 	addlt.w	r2, sl, r1
 8016c14:	fb97 f3f9 	sdiv	r3, r7, r9
 8016c18:	fb09 7313 	mls	r3, r9, r3, r7
 8016c1c:	bfb8      	it	lt
 8016c1e:	b252      	sxtblt	r2, r2
 8016c20:	b25b      	sxtb	r3, r3
 8016c22:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016c26:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8016c2a:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8016c2e:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 8016c32:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8016c36:	1a45      	subs	r5, r0, r1
 8016c38:	bf48      	it	mi
 8016c3a:	1a09      	submi	r1, r1, r0
 8016c3c:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 8016c40:	bf4c      	ite	mi
 8016c42:	b20d      	sxthmi	r5, r1
 8016c44:	b22d      	sxthpl	r5, r5
 8016c46:	1a21      	subs	r1, r4, r0
 8016c48:	bf48      	it	mi
 8016c4a:	1b01      	submi	r1, r0, r4
 8016c4c:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 8016c50:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 8016c54:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8016c58:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 8016c5c:	1a9b      	subs	r3, r3, r2
 8016c5e:	1a26      	subs	r6, r4, r0
 8016c60:	b21b      	sxth	r3, r3
 8016c62:	bf48      	it	mi
 8016c64:	1b06      	submi	r6, r0, r4
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	b209      	sxth	r1, r1
 8016c6a:	b236      	sxth	r6, r6
 8016c6c:	dd20      	ble.n	8016cb0 <MEMS_runMagCal+0x1338>
 8016c6e:	4429      	add	r1, r5
 8016c70:	440e      	add	r6, r1
 8016c72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016c76:	fb02 f606 	mul.w	r6, r2, r6
 8016c7a:	ee07 6a90 	vmov	s15, r6
 8016c7e:	ee07 3a10 	vmov	s14, r3
 8016c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016c8a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8016c8e:	f10c 0c01 	add.w	ip, ip, #1
 8016c92:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8016c96:	fa5f fc8c 	uxtb.w	ip, ip
 8016c9a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8016c9e:	ee17 3a90 	vmov	r3, s15
 8016ca2:	b21b      	sxth	r3, r3
 8016ca4:	2b96      	cmp	r3, #150	; 0x96
 8016ca6:	dd03      	ble.n	8016cb0 <MEMS_runMagCal+0x1338>
 8016ca8:	9b04      	ldr	r3, [sp, #16]
 8016caa:	3301      	adds	r3, #1
 8016cac:	b2db      	uxtb	r3, r3
 8016cae:	9304      	str	r3, [sp, #16]
 8016cb0:	eb0e 0307 	add.w	r3, lr, r7
 8016cb4:	b2db      	uxtb	r3, r3
 8016cb6:	4598      	cmp	r8, r3
 8016cb8:	d8a0      	bhi.n	8016bfc <MEMS_runMagCal+0x1284>
 8016cba:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8016cbe:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8016cc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016cc6:	4563      	cmp	r3, ip
 8016cc8:	f340 820c 	ble.w	80170e4 <MEMS_runMagCal+0x176c>
 8016ccc:	9b07      	ldr	r3, [sp, #28]
 8016cce:	b92b      	cbnz	r3, 8016cdc <MEMS_runMagCal+0x1364>
 8016cd0:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8016cd4:	3b02      	subs	r3, #2
 8016cd6:	2b01      	cmp	r3, #1
 8016cd8:	f240 851e 	bls.w	8017718 <MEMS_runMagCal+0x1da0>
 8016cdc:	ac25      	add	r4, sp, #148	; 0x94
 8016cde:	2220      	movs	r2, #32
 8016ce0:	4620      	mov	r0, r4
 8016ce2:	2100      	movs	r1, #0
 8016ce4:	f001 fc2a 	bl	801853c <memset>
 8016ce8:	f89b 608c 	ldrb.w	r6, [fp, #140]	; 0x8c
 8016cec:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8016cf0:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	4286      	cmp	r6, r0
 8016cf8:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
 8016cfc:	921f      	str	r2, [sp, #124]	; 0x7c
 8016cfe:	f103 0301 	add.w	r3, r3, #1
 8016d02:	f000 8501 	beq.w	8017708 <MEMS_runMagCal+0x1d90>
 8016d06:	1b9b      	subs	r3, r3, r6
 8016d08:	fb93 f2f0 	sdiv	r2, r3, r0
 8016d0c:	fb00 3312 	mls	r3, r0, r2, r3
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	bfb8      	it	lt
 8016d14:	181b      	addlt	r3, r3, r0
 8016d16:	b21a      	sxth	r2, r3
 8016d18:	2e00      	cmp	r6, #0
 8016d1a:	f000 854c 	beq.w	80177b6 <MEMS_runMagCal+0x1e3e>
 8016d1e:	1e77      	subs	r7, r6, #1
 8016d20:	ed5f 5ad4 	vldr	s11, [pc, #-848]	; 80169d4 <MEMS_runMagCal+0x105c>
 8016d24:	b2fd      	uxtb	r5, r7
 8016d26:	3501      	adds	r5, #1
 8016d28:	eeb0 5a65 	vmov.f32	s10, s11
 8016d2c:	eef0 4a65 	vmov.f32	s9, s11
 8016d30:	4415      	add	r5, r2
 8016d32:	4611      	mov	r1, r2
 8016d34:	fb91 f3f0 	sdiv	r3, r1, r0
 8016d38:	fb00 1313 	mls	r3, r0, r3, r1
 8016d3c:	b2db      	uxtb	r3, r3
 8016d3e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016d42:	3101      	adds	r1, #1
 8016d44:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 8016d48:	ee06 ca90 	vmov	s13, ip
 8016d4c:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 8016d50:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8016d54:	ee07 ca10 	vmov	s14, ip
 8016d58:	ee07 3a90 	vmov	s15, r3
 8016d5c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016d60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d68:	42a9      	cmp	r1, r5
 8016d6a:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8016d6e:	ee35 5a07 	vadd.f32	s10, s10, s14
 8016d72:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8016d76:	d1dd      	bne.n	8016d34 <MEMS_runMagCal+0x13bc>
 8016d78:	ee07 6a90 	vmov	s15, r6
 8016d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016d84:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8016d88:	b2f9      	uxtb	r1, r7
 8016d8a:	3101      	adds	r1, #1
 8016d8c:	4411      	add	r1, r2
 8016d8e:	ed9f 6aeb 	vldr	s12, [pc, #940]	; 801713c <MEMS_runMagCal+0x17c4>
 8016d92:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 8016d96:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8016d9a:	ee29 aa85 	vmul.f32	s20, s19, s10
 8016d9e:	ee69 9aa5 	vmul.f32	s19, s19, s11
 8016da2:	eef0 4a46 	vmov.f32	s9, s12
 8016da6:	eeb0 4a46 	vmov.f32	s8, s12
 8016daa:	eef0 3a46 	vmov.f32	s7, s12
 8016dae:	eeb0 3a46 	vmov.f32	s6, s12
 8016db2:	eef0 2a46 	vmov.f32	s5, s12
 8016db6:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 8016dba:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 8016dbe:	fb92 f3f0 	sdiv	r3, r2, r0
 8016dc2:	fb00 2313 	mls	r3, r0, r3, r2
 8016dc6:	b2db      	uxtb	r3, r3
 8016dc8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016dcc:	3201      	adds	r2, #1
 8016dce:	f9b3 50ae 	ldrsh.w	r5, [r3, #174]	; 0xae
 8016dd2:	ee06 5a90 	vmov	s13, r5
 8016dd6:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8016dda:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8016dde:	ee07 5a10 	vmov	s14, r5
 8016de2:	ee07 3a90 	vmov	s15, r3
 8016de6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016dea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016df2:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8016df6:	ee37 7a4a 	vsub.f32	s14, s14, s20
 8016dfa:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8016dfe:	4291      	cmp	r1, r2
 8016e00:	eee6 2aa6 	vfma.f32	s5, s13, s13
 8016e04:	eea6 3a87 	vfma.f32	s6, s13, s14
 8016e08:	eea7 4a07 	vfma.f32	s8, s14, s14
 8016e0c:	eee6 3aa7 	vfma.f32	s7, s13, s15
 8016e10:	eee7 4a27 	vfma.f32	s9, s14, s15
 8016e14:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8016e18:	d1d1      	bne.n	8016dbe <MEMS_runMagCal+0x1446>
 8016e1a:	edc4 2a00 	vstr	s5, [r4]
 8016e1e:	ed84 3a01 	vstr	s6, [r4, #4]
 8016e22:	edc4 3a02 	vstr	s7, [r4, #8]
 8016e26:	ed84 4a03 	vstr	s8, [r4, #12]
 8016e2a:	edc4 4a04 	vstr	s9, [r4, #16]
 8016e2e:	ed84 6a05 	vstr	s12, [r4, #20]
 8016e32:	a91a      	add	r1, sp, #104	; 0x68
 8016e34:	4620      	mov	r0, r4
 8016e36:	f7fe fce5 	bl	8015804 <MEMS_EIG3>
 8016e3a:	ed9d 6a1b 	vldr	s12, [sp, #108]	; 0x6c
 8016e3e:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 8016e42:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 8016e46:	eef0 5ae4 	vabs.f32	s11, s9
 8016e4a:	eef0 6ac6 	vabs.f32	s13, s12
 8016e4e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8016e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e56:	bf8c      	ite	hi
 8016e58:	eef0 7a65 	vmovhi.f32	s15, s11
 8016e5c:	eef0 7a66 	vmovls.f32	s15, s13
 8016e60:	eeb0 7ac5 	vabs.f32	s14, s10
 8016e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e6c:	eef4 6ae5 	vcmpe.f32	s13, s11
 8016e70:	bf88      	it	hi
 8016e72:	eef0 7a47 	vmovhi.f32	s15, s14
 8016e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e7a:	bfb8      	it	lt
 8016e7c:	eef0 6a65 	vmovlt.f32	s13, s11
 8016e80:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016e84:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8016e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e8c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8016e90:	bfb8      	it	lt
 8016e92:	eeb0 7a66 	vmovlt.f32	s14, s13
 8016e96:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8016e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e9e:	f300 8420 	bgt.w	80176e2 <MEMS_runMagCal+0x1d6a>
 8016ea2:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8016ea6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016eaa:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8016eae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016eb6:	dd02      	ble.n	8016ebe <MEMS_runMagCal+0x1546>
 8016eb8:	2b22      	cmp	r3, #34	; 0x22
 8016eba:	f240 8412 	bls.w	80176e2 <MEMS_runMagCal+0x1d6a>
 8016ebe:	ee76 7a24 	vadd.f32	s15, s12, s9
 8016ec2:	ee07 3a10 	vmov	s14, r3
 8016ec6:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016eca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016ece:	eddf 6a90 	vldr	s13, [pc, #576]	; 8017110 <MEMS_runMagCal+0x1798>
 8016ed2:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8016ed6:	eef1 7ac6 	vsqrt.f32	s15, s12
 8016eda:	ee68 7a27 	vmul.f32	s15, s16, s15
 8016ede:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ee6:	f300 83fc 	bgt.w	80176e2 <MEMS_runMagCal+0x1d6a>
 8016eea:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8016eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ef6:	f100 83f4 	bmi.w	80176e2 <MEMS_runMagCal+0x1d6a>
 8016efa:	eddf 7a86 	vldr	s15, [pc, #536]	; 8017114 <MEMS_runMagCal+0x179c>
 8016efe:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8016f02:	2300      	movs	r3, #0
 8016f04:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8016f08:	932c      	str	r3, [sp, #176]	; 0xb0
 8016f0a:	eddd 7a02 	vldr	s15, [sp, #8]
 8016f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f1a:	d408      	bmi.n	8016f2e <MEMS_runMagCal+0x15b6>
 8016f1c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8016f20:	ee17 3a10 	vmov	r3, s14
 8016f24:	b21b      	sxth	r3, r3
 8016f26:	ee07 3a90 	vmov	s15, r3
 8016f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f2e:	eddf 6a81 	vldr	s13, [pc, #516]	; 8017134 <MEMS_runMagCal+0x17bc>
 8016f32:	ee86 7a88 	vdiv.f32	s14, s13, s16
 8016f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f3e:	dc08      	bgt.n	8016f52 <MEMS_runMagCal+0x15da>
 8016f40:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8016f44:	ee17 3a10 	vmov	r3, s14
 8016f48:	b21b      	sxth	r3, r3
 8016f4a:	ee07 3a90 	vmov	s15, r3
 8016f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f52:	ee27 7a88 	vmul.f32	s14, s15, s16
 8016f56:	eddf 7a70 	vldr	s15, [pc, #448]	; 8017118 <MEMS_runMagCal+0x17a0>
 8016f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f62:	f340 8424 	ble.w	80177ae <MEMS_runMagCal+0x1e36>
 8016f66:	eddf 7a6d 	vldr	s15, [pc, #436]	; 801711c <MEMS_runMagCal+0x17a4>
 8016f6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f72:	f140 841c 	bpl.w	80177ae <MEMS_runMagCal+0x1e36>
 8016f76:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8017120 <MEMS_runMagCal+0x17a8>
 8016f7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016f7e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016f82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016f86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016f8a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8017134 <MEMS_runMagCal+0x17bc>
 8016f8e:	eddf ba6b 	vldr	s23, [pc, #428]	; 801713c <MEMS_runMagCal+0x17c4>
 8016f92:	ed9f ba64 	vldr	s22, [pc, #400]	; 8017124 <MEMS_runMagCal+0x17ac>
 8016f96:	eddf aa64 	vldr	s21, [pc, #400]	; 8017128 <MEMS_runMagCal+0x17b0>
 8016f9a:	9d03      	ldr	r5, [sp, #12]
 8016f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016fa0:	ee68 4a09 	vmul.f32	s9, s16, s18
 8016fa4:	ee28 aa0a 	vmul.f32	s20, s16, s20
 8016fa8:	ee68 9a29 	vmul.f32	s19, s16, s19
 8016fac:	edc4 4a00 	vstr	s9, [r4]
 8016fb0:	ed84 aa01 	vstr	s20, [r4, #4]
 8016fb4:	edc4 9a02 	vstr	s19, [r4, #8]
 8016fb8:	edc4 7a03 	vstr	s15, [r4, #12]
 8016fbc:	edc4 7a06 	vstr	s15, [r4, #24]
 8016fc0:	ab11      	add	r3, sp, #68	; 0x44
 8016fc2:	ee1c 0a10 	vmov	r0, s24
 8016fc6:	aa2d      	add	r2, sp, #180	; 0xb4
 8016fc8:	eeb0 0a48 	vmov.f32	s0, s16
 8016fcc:	4621      	mov	r1, r4
 8016fce:	f7fe fa01 	bl	80153d4 <MEMS_SolveLinearEq>
 8016fd2:	1c6b      	adds	r3, r5, #1
 8016fd4:	2800      	cmp	r0, #0
 8016fd6:	f43e aed1 	beq.w	8015d7c <MEMS_runMagCal+0x404>
 8016fda:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 8016fde:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 8016fe2:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 8016fe6:	edd4 4a00 	vldr	s9, [r4]
 8016fea:	ed94 5a01 	vldr	s10, [r4, #4]
 8016fee:	edd4 5a02 	vldr	s11, [r4, #8]
 8016ff2:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 8016ff6:	ed94 6a03 	vldr	s12, [r4, #12]
 8016ffa:	eef0 6ae3 	vabs.f32	s13, s7
 8016ffe:	eef0 7ac3 	vabs.f32	s15, s6
 8017002:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801700a:	bfb8      	it	lt
 801700c:	eef0 7a66 	vmovlt.f32	s15, s13
 8017010:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017018:	bfb8      	it	lt
 801701a:	eef0 7a6b 	vmovlt.f32	s15, s23
 801701e:	eef0 6ac4 	vabs.f32	s13, s8
 8017022:	eef4 6ae7 	vcmpe.f32	s13, s15
 8017026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801702a:	bfb8      	it	lt
 801702c:	eef0 6a67 	vmovlt.f32	s13, s15
 8017030:	ee74 4a83 	vadd.f32	s9, s9, s6
 8017034:	ee35 5a23 	vadd.f32	s10, s10, s7
 8017038:	ee75 5a84 	vadd.f32	s11, s11, s8
 801703c:	ee36 6a07 	vadd.f32	s12, s12, s14
 8017040:	eef4 6acb 	vcmpe.f32	s13, s22
 8017044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017048:	edc4 4a00 	vstr	s9, [r4]
 801704c:	ed84 5a01 	vstr	s10, [r4, #4]
 8017050:	edc4 5a02 	vstr	s11, [r4, #8]
 8017054:	ed84 6a03 	vstr	s12, [r4, #12]
 8017058:	eef0 7ac7 	vabs.f32	s15, s14
 801705c:	d507      	bpl.n	801706e <MEMS_runMagCal+0x16f6>
 801705e:	eef4 7aea 	vcmpe.f32	s15, s21
 8017062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017066:	d502      	bpl.n	801706e <MEMS_runMagCal+0x16f6>
 8017068:	2d01      	cmp	r5, #1
 801706a:	f63e ae8b 	bhi.w	8015d84 <MEMS_runMagCal+0x40c>
 801706e:	b2dd      	uxtb	r5, r3
 8017070:	2d05      	cmp	r5, #5
 8017072:	d1a5      	bne.n	8016fc0 <MEMS_runMagCal+0x1648>
 8017074:	f7fe be86 	b.w	8015d84 <MEMS_runMagCal+0x40c>
 8017078:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 801707c:	eddb 7a1a 	vldr	s15, [fp, #104]	; 0x68
 8017080:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 8017084:	ed9f 4a29 	vldr	s8, [pc, #164]	; 801712c <MEMS_runMagCal+0x17b4>
 8017088:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801708c:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8017090:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017094:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8017098:	ee67 7a84 	vmul.f32	s15, s15, s8
 801709c:	eef4 7ae4 	vcmpe.f32	s15, s9
 80170a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170a4:	bf88      	it	hi
 80170a6:	eef0 7a64 	vmovhi.f32	s15, s9
 80170aa:	eef4 7ac5 	vcmpe.f32	s15, s10
 80170ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170b2:	bfb8      	it	lt
 80170b4:	eef0 7a45 	vmovlt.f32	s15, s10
 80170b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80170bc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80170c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170c4:	dc0e      	bgt.n	80170e4 <MEMS_runMagCal+0x176c>
 80170c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80170ca:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80170ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170d2:	dc07      	bgt.n	80170e4 <MEMS_runMagCal+0x176c>
 80170d4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80170d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80170dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170e0:	f77f ad73 	ble.w	8016bca <MEMS_runMagCal+0x1252>
 80170e4:	2300      	movs	r3, #0
 80170e6:	f88b 3000 	strb.w	r3, [fp]
 80170ea:	f7ff b880 	b.w	80161ee <MEMS_runMagCal+0x876>
 80170ee:	2300      	movs	r3, #0
 80170f0:	9307      	str	r3, [sp, #28]
 80170f2:	2301      	movs	r3, #1
 80170f4:	9303      	str	r3, [sp, #12]
 80170f6:	f7ff bb61 	b.w	80167bc <MEMS_runMagCal+0xe44>
 80170fa:	3301      	adds	r3, #1
 80170fc:	fb93 f2f7 	sdiv	r2, r3, r7
 8017100:	fb07 3212 	mls	r2, r7, r2, r3
 8017104:	930b      	str	r3, [sp, #44]	; 0x2c
 8017106:	b212      	sxth	r2, r2
 8017108:	46bc      	mov	ip, r7
 801710a:	f7ff bb75 	b.w	80167f8 <MEMS_runMagCal+0xe80>
 801710e:	bf00      	nop
 8017110:	42960000 	.word	0x42960000
 8017114:	430d0000 	.word	0x430d0000
 8017118:	41966667 	.word	0x41966667
 801711c:	433c0000 	.word	0x433c0000
 8017120:	3c2e4c41 	.word	0x3c2e4c41
 8017124:	3e99999a 	.word	0x3e99999a
 8017128:	3f666666 	.word	0x3f666666
 801712c:	3eaaaaab 	.word	0x3eaaaaab
 8017130:	358637bd 	.word	0x358637bd
 8017134:	423c0000 	.word	0x423c0000
 8017138:	3a83126f 	.word	0x3a83126f
 801713c:	00000000 	.word	0x00000000
 8017140:	eddd 7a08 	vldr	s15, [sp, #32]
 8017144:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8017138 <MEMS_runMagCal+0x17c0>
 8017148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801714c:	ee07 3a10 	vmov	s14, r3
 8017150:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017154:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8017158:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 801715c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8017160:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017168:	f63f aa67 	bhi.w	801663a <MEMS_runMagCal+0xcc2>
 801716c:	9b07      	ldr	r3, [sp, #28]
 801716e:	2b00      	cmp	r3, #0
 8017170:	f43f a83d 	beq.w	80161ee <MEMS_runMagCal+0x876>
 8017174:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8017178:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801717c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8017180:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017184:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801718c:	bf4c      	ite	mi
 801718e:	2301      	movmi	r3, #1
 8017190:	2300      	movpl	r3, #0
 8017192:	9307      	str	r3, [sp, #28]
 8017194:	f7ff ba55 	b.w	8016642 <MEMS_runMagCal+0xcca>
 8017198:	fb92 f1f0 	sdiv	r1, r2, r0
 801719c:	fb00 2211 	mls	r2, r0, r1, r2
 80171a0:	b211      	sxth	r1, r2
 80171a2:	4605      	mov	r5, r0
 80171a4:	f7ff b8da 	b.w	801635c <MEMS_runMagCal+0x9e4>
 80171a8:	2200      	movs	r2, #0
 80171aa:	23ff      	movs	r3, #255	; 0xff
 80171ac:	ee1c 0a10 	vmov	r0, s24
 80171b0:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 80171b4:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 80171b8:	eeb0 0a49 	vmov.f32	s0, s18
 80171bc:	4649      	mov	r1, r9
 80171be:	f7f7 fd11 	bl	800ebe4 <MEMS_updateMagBufferIndex>
 80171c2:	f7ff b90b 	b.w	80163dc <MEMS_runMagCal+0xa64>
 80171c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80171ca:	fb03 f60c 	mul.w	r6, r3, ip
 80171ce:	fb03 f202 	mul.w	r2, r3, r2
 80171d2:	fb03 f301 	mul.w	r3, r3, r1
 80171d6:	ee06 6a90 	vmov	s13, r6
 80171da:	ee07 2a10 	vmov	s14, r2
 80171de:	ee07 3a90 	vmov	s15, r3
 80171e2:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 8017130 <MEMS_runMagCal+0x17b8>
 80171e6:	9e05      	ldr	r6, [sp, #20]
 80171e8:	9400      	str	r4, [sp, #0]
 80171ea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80171ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80171f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171f6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80171fa:	ee27 7a06 	vmul.f32	s14, s14, s12
 80171fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017202:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8017206:	e9c5 0001 	strd	r0, r0, [r5, #4]
 801720a:	e9c5 0003 	strd	r0, r0, [r5, #12]
 801720e:	e9c5 0005 	strd	r0, r0, [r5, #20]
 8017212:	6028      	str	r0, [r5, #0]
 8017214:	ed96 0a01 	vldr	s0, [r6, #4]
 8017218:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801721c:	4642      	mov	r2, r8
 801721e:	ab0d      	add	r3, sp, #52	; 0x34
 8017220:	f10b 014a 	add.w	r1, fp, #74	; 0x4a
 8017224:	ad0e      	add	r5, sp, #56	; 0x38
 8017226:	ee1c 0a10 	vmov	r0, s24
 801722a:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 801722e:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8017232:	f7f7 fd79 	bl	800ed28 <getMagStats.constprop.0>
 8017236:	9500      	str	r5, [sp, #0]
 8017238:	ed96 0a01 	vldr	s0, [r6, #4]
 801723c:	ee1c 0a10 	vmov	r0, s24
 8017240:	aa2d      	add	r2, sp, #180	; 0xb4
 8017242:	ab0d      	add	r3, sp, #52	; 0x34
 8017244:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8017248:	f7f7 fd6e 	bl	800ed28 <getMagStats.constprop.0>
 801724c:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 8017134 <MEMS_runMagCal+0x17bc>
 8017250:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8017254:	ed95 7a00 	vldr	s14, [r5]
 8017258:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801725c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8017260:	eef0 7ae7 	vabs.f32	s15, s15
 8017264:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801726c:	d505      	bpl.n	801727a <MEMS_runMagCal+0x1902>
 801726e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017276:	f100 81fa 	bmi.w	801766e <MEMS_runMagCal+0x1cf6>
 801727a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 801727e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017286:	f140 81a8 	bpl.w	80175da <MEMS_runMagCal+0x1c62>
 801728a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801728e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017292:	9b03      	ldr	r3, [sp, #12]
 8017294:	bfb8      	it	lt
 8017296:	2302      	movlt	r3, #2
 8017298:	edd4 6a00 	vldr	s13, [r4]
 801729c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80172a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80172a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80172a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172ac:	f57e af9f 	bpl.w	80161ee <MEMS_runMagCal+0x876>
 80172b0:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 80172b4:	429a      	cmp	r2, r3
 80172b6:	f63e af9a 	bhi.w	80161ee <MEMS_runMagCal+0x876>
 80172ba:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80172be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80172c2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80172c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172ca:	d40e      	bmi.n	80172ea <MEMS_runMagCal+0x1972>
 80172cc:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80172d0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80172d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172d8:	f140 80d4 	bpl.w	8017484 <MEMS_runMagCal+0x1b0c>
 80172dc:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
 80172e0:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80172e4:	429a      	cmp	r2, r3
 80172e6:	f080 80cd 	bcs.w	8017484 <MEMS_runMagCal+0x1b0c>
 80172ea:	9b05      	ldr	r3, [sp, #20]
 80172ec:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 80172f0:	f9bb 104c 	ldrsh.w	r1, [fp, #76]	; 0x4c
 80172f4:	f9bd 7086 	ldrsh.w	r7, [sp, #134]	; 0x86
 80172f8:	f9bb 004a 	ldrsh.w	r0, [fp, #74]	; 0x4a
 80172fc:	edd3 5a01 	vldr	s11, [r3, #4]
 8017300:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
 8017304:	f9bb 204e 	ldrsh.w	r2, [fp, #78]	; 0x4e
 8017308:	1b8b      	subs	r3, r1, r6
 801730a:	eba0 0c07 	sub.w	ip, r0, r7
 801730e:	2b00      	cmp	r3, #0
 8017310:	bfb8      	it	lt
 8017312:	425b      	neglt	r3, r3
 8017314:	f1bc 0f00 	cmp.w	ip, #0
 8017318:	bfb8      	it	lt
 801731a:	f1cc 0c00 	rsblt	ip, ip, #0
 801731e:	4563      	cmp	r3, ip
 8017320:	bfb8      	it	lt
 8017322:	4663      	movlt	r3, ip
 8017324:	eba2 0c04 	sub.w	ip, r2, r4
 8017328:	f1bc 0f00 	cmp.w	ip, #0
 801732c:	b21b      	sxth	r3, r3
 801732e:	bfb8      	it	lt
 8017330:	f1cc 0c00 	rsblt	ip, ip, #0
 8017334:	4563      	cmp	r3, ip
 8017336:	bfb8      	it	lt
 8017338:	4663      	movlt	r3, ip
 801733a:	b21b      	sxth	r3, r3
 801733c:	ee07 3a90 	vmov	s15, r3
 8017340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017344:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8017348:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801734c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017354:	f140 8096 	bpl.w	8017484 <MEMS_runMagCal+0x1b0c>
 8017358:	ee37 7a26 	vadd.f32	s14, s14, s13
 801735c:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 8017360:	ee86 2a87 	vdiv.f32	s4, s13, s14
 8017364:	ee04 3a90 	vmov	s9, r3
 8017368:	f8bb 3052 	ldrh.w	r3, [fp, #82]	; 0x52
 801736c:	ee05 3a10 	vmov	s10, r3
 8017370:	f8bb 3054 	ldrh.w	r3, [fp, #84]	; 0x54
 8017374:	ee07 0a90 	vmov	s15, r0
 8017378:	ee05 3a90 	vmov	s11, r3
 801737c:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8017380:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8017384:	ee36 4a42 	vsub.f32	s8, s12, s4
 8017388:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801738c:	ee06 3a10 	vmov	s12, r3
 8017390:	ee03 7a90 	vmov	s7, r7
 8017394:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8017398:	ee07 1a90 	vmov	s15, r1
 801739c:	ee00 3a90 	vmov	s1, r3
 80173a0:	ee66 6a84 	vmul.f32	s13, s13, s8
 80173a4:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 80173a8:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80173ac:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 80173b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80173b4:	ee64 4a84 	vmul.f32	s9, s9, s8
 80173b8:	ee03 6a90 	vmov	s7, r6
 80173bc:	eee2 6a22 	vfma.f32	s13, s4, s5
 80173c0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80173c4:	ee07 2a90 	vmov	s15, r2
 80173c8:	ee01 3a10 	vmov	s2, r3
 80173cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80173d0:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 80173d4:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 80173d8:	eee2 4a20 	vfma.f32	s9, s4, s1
 80173dc:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80173e0:	ee01 3a90 	vmov	s3, r3
 80173e4:	ee25 5a04 	vmul.f32	s10, s10, s8
 80173e8:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80173ec:	eea2 7a03 	vfma.f32	s14, s4, s6
 80173f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80173f4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80173f8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80173fc:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8017400:	ee03 4a90 	vmov	s7, r4
 8017404:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8017408:	ee67 7a84 	vmul.f32	s15, s15, s8
 801740c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8017410:	ee26 6a04 	vmul.f32	s12, s12, s8
 8017414:	ee16 2a90 	vmov	r2, s13
 8017418:	ee04 3a10 	vmov	s8, r3
 801741c:	eea2 5a01 	vfma.f32	s10, s4, s2
 8017420:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 8017424:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8017428:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 801742c:	eee2 7a23 	vfma.f32	s15, s4, s7
 8017430:	ee14 2a90 	vmov	r2, s9
 8017434:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8017438:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801743c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017440:	eee2 5a21 	vfma.f32	s11, s4, s3
 8017444:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 8017448:	eea2 6a04 	vfma.f32	s12, s4, s8
 801744c:	ee17 2a10 	vmov	r2, s14
 8017450:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 8017454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017458:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 801745c:	ee15 2a10 	vmov	r2, s10
 8017460:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 8017464:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8017468:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 801746c:	ee17 2a90 	vmov	r2, s15
 8017470:	ee16 3a10 	vmov	r3, s12
 8017474:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 8017478:	ee15 2a90 	vmov	r2, s11
 801747c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8017480:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 8017484:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8017486:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 801748a:	f7fe bda2 	b.w	8015fd2 <MEMS_runMagCal+0x65a>
 801748e:	ee1c 0a10 	vmov	r0, s24
 8017492:	eeb0 0a49 	vmov.f32	s0, s18
 8017496:	4649      	mov	r1, r9
 8017498:	f7f7 fba4 	bl	800ebe4 <MEMS_updateMagBufferIndex>
 801749c:	f7ff b89f 	b.w	80165de <MEMS_runMagCal+0xc66>
 80174a0:	eddd 7a08 	vldr	s15, [sp, #32]
 80174a4:	ed1f 7adc 	vldr	s14, [pc, #-880]	; 8017138 <MEMS_runMagCal+0x17c0>
 80174a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80174ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80174b0:	e660      	b.n	8017174 <MEMS_runMagCal+0x17fc>
 80174b2:	ed5f 6ade 	vldr	s13, [pc, #-888]	; 801713c <MEMS_runMagCal+0x17c4>
 80174b6:	1c6b      	adds	r3, r5, #1
 80174b8:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80174bc:	ad0e      	add	r5, sp, #56	; 0x38
 80174be:	fb93 f1f6 	sdiv	r1, r3, r6
 80174c2:	fa1f fc86 	uxth.w	ip, r6
 80174c6:	fb06 3311 	mls	r3, r6, r1, r3
 80174ca:	edc5 6a00 	vstr	s13, [r5]
 80174ce:	2e00      	cmp	r6, #0
 80174d0:	f000 80e1 	beq.w	8017696 <MEMS_runMagCal+0x1d1e>
 80174d4:	b29b      	uxth	r3, r3
 80174d6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80174da:	1c58      	adds	r0, r3, #1
 80174dc:	eeb0 6a66 	vmov.f32	s12, s13
 80174e0:	fa10 fc8c 	uxtah	ip, r0, ip
 80174e4:	f241 2e5c 	movw	lr, #4700	; 0x125c
 80174e8:	4619      	mov	r1, r3
 80174ea:	e000      	b.n	80174ee <MEMS_runMagCal+0x1b76>
 80174ec:	3001      	adds	r0, #1
 80174ee:	fbb1 f3f6 	udiv	r3, r1, r6
 80174f2:	fb06 1313 	mls	r3, r6, r3, r1
 80174f6:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80174fa:	8a99      	ldrh	r1, [r3, #20]
 80174fc:	4571      	cmp	r1, lr
 80174fe:	f5a1 5392 	sub.w	r3, r1, #4672	; 0x1240
 8017502:	f1a3 031c 	sub.w	r3, r3, #28
 8017506:	bf98      	it	ls
 8017508:	ebae 0301 	subls.w	r3, lr, r1
 801750c:	b29b      	uxth	r3, r3
 801750e:	fb03 f303 	mul.w	r3, r3, r3
 8017512:	ee07 1a10 	vmov	s14, r1
 8017516:	ee07 3a90 	vmov	s15, r3
 801751a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801751e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017522:	4584      	cmp	ip, r0
 8017524:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8017528:	ee36 6a07 	vadd.f32	s12, s12, s14
 801752c:	4601      	mov	r1, r0
 801752e:	d1dd      	bne.n	80174ec <MEMS_runMagCal+0x1b74>
 8017530:	ee07 4a90 	vmov	s15, r4
 8017534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017538:	eddf 5ae6 	vldr	s11, [pc, #920]	; 80178d4 <MEMS_runMagCal+0x1f5c>
 801753c:	ed9f 5ae6 	vldr	s10, [pc, #920]	; 80178d8 <MEMS_runMagCal+0x1f60>
 8017540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017544:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8017548:	eef1 7ac7 	vsqrt.f32	s15, s14
 801754c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8017550:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017554:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8017558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801755c:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8017560:	edc5 7a00 	vstr	s15, [r5]
 8017564:	dd47      	ble.n	80175f6 <MEMS_runMagCal+0x1c7e>
 8017566:	eddf 7add 	vldr	s15, [pc, #884]	; 80178dc <MEMS_runMagCal+0x1f64>
 801756a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801756e:	2302      	movs	r3, #2
 8017570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017574:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8017578:	f77e aead 	ble.w	80162d6 <MEMS_runMagCal+0x95e>
 801757c:	2301      	movs	r3, #1
 801757e:	f88b 3001 	strb.w	r3, [fp, #1]
 8017582:	f7fe bea8 	b.w	80162d6 <MEMS_runMagCal+0x95e>
 8017586:	ee1c 0a10 	vmov	r0, s24
 801758a:	eeb0 0a49 	vmov.f32	s0, s18
 801758e:	4649      	mov	r1, r9
 8017590:	f7f7 fb28 	bl	800ebe4 <MEMS_updateMagBufferIndex>
 8017594:	f7fe bf0d 	b.w	80163b2 <MEMS_runMagCal+0xa3a>
 8017598:	9b02      	ldr	r3, [sp, #8]
 801759a:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 801759e:	f8db 100c 	ldr.w	r1, [fp, #12]
 80175a2:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 80175a6:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 80175aa:	4413      	add	r3, r2
 80175ac:	4299      	cmp	r1, r3
 80175ae:	f4bf ad99 	bcs.w	80170e4 <MEMS_runMagCal+0x176c>
 80175b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80175b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80175b8:	fb03 f301 	mul.w	r3, r3, r1
 80175bc:	3364      	adds	r3, #100	; 0x64
 80175be:	4293      	cmp	r3, r2
 80175c0:	bf38      	it	cc
 80175c2:	4613      	movcc	r3, r2
 80175c4:	2200      	movs	r2, #0
 80175c6:	f8cb 300c 	str.w	r3, [fp, #12]
 80175ca:	f88b 2000 	strb.w	r2, [fp]
 80175ce:	f7fe be0e 	b.w	80161ee <MEMS_runMagCal+0x876>
 80175d2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80175d6:	f7ff ba6f 	b.w	8016ab8 <MEMS_runMagCal+0x1140>
 80175da:	9b03      	ldr	r3, [sp, #12]
 80175dc:	e65c      	b.n	8017298 <MEMS_runMagCal+0x1920>
 80175de:	4619      	mov	r1, r3
 80175e0:	9b02      	ldr	r3, [sp, #8]
 80175e2:	3301      	adds	r3, #1
 80175e4:	fb93 f2f1 	sdiv	r2, r3, r1
 80175e8:	fb01 3212 	mls	r2, r1, r2, r3
 80175ec:	9304      	str	r3, [sp, #16]
 80175ee:	b212      	sxth	r2, r2
 80175f0:	4689      	mov	r9, r1
 80175f2:	f7ff ba11 	b.w	8016a18 <MEMS_runMagCal+0x10a0>
 80175f6:	eddf 7aba 	vldr	s15, [pc, #744]	; 80178e0 <MEMS_runMagCal+0x1f68>
 80175fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80175fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017602:	eddf 7ab6 	vldr	s15, [pc, #728]	; 80178dc <MEMS_runMagCal+0x1f64>
 8017606:	d434      	bmi.n	8017672 <MEMS_runMagCal+0x1cfa>
 8017608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801760c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017610:	bfc4      	itt	gt
 8017612:	2301      	movgt	r3, #1
 8017614:	f88b 3001 	strbgt.w	r3, [fp, #1]
 8017618:	f7ff b892 	b.w	8016740 <MEMS_runMagCal+0xdc8>
 801761c:	9b05      	ldr	r3, [sp, #20]
 801761e:	f89b 1011 	ldrb.w	r1, [fp, #17]
 8017622:	ed93 0a01 	vldr	s0, [r3, #4]
 8017626:	f7fe bd84 	b.w	8016132 <MEMS_runMagCal+0x7ba>
 801762a:	2303      	movs	r3, #3
 801762c:	9303      	str	r3, [sp, #12]
 801762e:	f7fe bdd4 	b.w	80161da <MEMS_runMagCal+0x862>
 8017632:	4619      	mov	r1, r3
 8017634:	f7ff ba78 	b.w	8016b28 <MEMS_runMagCal+0x11b0>
 8017638:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 801763c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8017640:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017648:	f73f ad4c 	bgt.w	80170e4 <MEMS_runMagCal+0x176c>
 801764c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017650:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8017654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017658:	f73f ad44 	bgt.w	80170e4 <MEMS_runMagCal+0x176c>
 801765c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8017660:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8017664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017668:	f77f aaaf 	ble.w	8016bca <MEMS_runMagCal+0x1252>
 801766c:	e53a      	b.n	80170e4 <MEMS_runMagCal+0x176c>
 801766e:	2303      	movs	r3, #3
 8017670:	e612      	b.n	8017298 <MEMS_runMagCal+0x1920>
 8017672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017676:	2300      	movs	r3, #0
 8017678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801767c:	f88b 3001 	strb.w	r3, [fp, #1]
 8017680:	f04f 0103 	mov.w	r1, #3
 8017684:	bfc8      	it	gt
 8017686:	2301      	movgt	r3, #1
 8017688:	f88b 1058 	strb.w	r1, [fp, #88]	; 0x58
 801768c:	bfc8      	it	gt
 801768e:	f88b 3001 	strbgt.w	r3, [fp, #1]
 8017692:	f7ff b858 	b.w	8016746 <MEMS_runMagCal+0xdce>
 8017696:	2303      	movs	r3, #3
 8017698:	f88b c001 	strb.w	ip, [fp, #1]
 801769c:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80176a0:	f7ff b851 	b.w	8016746 <MEMS_runMagCal+0xdce>
 80176a4:	9b04      	ldr	r3, [sp, #16]
 80176a6:	fb93 f7f9 	sdiv	r7, r3, r9
 80176aa:	fb09 3717 	mls	r7, r9, r7, r3
 80176ae:	b23f      	sxth	r7, r7
 80176b0:	f7ff ba9a 	b.w	8016be8 <MEMS_runMagCal+0x1270>
 80176b4:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80178e4 <MEMS_runMagCal+0x1f6c>
 80176b8:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80176bc:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80176c0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80176c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80176c8:	ee87 0a08 	vdiv.f32	s0, s14, s16
 80176cc:	ee17 2a90 	vmov	r2, s15
 80176d0:	b291      	uxth	r1, r2
 80176d2:	b113      	cbz	r3, 80176da <MEMS_runMagCal+0x1d62>
 80176d4:	3b01      	subs	r3, #1
 80176d6:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 80176da:	ee1c 0a10 	vmov	r0, s24
 80176de:	f7f7 fa81 	bl	800ebe4 <MEMS_updateMagBufferIndex>
 80176e2:	eddd 7a08 	vldr	s15, [sp, #32]
 80176e6:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80176ea:	eddf 7a7f 	vldr	s15, [pc, #508]	; 80178e8 <MEMS_runMagCal+0x1f70>
 80176ee:	ee20 0a27 	vmul.f32	s0, s0, s15
 80176f2:	f001 fca5 	bl	8019040 <roundf>
 80176f6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80176fa:	2300      	movs	r3, #0
 80176fc:	ed8b 0a01 	vstr	s0, [fp, #4]
 8017700:	f88b 3000 	strb.w	r3, [fp]
 8017704:	f7fe bd73 	b.w	80161ee <MEMS_runMagCal+0x876>
 8017708:	fb93 f2f6 	sdiv	r2, r3, r6
 801770c:	fb06 3312 	mls	r3, r6, r2, r3
 8017710:	b21a      	sxth	r2, r3
 8017712:	4630      	mov	r0, r6
 8017714:	f7ff bb00 	b.w	8016d18 <MEMS_runMagCal+0x13a0>
 8017718:	ed9b 0a17 	vldr	s0, [fp, #92]	; 0x5c
 801771c:	f001 fc90 	bl	8019040 <roundf>
 8017720:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017724:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8017728:	ee17 3a90 	vmov	r3, s15
 801772c:	ed9b 0a18 	vldr	s0, [fp, #96]	; 0x60
 8017730:	f8a9 3000 	strh.w	r3, [r9]
 8017734:	f001 fc84 	bl	8019040 <roundf>
 8017738:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801773c:	ed9b 0a19 	vldr	s0, [fp, #100]	; 0x64
 8017740:	ee17 3a90 	vmov	r3, s15
 8017744:	f8a9 3002 	strh.w	r3, [r9, #2]
 8017748:	f001 fc7a 	bl	8019040 <roundf>
 801774c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017750:	ac0f      	add	r4, sp, #60	; 0x3c
 8017752:	ee17 5a90 	vmov	r5, s15
 8017756:	9400      	str	r4, [sp, #0]
 8017758:	ee1c 0a10 	vmov	r0, s24
 801775c:	4649      	mov	r1, r9
 801775e:	ab10      	add	r3, sp, #64	; 0x40
 8017760:	eeb0 0a48 	vmov.f32	s0, s16
 8017764:	f10b 0268 	add.w	r2, fp, #104	; 0x68
 8017768:	f8a9 5004 	strh.w	r5, [r9, #4]
 801776c:	f7f7 fadc 	bl	800ed28 <getMagStats.constprop.0>
 8017770:	ed94 7a00 	vldr	s14, [r4]
 8017774:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80178ec <MEMS_runMagCal+0x1f74>
 8017778:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801777c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017780:	d50e      	bpl.n	80177a0 <MEMS_runMagCal+0x1e28>
 8017782:	b968      	cbnz	r0, 80177a0 <MEMS_runMagCal+0x1e28>
 8017784:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8017788:	b32b      	cbz	r3, 80177d6 <MEMS_runMagCal+0x1e5e>
 801778a:	f89b 3049 	ldrb.w	r3, [fp, #73]	; 0x49
 801778e:	ee07 3a90 	vmov	s15, r3
 8017792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017796:	eef4 8ae7 	vcmpe.f32	s17, s15
 801779a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801779e:	dc1a      	bgt.n	80177d6 <MEMS_runMagCal+0x1e5e>
 80177a0:	2300      	movs	r3, #0
 80177a2:	f8c9 3000 	str.w	r3, [r9]
 80177a6:	f8a9 3004 	strh.w	r3, [r9, #4]
 80177aa:	f7ff ba97 	b.w	8016cdc <MEMS_runMagCal+0x1364>
 80177ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80177b2:	f7ff bbea 	b.w	8016f8a <MEMS_runMagCal+0x1612>
 80177b6:	eddf 9a4e 	vldr	s19, [pc, #312]	; 80178f0 <MEMS_runMagCal+0x1f78>
 80177ba:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 80177be:	ed9d aa1e 	vldr	s20, [sp, #120]	; 0x78
 80177c2:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 80177c6:	ee29 9aa4 	vmul.f32	s18, s19, s9
 80177ca:	ee29 aa8a 	vmul.f32	s20, s19, s20
 80177ce:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80177d2:	f7ff bb2e 	b.w	8016e32 <MEMS_runMagCal+0x14ba>
 80177d6:	eddd 7a08 	vldr	s15, [sp, #32]
 80177da:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80177de:	eddf 7a42 	vldr	s15, [pc, #264]	; 80178e8 <MEMS_runMagCal+0x1f70>
 80177e2:	2303      	movs	r3, #3
 80177e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80177e8:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80177ec:	e781      	b.n	80176f2 <MEMS_runMagCal+0x1d7a>
 80177ee:	eddf 6a41 	vldr	s13, [pc, #260]	; 80178f4 <MEMS_runMagCal+0x1f7c>
 80177f2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80177f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177fa:	f77e ab1b 	ble.w	8015e34 <MEMS_runMagCal+0x4bc>
 80177fe:	f7fe bb21 	b.w	8015e44 <MEMS_runMagCal+0x4cc>
 8017802:	2224      	movs	r2, #36	; 0x24
 8017804:	2100      	movs	r1, #0
 8017806:	a82d      	add	r0, sp, #180	; 0xb4
 8017808:	f000 fe98 	bl	801853c <memset>
 801780c:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80178f8 <MEMS_runMagCal+0x1f80>
 8017810:	eec7 9a89 	vdiv.f32	s19, s15, s18
 8017814:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 8017818:	4627      	mov	r7, r4
 801781a:	ae2d      	add	r6, sp, #180	; 0xb4
 801781c:	2500      	movs	r5, #0
 801781e:	3501      	adds	r5, #1
 8017820:	ecb7 0a01 	vldmia	r7!, {s0}
 8017824:	ee28 0a80 	vmul.f32	s0, s17, s0
 8017828:	f001 fc0a 	bl	8019040 <roundf>
 801782c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017830:	4633      	mov	r3, r6
 8017832:	edc3 9a00 	vstr	s19, [r3]
 8017836:	ee10 3a10 	vmov	r3, s0
 801783a:	2d03      	cmp	r5, #3
 801783c:	f829 3b02 	strh.w	r3, [r9], #2
 8017840:	f106 0610 	add.w	r6, r6, #16
 8017844:	d1eb      	bne.n	801781e <MEMS_runMagCal+0x1ea6>
 8017846:	ad12      	add	r5, sp, #72	; 0x48
 8017848:	9500      	str	r5, [sp, #0]
 801784a:	ab2b      	add	r3, sp, #172	; 0xac
 801784c:	eeb0 0a48 	vmov.f32	s0, s16
 8017850:	ee1c 0a10 	vmov	r0, s24
 8017854:	a915      	add	r1, sp, #84	; 0x54
 8017856:	aa2d      	add	r2, sp, #180	; 0xb4
 8017858:	f7f7 fa66 	bl	800ed28 <getMagStats.constprop.0>
 801785c:	eddf 3a26 	vldr	s7, [pc, #152]	; 80178f8 <MEMS_runMagCal+0x1f80>
 8017860:	ed94 4a03 	vldr	s8, [r4, #12]
 8017864:	edd5 7a00 	vldr	s15, [r5]
 8017868:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 801786c:	edd4 6a06 	vldr	s13, [r4, #24]
 8017870:	edd4 4a00 	vldr	s9, [r4]
 8017874:	ed94 5a01 	vldr	s10, [r4, #4]
 8017878:	edd4 5a02 	vldr	s11, [r4, #8]
 801787c:	ee83 7a84 	vdiv.f32	s14, s7, s8
 8017880:	ad2e      	add	r5, sp, #184	; 0xb8
 8017882:	2300      	movs	r3, #0
 8017884:	e9c5 3300 	strd	r3, r3, [r5]
 8017888:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801788c:	60ab      	str	r3, [r5, #8]
 801788e:	61ab      	str	r3, [r5, #24]
 8017890:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017894:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8017898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801789c:	ee84 0a88 	vdiv.f32	s0, s9, s16
 80178a0:	eec5 9a08 	vdiv.f32	s19, s10, s16
 80178a4:	ee85 aa88 	vdiv.f32	s20, s11, s16
 80178a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80178ac:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80178b0:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 80178b4:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 80178b8:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 80178bc:	d405      	bmi.n	80178ca <MEMS_runMagCal+0x1f52>
 80178be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80178c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178c6:	f57e aa9b 	bpl.w	8015e00 <MEMS_runMagCal+0x488>
 80178ca:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 80178fc <MEMS_runMagCal+0x1f84>
 80178ce:	f7fe ba9d 	b.w	8015e0c <MEMS_runMagCal+0x494>
 80178d2:	bf00      	nop
 80178d4:	3c23d70a 	.word	0x3c23d70a
 80178d8:	4b095440 	.word	0x4b095440
 80178dc:	481c4000 	.word	0x481c4000
 80178e0:	471c4000 	.word	0x471c4000
 80178e4:	433d0000 	.word	0x433d0000
 80178e8:	3a83126f 	.word	0x3a83126f
 80178ec:	3ff4cccd 	.word	0x3ff4cccd
 80178f0:	7f800000 	.word	0x7f800000
 80178f4:	3ee66666 	.word	0x3ee66666
 80178f8:	423c0000 	.word	0x423c0000
 80178fc:	00000000 	.word	0x00000000
 8017900:	f644 42f4 	movw	r2, #19700	; 0x4cf4
 8017904:	4293      	cmp	r3, r2
 8017906:	f67e acac 	bls.w	8016262 <MEMS_runMagCal+0x8ea>
 801790a:	f7fe bca0 	b.w	801624e <MEMS_runMagCal+0x8d6>
 801790e:	bf00      	nop

08017910 <MotionFX_GetStateSize>:
 8017910:	f44f 6018 	mov.w	r0, #2432	; 0x980
 8017914:	4770      	bx	lr
 8017916:	bf00      	nop

08017918 <MotionFX_initialize>:
 8017918:	4a3b      	ldr	r2, [pc, #236]	; (8017a08 <MotionFX_initialize+0xf0>)
 801791a:	493c      	ldr	r1, [pc, #240]	; (8017a0c <MotionFX_initialize+0xf4>)
 801791c:	6813      	ldr	r3, [r2, #0]
 801791e:	f023 0301 	bic.w	r3, r3, #1
 8017922:	b530      	push	{r4, r5, lr}
 8017924:	6013      	str	r3, [r2, #0]
 8017926:	680b      	ldr	r3, [r1, #0]
 8017928:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 801792c:	4013      	ands	r3, r2
 801792e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8017932:	42ab      	cmp	r3, r5
 8017934:	b085      	sub	sp, #20
 8017936:	4604      	mov	r4, r0
 8017938:	d013      	beq.n	8017962 <MotionFX_initialize+0x4a>
 801793a:	680b      	ldr	r3, [r1, #0]
 801793c:	f24c 2170 	movw	r1, #49776	; 0xc270
 8017940:	4013      	ands	r3, r2
 8017942:	428b      	cmp	r3, r1
 8017944:	d00d      	beq.n	8017962 <MotionFX_initialize+0x4a>
 8017946:	4b32      	ldr	r3, [pc, #200]	; (8017a10 <MotionFX_initialize+0xf8>)
 8017948:	2201      	movs	r2, #1
 801794a:	601a      	str	r2, [r3, #0]
 801794c:	681a      	ldr	r2, [r3, #0]
 801794e:	2a00      	cmp	r2, #0
 8017950:	d1fc      	bne.n	801794c <MotionFX_initialize+0x34>
 8017952:	4b30      	ldr	r3, [pc, #192]	; (8017a14 <MotionFX_initialize+0xfc>)
 8017954:	4a30      	ldr	r2, [pc, #192]	; (8017a18 <MotionFX_initialize+0x100>)
 8017956:	601a      	str	r2, [r3, #0]
 8017958:	681a      	ldr	r2, [r3, #0]
 801795a:	4b30      	ldr	r3, [pc, #192]	; (8017a1c <MotionFX_initialize+0x104>)
 801795c:	429a      	cmp	r2, r3
 801795e:	d01f      	beq.n	80179a0 <MotionFX_initialize+0x88>
 8017960:	e7fe      	b.n	8017960 <MotionFX_initialize+0x48>
 8017962:	4b2f      	ldr	r3, [pc, #188]	; (8017a20 <MotionFX_initialize+0x108>)
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	2b00      	cmp	r3, #0
 8017968:	d1ed      	bne.n	8017946 <MotionFX_initialize+0x2e>
 801796a:	4a2e      	ldr	r2, [pc, #184]	; (8017a24 <MotionFX_initialize+0x10c>)
 801796c:	6813      	ldr	r3, [r2, #0]
 801796e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017972:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8017976:	d006      	beq.n	8017986 <MotionFX_initialize+0x6e>
 8017978:	6813      	ldr	r3, [r2, #0]
 801797a:	f240 4283 	movw	r2, #1155	; 0x483
 801797e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017982:	4293      	cmp	r3, r2
 8017984:	d1df      	bne.n	8017946 <MotionFX_initialize+0x2e>
 8017986:	4b28      	ldr	r3, [pc, #160]	; (8017a28 <MotionFX_initialize+0x110>)
 8017988:	2201      	movs	r2, #1
 801798a:	601a      	str	r2, [r3, #0]
 801798c:	681a      	ldr	r2, [r3, #0]
 801798e:	2a00      	cmp	r2, #0
 8017990:	d1fc      	bne.n	801798c <MotionFX_initialize+0x74>
 8017992:	4b26      	ldr	r3, [pc, #152]	; (8017a2c <MotionFX_initialize+0x114>)
 8017994:	4a20      	ldr	r2, [pc, #128]	; (8017a18 <MotionFX_initialize+0x100>)
 8017996:	601a      	str	r2, [r3, #0]
 8017998:	681a      	ldr	r2, [r3, #0]
 801799a:	4b20      	ldr	r3, [pc, #128]	; (8017a1c <MotionFX_initialize+0x104>)
 801799c:	429a      	cmp	r2, r3
 801799e:	d1df      	bne.n	8017960 <MotionFX_initialize+0x48>
 80179a0:	4b23      	ldr	r3, [pc, #140]	; (8017a30 <MotionFX_initialize+0x118>)
 80179a2:	4a24      	ldr	r2, [pc, #144]	; (8017a34 <MotionFX_initialize+0x11c>)
 80179a4:	9301      	str	r3, [sp, #4]
 80179a6:	2501      	movs	r5, #1
 80179a8:	4620      	mov	r0, r4
 80179aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80179ae:	7115      	strb	r5, [r2, #4]
 80179b0:	f7f7 faa0 	bl	800eef4 <MFX_emptyAttitude>
 80179b4:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 80179b8:	a901      	add	r1, sp, #4
 80179ba:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80179be:	f7f6 fdc3 	bl	800e548 <updateOrientation>
 80179c2:	a903      	add	r1, sp, #12
 80179c4:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80179c8:	f7f6 fdbe 	bl	800e548 <updateOrientation>
 80179cc:	a902      	add	r1, sp, #8
 80179ce:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80179d2:	f7f6 fdb9 	bl	800e548 <updateOrientation>
 80179d6:	4818      	ldr	r0, [pc, #96]	; (8017a38 <MotionFX_initialize+0x120>)
 80179d8:	4918      	ldr	r1, [pc, #96]	; (8017a3c <MotionFX_initialize+0x124>)
 80179da:	4a19      	ldr	r2, [pc, #100]	; (8017a40 <MotionFX_initialize+0x128>)
 80179dc:	4b19      	ldr	r3, [pc, #100]	; (8017a44 <MotionFX_initialize+0x12c>)
 80179de:	7365      	strb	r5, [r4, #13]
 80179e0:	4d19      	ldr	r5, [pc, #100]	; (8017a48 <MotionFX_initialize+0x130>)
 80179e2:	62a0      	str	r0, [r4, #40]	; 0x28
 80179e4:	6361      	str	r1, [r4, #52]	; 0x34
 80179e6:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80179ea:	2100      	movs	r1, #0
 80179ec:	61a2      	str	r2, [r4, #24]
 80179ee:	61e3      	str	r3, [r4, #28]
 80179f0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80179f4:	f240 1301 	movw	r3, #257	; 0x101
 80179f8:	6225      	str	r5, [r4, #32]
 80179fa:	62e0      	str	r0, [r4, #44]	; 0x2c
 80179fc:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 8017a00:	80a2      	strh	r2, [r4, #4]
 8017a02:	81e3      	strh	r3, [r4, #14]
 8017a04:	b005      	add	sp, #20
 8017a06:	bd30      	pop	{r4, r5, pc}
 8017a08:	e0002000 	.word	0xe0002000
 8017a0c:	e000ed00 	.word	0xe000ed00
 8017a10:	40023008 	.word	0x40023008
 8017a14:	40023000 	.word	0x40023000
 8017a18:	f407a5c2 	.word	0xf407a5c2
 8017a1c:	b5e8b5cd 	.word	0xb5e8b5cd
 8017a20:	e0042000 	.word	0xe0042000
 8017a24:	5c001000 	.word	0x5c001000
 8017a28:	58024c08 	.word	0x58024c08
 8017a2c:	58024c00 	.word	0x58024c00
 8017a30:	00756e65 	.word	0x00756e65
 8017a34:	20000218 	.word	0x20000218
 8017a38:	3f666666 	.word	0x3f666666
 8017a3c:	3f2ac083 	.word	0x3f2ac083
 8017a40:	3a51b717 	.word	0x3a51b717
 8017a44:	3a378034 	.word	0x3a378034
 8017a48:	3b378034 	.word	0x3b378034

08017a4c <MotionFX_setKnobs>:
 8017a4c:	4b23      	ldr	r3, [pc, #140]	; (8017adc <MotionFX_setKnobs+0x90>)
 8017a4e:	791b      	ldrb	r3, [r3, #4]
 8017a50:	b903      	cbnz	r3, 8017a54 <MotionFX_setKnobs+0x8>
 8017a52:	4770      	bx	lr
 8017a54:	2900      	cmp	r1, #0
 8017a56:	d0fc      	beq.n	8017a52 <MotionFX_setKnobs+0x6>
 8017a58:	b570      	push	{r4, r5, r6, lr}
 8017a5a:	4604      	mov	r4, r0
 8017a5c:	684a      	ldr	r2, [r1, #4]
 8017a5e:	6808      	ldr	r0, [r1, #0]
 8017a60:	688b      	ldr	r3, [r1, #8]
 8017a62:	6363      	str	r3, [r4, #52]	; 0x34
 8017a64:	62a0      	str	r0, [r4, #40]	; 0x28
 8017a66:	62e2      	str	r2, [r4, #44]	; 0x2c
 8017a68:	7b0b      	ldrb	r3, [r1, #12]
 8017a6a:	7163      	strb	r3, [r4, #5]
 8017a6c:	6908      	ldr	r0, [r1, #16]
 8017a6e:	694a      	ldr	r2, [r1, #20]
 8017a70:	698b      	ldr	r3, [r1, #24]
 8017a72:	6223      	str	r3, [r4, #32]
 8017a74:	61e2      	str	r2, [r4, #28]
 8017a76:	61a0      	str	r0, [r4, #24]
 8017a78:	7f0b      	ldrb	r3, [r1, #28]
 8017a7a:	7123      	strb	r3, [r4, #4]
 8017a7c:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8017a80:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8017a84:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8017a86:	f884 3978 	strb.w	r3, [r4, #2424]	; 0x978
 8017a8a:	460a      	mov	r2, r1
 8017a8c:	460b      	mov	r3, r1
 8017a8e:	f831 6f1d 	ldrh.w	r6, [r1, #29]!
 8017a92:	f832 5f21 	ldrh.w	r5, [r2, #33]!
 8017a96:	f833 0f25 	ldrh.w	r0, [r3, #37]!
 8017a9a:	7889      	ldrb	r1, [r1, #2]
 8017a9c:	7892      	ldrb	r2, [r2, #2]
 8017a9e:	789b      	ldrb	r3, [r3, #2]
 8017aa0:	b084      	sub	sp, #16
 8017aa2:	f88d 1006 	strb.w	r1, [sp, #6]
 8017aa6:	f8ad 000c 	strh.w	r0, [sp, #12]
 8017aaa:	a901      	add	r1, sp, #4
 8017aac:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8017ab0:	f88d 200a 	strb.w	r2, [sp, #10]
 8017ab4:	f8ad 6004 	strh.w	r6, [sp, #4]
 8017ab8:	f8ad 5008 	strh.w	r5, [sp, #8]
 8017abc:	f88d 300e 	strb.w	r3, [sp, #14]
 8017ac0:	f7f6 fd42 	bl	800e548 <updateOrientation>
 8017ac4:	a903      	add	r1, sp, #12
 8017ac6:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017aca:	f7f6 fd3d 	bl	800e548 <updateOrientation>
 8017ace:	a902      	add	r1, sp, #8
 8017ad0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017ad4:	f7f6 fd38 	bl	800e548 <updateOrientation>
 8017ad8:	b004      	add	sp, #16
 8017ada:	bd70      	pop	{r4, r5, r6, pc}
 8017adc:	20000218 	.word	0x20000218

08017ae0 <MotionFX_getKnobs>:
 8017ae0:	4b1c      	ldr	r3, [pc, #112]	; (8017b54 <MotionFX_getKnobs+0x74>)
 8017ae2:	791b      	ldrb	r3, [r3, #4]
 8017ae4:	b903      	cbnz	r3, 8017ae8 <MotionFX_getKnobs+0x8>
 8017ae6:	4770      	bx	lr
 8017ae8:	460a      	mov	r2, r1
 8017aea:	2900      	cmp	r1, #0
 8017aec:	d0fb      	beq.n	8017ae6 <MotionFX_getKnobs+0x6>
 8017aee:	b510      	push	{r4, lr}
 8017af0:	4604      	mov	r4, r0
 8017af2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017af4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8017af6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017af8:	6093      	str	r3, [r2, #8]
 8017afa:	6010      	str	r0, [r2, #0]
 8017afc:	6051      	str	r1, [r2, #4]
 8017afe:	7963      	ldrb	r3, [r4, #5]
 8017b00:	7313      	strb	r3, [r2, #12]
 8017b02:	69a0      	ldr	r0, [r4, #24]
 8017b04:	69e1      	ldr	r1, [r4, #28]
 8017b06:	6a23      	ldr	r3, [r4, #32]
 8017b08:	6193      	str	r3, [r2, #24]
 8017b0a:	6110      	str	r0, [r2, #16]
 8017b0c:	6151      	str	r1, [r2, #20]
 8017b0e:	7923      	ldrb	r3, [r4, #4]
 8017b10:	7713      	strb	r3, [r2, #28]
 8017b12:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017b16:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8017b1a:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8017b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8017b20:	f102 011d 	add.w	r1, r2, #29
 8017b24:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8017b28:	f7f6 fb68 	bl	800e1fc <findAxis>
 8017b2c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017b30:	f102 0121 	add.w	r1, r2, #33	; 0x21
 8017b34:	f7f6 fb62 	bl	800e1fc <findAxis>
 8017b38:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017b3c:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8017b40:	f7f6 fb5c 	bl	800e1fc <findAxis>
 8017b44:	2300      	movs	r3, #0
 8017b46:	f882 3020 	strb.w	r3, [r2, #32]
 8017b4a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8017b4e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8017b52:	bd10      	pop	{r4, pc}
 8017b54:	20000218 	.word	0x20000218

08017b58 <MotionFX_enable_6X>:
 8017b58:	4b0e      	ldr	r3, [pc, #56]	; (8017b94 <MotionFX_enable_6X+0x3c>)
 8017b5a:	791b      	ldrb	r3, [r3, #4]
 8017b5c:	b903      	cbnz	r3, 8017b60 <MotionFX_enable_6X+0x8>
 8017b5e:	4770      	bx	lr
 8017b60:	2900      	cmp	r1, #0
 8017b62:	d0fc      	beq.n	8017b5e <MotionFX_enable_6X+0x6>
 8017b64:	b530      	push	{r4, r5, lr}
 8017b66:	1d05      	adds	r5, r0, #4
 8017b68:	b099      	sub	sp, #100	; 0x64
 8017b6a:	4604      	mov	r4, r0
 8017b6c:	4629      	mov	r1, r5
 8017b6e:	225c      	movs	r2, #92	; 0x5c
 8017b70:	a801      	add	r0, sp, #4
 8017b72:	f000 fcd5 	bl	8018520 <memcpy>
 8017b76:	4620      	mov	r0, r4
 8017b78:	f7f7 f9bc 	bl	800eef4 <MFX_emptyAttitude>
 8017b7c:	a901      	add	r1, sp, #4
 8017b7e:	4628      	mov	r0, r5
 8017b80:	225c      	movs	r2, #92	; 0x5c
 8017b82:	f000 fccd 	bl	8018520 <memcpy>
 8017b86:	2300      	movs	r3, #0
 8017b88:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8017b8c:	7363      	strb	r3, [r4, #13]
 8017b8e:	b019      	add	sp, #100	; 0x64
 8017b90:	bd30      	pop	{r4, r5, pc}
 8017b92:	bf00      	nop
 8017b94:	20000218 	.word	0x20000218

08017b98 <MotionFX_enable_9X>:
 8017b98:	4b0e      	ldr	r3, [pc, #56]	; (8017bd4 <MotionFX_enable_9X+0x3c>)
 8017b9a:	791b      	ldrb	r3, [r3, #4]
 8017b9c:	b903      	cbnz	r3, 8017ba0 <MotionFX_enable_9X+0x8>
 8017b9e:	4770      	bx	lr
 8017ba0:	2900      	cmp	r1, #0
 8017ba2:	d0fc      	beq.n	8017b9e <MotionFX_enable_9X+0x6>
 8017ba4:	b530      	push	{r4, r5, lr}
 8017ba6:	1d05      	adds	r5, r0, #4
 8017ba8:	b099      	sub	sp, #100	; 0x64
 8017baa:	4604      	mov	r4, r0
 8017bac:	4629      	mov	r1, r5
 8017bae:	225c      	movs	r2, #92	; 0x5c
 8017bb0:	a801      	add	r0, sp, #4
 8017bb2:	f000 fcb5 	bl	8018520 <memcpy>
 8017bb6:	4620      	mov	r0, r4
 8017bb8:	f7f7 f99c 	bl	800eef4 <MFX_emptyAttitude>
 8017bbc:	a901      	add	r1, sp, #4
 8017bbe:	4628      	mov	r0, r5
 8017bc0:	225c      	movs	r2, #92	; 0x5c
 8017bc2:	f000 fcad 	bl	8018520 <memcpy>
 8017bc6:	2301      	movs	r3, #1
 8017bc8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8017bcc:	7363      	strb	r3, [r4, #13]
 8017bce:	b019      	add	sp, #100	; 0x64
 8017bd0:	bd30      	pop	{r4, r5, pc}
 8017bd2:	bf00      	nop
 8017bd4:	20000218 	.word	0x20000218

08017bd8 <MotionFX_update>:
 8017bd8:	b470      	push	{r4, r5, r6}
 8017bda:	4c06      	ldr	r4, [pc, #24]	; (8017bf4 <MotionFX_update+0x1c>)
 8017bdc:	9e03      	ldr	r6, [sp, #12]
 8017bde:	7925      	ldrb	r5, [r4, #4]
 8017be0:	b90d      	cbnz	r5, 8017be6 <MotionFX_update+0xe>
 8017be2:	bc70      	pop	{r4, r5, r6}
 8017be4:	4770      	bx	lr
 8017be6:	461c      	mov	r4, r3
 8017be8:	ed94 0a00 	vldr	s0, [r4]
 8017bec:	4633      	mov	r3, r6
 8017bee:	bc70      	pop	{r4, r5, r6}
 8017bf0:	f7fc bf02 	b.w	80149f8 <iNemoEngine_API_Update>
 8017bf4:	20000218 	.word	0x20000218

08017bf8 <MotionFX_propagate>:
 8017bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bfc:	ed2d 8b06 	vpush	{d8-d10}
 8017c00:	4ca3      	ldr	r4, [pc, #652]	; (8017e90 <MotionFX_propagate+0x298>)
 8017c02:	7927      	ldrb	r7, [r4, #4]
 8017c04:	b0a0      	sub	sp, #128	; 0x80
 8017c06:	b927      	cbnz	r7, 8017c12 <MotionFX_propagate+0x1a>
 8017c08:	b020      	add	sp, #128	; 0x80
 8017c0a:	ecbd 8b06 	vpop	{d8-d10}
 8017c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c12:	4616      	mov	r6, r2
 8017c14:	4604      	mov	r4, r0
 8017c16:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8017c1a:	edd3 9a00 	vldr	s19, [r3]
 8017c1e:	460d      	mov	r5, r1
 8017c20:	6851      	ldr	r1, [r2, #4]
 8017c22:	6892      	ldr	r2, [r2, #8]
 8017c24:	ab13      	add	r3, sp, #76	; 0x4c
 8017c26:	c307      	stmia	r3!, {r0, r1, r2}
 8017c28:	6830      	ldr	r0, [r6, #0]
 8017c2a:	6871      	ldr	r1, [r6, #4]
 8017c2c:	68b2      	ldr	r2, [r6, #8]
 8017c2e:	ab10      	add	r3, sp, #64	; 0x40
 8017c30:	c307      	stmia	r3!, {r0, r1, r2}
 8017c32:	4637      	mov	r7, r6
 8017c34:	ab16      	add	r3, sp, #88	; 0x58
 8017c36:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8017c3a:	6879      	ldr	r1, [r7, #4]
 8017c3c:	68ba      	ldr	r2, [r7, #8]
 8017c3e:	f104 0a3a 	add.w	sl, r4, #58	; 0x3a
 8017c42:	c307      	stmia	r3!, {r0, r1, r2}
 8017c44:	aa13      	add	r2, sp, #76	; 0x4c
 8017c46:	4651      	mov	r1, sl
 8017c48:	a803      	add	r0, sp, #12
 8017c4a:	f7f6 fa75 	bl	800e138 <rotVect>
 8017c4e:	aa16      	add	r2, sp, #88	; 0x58
 8017c50:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8017c54:	a806      	add	r0, sp, #24
 8017c56:	f7f6 fa6f 	bl	800e138 <rotVect>
 8017c5a:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 8017c5e:	2b09      	cmp	r3, #9
 8017c60:	d829      	bhi.n	8017cb6 <MotionFX_propagate+0xbe>
 8017c62:	eddd 8a04 	vldr	s17, [sp, #16]
 8017c66:	ed9d 9a03 	vldr	s18, [sp, #12]
 8017c6a:	ed9d 8a05 	vldr	s16, [sp, #20]
 8017c6e:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8017c72:	eee9 7a09 	vfma.f32	s15, s18, s18
 8017c76:	eee8 7a08 	vfma.f32	s15, s16, s16
 8017c7a:	ee17 0a90 	vmov	r0, s15
 8017c7e:	f7e8 fc5b 	bl	8000538 <__aeabi_f2d>
 8017c82:	ec41 0b10 	vmov	d0, r0, r1
 8017c86:	f001 fa6d 	bl	8019164 <sqrt>
 8017c8a:	ec51 0b10 	vmov	r0, r1, d0
 8017c8e:	f7e8 ff5b 	bl	8000b48 <__aeabi_d2f>
 8017c92:	ee07 0a90 	vmov	s15, r0
 8017c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017c9a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8017c9e:	ee29 9a27 	vmul.f32	s18, s18, s15
 8017ca2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8017ca6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017caa:	ed8d 9a03 	vstr	s18, [sp, #12]
 8017cae:	edcd 8a04 	vstr	s17, [sp, #16]
 8017cb2:	ed8d 8a05 	vstr	s16, [sp, #20]
 8017cb6:	7923      	ldrb	r3, [r4, #4]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	f000 80d3 	beq.w	8017e64 <MotionFX_propagate+0x26c>
 8017cbe:	ee07 3a90 	vmov	s15, r3
 8017cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017cc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017cca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017cce:	f604 125c 	addw	r2, r4, #2396	; 0x95c
 8017cd2:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 8017cd6:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 8017cda:	edd2 7a00 	vldr	s15, [r2]
 8017cde:	eddd 8a06 	vldr	s17, [sp, #24]
 8017ce2:	ed9d 6a07 	vldr	s12, [sp, #28]
 8017ce6:	ed9d 8a08 	vldr	s16, [sp, #32]
 8017cea:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8017e94 <MotionFX_propagate+0x29c>
 8017cee:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8017e98 <MotionFX_propagate+0x2a0>
 8017cf2:	eee6 7aa8 	vfma.f32	s15, s13, s17
 8017cf6:	ee26 9a07 	vmul.f32	s18, s12, s14
 8017cfa:	edc2 7a00 	vstr	s15, [r2]
 8017cfe:	edd3 7a00 	vldr	s15, [r3]
 8017d02:	ed8d 9a07 	vstr	s18, [sp, #28]
 8017d06:	eee6 7a86 	vfma.f32	s15, s13, s12
 8017d0a:	f604 1264 	addw	r2, r4, #2404	; 0x964
 8017d0e:	ee68 8a87 	vmul.f32	s17, s17, s14
 8017d12:	edc3 7a00 	vstr	s15, [r3]
 8017d16:	edd2 7a00 	vldr	s15, [r2]
 8017d1a:	edcd 8a06 	vstr	s17, [sp, #24]
 8017d1e:	eee6 7a88 	vfma.f32	s15, s13, s16
 8017d22:	f604 1344 	addw	r3, r4, #2372	; 0x944
 8017d26:	ee28 8a07 	vmul.f32	s16, s16, s14
 8017d2a:	edc2 7a00 	vstr	s15, [r2]
 8017d2e:	edd3 7a00 	vldr	s15, [r3]
 8017d32:	ed8d 8a08 	vstr	s16, [sp, #32]
 8017d36:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 8017d3a:	ed93 7a00 	vldr	s14, [r3]
 8017d3e:	ee39 9a67 	vsub.f32	s18, s18, s15
 8017d42:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8017d46:	ee69 7a09 	vmul.f32	s15, s18, s18
 8017d4a:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8017d4e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8017d52:	ed93 7a00 	vldr	s14, [r3]
 8017d56:	ee38 8a47 	vsub.f32	s16, s16, s14
 8017d5a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8017d5e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8017d62:	ee29 0a80 	vmul.f32	s0, s19, s0
 8017d66:	eef4 7ae5 	vcmpe.f32	s15, s11
 8017d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d6e:	dd7e      	ble.n	8017e6e <MotionFX_propagate+0x276>
 8017d70:	eeb1 aae7 	vsqrt.f32	s20, s15
 8017d74:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8017d78:	eeb0 0a69 	vmov.f32	s0, s19
 8017d7c:	f001 f986 	bl	801908c <sinf>
 8017d80:	eec0 7a0a 	vdiv.f32	s15, s0, s20
 8017d84:	eeb0 0a69 	vmov.f32	s0, s19
 8017d88:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8017d8c:	ee29 9a27 	vmul.f32	s18, s18, s15
 8017d90:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017d94:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8017d98:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8017d9c:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8017da0:	f001 f90e 	bl	8018fc0 <cosf>
 8017da4:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8017da8:	f604 1838 	addw	r8, r4, #2360	; 0x938
 8017dac:	a809      	add	r0, sp, #36	; 0x24
 8017dae:	4632      	mov	r2, r6
 8017db0:	4631      	mov	r1, r6
 8017db2:	f7f6 fc55 	bl	800e660 <qmult>
 8017db6:	edd8 7a00 	vldr	s15, [r8]
 8017dba:	ed96 7a00 	vldr	s14, [r6]
 8017dbe:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 8017dc2:	f604 1934 	addw	r9, r4, #2356	; 0x934
 8017dc6:	edd9 6a00 	vldr	s13, [r9]
 8017dca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017dce:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 8017dd2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8017dd6:	3301      	adds	r3, #1
 8017dd8:	aa13      	add	r2, sp, #76	; 0x4c
 8017dda:	edd7 6a00 	vldr	s13, [r7]
 8017dde:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8017de2:	4651      	mov	r1, sl
 8017de4:	a809      	add	r0, sp, #36	; 0x24
 8017de6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8017dea:	eee7 7a07 	vfma.f32	s15, s14, s14
 8017dee:	eef1 6ae7 	vsqrt.f32	s13, s15
 8017df2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8017df6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017dfa:	ed86 7a00 	vstr	s14, [r6]
 8017dfe:	ed99 7a00 	vldr	s14, [r9]
 8017e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017e06:	ed89 7a00 	vstr	s14, [r9]
 8017e0a:	ed98 7a00 	vldr	s14, [r8]
 8017e0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017e12:	ed88 7a00 	vstr	s14, [r8]
 8017e16:	ed97 7a00 	vldr	s14, [r7]
 8017e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017e1e:	edc7 7a00 	vstr	s15, [r7]
 8017e22:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 8017e26:	f7f6 f987 	bl	800e138 <rotVect>
 8017e2a:	f8d9 0000 	ldr.w	r0, [r9]
 8017e2e:	f8d8 1000 	ldr.w	r1, [r8]
 8017e32:	683a      	ldr	r2, [r7, #0]
 8017e34:	6833      	ldr	r3, [r6, #0]
 8017e36:	60eb      	str	r3, [r5, #12]
 8017e38:	6128      	str	r0, [r5, #16]
 8017e3a:	6169      	str	r1, [r5, #20]
 8017e3c:	61aa      	str	r2, [r5, #24]
 8017e3e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017e42:	9301      	str	r3, [sp, #4]
 8017e44:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8017e48:	9300      	str	r3, [sp, #0]
 8017e4a:	a909      	add	r1, sp, #36	; 0x24
 8017e4c:	f105 031c 	add.w	r3, r5, #28
 8017e50:	462a      	mov	r2, r5
 8017e52:	f105 000c 	add.w	r0, r5, #12
 8017e56:	f7f7 fc2b 	bl	800f6b0 <output_update>
 8017e5a:	b020      	add	sp, #128	; 0x80
 8017e5c:	ecbd 8b06 	vpop	{d8-d10}
 8017e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e64:	2301      	movs	r3, #1
 8017e66:	7123      	strb	r3, [r4, #4]
 8017e68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017e6c:	e72f      	b.n	8017cce <MotionFX_propagate+0xd6>
 8017e6e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8017e72:	ee29 9a00 	vmul.f32	s18, s18, s0
 8017e76:	ee28 8a00 	vmul.f32	s16, s16, s0
 8017e7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017e7e:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8017e82:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8017e86:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8017e8a:	930c      	str	r3, [sp, #48]	; 0x30
 8017e8c:	e78c      	b.n	8017da8 <MotionFX_propagate+0x1b0>
 8017e8e:	bf00      	nop
 8017e90:	20000218 	.word	0x20000218
 8017e94:	3c8efa35 	.word	0x3c8efa35
 8017e98:	38d1b718 	.word	0x38d1b718

08017e9c <MotionFX_MagCal_init>:
 8017e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e9e:	4c44      	ldr	r4, [pc, #272]	; (8017fb0 <MotionFX_MagCal_init+0x114>)
 8017ea0:	7923      	ldrb	r3, [r4, #4]
 8017ea2:	b903      	cbnz	r3, 8017ea6 <MotionFX_MagCal_init+0xa>
 8017ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ea6:	1e43      	subs	r3, r0, #1
 8017ea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017eac:	4605      	mov	r5, r0
 8017eae:	d2f9      	bcs.n	8017ea4 <MotionFX_MagCal_init+0x8>
 8017eb0:	2900      	cmp	r1, #0
 8017eb2:	d139      	bne.n	8017f28 <MotionFX_MagCal_init+0x8c>
 8017eb4:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8017eb8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017ebc:	4a3d      	ldr	r2, [pc, #244]	; (8017fb4 <MotionFX_MagCal_init+0x118>)
 8017ebe:	1b5b      	subs	r3, r3, r5
 8017ec0:	ee07 3a90 	vmov	s15, r3
 8017ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ec8:	23c8      	movs	r3, #200	; 0xc8
 8017eca:	eef0 7ae7 	vabs.f32	s15, s15
 8017ece:	fb93 f3f5 	sdiv	r3, r3, r5
 8017ed2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017ed6:	b2db      	uxtb	r3, r3
 8017ed8:	2b0f      	cmp	r3, #15
 8017eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017ede:	bf28      	it	cs
 8017ee0:	230f      	movcs	r3, #15
 8017ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ee6:	6015      	str	r5, [r2, #0]
 8017ee8:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 8017eec:	b22d      	sxth	r5, r5
 8017eee:	dc0e      	bgt.n	8017f0e <MotionFX_MagCal_init+0x72>
 8017ef0:	edd4 7a03 	vldr	s15, [r4, #12]
 8017ef4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8017fb8 <MotionFX_MagCal_init+0x11c>
 8017ef8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8017fbc <MotionFX_MagCal_init+0x120>
 8017efc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017f00:	eef0 7ae7 	vabs.f32	s15, s15
 8017f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f0c:	dd08      	ble.n	8017f20 <MotionFX_MagCal_init+0x84>
 8017f0e:	2300      	movs	r3, #0
 8017f10:	492b      	ldr	r1, [pc, #172]	; (8017fc0 <MotionFX_MagCal_init+0x124>)
 8017f12:	8165      	strh	r5, [r4, #10]
 8017f14:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8017f18:	60e1      	str	r1, [r4, #12]
 8017f1a:	8223      	strh	r3, [r4, #16]
 8017f1c:	6163      	str	r3, [r4, #20]
 8017f1e:	8122      	strh	r2, [r4, #8]
 8017f20:	2300      	movs	r3, #0
 8017f22:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 8017f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f28:	2600      	movs	r6, #0
 8017f2a:	4826      	ldr	r0, [pc, #152]	; (8017fc4 <MotionFX_MagCal_init+0x128>)
 8017f2c:	61a0      	str	r0, [r4, #24]
 8017f2e:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8017f32:	4631      	mov	r1, r6
 8017f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017f38:	6122      	str	r2, [r4, #16]
 8017f3a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8017f3e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017f42:	6166      	str	r6, [r4, #20]
 8017f44:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8017f48:	6566      	str	r6, [r4, #84]	; 0x54
 8017f4a:	83a6      	strh	r6, [r4, #28]
 8017f4c:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 8017f50:	f000 faf4 	bl	801853c <memset>
 8017f54:	23ff      	movs	r3, #255	; 0xff
 8017f56:	225f      	movs	r2, #95	; 0x5f
 8017f58:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 8017f5c:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 8017f60:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8017f64:	2200      	movs	r2, #0
 8017f66:	2300      	movs	r3, #0
 8017f68:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017f6c:	f44f 7780 	mov.w	r7, #256	; 0x100
 8017f70:	4631      	mov	r1, r6
 8017f72:	62a6      	str	r6, [r4, #40]	; 0x28
 8017f74:	2230      	movs	r2, #48	; 0x30
 8017f76:	f44f 6670 	mov.w	r6, #3840	; 0xf00
 8017f7a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8017f7e:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 8017f82:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8017f84:	f000 fada 	bl	801853c <memset>
 8017f88:	f1a5 030a 	sub.w	r3, r5, #10
 8017f8c:	b29b      	uxth	r3, r3
 8017f8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017f92:	2b32      	cmp	r3, #50	; 0x32
 8017f94:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 8017f98:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 8017f9c:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 8017fa0:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 8017fa4:	d888      	bhi.n	8017eb8 <MotionFX_MagCal_init+0x1c>
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8017fac:	e784      	b.n	8017eb8 <MotionFX_MagCal_init+0x1c>
 8017fae:	bf00      	nop
 8017fb0:	20000218 	.word	0x20000218
 8017fb4:	20000000 	.word	0x20000000
 8017fb8:	3dcccccd 	.word	0x3dcccccd
 8017fbc:	3c23d70a 	.word	0x3c23d70a
 8017fc0:	3dcccccd 	.word	0x3dcccccd
 8017fc4:	20001b74 	.word	0x20001b74

08017fc8 <MotionFX_MagCal_run>:
 8017fc8:	4a3e      	ldr	r2, [pc, #248]	; (80180c4 <MotionFX_MagCal_run+0xfc>)
 8017fca:	7913      	ldrb	r3, [r2, #4]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d077      	beq.n	80180c0 <MotionFX_MagCal_run+0xf8>
 8017fd0:	ed90 7a00 	vldr	s14, [r0]
 8017fd4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80180c8 <MotionFX_MagCal_run+0x100>
 8017fd8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8017fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fe0:	bfb4      	ite	lt
 8017fe2:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8017fe6:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8017fea:	eee7 7a26 	vfma.f32	s15, s14, s13
 8017fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ff0:	ed90 7a01 	vldr	s14, [r0, #4]
 8017ff4:	eddf 6a34 	vldr	s13, [pc, #208]	; 80180c8 <MotionFX_MagCal_run+0x100>
 8017ff8:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8017ffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018000:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8018004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018008:	ee17 1a90 	vmov	r1, s15
 801800c:	bfb4      	ite	lt
 801800e:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8018012:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8018016:	eee7 7a26 	vfma.f32	s15, s14, s13
 801801a:	ed90 7a02 	vldr	s14, [r0, #8]
 801801e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80180c8 <MotionFX_MagCal_run+0x100>
 8018022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018026:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801802a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801802e:	ee17 4a90 	vmov	r4, s15
 8018032:	bfac      	ite	ge
 8018034:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8018038:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 801803c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8018040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018044:	ee17 7a90 	vmov	r7, s15
 8018048:	b383      	cbz	r3, 80180ac <MotionFX_MagCal_run+0xe4>
 801804a:	4820      	ldr	r0, [pc, #128]	; (80180cc <MotionFX_MagCal_run+0x104>)
 801804c:	6805      	ldr	r5, [r0, #0]
 801804e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 8018052:	fb15 f503 	smulbb	r5, r5, r3
 8018056:	f8a0 53d0 	strh.w	r5, [r0, #976]	; 0x3d0
 801805a:	00dd      	lsls	r5, r3, #3
 801805c:	f647 76fe 	movw	r6, #32766	; 0x7ffe
 8018060:	f8df c06c 	ldr.w	ip, [pc, #108]	; 80180d0 <MotionFX_MagCal_run+0x108>
 8018064:	42b1      	cmp	r1, r6
 8018066:	bfa8      	it	ge
 8018068:	4631      	movge	r1, r6
 801806a:	42b7      	cmp	r7, r6
 801806c:	bfa8      	it	ge
 801806e:	4637      	movge	r7, r6
 8018070:	4561      	cmp	r1, ip
 8018072:	4608      	mov	r0, r1
 8018074:	bfb8      	it	lt
 8018076:	4660      	movlt	r0, ip
 8018078:	4564      	cmp	r4, ip
 801807a:	db1f      	blt.n	80180bc <MotionFX_MagCal_run+0xf4>
 801807c:	42b4      	cmp	r4, r6
 801807e:	bfa8      	it	ge
 8018080:	4634      	movge	r4, r6
 8018082:	b224      	sxth	r4, r4
 8018084:	4e12      	ldr	r6, [pc, #72]	; (80180d0 <MotionFX_MagCal_run+0x108>)
 8018086:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 801808a:	3301      	adds	r3, #1
 801808c:	4415      	add	r5, r2
 801808e:	b2db      	uxtb	r3, r3
 8018090:	42b7      	cmp	r7, r6
 8018092:	bfb8      	it	lt
 8018094:	4637      	movlt	r7, r6
 8018096:	428b      	cmp	r3, r1
 8018098:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 801809c:	f8a5 03d2 	strh.w	r0, [r5, #978]	; 0x3d2
 80180a0:	f8a5 43d4 	strh.w	r4, [r5, #980]	; 0x3d4
 80180a4:	f8a5 73d6 	strh.w	r7, [r5, #982]	; 0x3d6
 80180a8:	d014      	beq.n	80180d4 <MotionFX_MagCal_run+0x10c>
 80180aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180ac:	68c0      	ldr	r0, [r0, #12]
 80180ae:	f8c2 03c8 	str.w	r0, [r2, #968]	; 0x3c8
 80180b2:	2001      	movs	r0, #1
 80180b4:	f882 03cc 	strb.w	r0, [r2, #972]	; 0x3cc
 80180b8:	461d      	mov	r5, r3
 80180ba:	e7cf      	b.n	801805c <MotionFX_MagCal_run+0x94>
 80180bc:	4634      	mov	r4, r6
 80180be:	e7e1      	b.n	8018084 <MotionFX_MagCal_run+0xbc>
 80180c0:	4770      	bx	lr
 80180c2:	bf00      	nop
 80180c4:	20000218 	.word	0x20000218
 80180c8:	43fa0000 	.word	0x43fa0000
 80180cc:	20000000 	.word	0x20000000
 80180d0:	ffff8002 	.word	0xffff8002
 80180d4:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 80180d8:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 80180dc:	2000      	movs	r0, #0
 80180de:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	f000 8159 	beq.w	801839a <MotionFX_MagCal_run+0x3d2>
 80180e8:	e9d2 4005 	ldrd	r4, r0, [r2, #20]
 80180ec:	8a57      	ldrh	r7, [r2, #18]
 80180ee:	8a13      	ldrh	r3, [r2, #16]
 80180f0:	2900      	cmp	r1, #0
 80180f2:	f000 8150 	beq.w	8018396 <MotionFX_MagCal_run+0x3ce>
 80180f6:	2f00      	cmp	r7, #0
 80180f8:	f000 814d 	beq.w	8018396 <MotionFX_MagCal_run+0x3ce>
 80180fc:	42bb      	cmp	r3, r7
 80180fe:	bf28      	it	cs
 8018100:	463b      	movcs	r3, r7
 8018102:	3301      	adds	r3, #1
 8018104:	b29b      	uxth	r3, r3
 8018106:	42bb      	cmp	r3, r7
 8018108:	bf28      	it	cs
 801810a:	463b      	movcs	r3, r7
 801810c:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 8018110:	191d      	adds	r5, r3, r4
 8018112:	f04f 0c01 	mov.w	ip, #1
 8018116:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 801811a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 801811e:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 8018122:	f8c5 e002 	str.w	lr, [r5, #2]
 8018126:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 801812a:	f8a5 e006 	strh.w	lr, [r5, #6]
 801812e:	4561      	cmp	r1, ip
 8018130:	f000 812a 	beq.w	8018388 <MotionFX_MagCal_run+0x3c0>
 8018134:	4463      	add	r3, ip
 8018136:	b29b      	uxth	r3, r3
 8018138:	42bb      	cmp	r3, r7
 801813a:	bf28      	it	cs
 801813c:	463b      	movcs	r3, r7
 801813e:	eb03 0e04 	add.w	lr, r3, r4
 8018142:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8018146:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801814a:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 801814e:	f8c5 e002 	str.w	lr, [r5, #2]
 8018152:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 8018156:	f8a5 e006 	strh.w	lr, [r5, #6]
 801815a:	2902      	cmp	r1, #2
 801815c:	f000 8114 	beq.w	8018388 <MotionFX_MagCal_run+0x3c0>
 8018160:	4463      	add	r3, ip
 8018162:	b29b      	uxth	r3, r3
 8018164:	42bb      	cmp	r3, r7
 8018166:	bf28      	it	cs
 8018168:	463b      	movcs	r3, r7
 801816a:	eb03 0e04 	add.w	lr, r3, r4
 801816e:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8018172:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8018176:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 801817a:	f8c5 e002 	str.w	lr, [r5, #2]
 801817e:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 8018182:	f8a5 e006 	strh.w	lr, [r5, #6]
 8018186:	2903      	cmp	r1, #3
 8018188:	f000 80fe 	beq.w	8018388 <MotionFX_MagCal_run+0x3c0>
 801818c:	4463      	add	r3, ip
 801818e:	b29b      	uxth	r3, r3
 8018190:	42bb      	cmp	r3, r7
 8018192:	bf28      	it	cs
 8018194:	463b      	movcs	r3, r7
 8018196:	eb03 0e04 	add.w	lr, r3, r4
 801819a:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 801819e:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80181a2:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 80181a6:	f8c5 e002 	str.w	lr, [r5, #2]
 80181aa:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 80181ae:	f8a5 e006 	strh.w	lr, [r5, #6]
 80181b2:	2904      	cmp	r1, #4
 80181b4:	f000 80e8 	beq.w	8018388 <MotionFX_MagCal_run+0x3c0>
 80181b8:	4463      	add	r3, ip
 80181ba:	b29b      	uxth	r3, r3
 80181bc:	42bb      	cmp	r3, r7
 80181be:	bf28      	it	cs
 80181c0:	463b      	movcs	r3, r7
 80181c2:	eb03 0e04 	add.w	lr, r3, r4
 80181c6:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 80181ca:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80181ce:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 80181d2:	f8c5 e002 	str.w	lr, [r5, #2]
 80181d6:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 80181da:	f8a5 e006 	strh.w	lr, [r5, #6]
 80181de:	2905      	cmp	r1, #5
 80181e0:	f000 80d2 	beq.w	8018388 <MotionFX_MagCal_run+0x3c0>
 80181e4:	4463      	add	r3, ip
 80181e6:	b29b      	uxth	r3, r3
 80181e8:	42bb      	cmp	r3, r7
 80181ea:	bf28      	it	cs
 80181ec:	463b      	movcs	r3, r7
 80181ee:	441c      	add	r4, r3
 80181f0:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 80181f4:	f800 c034 	strb.w	ip, [r0, r4, lsl #3]
 80181f8:	f8d2 43fa 	ldr.w	r4, [r2, #1018]	; 0x3fa
 80181fc:	f8c5 4002 	str.w	r4, [r5, #2]
 8018200:	f8b2 43fe 	ldrh.w	r4, [r2, #1022]	; 0x3fe
 8018204:	80ec      	strh	r4, [r5, #6]
 8018206:	2906      	cmp	r1, #6
 8018208:	f000 80be 	beq.w	8018388 <MotionFX_MagCal_run+0x3c0>
 801820c:	4463      	add	r3, ip
 801820e:	b29b      	uxth	r3, r3
 8018210:	42bb      	cmp	r3, r7
 8018212:	bf28      	it	cs
 8018214:	463b      	movcs	r3, r7
 8018216:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 801821a:	eb03 0c04 	add.w	ip, r3, r4
 801821e:	2501      	movs	r5, #1
 8018220:	f800 503c 	strb.w	r5, [r0, ip, lsl #3]
 8018224:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8018228:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 801822c:	f8cc e002 	str.w	lr, [ip, #2]
 8018230:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 8018234:	f8ac e006 	strh.w	lr, [ip, #6]
 8018238:	2907      	cmp	r1, #7
 801823a:	f000 80a5 	beq.w	8018388 <MotionFX_MagCal_run+0x3c0>
 801823e:	442b      	add	r3, r5
 8018240:	b29b      	uxth	r3, r3
 8018242:	42bb      	cmp	r3, r7
 8018244:	bf28      	it	cs
 8018246:	463b      	movcs	r3, r7
 8018248:	eb03 0e04 	add.w	lr, r3, r4
 801824c:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8018250:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8018254:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 8018258:	f8cc e002 	str.w	lr, [ip, #2]
 801825c:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 8018260:	f8ac e006 	strh.w	lr, [ip, #6]
 8018264:	2908      	cmp	r1, #8
 8018266:	f000 808f 	beq.w	8018388 <MotionFX_MagCal_run+0x3c0>
 801826a:	442b      	add	r3, r5
 801826c:	b29b      	uxth	r3, r3
 801826e:	42bb      	cmp	r3, r7
 8018270:	bf28      	it	cs
 8018272:	463b      	movcs	r3, r7
 8018274:	eb03 0e04 	add.w	lr, r3, r4
 8018278:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801827c:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8018280:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 8018284:	f8cc e002 	str.w	lr, [ip, #2]
 8018288:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 801828c:	f8ac e006 	strh.w	lr, [ip, #6]
 8018290:	2909      	cmp	r1, #9
 8018292:	d079      	beq.n	8018388 <MotionFX_MagCal_run+0x3c0>
 8018294:	442b      	add	r3, r5
 8018296:	b29b      	uxth	r3, r3
 8018298:	42bb      	cmp	r3, r7
 801829a:	bf28      	it	cs
 801829c:	463b      	movcs	r3, r7
 801829e:	eb03 0e04 	add.w	lr, r3, r4
 80182a2:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80182a6:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80182aa:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 80182ae:	f8cc e002 	str.w	lr, [ip, #2]
 80182b2:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 80182b6:	f8ac e006 	strh.w	lr, [ip, #6]
 80182ba:	290a      	cmp	r1, #10
 80182bc:	d064      	beq.n	8018388 <MotionFX_MagCal_run+0x3c0>
 80182be:	442b      	add	r3, r5
 80182c0:	b29b      	uxth	r3, r3
 80182c2:	42bb      	cmp	r3, r7
 80182c4:	bf28      	it	cs
 80182c6:	463b      	movcs	r3, r7
 80182c8:	eb03 0e04 	add.w	lr, r3, r4
 80182cc:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80182d0:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80182d4:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 80182d8:	f8cc e002 	str.w	lr, [ip, #2]
 80182dc:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 80182e0:	f8ac e006 	strh.w	lr, [ip, #6]
 80182e4:	290b      	cmp	r1, #11
 80182e6:	d04f      	beq.n	8018388 <MotionFX_MagCal_run+0x3c0>
 80182e8:	442b      	add	r3, r5
 80182ea:	b29b      	uxth	r3, r3
 80182ec:	42bb      	cmp	r3, r7
 80182ee:	bf28      	it	cs
 80182f0:	463b      	movcs	r3, r7
 80182f2:	eb03 0e04 	add.w	lr, r3, r4
 80182f6:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80182fa:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80182fe:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 8018302:	f8cc e002 	str.w	lr, [ip, #2]
 8018306:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 801830a:	f8ac e006 	strh.w	lr, [ip, #6]
 801830e:	290c      	cmp	r1, #12
 8018310:	d03a      	beq.n	8018388 <MotionFX_MagCal_run+0x3c0>
 8018312:	442b      	add	r3, r5
 8018314:	b29b      	uxth	r3, r3
 8018316:	42bb      	cmp	r3, r7
 8018318:	bf28      	it	cs
 801831a:	463b      	movcs	r3, r7
 801831c:	eb03 0e04 	add.w	lr, r3, r4
 8018320:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8018324:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8018328:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 801832c:	f8cc e002 	str.w	lr, [ip, #2]
 8018330:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 8018334:	f8ac e006 	strh.w	lr, [ip, #6]
 8018338:	290d      	cmp	r1, #13
 801833a:	d025      	beq.n	8018388 <MotionFX_MagCal_run+0x3c0>
 801833c:	442b      	add	r3, r5
 801833e:	b29b      	uxth	r3, r3
 8018340:	42bb      	cmp	r3, r7
 8018342:	bf28      	it	cs
 8018344:	463b      	movcs	r3, r7
 8018346:	eb03 0e04 	add.w	lr, r3, r4
 801834a:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801834e:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8018352:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 8018356:	f8cc e002 	str.w	lr, [ip, #2]
 801835a:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 801835e:	f8ac e006 	strh.w	lr, [ip, #6]
 8018362:	290e      	cmp	r1, #14
 8018364:	d010      	beq.n	8018388 <MotionFX_MagCal_run+0x3c0>
 8018366:	442b      	add	r3, r5
 8018368:	b29b      	uxth	r3, r3
 801836a:	42bb      	cmp	r3, r7
 801836c:	bf28      	it	cs
 801836e:	463b      	movcs	r3, r7
 8018370:	441c      	add	r4, r3
 8018372:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 8018376:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
 801837a:	f8d2 0442 	ldr.w	r0, [r2, #1090]	; 0x442
 801837e:	f8c7 0002 	str.w	r0, [r7, #2]
 8018382:	f8b2 0446 	ldrh.w	r0, [r2, #1094]	; 0x446
 8018386:	80f8      	strh	r0, [r7, #6]
 8018388:	3901      	subs	r1, #1
 801838a:	b2c9      	uxtb	r1, r1
 801838c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8018390:	f8b1 43d0 	ldrh.w	r4, [r1, #976]	; 0x3d0
 8018394:	4434      	add	r4, r6
 8018396:	8213      	strh	r3, [r2, #16]
 8018398:	6154      	str	r4, [r2, #20]
 801839a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 801839e:	2b00      	cmp	r3, #0
 80183a0:	f43f ae83 	beq.w	80180aa <MotionFX_MagCal_run+0xe2>
 80183a4:	8a11      	ldrh	r1, [r2, #16]
 80183a6:	8a53      	ldrh	r3, [r2, #18]
 80183a8:	428b      	cmp	r3, r1
 80183aa:	d022      	beq.n	80183f2 <MotionFX_MagCal_run+0x42a>
 80183ac:	b341      	cbz	r1, 8018400 <MotionFX_MagCal_run+0x438>
 80183ae:	6953      	ldr	r3, [r2, #20]
 80183b0:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 80183b4:	3301      	adds	r3, #1
 80183b6:	4403      	add	r3, r0
 80183b8:	1c58      	adds	r0, r3, #1
 80183ba:	d021      	beq.n	8018400 <MotionFX_MagCal_run+0x438>
 80183bc:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 80183c0:	3410      	adds	r4, #16
 80183c2:	6d50      	ldr	r0, [r2, #84]	; 0x54
 80183c4:	42a0      	cmp	r0, r4
 80183c6:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 80183ca:	bf84      	itt	hi
 80183cc:	6553      	strhi	r3, [r2, #84]	; 0x54
 80183ce:	4618      	movhi	r0, r3
 80183d0:	4420      	add	r0, r4
 80183d2:	4283      	cmp	r3, r0
 80183d4:	f4ff ae69 	bcc.w	80180aa <MotionFX_MagCal_run+0xe2>
 80183d8:	b131      	cbz	r1, 80183e8 <MotionFX_MagCal_run+0x420>
 80183da:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 80183de:	6952      	ldr	r2, [r2, #20]
 80183e0:	3901      	subs	r1, #1
 80183e2:	fb00 2111 	mls	r1, r0, r1, r2
 80183e6:	b289      	uxth	r1, r1
 80183e8:	1a5b      	subs	r3, r3, r1
 80183ea:	b21b      	sxth	r3, r3
 80183ec:	42a3      	cmp	r3, r4
 80183ee:	f6ff ae5c 	blt.w	80180aa <MotionFX_MagCal_run+0xe2>
 80183f2:	4905      	ldr	r1, [pc, #20]	; (8018408 <MotionFX_MagCal_run+0x440>)
 80183f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80183f8:	f101 0014 	add.w	r0, r1, #20
 80183fc:	f7fd babc 	b.w	8015978 <MEMS_runMagCal>
 8018400:	f242 7410 	movw	r4, #10000	; 0x2710
 8018404:	2300      	movs	r3, #0
 8018406:	e7dc      	b.n	80183c2 <MotionFX_MagCal_run+0x3fa>
 8018408:	20000220 	.word	0x20000220

0801840c <MotionFX_MagCal_getParams>:
 801840c:	b4f0      	push	{r4, r5, r6, r7}
 801840e:	4f1b      	ldr	r7, [pc, #108]	; (801847c <MotionFX_MagCal_getParams+0x70>)
 8018410:	793b      	ldrb	r3, [r7, #4]
 8018412:	b08e      	sub	sp, #56	; 0x38
 8018414:	b373      	cbz	r3, 8018474 <MotionFX_MagCal_getParams+0x68>
 8018416:	f107 0574 	add.w	r5, r7, #116	; 0x74
 801841a:	4606      	mov	r6, r0
 801841c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801841e:	ac01      	add	r4, sp, #4
 8018420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018428:	ed9d 7a03 	vldr	s14, [sp, #12]
 801842c:	eddd 6a02 	vldr	s13, [sp, #8]
 8018430:	eddd 7a04 	vldr	s15, [sp, #16]
 8018434:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8018480 <MotionFX_MagCal_getParams+0x74>
 8018438:	682d      	ldr	r5, [r5, #0]
 801843a:	f897 7074 	ldrb.w	r7, [r7, #116]	; 0x74
 801843e:	7337      	strb	r7, [r6, #12]
 8018440:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8018444:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8018448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801844c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801844e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018452:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801845a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801845e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018462:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018466:	6025      	str	r5, [r4, #0]
 8018468:	edc6 6a00 	vstr	s13, [r6]
 801846c:	ed86 7a01 	vstr	s14, [r6, #4]
 8018470:	edc6 7a02 	vstr	s15, [r6, #8]
 8018474:	b00e      	add	sp, #56	; 0x38
 8018476:	bcf0      	pop	{r4, r5, r6, r7}
 8018478:	4770      	bx	lr
 801847a:	bf00      	nop
 801847c:	20000218 	.word	0x20000218
 8018480:	3b03126f 	.word	0x3b03126f

08018484 <MotionFX_GetLibVersion>:
 8018484:	4b0f      	ldr	r3, [pc, #60]	; (80184c4 <MotionFX_GetLibVersion+0x40>)
 8018486:	791b      	ldrb	r3, [r3, #4]
 8018488:	b90b      	cbnz	r3, 801848e <MotionFX_GetLibVersion+0xa>
 801848a:	4618      	mov	r0, r3
 801848c:	4770      	bx	lr
 801848e:	b470      	push	{r4, r5, r6}
 8018490:	4e0d      	ldr	r6, [pc, #52]	; (80184c8 <MotionFX_GetLibVersion+0x44>)
 8018492:	4604      	mov	r4, r0
 8018494:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8018496:	b08b      	sub	sp, #44	; 0x2c
 8018498:	ad01      	add	r5, sp, #4
 801849a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801849c:	6833      	ldr	r3, [r6, #0]
 801849e:	f825 3b02 	strh.w	r3, [r5], #2
 80184a2:	0c1b      	lsrs	r3, r3, #16
 80184a4:	702b      	strb	r3, [r5, #0]
 80184a6:	ad01      	add	r5, sp, #4
 80184a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184aa:	882e      	ldrh	r6, [r5, #0]
 80184ac:	60e3      	str	r3, [r4, #12]
 80184ae:	78ad      	ldrb	r5, [r5, #2]
 80184b0:	6020      	str	r0, [r4, #0]
 80184b2:	2312      	movs	r3, #18
 80184b4:	4618      	mov	r0, r3
 80184b6:	6061      	str	r1, [r4, #4]
 80184b8:	60a2      	str	r2, [r4, #8]
 80184ba:	8226      	strh	r6, [r4, #16]
 80184bc:	74a5      	strb	r5, [r4, #18]
 80184be:	b00b      	add	sp, #44	; 0x2c
 80184c0:	bc70      	pop	{r4, r5, r6}
 80184c2:	4770      	bx	lr
 80184c4:	20000218 	.word	0x20000218
 80184c8:	0801ac24 	.word	0x0801ac24

080184cc <__errno>:
 80184cc:	4b01      	ldr	r3, [pc, #4]	; (80184d4 <__errno+0x8>)
 80184ce:	6818      	ldr	r0, [r3, #0]
 80184d0:	4770      	bx	lr
 80184d2:	bf00      	nop
 80184d4:	2000018c 	.word	0x2000018c

080184d8 <__libc_init_array>:
 80184d8:	b570      	push	{r4, r5, r6, lr}
 80184da:	4d0d      	ldr	r5, [pc, #52]	; (8018510 <__libc_init_array+0x38>)
 80184dc:	4c0d      	ldr	r4, [pc, #52]	; (8018514 <__libc_init_array+0x3c>)
 80184de:	1b64      	subs	r4, r4, r5
 80184e0:	10a4      	asrs	r4, r4, #2
 80184e2:	2600      	movs	r6, #0
 80184e4:	42a6      	cmp	r6, r4
 80184e6:	d109      	bne.n	80184fc <__libc_init_array+0x24>
 80184e8:	4d0b      	ldr	r5, [pc, #44]	; (8018518 <__libc_init_array+0x40>)
 80184ea:	4c0c      	ldr	r4, [pc, #48]	; (801851c <__libc_init_array+0x44>)
 80184ec:	f002 fb68 	bl	801abc0 <_init>
 80184f0:	1b64      	subs	r4, r4, r5
 80184f2:	10a4      	asrs	r4, r4, #2
 80184f4:	2600      	movs	r6, #0
 80184f6:	42a6      	cmp	r6, r4
 80184f8:	d105      	bne.n	8018506 <__libc_init_array+0x2e>
 80184fa:	bd70      	pop	{r4, r5, r6, pc}
 80184fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8018500:	4798      	blx	r3
 8018502:	3601      	adds	r6, #1
 8018504:	e7ee      	b.n	80184e4 <__libc_init_array+0xc>
 8018506:	f855 3b04 	ldr.w	r3, [r5], #4
 801850a:	4798      	blx	r3
 801850c:	3601      	adds	r6, #1
 801850e:	e7f2      	b.n	80184f6 <__libc_init_array+0x1e>
 8018510:	0801b158 	.word	0x0801b158
 8018514:	0801b158 	.word	0x0801b158
 8018518:	0801b158 	.word	0x0801b158
 801851c:	0801b15c 	.word	0x0801b15c

08018520 <memcpy>:
 8018520:	440a      	add	r2, r1
 8018522:	4291      	cmp	r1, r2
 8018524:	f100 33ff 	add.w	r3, r0, #4294967295
 8018528:	d100      	bne.n	801852c <memcpy+0xc>
 801852a:	4770      	bx	lr
 801852c:	b510      	push	{r4, lr}
 801852e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018532:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018536:	4291      	cmp	r1, r2
 8018538:	d1f9      	bne.n	801852e <memcpy+0xe>
 801853a:	bd10      	pop	{r4, pc}

0801853c <memset>:
 801853c:	4402      	add	r2, r0
 801853e:	4603      	mov	r3, r0
 8018540:	4293      	cmp	r3, r2
 8018542:	d100      	bne.n	8018546 <memset+0xa>
 8018544:	4770      	bx	lr
 8018546:	f803 1b01 	strb.w	r1, [r3], #1
 801854a:	e7f9      	b.n	8018540 <memset+0x4>

0801854c <sniprintf>:
 801854c:	b40c      	push	{r2, r3}
 801854e:	b530      	push	{r4, r5, lr}
 8018550:	4b17      	ldr	r3, [pc, #92]	; (80185b0 <sniprintf+0x64>)
 8018552:	1e0c      	subs	r4, r1, #0
 8018554:	681d      	ldr	r5, [r3, #0]
 8018556:	b09d      	sub	sp, #116	; 0x74
 8018558:	da08      	bge.n	801856c <sniprintf+0x20>
 801855a:	238b      	movs	r3, #139	; 0x8b
 801855c:	602b      	str	r3, [r5, #0]
 801855e:	f04f 30ff 	mov.w	r0, #4294967295
 8018562:	b01d      	add	sp, #116	; 0x74
 8018564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018568:	b002      	add	sp, #8
 801856a:	4770      	bx	lr
 801856c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018570:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018574:	bf14      	ite	ne
 8018576:	f104 33ff 	addne.w	r3, r4, #4294967295
 801857a:	4623      	moveq	r3, r4
 801857c:	9304      	str	r3, [sp, #16]
 801857e:	9307      	str	r3, [sp, #28]
 8018580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018584:	9002      	str	r0, [sp, #8]
 8018586:	9006      	str	r0, [sp, #24]
 8018588:	f8ad 3016 	strh.w	r3, [sp, #22]
 801858c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801858e:	ab21      	add	r3, sp, #132	; 0x84
 8018590:	a902      	add	r1, sp, #8
 8018592:	4628      	mov	r0, r5
 8018594:	9301      	str	r3, [sp, #4]
 8018596:	f000 f869 	bl	801866c <_svfiprintf_r>
 801859a:	1c43      	adds	r3, r0, #1
 801859c:	bfbc      	itt	lt
 801859e:	238b      	movlt	r3, #139	; 0x8b
 80185a0:	602b      	strlt	r3, [r5, #0]
 80185a2:	2c00      	cmp	r4, #0
 80185a4:	d0dd      	beq.n	8018562 <sniprintf+0x16>
 80185a6:	9b02      	ldr	r3, [sp, #8]
 80185a8:	2200      	movs	r2, #0
 80185aa:	701a      	strb	r2, [r3, #0]
 80185ac:	e7d9      	b.n	8018562 <sniprintf+0x16>
 80185ae:	bf00      	nop
 80185b0:	2000018c 	.word	0x2000018c

080185b4 <__ssputs_r>:
 80185b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185b8:	688e      	ldr	r6, [r1, #8]
 80185ba:	429e      	cmp	r6, r3
 80185bc:	4682      	mov	sl, r0
 80185be:	460c      	mov	r4, r1
 80185c0:	4690      	mov	r8, r2
 80185c2:	461f      	mov	r7, r3
 80185c4:	d838      	bhi.n	8018638 <__ssputs_r+0x84>
 80185c6:	898a      	ldrh	r2, [r1, #12]
 80185c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80185cc:	d032      	beq.n	8018634 <__ssputs_r+0x80>
 80185ce:	6825      	ldr	r5, [r4, #0]
 80185d0:	6909      	ldr	r1, [r1, #16]
 80185d2:	eba5 0901 	sub.w	r9, r5, r1
 80185d6:	6965      	ldr	r5, [r4, #20]
 80185d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80185dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80185e0:	3301      	adds	r3, #1
 80185e2:	444b      	add	r3, r9
 80185e4:	106d      	asrs	r5, r5, #1
 80185e6:	429d      	cmp	r5, r3
 80185e8:	bf38      	it	cc
 80185ea:	461d      	movcc	r5, r3
 80185ec:	0553      	lsls	r3, r2, #21
 80185ee:	d531      	bpl.n	8018654 <__ssputs_r+0xa0>
 80185f0:	4629      	mov	r1, r5
 80185f2:	f000 fb39 	bl	8018c68 <_malloc_r>
 80185f6:	4606      	mov	r6, r0
 80185f8:	b950      	cbnz	r0, 8018610 <__ssputs_r+0x5c>
 80185fa:	230c      	movs	r3, #12
 80185fc:	f8ca 3000 	str.w	r3, [sl]
 8018600:	89a3      	ldrh	r3, [r4, #12]
 8018602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018606:	81a3      	strh	r3, [r4, #12]
 8018608:	f04f 30ff 	mov.w	r0, #4294967295
 801860c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018610:	6921      	ldr	r1, [r4, #16]
 8018612:	464a      	mov	r2, r9
 8018614:	f7ff ff84 	bl	8018520 <memcpy>
 8018618:	89a3      	ldrh	r3, [r4, #12]
 801861a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801861e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018622:	81a3      	strh	r3, [r4, #12]
 8018624:	6126      	str	r6, [r4, #16]
 8018626:	6165      	str	r5, [r4, #20]
 8018628:	444e      	add	r6, r9
 801862a:	eba5 0509 	sub.w	r5, r5, r9
 801862e:	6026      	str	r6, [r4, #0]
 8018630:	60a5      	str	r5, [r4, #8]
 8018632:	463e      	mov	r6, r7
 8018634:	42be      	cmp	r6, r7
 8018636:	d900      	bls.n	801863a <__ssputs_r+0x86>
 8018638:	463e      	mov	r6, r7
 801863a:	4632      	mov	r2, r6
 801863c:	6820      	ldr	r0, [r4, #0]
 801863e:	4641      	mov	r1, r8
 8018640:	f000 faa8 	bl	8018b94 <memmove>
 8018644:	68a3      	ldr	r3, [r4, #8]
 8018646:	6822      	ldr	r2, [r4, #0]
 8018648:	1b9b      	subs	r3, r3, r6
 801864a:	4432      	add	r2, r6
 801864c:	60a3      	str	r3, [r4, #8]
 801864e:	6022      	str	r2, [r4, #0]
 8018650:	2000      	movs	r0, #0
 8018652:	e7db      	b.n	801860c <__ssputs_r+0x58>
 8018654:	462a      	mov	r2, r5
 8018656:	f000 fb61 	bl	8018d1c <_realloc_r>
 801865a:	4606      	mov	r6, r0
 801865c:	2800      	cmp	r0, #0
 801865e:	d1e1      	bne.n	8018624 <__ssputs_r+0x70>
 8018660:	6921      	ldr	r1, [r4, #16]
 8018662:	4650      	mov	r0, sl
 8018664:	f000 fab0 	bl	8018bc8 <_free_r>
 8018668:	e7c7      	b.n	80185fa <__ssputs_r+0x46>
	...

0801866c <_svfiprintf_r>:
 801866c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018670:	4698      	mov	r8, r3
 8018672:	898b      	ldrh	r3, [r1, #12]
 8018674:	061b      	lsls	r3, r3, #24
 8018676:	b09d      	sub	sp, #116	; 0x74
 8018678:	4607      	mov	r7, r0
 801867a:	460d      	mov	r5, r1
 801867c:	4614      	mov	r4, r2
 801867e:	d50e      	bpl.n	801869e <_svfiprintf_r+0x32>
 8018680:	690b      	ldr	r3, [r1, #16]
 8018682:	b963      	cbnz	r3, 801869e <_svfiprintf_r+0x32>
 8018684:	2140      	movs	r1, #64	; 0x40
 8018686:	f000 faef 	bl	8018c68 <_malloc_r>
 801868a:	6028      	str	r0, [r5, #0]
 801868c:	6128      	str	r0, [r5, #16]
 801868e:	b920      	cbnz	r0, 801869a <_svfiprintf_r+0x2e>
 8018690:	230c      	movs	r3, #12
 8018692:	603b      	str	r3, [r7, #0]
 8018694:	f04f 30ff 	mov.w	r0, #4294967295
 8018698:	e0d1      	b.n	801883e <_svfiprintf_r+0x1d2>
 801869a:	2340      	movs	r3, #64	; 0x40
 801869c:	616b      	str	r3, [r5, #20]
 801869e:	2300      	movs	r3, #0
 80186a0:	9309      	str	r3, [sp, #36]	; 0x24
 80186a2:	2320      	movs	r3, #32
 80186a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80186a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80186ac:	2330      	movs	r3, #48	; 0x30
 80186ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018858 <_svfiprintf_r+0x1ec>
 80186b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80186b6:	f04f 0901 	mov.w	r9, #1
 80186ba:	4623      	mov	r3, r4
 80186bc:	469a      	mov	sl, r3
 80186be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80186c2:	b10a      	cbz	r2, 80186c8 <_svfiprintf_r+0x5c>
 80186c4:	2a25      	cmp	r2, #37	; 0x25
 80186c6:	d1f9      	bne.n	80186bc <_svfiprintf_r+0x50>
 80186c8:	ebba 0b04 	subs.w	fp, sl, r4
 80186cc:	d00b      	beq.n	80186e6 <_svfiprintf_r+0x7a>
 80186ce:	465b      	mov	r3, fp
 80186d0:	4622      	mov	r2, r4
 80186d2:	4629      	mov	r1, r5
 80186d4:	4638      	mov	r0, r7
 80186d6:	f7ff ff6d 	bl	80185b4 <__ssputs_r>
 80186da:	3001      	adds	r0, #1
 80186dc:	f000 80aa 	beq.w	8018834 <_svfiprintf_r+0x1c8>
 80186e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80186e2:	445a      	add	r2, fp
 80186e4:	9209      	str	r2, [sp, #36]	; 0x24
 80186e6:	f89a 3000 	ldrb.w	r3, [sl]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	f000 80a2 	beq.w	8018834 <_svfiprintf_r+0x1c8>
 80186f0:	2300      	movs	r3, #0
 80186f2:	f04f 32ff 	mov.w	r2, #4294967295
 80186f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80186fa:	f10a 0a01 	add.w	sl, sl, #1
 80186fe:	9304      	str	r3, [sp, #16]
 8018700:	9307      	str	r3, [sp, #28]
 8018702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018706:	931a      	str	r3, [sp, #104]	; 0x68
 8018708:	4654      	mov	r4, sl
 801870a:	2205      	movs	r2, #5
 801870c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018710:	4851      	ldr	r0, [pc, #324]	; (8018858 <_svfiprintf_r+0x1ec>)
 8018712:	f7e7 fd5d 	bl	80001d0 <memchr>
 8018716:	9a04      	ldr	r2, [sp, #16]
 8018718:	b9d8      	cbnz	r0, 8018752 <_svfiprintf_r+0xe6>
 801871a:	06d0      	lsls	r0, r2, #27
 801871c:	bf44      	itt	mi
 801871e:	2320      	movmi	r3, #32
 8018720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018724:	0711      	lsls	r1, r2, #28
 8018726:	bf44      	itt	mi
 8018728:	232b      	movmi	r3, #43	; 0x2b
 801872a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801872e:	f89a 3000 	ldrb.w	r3, [sl]
 8018732:	2b2a      	cmp	r3, #42	; 0x2a
 8018734:	d015      	beq.n	8018762 <_svfiprintf_r+0xf6>
 8018736:	9a07      	ldr	r2, [sp, #28]
 8018738:	4654      	mov	r4, sl
 801873a:	2000      	movs	r0, #0
 801873c:	f04f 0c0a 	mov.w	ip, #10
 8018740:	4621      	mov	r1, r4
 8018742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018746:	3b30      	subs	r3, #48	; 0x30
 8018748:	2b09      	cmp	r3, #9
 801874a:	d94e      	bls.n	80187ea <_svfiprintf_r+0x17e>
 801874c:	b1b0      	cbz	r0, 801877c <_svfiprintf_r+0x110>
 801874e:	9207      	str	r2, [sp, #28]
 8018750:	e014      	b.n	801877c <_svfiprintf_r+0x110>
 8018752:	eba0 0308 	sub.w	r3, r0, r8
 8018756:	fa09 f303 	lsl.w	r3, r9, r3
 801875a:	4313      	orrs	r3, r2
 801875c:	9304      	str	r3, [sp, #16]
 801875e:	46a2      	mov	sl, r4
 8018760:	e7d2      	b.n	8018708 <_svfiprintf_r+0x9c>
 8018762:	9b03      	ldr	r3, [sp, #12]
 8018764:	1d19      	adds	r1, r3, #4
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	9103      	str	r1, [sp, #12]
 801876a:	2b00      	cmp	r3, #0
 801876c:	bfbb      	ittet	lt
 801876e:	425b      	neglt	r3, r3
 8018770:	f042 0202 	orrlt.w	r2, r2, #2
 8018774:	9307      	strge	r3, [sp, #28]
 8018776:	9307      	strlt	r3, [sp, #28]
 8018778:	bfb8      	it	lt
 801877a:	9204      	strlt	r2, [sp, #16]
 801877c:	7823      	ldrb	r3, [r4, #0]
 801877e:	2b2e      	cmp	r3, #46	; 0x2e
 8018780:	d10c      	bne.n	801879c <_svfiprintf_r+0x130>
 8018782:	7863      	ldrb	r3, [r4, #1]
 8018784:	2b2a      	cmp	r3, #42	; 0x2a
 8018786:	d135      	bne.n	80187f4 <_svfiprintf_r+0x188>
 8018788:	9b03      	ldr	r3, [sp, #12]
 801878a:	1d1a      	adds	r2, r3, #4
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	9203      	str	r2, [sp, #12]
 8018790:	2b00      	cmp	r3, #0
 8018792:	bfb8      	it	lt
 8018794:	f04f 33ff 	movlt.w	r3, #4294967295
 8018798:	3402      	adds	r4, #2
 801879a:	9305      	str	r3, [sp, #20]
 801879c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018868 <_svfiprintf_r+0x1fc>
 80187a0:	7821      	ldrb	r1, [r4, #0]
 80187a2:	2203      	movs	r2, #3
 80187a4:	4650      	mov	r0, sl
 80187a6:	f7e7 fd13 	bl	80001d0 <memchr>
 80187aa:	b140      	cbz	r0, 80187be <_svfiprintf_r+0x152>
 80187ac:	2340      	movs	r3, #64	; 0x40
 80187ae:	eba0 000a 	sub.w	r0, r0, sl
 80187b2:	fa03 f000 	lsl.w	r0, r3, r0
 80187b6:	9b04      	ldr	r3, [sp, #16]
 80187b8:	4303      	orrs	r3, r0
 80187ba:	3401      	adds	r4, #1
 80187bc:	9304      	str	r3, [sp, #16]
 80187be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187c2:	4826      	ldr	r0, [pc, #152]	; (801885c <_svfiprintf_r+0x1f0>)
 80187c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80187c8:	2206      	movs	r2, #6
 80187ca:	f7e7 fd01 	bl	80001d0 <memchr>
 80187ce:	2800      	cmp	r0, #0
 80187d0:	d038      	beq.n	8018844 <_svfiprintf_r+0x1d8>
 80187d2:	4b23      	ldr	r3, [pc, #140]	; (8018860 <_svfiprintf_r+0x1f4>)
 80187d4:	bb1b      	cbnz	r3, 801881e <_svfiprintf_r+0x1b2>
 80187d6:	9b03      	ldr	r3, [sp, #12]
 80187d8:	3307      	adds	r3, #7
 80187da:	f023 0307 	bic.w	r3, r3, #7
 80187de:	3308      	adds	r3, #8
 80187e0:	9303      	str	r3, [sp, #12]
 80187e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187e4:	4433      	add	r3, r6
 80187e6:	9309      	str	r3, [sp, #36]	; 0x24
 80187e8:	e767      	b.n	80186ba <_svfiprintf_r+0x4e>
 80187ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80187ee:	460c      	mov	r4, r1
 80187f0:	2001      	movs	r0, #1
 80187f2:	e7a5      	b.n	8018740 <_svfiprintf_r+0xd4>
 80187f4:	2300      	movs	r3, #0
 80187f6:	3401      	adds	r4, #1
 80187f8:	9305      	str	r3, [sp, #20]
 80187fa:	4619      	mov	r1, r3
 80187fc:	f04f 0c0a 	mov.w	ip, #10
 8018800:	4620      	mov	r0, r4
 8018802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018806:	3a30      	subs	r2, #48	; 0x30
 8018808:	2a09      	cmp	r2, #9
 801880a:	d903      	bls.n	8018814 <_svfiprintf_r+0x1a8>
 801880c:	2b00      	cmp	r3, #0
 801880e:	d0c5      	beq.n	801879c <_svfiprintf_r+0x130>
 8018810:	9105      	str	r1, [sp, #20]
 8018812:	e7c3      	b.n	801879c <_svfiprintf_r+0x130>
 8018814:	fb0c 2101 	mla	r1, ip, r1, r2
 8018818:	4604      	mov	r4, r0
 801881a:	2301      	movs	r3, #1
 801881c:	e7f0      	b.n	8018800 <_svfiprintf_r+0x194>
 801881e:	ab03      	add	r3, sp, #12
 8018820:	9300      	str	r3, [sp, #0]
 8018822:	462a      	mov	r2, r5
 8018824:	4b0f      	ldr	r3, [pc, #60]	; (8018864 <_svfiprintf_r+0x1f8>)
 8018826:	a904      	add	r1, sp, #16
 8018828:	4638      	mov	r0, r7
 801882a:	f3af 8000 	nop.w
 801882e:	1c42      	adds	r2, r0, #1
 8018830:	4606      	mov	r6, r0
 8018832:	d1d6      	bne.n	80187e2 <_svfiprintf_r+0x176>
 8018834:	89ab      	ldrh	r3, [r5, #12]
 8018836:	065b      	lsls	r3, r3, #25
 8018838:	f53f af2c 	bmi.w	8018694 <_svfiprintf_r+0x28>
 801883c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801883e:	b01d      	add	sp, #116	; 0x74
 8018840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018844:	ab03      	add	r3, sp, #12
 8018846:	9300      	str	r3, [sp, #0]
 8018848:	462a      	mov	r2, r5
 801884a:	4b06      	ldr	r3, [pc, #24]	; (8018864 <_svfiprintf_r+0x1f8>)
 801884c:	a904      	add	r1, sp, #16
 801884e:	4638      	mov	r0, r7
 8018850:	f000 f87a 	bl	8018948 <_printf_i>
 8018854:	e7eb      	b.n	801882e <_svfiprintf_r+0x1c2>
 8018856:	bf00      	nop
 8018858:	0801aca4 	.word	0x0801aca4
 801885c:	0801acae 	.word	0x0801acae
 8018860:	00000000 	.word	0x00000000
 8018864:	080185b5 	.word	0x080185b5
 8018868:	0801acaa 	.word	0x0801acaa

0801886c <_printf_common>:
 801886c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018870:	4616      	mov	r6, r2
 8018872:	4699      	mov	r9, r3
 8018874:	688a      	ldr	r2, [r1, #8]
 8018876:	690b      	ldr	r3, [r1, #16]
 8018878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801887c:	4293      	cmp	r3, r2
 801887e:	bfb8      	it	lt
 8018880:	4613      	movlt	r3, r2
 8018882:	6033      	str	r3, [r6, #0]
 8018884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018888:	4607      	mov	r7, r0
 801888a:	460c      	mov	r4, r1
 801888c:	b10a      	cbz	r2, 8018892 <_printf_common+0x26>
 801888e:	3301      	adds	r3, #1
 8018890:	6033      	str	r3, [r6, #0]
 8018892:	6823      	ldr	r3, [r4, #0]
 8018894:	0699      	lsls	r1, r3, #26
 8018896:	bf42      	ittt	mi
 8018898:	6833      	ldrmi	r3, [r6, #0]
 801889a:	3302      	addmi	r3, #2
 801889c:	6033      	strmi	r3, [r6, #0]
 801889e:	6825      	ldr	r5, [r4, #0]
 80188a0:	f015 0506 	ands.w	r5, r5, #6
 80188a4:	d106      	bne.n	80188b4 <_printf_common+0x48>
 80188a6:	f104 0a19 	add.w	sl, r4, #25
 80188aa:	68e3      	ldr	r3, [r4, #12]
 80188ac:	6832      	ldr	r2, [r6, #0]
 80188ae:	1a9b      	subs	r3, r3, r2
 80188b0:	42ab      	cmp	r3, r5
 80188b2:	dc26      	bgt.n	8018902 <_printf_common+0x96>
 80188b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80188b8:	1e13      	subs	r3, r2, #0
 80188ba:	6822      	ldr	r2, [r4, #0]
 80188bc:	bf18      	it	ne
 80188be:	2301      	movne	r3, #1
 80188c0:	0692      	lsls	r2, r2, #26
 80188c2:	d42b      	bmi.n	801891c <_printf_common+0xb0>
 80188c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80188c8:	4649      	mov	r1, r9
 80188ca:	4638      	mov	r0, r7
 80188cc:	47c0      	blx	r8
 80188ce:	3001      	adds	r0, #1
 80188d0:	d01e      	beq.n	8018910 <_printf_common+0xa4>
 80188d2:	6823      	ldr	r3, [r4, #0]
 80188d4:	68e5      	ldr	r5, [r4, #12]
 80188d6:	6832      	ldr	r2, [r6, #0]
 80188d8:	f003 0306 	and.w	r3, r3, #6
 80188dc:	2b04      	cmp	r3, #4
 80188de:	bf08      	it	eq
 80188e0:	1aad      	subeq	r5, r5, r2
 80188e2:	68a3      	ldr	r3, [r4, #8]
 80188e4:	6922      	ldr	r2, [r4, #16]
 80188e6:	bf0c      	ite	eq
 80188e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80188ec:	2500      	movne	r5, #0
 80188ee:	4293      	cmp	r3, r2
 80188f0:	bfc4      	itt	gt
 80188f2:	1a9b      	subgt	r3, r3, r2
 80188f4:	18ed      	addgt	r5, r5, r3
 80188f6:	2600      	movs	r6, #0
 80188f8:	341a      	adds	r4, #26
 80188fa:	42b5      	cmp	r5, r6
 80188fc:	d11a      	bne.n	8018934 <_printf_common+0xc8>
 80188fe:	2000      	movs	r0, #0
 8018900:	e008      	b.n	8018914 <_printf_common+0xa8>
 8018902:	2301      	movs	r3, #1
 8018904:	4652      	mov	r2, sl
 8018906:	4649      	mov	r1, r9
 8018908:	4638      	mov	r0, r7
 801890a:	47c0      	blx	r8
 801890c:	3001      	adds	r0, #1
 801890e:	d103      	bne.n	8018918 <_printf_common+0xac>
 8018910:	f04f 30ff 	mov.w	r0, #4294967295
 8018914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018918:	3501      	adds	r5, #1
 801891a:	e7c6      	b.n	80188aa <_printf_common+0x3e>
 801891c:	18e1      	adds	r1, r4, r3
 801891e:	1c5a      	adds	r2, r3, #1
 8018920:	2030      	movs	r0, #48	; 0x30
 8018922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018926:	4422      	add	r2, r4
 8018928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801892c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018930:	3302      	adds	r3, #2
 8018932:	e7c7      	b.n	80188c4 <_printf_common+0x58>
 8018934:	2301      	movs	r3, #1
 8018936:	4622      	mov	r2, r4
 8018938:	4649      	mov	r1, r9
 801893a:	4638      	mov	r0, r7
 801893c:	47c0      	blx	r8
 801893e:	3001      	adds	r0, #1
 8018940:	d0e6      	beq.n	8018910 <_printf_common+0xa4>
 8018942:	3601      	adds	r6, #1
 8018944:	e7d9      	b.n	80188fa <_printf_common+0x8e>
	...

08018948 <_printf_i>:
 8018948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801894c:	460c      	mov	r4, r1
 801894e:	4691      	mov	r9, r2
 8018950:	7e27      	ldrb	r7, [r4, #24]
 8018952:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018954:	2f78      	cmp	r7, #120	; 0x78
 8018956:	4680      	mov	r8, r0
 8018958:	469a      	mov	sl, r3
 801895a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801895e:	d807      	bhi.n	8018970 <_printf_i+0x28>
 8018960:	2f62      	cmp	r7, #98	; 0x62
 8018962:	d80a      	bhi.n	801897a <_printf_i+0x32>
 8018964:	2f00      	cmp	r7, #0
 8018966:	f000 80d8 	beq.w	8018b1a <_printf_i+0x1d2>
 801896a:	2f58      	cmp	r7, #88	; 0x58
 801896c:	f000 80a3 	beq.w	8018ab6 <_printf_i+0x16e>
 8018970:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018978:	e03a      	b.n	80189f0 <_printf_i+0xa8>
 801897a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801897e:	2b15      	cmp	r3, #21
 8018980:	d8f6      	bhi.n	8018970 <_printf_i+0x28>
 8018982:	a001      	add	r0, pc, #4	; (adr r0, 8018988 <_printf_i+0x40>)
 8018984:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018988:	080189e1 	.word	0x080189e1
 801898c:	080189f5 	.word	0x080189f5
 8018990:	08018971 	.word	0x08018971
 8018994:	08018971 	.word	0x08018971
 8018998:	08018971 	.word	0x08018971
 801899c:	08018971 	.word	0x08018971
 80189a0:	080189f5 	.word	0x080189f5
 80189a4:	08018971 	.word	0x08018971
 80189a8:	08018971 	.word	0x08018971
 80189ac:	08018971 	.word	0x08018971
 80189b0:	08018971 	.word	0x08018971
 80189b4:	08018b01 	.word	0x08018b01
 80189b8:	08018a25 	.word	0x08018a25
 80189bc:	08018ae3 	.word	0x08018ae3
 80189c0:	08018971 	.word	0x08018971
 80189c4:	08018971 	.word	0x08018971
 80189c8:	08018b23 	.word	0x08018b23
 80189cc:	08018971 	.word	0x08018971
 80189d0:	08018a25 	.word	0x08018a25
 80189d4:	08018971 	.word	0x08018971
 80189d8:	08018971 	.word	0x08018971
 80189dc:	08018aeb 	.word	0x08018aeb
 80189e0:	680b      	ldr	r3, [r1, #0]
 80189e2:	1d1a      	adds	r2, r3, #4
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	600a      	str	r2, [r1, #0]
 80189e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80189ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80189f0:	2301      	movs	r3, #1
 80189f2:	e0a3      	b.n	8018b3c <_printf_i+0x1f4>
 80189f4:	6825      	ldr	r5, [r4, #0]
 80189f6:	6808      	ldr	r0, [r1, #0]
 80189f8:	062e      	lsls	r6, r5, #24
 80189fa:	f100 0304 	add.w	r3, r0, #4
 80189fe:	d50a      	bpl.n	8018a16 <_printf_i+0xce>
 8018a00:	6805      	ldr	r5, [r0, #0]
 8018a02:	600b      	str	r3, [r1, #0]
 8018a04:	2d00      	cmp	r5, #0
 8018a06:	da03      	bge.n	8018a10 <_printf_i+0xc8>
 8018a08:	232d      	movs	r3, #45	; 0x2d
 8018a0a:	426d      	negs	r5, r5
 8018a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018a10:	485e      	ldr	r0, [pc, #376]	; (8018b8c <_printf_i+0x244>)
 8018a12:	230a      	movs	r3, #10
 8018a14:	e019      	b.n	8018a4a <_printf_i+0x102>
 8018a16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8018a1a:	6805      	ldr	r5, [r0, #0]
 8018a1c:	600b      	str	r3, [r1, #0]
 8018a1e:	bf18      	it	ne
 8018a20:	b22d      	sxthne	r5, r5
 8018a22:	e7ef      	b.n	8018a04 <_printf_i+0xbc>
 8018a24:	680b      	ldr	r3, [r1, #0]
 8018a26:	6825      	ldr	r5, [r4, #0]
 8018a28:	1d18      	adds	r0, r3, #4
 8018a2a:	6008      	str	r0, [r1, #0]
 8018a2c:	0628      	lsls	r0, r5, #24
 8018a2e:	d501      	bpl.n	8018a34 <_printf_i+0xec>
 8018a30:	681d      	ldr	r5, [r3, #0]
 8018a32:	e002      	b.n	8018a3a <_printf_i+0xf2>
 8018a34:	0669      	lsls	r1, r5, #25
 8018a36:	d5fb      	bpl.n	8018a30 <_printf_i+0xe8>
 8018a38:	881d      	ldrh	r5, [r3, #0]
 8018a3a:	4854      	ldr	r0, [pc, #336]	; (8018b8c <_printf_i+0x244>)
 8018a3c:	2f6f      	cmp	r7, #111	; 0x6f
 8018a3e:	bf0c      	ite	eq
 8018a40:	2308      	moveq	r3, #8
 8018a42:	230a      	movne	r3, #10
 8018a44:	2100      	movs	r1, #0
 8018a46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018a4a:	6866      	ldr	r6, [r4, #4]
 8018a4c:	60a6      	str	r6, [r4, #8]
 8018a4e:	2e00      	cmp	r6, #0
 8018a50:	bfa2      	ittt	ge
 8018a52:	6821      	ldrge	r1, [r4, #0]
 8018a54:	f021 0104 	bicge.w	r1, r1, #4
 8018a58:	6021      	strge	r1, [r4, #0]
 8018a5a:	b90d      	cbnz	r5, 8018a60 <_printf_i+0x118>
 8018a5c:	2e00      	cmp	r6, #0
 8018a5e:	d04d      	beq.n	8018afc <_printf_i+0x1b4>
 8018a60:	4616      	mov	r6, r2
 8018a62:	fbb5 f1f3 	udiv	r1, r5, r3
 8018a66:	fb03 5711 	mls	r7, r3, r1, r5
 8018a6a:	5dc7      	ldrb	r7, [r0, r7]
 8018a6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018a70:	462f      	mov	r7, r5
 8018a72:	42bb      	cmp	r3, r7
 8018a74:	460d      	mov	r5, r1
 8018a76:	d9f4      	bls.n	8018a62 <_printf_i+0x11a>
 8018a78:	2b08      	cmp	r3, #8
 8018a7a:	d10b      	bne.n	8018a94 <_printf_i+0x14c>
 8018a7c:	6823      	ldr	r3, [r4, #0]
 8018a7e:	07df      	lsls	r7, r3, #31
 8018a80:	d508      	bpl.n	8018a94 <_printf_i+0x14c>
 8018a82:	6923      	ldr	r3, [r4, #16]
 8018a84:	6861      	ldr	r1, [r4, #4]
 8018a86:	4299      	cmp	r1, r3
 8018a88:	bfde      	ittt	le
 8018a8a:	2330      	movle	r3, #48	; 0x30
 8018a8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018a90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018a94:	1b92      	subs	r2, r2, r6
 8018a96:	6122      	str	r2, [r4, #16]
 8018a98:	f8cd a000 	str.w	sl, [sp]
 8018a9c:	464b      	mov	r3, r9
 8018a9e:	aa03      	add	r2, sp, #12
 8018aa0:	4621      	mov	r1, r4
 8018aa2:	4640      	mov	r0, r8
 8018aa4:	f7ff fee2 	bl	801886c <_printf_common>
 8018aa8:	3001      	adds	r0, #1
 8018aaa:	d14c      	bne.n	8018b46 <_printf_i+0x1fe>
 8018aac:	f04f 30ff 	mov.w	r0, #4294967295
 8018ab0:	b004      	add	sp, #16
 8018ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ab6:	4835      	ldr	r0, [pc, #212]	; (8018b8c <_printf_i+0x244>)
 8018ab8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018abc:	6823      	ldr	r3, [r4, #0]
 8018abe:	680e      	ldr	r6, [r1, #0]
 8018ac0:	061f      	lsls	r7, r3, #24
 8018ac2:	f856 5b04 	ldr.w	r5, [r6], #4
 8018ac6:	600e      	str	r6, [r1, #0]
 8018ac8:	d514      	bpl.n	8018af4 <_printf_i+0x1ac>
 8018aca:	07d9      	lsls	r1, r3, #31
 8018acc:	bf44      	itt	mi
 8018ace:	f043 0320 	orrmi.w	r3, r3, #32
 8018ad2:	6023      	strmi	r3, [r4, #0]
 8018ad4:	b91d      	cbnz	r5, 8018ade <_printf_i+0x196>
 8018ad6:	6823      	ldr	r3, [r4, #0]
 8018ad8:	f023 0320 	bic.w	r3, r3, #32
 8018adc:	6023      	str	r3, [r4, #0]
 8018ade:	2310      	movs	r3, #16
 8018ae0:	e7b0      	b.n	8018a44 <_printf_i+0xfc>
 8018ae2:	6823      	ldr	r3, [r4, #0]
 8018ae4:	f043 0320 	orr.w	r3, r3, #32
 8018ae8:	6023      	str	r3, [r4, #0]
 8018aea:	2378      	movs	r3, #120	; 0x78
 8018aec:	4828      	ldr	r0, [pc, #160]	; (8018b90 <_printf_i+0x248>)
 8018aee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018af2:	e7e3      	b.n	8018abc <_printf_i+0x174>
 8018af4:	065e      	lsls	r6, r3, #25
 8018af6:	bf48      	it	mi
 8018af8:	b2ad      	uxthmi	r5, r5
 8018afa:	e7e6      	b.n	8018aca <_printf_i+0x182>
 8018afc:	4616      	mov	r6, r2
 8018afe:	e7bb      	b.n	8018a78 <_printf_i+0x130>
 8018b00:	680b      	ldr	r3, [r1, #0]
 8018b02:	6826      	ldr	r6, [r4, #0]
 8018b04:	6960      	ldr	r0, [r4, #20]
 8018b06:	1d1d      	adds	r5, r3, #4
 8018b08:	600d      	str	r5, [r1, #0]
 8018b0a:	0635      	lsls	r5, r6, #24
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	d501      	bpl.n	8018b14 <_printf_i+0x1cc>
 8018b10:	6018      	str	r0, [r3, #0]
 8018b12:	e002      	b.n	8018b1a <_printf_i+0x1d2>
 8018b14:	0671      	lsls	r1, r6, #25
 8018b16:	d5fb      	bpl.n	8018b10 <_printf_i+0x1c8>
 8018b18:	8018      	strh	r0, [r3, #0]
 8018b1a:	2300      	movs	r3, #0
 8018b1c:	6123      	str	r3, [r4, #16]
 8018b1e:	4616      	mov	r6, r2
 8018b20:	e7ba      	b.n	8018a98 <_printf_i+0x150>
 8018b22:	680b      	ldr	r3, [r1, #0]
 8018b24:	1d1a      	adds	r2, r3, #4
 8018b26:	600a      	str	r2, [r1, #0]
 8018b28:	681e      	ldr	r6, [r3, #0]
 8018b2a:	6862      	ldr	r2, [r4, #4]
 8018b2c:	2100      	movs	r1, #0
 8018b2e:	4630      	mov	r0, r6
 8018b30:	f7e7 fb4e 	bl	80001d0 <memchr>
 8018b34:	b108      	cbz	r0, 8018b3a <_printf_i+0x1f2>
 8018b36:	1b80      	subs	r0, r0, r6
 8018b38:	6060      	str	r0, [r4, #4]
 8018b3a:	6863      	ldr	r3, [r4, #4]
 8018b3c:	6123      	str	r3, [r4, #16]
 8018b3e:	2300      	movs	r3, #0
 8018b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018b44:	e7a8      	b.n	8018a98 <_printf_i+0x150>
 8018b46:	6923      	ldr	r3, [r4, #16]
 8018b48:	4632      	mov	r2, r6
 8018b4a:	4649      	mov	r1, r9
 8018b4c:	4640      	mov	r0, r8
 8018b4e:	47d0      	blx	sl
 8018b50:	3001      	adds	r0, #1
 8018b52:	d0ab      	beq.n	8018aac <_printf_i+0x164>
 8018b54:	6823      	ldr	r3, [r4, #0]
 8018b56:	079b      	lsls	r3, r3, #30
 8018b58:	d413      	bmi.n	8018b82 <_printf_i+0x23a>
 8018b5a:	68e0      	ldr	r0, [r4, #12]
 8018b5c:	9b03      	ldr	r3, [sp, #12]
 8018b5e:	4298      	cmp	r0, r3
 8018b60:	bfb8      	it	lt
 8018b62:	4618      	movlt	r0, r3
 8018b64:	e7a4      	b.n	8018ab0 <_printf_i+0x168>
 8018b66:	2301      	movs	r3, #1
 8018b68:	4632      	mov	r2, r6
 8018b6a:	4649      	mov	r1, r9
 8018b6c:	4640      	mov	r0, r8
 8018b6e:	47d0      	blx	sl
 8018b70:	3001      	adds	r0, #1
 8018b72:	d09b      	beq.n	8018aac <_printf_i+0x164>
 8018b74:	3501      	adds	r5, #1
 8018b76:	68e3      	ldr	r3, [r4, #12]
 8018b78:	9903      	ldr	r1, [sp, #12]
 8018b7a:	1a5b      	subs	r3, r3, r1
 8018b7c:	42ab      	cmp	r3, r5
 8018b7e:	dcf2      	bgt.n	8018b66 <_printf_i+0x21e>
 8018b80:	e7eb      	b.n	8018b5a <_printf_i+0x212>
 8018b82:	2500      	movs	r5, #0
 8018b84:	f104 0619 	add.w	r6, r4, #25
 8018b88:	e7f5      	b.n	8018b76 <_printf_i+0x22e>
 8018b8a:	bf00      	nop
 8018b8c:	0801acb5 	.word	0x0801acb5
 8018b90:	0801acc6 	.word	0x0801acc6

08018b94 <memmove>:
 8018b94:	4288      	cmp	r0, r1
 8018b96:	b510      	push	{r4, lr}
 8018b98:	eb01 0402 	add.w	r4, r1, r2
 8018b9c:	d902      	bls.n	8018ba4 <memmove+0x10>
 8018b9e:	4284      	cmp	r4, r0
 8018ba0:	4623      	mov	r3, r4
 8018ba2:	d807      	bhi.n	8018bb4 <memmove+0x20>
 8018ba4:	1e43      	subs	r3, r0, #1
 8018ba6:	42a1      	cmp	r1, r4
 8018ba8:	d008      	beq.n	8018bbc <memmove+0x28>
 8018baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018bae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018bb2:	e7f8      	b.n	8018ba6 <memmove+0x12>
 8018bb4:	4402      	add	r2, r0
 8018bb6:	4601      	mov	r1, r0
 8018bb8:	428a      	cmp	r2, r1
 8018bba:	d100      	bne.n	8018bbe <memmove+0x2a>
 8018bbc:	bd10      	pop	{r4, pc}
 8018bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018bc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018bc6:	e7f7      	b.n	8018bb8 <memmove+0x24>

08018bc8 <_free_r>:
 8018bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018bca:	2900      	cmp	r1, #0
 8018bcc:	d048      	beq.n	8018c60 <_free_r+0x98>
 8018bce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018bd2:	9001      	str	r0, [sp, #4]
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	f1a1 0404 	sub.w	r4, r1, #4
 8018bda:	bfb8      	it	lt
 8018bdc:	18e4      	addlt	r4, r4, r3
 8018bde:	f000 f8d3 	bl	8018d88 <__malloc_lock>
 8018be2:	4a20      	ldr	r2, [pc, #128]	; (8018c64 <_free_r+0x9c>)
 8018be4:	9801      	ldr	r0, [sp, #4]
 8018be6:	6813      	ldr	r3, [r2, #0]
 8018be8:	4615      	mov	r5, r2
 8018bea:	b933      	cbnz	r3, 8018bfa <_free_r+0x32>
 8018bec:	6063      	str	r3, [r4, #4]
 8018bee:	6014      	str	r4, [r2, #0]
 8018bf0:	b003      	add	sp, #12
 8018bf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018bf6:	f000 b8cd 	b.w	8018d94 <__malloc_unlock>
 8018bfa:	42a3      	cmp	r3, r4
 8018bfc:	d90b      	bls.n	8018c16 <_free_r+0x4e>
 8018bfe:	6821      	ldr	r1, [r4, #0]
 8018c00:	1862      	adds	r2, r4, r1
 8018c02:	4293      	cmp	r3, r2
 8018c04:	bf04      	itt	eq
 8018c06:	681a      	ldreq	r2, [r3, #0]
 8018c08:	685b      	ldreq	r3, [r3, #4]
 8018c0a:	6063      	str	r3, [r4, #4]
 8018c0c:	bf04      	itt	eq
 8018c0e:	1852      	addeq	r2, r2, r1
 8018c10:	6022      	streq	r2, [r4, #0]
 8018c12:	602c      	str	r4, [r5, #0]
 8018c14:	e7ec      	b.n	8018bf0 <_free_r+0x28>
 8018c16:	461a      	mov	r2, r3
 8018c18:	685b      	ldr	r3, [r3, #4]
 8018c1a:	b10b      	cbz	r3, 8018c20 <_free_r+0x58>
 8018c1c:	42a3      	cmp	r3, r4
 8018c1e:	d9fa      	bls.n	8018c16 <_free_r+0x4e>
 8018c20:	6811      	ldr	r1, [r2, #0]
 8018c22:	1855      	adds	r5, r2, r1
 8018c24:	42a5      	cmp	r5, r4
 8018c26:	d10b      	bne.n	8018c40 <_free_r+0x78>
 8018c28:	6824      	ldr	r4, [r4, #0]
 8018c2a:	4421      	add	r1, r4
 8018c2c:	1854      	adds	r4, r2, r1
 8018c2e:	42a3      	cmp	r3, r4
 8018c30:	6011      	str	r1, [r2, #0]
 8018c32:	d1dd      	bne.n	8018bf0 <_free_r+0x28>
 8018c34:	681c      	ldr	r4, [r3, #0]
 8018c36:	685b      	ldr	r3, [r3, #4]
 8018c38:	6053      	str	r3, [r2, #4]
 8018c3a:	4421      	add	r1, r4
 8018c3c:	6011      	str	r1, [r2, #0]
 8018c3e:	e7d7      	b.n	8018bf0 <_free_r+0x28>
 8018c40:	d902      	bls.n	8018c48 <_free_r+0x80>
 8018c42:	230c      	movs	r3, #12
 8018c44:	6003      	str	r3, [r0, #0]
 8018c46:	e7d3      	b.n	8018bf0 <_free_r+0x28>
 8018c48:	6825      	ldr	r5, [r4, #0]
 8018c4a:	1961      	adds	r1, r4, r5
 8018c4c:	428b      	cmp	r3, r1
 8018c4e:	bf04      	itt	eq
 8018c50:	6819      	ldreq	r1, [r3, #0]
 8018c52:	685b      	ldreq	r3, [r3, #4]
 8018c54:	6063      	str	r3, [r4, #4]
 8018c56:	bf04      	itt	eq
 8018c58:	1949      	addeq	r1, r1, r5
 8018c5a:	6021      	streq	r1, [r4, #0]
 8018c5c:	6054      	str	r4, [r2, #4]
 8018c5e:	e7c7      	b.n	8018bf0 <_free_r+0x28>
 8018c60:	b003      	add	sp, #12
 8018c62:	bd30      	pop	{r4, r5, pc}
 8018c64:	200015d4 	.word	0x200015d4

08018c68 <_malloc_r>:
 8018c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c6a:	1ccd      	adds	r5, r1, #3
 8018c6c:	f025 0503 	bic.w	r5, r5, #3
 8018c70:	3508      	adds	r5, #8
 8018c72:	2d0c      	cmp	r5, #12
 8018c74:	bf38      	it	cc
 8018c76:	250c      	movcc	r5, #12
 8018c78:	2d00      	cmp	r5, #0
 8018c7a:	4606      	mov	r6, r0
 8018c7c:	db01      	blt.n	8018c82 <_malloc_r+0x1a>
 8018c7e:	42a9      	cmp	r1, r5
 8018c80:	d903      	bls.n	8018c8a <_malloc_r+0x22>
 8018c82:	230c      	movs	r3, #12
 8018c84:	6033      	str	r3, [r6, #0]
 8018c86:	2000      	movs	r0, #0
 8018c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c8a:	f000 f87d 	bl	8018d88 <__malloc_lock>
 8018c8e:	4921      	ldr	r1, [pc, #132]	; (8018d14 <_malloc_r+0xac>)
 8018c90:	680a      	ldr	r2, [r1, #0]
 8018c92:	4614      	mov	r4, r2
 8018c94:	b99c      	cbnz	r4, 8018cbe <_malloc_r+0x56>
 8018c96:	4f20      	ldr	r7, [pc, #128]	; (8018d18 <_malloc_r+0xb0>)
 8018c98:	683b      	ldr	r3, [r7, #0]
 8018c9a:	b923      	cbnz	r3, 8018ca6 <_malloc_r+0x3e>
 8018c9c:	4621      	mov	r1, r4
 8018c9e:	4630      	mov	r0, r6
 8018ca0:	f000 f862 	bl	8018d68 <_sbrk_r>
 8018ca4:	6038      	str	r0, [r7, #0]
 8018ca6:	4629      	mov	r1, r5
 8018ca8:	4630      	mov	r0, r6
 8018caa:	f000 f85d 	bl	8018d68 <_sbrk_r>
 8018cae:	1c43      	adds	r3, r0, #1
 8018cb0:	d123      	bne.n	8018cfa <_malloc_r+0x92>
 8018cb2:	230c      	movs	r3, #12
 8018cb4:	6033      	str	r3, [r6, #0]
 8018cb6:	4630      	mov	r0, r6
 8018cb8:	f000 f86c 	bl	8018d94 <__malloc_unlock>
 8018cbc:	e7e3      	b.n	8018c86 <_malloc_r+0x1e>
 8018cbe:	6823      	ldr	r3, [r4, #0]
 8018cc0:	1b5b      	subs	r3, r3, r5
 8018cc2:	d417      	bmi.n	8018cf4 <_malloc_r+0x8c>
 8018cc4:	2b0b      	cmp	r3, #11
 8018cc6:	d903      	bls.n	8018cd0 <_malloc_r+0x68>
 8018cc8:	6023      	str	r3, [r4, #0]
 8018cca:	441c      	add	r4, r3
 8018ccc:	6025      	str	r5, [r4, #0]
 8018cce:	e004      	b.n	8018cda <_malloc_r+0x72>
 8018cd0:	6863      	ldr	r3, [r4, #4]
 8018cd2:	42a2      	cmp	r2, r4
 8018cd4:	bf0c      	ite	eq
 8018cd6:	600b      	streq	r3, [r1, #0]
 8018cd8:	6053      	strne	r3, [r2, #4]
 8018cda:	4630      	mov	r0, r6
 8018cdc:	f000 f85a 	bl	8018d94 <__malloc_unlock>
 8018ce0:	f104 000b 	add.w	r0, r4, #11
 8018ce4:	1d23      	adds	r3, r4, #4
 8018ce6:	f020 0007 	bic.w	r0, r0, #7
 8018cea:	1ac2      	subs	r2, r0, r3
 8018cec:	d0cc      	beq.n	8018c88 <_malloc_r+0x20>
 8018cee:	1a1b      	subs	r3, r3, r0
 8018cf0:	50a3      	str	r3, [r4, r2]
 8018cf2:	e7c9      	b.n	8018c88 <_malloc_r+0x20>
 8018cf4:	4622      	mov	r2, r4
 8018cf6:	6864      	ldr	r4, [r4, #4]
 8018cf8:	e7cc      	b.n	8018c94 <_malloc_r+0x2c>
 8018cfa:	1cc4      	adds	r4, r0, #3
 8018cfc:	f024 0403 	bic.w	r4, r4, #3
 8018d00:	42a0      	cmp	r0, r4
 8018d02:	d0e3      	beq.n	8018ccc <_malloc_r+0x64>
 8018d04:	1a21      	subs	r1, r4, r0
 8018d06:	4630      	mov	r0, r6
 8018d08:	f000 f82e 	bl	8018d68 <_sbrk_r>
 8018d0c:	3001      	adds	r0, #1
 8018d0e:	d1dd      	bne.n	8018ccc <_malloc_r+0x64>
 8018d10:	e7cf      	b.n	8018cb2 <_malloc_r+0x4a>
 8018d12:	bf00      	nop
 8018d14:	200015d4 	.word	0x200015d4
 8018d18:	200015d8 	.word	0x200015d8

08018d1c <_realloc_r>:
 8018d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d1e:	4607      	mov	r7, r0
 8018d20:	4614      	mov	r4, r2
 8018d22:	460e      	mov	r6, r1
 8018d24:	b921      	cbnz	r1, 8018d30 <_realloc_r+0x14>
 8018d26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018d2a:	4611      	mov	r1, r2
 8018d2c:	f7ff bf9c 	b.w	8018c68 <_malloc_r>
 8018d30:	b922      	cbnz	r2, 8018d3c <_realloc_r+0x20>
 8018d32:	f7ff ff49 	bl	8018bc8 <_free_r>
 8018d36:	4625      	mov	r5, r4
 8018d38:	4628      	mov	r0, r5
 8018d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d3c:	f000 f830 	bl	8018da0 <_malloc_usable_size_r>
 8018d40:	42a0      	cmp	r0, r4
 8018d42:	d20f      	bcs.n	8018d64 <_realloc_r+0x48>
 8018d44:	4621      	mov	r1, r4
 8018d46:	4638      	mov	r0, r7
 8018d48:	f7ff ff8e 	bl	8018c68 <_malloc_r>
 8018d4c:	4605      	mov	r5, r0
 8018d4e:	2800      	cmp	r0, #0
 8018d50:	d0f2      	beq.n	8018d38 <_realloc_r+0x1c>
 8018d52:	4631      	mov	r1, r6
 8018d54:	4622      	mov	r2, r4
 8018d56:	f7ff fbe3 	bl	8018520 <memcpy>
 8018d5a:	4631      	mov	r1, r6
 8018d5c:	4638      	mov	r0, r7
 8018d5e:	f7ff ff33 	bl	8018bc8 <_free_r>
 8018d62:	e7e9      	b.n	8018d38 <_realloc_r+0x1c>
 8018d64:	4635      	mov	r5, r6
 8018d66:	e7e7      	b.n	8018d38 <_realloc_r+0x1c>

08018d68 <_sbrk_r>:
 8018d68:	b538      	push	{r3, r4, r5, lr}
 8018d6a:	4d06      	ldr	r5, [pc, #24]	; (8018d84 <_sbrk_r+0x1c>)
 8018d6c:	2300      	movs	r3, #0
 8018d6e:	4604      	mov	r4, r0
 8018d70:	4608      	mov	r0, r1
 8018d72:	602b      	str	r3, [r5, #0]
 8018d74:	f7ea fbb6 	bl	80034e4 <_sbrk>
 8018d78:	1c43      	adds	r3, r0, #1
 8018d7a:	d102      	bne.n	8018d82 <_sbrk_r+0x1a>
 8018d7c:	682b      	ldr	r3, [r5, #0]
 8018d7e:	b103      	cbz	r3, 8018d82 <_sbrk_r+0x1a>
 8018d80:	6023      	str	r3, [r4, #0]
 8018d82:	bd38      	pop	{r3, r4, r5, pc}
 8018d84:	20001f98 	.word	0x20001f98

08018d88 <__malloc_lock>:
 8018d88:	4801      	ldr	r0, [pc, #4]	; (8018d90 <__malloc_lock+0x8>)
 8018d8a:	f000 b811 	b.w	8018db0 <__retarget_lock_acquire_recursive>
 8018d8e:	bf00      	nop
 8018d90:	20001fa0 	.word	0x20001fa0

08018d94 <__malloc_unlock>:
 8018d94:	4801      	ldr	r0, [pc, #4]	; (8018d9c <__malloc_unlock+0x8>)
 8018d96:	f000 b80c 	b.w	8018db2 <__retarget_lock_release_recursive>
 8018d9a:	bf00      	nop
 8018d9c:	20001fa0 	.word	0x20001fa0

08018da0 <_malloc_usable_size_r>:
 8018da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018da4:	1f18      	subs	r0, r3, #4
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	bfbc      	itt	lt
 8018daa:	580b      	ldrlt	r3, [r1, r0]
 8018dac:	18c0      	addlt	r0, r0, r3
 8018dae:	4770      	bx	lr

08018db0 <__retarget_lock_acquire_recursive>:
 8018db0:	4770      	bx	lr

08018db2 <__retarget_lock_release_recursive>:
 8018db2:	4770      	bx	lr
 8018db4:	0000      	movs	r0, r0
	...

08018db8 <ceil>:
 8018db8:	ec51 0b10 	vmov	r0, r1, d0
 8018dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dc0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8018dc4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018dc8:	2e13      	cmp	r6, #19
 8018dca:	ee10 5a10 	vmov	r5, s0
 8018dce:	ee10 8a10 	vmov	r8, s0
 8018dd2:	460c      	mov	r4, r1
 8018dd4:	dc30      	bgt.n	8018e38 <ceil+0x80>
 8018dd6:	2e00      	cmp	r6, #0
 8018dd8:	da12      	bge.n	8018e00 <ceil+0x48>
 8018dda:	a335      	add	r3, pc, #212	; (adr r3, 8018eb0 <ceil+0xf8>)
 8018ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018de0:	f7e7 fa4c 	bl	800027c <__adddf3>
 8018de4:	2200      	movs	r2, #0
 8018de6:	2300      	movs	r3, #0
 8018de8:	f7e7 fe8e 	bl	8000b08 <__aeabi_dcmpgt>
 8018dec:	b128      	cbz	r0, 8018dfa <ceil+0x42>
 8018dee:	2c00      	cmp	r4, #0
 8018df0:	db55      	blt.n	8018e9e <ceil+0xe6>
 8018df2:	432c      	orrs	r4, r5
 8018df4:	d057      	beq.n	8018ea6 <ceil+0xee>
 8018df6:	4c30      	ldr	r4, [pc, #192]	; (8018eb8 <ceil+0x100>)
 8018df8:	2500      	movs	r5, #0
 8018dfa:	4621      	mov	r1, r4
 8018dfc:	4628      	mov	r0, r5
 8018dfe:	e025      	b.n	8018e4c <ceil+0x94>
 8018e00:	4f2e      	ldr	r7, [pc, #184]	; (8018ebc <ceil+0x104>)
 8018e02:	4137      	asrs	r7, r6
 8018e04:	ea01 0307 	and.w	r3, r1, r7
 8018e08:	4303      	orrs	r3, r0
 8018e0a:	d01f      	beq.n	8018e4c <ceil+0x94>
 8018e0c:	a328      	add	r3, pc, #160	; (adr r3, 8018eb0 <ceil+0xf8>)
 8018e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e12:	f7e7 fa33 	bl	800027c <__adddf3>
 8018e16:	2200      	movs	r2, #0
 8018e18:	2300      	movs	r3, #0
 8018e1a:	f7e7 fe75 	bl	8000b08 <__aeabi_dcmpgt>
 8018e1e:	2800      	cmp	r0, #0
 8018e20:	d0eb      	beq.n	8018dfa <ceil+0x42>
 8018e22:	2c00      	cmp	r4, #0
 8018e24:	bfc2      	ittt	gt
 8018e26:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8018e2a:	fa43 f606 	asrgt.w	r6, r3, r6
 8018e2e:	19a4      	addgt	r4, r4, r6
 8018e30:	ea24 0407 	bic.w	r4, r4, r7
 8018e34:	2500      	movs	r5, #0
 8018e36:	e7e0      	b.n	8018dfa <ceil+0x42>
 8018e38:	2e33      	cmp	r6, #51	; 0x33
 8018e3a:	dd0b      	ble.n	8018e54 <ceil+0x9c>
 8018e3c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018e40:	d104      	bne.n	8018e4c <ceil+0x94>
 8018e42:	ee10 2a10 	vmov	r2, s0
 8018e46:	460b      	mov	r3, r1
 8018e48:	f7e7 fa18 	bl	800027c <__adddf3>
 8018e4c:	ec41 0b10 	vmov	d0, r0, r1
 8018e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e54:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8018e58:	f04f 33ff 	mov.w	r3, #4294967295
 8018e5c:	fa23 f707 	lsr.w	r7, r3, r7
 8018e60:	4207      	tst	r7, r0
 8018e62:	d0f3      	beq.n	8018e4c <ceil+0x94>
 8018e64:	a312      	add	r3, pc, #72	; (adr r3, 8018eb0 <ceil+0xf8>)
 8018e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e6a:	f7e7 fa07 	bl	800027c <__adddf3>
 8018e6e:	2200      	movs	r2, #0
 8018e70:	2300      	movs	r3, #0
 8018e72:	f7e7 fe49 	bl	8000b08 <__aeabi_dcmpgt>
 8018e76:	2800      	cmp	r0, #0
 8018e78:	d0bf      	beq.n	8018dfa <ceil+0x42>
 8018e7a:	2c00      	cmp	r4, #0
 8018e7c:	dd02      	ble.n	8018e84 <ceil+0xcc>
 8018e7e:	2e14      	cmp	r6, #20
 8018e80:	d103      	bne.n	8018e8a <ceil+0xd2>
 8018e82:	3401      	adds	r4, #1
 8018e84:	ea25 0507 	bic.w	r5, r5, r7
 8018e88:	e7b7      	b.n	8018dfa <ceil+0x42>
 8018e8a:	2301      	movs	r3, #1
 8018e8c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018e90:	fa03 f606 	lsl.w	r6, r3, r6
 8018e94:	4435      	add	r5, r6
 8018e96:	4545      	cmp	r5, r8
 8018e98:	bf38      	it	cc
 8018e9a:	18e4      	addcc	r4, r4, r3
 8018e9c:	e7f2      	b.n	8018e84 <ceil+0xcc>
 8018e9e:	2500      	movs	r5, #0
 8018ea0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8018ea4:	e7a9      	b.n	8018dfa <ceil+0x42>
 8018ea6:	4625      	mov	r5, r4
 8018ea8:	e7a7      	b.n	8018dfa <ceil+0x42>
 8018eaa:	bf00      	nop
 8018eac:	f3af 8000 	nop.w
 8018eb0:	8800759c 	.word	0x8800759c
 8018eb4:	7e37e43c 	.word	0x7e37e43c
 8018eb8:	3ff00000 	.word	0x3ff00000
 8018ebc:	000fffff 	.word	0x000fffff

08018ec0 <floor>:
 8018ec0:	ec51 0b10 	vmov	r0, r1, d0
 8018ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ec8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8018ecc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018ed0:	2e13      	cmp	r6, #19
 8018ed2:	ee10 5a10 	vmov	r5, s0
 8018ed6:	ee10 8a10 	vmov	r8, s0
 8018eda:	460c      	mov	r4, r1
 8018edc:	dc32      	bgt.n	8018f44 <floor+0x84>
 8018ede:	2e00      	cmp	r6, #0
 8018ee0:	da14      	bge.n	8018f0c <floor+0x4c>
 8018ee2:	a333      	add	r3, pc, #204	; (adr r3, 8018fb0 <floor+0xf0>)
 8018ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ee8:	f7e7 f9c8 	bl	800027c <__adddf3>
 8018eec:	2200      	movs	r2, #0
 8018eee:	2300      	movs	r3, #0
 8018ef0:	f7e7 fe0a 	bl	8000b08 <__aeabi_dcmpgt>
 8018ef4:	b138      	cbz	r0, 8018f06 <floor+0x46>
 8018ef6:	2c00      	cmp	r4, #0
 8018ef8:	da57      	bge.n	8018faa <floor+0xea>
 8018efa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8018efe:	431d      	orrs	r5, r3
 8018f00:	d001      	beq.n	8018f06 <floor+0x46>
 8018f02:	4c2d      	ldr	r4, [pc, #180]	; (8018fb8 <floor+0xf8>)
 8018f04:	2500      	movs	r5, #0
 8018f06:	4621      	mov	r1, r4
 8018f08:	4628      	mov	r0, r5
 8018f0a:	e025      	b.n	8018f58 <floor+0x98>
 8018f0c:	4f2b      	ldr	r7, [pc, #172]	; (8018fbc <floor+0xfc>)
 8018f0e:	4137      	asrs	r7, r6
 8018f10:	ea01 0307 	and.w	r3, r1, r7
 8018f14:	4303      	orrs	r3, r0
 8018f16:	d01f      	beq.n	8018f58 <floor+0x98>
 8018f18:	a325      	add	r3, pc, #148	; (adr r3, 8018fb0 <floor+0xf0>)
 8018f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f1e:	f7e7 f9ad 	bl	800027c <__adddf3>
 8018f22:	2200      	movs	r2, #0
 8018f24:	2300      	movs	r3, #0
 8018f26:	f7e7 fdef 	bl	8000b08 <__aeabi_dcmpgt>
 8018f2a:	2800      	cmp	r0, #0
 8018f2c:	d0eb      	beq.n	8018f06 <floor+0x46>
 8018f2e:	2c00      	cmp	r4, #0
 8018f30:	bfbe      	ittt	lt
 8018f32:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8018f36:	fa43 f606 	asrlt.w	r6, r3, r6
 8018f3a:	19a4      	addlt	r4, r4, r6
 8018f3c:	ea24 0407 	bic.w	r4, r4, r7
 8018f40:	2500      	movs	r5, #0
 8018f42:	e7e0      	b.n	8018f06 <floor+0x46>
 8018f44:	2e33      	cmp	r6, #51	; 0x33
 8018f46:	dd0b      	ble.n	8018f60 <floor+0xa0>
 8018f48:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018f4c:	d104      	bne.n	8018f58 <floor+0x98>
 8018f4e:	ee10 2a10 	vmov	r2, s0
 8018f52:	460b      	mov	r3, r1
 8018f54:	f7e7 f992 	bl	800027c <__adddf3>
 8018f58:	ec41 0b10 	vmov	d0, r0, r1
 8018f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f60:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8018f64:	f04f 33ff 	mov.w	r3, #4294967295
 8018f68:	fa23 f707 	lsr.w	r7, r3, r7
 8018f6c:	4207      	tst	r7, r0
 8018f6e:	d0f3      	beq.n	8018f58 <floor+0x98>
 8018f70:	a30f      	add	r3, pc, #60	; (adr r3, 8018fb0 <floor+0xf0>)
 8018f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f76:	f7e7 f981 	bl	800027c <__adddf3>
 8018f7a:	2200      	movs	r2, #0
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	f7e7 fdc3 	bl	8000b08 <__aeabi_dcmpgt>
 8018f82:	2800      	cmp	r0, #0
 8018f84:	d0bf      	beq.n	8018f06 <floor+0x46>
 8018f86:	2c00      	cmp	r4, #0
 8018f88:	da02      	bge.n	8018f90 <floor+0xd0>
 8018f8a:	2e14      	cmp	r6, #20
 8018f8c:	d103      	bne.n	8018f96 <floor+0xd6>
 8018f8e:	3401      	adds	r4, #1
 8018f90:	ea25 0507 	bic.w	r5, r5, r7
 8018f94:	e7b7      	b.n	8018f06 <floor+0x46>
 8018f96:	2301      	movs	r3, #1
 8018f98:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018f9c:	fa03 f606 	lsl.w	r6, r3, r6
 8018fa0:	4435      	add	r5, r6
 8018fa2:	4545      	cmp	r5, r8
 8018fa4:	bf38      	it	cc
 8018fa6:	18e4      	addcc	r4, r4, r3
 8018fa8:	e7f2      	b.n	8018f90 <floor+0xd0>
 8018faa:	2500      	movs	r5, #0
 8018fac:	462c      	mov	r4, r5
 8018fae:	e7aa      	b.n	8018f06 <floor+0x46>
 8018fb0:	8800759c 	.word	0x8800759c
 8018fb4:	7e37e43c 	.word	0x7e37e43c
 8018fb8:	bff00000 	.word	0xbff00000
 8018fbc:	000fffff 	.word	0x000fffff

08018fc0 <cosf>:
 8018fc0:	ee10 3a10 	vmov	r3, s0
 8018fc4:	b507      	push	{r0, r1, r2, lr}
 8018fc6:	4a1c      	ldr	r2, [pc, #112]	; (8019038 <cosf+0x78>)
 8018fc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018fcc:	4293      	cmp	r3, r2
 8018fce:	dc04      	bgt.n	8018fda <cosf+0x1a>
 8018fd0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801903c <cosf+0x7c>
 8018fd4:	f000 fe9e 	bl	8019d14 <__kernel_cosf>
 8018fd8:	e004      	b.n	8018fe4 <cosf+0x24>
 8018fda:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018fde:	db04      	blt.n	8018fea <cosf+0x2a>
 8018fe0:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018fe4:	b003      	add	sp, #12
 8018fe6:	f85d fb04 	ldr.w	pc, [sp], #4
 8018fea:	4668      	mov	r0, sp
 8018fec:	f000 fd52 	bl	8019a94 <__ieee754_rem_pio2f>
 8018ff0:	f000 0003 	and.w	r0, r0, #3
 8018ff4:	2801      	cmp	r0, #1
 8018ff6:	d007      	beq.n	8019008 <cosf+0x48>
 8018ff8:	2802      	cmp	r0, #2
 8018ffa:	d00e      	beq.n	801901a <cosf+0x5a>
 8018ffc:	b9a0      	cbnz	r0, 8019028 <cosf+0x68>
 8018ffe:	eddd 0a01 	vldr	s1, [sp, #4]
 8019002:	ed9d 0a00 	vldr	s0, [sp]
 8019006:	e7e5      	b.n	8018fd4 <cosf+0x14>
 8019008:	eddd 0a01 	vldr	s1, [sp, #4]
 801900c:	ed9d 0a00 	vldr	s0, [sp]
 8019010:	f001 f96a 	bl	801a2e8 <__kernel_sinf>
 8019014:	eeb1 0a40 	vneg.f32	s0, s0
 8019018:	e7e4      	b.n	8018fe4 <cosf+0x24>
 801901a:	eddd 0a01 	vldr	s1, [sp, #4]
 801901e:	ed9d 0a00 	vldr	s0, [sp]
 8019022:	f000 fe77 	bl	8019d14 <__kernel_cosf>
 8019026:	e7f5      	b.n	8019014 <cosf+0x54>
 8019028:	eddd 0a01 	vldr	s1, [sp, #4]
 801902c:	ed9d 0a00 	vldr	s0, [sp]
 8019030:	2001      	movs	r0, #1
 8019032:	f001 f959 	bl	801a2e8 <__kernel_sinf>
 8019036:	e7d5      	b.n	8018fe4 <cosf+0x24>
 8019038:	3f490fd8 	.word	0x3f490fd8
 801903c:	00000000 	.word	0x00000000

08019040 <roundf>:
 8019040:	ee10 0a10 	vmov	r0, s0
 8019044:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8019048:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801904c:	2a16      	cmp	r2, #22
 801904e:	dc15      	bgt.n	801907c <roundf+0x3c>
 8019050:	2a00      	cmp	r2, #0
 8019052:	da08      	bge.n	8019066 <roundf+0x26>
 8019054:	3201      	adds	r2, #1
 8019056:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801905a:	d101      	bne.n	8019060 <roundf+0x20>
 801905c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8019060:	ee00 3a10 	vmov	s0, r3
 8019064:	4770      	bx	lr
 8019066:	4908      	ldr	r1, [pc, #32]	; (8019088 <roundf+0x48>)
 8019068:	4111      	asrs	r1, r2
 801906a:	4208      	tst	r0, r1
 801906c:	d0fa      	beq.n	8019064 <roundf+0x24>
 801906e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8019072:	4113      	asrs	r3, r2
 8019074:	4403      	add	r3, r0
 8019076:	ea23 0301 	bic.w	r3, r3, r1
 801907a:	e7f1      	b.n	8019060 <roundf+0x20>
 801907c:	2a80      	cmp	r2, #128	; 0x80
 801907e:	d1f1      	bne.n	8019064 <roundf+0x24>
 8019080:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019084:	4770      	bx	lr
 8019086:	bf00      	nop
 8019088:	007fffff 	.word	0x007fffff

0801908c <sinf>:
 801908c:	ee10 3a10 	vmov	r3, s0
 8019090:	b507      	push	{r0, r1, r2, lr}
 8019092:	4a1d      	ldr	r2, [pc, #116]	; (8019108 <sinf+0x7c>)
 8019094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019098:	4293      	cmp	r3, r2
 801909a:	dc05      	bgt.n	80190a8 <sinf+0x1c>
 801909c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801910c <sinf+0x80>
 80190a0:	2000      	movs	r0, #0
 80190a2:	f001 f921 	bl	801a2e8 <__kernel_sinf>
 80190a6:	e004      	b.n	80190b2 <sinf+0x26>
 80190a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80190ac:	db04      	blt.n	80190b8 <sinf+0x2c>
 80190ae:	ee30 0a40 	vsub.f32	s0, s0, s0
 80190b2:	b003      	add	sp, #12
 80190b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80190b8:	4668      	mov	r0, sp
 80190ba:	f000 fceb 	bl	8019a94 <__ieee754_rem_pio2f>
 80190be:	f000 0003 	and.w	r0, r0, #3
 80190c2:	2801      	cmp	r0, #1
 80190c4:	d008      	beq.n	80190d8 <sinf+0x4c>
 80190c6:	2802      	cmp	r0, #2
 80190c8:	d00d      	beq.n	80190e6 <sinf+0x5a>
 80190ca:	b9b0      	cbnz	r0, 80190fa <sinf+0x6e>
 80190cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80190d0:	ed9d 0a00 	vldr	s0, [sp]
 80190d4:	2001      	movs	r0, #1
 80190d6:	e7e4      	b.n	80190a2 <sinf+0x16>
 80190d8:	eddd 0a01 	vldr	s1, [sp, #4]
 80190dc:	ed9d 0a00 	vldr	s0, [sp]
 80190e0:	f000 fe18 	bl	8019d14 <__kernel_cosf>
 80190e4:	e7e5      	b.n	80190b2 <sinf+0x26>
 80190e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80190ea:	ed9d 0a00 	vldr	s0, [sp]
 80190ee:	2001      	movs	r0, #1
 80190f0:	f001 f8fa 	bl	801a2e8 <__kernel_sinf>
 80190f4:	eeb1 0a40 	vneg.f32	s0, s0
 80190f8:	e7db      	b.n	80190b2 <sinf+0x26>
 80190fa:	eddd 0a01 	vldr	s1, [sp, #4]
 80190fe:	ed9d 0a00 	vldr	s0, [sp]
 8019102:	f000 fe07 	bl	8019d14 <__kernel_cosf>
 8019106:	e7f5      	b.n	80190f4 <sinf+0x68>
 8019108:	3f490fd8 	.word	0x3f490fd8
 801910c:	00000000 	.word	0x00000000

08019110 <tanf>:
 8019110:	ee10 3a10 	vmov	r3, s0
 8019114:	b507      	push	{r0, r1, r2, lr}
 8019116:	4a10      	ldr	r2, [pc, #64]	; (8019158 <tanf+0x48>)
 8019118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801911c:	4293      	cmp	r3, r2
 801911e:	dc05      	bgt.n	801912c <tanf+0x1c>
 8019120:	eddf 0a0e 	vldr	s1, [pc, #56]	; 801915c <tanf+0x4c>
 8019124:	2001      	movs	r0, #1
 8019126:	f001 f927 	bl	801a378 <__kernel_tanf>
 801912a:	e004      	b.n	8019136 <tanf+0x26>
 801912c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019130:	db04      	blt.n	801913c <tanf+0x2c>
 8019132:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019136:	b003      	add	sp, #12
 8019138:	f85d fb04 	ldr.w	pc, [sp], #4
 801913c:	4668      	mov	r0, sp
 801913e:	f000 fca9 	bl	8019a94 <__ieee754_rem_pio2f>
 8019142:	0040      	lsls	r0, r0, #1
 8019144:	f000 0002 	and.w	r0, r0, #2
 8019148:	eddd 0a01 	vldr	s1, [sp, #4]
 801914c:	ed9d 0a00 	vldr	s0, [sp]
 8019150:	f1c0 0001 	rsb	r0, r0, #1
 8019154:	e7e7      	b.n	8019126 <tanf+0x16>
 8019156:	bf00      	nop
 8019158:	3f490fda 	.word	0x3f490fda
 801915c:	00000000 	.word	0x00000000

08019160 <atan2>:
 8019160:	f000 b89a 	b.w	8019298 <__ieee754_atan2>

08019164 <sqrt>:
 8019164:	b538      	push	{r3, r4, r5, lr}
 8019166:	ed2d 8b02 	vpush	{d8}
 801916a:	ec55 4b10 	vmov	r4, r5, d0
 801916e:	f000 f95d 	bl	801942c <__ieee754_sqrt>
 8019172:	4b15      	ldr	r3, [pc, #84]	; (80191c8 <sqrt+0x64>)
 8019174:	eeb0 8a40 	vmov.f32	s16, s0
 8019178:	eef0 8a60 	vmov.f32	s17, s1
 801917c:	f993 3000 	ldrsb.w	r3, [r3]
 8019180:	3301      	adds	r3, #1
 8019182:	d019      	beq.n	80191b8 <sqrt+0x54>
 8019184:	4622      	mov	r2, r4
 8019186:	462b      	mov	r3, r5
 8019188:	4620      	mov	r0, r4
 801918a:	4629      	mov	r1, r5
 801918c:	f7e7 fcc6 	bl	8000b1c <__aeabi_dcmpun>
 8019190:	b990      	cbnz	r0, 80191b8 <sqrt+0x54>
 8019192:	2200      	movs	r2, #0
 8019194:	2300      	movs	r3, #0
 8019196:	4620      	mov	r0, r4
 8019198:	4629      	mov	r1, r5
 801919a:	f7e7 fc97 	bl	8000acc <__aeabi_dcmplt>
 801919e:	b158      	cbz	r0, 80191b8 <sqrt+0x54>
 80191a0:	f7ff f994 	bl	80184cc <__errno>
 80191a4:	2321      	movs	r3, #33	; 0x21
 80191a6:	6003      	str	r3, [r0, #0]
 80191a8:	2200      	movs	r2, #0
 80191aa:	2300      	movs	r3, #0
 80191ac:	4610      	mov	r0, r2
 80191ae:	4619      	mov	r1, r3
 80191b0:	f7e7 fb44 	bl	800083c <__aeabi_ddiv>
 80191b4:	ec41 0b18 	vmov	d8, r0, r1
 80191b8:	eeb0 0a48 	vmov.f32	s0, s16
 80191bc:	eef0 0a68 	vmov.f32	s1, s17
 80191c0:	ecbd 8b02 	vpop	{d8}
 80191c4:	bd38      	pop	{r3, r4, r5, pc}
 80191c6:	bf00      	nop
 80191c8:	200001f0 	.word	0x200001f0

080191cc <acosf>:
 80191cc:	b508      	push	{r3, lr}
 80191ce:	ed2d 8b02 	vpush	{d8}
 80191d2:	eeb0 8a40 	vmov.f32	s16, s0
 80191d6:	f000 f9dd 	bl	8019594 <__ieee754_acosf>
 80191da:	4b13      	ldr	r3, [pc, #76]	; (8019228 <acosf+0x5c>)
 80191dc:	f993 3000 	ldrsb.w	r3, [r3]
 80191e0:	3301      	adds	r3, #1
 80191e2:	eef0 8a40 	vmov.f32	s17, s0
 80191e6:	d01a      	beq.n	801921e <acosf+0x52>
 80191e8:	eeb4 8a48 	vcmp.f32	s16, s16
 80191ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191f0:	d615      	bvs.n	801921e <acosf+0x52>
 80191f2:	eeb0 0a48 	vmov.f32	s0, s16
 80191f6:	f001 fc21 	bl	801aa3c <fabsf>
 80191fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80191fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019206:	dd0a      	ble.n	801921e <acosf+0x52>
 8019208:	f7ff f960 	bl	80184cc <__errno>
 801920c:	ecbd 8b02 	vpop	{d8}
 8019210:	2321      	movs	r3, #33	; 0x21
 8019212:	6003      	str	r3, [r0, #0]
 8019214:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019218:	4804      	ldr	r0, [pc, #16]	; (801922c <acosf+0x60>)
 801921a:	f001 bc59 	b.w	801aad0 <nanf>
 801921e:	eeb0 0a68 	vmov.f32	s0, s17
 8019222:	ecbd 8b02 	vpop	{d8}
 8019226:	bd08      	pop	{r3, pc}
 8019228:	200001f0 	.word	0x200001f0
 801922c:	0801aca9 	.word	0x0801aca9

08019230 <asinf>:
 8019230:	b508      	push	{r3, lr}
 8019232:	ed2d 8b02 	vpush	{d8}
 8019236:	eeb0 8a40 	vmov.f32	s16, s0
 801923a:	f000 faa5 	bl	8019788 <__ieee754_asinf>
 801923e:	4b13      	ldr	r3, [pc, #76]	; (801928c <asinf+0x5c>)
 8019240:	f993 3000 	ldrsb.w	r3, [r3]
 8019244:	3301      	adds	r3, #1
 8019246:	eef0 8a40 	vmov.f32	s17, s0
 801924a:	d01a      	beq.n	8019282 <asinf+0x52>
 801924c:	eeb4 8a48 	vcmp.f32	s16, s16
 8019250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019254:	d615      	bvs.n	8019282 <asinf+0x52>
 8019256:	eeb0 0a48 	vmov.f32	s0, s16
 801925a:	f001 fbef 	bl	801aa3c <fabsf>
 801925e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019262:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801926a:	dd0a      	ble.n	8019282 <asinf+0x52>
 801926c:	f7ff f92e 	bl	80184cc <__errno>
 8019270:	ecbd 8b02 	vpop	{d8}
 8019274:	2321      	movs	r3, #33	; 0x21
 8019276:	6003      	str	r3, [r0, #0]
 8019278:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801927c:	4804      	ldr	r0, [pc, #16]	; (8019290 <asinf+0x60>)
 801927e:	f001 bc27 	b.w	801aad0 <nanf>
 8019282:	eeb0 0a68 	vmov.f32	s0, s17
 8019286:	ecbd 8b02 	vpop	{d8}
 801928a:	bd08      	pop	{r3, pc}
 801928c:	200001f0 	.word	0x200001f0
 8019290:	0801aca9 	.word	0x0801aca9

08019294 <atan2f>:
 8019294:	f000 bb5e 	b.w	8019954 <__ieee754_atan2f>

08019298 <__ieee754_atan2>:
 8019298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801929c:	ec57 6b11 	vmov	r6, r7, d1
 80192a0:	4273      	negs	r3, r6
 80192a2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8019428 <__ieee754_atan2+0x190>
 80192a6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80192aa:	4333      	orrs	r3, r6
 80192ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80192b0:	4573      	cmp	r3, lr
 80192b2:	ec51 0b10 	vmov	r0, r1, d0
 80192b6:	ee11 8a10 	vmov	r8, s2
 80192ba:	d80a      	bhi.n	80192d2 <__ieee754_atan2+0x3a>
 80192bc:	4244      	negs	r4, r0
 80192be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80192c2:	4304      	orrs	r4, r0
 80192c4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80192c8:	4574      	cmp	r4, lr
 80192ca:	ee10 9a10 	vmov	r9, s0
 80192ce:	468c      	mov	ip, r1
 80192d0:	d907      	bls.n	80192e2 <__ieee754_atan2+0x4a>
 80192d2:	4632      	mov	r2, r6
 80192d4:	463b      	mov	r3, r7
 80192d6:	f7e6 ffd1 	bl	800027c <__adddf3>
 80192da:	ec41 0b10 	vmov	d0, r0, r1
 80192de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192e2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80192e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80192ea:	4334      	orrs	r4, r6
 80192ec:	d103      	bne.n	80192f6 <__ieee754_atan2+0x5e>
 80192ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192f2:	f001 b925 	b.w	801a540 <atan>
 80192f6:	17bc      	asrs	r4, r7, #30
 80192f8:	f004 0402 	and.w	r4, r4, #2
 80192fc:	ea53 0909 	orrs.w	r9, r3, r9
 8019300:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8019304:	d107      	bne.n	8019316 <__ieee754_atan2+0x7e>
 8019306:	2c02      	cmp	r4, #2
 8019308:	d060      	beq.n	80193cc <__ieee754_atan2+0x134>
 801930a:	2c03      	cmp	r4, #3
 801930c:	d1e5      	bne.n	80192da <__ieee754_atan2+0x42>
 801930e:	a142      	add	r1, pc, #264	; (adr r1, 8019418 <__ieee754_atan2+0x180>)
 8019310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019314:	e7e1      	b.n	80192da <__ieee754_atan2+0x42>
 8019316:	ea52 0808 	orrs.w	r8, r2, r8
 801931a:	d106      	bne.n	801932a <__ieee754_atan2+0x92>
 801931c:	f1bc 0f00 	cmp.w	ip, #0
 8019320:	da5f      	bge.n	80193e2 <__ieee754_atan2+0x14a>
 8019322:	a13f      	add	r1, pc, #252	; (adr r1, 8019420 <__ieee754_atan2+0x188>)
 8019324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019328:	e7d7      	b.n	80192da <__ieee754_atan2+0x42>
 801932a:	4572      	cmp	r2, lr
 801932c:	d10f      	bne.n	801934e <__ieee754_atan2+0xb6>
 801932e:	4293      	cmp	r3, r2
 8019330:	f104 34ff 	add.w	r4, r4, #4294967295
 8019334:	d107      	bne.n	8019346 <__ieee754_atan2+0xae>
 8019336:	2c02      	cmp	r4, #2
 8019338:	d84c      	bhi.n	80193d4 <__ieee754_atan2+0x13c>
 801933a:	4b35      	ldr	r3, [pc, #212]	; (8019410 <__ieee754_atan2+0x178>)
 801933c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8019340:	e9d4 0100 	ldrd	r0, r1, [r4]
 8019344:	e7c9      	b.n	80192da <__ieee754_atan2+0x42>
 8019346:	2c02      	cmp	r4, #2
 8019348:	d848      	bhi.n	80193dc <__ieee754_atan2+0x144>
 801934a:	4b32      	ldr	r3, [pc, #200]	; (8019414 <__ieee754_atan2+0x17c>)
 801934c:	e7f6      	b.n	801933c <__ieee754_atan2+0xa4>
 801934e:	4573      	cmp	r3, lr
 8019350:	d0e4      	beq.n	801931c <__ieee754_atan2+0x84>
 8019352:	1a9b      	subs	r3, r3, r2
 8019354:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8019358:	ea4f 5223 	mov.w	r2, r3, asr #20
 801935c:	da1e      	bge.n	801939c <__ieee754_atan2+0x104>
 801935e:	2f00      	cmp	r7, #0
 8019360:	da01      	bge.n	8019366 <__ieee754_atan2+0xce>
 8019362:	323c      	adds	r2, #60	; 0x3c
 8019364:	db1e      	blt.n	80193a4 <__ieee754_atan2+0x10c>
 8019366:	4632      	mov	r2, r6
 8019368:	463b      	mov	r3, r7
 801936a:	f7e7 fa67 	bl	800083c <__aeabi_ddiv>
 801936e:	ec41 0b10 	vmov	d0, r0, r1
 8019372:	f001 fa85 	bl	801a880 <fabs>
 8019376:	f001 f8e3 	bl	801a540 <atan>
 801937a:	ec51 0b10 	vmov	r0, r1, d0
 801937e:	2c01      	cmp	r4, #1
 8019380:	d013      	beq.n	80193aa <__ieee754_atan2+0x112>
 8019382:	2c02      	cmp	r4, #2
 8019384:	d015      	beq.n	80193b2 <__ieee754_atan2+0x11a>
 8019386:	2c00      	cmp	r4, #0
 8019388:	d0a7      	beq.n	80192da <__ieee754_atan2+0x42>
 801938a:	a319      	add	r3, pc, #100	; (adr r3, 80193f0 <__ieee754_atan2+0x158>)
 801938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019390:	f7e6 ff72 	bl	8000278 <__aeabi_dsub>
 8019394:	a318      	add	r3, pc, #96	; (adr r3, 80193f8 <__ieee754_atan2+0x160>)
 8019396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801939a:	e014      	b.n	80193c6 <__ieee754_atan2+0x12e>
 801939c:	a118      	add	r1, pc, #96	; (adr r1, 8019400 <__ieee754_atan2+0x168>)
 801939e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80193a2:	e7ec      	b.n	801937e <__ieee754_atan2+0xe6>
 80193a4:	2000      	movs	r0, #0
 80193a6:	2100      	movs	r1, #0
 80193a8:	e7e9      	b.n	801937e <__ieee754_atan2+0xe6>
 80193aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80193ae:	4619      	mov	r1, r3
 80193b0:	e793      	b.n	80192da <__ieee754_atan2+0x42>
 80193b2:	a30f      	add	r3, pc, #60	; (adr r3, 80193f0 <__ieee754_atan2+0x158>)
 80193b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193b8:	f7e6 ff5e 	bl	8000278 <__aeabi_dsub>
 80193bc:	4602      	mov	r2, r0
 80193be:	460b      	mov	r3, r1
 80193c0:	a10d      	add	r1, pc, #52	; (adr r1, 80193f8 <__ieee754_atan2+0x160>)
 80193c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80193c6:	f7e6 ff57 	bl	8000278 <__aeabi_dsub>
 80193ca:	e786      	b.n	80192da <__ieee754_atan2+0x42>
 80193cc:	a10a      	add	r1, pc, #40	; (adr r1, 80193f8 <__ieee754_atan2+0x160>)
 80193ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80193d2:	e782      	b.n	80192da <__ieee754_atan2+0x42>
 80193d4:	a10c      	add	r1, pc, #48	; (adr r1, 8019408 <__ieee754_atan2+0x170>)
 80193d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80193da:	e77e      	b.n	80192da <__ieee754_atan2+0x42>
 80193dc:	2000      	movs	r0, #0
 80193de:	2100      	movs	r1, #0
 80193e0:	e77b      	b.n	80192da <__ieee754_atan2+0x42>
 80193e2:	a107      	add	r1, pc, #28	; (adr r1, 8019400 <__ieee754_atan2+0x168>)
 80193e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80193e8:	e777      	b.n	80192da <__ieee754_atan2+0x42>
 80193ea:	bf00      	nop
 80193ec:	f3af 8000 	nop.w
 80193f0:	33145c07 	.word	0x33145c07
 80193f4:	3ca1a626 	.word	0x3ca1a626
 80193f8:	54442d18 	.word	0x54442d18
 80193fc:	400921fb 	.word	0x400921fb
 8019400:	54442d18 	.word	0x54442d18
 8019404:	3ff921fb 	.word	0x3ff921fb
 8019408:	54442d18 	.word	0x54442d18
 801940c:	3fe921fb 	.word	0x3fe921fb
 8019410:	0801acd8 	.word	0x0801acd8
 8019414:	0801acf0 	.word	0x0801acf0
 8019418:	54442d18 	.word	0x54442d18
 801941c:	c00921fb 	.word	0xc00921fb
 8019420:	54442d18 	.word	0x54442d18
 8019424:	bff921fb 	.word	0xbff921fb
 8019428:	7ff00000 	.word	0x7ff00000

0801942c <__ieee754_sqrt>:
 801942c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019430:	ec55 4b10 	vmov	r4, r5, d0
 8019434:	4e56      	ldr	r6, [pc, #344]	; (8019590 <__ieee754_sqrt+0x164>)
 8019436:	43ae      	bics	r6, r5
 8019438:	ee10 0a10 	vmov	r0, s0
 801943c:	ee10 3a10 	vmov	r3, s0
 8019440:	4629      	mov	r1, r5
 8019442:	462a      	mov	r2, r5
 8019444:	d110      	bne.n	8019468 <__ieee754_sqrt+0x3c>
 8019446:	ee10 2a10 	vmov	r2, s0
 801944a:	462b      	mov	r3, r5
 801944c:	f7e7 f8cc 	bl	80005e8 <__aeabi_dmul>
 8019450:	4602      	mov	r2, r0
 8019452:	460b      	mov	r3, r1
 8019454:	4620      	mov	r0, r4
 8019456:	4629      	mov	r1, r5
 8019458:	f7e6 ff10 	bl	800027c <__adddf3>
 801945c:	4604      	mov	r4, r0
 801945e:	460d      	mov	r5, r1
 8019460:	ec45 4b10 	vmov	d0, r4, r5
 8019464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019468:	2d00      	cmp	r5, #0
 801946a:	dc10      	bgt.n	801948e <__ieee754_sqrt+0x62>
 801946c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019470:	4330      	orrs	r0, r6
 8019472:	d0f5      	beq.n	8019460 <__ieee754_sqrt+0x34>
 8019474:	b15d      	cbz	r5, 801948e <__ieee754_sqrt+0x62>
 8019476:	ee10 2a10 	vmov	r2, s0
 801947a:	462b      	mov	r3, r5
 801947c:	ee10 0a10 	vmov	r0, s0
 8019480:	f7e6 fefa 	bl	8000278 <__aeabi_dsub>
 8019484:	4602      	mov	r2, r0
 8019486:	460b      	mov	r3, r1
 8019488:	f7e7 f9d8 	bl	800083c <__aeabi_ddiv>
 801948c:	e7e6      	b.n	801945c <__ieee754_sqrt+0x30>
 801948e:	1509      	asrs	r1, r1, #20
 8019490:	d076      	beq.n	8019580 <__ieee754_sqrt+0x154>
 8019492:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019496:	07ce      	lsls	r6, r1, #31
 8019498:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801949c:	bf5e      	ittt	pl
 801949e:	0fda      	lsrpl	r2, r3, #31
 80194a0:	005b      	lslpl	r3, r3, #1
 80194a2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80194a6:	0fda      	lsrs	r2, r3, #31
 80194a8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80194ac:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80194b0:	2000      	movs	r0, #0
 80194b2:	106d      	asrs	r5, r5, #1
 80194b4:	005b      	lsls	r3, r3, #1
 80194b6:	f04f 0e16 	mov.w	lr, #22
 80194ba:	4684      	mov	ip, r0
 80194bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80194c0:	eb0c 0401 	add.w	r4, ip, r1
 80194c4:	4294      	cmp	r4, r2
 80194c6:	bfde      	ittt	le
 80194c8:	1b12      	suble	r2, r2, r4
 80194ca:	eb04 0c01 	addle.w	ip, r4, r1
 80194ce:	1840      	addle	r0, r0, r1
 80194d0:	0052      	lsls	r2, r2, #1
 80194d2:	f1be 0e01 	subs.w	lr, lr, #1
 80194d6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80194da:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80194de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80194e2:	d1ed      	bne.n	80194c0 <__ieee754_sqrt+0x94>
 80194e4:	4671      	mov	r1, lr
 80194e6:	2720      	movs	r7, #32
 80194e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80194ec:	4562      	cmp	r2, ip
 80194ee:	eb04 060e 	add.w	r6, r4, lr
 80194f2:	dc02      	bgt.n	80194fa <__ieee754_sqrt+0xce>
 80194f4:	d113      	bne.n	801951e <__ieee754_sqrt+0xf2>
 80194f6:	429e      	cmp	r6, r3
 80194f8:	d811      	bhi.n	801951e <__ieee754_sqrt+0xf2>
 80194fa:	2e00      	cmp	r6, #0
 80194fc:	eb06 0e04 	add.w	lr, r6, r4
 8019500:	da43      	bge.n	801958a <__ieee754_sqrt+0x15e>
 8019502:	f1be 0f00 	cmp.w	lr, #0
 8019506:	db40      	blt.n	801958a <__ieee754_sqrt+0x15e>
 8019508:	f10c 0801 	add.w	r8, ip, #1
 801950c:	eba2 020c 	sub.w	r2, r2, ip
 8019510:	429e      	cmp	r6, r3
 8019512:	bf88      	it	hi
 8019514:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019518:	1b9b      	subs	r3, r3, r6
 801951a:	4421      	add	r1, r4
 801951c:	46c4      	mov	ip, r8
 801951e:	0052      	lsls	r2, r2, #1
 8019520:	3f01      	subs	r7, #1
 8019522:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8019526:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801952a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801952e:	d1dd      	bne.n	80194ec <__ieee754_sqrt+0xc0>
 8019530:	4313      	orrs	r3, r2
 8019532:	d006      	beq.n	8019542 <__ieee754_sqrt+0x116>
 8019534:	1c4c      	adds	r4, r1, #1
 8019536:	bf13      	iteet	ne
 8019538:	3101      	addne	r1, #1
 801953a:	3001      	addeq	r0, #1
 801953c:	4639      	moveq	r1, r7
 801953e:	f021 0101 	bicne.w	r1, r1, #1
 8019542:	1043      	asrs	r3, r0, #1
 8019544:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8019548:	0849      	lsrs	r1, r1, #1
 801954a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801954e:	07c2      	lsls	r2, r0, #31
 8019550:	bf48      	it	mi
 8019552:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8019556:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801955a:	460c      	mov	r4, r1
 801955c:	463d      	mov	r5, r7
 801955e:	e77f      	b.n	8019460 <__ieee754_sqrt+0x34>
 8019560:	0ada      	lsrs	r2, r3, #11
 8019562:	3815      	subs	r0, #21
 8019564:	055b      	lsls	r3, r3, #21
 8019566:	2a00      	cmp	r2, #0
 8019568:	d0fa      	beq.n	8019560 <__ieee754_sqrt+0x134>
 801956a:	02d7      	lsls	r7, r2, #11
 801956c:	d50a      	bpl.n	8019584 <__ieee754_sqrt+0x158>
 801956e:	f1c1 0420 	rsb	r4, r1, #32
 8019572:	fa23 f404 	lsr.w	r4, r3, r4
 8019576:	1e4d      	subs	r5, r1, #1
 8019578:	408b      	lsls	r3, r1
 801957a:	4322      	orrs	r2, r4
 801957c:	1b41      	subs	r1, r0, r5
 801957e:	e788      	b.n	8019492 <__ieee754_sqrt+0x66>
 8019580:	4608      	mov	r0, r1
 8019582:	e7f0      	b.n	8019566 <__ieee754_sqrt+0x13a>
 8019584:	0052      	lsls	r2, r2, #1
 8019586:	3101      	adds	r1, #1
 8019588:	e7ef      	b.n	801956a <__ieee754_sqrt+0x13e>
 801958a:	46e0      	mov	r8, ip
 801958c:	e7be      	b.n	801950c <__ieee754_sqrt+0xe0>
 801958e:	bf00      	nop
 8019590:	7ff00000 	.word	0x7ff00000

08019594 <__ieee754_acosf>:
 8019594:	b508      	push	{r3, lr}
 8019596:	ee10 3a10 	vmov	r3, s0
 801959a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801959e:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80195a2:	ed2d 8b0c 	vpush	{d8-d13}
 80195a6:	d10a      	bne.n	80195be <__ieee754_acosf+0x2a>
 80195a8:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8019744 <__ieee754_acosf+0x1b0>
 80195ac:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8019748 <__ieee754_acosf+0x1b4>
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	bfd8      	it	le
 80195b4:	eeb0 0a48 	vmovle.f32	s0, s16
 80195b8:	ecbd 8b0c 	vpop	{d8-d13}
 80195bc:	bd08      	pop	{r3, pc}
 80195be:	dd04      	ble.n	80195ca <__ieee754_acosf+0x36>
 80195c0:	ee30 8a40 	vsub.f32	s16, s0, s0
 80195c4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80195c8:	e7f6      	b.n	80195b8 <__ieee754_acosf+0x24>
 80195ca:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80195ce:	da3e      	bge.n	801964e <__ieee754_acosf+0xba>
 80195d0:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80195d4:	f340 80b3 	ble.w	801973e <__ieee754_acosf+0x1aa>
 80195d8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80195dc:	eddf 6a5b 	vldr	s13, [pc, #364]	; 801974c <__ieee754_acosf+0x1b8>
 80195e0:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8019750 <__ieee754_acosf+0x1bc>
 80195e4:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 8019754 <__ieee754_acosf+0x1c0>
 80195e8:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8019758 <__ieee754_acosf+0x1c4>
 80195ec:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80195f0:	eddf 6a5a 	vldr	s13, [pc, #360]	; 801975c <__ieee754_acosf+0x1c8>
 80195f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80195f8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8019760 <__ieee754_acosf+0x1cc>
 80195fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019600:	eddf 6a58 	vldr	s13, [pc, #352]	; 8019764 <__ieee754_acosf+0x1d0>
 8019604:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019608:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8019768 <__ieee754_acosf+0x1d4>
 801960c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019610:	eddf 6a56 	vldr	s13, [pc, #344]	; 801976c <__ieee754_acosf+0x1d8>
 8019614:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8019618:	eddf 6a55 	vldr	s13, [pc, #340]	; 8019770 <__ieee754_acosf+0x1dc>
 801961c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019620:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8019774 <__ieee754_acosf+0x1e0>
 8019624:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8019628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801962c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019630:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019634:	eef0 7a66 	vmov.f32	s15, s13
 8019638:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801963c:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8019778 <__ieee754_acosf+0x1e4>
 8019640:	eea0 8a66 	vfms.f32	s16, s0, s13
 8019644:	ee30 0a48 	vsub.f32	s0, s0, s16
 8019648:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801964c:	e7b4      	b.n	80195b8 <__ieee754_acosf+0x24>
 801964e:	2b00      	cmp	r3, #0
 8019650:	eddf da3e 	vldr	s27, [pc, #248]	; 801974c <__ieee754_acosf+0x1b8>
 8019654:	eddf ca3e 	vldr	s25, [pc, #248]	; 8019750 <__ieee754_acosf+0x1bc>
 8019658:	ed9f ca40 	vldr	s24, [pc, #256]	; 801975c <__ieee754_acosf+0x1c8>
 801965c:	eddf ba40 	vldr	s23, [pc, #256]	; 8019760 <__ieee754_acosf+0x1cc>
 8019660:	ed9f ba40 	vldr	s22, [pc, #256]	; 8019764 <__ieee754_acosf+0x1d0>
 8019664:	eddf 8a40 	vldr	s17, [pc, #256]	; 8019768 <__ieee754_acosf+0x1d4>
 8019668:	ed9f da40 	vldr	s26, [pc, #256]	; 801976c <__ieee754_acosf+0x1d8>
 801966c:	eddf aa39 	vldr	s21, [pc, #228]	; 8019754 <__ieee754_acosf+0x1c0>
 8019670:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8019770 <__ieee754_acosf+0x1dc>
 8019674:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8019774 <__ieee754_acosf+0x1e0>
 8019678:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801967c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019680:	da28      	bge.n	80196d4 <__ieee754_acosf+0x140>
 8019682:	ee30 0a09 	vadd.f32	s0, s0, s18
 8019686:	ee20 0a27 	vmul.f32	s0, s0, s15
 801968a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801968e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8019692:	eeac ca80 	vfma.f32	s24, s25, s0
 8019696:	eeaa aa80 	vfma.f32	s20, s21, s0
 801969a:	eeec ba00 	vfma.f32	s23, s24, s0
 801969e:	eeea 9a00 	vfma.f32	s19, s20, s0
 80196a2:	eeab ba80 	vfma.f32	s22, s23, s0
 80196a6:	eea9 9a80 	vfma.f32	s18, s19, s0
 80196aa:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80196ae:	ee68 8a80 	vmul.f32	s17, s17, s0
 80196b2:	f000 fb2b 	bl	8019d0c <__ieee754_sqrtf>
 80196b6:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80196ba:	eddf 7a30 	vldr	s15, [pc, #192]	; 801977c <__ieee754_acosf+0x1e8>
 80196be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80196c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80196c6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80196ca:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8019780 <__ieee754_acosf+0x1ec>
 80196ce:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80196d2:	e771      	b.n	80195b8 <__ieee754_acosf+0x24>
 80196d4:	ee39 8a40 	vsub.f32	s16, s18, s0
 80196d8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80196dc:	eeb0 0a48 	vmov.f32	s0, s16
 80196e0:	f000 fb14 	bl	8019d0c <__ieee754_sqrtf>
 80196e4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80196e8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80196ec:	eeac ca88 	vfma.f32	s24, s25, s16
 80196f0:	eeaa aa88 	vfma.f32	s20, s21, s16
 80196f4:	eeec ba08 	vfma.f32	s23, s24, s16
 80196f8:	ee10 3a10 	vmov	r3, s0
 80196fc:	eeab ba88 	vfma.f32	s22, s23, s16
 8019700:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019704:	f023 030f 	bic.w	r3, r3, #15
 8019708:	eeea 9a08 	vfma.f32	s19, s20, s16
 801970c:	ee07 3a90 	vmov	s15, r3
 8019710:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8019714:	eeb0 6a48 	vmov.f32	s12, s16
 8019718:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801971c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8019720:	ee70 6a27 	vadd.f32	s13, s0, s15
 8019724:	ee68 8a88 	vmul.f32	s17, s17, s16
 8019728:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801972c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8019730:	eea0 7a26 	vfma.f32	s14, s0, s13
 8019734:	ee37 0a87 	vadd.f32	s0, s15, s14
 8019738:	ee30 0a00 	vadd.f32	s0, s0, s0
 801973c:	e73c      	b.n	80195b8 <__ieee754_acosf+0x24>
 801973e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8019784 <__ieee754_acosf+0x1f0>
 8019742:	e739      	b.n	80195b8 <__ieee754_acosf+0x24>
 8019744:	00000000 	.word	0x00000000
 8019748:	40490fdb 	.word	0x40490fdb
 801974c:	3811ef08 	.word	0x3811ef08
 8019750:	3a4f7f04 	.word	0x3a4f7f04
 8019754:	bf303361 	.word	0xbf303361
 8019758:	33a22168 	.word	0x33a22168
 801975c:	bd241146 	.word	0xbd241146
 8019760:	3e4e0aa8 	.word	0x3e4e0aa8
 8019764:	bea6b090 	.word	0xbea6b090
 8019768:	3e2aaaab 	.word	0x3e2aaaab
 801976c:	3d9dc62e 	.word	0x3d9dc62e
 8019770:	4001572d 	.word	0x4001572d
 8019774:	c019d139 	.word	0xc019d139
 8019778:	3fc90fda 	.word	0x3fc90fda
 801977c:	b3a22168 	.word	0xb3a22168
 8019780:	40490fda 	.word	0x40490fda
 8019784:	3fc90fdb 	.word	0x3fc90fdb

08019788 <__ieee754_asinf>:
 8019788:	b538      	push	{r3, r4, r5, lr}
 801978a:	ee10 5a10 	vmov	r5, s0
 801978e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8019792:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8019796:	ed2d 8b04 	vpush	{d8-d9}
 801979a:	d10c      	bne.n	80197b6 <__ieee754_asinf+0x2e>
 801979c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8019914 <__ieee754_asinf+0x18c>
 80197a0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8019918 <__ieee754_asinf+0x190>
 80197a4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80197a8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80197ac:	eeb0 0a67 	vmov.f32	s0, s15
 80197b0:	ecbd 8b04 	vpop	{d8-d9}
 80197b4:	bd38      	pop	{r3, r4, r5, pc}
 80197b6:	dd04      	ble.n	80197c2 <__ieee754_asinf+0x3a>
 80197b8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80197bc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80197c0:	e7f6      	b.n	80197b0 <__ieee754_asinf+0x28>
 80197c2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80197c6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80197ca:	da0b      	bge.n	80197e4 <__ieee754_asinf+0x5c>
 80197cc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80197d0:	da52      	bge.n	8019878 <__ieee754_asinf+0xf0>
 80197d2:	eddf 7a52 	vldr	s15, [pc, #328]	; 801991c <__ieee754_asinf+0x194>
 80197d6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80197da:	eef4 7ae8 	vcmpe.f32	s15, s17
 80197de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197e2:	dce5      	bgt.n	80197b0 <__ieee754_asinf+0x28>
 80197e4:	f001 f92a 	bl	801aa3c <fabsf>
 80197e8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80197ec:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80197f0:	ee20 8a08 	vmul.f32	s16, s0, s16
 80197f4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8019920 <__ieee754_asinf+0x198>
 80197f8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8019924 <__ieee754_asinf+0x19c>
 80197fc:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8019928 <__ieee754_asinf+0x1a0>
 8019800:	eea8 7a27 	vfma.f32	s14, s16, s15
 8019804:	eddf 7a49 	vldr	s15, [pc, #292]	; 801992c <__ieee754_asinf+0x1a4>
 8019808:	eee7 7a08 	vfma.f32	s15, s14, s16
 801980c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8019930 <__ieee754_asinf+0x1a8>
 8019810:	eea7 7a88 	vfma.f32	s14, s15, s16
 8019814:	eddf 7a47 	vldr	s15, [pc, #284]	; 8019934 <__ieee754_asinf+0x1ac>
 8019818:	eee7 7a08 	vfma.f32	s15, s14, s16
 801981c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8019938 <__ieee754_asinf+0x1b0>
 8019820:	eea7 9a88 	vfma.f32	s18, s15, s16
 8019824:	eddf 7a45 	vldr	s15, [pc, #276]	; 801993c <__ieee754_asinf+0x1b4>
 8019828:	eee8 7a07 	vfma.f32	s15, s16, s14
 801982c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8019940 <__ieee754_asinf+0x1b8>
 8019830:	eea7 7a88 	vfma.f32	s14, s15, s16
 8019834:	eddf 7a43 	vldr	s15, [pc, #268]	; 8019944 <__ieee754_asinf+0x1bc>
 8019838:	eee7 7a08 	vfma.f32	s15, s14, s16
 801983c:	eeb0 0a48 	vmov.f32	s0, s16
 8019840:	eee7 8a88 	vfma.f32	s17, s15, s16
 8019844:	f000 fa62 	bl	8019d0c <__ieee754_sqrtf>
 8019848:	4b3f      	ldr	r3, [pc, #252]	; (8019948 <__ieee754_asinf+0x1c0>)
 801984a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801984e:	429c      	cmp	r4, r3
 8019850:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8019854:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8019858:	dd3d      	ble.n	80198d6 <__ieee754_asinf+0x14e>
 801985a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801985e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 801994c <__ieee754_asinf+0x1c4>
 8019862:	eee0 7a26 	vfma.f32	s15, s0, s13
 8019866:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8019918 <__ieee754_asinf+0x190>
 801986a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801986e:	2d00      	cmp	r5, #0
 8019870:	bfd8      	it	le
 8019872:	eeb1 0a40 	vnegle.f32	s0, s0
 8019876:	e79b      	b.n	80197b0 <__ieee754_asinf+0x28>
 8019878:	ee60 7a00 	vmul.f32	s15, s0, s0
 801987c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8019920 <__ieee754_asinf+0x198>
 8019880:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8019924 <__ieee754_asinf+0x19c>
 8019884:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8019938 <__ieee754_asinf+0x1b0>
 8019888:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801988c:	eddf 6a27 	vldr	s13, [pc, #156]	; 801992c <__ieee754_asinf+0x1a4>
 8019890:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019894:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8019930 <__ieee754_asinf+0x1a8>
 8019898:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801989c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8019934 <__ieee754_asinf+0x1ac>
 80198a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80198a4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8019928 <__ieee754_asinf+0x1a0>
 80198a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80198ac:	eddf 6a23 	vldr	s13, [pc, #140]	; 801993c <__ieee754_asinf+0x1b4>
 80198b0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80198b4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8019940 <__ieee754_asinf+0x1b8>
 80198b8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80198bc:	eddf 6a21 	vldr	s13, [pc, #132]	; 8019944 <__ieee754_asinf+0x1bc>
 80198c0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80198c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80198c8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80198cc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80198d0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80198d4:	e76c      	b.n	80197b0 <__ieee754_asinf+0x28>
 80198d6:	ee10 3a10 	vmov	r3, s0
 80198da:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80198de:	f023 030f 	bic.w	r3, r3, #15
 80198e2:	ee07 3a10 	vmov	s14, r3
 80198e6:	eea7 8a47 	vfms.f32	s16, s14, s14
 80198ea:	ee70 7a07 	vadd.f32	s15, s0, s14
 80198ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 80198f2:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80198f6:	eddf 7a07 	vldr	s15, [pc, #28]	; 8019914 <__ieee754_asinf+0x18c>
 80198fa:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80198fe:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8019902:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8019950 <__ieee754_asinf+0x1c8>
 8019906:	eeb0 6a40 	vmov.f32	s12, s0
 801990a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801990e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019912:	e7aa      	b.n	801986a <__ieee754_asinf+0xe2>
 8019914:	b33bbd2e 	.word	0xb33bbd2e
 8019918:	3fc90fdb 	.word	0x3fc90fdb
 801991c:	7149f2ca 	.word	0x7149f2ca
 8019920:	3811ef08 	.word	0x3811ef08
 8019924:	3a4f7f04 	.word	0x3a4f7f04
 8019928:	3e2aaaab 	.word	0x3e2aaaab
 801992c:	bd241146 	.word	0xbd241146
 8019930:	3e4e0aa8 	.word	0x3e4e0aa8
 8019934:	bea6b090 	.word	0xbea6b090
 8019938:	3d9dc62e 	.word	0x3d9dc62e
 801993c:	bf303361 	.word	0xbf303361
 8019940:	4001572d 	.word	0x4001572d
 8019944:	c019d139 	.word	0xc019d139
 8019948:	3f799999 	.word	0x3f799999
 801994c:	333bbd2e 	.word	0x333bbd2e
 8019950:	3f490fdb 	.word	0x3f490fdb

08019954 <__ieee754_atan2f>:
 8019954:	ee10 2a90 	vmov	r2, s1
 8019958:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801995c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019960:	b510      	push	{r4, lr}
 8019962:	eef0 7a40 	vmov.f32	s15, s0
 8019966:	dc06      	bgt.n	8019976 <__ieee754_atan2f+0x22>
 8019968:	ee10 0a10 	vmov	r0, s0
 801996c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8019970:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019974:	dd04      	ble.n	8019980 <__ieee754_atan2f+0x2c>
 8019976:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801997a:	eeb0 0a67 	vmov.f32	s0, s15
 801997e:	bd10      	pop	{r4, pc}
 8019980:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8019984:	d103      	bne.n	801998e <__ieee754_atan2f+0x3a>
 8019986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801998a:	f000 bf83 	b.w	801a894 <atanf>
 801998e:	1794      	asrs	r4, r2, #30
 8019990:	f004 0402 	and.w	r4, r4, #2
 8019994:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8019998:	b943      	cbnz	r3, 80199ac <__ieee754_atan2f+0x58>
 801999a:	2c02      	cmp	r4, #2
 801999c:	d05e      	beq.n	8019a5c <__ieee754_atan2f+0x108>
 801999e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8019a70 <__ieee754_atan2f+0x11c>
 80199a2:	2c03      	cmp	r4, #3
 80199a4:	bf08      	it	eq
 80199a6:	eef0 7a47 	vmoveq.f32	s15, s14
 80199aa:	e7e6      	b.n	801997a <__ieee754_atan2f+0x26>
 80199ac:	b941      	cbnz	r1, 80199c0 <__ieee754_atan2f+0x6c>
 80199ae:	eddf 7a31 	vldr	s15, [pc, #196]	; 8019a74 <__ieee754_atan2f+0x120>
 80199b2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8019a78 <__ieee754_atan2f+0x124>
 80199b6:	2800      	cmp	r0, #0
 80199b8:	bfb8      	it	lt
 80199ba:	eef0 7a40 	vmovlt.f32	s15, s0
 80199be:	e7dc      	b.n	801997a <__ieee754_atan2f+0x26>
 80199c0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80199c4:	d110      	bne.n	80199e8 <__ieee754_atan2f+0x94>
 80199c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80199ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80199ce:	d107      	bne.n	80199e0 <__ieee754_atan2f+0x8c>
 80199d0:	2c02      	cmp	r4, #2
 80199d2:	d846      	bhi.n	8019a62 <__ieee754_atan2f+0x10e>
 80199d4:	4b29      	ldr	r3, [pc, #164]	; (8019a7c <__ieee754_atan2f+0x128>)
 80199d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80199da:	edd4 7a00 	vldr	s15, [r4]
 80199de:	e7cc      	b.n	801997a <__ieee754_atan2f+0x26>
 80199e0:	2c02      	cmp	r4, #2
 80199e2:	d841      	bhi.n	8019a68 <__ieee754_atan2f+0x114>
 80199e4:	4b26      	ldr	r3, [pc, #152]	; (8019a80 <__ieee754_atan2f+0x12c>)
 80199e6:	e7f6      	b.n	80199d6 <__ieee754_atan2f+0x82>
 80199e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80199ec:	d0df      	beq.n	80199ae <__ieee754_atan2f+0x5a>
 80199ee:	1a5b      	subs	r3, r3, r1
 80199f0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80199f4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80199f8:	da1a      	bge.n	8019a30 <__ieee754_atan2f+0xdc>
 80199fa:	2a00      	cmp	r2, #0
 80199fc:	da01      	bge.n	8019a02 <__ieee754_atan2f+0xae>
 80199fe:	313c      	adds	r1, #60	; 0x3c
 8019a00:	db19      	blt.n	8019a36 <__ieee754_atan2f+0xe2>
 8019a02:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8019a06:	f001 f819 	bl	801aa3c <fabsf>
 8019a0a:	f000 ff43 	bl	801a894 <atanf>
 8019a0e:	eef0 7a40 	vmov.f32	s15, s0
 8019a12:	2c01      	cmp	r4, #1
 8019a14:	d012      	beq.n	8019a3c <__ieee754_atan2f+0xe8>
 8019a16:	2c02      	cmp	r4, #2
 8019a18:	d017      	beq.n	8019a4a <__ieee754_atan2f+0xf6>
 8019a1a:	2c00      	cmp	r4, #0
 8019a1c:	d0ad      	beq.n	801997a <__ieee754_atan2f+0x26>
 8019a1e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8019a84 <__ieee754_atan2f+0x130>
 8019a22:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019a26:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8019a88 <__ieee754_atan2f+0x134>
 8019a2a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019a2e:	e7a4      	b.n	801997a <__ieee754_atan2f+0x26>
 8019a30:	eddf 7a10 	vldr	s15, [pc, #64]	; 8019a74 <__ieee754_atan2f+0x120>
 8019a34:	e7ed      	b.n	8019a12 <__ieee754_atan2f+0xbe>
 8019a36:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019a8c <__ieee754_atan2f+0x138>
 8019a3a:	e7ea      	b.n	8019a12 <__ieee754_atan2f+0xbe>
 8019a3c:	ee17 3a90 	vmov	r3, s15
 8019a40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019a44:	ee07 3a90 	vmov	s15, r3
 8019a48:	e797      	b.n	801997a <__ieee754_atan2f+0x26>
 8019a4a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8019a84 <__ieee754_atan2f+0x130>
 8019a4e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019a52:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8019a88 <__ieee754_atan2f+0x134>
 8019a56:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019a5a:	e78e      	b.n	801997a <__ieee754_atan2f+0x26>
 8019a5c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8019a88 <__ieee754_atan2f+0x134>
 8019a60:	e78b      	b.n	801997a <__ieee754_atan2f+0x26>
 8019a62:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8019a90 <__ieee754_atan2f+0x13c>
 8019a66:	e788      	b.n	801997a <__ieee754_atan2f+0x26>
 8019a68:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019a8c <__ieee754_atan2f+0x138>
 8019a6c:	e785      	b.n	801997a <__ieee754_atan2f+0x26>
 8019a6e:	bf00      	nop
 8019a70:	c0490fdb 	.word	0xc0490fdb
 8019a74:	3fc90fdb 	.word	0x3fc90fdb
 8019a78:	bfc90fdb 	.word	0xbfc90fdb
 8019a7c:	0801ad08 	.word	0x0801ad08
 8019a80:	0801ad14 	.word	0x0801ad14
 8019a84:	33bbbd2e 	.word	0x33bbbd2e
 8019a88:	40490fdb 	.word	0x40490fdb
 8019a8c:	00000000 	.word	0x00000000
 8019a90:	3f490fdb 	.word	0x3f490fdb

08019a94 <__ieee754_rem_pio2f>:
 8019a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a96:	ee10 6a10 	vmov	r6, s0
 8019a9a:	4b8e      	ldr	r3, [pc, #568]	; (8019cd4 <__ieee754_rem_pio2f+0x240>)
 8019a9c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8019aa0:	429d      	cmp	r5, r3
 8019aa2:	b087      	sub	sp, #28
 8019aa4:	eef0 7a40 	vmov.f32	s15, s0
 8019aa8:	4604      	mov	r4, r0
 8019aaa:	dc05      	bgt.n	8019ab8 <__ieee754_rem_pio2f+0x24>
 8019aac:	2300      	movs	r3, #0
 8019aae:	ed80 0a00 	vstr	s0, [r0]
 8019ab2:	6043      	str	r3, [r0, #4]
 8019ab4:	2000      	movs	r0, #0
 8019ab6:	e01a      	b.n	8019aee <__ieee754_rem_pio2f+0x5a>
 8019ab8:	4b87      	ldr	r3, [pc, #540]	; (8019cd8 <__ieee754_rem_pio2f+0x244>)
 8019aba:	429d      	cmp	r5, r3
 8019abc:	dc46      	bgt.n	8019b4c <__ieee754_rem_pio2f+0xb8>
 8019abe:	2e00      	cmp	r6, #0
 8019ac0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8019cdc <__ieee754_rem_pio2f+0x248>
 8019ac4:	4b86      	ldr	r3, [pc, #536]	; (8019ce0 <__ieee754_rem_pio2f+0x24c>)
 8019ac6:	f025 050f 	bic.w	r5, r5, #15
 8019aca:	dd1f      	ble.n	8019b0c <__ieee754_rem_pio2f+0x78>
 8019acc:	429d      	cmp	r5, r3
 8019ace:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019ad2:	d00e      	beq.n	8019af2 <__ieee754_rem_pio2f+0x5e>
 8019ad4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8019ce4 <__ieee754_rem_pio2f+0x250>
 8019ad8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019adc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019ae0:	ed80 0a00 	vstr	s0, [r0]
 8019ae4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019ae8:	2001      	movs	r0, #1
 8019aea:	edc4 7a01 	vstr	s15, [r4, #4]
 8019aee:	b007      	add	sp, #28
 8019af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019af2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8019ce8 <__ieee754_rem_pio2f+0x254>
 8019af6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8019cec <__ieee754_rem_pio2f+0x258>
 8019afa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019afe:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8019b02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019b06:	edc0 6a00 	vstr	s13, [r0]
 8019b0a:	e7eb      	b.n	8019ae4 <__ieee754_rem_pio2f+0x50>
 8019b0c:	429d      	cmp	r5, r3
 8019b0e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019b12:	d00e      	beq.n	8019b32 <__ieee754_rem_pio2f+0x9e>
 8019b14:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8019ce4 <__ieee754_rem_pio2f+0x250>
 8019b18:	ee37 0a87 	vadd.f32	s0, s15, s14
 8019b1c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019b20:	ed80 0a00 	vstr	s0, [r0]
 8019b24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b28:	f04f 30ff 	mov.w	r0, #4294967295
 8019b2c:	edc4 7a01 	vstr	s15, [r4, #4]
 8019b30:	e7dd      	b.n	8019aee <__ieee754_rem_pio2f+0x5a>
 8019b32:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8019ce8 <__ieee754_rem_pio2f+0x254>
 8019b36:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8019cec <__ieee754_rem_pio2f+0x258>
 8019b3a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019b3e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8019b42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019b46:	edc0 6a00 	vstr	s13, [r0]
 8019b4a:	e7eb      	b.n	8019b24 <__ieee754_rem_pio2f+0x90>
 8019b4c:	4b68      	ldr	r3, [pc, #416]	; (8019cf0 <__ieee754_rem_pio2f+0x25c>)
 8019b4e:	429d      	cmp	r5, r3
 8019b50:	dc72      	bgt.n	8019c38 <__ieee754_rem_pio2f+0x1a4>
 8019b52:	f000 ff73 	bl	801aa3c <fabsf>
 8019b56:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8019cf4 <__ieee754_rem_pio2f+0x260>
 8019b5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019b5e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019b62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019b6a:	ee17 0a90 	vmov	r0, s15
 8019b6e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019cdc <__ieee754_rem_pio2f+0x248>
 8019b72:	eea7 0a67 	vfms.f32	s0, s14, s15
 8019b76:	281f      	cmp	r0, #31
 8019b78:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8019ce4 <__ieee754_rem_pio2f+0x250>
 8019b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019b80:	eeb1 6a47 	vneg.f32	s12, s14
 8019b84:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019b88:	ee16 2a90 	vmov	r2, s13
 8019b8c:	dc1c      	bgt.n	8019bc8 <__ieee754_rem_pio2f+0x134>
 8019b8e:	495a      	ldr	r1, [pc, #360]	; (8019cf8 <__ieee754_rem_pio2f+0x264>)
 8019b90:	1e47      	subs	r7, r0, #1
 8019b92:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8019b96:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8019b9a:	428b      	cmp	r3, r1
 8019b9c:	d014      	beq.n	8019bc8 <__ieee754_rem_pio2f+0x134>
 8019b9e:	6022      	str	r2, [r4, #0]
 8019ba0:	ed94 7a00 	vldr	s14, [r4]
 8019ba4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019ba8:	2e00      	cmp	r6, #0
 8019baa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019bae:	ed84 0a01 	vstr	s0, [r4, #4]
 8019bb2:	da9c      	bge.n	8019aee <__ieee754_rem_pio2f+0x5a>
 8019bb4:	eeb1 7a47 	vneg.f32	s14, s14
 8019bb8:	eeb1 0a40 	vneg.f32	s0, s0
 8019bbc:	ed84 7a00 	vstr	s14, [r4]
 8019bc0:	ed84 0a01 	vstr	s0, [r4, #4]
 8019bc4:	4240      	negs	r0, r0
 8019bc6:	e792      	b.n	8019aee <__ieee754_rem_pio2f+0x5a>
 8019bc8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019bcc:	15eb      	asrs	r3, r5, #23
 8019bce:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8019bd2:	2d08      	cmp	r5, #8
 8019bd4:	dde3      	ble.n	8019b9e <__ieee754_rem_pio2f+0x10a>
 8019bd6:	eddf 7a44 	vldr	s15, [pc, #272]	; 8019ce8 <__ieee754_rem_pio2f+0x254>
 8019bda:	eef0 6a40 	vmov.f32	s13, s0
 8019bde:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019be2:	ee30 0a66 	vsub.f32	s0, s0, s13
 8019be6:	eea6 0a27 	vfma.f32	s0, s12, s15
 8019bea:	eddf 7a40 	vldr	s15, [pc, #256]	; 8019cec <__ieee754_rem_pio2f+0x258>
 8019bee:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8019bf2:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8019bf6:	eef0 7a40 	vmov.f32	s15, s0
 8019bfa:	ee15 2a90 	vmov	r2, s11
 8019bfe:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019c02:	1a5b      	subs	r3, r3, r1
 8019c04:	2b19      	cmp	r3, #25
 8019c06:	dc04      	bgt.n	8019c12 <__ieee754_rem_pio2f+0x17e>
 8019c08:	edc4 5a00 	vstr	s11, [r4]
 8019c0c:	eeb0 0a66 	vmov.f32	s0, s13
 8019c10:	e7c6      	b.n	8019ba0 <__ieee754_rem_pio2f+0x10c>
 8019c12:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8019cfc <__ieee754_rem_pio2f+0x268>
 8019c16:	eeb0 0a66 	vmov.f32	s0, s13
 8019c1a:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019c1e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019c22:	eddf 6a37 	vldr	s13, [pc, #220]	; 8019d00 <__ieee754_rem_pio2f+0x26c>
 8019c26:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019c2a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019c2e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019c32:	ed84 7a00 	vstr	s14, [r4]
 8019c36:	e7b3      	b.n	8019ba0 <__ieee754_rem_pio2f+0x10c>
 8019c38:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8019c3c:	db06      	blt.n	8019c4c <__ieee754_rem_pio2f+0x1b8>
 8019c3e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019c42:	edc0 7a01 	vstr	s15, [r0, #4]
 8019c46:	edc0 7a00 	vstr	s15, [r0]
 8019c4a:	e733      	b.n	8019ab4 <__ieee754_rem_pio2f+0x20>
 8019c4c:	15ea      	asrs	r2, r5, #23
 8019c4e:	3a86      	subs	r2, #134	; 0x86
 8019c50:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8019c54:	ee07 3a90 	vmov	s15, r3
 8019c58:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019c5c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8019d04 <__ieee754_rem_pio2f+0x270>
 8019c60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019c64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019c68:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019c6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019c70:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019c74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019c78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019c7c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8019c80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019c84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c8c:	edcd 7a05 	vstr	s15, [sp, #20]
 8019c90:	d11e      	bne.n	8019cd0 <__ieee754_rem_pio2f+0x23c>
 8019c92:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c9a:	bf14      	ite	ne
 8019c9c:	2302      	movne	r3, #2
 8019c9e:	2301      	moveq	r3, #1
 8019ca0:	4919      	ldr	r1, [pc, #100]	; (8019d08 <__ieee754_rem_pio2f+0x274>)
 8019ca2:	9101      	str	r1, [sp, #4]
 8019ca4:	2102      	movs	r1, #2
 8019ca6:	9100      	str	r1, [sp, #0]
 8019ca8:	a803      	add	r0, sp, #12
 8019caa:	4621      	mov	r1, r4
 8019cac:	f000 f892 	bl	8019dd4 <__kernel_rem_pio2f>
 8019cb0:	2e00      	cmp	r6, #0
 8019cb2:	f6bf af1c 	bge.w	8019aee <__ieee754_rem_pio2f+0x5a>
 8019cb6:	edd4 7a00 	vldr	s15, [r4]
 8019cba:	eef1 7a67 	vneg.f32	s15, s15
 8019cbe:	edc4 7a00 	vstr	s15, [r4]
 8019cc2:	edd4 7a01 	vldr	s15, [r4, #4]
 8019cc6:	eef1 7a67 	vneg.f32	s15, s15
 8019cca:	edc4 7a01 	vstr	s15, [r4, #4]
 8019cce:	e779      	b.n	8019bc4 <__ieee754_rem_pio2f+0x130>
 8019cd0:	2303      	movs	r3, #3
 8019cd2:	e7e5      	b.n	8019ca0 <__ieee754_rem_pio2f+0x20c>
 8019cd4:	3f490fd8 	.word	0x3f490fd8
 8019cd8:	4016cbe3 	.word	0x4016cbe3
 8019cdc:	3fc90f80 	.word	0x3fc90f80
 8019ce0:	3fc90fd0 	.word	0x3fc90fd0
 8019ce4:	37354443 	.word	0x37354443
 8019ce8:	37354400 	.word	0x37354400
 8019cec:	2e85a308 	.word	0x2e85a308
 8019cf0:	43490f80 	.word	0x43490f80
 8019cf4:	3f22f984 	.word	0x3f22f984
 8019cf8:	0801ad20 	.word	0x0801ad20
 8019cfc:	2e85a300 	.word	0x2e85a300
 8019d00:	248d3132 	.word	0x248d3132
 8019d04:	43800000 	.word	0x43800000
 8019d08:	0801ada0 	.word	0x0801ada0

08019d0c <__ieee754_sqrtf>:
 8019d0c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019d10:	4770      	bx	lr
	...

08019d14 <__kernel_cosf>:
 8019d14:	ee10 3a10 	vmov	r3, s0
 8019d18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019d1c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8019d20:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8019d24:	da05      	bge.n	8019d32 <__kernel_cosf+0x1e>
 8019d26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019d2a:	ee17 2a90 	vmov	r2, s15
 8019d2e:	2a00      	cmp	r2, #0
 8019d30:	d03d      	beq.n	8019dae <__kernel_cosf+0x9a>
 8019d32:	ee60 5a00 	vmul.f32	s11, s0, s0
 8019d36:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8019db4 <__kernel_cosf+0xa0>
 8019d3a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8019db8 <__kernel_cosf+0xa4>
 8019d3e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8019dbc <__kernel_cosf+0xa8>
 8019d42:	4a1f      	ldr	r2, [pc, #124]	; (8019dc0 <__kernel_cosf+0xac>)
 8019d44:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019d48:	4293      	cmp	r3, r2
 8019d4a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8019dc4 <__kernel_cosf+0xb0>
 8019d4e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8019d52:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8019dc8 <__kernel_cosf+0xb4>
 8019d56:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8019d5a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8019dcc <__kernel_cosf+0xb8>
 8019d5e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8019d62:	eeb0 7a66 	vmov.f32	s14, s13
 8019d66:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8019d6a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8019d6e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8019d72:	ee67 6a25 	vmul.f32	s13, s14, s11
 8019d76:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8019d7a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019d7e:	dc04      	bgt.n	8019d8a <__kernel_cosf+0x76>
 8019d80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8019d84:	ee36 0a47 	vsub.f32	s0, s12, s14
 8019d88:	4770      	bx	lr
 8019d8a:	4a11      	ldr	r2, [pc, #68]	; (8019dd0 <__kernel_cosf+0xbc>)
 8019d8c:	4293      	cmp	r3, r2
 8019d8e:	bfda      	itte	le
 8019d90:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8019d94:	ee06 3a90 	vmovle	s13, r3
 8019d98:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8019d9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019da0:	ee36 0a66 	vsub.f32	s0, s12, s13
 8019da4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019da8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019dac:	4770      	bx	lr
 8019dae:	eeb0 0a46 	vmov.f32	s0, s12
 8019db2:	4770      	bx	lr
 8019db4:	ad47d74e 	.word	0xad47d74e
 8019db8:	310f74f6 	.word	0x310f74f6
 8019dbc:	3d2aaaab 	.word	0x3d2aaaab
 8019dc0:	3e999999 	.word	0x3e999999
 8019dc4:	b493f27c 	.word	0xb493f27c
 8019dc8:	37d00d01 	.word	0x37d00d01
 8019dcc:	bab60b61 	.word	0xbab60b61
 8019dd0:	3f480000 	.word	0x3f480000

08019dd4 <__kernel_rem_pio2f>:
 8019dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dd8:	ed2d 8b04 	vpush	{d8-d9}
 8019ddc:	b0d7      	sub	sp, #348	; 0x15c
 8019dde:	4616      	mov	r6, r2
 8019de0:	4698      	mov	r8, r3
 8019de2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019de4:	4bbb      	ldr	r3, [pc, #748]	; (801a0d4 <__kernel_rem_pio2f+0x300>)
 8019de6:	9001      	str	r0, [sp, #4]
 8019de8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8019dec:	1d33      	adds	r3, r6, #4
 8019dee:	460d      	mov	r5, r1
 8019df0:	f108 39ff 	add.w	r9, r8, #4294967295
 8019df4:	db29      	blt.n	8019e4a <__kernel_rem_pio2f+0x76>
 8019df6:	1ef1      	subs	r1, r6, #3
 8019df8:	bf48      	it	mi
 8019dfa:	1d31      	addmi	r1, r6, #4
 8019dfc:	10c9      	asrs	r1, r1, #3
 8019dfe:	1c4c      	adds	r4, r1, #1
 8019e00:	00e3      	lsls	r3, r4, #3
 8019e02:	9302      	str	r3, [sp, #8]
 8019e04:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8019e06:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801a0e4 <__kernel_rem_pio2f+0x310>
 8019e0a:	eba1 0009 	sub.w	r0, r1, r9
 8019e0e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8019e12:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8019e16:	eb07 0c09 	add.w	ip, r7, r9
 8019e1a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8019e1e:	2300      	movs	r3, #0
 8019e20:	4563      	cmp	r3, ip
 8019e22:	dd14      	ble.n	8019e4e <__kernel_rem_pio2f+0x7a>
 8019e24:	ab1a      	add	r3, sp, #104	; 0x68
 8019e26:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8019e2a:	46cc      	mov	ip, r9
 8019e2c:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8019e30:	f1c8 0b01 	rsb	fp, r8, #1
 8019e34:	eb0b 020c 	add.w	r2, fp, ip
 8019e38:	4297      	cmp	r7, r2
 8019e3a:	db27      	blt.n	8019e8c <__kernel_rem_pio2f+0xb8>
 8019e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019e40:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801a0e4 <__kernel_rem_pio2f+0x310>
 8019e44:	4618      	mov	r0, r3
 8019e46:	2200      	movs	r2, #0
 8019e48:	e016      	b.n	8019e78 <__kernel_rem_pio2f+0xa4>
 8019e4a:	2100      	movs	r1, #0
 8019e4c:	e7d7      	b.n	8019dfe <__kernel_rem_pio2f+0x2a>
 8019e4e:	42d8      	cmn	r0, r3
 8019e50:	bf5d      	ittte	pl
 8019e52:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8019e56:	ee07 2a90 	vmovpl	s15, r2
 8019e5a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8019e5e:	eef0 7a47 	vmovmi.f32	s15, s14
 8019e62:	ecea 7a01 	vstmia	sl!, {s15}
 8019e66:	3301      	adds	r3, #1
 8019e68:	e7da      	b.n	8019e20 <__kernel_rem_pio2f+0x4c>
 8019e6a:	ecfe 6a01 	vldmia	lr!, {s13}
 8019e6e:	ed90 7a00 	vldr	s14, [r0]
 8019e72:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019e76:	3201      	adds	r2, #1
 8019e78:	454a      	cmp	r2, r9
 8019e7a:	f1a0 0004 	sub.w	r0, r0, #4
 8019e7e:	ddf4      	ble.n	8019e6a <__kernel_rem_pio2f+0x96>
 8019e80:	ecea 7a01 	vstmia	sl!, {s15}
 8019e84:	3304      	adds	r3, #4
 8019e86:	f10c 0c01 	add.w	ip, ip, #1
 8019e8a:	e7d3      	b.n	8019e34 <__kernel_rem_pio2f+0x60>
 8019e8c:	ab06      	add	r3, sp, #24
 8019e8e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8019e92:	9304      	str	r3, [sp, #16]
 8019e94:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8019e96:	eddf 8a92 	vldr	s17, [pc, #584]	; 801a0e0 <__kernel_rem_pio2f+0x30c>
 8019e9a:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801a0dc <__kernel_rem_pio2f+0x308>
 8019e9e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019ea2:	9303      	str	r3, [sp, #12]
 8019ea4:	46ba      	mov	sl, r7
 8019ea6:	ab56      	add	r3, sp, #344	; 0x158
 8019ea8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8019eac:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8019eb0:	ab06      	add	r3, sp, #24
 8019eb2:	4618      	mov	r0, r3
 8019eb4:	4652      	mov	r2, sl
 8019eb6:	2a00      	cmp	r2, #0
 8019eb8:	dc51      	bgt.n	8019f5e <__kernel_rem_pio2f+0x18a>
 8019eba:	4620      	mov	r0, r4
 8019ebc:	9305      	str	r3, [sp, #20]
 8019ebe:	f000 fe0d 	bl	801aadc <scalbnf>
 8019ec2:	eeb0 8a40 	vmov.f32	s16, s0
 8019ec6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8019eca:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019ece:	f000 fdbd 	bl	801aa4c <floorf>
 8019ed2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8019ed6:	eea0 8a67 	vfms.f32	s16, s0, s15
 8019eda:	2c00      	cmp	r4, #0
 8019edc:	9b05      	ldr	r3, [sp, #20]
 8019ede:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8019ee2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8019ee6:	edcd 7a00 	vstr	s15, [sp]
 8019eea:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019eee:	dd4b      	ble.n	8019f88 <__kernel_rem_pio2f+0x1b4>
 8019ef0:	f10a 3cff 	add.w	ip, sl, #4294967295
 8019ef4:	aa06      	add	r2, sp, #24
 8019ef6:	f1c4 0e08 	rsb	lr, r4, #8
 8019efa:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019efe:	ee17 1a90 	vmov	r1, s15
 8019f02:	fa42 f00e 	asr.w	r0, r2, lr
 8019f06:	4401      	add	r1, r0
 8019f08:	9100      	str	r1, [sp, #0]
 8019f0a:	fa00 f00e 	lsl.w	r0, r0, lr
 8019f0e:	a906      	add	r1, sp, #24
 8019f10:	1a12      	subs	r2, r2, r0
 8019f12:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8019f16:	f1c4 0007 	rsb	r0, r4, #7
 8019f1a:	fa42 fb00 	asr.w	fp, r2, r0
 8019f1e:	f1bb 0f00 	cmp.w	fp, #0
 8019f22:	dd43      	ble.n	8019fac <__kernel_rem_pio2f+0x1d8>
 8019f24:	9a00      	ldr	r2, [sp, #0]
 8019f26:	f04f 0e00 	mov.w	lr, #0
 8019f2a:	3201      	adds	r2, #1
 8019f2c:	9200      	str	r2, [sp, #0]
 8019f2e:	4670      	mov	r0, lr
 8019f30:	45f2      	cmp	sl, lr
 8019f32:	dc6c      	bgt.n	801a00e <__kernel_rem_pio2f+0x23a>
 8019f34:	2c00      	cmp	r4, #0
 8019f36:	dd04      	ble.n	8019f42 <__kernel_rem_pio2f+0x16e>
 8019f38:	2c01      	cmp	r4, #1
 8019f3a:	d079      	beq.n	801a030 <__kernel_rem_pio2f+0x25c>
 8019f3c:	2c02      	cmp	r4, #2
 8019f3e:	f000 8082 	beq.w	801a046 <__kernel_rem_pio2f+0x272>
 8019f42:	f1bb 0f02 	cmp.w	fp, #2
 8019f46:	d131      	bne.n	8019fac <__kernel_rem_pio2f+0x1d8>
 8019f48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019f4c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019f50:	b360      	cbz	r0, 8019fac <__kernel_rem_pio2f+0x1d8>
 8019f52:	4620      	mov	r0, r4
 8019f54:	f000 fdc2 	bl	801aadc <scalbnf>
 8019f58:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019f5c:	e026      	b.n	8019fac <__kernel_rem_pio2f+0x1d8>
 8019f5e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8019f62:	3a01      	subs	r2, #1
 8019f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019f68:	a942      	add	r1, sp, #264	; 0x108
 8019f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019f6e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8019f72:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8019f76:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019f7a:	eca0 0a01 	vstmia	r0!, {s0}
 8019f7e:	ed9c 0a00 	vldr	s0, [ip]
 8019f82:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019f86:	e796      	b.n	8019eb6 <__kernel_rem_pio2f+0xe2>
 8019f88:	d107      	bne.n	8019f9a <__kernel_rem_pio2f+0x1c6>
 8019f8a:	f10a 32ff 	add.w	r2, sl, #4294967295
 8019f8e:	a906      	add	r1, sp, #24
 8019f90:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8019f94:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8019f98:	e7c1      	b.n	8019f1e <__kernel_rem_pio2f+0x14a>
 8019f9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019f9e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fa6:	da2f      	bge.n	801a008 <__kernel_rem_pio2f+0x234>
 8019fa8:	f04f 0b00 	mov.w	fp, #0
 8019fac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fb4:	f040 8098 	bne.w	801a0e8 <__kernel_rem_pio2f+0x314>
 8019fb8:	f10a 33ff 	add.w	r3, sl, #4294967295
 8019fbc:	469c      	mov	ip, r3
 8019fbe:	2200      	movs	r2, #0
 8019fc0:	45bc      	cmp	ip, r7
 8019fc2:	da48      	bge.n	801a056 <__kernel_rem_pio2f+0x282>
 8019fc4:	2a00      	cmp	r2, #0
 8019fc6:	d05f      	beq.n	801a088 <__kernel_rem_pio2f+0x2b4>
 8019fc8:	aa06      	add	r2, sp, #24
 8019fca:	3c08      	subs	r4, #8
 8019fcc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8019fd0:	2900      	cmp	r1, #0
 8019fd2:	d07d      	beq.n	801a0d0 <__kernel_rem_pio2f+0x2fc>
 8019fd4:	4620      	mov	r0, r4
 8019fd6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019fda:	9301      	str	r3, [sp, #4]
 8019fdc:	f000 fd7e 	bl	801aadc <scalbnf>
 8019fe0:	9b01      	ldr	r3, [sp, #4]
 8019fe2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801a0e0 <__kernel_rem_pio2f+0x30c>
 8019fe6:	4619      	mov	r1, r3
 8019fe8:	2900      	cmp	r1, #0
 8019fea:	f280 80af 	bge.w	801a14c <__kernel_rem_pio2f+0x378>
 8019fee:	4618      	mov	r0, r3
 8019ff0:	2400      	movs	r4, #0
 8019ff2:	2800      	cmp	r0, #0
 8019ff4:	f2c0 80d0 	blt.w	801a198 <__kernel_rem_pio2f+0x3c4>
 8019ff8:	a942      	add	r1, sp, #264	; 0x108
 8019ffa:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8019ffe:	4a36      	ldr	r2, [pc, #216]	; (801a0d8 <__kernel_rem_pio2f+0x304>)
 801a000:	eddf 7a38 	vldr	s15, [pc, #224]	; 801a0e4 <__kernel_rem_pio2f+0x310>
 801a004:	2100      	movs	r1, #0
 801a006:	e0bb      	b.n	801a180 <__kernel_rem_pio2f+0x3ac>
 801a008:	f04f 0b02 	mov.w	fp, #2
 801a00c:	e78a      	b.n	8019f24 <__kernel_rem_pio2f+0x150>
 801a00e:	681a      	ldr	r2, [r3, #0]
 801a010:	b948      	cbnz	r0, 801a026 <__kernel_rem_pio2f+0x252>
 801a012:	b11a      	cbz	r2, 801a01c <__kernel_rem_pio2f+0x248>
 801a014:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a018:	601a      	str	r2, [r3, #0]
 801a01a:	2201      	movs	r2, #1
 801a01c:	f10e 0e01 	add.w	lr, lr, #1
 801a020:	3304      	adds	r3, #4
 801a022:	4610      	mov	r0, r2
 801a024:	e784      	b.n	8019f30 <__kernel_rem_pio2f+0x15c>
 801a026:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801a02a:	601a      	str	r2, [r3, #0]
 801a02c:	4602      	mov	r2, r0
 801a02e:	e7f5      	b.n	801a01c <__kernel_rem_pio2f+0x248>
 801a030:	f10a 3cff 	add.w	ip, sl, #4294967295
 801a034:	ab06      	add	r3, sp, #24
 801a036:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a03a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a03e:	aa06      	add	r2, sp, #24
 801a040:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801a044:	e77d      	b.n	8019f42 <__kernel_rem_pio2f+0x16e>
 801a046:	f10a 3cff 	add.w	ip, sl, #4294967295
 801a04a:	ab06      	add	r3, sp, #24
 801a04c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a054:	e7f3      	b.n	801a03e <__kernel_rem_pio2f+0x26a>
 801a056:	a906      	add	r1, sp, #24
 801a058:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801a05c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a060:	4302      	orrs	r2, r0
 801a062:	e7ad      	b.n	8019fc0 <__kernel_rem_pio2f+0x1ec>
 801a064:	3001      	adds	r0, #1
 801a066:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a06a:	2a00      	cmp	r2, #0
 801a06c:	d0fa      	beq.n	801a064 <__kernel_rem_pio2f+0x290>
 801a06e:	a91a      	add	r1, sp, #104	; 0x68
 801a070:	eb0a 0208 	add.w	r2, sl, r8
 801a074:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a078:	f10a 0301 	add.w	r3, sl, #1
 801a07c:	eb0a 0100 	add.w	r1, sl, r0
 801a080:	4299      	cmp	r1, r3
 801a082:	da04      	bge.n	801a08e <__kernel_rem_pio2f+0x2ba>
 801a084:	468a      	mov	sl, r1
 801a086:	e70e      	b.n	8019ea6 <__kernel_rem_pio2f+0xd2>
 801a088:	9b04      	ldr	r3, [sp, #16]
 801a08a:	2001      	movs	r0, #1
 801a08c:	e7eb      	b.n	801a066 <__kernel_rem_pio2f+0x292>
 801a08e:	9803      	ldr	r0, [sp, #12]
 801a090:	f8dd c004 	ldr.w	ip, [sp, #4]
 801a094:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801a098:	9000      	str	r0, [sp, #0]
 801a09a:	ee07 0a90 	vmov	s15, r0
 801a09e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a0a2:	2000      	movs	r0, #0
 801a0a4:	ece2 7a01 	vstmia	r2!, {s15}
 801a0a8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801a0e4 <__kernel_rem_pio2f+0x310>
 801a0ac:	4696      	mov	lr, r2
 801a0ae:	4548      	cmp	r0, r9
 801a0b0:	dd06      	ble.n	801a0c0 <__kernel_rem_pio2f+0x2ec>
 801a0b2:	a842      	add	r0, sp, #264	; 0x108
 801a0b4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801a0b8:	edc0 7a00 	vstr	s15, [r0]
 801a0bc:	3301      	adds	r3, #1
 801a0be:	e7df      	b.n	801a080 <__kernel_rem_pio2f+0x2ac>
 801a0c0:	ecfc 6a01 	vldmia	ip!, {s13}
 801a0c4:	ed3e 7a01 	vldmdb	lr!, {s14}
 801a0c8:	3001      	adds	r0, #1
 801a0ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a0ce:	e7ee      	b.n	801a0ae <__kernel_rem_pio2f+0x2da>
 801a0d0:	3b01      	subs	r3, #1
 801a0d2:	e779      	b.n	8019fc8 <__kernel_rem_pio2f+0x1f4>
 801a0d4:	0801b0e4 	.word	0x0801b0e4
 801a0d8:	0801b0b8 	.word	0x0801b0b8
 801a0dc:	43800000 	.word	0x43800000
 801a0e0:	3b800000 	.word	0x3b800000
 801a0e4:	00000000 	.word	0x00000000
 801a0e8:	9b02      	ldr	r3, [sp, #8]
 801a0ea:	eeb0 0a48 	vmov.f32	s0, s16
 801a0ee:	1b98      	subs	r0, r3, r6
 801a0f0:	f000 fcf4 	bl	801aadc <scalbnf>
 801a0f4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801a0dc <__kernel_rem_pio2f+0x308>
 801a0f8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801a0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a100:	db1b      	blt.n	801a13a <__kernel_rem_pio2f+0x366>
 801a102:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801a0e0 <__kernel_rem_pio2f+0x30c>
 801a106:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a10a:	aa06      	add	r2, sp, #24
 801a10c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a110:	a906      	add	r1, sp, #24
 801a112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a116:	3408      	adds	r4, #8
 801a118:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a11c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a120:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a124:	ee10 3a10 	vmov	r3, s0
 801a128:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801a12c:	ee17 2a90 	vmov	r2, s15
 801a130:	f10a 0301 	add.w	r3, sl, #1
 801a134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801a138:	e74c      	b.n	8019fd4 <__kernel_rem_pio2f+0x200>
 801a13a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a13e:	aa06      	add	r2, sp, #24
 801a140:	ee10 3a10 	vmov	r3, s0
 801a144:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801a148:	4653      	mov	r3, sl
 801a14a:	e743      	b.n	8019fd4 <__kernel_rem_pio2f+0x200>
 801a14c:	aa42      	add	r2, sp, #264	; 0x108
 801a14e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801a152:	aa06      	add	r2, sp, #24
 801a154:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801a158:	9201      	str	r2, [sp, #4]
 801a15a:	ee07 2a90 	vmov	s15, r2
 801a15e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a162:	3901      	subs	r1, #1
 801a164:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a168:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a16c:	edc0 7a00 	vstr	s15, [r0]
 801a170:	e73a      	b.n	8019fe8 <__kernel_rem_pio2f+0x214>
 801a172:	ecf2 6a01 	vldmia	r2!, {s13}
 801a176:	ecb6 7a01 	vldmia	r6!, {s14}
 801a17a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a17e:	3101      	adds	r1, #1
 801a180:	42b9      	cmp	r1, r7
 801a182:	dc01      	bgt.n	801a188 <__kernel_rem_pio2f+0x3b4>
 801a184:	428c      	cmp	r4, r1
 801a186:	daf4      	bge.n	801a172 <__kernel_rem_pio2f+0x39e>
 801a188:	aa56      	add	r2, sp, #344	; 0x158
 801a18a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801a18e:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801a192:	3801      	subs	r0, #1
 801a194:	3401      	adds	r4, #1
 801a196:	e72c      	b.n	8019ff2 <__kernel_rem_pio2f+0x21e>
 801a198:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a19a:	2a02      	cmp	r2, #2
 801a19c:	dc0a      	bgt.n	801a1b4 <__kernel_rem_pio2f+0x3e0>
 801a19e:	2a00      	cmp	r2, #0
 801a1a0:	dc61      	bgt.n	801a266 <__kernel_rem_pio2f+0x492>
 801a1a2:	d03c      	beq.n	801a21e <__kernel_rem_pio2f+0x44a>
 801a1a4:	9b00      	ldr	r3, [sp, #0]
 801a1a6:	f003 0007 	and.w	r0, r3, #7
 801a1aa:	b057      	add	sp, #348	; 0x15c
 801a1ac:	ecbd 8b04 	vpop	{d8-d9}
 801a1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1b4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a1b6:	2a03      	cmp	r2, #3
 801a1b8:	d1f4      	bne.n	801a1a4 <__kernel_rem_pio2f+0x3d0>
 801a1ba:	aa2e      	add	r2, sp, #184	; 0xb8
 801a1bc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801a1c0:	4608      	mov	r0, r1
 801a1c2:	461c      	mov	r4, r3
 801a1c4:	2c00      	cmp	r4, #0
 801a1c6:	f1a0 0004 	sub.w	r0, r0, #4
 801a1ca:	dc59      	bgt.n	801a280 <__kernel_rem_pio2f+0x4ac>
 801a1cc:	4618      	mov	r0, r3
 801a1ce:	2801      	cmp	r0, #1
 801a1d0:	f1a1 0104 	sub.w	r1, r1, #4
 801a1d4:	dc64      	bgt.n	801a2a0 <__kernel_rem_pio2f+0x4cc>
 801a1d6:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801a0e4 <__kernel_rem_pio2f+0x310>
 801a1da:	2b01      	cmp	r3, #1
 801a1dc:	dc70      	bgt.n	801a2c0 <__kernel_rem_pio2f+0x4ec>
 801a1de:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801a1e2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801a1e6:	f1bb 0f00 	cmp.w	fp, #0
 801a1ea:	d172      	bne.n	801a2d2 <__kernel_rem_pio2f+0x4fe>
 801a1ec:	edc5 6a00 	vstr	s13, [r5]
 801a1f0:	ed85 7a01 	vstr	s14, [r5, #4]
 801a1f4:	edc5 7a02 	vstr	s15, [r5, #8]
 801a1f8:	e7d4      	b.n	801a1a4 <__kernel_rem_pio2f+0x3d0>
 801a1fa:	aa2e      	add	r2, sp, #184	; 0xb8
 801a1fc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801a200:	ed91 7a00 	vldr	s14, [r1]
 801a204:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a208:	3b01      	subs	r3, #1
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	daf5      	bge.n	801a1fa <__kernel_rem_pio2f+0x426>
 801a20e:	f1bb 0f00 	cmp.w	fp, #0
 801a212:	d001      	beq.n	801a218 <__kernel_rem_pio2f+0x444>
 801a214:	eef1 7a67 	vneg.f32	s15, s15
 801a218:	edc5 7a00 	vstr	s15, [r5]
 801a21c:	e7c2      	b.n	801a1a4 <__kernel_rem_pio2f+0x3d0>
 801a21e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801a0e4 <__kernel_rem_pio2f+0x310>
 801a222:	e7f2      	b.n	801a20a <__kernel_rem_pio2f+0x436>
 801a224:	aa2e      	add	r2, sp, #184	; 0xb8
 801a226:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801a22a:	edd0 7a00 	vldr	s15, [r0]
 801a22e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a232:	3901      	subs	r1, #1
 801a234:	2900      	cmp	r1, #0
 801a236:	daf5      	bge.n	801a224 <__kernel_rem_pio2f+0x450>
 801a238:	f1bb 0f00 	cmp.w	fp, #0
 801a23c:	d017      	beq.n	801a26e <__kernel_rem_pio2f+0x49a>
 801a23e:	eef1 7a47 	vneg.f32	s15, s14
 801a242:	edc5 7a00 	vstr	s15, [r5]
 801a246:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801a24a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a24e:	a82f      	add	r0, sp, #188	; 0xbc
 801a250:	2101      	movs	r1, #1
 801a252:	428b      	cmp	r3, r1
 801a254:	da0e      	bge.n	801a274 <__kernel_rem_pio2f+0x4a0>
 801a256:	f1bb 0f00 	cmp.w	fp, #0
 801a25a:	d001      	beq.n	801a260 <__kernel_rem_pio2f+0x48c>
 801a25c:	eef1 7a67 	vneg.f32	s15, s15
 801a260:	edc5 7a01 	vstr	s15, [r5, #4]
 801a264:	e79e      	b.n	801a1a4 <__kernel_rem_pio2f+0x3d0>
 801a266:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801a0e4 <__kernel_rem_pio2f+0x310>
 801a26a:	4619      	mov	r1, r3
 801a26c:	e7e2      	b.n	801a234 <__kernel_rem_pio2f+0x460>
 801a26e:	eef0 7a47 	vmov.f32	s15, s14
 801a272:	e7e6      	b.n	801a242 <__kernel_rem_pio2f+0x46e>
 801a274:	ecb0 7a01 	vldmia	r0!, {s14}
 801a278:	3101      	adds	r1, #1
 801a27a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a27e:	e7e8      	b.n	801a252 <__kernel_rem_pio2f+0x47e>
 801a280:	edd0 7a00 	vldr	s15, [r0]
 801a284:	edd0 6a01 	vldr	s13, [r0, #4]
 801a288:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a28c:	3c01      	subs	r4, #1
 801a28e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a292:	ed80 7a00 	vstr	s14, [r0]
 801a296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a29a:	edc0 7a01 	vstr	s15, [r0, #4]
 801a29e:	e791      	b.n	801a1c4 <__kernel_rem_pio2f+0x3f0>
 801a2a0:	edd1 7a00 	vldr	s15, [r1]
 801a2a4:	edd1 6a01 	vldr	s13, [r1, #4]
 801a2a8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a2ac:	3801      	subs	r0, #1
 801a2ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a2b2:	ed81 7a00 	vstr	s14, [r1]
 801a2b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a2ba:	edc1 7a01 	vstr	s15, [r1, #4]
 801a2be:	e786      	b.n	801a1ce <__kernel_rem_pio2f+0x3fa>
 801a2c0:	aa2e      	add	r2, sp, #184	; 0xb8
 801a2c2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801a2c6:	ed91 7a00 	vldr	s14, [r1]
 801a2ca:	3b01      	subs	r3, #1
 801a2cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a2d0:	e783      	b.n	801a1da <__kernel_rem_pio2f+0x406>
 801a2d2:	eef1 6a66 	vneg.f32	s13, s13
 801a2d6:	eeb1 7a47 	vneg.f32	s14, s14
 801a2da:	edc5 6a00 	vstr	s13, [r5]
 801a2de:	ed85 7a01 	vstr	s14, [r5, #4]
 801a2e2:	eef1 7a67 	vneg.f32	s15, s15
 801a2e6:	e785      	b.n	801a1f4 <__kernel_rem_pio2f+0x420>

0801a2e8 <__kernel_sinf>:
 801a2e8:	ee10 3a10 	vmov	r3, s0
 801a2ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a2f0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a2f4:	da04      	bge.n	801a300 <__kernel_sinf+0x18>
 801a2f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a2fa:	ee17 3a90 	vmov	r3, s15
 801a2fe:	b35b      	cbz	r3, 801a358 <__kernel_sinf+0x70>
 801a300:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a304:	eddf 7a15 	vldr	s15, [pc, #84]	; 801a35c <__kernel_sinf+0x74>
 801a308:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801a360 <__kernel_sinf+0x78>
 801a30c:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a310:	eddf 7a14 	vldr	s15, [pc, #80]	; 801a364 <__kernel_sinf+0x7c>
 801a314:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a318:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801a368 <__kernel_sinf+0x80>
 801a31c:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a320:	eddf 7a12 	vldr	s15, [pc, #72]	; 801a36c <__kernel_sinf+0x84>
 801a324:	ee60 6a07 	vmul.f32	s13, s0, s14
 801a328:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a32c:	b930      	cbnz	r0, 801a33c <__kernel_sinf+0x54>
 801a32e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801a370 <__kernel_sinf+0x88>
 801a332:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a336:	eea6 0a26 	vfma.f32	s0, s12, s13
 801a33a:	4770      	bx	lr
 801a33c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801a340:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801a344:	eee0 7a86 	vfma.f32	s15, s1, s12
 801a348:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801a34c:	eddf 7a09 	vldr	s15, [pc, #36]	; 801a374 <__kernel_sinf+0x8c>
 801a350:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801a354:	ee30 0a60 	vsub.f32	s0, s0, s1
 801a358:	4770      	bx	lr
 801a35a:	bf00      	nop
 801a35c:	2f2ec9d3 	.word	0x2f2ec9d3
 801a360:	b2d72f34 	.word	0xb2d72f34
 801a364:	3638ef1b 	.word	0x3638ef1b
 801a368:	b9500d01 	.word	0xb9500d01
 801a36c:	3c088889 	.word	0x3c088889
 801a370:	be2aaaab 	.word	0xbe2aaaab
 801a374:	3e2aaaab 	.word	0x3e2aaaab

0801a378 <__kernel_tanf>:
 801a378:	b508      	push	{r3, lr}
 801a37a:	ee10 3a10 	vmov	r3, s0
 801a37e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a382:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801a386:	eef0 7a40 	vmov.f32	s15, s0
 801a38a:	da17      	bge.n	801a3bc <__kernel_tanf+0x44>
 801a38c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801a390:	ee17 1a10 	vmov	r1, s14
 801a394:	bb41      	cbnz	r1, 801a3e8 <__kernel_tanf+0x70>
 801a396:	1c43      	adds	r3, r0, #1
 801a398:	4313      	orrs	r3, r2
 801a39a:	d108      	bne.n	801a3ae <__kernel_tanf+0x36>
 801a39c:	f000 fb4e 	bl	801aa3c <fabsf>
 801a3a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a3a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a3a8:	eeb0 0a67 	vmov.f32	s0, s15
 801a3ac:	bd08      	pop	{r3, pc}
 801a3ae:	2801      	cmp	r0, #1
 801a3b0:	d0fa      	beq.n	801a3a8 <__kernel_tanf+0x30>
 801a3b2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801a3b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a3ba:	e7f5      	b.n	801a3a8 <__kernel_tanf+0x30>
 801a3bc:	494d      	ldr	r1, [pc, #308]	; (801a4f4 <__kernel_tanf+0x17c>)
 801a3be:	428a      	cmp	r2, r1
 801a3c0:	db12      	blt.n	801a3e8 <__kernel_tanf+0x70>
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	bfb8      	it	lt
 801a3c6:	eef1 7a40 	vneglt.f32	s15, s0
 801a3ca:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 801a4f8 <__kernel_tanf+0x180>
 801a3ce:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a3d2:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 801a4fc <__kernel_tanf+0x184>
 801a3d6:	bfb8      	it	lt
 801a3d8:	eef1 0a60 	vneglt.f32	s1, s1
 801a3dc:	ee70 0a60 	vsub.f32	s1, s0, s1
 801a3e0:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801a3e4:	eddf 0a46 	vldr	s1, [pc, #280]	; 801a500 <__kernel_tanf+0x188>
 801a3e8:	eddf 5a46 	vldr	s11, [pc, #280]	; 801a504 <__kernel_tanf+0x18c>
 801a3ec:	ed9f 6a46 	vldr	s12, [pc, #280]	; 801a508 <__kernel_tanf+0x190>
 801a3f0:	ed9f 5a46 	vldr	s10, [pc, #280]	; 801a50c <__kernel_tanf+0x194>
 801a3f4:	493f      	ldr	r1, [pc, #252]	; (801a4f4 <__kernel_tanf+0x17c>)
 801a3f6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801a3fa:	428a      	cmp	r2, r1
 801a3fc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801a400:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a404:	eddf 5a42 	vldr	s11, [pc, #264]	; 801a510 <__kernel_tanf+0x198>
 801a408:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a40c:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801a514 <__kernel_tanf+0x19c>
 801a410:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a414:	eddf 5a40 	vldr	s11, [pc, #256]	; 801a518 <__kernel_tanf+0x1a0>
 801a418:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a41c:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 801a51c <__kernel_tanf+0x1a4>
 801a420:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a424:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801a520 <__kernel_tanf+0x1a8>
 801a428:	eee7 5a05 	vfma.f32	s11, s14, s10
 801a42c:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801a524 <__kernel_tanf+0x1ac>
 801a430:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a434:	eddf 5a3c 	vldr	s11, [pc, #240]	; 801a528 <__kernel_tanf+0x1b0>
 801a438:	eee5 5a07 	vfma.f32	s11, s10, s14
 801a43c:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 801a52c <__kernel_tanf+0x1b4>
 801a440:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a444:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801a530 <__kernel_tanf+0x1b8>
 801a448:	eee5 5a07 	vfma.f32	s11, s10, s14
 801a44c:	eeb0 7a65 	vmov.f32	s14, s11
 801a450:	eea7 6a26 	vfma.f32	s12, s14, s13
 801a454:	ee67 5aa6 	vmul.f32	s11, s15, s13
 801a458:	eeb0 7a46 	vmov.f32	s14, s12
 801a45c:	eeb0 6a60 	vmov.f32	s12, s1
 801a460:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a464:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801a534 <__kernel_tanf+0x1bc>
 801a468:	eee6 0a26 	vfma.f32	s1, s12, s13
 801a46c:	eee5 0a87 	vfma.f32	s1, s11, s14
 801a470:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801a474:	db1d      	blt.n	801a4b2 <__kernel_tanf+0x13a>
 801a476:	ee06 0a90 	vmov	s13, r0
 801a47a:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801a47e:	ee27 6a07 	vmul.f32	s12, s14, s14
 801a482:	ee37 7a00 	vadd.f32	s14, s14, s0
 801a486:	179b      	asrs	r3, r3, #30
 801a488:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801a48c:	f003 0302 	and.w	r3, r3, #2
 801a490:	f1c3 0301 	rsb	r3, r3, #1
 801a494:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801a498:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801a49c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a4a0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a4a4:	ee07 3a90 	vmov	s15, r3
 801a4a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a4ac:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a4b0:	e77a      	b.n	801a3a8 <__kernel_tanf+0x30>
 801a4b2:	2801      	cmp	r0, #1
 801a4b4:	d01b      	beq.n	801a4ee <__kernel_tanf+0x176>
 801a4b6:	4b20      	ldr	r3, [pc, #128]	; (801a538 <__kernel_tanf+0x1c0>)
 801a4b8:	ee17 2a10 	vmov	r2, s14
 801a4bc:	401a      	ands	r2, r3
 801a4be:	ee06 2a10 	vmov	s12, r2
 801a4c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 801a4c6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801a4ca:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801a4ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801a4d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a4d6:	ee16 2a90 	vmov	r2, s13
 801a4da:	4013      	ands	r3, r2
 801a4dc:	ee07 3a90 	vmov	s15, r3
 801a4e0:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a4e4:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801a4e8:	eee7 7a26 	vfma.f32	s15, s14, s13
 801a4ec:	e75c      	b.n	801a3a8 <__kernel_tanf+0x30>
 801a4ee:	eef0 7a47 	vmov.f32	s15, s14
 801a4f2:	e759      	b.n	801a3a8 <__kernel_tanf+0x30>
 801a4f4:	3f2ca140 	.word	0x3f2ca140
 801a4f8:	3f490fda 	.word	0x3f490fda
 801a4fc:	33222168 	.word	0x33222168
 801a500:	00000000 	.word	0x00000000
 801a504:	b79bae5f 	.word	0xb79bae5f
 801a508:	38a3f445 	.word	0x38a3f445
 801a50c:	37d95384 	.word	0x37d95384
 801a510:	3a1a26c8 	.word	0x3a1a26c8
 801a514:	3b6b6916 	.word	0x3b6b6916
 801a518:	3cb327a4 	.word	0x3cb327a4
 801a51c:	3e088889 	.word	0x3e088889
 801a520:	3895c07a 	.word	0x3895c07a
 801a524:	398137b9 	.word	0x398137b9
 801a528:	3abede48 	.word	0x3abede48
 801a52c:	3c11371f 	.word	0x3c11371f
 801a530:	3d5d0dd1 	.word	0x3d5d0dd1
 801a534:	3eaaaaab 	.word	0x3eaaaaab
 801a538:	fffff000 	.word	0xfffff000
 801a53c:	00000000 	.word	0x00000000

0801a540 <atan>:
 801a540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a544:	ec55 4b10 	vmov	r4, r5, d0
 801a548:	4bc3      	ldr	r3, [pc, #780]	; (801a858 <atan+0x318>)
 801a54a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a54e:	429e      	cmp	r6, r3
 801a550:	46ab      	mov	fp, r5
 801a552:	dd18      	ble.n	801a586 <atan+0x46>
 801a554:	4bc1      	ldr	r3, [pc, #772]	; (801a85c <atan+0x31c>)
 801a556:	429e      	cmp	r6, r3
 801a558:	dc01      	bgt.n	801a55e <atan+0x1e>
 801a55a:	d109      	bne.n	801a570 <atan+0x30>
 801a55c:	b144      	cbz	r4, 801a570 <atan+0x30>
 801a55e:	4622      	mov	r2, r4
 801a560:	462b      	mov	r3, r5
 801a562:	4620      	mov	r0, r4
 801a564:	4629      	mov	r1, r5
 801a566:	f7e5 fe89 	bl	800027c <__adddf3>
 801a56a:	4604      	mov	r4, r0
 801a56c:	460d      	mov	r5, r1
 801a56e:	e006      	b.n	801a57e <atan+0x3e>
 801a570:	f1bb 0f00 	cmp.w	fp, #0
 801a574:	f300 8131 	bgt.w	801a7da <atan+0x29a>
 801a578:	a59b      	add	r5, pc, #620	; (adr r5, 801a7e8 <atan+0x2a8>)
 801a57a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a57e:	ec45 4b10 	vmov	d0, r4, r5
 801a582:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a586:	4bb6      	ldr	r3, [pc, #728]	; (801a860 <atan+0x320>)
 801a588:	429e      	cmp	r6, r3
 801a58a:	dc14      	bgt.n	801a5b6 <atan+0x76>
 801a58c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801a590:	429e      	cmp	r6, r3
 801a592:	dc0d      	bgt.n	801a5b0 <atan+0x70>
 801a594:	a396      	add	r3, pc, #600	; (adr r3, 801a7f0 <atan+0x2b0>)
 801a596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a59a:	ee10 0a10 	vmov	r0, s0
 801a59e:	4629      	mov	r1, r5
 801a5a0:	f7e5 fe6c 	bl	800027c <__adddf3>
 801a5a4:	4baf      	ldr	r3, [pc, #700]	; (801a864 <atan+0x324>)
 801a5a6:	2200      	movs	r2, #0
 801a5a8:	f7e6 faae 	bl	8000b08 <__aeabi_dcmpgt>
 801a5ac:	2800      	cmp	r0, #0
 801a5ae:	d1e6      	bne.n	801a57e <atan+0x3e>
 801a5b0:	f04f 3aff 	mov.w	sl, #4294967295
 801a5b4:	e02b      	b.n	801a60e <atan+0xce>
 801a5b6:	f000 f963 	bl	801a880 <fabs>
 801a5ba:	4bab      	ldr	r3, [pc, #684]	; (801a868 <atan+0x328>)
 801a5bc:	429e      	cmp	r6, r3
 801a5be:	ec55 4b10 	vmov	r4, r5, d0
 801a5c2:	f300 80bf 	bgt.w	801a744 <atan+0x204>
 801a5c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801a5ca:	429e      	cmp	r6, r3
 801a5cc:	f300 80a0 	bgt.w	801a710 <atan+0x1d0>
 801a5d0:	ee10 2a10 	vmov	r2, s0
 801a5d4:	ee10 0a10 	vmov	r0, s0
 801a5d8:	462b      	mov	r3, r5
 801a5da:	4629      	mov	r1, r5
 801a5dc:	f7e5 fe4e 	bl	800027c <__adddf3>
 801a5e0:	4ba0      	ldr	r3, [pc, #640]	; (801a864 <atan+0x324>)
 801a5e2:	2200      	movs	r2, #0
 801a5e4:	f7e5 fe48 	bl	8000278 <__aeabi_dsub>
 801a5e8:	2200      	movs	r2, #0
 801a5ea:	4606      	mov	r6, r0
 801a5ec:	460f      	mov	r7, r1
 801a5ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a5f2:	4620      	mov	r0, r4
 801a5f4:	4629      	mov	r1, r5
 801a5f6:	f7e5 fe41 	bl	800027c <__adddf3>
 801a5fa:	4602      	mov	r2, r0
 801a5fc:	460b      	mov	r3, r1
 801a5fe:	4630      	mov	r0, r6
 801a600:	4639      	mov	r1, r7
 801a602:	f7e6 f91b 	bl	800083c <__aeabi_ddiv>
 801a606:	f04f 0a00 	mov.w	sl, #0
 801a60a:	4604      	mov	r4, r0
 801a60c:	460d      	mov	r5, r1
 801a60e:	4622      	mov	r2, r4
 801a610:	462b      	mov	r3, r5
 801a612:	4620      	mov	r0, r4
 801a614:	4629      	mov	r1, r5
 801a616:	f7e5 ffe7 	bl	80005e8 <__aeabi_dmul>
 801a61a:	4602      	mov	r2, r0
 801a61c:	460b      	mov	r3, r1
 801a61e:	4680      	mov	r8, r0
 801a620:	4689      	mov	r9, r1
 801a622:	f7e5 ffe1 	bl	80005e8 <__aeabi_dmul>
 801a626:	a374      	add	r3, pc, #464	; (adr r3, 801a7f8 <atan+0x2b8>)
 801a628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a62c:	4606      	mov	r6, r0
 801a62e:	460f      	mov	r7, r1
 801a630:	f7e5 ffda 	bl	80005e8 <__aeabi_dmul>
 801a634:	a372      	add	r3, pc, #456	; (adr r3, 801a800 <atan+0x2c0>)
 801a636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a63a:	f7e5 fe1f 	bl	800027c <__adddf3>
 801a63e:	4632      	mov	r2, r6
 801a640:	463b      	mov	r3, r7
 801a642:	f7e5 ffd1 	bl	80005e8 <__aeabi_dmul>
 801a646:	a370      	add	r3, pc, #448	; (adr r3, 801a808 <atan+0x2c8>)
 801a648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a64c:	f7e5 fe16 	bl	800027c <__adddf3>
 801a650:	4632      	mov	r2, r6
 801a652:	463b      	mov	r3, r7
 801a654:	f7e5 ffc8 	bl	80005e8 <__aeabi_dmul>
 801a658:	a36d      	add	r3, pc, #436	; (adr r3, 801a810 <atan+0x2d0>)
 801a65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a65e:	f7e5 fe0d 	bl	800027c <__adddf3>
 801a662:	4632      	mov	r2, r6
 801a664:	463b      	mov	r3, r7
 801a666:	f7e5 ffbf 	bl	80005e8 <__aeabi_dmul>
 801a66a:	a36b      	add	r3, pc, #428	; (adr r3, 801a818 <atan+0x2d8>)
 801a66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a670:	f7e5 fe04 	bl	800027c <__adddf3>
 801a674:	4632      	mov	r2, r6
 801a676:	463b      	mov	r3, r7
 801a678:	f7e5 ffb6 	bl	80005e8 <__aeabi_dmul>
 801a67c:	a368      	add	r3, pc, #416	; (adr r3, 801a820 <atan+0x2e0>)
 801a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a682:	f7e5 fdfb 	bl	800027c <__adddf3>
 801a686:	4642      	mov	r2, r8
 801a688:	464b      	mov	r3, r9
 801a68a:	f7e5 ffad 	bl	80005e8 <__aeabi_dmul>
 801a68e:	a366      	add	r3, pc, #408	; (adr r3, 801a828 <atan+0x2e8>)
 801a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a694:	4680      	mov	r8, r0
 801a696:	4689      	mov	r9, r1
 801a698:	4630      	mov	r0, r6
 801a69a:	4639      	mov	r1, r7
 801a69c:	f7e5 ffa4 	bl	80005e8 <__aeabi_dmul>
 801a6a0:	a363      	add	r3, pc, #396	; (adr r3, 801a830 <atan+0x2f0>)
 801a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6a6:	f7e5 fde7 	bl	8000278 <__aeabi_dsub>
 801a6aa:	4632      	mov	r2, r6
 801a6ac:	463b      	mov	r3, r7
 801a6ae:	f7e5 ff9b 	bl	80005e8 <__aeabi_dmul>
 801a6b2:	a361      	add	r3, pc, #388	; (adr r3, 801a838 <atan+0x2f8>)
 801a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6b8:	f7e5 fdde 	bl	8000278 <__aeabi_dsub>
 801a6bc:	4632      	mov	r2, r6
 801a6be:	463b      	mov	r3, r7
 801a6c0:	f7e5 ff92 	bl	80005e8 <__aeabi_dmul>
 801a6c4:	a35e      	add	r3, pc, #376	; (adr r3, 801a840 <atan+0x300>)
 801a6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ca:	f7e5 fdd5 	bl	8000278 <__aeabi_dsub>
 801a6ce:	4632      	mov	r2, r6
 801a6d0:	463b      	mov	r3, r7
 801a6d2:	f7e5 ff89 	bl	80005e8 <__aeabi_dmul>
 801a6d6:	a35c      	add	r3, pc, #368	; (adr r3, 801a848 <atan+0x308>)
 801a6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6dc:	f7e5 fdcc 	bl	8000278 <__aeabi_dsub>
 801a6e0:	4632      	mov	r2, r6
 801a6e2:	463b      	mov	r3, r7
 801a6e4:	f7e5 ff80 	bl	80005e8 <__aeabi_dmul>
 801a6e8:	4602      	mov	r2, r0
 801a6ea:	460b      	mov	r3, r1
 801a6ec:	4640      	mov	r0, r8
 801a6ee:	4649      	mov	r1, r9
 801a6f0:	f7e5 fdc4 	bl	800027c <__adddf3>
 801a6f4:	4622      	mov	r2, r4
 801a6f6:	462b      	mov	r3, r5
 801a6f8:	f7e5 ff76 	bl	80005e8 <__aeabi_dmul>
 801a6fc:	f1ba 3fff 	cmp.w	sl, #4294967295
 801a700:	4602      	mov	r2, r0
 801a702:	460b      	mov	r3, r1
 801a704:	d14b      	bne.n	801a79e <atan+0x25e>
 801a706:	4620      	mov	r0, r4
 801a708:	4629      	mov	r1, r5
 801a70a:	f7e5 fdb5 	bl	8000278 <__aeabi_dsub>
 801a70e:	e72c      	b.n	801a56a <atan+0x2a>
 801a710:	ee10 0a10 	vmov	r0, s0
 801a714:	4b53      	ldr	r3, [pc, #332]	; (801a864 <atan+0x324>)
 801a716:	2200      	movs	r2, #0
 801a718:	4629      	mov	r1, r5
 801a71a:	f7e5 fdad 	bl	8000278 <__aeabi_dsub>
 801a71e:	4b51      	ldr	r3, [pc, #324]	; (801a864 <atan+0x324>)
 801a720:	4606      	mov	r6, r0
 801a722:	460f      	mov	r7, r1
 801a724:	2200      	movs	r2, #0
 801a726:	4620      	mov	r0, r4
 801a728:	4629      	mov	r1, r5
 801a72a:	f7e5 fda7 	bl	800027c <__adddf3>
 801a72e:	4602      	mov	r2, r0
 801a730:	460b      	mov	r3, r1
 801a732:	4630      	mov	r0, r6
 801a734:	4639      	mov	r1, r7
 801a736:	f7e6 f881 	bl	800083c <__aeabi_ddiv>
 801a73a:	f04f 0a01 	mov.w	sl, #1
 801a73e:	4604      	mov	r4, r0
 801a740:	460d      	mov	r5, r1
 801a742:	e764      	b.n	801a60e <atan+0xce>
 801a744:	4b49      	ldr	r3, [pc, #292]	; (801a86c <atan+0x32c>)
 801a746:	429e      	cmp	r6, r3
 801a748:	da1d      	bge.n	801a786 <atan+0x246>
 801a74a:	ee10 0a10 	vmov	r0, s0
 801a74e:	4b48      	ldr	r3, [pc, #288]	; (801a870 <atan+0x330>)
 801a750:	2200      	movs	r2, #0
 801a752:	4629      	mov	r1, r5
 801a754:	f7e5 fd90 	bl	8000278 <__aeabi_dsub>
 801a758:	4b45      	ldr	r3, [pc, #276]	; (801a870 <atan+0x330>)
 801a75a:	4606      	mov	r6, r0
 801a75c:	460f      	mov	r7, r1
 801a75e:	2200      	movs	r2, #0
 801a760:	4620      	mov	r0, r4
 801a762:	4629      	mov	r1, r5
 801a764:	f7e5 ff40 	bl	80005e8 <__aeabi_dmul>
 801a768:	4b3e      	ldr	r3, [pc, #248]	; (801a864 <atan+0x324>)
 801a76a:	2200      	movs	r2, #0
 801a76c:	f7e5 fd86 	bl	800027c <__adddf3>
 801a770:	4602      	mov	r2, r0
 801a772:	460b      	mov	r3, r1
 801a774:	4630      	mov	r0, r6
 801a776:	4639      	mov	r1, r7
 801a778:	f7e6 f860 	bl	800083c <__aeabi_ddiv>
 801a77c:	f04f 0a02 	mov.w	sl, #2
 801a780:	4604      	mov	r4, r0
 801a782:	460d      	mov	r5, r1
 801a784:	e743      	b.n	801a60e <atan+0xce>
 801a786:	462b      	mov	r3, r5
 801a788:	ee10 2a10 	vmov	r2, s0
 801a78c:	4939      	ldr	r1, [pc, #228]	; (801a874 <atan+0x334>)
 801a78e:	2000      	movs	r0, #0
 801a790:	f7e6 f854 	bl	800083c <__aeabi_ddiv>
 801a794:	f04f 0a03 	mov.w	sl, #3
 801a798:	4604      	mov	r4, r0
 801a79a:	460d      	mov	r5, r1
 801a79c:	e737      	b.n	801a60e <atan+0xce>
 801a79e:	4b36      	ldr	r3, [pc, #216]	; (801a878 <atan+0x338>)
 801a7a0:	4e36      	ldr	r6, [pc, #216]	; (801a87c <atan+0x33c>)
 801a7a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a7a6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801a7aa:	e9da 2300 	ldrd	r2, r3, [sl]
 801a7ae:	f7e5 fd63 	bl	8000278 <__aeabi_dsub>
 801a7b2:	4622      	mov	r2, r4
 801a7b4:	462b      	mov	r3, r5
 801a7b6:	f7e5 fd5f 	bl	8000278 <__aeabi_dsub>
 801a7ba:	4602      	mov	r2, r0
 801a7bc:	460b      	mov	r3, r1
 801a7be:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a7c2:	f7e5 fd59 	bl	8000278 <__aeabi_dsub>
 801a7c6:	f1bb 0f00 	cmp.w	fp, #0
 801a7ca:	4604      	mov	r4, r0
 801a7cc:	460d      	mov	r5, r1
 801a7ce:	f6bf aed6 	bge.w	801a57e <atan+0x3e>
 801a7d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a7d6:	461d      	mov	r5, r3
 801a7d8:	e6d1      	b.n	801a57e <atan+0x3e>
 801a7da:	a51d      	add	r5, pc, #116	; (adr r5, 801a850 <atan+0x310>)
 801a7dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a7e0:	e6cd      	b.n	801a57e <atan+0x3e>
 801a7e2:	bf00      	nop
 801a7e4:	f3af 8000 	nop.w
 801a7e8:	54442d18 	.word	0x54442d18
 801a7ec:	bff921fb 	.word	0xbff921fb
 801a7f0:	8800759c 	.word	0x8800759c
 801a7f4:	7e37e43c 	.word	0x7e37e43c
 801a7f8:	e322da11 	.word	0xe322da11
 801a7fc:	3f90ad3a 	.word	0x3f90ad3a
 801a800:	24760deb 	.word	0x24760deb
 801a804:	3fa97b4b 	.word	0x3fa97b4b
 801a808:	a0d03d51 	.word	0xa0d03d51
 801a80c:	3fb10d66 	.word	0x3fb10d66
 801a810:	c54c206e 	.word	0xc54c206e
 801a814:	3fb745cd 	.word	0x3fb745cd
 801a818:	920083ff 	.word	0x920083ff
 801a81c:	3fc24924 	.word	0x3fc24924
 801a820:	5555550d 	.word	0x5555550d
 801a824:	3fd55555 	.word	0x3fd55555
 801a828:	2c6a6c2f 	.word	0x2c6a6c2f
 801a82c:	bfa2b444 	.word	0xbfa2b444
 801a830:	52defd9a 	.word	0x52defd9a
 801a834:	3fadde2d 	.word	0x3fadde2d
 801a838:	af749a6d 	.word	0xaf749a6d
 801a83c:	3fb3b0f2 	.word	0x3fb3b0f2
 801a840:	fe231671 	.word	0xfe231671
 801a844:	3fbc71c6 	.word	0x3fbc71c6
 801a848:	9998ebc4 	.word	0x9998ebc4
 801a84c:	3fc99999 	.word	0x3fc99999
 801a850:	54442d18 	.word	0x54442d18
 801a854:	3ff921fb 	.word	0x3ff921fb
 801a858:	440fffff 	.word	0x440fffff
 801a85c:	7ff00000 	.word	0x7ff00000
 801a860:	3fdbffff 	.word	0x3fdbffff
 801a864:	3ff00000 	.word	0x3ff00000
 801a868:	3ff2ffff 	.word	0x3ff2ffff
 801a86c:	40038000 	.word	0x40038000
 801a870:	3ff80000 	.word	0x3ff80000
 801a874:	bff00000 	.word	0xbff00000
 801a878:	0801b110 	.word	0x0801b110
 801a87c:	0801b0f0 	.word	0x0801b0f0

0801a880 <fabs>:
 801a880:	ec51 0b10 	vmov	r0, r1, d0
 801a884:	ee10 2a10 	vmov	r2, s0
 801a888:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a88c:	ec43 2b10 	vmov	d0, r2, r3
 801a890:	4770      	bx	lr
	...

0801a894 <atanf>:
 801a894:	b538      	push	{r3, r4, r5, lr}
 801a896:	ee10 5a10 	vmov	r5, s0
 801a89a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801a89e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801a8a2:	eef0 7a40 	vmov.f32	s15, s0
 801a8a6:	db10      	blt.n	801a8ca <atanf+0x36>
 801a8a8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801a8ac:	dd04      	ble.n	801a8b8 <atanf+0x24>
 801a8ae:	ee70 7a00 	vadd.f32	s15, s0, s0
 801a8b2:	eeb0 0a67 	vmov.f32	s0, s15
 801a8b6:	bd38      	pop	{r3, r4, r5, pc}
 801a8b8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801a9f0 <atanf+0x15c>
 801a8bc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801a9f4 <atanf+0x160>
 801a8c0:	2d00      	cmp	r5, #0
 801a8c2:	bfd8      	it	le
 801a8c4:	eef0 7a40 	vmovle.f32	s15, s0
 801a8c8:	e7f3      	b.n	801a8b2 <atanf+0x1e>
 801a8ca:	4b4b      	ldr	r3, [pc, #300]	; (801a9f8 <atanf+0x164>)
 801a8cc:	429c      	cmp	r4, r3
 801a8ce:	dc10      	bgt.n	801a8f2 <atanf+0x5e>
 801a8d0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801a8d4:	da0a      	bge.n	801a8ec <atanf+0x58>
 801a8d6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801a9fc <atanf+0x168>
 801a8da:	ee30 7a07 	vadd.f32	s14, s0, s14
 801a8de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a8e2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801a8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8ea:	dce2      	bgt.n	801a8b2 <atanf+0x1e>
 801a8ec:	f04f 33ff 	mov.w	r3, #4294967295
 801a8f0:	e013      	b.n	801a91a <atanf+0x86>
 801a8f2:	f000 f8a3 	bl	801aa3c <fabsf>
 801a8f6:	4b42      	ldr	r3, [pc, #264]	; (801aa00 <atanf+0x16c>)
 801a8f8:	429c      	cmp	r4, r3
 801a8fa:	dc4f      	bgt.n	801a99c <atanf+0x108>
 801a8fc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801a900:	429c      	cmp	r4, r3
 801a902:	dc41      	bgt.n	801a988 <atanf+0xf4>
 801a904:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801a908:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801a90c:	eea0 7a27 	vfma.f32	s14, s0, s15
 801a910:	2300      	movs	r3, #0
 801a912:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a916:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a91a:	1c5a      	adds	r2, r3, #1
 801a91c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801a920:	eddf 5a38 	vldr	s11, [pc, #224]	; 801aa04 <atanf+0x170>
 801a924:	ed9f 6a38 	vldr	s12, [pc, #224]	; 801aa08 <atanf+0x174>
 801a928:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801aa0c <atanf+0x178>
 801a92c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801aa10 <atanf+0x17c>
 801a930:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801a934:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a938:	eddf 5a36 	vldr	s11, [pc, #216]	; 801aa14 <atanf+0x180>
 801a93c:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a940:	ed9f 6a35 	vldr	s12, [pc, #212]	; 801aa18 <atanf+0x184>
 801a944:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a948:	eddf 5a34 	vldr	s11, [pc, #208]	; 801aa1c <atanf+0x188>
 801a94c:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a950:	ed9f 6a33 	vldr	s12, [pc, #204]	; 801aa20 <atanf+0x18c>
 801a954:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a958:	eddf 5a32 	vldr	s11, [pc, #200]	; 801aa24 <atanf+0x190>
 801a95c:	eee7 5a05 	vfma.f32	s11, s14, s10
 801a960:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801aa28 <atanf+0x194>
 801a964:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a968:	eddf 5a30 	vldr	s11, [pc, #192]	; 801aa2c <atanf+0x198>
 801a96c:	eee5 5a07 	vfma.f32	s11, s10, s14
 801a970:	eea5 0a87 	vfma.f32	s0, s11, s14
 801a974:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a978:	eea6 0a26 	vfma.f32	s0, s12, s13
 801a97c:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a980:	d121      	bne.n	801a9c6 <atanf+0x132>
 801a982:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a986:	e794      	b.n	801a8b2 <atanf+0x1e>
 801a988:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a98c:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a990:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a994:	2301      	movs	r3, #1
 801a996:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a99a:	e7be      	b.n	801a91a <atanf+0x86>
 801a99c:	4b24      	ldr	r3, [pc, #144]	; (801aa30 <atanf+0x19c>)
 801a99e:	429c      	cmp	r4, r3
 801a9a0:	dc0b      	bgt.n	801a9ba <atanf+0x126>
 801a9a2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801a9a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a9aa:	eea0 7a27 	vfma.f32	s14, s0, s15
 801a9ae:	2302      	movs	r3, #2
 801a9b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a9b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a9b8:	e7af      	b.n	801a91a <atanf+0x86>
 801a9ba:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801a9be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a9c2:	2303      	movs	r3, #3
 801a9c4:	e7a9      	b.n	801a91a <atanf+0x86>
 801a9c6:	4a1b      	ldr	r2, [pc, #108]	; (801aa34 <atanf+0x1a0>)
 801a9c8:	491b      	ldr	r1, [pc, #108]	; (801aa38 <atanf+0x1a4>)
 801a9ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801a9ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a9d2:	ed93 7a00 	vldr	s14, [r3]
 801a9d6:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a9da:	2d00      	cmp	r5, #0
 801a9dc:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a9e0:	ed92 0a00 	vldr	s0, [r2]
 801a9e4:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a9e8:	bfb8      	it	lt
 801a9ea:	eef1 7a67 	vneglt.f32	s15, s15
 801a9ee:	e760      	b.n	801a8b2 <atanf+0x1e>
 801a9f0:	3fc90fdb 	.word	0x3fc90fdb
 801a9f4:	bfc90fdb 	.word	0xbfc90fdb
 801a9f8:	3edfffff 	.word	0x3edfffff
 801a9fc:	7149f2ca 	.word	0x7149f2ca
 801aa00:	3f97ffff 	.word	0x3f97ffff
 801aa04:	3c8569d7 	.word	0x3c8569d7
 801aa08:	3d4bda59 	.word	0x3d4bda59
 801aa0c:	bd15a221 	.word	0xbd15a221
 801aa10:	be4ccccd 	.word	0xbe4ccccd
 801aa14:	3d886b35 	.word	0x3d886b35
 801aa18:	3dba2e6e 	.word	0x3dba2e6e
 801aa1c:	3e124925 	.word	0x3e124925
 801aa20:	3eaaaaab 	.word	0x3eaaaaab
 801aa24:	bd6ef16b 	.word	0xbd6ef16b
 801aa28:	bd9d8795 	.word	0xbd9d8795
 801aa2c:	bde38e38 	.word	0xbde38e38
 801aa30:	401bffff 	.word	0x401bffff
 801aa34:	0801b130 	.word	0x0801b130
 801aa38:	0801b140 	.word	0x0801b140

0801aa3c <fabsf>:
 801aa3c:	ee10 3a10 	vmov	r3, s0
 801aa40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801aa44:	ee00 3a10 	vmov	s0, r3
 801aa48:	4770      	bx	lr
	...

0801aa4c <floorf>:
 801aa4c:	ee10 3a10 	vmov	r3, s0
 801aa50:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801aa54:	3a7f      	subs	r2, #127	; 0x7f
 801aa56:	2a16      	cmp	r2, #22
 801aa58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801aa5c:	dc2a      	bgt.n	801aab4 <floorf+0x68>
 801aa5e:	2a00      	cmp	r2, #0
 801aa60:	da11      	bge.n	801aa86 <floorf+0x3a>
 801aa62:	eddf 7a18 	vldr	s15, [pc, #96]	; 801aac4 <floorf+0x78>
 801aa66:	ee30 0a27 	vadd.f32	s0, s0, s15
 801aa6a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801aa6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa72:	dd05      	ble.n	801aa80 <floorf+0x34>
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	da23      	bge.n	801aac0 <floorf+0x74>
 801aa78:	4a13      	ldr	r2, [pc, #76]	; (801aac8 <floorf+0x7c>)
 801aa7a:	2900      	cmp	r1, #0
 801aa7c:	bf18      	it	ne
 801aa7e:	4613      	movne	r3, r2
 801aa80:	ee00 3a10 	vmov	s0, r3
 801aa84:	4770      	bx	lr
 801aa86:	4911      	ldr	r1, [pc, #68]	; (801aacc <floorf+0x80>)
 801aa88:	4111      	asrs	r1, r2
 801aa8a:	420b      	tst	r3, r1
 801aa8c:	d0fa      	beq.n	801aa84 <floorf+0x38>
 801aa8e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801aac4 <floorf+0x78>
 801aa92:	ee30 0a27 	vadd.f32	s0, s0, s15
 801aa96:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801aa9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa9e:	ddef      	ble.n	801aa80 <floorf+0x34>
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	bfbe      	ittt	lt
 801aaa4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801aaa8:	fa40 f202 	asrlt.w	r2, r0, r2
 801aaac:	189b      	addlt	r3, r3, r2
 801aaae:	ea23 0301 	bic.w	r3, r3, r1
 801aab2:	e7e5      	b.n	801aa80 <floorf+0x34>
 801aab4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801aab8:	d3e4      	bcc.n	801aa84 <floorf+0x38>
 801aaba:	ee30 0a00 	vadd.f32	s0, s0, s0
 801aabe:	4770      	bx	lr
 801aac0:	2300      	movs	r3, #0
 801aac2:	e7dd      	b.n	801aa80 <floorf+0x34>
 801aac4:	7149f2ca 	.word	0x7149f2ca
 801aac8:	bf800000 	.word	0xbf800000
 801aacc:	007fffff 	.word	0x007fffff

0801aad0 <nanf>:
 801aad0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801aad8 <nanf+0x8>
 801aad4:	4770      	bx	lr
 801aad6:	bf00      	nop
 801aad8:	7fc00000 	.word	0x7fc00000

0801aadc <scalbnf>:
 801aadc:	ee10 3a10 	vmov	r3, s0
 801aae0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801aae4:	d025      	beq.n	801ab32 <scalbnf+0x56>
 801aae6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801aaea:	d302      	bcc.n	801aaf2 <scalbnf+0x16>
 801aaec:	ee30 0a00 	vadd.f32	s0, s0, s0
 801aaf0:	4770      	bx	lr
 801aaf2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801aaf6:	d122      	bne.n	801ab3e <scalbnf+0x62>
 801aaf8:	4b2a      	ldr	r3, [pc, #168]	; (801aba4 <scalbnf+0xc8>)
 801aafa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801aba8 <scalbnf+0xcc>
 801aafe:	4298      	cmp	r0, r3
 801ab00:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ab04:	db16      	blt.n	801ab34 <scalbnf+0x58>
 801ab06:	ee10 3a10 	vmov	r3, s0
 801ab0a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ab0e:	3a19      	subs	r2, #25
 801ab10:	4402      	add	r2, r0
 801ab12:	2afe      	cmp	r2, #254	; 0xfe
 801ab14:	dd15      	ble.n	801ab42 <scalbnf+0x66>
 801ab16:	ee10 3a10 	vmov	r3, s0
 801ab1a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801abac <scalbnf+0xd0>
 801ab1e:	eddf 6a24 	vldr	s13, [pc, #144]	; 801abb0 <scalbnf+0xd4>
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	eeb0 7a67 	vmov.f32	s14, s15
 801ab28:	bfb8      	it	lt
 801ab2a:	eef0 7a66 	vmovlt.f32	s15, s13
 801ab2e:	ee27 0a27 	vmul.f32	s0, s14, s15
 801ab32:	4770      	bx	lr
 801ab34:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801abb4 <scalbnf+0xd8>
 801ab38:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ab3c:	4770      	bx	lr
 801ab3e:	0dd2      	lsrs	r2, r2, #23
 801ab40:	e7e6      	b.n	801ab10 <scalbnf+0x34>
 801ab42:	2a00      	cmp	r2, #0
 801ab44:	dd06      	ble.n	801ab54 <scalbnf+0x78>
 801ab46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ab4a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801ab4e:	ee00 3a10 	vmov	s0, r3
 801ab52:	4770      	bx	lr
 801ab54:	f112 0f16 	cmn.w	r2, #22
 801ab58:	da1a      	bge.n	801ab90 <scalbnf+0xb4>
 801ab5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ab5e:	4298      	cmp	r0, r3
 801ab60:	ee10 3a10 	vmov	r3, s0
 801ab64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ab68:	dd0a      	ble.n	801ab80 <scalbnf+0xa4>
 801ab6a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801abac <scalbnf+0xd0>
 801ab6e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801abb0 <scalbnf+0xd4>
 801ab72:	eef0 7a40 	vmov.f32	s15, s0
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	bf18      	it	ne
 801ab7a:	eeb0 0a47 	vmovne.f32	s0, s14
 801ab7e:	e7db      	b.n	801ab38 <scalbnf+0x5c>
 801ab80:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801abb4 <scalbnf+0xd8>
 801ab84:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801abb8 <scalbnf+0xdc>
 801ab88:	eef0 7a40 	vmov.f32	s15, s0
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	e7f3      	b.n	801ab78 <scalbnf+0x9c>
 801ab90:	3219      	adds	r2, #25
 801ab92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ab96:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801ab9a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801abbc <scalbnf+0xe0>
 801ab9e:	ee07 3a10 	vmov	s14, r3
 801aba2:	e7c4      	b.n	801ab2e <scalbnf+0x52>
 801aba4:	ffff3cb0 	.word	0xffff3cb0
 801aba8:	4c000000 	.word	0x4c000000
 801abac:	7149f2ca 	.word	0x7149f2ca
 801abb0:	f149f2ca 	.word	0xf149f2ca
 801abb4:	0da24260 	.word	0x0da24260
 801abb8:	8da24260 	.word	0x8da24260
 801abbc:	33000000 	.word	0x33000000

0801abc0 <_init>:
 801abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abc2:	bf00      	nop
 801abc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801abc6:	bc08      	pop	{r3}
 801abc8:	469e      	mov	lr, r3
 801abca:	4770      	bx	lr

0801abcc <_fini>:
 801abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abce:	bf00      	nop
 801abd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801abd2:	bc08      	pop	{r3}
 801abd4:	469e      	mov	lr, r3
 801abd6:	4770      	bx	lr
