
XCubeMemsSensorDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b68c  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d7  0800b8c8  0800b8c8  0001b8c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bda0  0800bda0  0001bda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bda8  0800bda8  0001bda8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bdac  0800bdac  0001bdac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000f4  20000000  0800bdb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000028c  200000f4  0800bea4  000200f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000380  0800bea4  00020380  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003abad  00000000  00000000  0002012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004413  00000000  00000000  0005acd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e18  00000000  00000000  0005f0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001cc0  00000000  00000000  00060f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033a90  00000000  00000000  00062bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dd4c  00000000  00000000  00096658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001422ce  00000000  00000000  000b43a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f6672  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008e2c  00000000  00000000  001f66c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200000f4 	.word	0x200000f4
 8000254:	00000000 	.word	0x00000000
 8000258:	0800b8ac 	.word	0x0800b8ac

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200000f8 	.word	0x200000f8
 8000274:	0800b8ac 	.word	0x0800b8ac

08000278 <__aeabi_drsub>:
 8000278:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800027c:	e002      	b.n	8000284 <__adddf3>
 800027e:	bf00      	nop

08000280 <__aeabi_dsub>:
 8000280:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000284 <__adddf3>:
 8000284:	b530      	push	{r4, r5, lr}
 8000286:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028e:	ea94 0f05 	teq	r4, r5
 8000292:	bf08      	it	eq
 8000294:	ea90 0f02 	teqeq	r0, r2
 8000298:	bf1f      	itttt	ne
 800029a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002aa:	f000 80e2 	beq.w	8000472 <__adddf3+0x1ee>
 80002ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b6:	bfb8      	it	lt
 80002b8:	426d      	neglt	r5, r5
 80002ba:	dd0c      	ble.n	80002d6 <__adddf3+0x52>
 80002bc:	442c      	add	r4, r5
 80002be:	ea80 0202 	eor.w	r2, r0, r2
 80002c2:	ea81 0303 	eor.w	r3, r1, r3
 80002c6:	ea82 0000 	eor.w	r0, r2, r0
 80002ca:	ea83 0101 	eor.w	r1, r3, r1
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	2d36      	cmp	r5, #54	; 0x36
 80002d8:	bf88      	it	hi
 80002da:	bd30      	pophi	{r4, r5, pc}
 80002dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x70>
 80002ee:	4240      	negs	r0, r0
 80002f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000300:	d002      	beq.n	8000308 <__adddf3+0x84>
 8000302:	4252      	negs	r2, r2
 8000304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000308:	ea94 0f05 	teq	r4, r5
 800030c:	f000 80a7 	beq.w	800045e <__adddf3+0x1da>
 8000310:	f1a4 0401 	sub.w	r4, r4, #1
 8000314:	f1d5 0e20 	rsbs	lr, r5, #32
 8000318:	db0d      	blt.n	8000336 <__adddf3+0xb2>
 800031a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031e:	fa22 f205 	lsr.w	r2, r2, r5
 8000322:	1880      	adds	r0, r0, r2
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	fa03 f20e 	lsl.w	r2, r3, lr
 800032c:	1880      	adds	r0, r0, r2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	4159      	adcs	r1, r3
 8000334:	e00e      	b.n	8000354 <__adddf3+0xd0>
 8000336:	f1a5 0520 	sub.w	r5, r5, #32
 800033a:	f10e 0e20 	add.w	lr, lr, #32
 800033e:	2a01      	cmp	r2, #1
 8000340:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000344:	bf28      	it	cs
 8000346:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	18c0      	adds	r0, r0, r3
 8000350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000358:	d507      	bpl.n	800036a <__adddf3+0xe6>
 800035a:	f04f 0e00 	mov.w	lr, #0
 800035e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000362:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000366:	eb6e 0101 	sbc.w	r1, lr, r1
 800036a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800036e:	d31b      	bcc.n	80003a8 <__adddf3+0x124>
 8000370:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000374:	d30c      	bcc.n	8000390 <__adddf3+0x10c>
 8000376:	0849      	lsrs	r1, r1, #1
 8000378:	ea5f 0030 	movs.w	r0, r0, rrx
 800037c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000380:	f104 0401 	add.w	r4, r4, #1
 8000384:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000388:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800038c:	f080 809a 	bcs.w	80004c4 <__adddf3+0x240>
 8000390:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	ea41 0105 	orr.w	r1, r1, r5
 80003a6:	bd30      	pop	{r4, r5, pc}
 80003a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ac:	4140      	adcs	r0, r0
 80003ae:	eb41 0101 	adc.w	r1, r1, r1
 80003b2:	3c01      	subs	r4, #1
 80003b4:	bf28      	it	cs
 80003b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ba:	d2e9      	bcs.n	8000390 <__adddf3+0x10c>
 80003bc:	f091 0f00 	teq	r1, #0
 80003c0:	bf04      	itt	eq
 80003c2:	4601      	moveq	r1, r0
 80003c4:	2000      	moveq	r0, #0
 80003c6:	fab1 f381 	clz	r3, r1
 80003ca:	bf08      	it	eq
 80003cc:	3320      	addeq	r3, #32
 80003ce:	f1a3 030b 	sub.w	r3, r3, #11
 80003d2:	f1b3 0220 	subs.w	r2, r3, #32
 80003d6:	da0c      	bge.n	80003f2 <__adddf3+0x16e>
 80003d8:	320c      	adds	r2, #12
 80003da:	dd08      	ble.n	80003ee <__adddf3+0x16a>
 80003dc:	f102 0c14 	add.w	ip, r2, #20
 80003e0:	f1c2 020c 	rsb	r2, r2, #12
 80003e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ec:	e00c      	b.n	8000408 <__adddf3+0x184>
 80003ee:	f102 0214 	add.w	r2, r2, #20
 80003f2:	bfd8      	it	le
 80003f4:	f1c2 0c20 	rsble	ip, r2, #32
 80003f8:	fa01 f102 	lsl.w	r1, r1, r2
 80003fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000400:	bfdc      	itt	le
 8000402:	ea41 010c 	orrle.w	r1, r1, ip
 8000406:	4090      	lslle	r0, r2
 8000408:	1ae4      	subs	r4, r4, r3
 800040a:	bfa2      	ittt	ge
 800040c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000410:	4329      	orrge	r1, r5
 8000412:	bd30      	popge	{r4, r5, pc}
 8000414:	ea6f 0404 	mvn.w	r4, r4
 8000418:	3c1f      	subs	r4, #31
 800041a:	da1c      	bge.n	8000456 <__adddf3+0x1d2>
 800041c:	340c      	adds	r4, #12
 800041e:	dc0e      	bgt.n	800043e <__adddf3+0x1ba>
 8000420:	f104 0414 	add.w	r4, r4, #20
 8000424:	f1c4 0220 	rsb	r2, r4, #32
 8000428:	fa20 f004 	lsr.w	r0, r0, r4
 800042c:	fa01 f302 	lsl.w	r3, r1, r2
 8000430:	ea40 0003 	orr.w	r0, r0, r3
 8000434:	fa21 f304 	lsr.w	r3, r1, r4
 8000438:	ea45 0103 	orr.w	r1, r5, r3
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f1c4 040c 	rsb	r4, r4, #12
 8000442:	f1c4 0220 	rsb	r2, r4, #32
 8000446:	fa20 f002 	lsr.w	r0, r0, r2
 800044a:	fa01 f304 	lsl.w	r3, r1, r4
 800044e:	ea40 0003 	orr.w	r0, r0, r3
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	fa21 f004 	lsr.w	r0, r1, r4
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f094 0f00 	teq	r4, #0
 8000462:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000466:	bf06      	itte	eq
 8000468:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800046c:	3401      	addeq	r4, #1
 800046e:	3d01      	subne	r5, #1
 8000470:	e74e      	b.n	8000310 <__adddf3+0x8c>
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf18      	it	ne
 8000478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800047c:	d029      	beq.n	80004d2 <__adddf3+0x24e>
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	d005      	beq.n	8000496 <__adddf3+0x212>
 800048a:	ea54 0c00 	orrs.w	ip, r4, r0
 800048e:	bf04      	itt	eq
 8000490:	4619      	moveq	r1, r3
 8000492:	4610      	moveq	r0, r2
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea91 0f03 	teq	r1, r3
 800049a:	bf1e      	ittt	ne
 800049c:	2100      	movne	r1, #0
 800049e:	2000      	movne	r0, #0
 80004a0:	bd30      	popne	{r4, r5, pc}
 80004a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a6:	d105      	bne.n	80004b4 <__adddf3+0x230>
 80004a8:	0040      	lsls	r0, r0, #1
 80004aa:	4149      	adcs	r1, r1
 80004ac:	bf28      	it	cs
 80004ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b8:	bf3c      	itt	cc
 80004ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004be:	bd30      	popcc	{r4, r5, pc}
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004cc:	f04f 0000 	mov.w	r0, #0
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf1a      	itte	ne
 80004d8:	4619      	movne	r1, r3
 80004da:	4610      	movne	r0, r2
 80004dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e0:	bf1c      	itt	ne
 80004e2:	460b      	movne	r3, r1
 80004e4:	4602      	movne	r2, r0
 80004e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ea:	bf06      	itte	eq
 80004ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f0:	ea91 0f03 	teqeq	r1, r3
 80004f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	bf00      	nop

080004fc <__aeabi_ui2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000510:	f04f 0500 	mov.w	r5, #0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e750      	b.n	80003bc <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_i2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000530:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000534:	bf48      	it	mi
 8000536:	4240      	negmi	r0, r0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e73e      	b.n	80003bc <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_f2d>:
 8000540:	0042      	lsls	r2, r0, #1
 8000542:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000546:	ea4f 0131 	mov.w	r1, r1, rrx
 800054a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054e:	bf1f      	itttt	ne
 8000550:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000554:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000558:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800055c:	4770      	bxne	lr
 800055e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000562:	bf08      	it	eq
 8000564:	4770      	bxeq	lr
 8000566:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800056a:	bf04      	itt	eq
 800056c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e71c      	b.n	80003bc <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aed8 	beq.w	800036a <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6bd      	b.n	800036a <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b980 	b.w	8000f58 <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000c76:	4604      	mov	r4, r0
 8000c78:	4688      	mov	r8, r1
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f040 8084 	bne.w	8000d88 <__udivmoddi4+0x118>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d943      	bls.n	8000d0e <__udivmoddi4+0x9e>
 8000c86:	fab2 f282 	clz	r2, r2
 8000c8a:	b142      	cbz	r2, 8000c9e <__udivmoddi4+0x2e>
 8000c8c:	f1c2 0020 	rsb	r0, r2, #32
 8000c90:	4091      	lsls	r1, r2
 8000c92:	4097      	lsls	r7, r2
 8000c94:	fa24 f000 	lsr.w	r0, r4, r0
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	ea40 0801 	orr.w	r8, r0, r1
 8000c9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000ca2:	0c23      	lsrs	r3, r4, #16
 8000ca4:	fa1f fe87 	uxth.w	lr, r7
 8000ca8:	fbb8 f6fc 	udiv	r6, r8, ip
 8000cac:	fb0c 8116 	mls	r1, ip, r6, r8
 8000cb0:	fb06 f00e 	mul.w	r0, r6, lr
 8000cb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb8:	4298      	cmp	r0, r3
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x5c>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f106 31ff 	add.w	r1, r6, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x5a>
 8000cc4:	4298      	cmp	r0, r3
 8000cc6:	f200 8131 	bhi.w	8000f2c <__udivmoddi4+0x2bc>
 8000cca:	460e      	mov	r6, r1
 8000ccc:	1a19      	subs	r1, r3, r0
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fc 	udiv	r0, r1, ip
 8000cd4:	fb0c 1110 	mls	r1, ip, r0, r1
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x84>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x82>
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	f200 811a 	bhi.w	8000f26 <__udivmoddi4+0x2b6>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0x98>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xa2>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d152      	bne.n	8000dc0 <__udivmoddi4+0x150>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	0c21      	lsrs	r1, r4, #16
 8000d28:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2c:	fb0e 301c 	mls	r0, lr, ip, r3
 8000d30:	fb08 f90c 	mul.w	r9, r8, ip
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	4589      	cmp	r9, r1
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000d42:	bf2c      	ite	cs
 8000d44:	2001      	movcs	r0, #1
 8000d46:	2000      	movcc	r0, #0
 8000d48:	4589      	cmp	r9, r1
 8000d4a:	d902      	bls.n	8000d52 <__udivmoddi4+0xe2>
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	f000 80f0 	beq.w	8000f32 <__udivmoddi4+0x2c2>
 8000d52:	469c      	mov	ip, r3
 8000d54:	eba1 0109 	sub.w	r1, r1, r9
 8000d58:	b2a3      	uxth	r3, r4
 8000d5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d62:	fb08 f800 	mul.w	r8, r8, r0
 8000d66:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6a:	45a0      	cmp	r8, r4
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x10e>
 8000d6e:	193c      	adds	r4, r7, r4
 8000d70:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x10c>
 8000d76:	45a0      	cmp	r8, r4
 8000d78:	f200 80d2 	bhi.w	8000f20 <__udivmoddi4+0x2b0>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	eba4 0408 	sub.w	r4, r4, r8
 8000d82:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d86:	e7ba      	b.n	8000cfe <__udivmoddi4+0x8e>
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d909      	bls.n	8000da0 <__udivmoddi4+0x130>
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	f000 80be 	beq.w	8000f0e <__udivmoddi4+0x29e>
 8000d92:	2600      	movs	r6, #0
 8000d94:	e9c5 0100 	strd	r0, r1, [r5]
 8000d98:	4630      	mov	r0, r6
 8000d9a:	4631      	mov	r1, r6
 8000d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000da0:	fab3 f683 	clz	r6, r3
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	d14d      	bne.n	8000e44 <__udivmoddi4+0x1d4>
 8000da8:	428b      	cmp	r3, r1
 8000daa:	f0c0 80b3 	bcc.w	8000f14 <__udivmoddi4+0x2a4>
 8000dae:	4282      	cmp	r2, r0
 8000db0:	f240 80b0 	bls.w	8000f14 <__udivmoddi4+0x2a4>
 8000db4:	4630      	mov	r0, r6
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0a6      	beq.n	8000d08 <__udivmoddi4+0x98>
 8000dba:	e9c5 4800 	strd	r4, r8, [r5]
 8000dbe:	e7a3      	b.n	8000d08 <__udivmoddi4+0x98>
 8000dc0:	4097      	lsls	r7, r2
 8000dc2:	f1c2 0320 	rsb	r3, r2, #32
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd4:	fa1f f887 	uxth.w	r8, r7
 8000dd8:	4094      	lsls	r4, r2
 8000dda:	4303      	orrs	r3, r0
 8000ddc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de0:	0c1e      	lsrs	r6, r3, #16
 8000de2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de6:	fb00 fc08 	mul.w	ip, r0, r8
 8000dea:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8000dee:	458c      	cmp	ip, r1
 8000df0:	d90e      	bls.n	8000e10 <__udivmoddi4+0x1a0>
 8000df2:	1879      	adds	r1, r7, r1
 8000df4:	f100 36ff 	add.w	r6, r0, #4294967295
 8000df8:	bf2c      	ite	cs
 8000dfa:	f04f 0901 	movcs.w	r9, #1
 8000dfe:	f04f 0900 	movcc.w	r9, #0
 8000e02:	458c      	cmp	ip, r1
 8000e04:	d903      	bls.n	8000e0e <__udivmoddi4+0x19e>
 8000e06:	f1b9 0f00 	cmp.w	r9, #0
 8000e0a:	f000 8096 	beq.w	8000f3a <__udivmoddi4+0x2ca>
 8000e0e:	4630      	mov	r0, r6
 8000e10:	eba1 010c 	sub.w	r1, r1, ip
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e1a:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e1e:	fb06 fc08 	mul.w	ip, r6, r8
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	458c      	cmp	ip, r1
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1ca>
 8000e2a:	1879      	adds	r1, r7, r1
 8000e2c:	f106 33ff 	add.w	r3, r6, #4294967295
 8000e30:	d202      	bcs.n	8000e38 <__udivmoddi4+0x1c8>
 8000e32:	458c      	cmp	ip, r1
 8000e34:	f200 8088 	bhi.w	8000f48 <__udivmoddi4+0x2d8>
 8000e38:	461e      	mov	r6, r3
 8000e3a:	eba1 030c 	sub.w	r3, r1, ip
 8000e3e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e42:	e770      	b.n	8000d26 <__udivmoddi4+0xb6>
 8000e44:	f1c6 0720 	rsb	r7, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa02 fc06 	lsl.w	ip, r2, r6
 8000e50:	fa01 fe06 	lsl.w	lr, r1, r6
 8000e54:	40fa      	lsrs	r2, r7
 8000e56:	fa20 f807 	lsr.w	r8, r0, r7
 8000e5a:	40f9      	lsrs	r1, r7
 8000e5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000e60:	4322      	orrs	r2, r4
 8000e62:	ea48 040e 	orr.w	r4, r8, lr
 8000e66:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa1f f982 	uxth.w	r9, r2
 8000e72:	fbb1 faf8 	udiv	sl, r1, r8
 8000e76:	fb08 111a 	mls	r1, r8, sl, r1
 8000e7a:	fb0a f009 	mul.w	r0, sl, r9
 8000e7e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8000e82:	4570      	cmp	r0, lr
 8000e84:	d90e      	bls.n	8000ea4 <__udivmoddi4+0x234>
 8000e86:	eb12 0e0e 	adds.w	lr, r2, lr
 8000e8a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000e8e:	bf2c      	ite	cs
 8000e90:	f04f 0b01 	movcs.w	fp, #1
 8000e94:	f04f 0b00 	movcc.w	fp, #0
 8000e98:	4570      	cmp	r0, lr
 8000e9a:	d902      	bls.n	8000ea2 <__udivmoddi4+0x232>
 8000e9c:	f1bb 0f00 	cmp.w	fp, #0
 8000ea0:	d04e      	beq.n	8000f40 <__udivmoddi4+0x2d0>
 8000ea2:	468a      	mov	sl, r1
 8000ea4:	ebae 0e00 	sub.w	lr, lr, r0
 8000ea8:	b2a4      	uxth	r4, r4
 8000eaa:	fbbe f0f8 	udiv	r0, lr, r8
 8000eae:	fb08 ee10 	mls	lr, r8, r0, lr
 8000eb2:	fb00 f909 	mul.w	r9, r0, r9
 8000eb6:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8000eba:	45f1      	cmp	r9, lr
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x25e>
 8000ebe:	eb12 0e0e 	adds.w	lr, r2, lr
 8000ec2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec6:	d201      	bcs.n	8000ecc <__udivmoddi4+0x25c>
 8000ec8:	45f1      	cmp	r9, lr
 8000eca:	d840      	bhi.n	8000f4e <__udivmoddi4+0x2de>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8000ed2:	ebae 0e09 	sub.w	lr, lr, r9
 8000ed6:	fba0 890c 	umull	r8, r9, r0, ip
 8000eda:	45ce      	cmp	lr, r9
 8000edc:	4641      	mov	r1, r8
 8000ede:	464c      	mov	r4, r9
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0x278>
 8000ee2:	d106      	bne.n	8000ef2 <__udivmoddi4+0x282>
 8000ee4:	4543      	cmp	r3, r8
 8000ee6:	d204      	bcs.n	8000ef2 <__udivmoddi4+0x282>
 8000ee8:	3801      	subs	r0, #1
 8000eea:	ebb8 010c 	subs.w	r1, r8, ip
 8000eee:	eb69 0402 	sbc.w	r4, r9, r2
 8000ef2:	b37d      	cbz	r5, 8000f54 <__udivmoddi4+0x2e4>
 8000ef4:	1a5a      	subs	r2, r3, r1
 8000ef6:	eb6e 0e04 	sbc.w	lr, lr, r4
 8000efa:	40f2      	lsrs	r2, r6
 8000efc:	fa0e f707 	lsl.w	r7, lr, r7
 8000f00:	fa2e f306 	lsr.w	r3, lr, r6
 8000f04:	2600      	movs	r6, #0
 8000f06:	4317      	orrs	r7, r2
 8000f08:	e9c5 7300 	strd	r7, r3, [r5]
 8000f0c:	e6fc      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f0e:	462e      	mov	r6, r5
 8000f10:	4628      	mov	r0, r5
 8000f12:	e6f9      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f14:	1a84      	subs	r4, r0, r2
 8000f16:	eb61 0103 	sbc.w	r1, r1, r3
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	4688      	mov	r8, r1
 8000f1e:	e74a      	b.n	8000db6 <__udivmoddi4+0x146>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	e72b      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000f26:	3802      	subs	r0, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	e6e3      	b.n	8000cf4 <__udivmoddi4+0x84>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	443b      	add	r3, r7
 8000f30:	e6cc      	b.n	8000ccc <__udivmoddi4+0x5c>
 8000f32:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	e70c      	b.n	8000d54 <__udivmoddi4+0xe4>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	4439      	add	r1, r7
 8000f3e:	e767      	b.n	8000e10 <__udivmoddi4+0x1a0>
 8000f40:	f1aa 0a02 	sub.w	sl, sl, #2
 8000f44:	4496      	add	lr, r2
 8000f46:	e7ad      	b.n	8000ea4 <__udivmoddi4+0x234>
 8000f48:	3e02      	subs	r6, #2
 8000f4a:	4439      	add	r1, r7
 8000f4c:	e775      	b.n	8000e3a <__udivmoddi4+0x1ca>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4496      	add	lr, r2
 8000f52:	e7bc      	b.n	8000ece <__udivmoddi4+0x25e>
 8000f54:	462e      	mov	r6, r5
 8000f56:	e6d7      	b.n	8000d08 <__udivmoddi4+0x98>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <MX_GPIO_Init+0x6c>)
 8000f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f68:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <MX_GPIO_Init+0x6c>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_GPIO_Init+0x6c>)
 8000f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_GPIO_Init+0x6c>)
 8000f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f86:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <MX_GPIO_Init+0x6c>)
 8000f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <MX_GPIO_Init+0x6c>)
 8000f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_GPIO_Init+0x6c>)
 8000fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fa4:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <MX_GPIO_Init+0x6c>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_GPIO_Init+0x6c>)
 8000fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]

}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	46020c00 	.word	0x46020c00

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f002 fc18 	bl	8003804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f808 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd8:	f7ff ffc0 	bl	8000f5c <MX_GPIO_Init>
  MX_MEMS_Init();
 8000fdc:	f007 fb88 	bl	80086f0 <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8000fe0:	f007 fb8c 	bl	80086fc <MX_MEMS_Process>
 8000fe4:	e7fc      	b.n	8000fe0 <main+0x14>
	...

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b09e      	sub	sp, #120	; 0x78
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	2260      	movs	r2, #96	; 0x60
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f009 fb06 	bl	800a608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]
 800100a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800100c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001010:	f003 fed6 	bl	8004dc0 <HAL_PWREx_ControlVoltageScaling>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800101a:	f000 f84b 	bl	80010b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800101e:	2310      	movs	r3, #16
 8001020:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001022:	2301      	movs	r3, #1
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001026:	2310      	movs	r3, #16
 8001028:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800102a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800102e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001030:	2302      	movs	r3, #2
 8001032:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001034:	2301      	movs	r3, #1
 8001036:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800103c:	2301      	movs	r3, #1
 800103e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001040:	2350      	movs	r3, #80	; 0x50
 8001042:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001044:	2302      	movs	r3, #2
 8001046:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001048:	2302      	movs	r3, #2
 800104a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800104c:	2302      	movs	r3, #2
 800104e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8001050:	2300      	movs	r3, #0
 8001052:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	4618      	mov	r0, r3
 800105e:	f003 ff41 	bl	8004ee4 <HAL_RCC_OscConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001068:	f000 f824 	bl	80010b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106c:	231f      	movs	r3, #31
 800106e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001070:	2303      	movs	r3, #3
 8001072:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001084:	463b      	mov	r3, r7
 8001086:	2104      	movs	r1, #4
 8001088:	4618      	mov	r0, r3
 800108a:	f004 fd9b 	bl	8005bc4 <HAL_RCC_ClockConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001094:	f000 f80e 	bl	80010b4 <Error_Handler>
  }
  __HAL_RCC_PWR_CLK_DISABLE();
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SystemClock_Config+0xc8>)
 800109a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <SystemClock_Config+0xc8>)
 80010a0:	f023 0304 	bic.w	r3, r3, #4
 80010a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80010a8:	bf00      	nop
 80010aa:	3778      	adds	r7, #120	; 0x78
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	46020c00 	.word	0x46020c00

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	e7fe      	b.n	80010bc <Error_Handler+0x8>
	...

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_MspInit+0x30>)
 80010c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010cc:	4a08      	ldr	r2, [pc, #32]	; (80010f0 <HAL_MspInit+0x30>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_MspInit+0x30>)
 80010d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010e4:	f003 feee 	bl	8004ec4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	46020c00 	.word	0x46020c00

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <NMI_Handler+0x4>

080010fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <MemManage_Handler+0x4>

08001106 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <UsageFault_Handler+0x4>

08001112 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001140:	f002 fbc4 	bl	80038cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	e00a      	b.n	8001170 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800115a:	e000      	b.n	800115e <_read+0x16>
 800115c:	bf00      	nop
 800115e:	4601      	mov	r1, r0
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	60ba      	str	r2, [r7, #8]
 8001166:	b2ca      	uxtb	r2, r1
 8001168:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3301      	adds	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	429a      	cmp	r2, r3
 8001176:	dbf0      	blt.n	800115a <_read+0x12>
	}

return len;
 8001178:	687b      	ldr	r3, [r7, #4]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	e009      	b.n	80011a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	60ba      	str	r2, [r7, #8]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fa07 	bl	80015b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	3301      	adds	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	dbf1      	blt.n	8001194 <_write+0x12>
	}
	return len;
 80011b0:	687b      	ldr	r3, [r7, #4]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <_close>:

int _close(int file)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	return -1;
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011e2:	605a      	str	r2, [r3, #4]
	return 0;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <_isatty>:

int _isatty(int file)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
	return 1;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
	return 0;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800122c:	4a14      	ldr	r2, [pc, #80]	; (8001280 <_sbrk+0x5c>)
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <_sbrk+0x60>)
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <_sbrk+0x64>)
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <_sbrk+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	429a      	cmp	r2, r3
 8001252:	d207      	bcs.n	8001264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001254:	f009 f9ae 	bl	800a5b4 <__errno>
 8001258:	4603      	mov	r3, r0
 800125a:	220c      	movs	r2, #12
 800125c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	e009      	b.n	8001278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <_sbrk+0x64>)
 8001274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200c0000 	.word	0x200c0000
 8001284:	00000400 	.word	0x00000400
 8001288:	20000110 	.word	0x20000110
 800128c:	20000380 	.word	0x20000380

08001290 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <SystemInit+0x68>)
 8001296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129a:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <SystemInit+0x68>)
 800129c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <SystemInit+0x6c>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <SystemInit+0x6c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <SystemInit+0x6c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <SystemInit+0x6c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <SystemInit+0x6c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <SystemInit+0x6c>)
 80012c2:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012c6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <SystemInit+0x6c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <SystemInit+0x6c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <SystemInit+0x6c>)
 80012d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <SystemInit+0x6c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SystemInit+0x68>)
 80012e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ea:	609a      	str	r2, [r3, #8]
  #endif
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00
 80012fc:	46020c00 	.word	0x46020c00

08001300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001338 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001304:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001306:	e003      	b.n	8001310 <LoopCopyDataInit>

08001308 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800130a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800130c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800130e:	3104      	adds	r1, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001314:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001316:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001318:	d3f6      	bcc.n	8001308 <CopyDataInit>
	ldr	r2, =_sbss
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <LoopForever+0x12>)
	b	LoopFillZerobss
 800131c:	e002      	b.n	8001324 <LoopFillZerobss>

0800131e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800131e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001320:	f842 3b04 	str.w	r3, [r2], #4

08001324 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <LoopForever+0x16>)
	cmp	r2, r3
 8001326:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001328:	d3f9      	bcc.n	800131e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800132a:	f7ff ffb1 	bl	8001290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132e:	f009 f947 	bl	800a5c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001332:	f7ff fe4b 	bl	8000fcc <main>

08001336 <LoopForever>:

LoopForever:
    b LoopForever
 8001336:	e7fe      	b.n	8001336 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001338:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800133c:	0800bdb0 	.word	0x0800bdb0
	ldr	r0, =_sdata
 8001340:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001344:	200000f4 	.word	0x200000f4
	ldr	r2, =_sbss
 8001348:	200000f4 	.word	0x200000f4
	ldr	r3, = _ebss
 800134c:	20000380 	.word	0x20000380

08001350 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC1_IRQHandler>
	...

08001354 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <BSP_LED_Init+0x20>)
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	0800bc0c 	.word	0x0800bc0c

08001378 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	460a      	mov	r2, r1
 8001392:	71fb      	strb	r3, [r7, #7]
 8001394:	4613      	mov	r3, r2
 8001396:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	4a22      	ldr	r2, [pc, #136]	; (8001428 <BSP_PB_Init+0xa0>)
 80013a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a4:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80013a6:	79bb      	ldrb	r3, [r7, #6]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d138      	bne.n	800141e <BSP_PB_Init+0x96>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4a1d      	ldr	r2, [pc, #116]	; (800142c <BSP_PB_Init+0xa4>)
 80013b8:	441a      	add	r2, r3
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	491c      	ldr	r1, [pc, #112]	; (8001430 <BSP_PB_Init+0xa8>)
 80013be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013c2:	4619      	mov	r1, r3
 80013c4:	4610      	mov	r0, r2
 80013c6:	f002 fc00 	bl	8003bca <HAL_EXTI_GetHandle>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <BSP_PB_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80013d0:	f06f 0303 	mvn.w	r3, #3
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	e022      	b.n	800141e <BSP_PB_Init+0x96>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80013d8:	79fa      	ldrb	r2, [r7, #7]
 80013da:	4613      	mov	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <BSP_PB_Init+0xa4>)
 80013e4:	1898      	adds	r0, r3, r2
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	4a12      	ldr	r2, [pc, #72]	; (8001434 <BSP_PB_Init+0xac>)
 80013ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ee:	461a      	mov	r2, r3
 80013f0:	2100      	movs	r1, #0
 80013f2:	f002 fbbe 	bl	8003b72 <HAL_EXTI_RegisterCallback>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <BSP_PB_Init+0x7c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80013fc:	f06f 0303 	mvn.w	r3, #3
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	e00c      	b.n	800141e <BSP_PB_Init+0x96>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001404:	2018      	movs	r0, #24
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <BSP_PB_Init+0xb0>)
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	2200      	movs	r2, #0
 8001410:	4619      	mov	r1, r3
 8001412:	f002 fb7a 	bl	8003b0a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001416:	2318      	movs	r3, #24
 8001418:	4618      	mov	r0, r3
 800141a:	f002 fb90 	bl	8003b3e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	0800bc10 	.word	0x0800bc10
 800142c:	20000008 	.word	0x20000008
 8001430:	0800bc14 	.word	0x0800bc14
 8001434:	0800bc18 	.word	0x0800bc18
 8001438:	0800bc1c 	.word	0x0800bc1c

0800143c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4a09      	ldr	r2, [pc, #36]	; (8001470 <BSP_PB_GetState+0x34>)
 800144a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f002 fe83 	bl	8004160 <HAL_GPIO_ReadPin>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	bf0c      	ite	eq
 8001460:	2301      	moveq	r3, #1
 8001462:	2300      	movne	r3, #0
 8001464:	b2db      	uxtb	r3, r3
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000004 	.word	0x20000004

08001474 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001478:	2000      	movs	r0, #0
 800147a:	f007 fa77 	bl	800896c <BSP_PB_Callback>
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}

08001482 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d903      	bls.n	80014ac <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014a4:	f06f 0301 	mvn.w	r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	e025      	b.n	80014f8 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	79fa      	ldrb	r2, [r7, #7]
 80014b0:	4914      	ldr	r1, [pc, #80]	; (8001504 <BSP_COM_Init+0x74>)
 80014b2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80014b6:	4814      	ldr	r0, [pc, #80]	; (8001508 <BSP_COM_Init+0x78>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	4403      	add	r3, r0
 80014c2:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 80014c4:	79fa      	ldrb	r2, [r7, #7]
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4413      	add	r3, r2
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <BSP_COM_Init+0x78>)
 80014d0:	4413      	add	r3, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 f888 	bl	80015e8 <USART1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 80014d8:	79fa      	ldrb	r2, [r7, #7]
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	4a09      	ldr	r2, [pc, #36]	; (8001508 <BSP_COM_Init+0x78>)
 80014e4:	4413      	add	r3, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f810 	bl	800150c <MX_USART1_UART_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80014f2:	f06f 0303 	mvn.w	r3, #3
 80014f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80014f8:	68fb      	ldr	r3, [r7, #12]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000014 	.word	0x20000014
 8001508:	2000028c 	.word	0x2000028c

0800150c <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a24      	ldr	r2, [pc, #144]	; (80015ac <MX_USART1_UART_Init+0xa0>)
 800151c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f006 fb9d 	bl	8007c9c <HAL_UART_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_USART1_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f006 fff4 	bl	800855c <HAL_UARTEx_SetTxFifoThreshold>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART1_UART_Init+0x72>
  {
    ret = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800157e:	2100      	movs	r1, #0
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f007 f829 	bl	80085d8 <HAL_UARTEx_SetRxFifoThreshold>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_USART1_UART_Init+0x84>
  {
    ret = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f006 ffaa 	bl	80084ea <HAL_UARTEx_DisableFifoMode>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_USART1_UART_Init+0x94>
  {
    ret = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40013800 	.word	0x40013800

080015b0 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <__io_putchar+0x30>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <__io_putchar+0x34>)
 80015c8:	1898      	adds	r0, r3, r2
 80015ca:	1d39      	adds	r1, r7, #4
 80015cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d0:	2201      	movs	r2, #1
 80015d2:	f006 fbbd 	bl	8007d50 <HAL_UART_Transmit>
  return ch;
 80015d6:	687b      	ldr	r3, [r7, #4]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000114 	.word	0x20000114
 80015e4:	2000028c 	.word	0x2000028c

080015e8 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015f0:	4b21      	ldr	r3, [pc, #132]	; (8001678 <USART1_MspInit+0x90>)
 80015f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80015f6:	4a20      	ldr	r2, [pc, #128]	; (8001678 <USART1_MspInit+0x90>)
 80015f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <USART1_MspInit+0x90>)
 8001602:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <USART1_MspInit+0x90>)
 8001610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001614:	4a18      	ldr	r2, [pc, #96]	; (8001678 <USART1_MspInit+0x90>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <USART1_MspInit+0x90>)
 8001620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 800162c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 800163e:	2307      	movs	r3, #7
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <USART1_MspInit+0x94>)
 800164a:	f002 fad3 	bl	8003bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 800164e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8001660:	2307      	movs	r3, #7
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4804      	ldr	r0, [pc, #16]	; (800167c <USART1_MspInit+0x94>)
 800166c:	f002 fac2 	bl	8003bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8001670:	bf00      	nop
 8001672:	3728      	adds	r7, #40	; 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	46020c00 	.word	0x46020c00
 800167c:	42020000 	.word	0x42020000

08001680 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <BSP_I2C2_Init+0x70>)
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <BSP_I2C2_Init+0x74>)
 800168e:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <BSP_I2C2_Init+0x78>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	4918      	ldr	r1, [pc, #96]	; (80016f8 <BSP_I2C2_Init+0x78>)
 8001698:	600a      	str	r2, [r1, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d122      	bne.n	80016e4 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 800169e:	4814      	ldr	r0, [pc, #80]	; (80016f0 <BSP_I2C2_Init+0x70>)
 80016a0:	f003 f876 	bl	8004790 <HAL_I2C_GetState>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d11c      	bne.n	80016e4 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 80016aa:	4811      	ldr	r0, [pc, #68]	; (80016f0 <BSP_I2C2_Init+0x70>)
 80016ac:	f000 f8fe 	bl	80018ac <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d116      	bne.n	80016e4 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 80016b6:	480e      	ldr	r0, [pc, #56]	; (80016f0 <BSP_I2C2_Init+0x70>)
 80016b8:	f000 f8b4 	bl	8001824 <MX_I2C2_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80016c2:	f06f 0307 	mvn.w	r3, #7
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	e00c      	b.n	80016e4 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ca:	2100      	movs	r1, #0
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <BSP_I2C2_Init+0x70>)
 80016ce:	f003 fadf 	bl	8004c90 <HAL_I2CEx_ConfigAnalogFilter>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80016d8:	f06f 0307 	mvn.w	r3, #7
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	e001      	b.n	80016e4 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000031c 	.word	0x2000031c
 80016f4:	40005800 	.word	0x40005800
 80016f8:	20000118 	.word	0x20000118

080016fc <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <BSP_I2C2_DeInit+0x48>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d014      	beq.n	8001738 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <BSP_I2C2_DeInit+0x48>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3b01      	subs	r3, #1
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <BSP_I2C2_DeInit+0x48>)
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <BSP_I2C2_DeInit+0x48>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10b      	bne.n	8001738 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8001720:	4809      	ldr	r0, [pc, #36]	; (8001748 <BSP_I2C2_DeInit+0x4c>)
 8001722:	f000 f90d 	bl	8001940 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8001726:	4808      	ldr	r0, [pc, #32]	; (8001748 <BSP_I2C2_DeInit+0x4c>)
 8001728:	f002 fdc1 	bl	80042ae <HAL_I2C_DeInit>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001732:	f06f 0307 	mvn.w	r3, #7
 8001736:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001738:	687b      	ldr	r3, [r7, #4]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000118 	.word	0x20000118
 8001748:	2000031c 	.word	0x2000031c

0800174c <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af04      	add	r7, sp, #16
 8001752:	60ba      	str	r2, [r7, #8]
 8001754:	461a      	mov	r2, r3
 8001756:	4603      	mov	r3, r0
 8001758:	81fb      	strh	r3, [r7, #14]
 800175a:	460b      	mov	r3, r1
 800175c:	81bb      	strh	r3, [r7, #12]
 800175e:	4613      	mov	r3, r2
 8001760:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001766:	89ba      	ldrh	r2, [r7, #12]
 8001768:	89f9      	ldrh	r1, [r7, #14]
 800176a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176e:	9302      	str	r3, [sp, #8]
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2301      	movs	r3, #1
 800177a:	480c      	ldr	r0, [pc, #48]	; (80017ac <BSP_I2C2_WriteReg+0x60>)
 800177c:	f002 fdda 	bl	8004334 <HAL_I2C_Mem_Write>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00c      	beq.n	80017a0 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001786:	4809      	ldr	r0, [pc, #36]	; (80017ac <BSP_I2C2_WriteReg+0x60>)
 8001788:	f003 f810 	bl	80047ac <HAL_I2C_GetError>
 800178c:	4603      	mov	r3, r0
 800178e:	2b04      	cmp	r3, #4
 8001790:	d103      	bne.n	800179a <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001792:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e002      	b.n	80017a0 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800179a:	f06f 0303 	mvn.w	r3, #3
 800179e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80017a0:	697b      	ldr	r3, [r7, #20]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000031c 	.word	0x2000031c

080017b0 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af04      	add	r7, sp, #16
 80017b6:	60ba      	str	r2, [r7, #8]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4603      	mov	r3, r0
 80017bc:	81fb      	strh	r3, [r7, #14]
 80017be:	460b      	mov	r3, r1
 80017c0:	81bb      	strh	r3, [r7, #12]
 80017c2:	4613      	mov	r3, r2
 80017c4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 80017ca:	89ba      	ldrh	r2, [r7, #12]
 80017cc:	89f9      	ldrh	r1, [r7, #14]
 80017ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d2:	9302      	str	r3, [sp, #8]
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2301      	movs	r3, #1
 80017de:	480c      	ldr	r0, [pc, #48]	; (8001810 <BSP_I2C2_ReadReg+0x60>)
 80017e0:	f002 febc 	bl	800455c <HAL_I2C_Mem_Read>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00c      	beq.n	8001804 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 80017ea:	4809      	ldr	r0, [pc, #36]	; (8001810 <BSP_I2C2_ReadReg+0x60>)
 80017ec:	f002 ffde 	bl	80047ac <HAL_I2C_GetError>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d103      	bne.n	80017fe <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80017f6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e002      	b.n	8001804 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80017fe:	f06f 0303 	mvn.w	r3, #3
 8001802:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001804:	697b      	ldr	r3, [r7, #20]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000031c 	.word	0x2000031c

08001814 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001818:	f002 f86c 	bl	80038f4 <HAL_GetTick>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <MX_I2C2_Init+0x80>)
 8001834:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00F07BFF;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <MX_I2C2_Init+0x84>)
 800183a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f002 fc92 	bl	8004190 <HAL_I2C_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001876:	2100      	movs	r1, #0
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f003 fa09 	bl	8004c90 <HAL_I2CEx_ConfigAnalogFilter>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001888:	2100      	movs	r1, #0
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f003 fa4b 	bl	8004d26 <HAL_I2CEx_ConfigDigitalFilter>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40005800 	.word	0x40005800
 80018a8:	00f07bff 	.word	0x00f07bff

080018ac <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b4:	4b20      	ldr	r3, [pc, #128]	; (8001938 <I2C2_MspInit+0x8c>)
 80018b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018ba:	4a1f      	ldr	r2, [pc, #124]	; (8001938 <I2C2_MspInit+0x8c>)
 80018bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <I2C2_MspInit+0x8c>)
 80018c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 80018d2:	2310      	movs	r3, #16
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d6:	2312      	movs	r3, #18
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 80018e2:	2304      	movs	r3, #4
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <I2C2_MspInit+0x90>)
 80018ee:	f002 f981 	bl	8003bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 80018f2:	2320      	movs	r3, #32
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f6:	2312      	movs	r3, #18
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001902:	2304      	movs	r3, #4
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	480b      	ldr	r0, [pc, #44]	; (800193c <I2C2_MspInit+0x90>)
 800190e:	f002 f971 	bl	8003bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <I2C2_MspInit+0x8c>)
 8001914:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <I2C2_MspInit+0x8c>)
 800191a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800191e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <I2C2_MspInit+0x8c>)
 8001924:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001930:	bf00      	nop
 8001932:	3728      	adds	r7, #40	; 0x28
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	46020c00 	.word	0x46020c00
 800193c:	42021c00 	.word	0x42021c00

08001940 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <I2C2_MspDeInit+0x30>)
 800194a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <I2C2_MspDeInit+0x30>)
 8001950:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001954:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8001958:	2110      	movs	r1, #16
 800195a:	4806      	ldr	r0, [pc, #24]	; (8001974 <I2C2_MspDeInit+0x34>)
 800195c:	f002 fb22 	bl	8003fa4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8001960:	2120      	movs	r1, #32
 8001962:	4804      	ldr	r0, [pc, #16]	; (8001974 <I2C2_MspDeInit+0x34>)
 8001964:	f002 fb1e 	bl	8003fa4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	46020c00 	.word	0x46020c00
 8001974:	42021c00 	.word	0x42021c00

08001978 <ISM330DHCX_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d103      	bne.n	8001994 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 800198c:	f04f 33ff 	mov.w	r3, #4294967295
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e04d      	b.n	8001a30 <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	7b1a      	ldrb	r2, [r3, #12]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	699a      	ldr	r2, [r3, #24]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a1b      	ldr	r2, [pc, #108]	; (8001a3c <ISM330DHCX_RegisterBusIO+0xc4>)
 80019d0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a1a      	ldr	r2, [pc, #104]	; (8001a40 <ISM330DHCX_RegisterBusIO+0xc8>)
 80019d6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d103      	bne.n	80019ee <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e020      	b.n	8001a30 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4798      	blx	r3
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e016      	b.n	8001a30 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d112      	bne.n	8001a30 <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10d      	bne.n	8001a30 <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001a14:	230c      	movs	r3, #12
 8001a16:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8001a18:	7afb      	ldrb	r3, [r7, #11]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	2112      	movs	r1, #18
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 fd61 	bl	80024e6 <ISM330DHCX_Write_Reg>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001a30:	68fb      	ldr	r3, [r7, #12]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	08002955 	.word	0x08002955
 8001a40:	0800298b 	.word	0x0800298b

08001a44 <ISM330DHCX_Init>:
 * @brief  Initialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	331c      	adds	r3, #28
 8001a50:	2101      	movs	r1, #1
 8001a52:	4618      	mov	r0, r3
 8001a54:	f001 fd20 	bl	8003498 <ism330dhcx_device_conf_set>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	e078      	b.n	8001b56 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	331c      	adds	r3, #28
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 fd97 	bl	800359e <ism330dhcx_auto_increment_set>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7a:	e06c      	b.n	8001b56 <ISM330DHCX_Init+0x112>
  }

    /* SW reset */
  if ( ism330dhcx_reset_set( &(pObj->Ctx), PROPERTY_ENABLE)!= ISM330DHCX_OK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	331c      	adds	r3, #28
 8001a80:	2101      	movs	r1, #1
 8001a82:	4618      	mov	r0, r3
 8001a84:	f001 fd65 	bl	8003552 <ism330dhcx_reset_set>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	e060      	b.n	8001b56 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if ( ism330dhcx_auto_increment_set( &(pObj->Ctx), PROPERTY_ENABLE ) != ISM330DHCX_OK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	331c      	adds	r3, #28
 8001a98:	2101      	movs	r1, #1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f001 fd7f 	bl	800359e <ism330dhcx_auto_increment_set>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	e054      	b.n	8001b56 <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	331c      	adds	r3, #28
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 fc34 	bl	8003320 <ism330dhcx_block_data_update_set>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	e048      	b.n	8001b56 <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	331c      	adds	r3, #28
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f001 fd8d 	bl	80035ea <ism330dhcx_fifo_mode_set>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ada:	e03c      	b.n	8001b56 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2204      	movs	r2, #4
 8001ae0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	331c      	adds	r3, #28
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 fff6 	bl	8002adc <ism330dhcx_xl_data_rate_set>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	e02c      	b.n	8001b56 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	331c      	adds	r3, #28
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 ff8c 	bl	8002a20 <ism330dhcx_xl_full_scale_set>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	e020      	b.n	8001b56 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2204      	movs	r2, #4
 8001b18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	331c      	adds	r3, #28
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f001 fa2a 	bl	8002f7c <ism330dhcx_gy_data_rate_set>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	e010      	b.n	8001b56 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	331c      	adds	r3, #28
 8001b38:	210c      	movs	r1, #12
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f001 f9a6 	bl	8002e8c <ism330dhcx_gy_full_scale_set>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	e004      	b.n	8001b56 <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <ISM330DHCX_DeInit>:
 * @brief  Deinitialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f888 	bl	8001c7c <ISM330DHCX_ACC_Disable>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
 8001b76:	e015      	b.n	8001ba4 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fa92 	bl	80020a2 <ISM330DHCX_GYRO_Disable>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295
 8001b88:	e00c      	b.n	8001ba4 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <ISM330DHCX_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	331c      	adds	r3, #28
 8001bba:	6839      	ldr	r1, [r7, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 fcb7 	bl	8003530 <ism330dhcx_device_id_get>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bcc:	e000      	b.n	8001bd0 <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <ISM330DHCX_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to ISM330DHCX sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2201      	movs	r2, #1
 8001bec:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c00:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2210      	movs	r2, #16
 8001c06:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <ISM330DHCX_GetCapabilities+0x58>)
 8001c12:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <ISM330DHCX_GetCapabilities+0x58>)
 8001c18:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	45d05800 	.word	0x45d05800

08001c34 <ISM330DHCX_ACC_Enable>:
 * @brief  Enable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e014      	b.n	8001c74 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f103 021c 	add.w	r2, r3, #28
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001c56:	4619      	mov	r1, r3
 8001c58:	4610      	mov	r0, r2
 8001c5a:	f000 ff3f 	bl	8002adc <ism330dhcx_xl_data_rate_set>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
 8001c68:	e004      	b.n	8001c74 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <ISM330DHCX_ACC_Disable>:
 * @brief  Disable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e01f      	b.n	8001cd2 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f103 021c 	add.w	r2, r3, #28
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	332b      	adds	r3, #43	; 0x2b
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	f001 f88c 	bl	8002dbc <ism330dhcx_xl_data_rate_get>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	e010      	b.n	8001cd2 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	331c      	adds	r3, #28
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 ff10 	bl	8002adc <ism330dhcx_xl_data_rate_set>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc6:	e004      	b.n	8001cd2 <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <ISM330DHCX_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	331c      	adds	r3, #28
 8001cee:	f107 020b 	add.w	r2, r7, #11
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 feb9 	bl	8002a6c <ism330dhcx_xl_full_scale_get>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
 8001d04:	e023      	b.n	8001d4e <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8001d06:	7afb      	ldrb	r3, [r7, #11]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d81b      	bhi.n	8001d44 <ISM330DHCX_ACC_GetSensitivity+0x68>
 8001d0c:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 8001d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d12:	bf00      	nop
 8001d14:	08001d25 	.word	0x08001d25
 8001d18:	08001d3d 	.word	0x08001d3d
 8001d1c:	08001d2d 	.word	0x08001d2d
 8001d20:	08001d35 	.word	0x08001d35
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8001d28:	601a      	str	r2, [r3, #0]
      break;
 8001d2a:	e00f      	b.n	8001d4c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <ISM330DHCX_ACC_GetSensitivity+0x80>)
 8001d30:	601a      	str	r2, [r3, #0]
      break;
 8001d32:	e00b      	b.n	8001d4c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 8001d38:	601a      	str	r2, [r3, #0]
      break;
 8001d3a:	e007      	b.n	8001d4c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 8001d40:	601a      	str	r2, [r3, #0]
      break;
 8001d42:	e003      	b.n	8001d4c <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
 8001d48:	60fb      	str	r3, [r7, #12]
      break;
 8001d4a:	bf00      	nop
  }

  return ret;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	3d79db23 	.word	0x3d79db23
 8001d5c:	3df9db23 	.word	0x3df9db23
 8001d60:	3e79db23 	.word	0x3e79db23
 8001d64:	3ef9db23 	.word	0x3ef9db23

08001d68 <ISM330DHCX_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	331c      	adds	r3, #28
 8001d7a:	f107 020b 	add.w	r2, r7, #11
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f001 f81b 	bl	8002dbc <ism330dhcx_xl_data_rate_get>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d90:	e04e      	b.n	8001e30 <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8001d92:	7afb      	ldrb	r3, [r7, #11]
 8001d94:	2b0a      	cmp	r3, #10
 8001d96:	d846      	bhi.n	8001e26 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 8001d98:	a201      	add	r2, pc, #4	; (adr r2, 8001da0 <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 8001d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9e:	bf00      	nop
 8001da0:	08001dcd 	.word	0x08001dcd
 8001da4:	08001dd7 	.word	0x08001dd7
 8001da8:	08001ddf 	.word	0x08001ddf
 8001dac:	08001de7 	.word	0x08001de7
 8001db0:	08001def 	.word	0x08001def
 8001db4:	08001df7 	.word	0x08001df7
 8001db8:	08001dff 	.word	0x08001dff
 8001dbc:	08001e07 	.word	0x08001e07
 8001dc0:	08001e0f 	.word	0x08001e0f
 8001dc4:	08001e17 	.word	0x08001e17
 8001dc8:	08001e1f 	.word	0x08001e1f
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
      break;
 8001dd4:	e02b      	b.n	8001e2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	4a17      	ldr	r2, [pc, #92]	; (8001e38 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 8001dda:	601a      	str	r2, [r3, #0]
      break;
 8001ddc:	e027      	b.n	8001e2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	4a16      	ldr	r2, [pc, #88]	; (8001e3c <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 8001de2:	601a      	str	r2, [r3, #0]
      break;
 8001de4:	e023      	b.n	8001e2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 8001dea:	601a      	str	r2, [r3, #0]
      break;
 8001dec:	e01f      	b.n	8001e2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 8001df2:	601a      	str	r2, [r3, #0]
      break;
 8001df4:	e01b      	b.n	8001e2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 8001dfa:	601a      	str	r2, [r3, #0]
      break;
 8001dfc:	e017      	b.n	8001e2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_417Hz:
      *Odr = 417.0f;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 8001e02:	601a      	str	r2, [r3, #0]
      break;
 8001e04:	e013      	b.n	8001e2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 8001e0a:	601a      	str	r2, [r3, #0]
      break;
 8001e0c:	e00f      	b.n	8001e2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 8001e12:	601a      	str	r2, [r3, #0]
      break;
 8001e14:	e00b      	b.n	8001e2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 8001e1a:	601a      	str	r2, [r3, #0]
      break;
 8001e1c:	e007      	b.n	8001e2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 8001e22:	601a      	str	r2, [r3, #0]
      break;
 8001e24:	e003      	b.n	8001e2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	60fb      	str	r3, [r7, #12]
      break;
 8001e2c:	bf00      	nop
  }

  return ret;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	41480000 	.word	0x41480000
 8001e3c:	41d00000 	.word	0x41d00000
 8001e40:	42500000 	.word	0x42500000
 8001e44:	42d00000 	.word	0x42d00000
 8001e48:	43500000 	.word	0x43500000
 8001e4c:	43d08000 	.word	0x43d08000
 8001e50:	44504000 	.word	0x44504000
 8001e54:	44d06000 	.word	0x44d06000
 8001e58:	45505000 	.word	0x45505000
 8001e5c:	45d05800 	.word	0x45d05800

08001e60 <ISM330DHCX_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d106      	bne.n	8001e84 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001e76:	ed97 0a00 	vldr	s0, [r7]
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fb4e 	bl	800251c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 8001e80:	4603      	mov	r3, r0
 8001e82:	e005      	b.n	8001e90 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001e84:	ed97 0a00 	vldr	s0, [r7]
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fbd3 	bl	8002634 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 8001e8e:	4603      	mov	r3, r0
  }
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <ISM330DHCX_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	331c      	adds	r3, #28
 8001eaa:	f107 020b 	add.w	r2, r7, #11
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 fddb 	bl	8002a6c <ism330dhcx_xl_full_scale_get>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec0:	e023      	b.n	8001f0a <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d81b      	bhi.n	8001f00 <ISM330DHCX_ACC_GetFullScale+0x68>
 8001ec8:	a201      	add	r2, pc, #4	; (adr r2, 8001ed0 <ISM330DHCX_ACC_GetFullScale+0x38>)
 8001eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ece:	bf00      	nop
 8001ed0:	08001ee1 	.word	0x08001ee1
 8001ed4:	08001ef9 	.word	0x08001ef9
 8001ed8:	08001ee9 	.word	0x08001ee9
 8001edc:	08001ef1 	.word	0x08001ef1
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	601a      	str	r2, [r3, #0]
      break;
 8001ee6:	e00f      	b.n	8001f08 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2204      	movs	r2, #4
 8001eec:	601a      	str	r2, [r3, #0]
      break;
 8001eee:	e00b      	b.n	8001f08 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	601a      	str	r2, [r3, #0]
      break;
 8001ef6:	e007      	b.n	8001f08 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2210      	movs	r2, #16
 8001efc:	601a      	str	r2, [r3, #0]
      break;
 8001efe:	e003      	b.n	8001f08 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
 8001f04:	60fb      	str	r3, [r7, #12]
      break;
 8001f06:	bf00      	nop
  }

  return ret;
 8001f08:	68fb      	ldr	r3, [r7, #12]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop

08001f14 <ISM330DHCX_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	dd0b      	ble.n	8001f3c <ISM330DHCX_ACC_SetFullScale+0x28>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	dd06      	ble.n	8001f38 <ISM330DHCX_ACC_SetFullScale+0x24>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	dc01      	bgt.n	8001f34 <ISM330DHCX_ACC_SetFullScale+0x20>
 8001f30:	2303      	movs	r3, #3
 8001f32:	e004      	b.n	8001f3e <ISM330DHCX_ACC_SetFullScale+0x2a>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e002      	b.n	8001f3e <ISM330DHCX_ACC_SetFullScale+0x2a>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e000      	b.n	8001f3e <ISM330DHCX_ACC_SetFullScale+0x2a>
 8001f3c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 8001f3e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	331c      	adds	r3, #28
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 fd69 	bl	8002a20 <ism330dhcx_xl_full_scale_set>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	e000      	b.n	8001f5c <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <ISM330DHCX_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	331c      	adds	r3, #28
 8001f72:	f107 0208 	add.w	r2, r7, #8
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f001 fa42 	bl	8003402 <ism330dhcx_acceleration_raw_get>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
 8001f88:	e00c      	b.n	8001fa4 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8001f8a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8001f92:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8001f9a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <ISM330DHCX_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	331c      	adds	r3, #28
 8001fc0:	f107 0210 	add.w	r2, r7, #16
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f001 fa1b 	bl	8003402 <ism330dhcx_acceleration_raw_get>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e03c      	b.n	8002052 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8001fd8:	f107 030c 	add.w	r3, r7, #12
 8001fdc:	4619      	mov	r1, r3
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fe7c 	bl	8001cdc <ISM330DHCX_ACC_GetSensitivity>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	e030      	b.n	8002052 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001ff0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ff4:	ee07 3a90 	vmov	s15, r3
 8001ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ffc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002004:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002008:	ee17 2a90 	vmov	r2, s15
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002010:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800201c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002028:	ee17 2a90 	vmov	r2, s15
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002030:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800203c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002048:	ee17 2a90 	vmov	r2, s15
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <ISM330DHCX_GYRO_Enable>:
 * @brief  Enable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	e014      	b.n	800209a <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f103 021c 	add.w	r2, r3, #28
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800207c:	4619      	mov	r1, r3
 800207e:	4610      	mov	r0, r2
 8002080:	f000 ff7c 	bl	8002f7c <ism330dhcx_gy_data_rate_set>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	e004      	b.n	800209a <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <ISM330DHCX_GYRO_Disable>:
 * @brief  Disable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	e01f      	b.n	80020f8 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f103 021c 	add.w	r2, r3, #28
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	332c      	adds	r3, #44	; 0x2c
 80020c2:	4619      	mov	r1, r3
 80020c4:	4610      	mov	r0, r2
 80020c6:	f001 f8c9 	bl	800325c <ism330dhcx_gy_data_rate_get>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
 80020d4:	e010      	b.n	80020f8 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	331c      	adds	r3, #28
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 ff4d 	bl	8002f7c <ism330dhcx_gy_data_rate_set>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295
 80020ec:	e004      	b.n	80020f8 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <ISM330DHCX_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	331c      	adds	r3, #28
 8002112:	f107 020b 	add.w	r2, r7, #11
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fedd 	bl	8002ed8 <ism330dhcx_gy_full_scale_get>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002124:	f04f 33ff 	mov.w	r3, #4294967295
 8002128:	e039      	b.n	800219e <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800212a:	7afb      	ldrb	r3, [r7, #11]
 800212c:	2b0c      	cmp	r3, #12
 800212e:	d831      	bhi.n	8002194 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 8002130:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 8002132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002136:	bf00      	nop
 8002138:	08002175 	.word	0x08002175
 800213c:	08002195 	.word	0x08002195
 8002140:	0800216d 	.word	0x0800216d
 8002144:	08002195 	.word	0x08002195
 8002148:	0800217d 	.word	0x0800217d
 800214c:	08002195 	.word	0x08002195
 8002150:	08002195 	.word	0x08002195
 8002154:	08002195 	.word	0x08002195
 8002158:	08002185 	.word	0x08002185
 800215c:	08002195 	.word	0x08002195
 8002160:	08002195 	.word	0x08002195
 8002164:	08002195 	.word	0x08002195
 8002168:	0800218d 	.word	0x0800218d
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 8002170:	601a      	str	r2, [r3, #0]
      break;
 8002172:	e013      	b.n	800219c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4a0d      	ldr	r2, [pc, #52]	; (80021ac <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 8002178:	601a      	str	r2, [r3, #0]
      break;
 800217a:	e00f      	b.n	800219c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 8002180:	601a      	str	r2, [r3, #0]
      break;
 8002182:	e00b      	b.n	800219c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4a0b      	ldr	r2, [pc, #44]	; (80021b4 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 8002188:	601a      	str	r2, [r3, #0]
      break;
 800218a:	e007      	b.n	800219c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 8002190:	601a      	str	r2, [r3, #0]
      break;
 8002192:	e003      	b.n	800219c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 8002194:	f04f 33ff 	mov.w	r3, #4294967295
 8002198:	60fb      	str	r3, [r7, #12]
      break;
 800219a:	bf00      	nop
  }

  return ret;
 800219c:	68fb      	ldr	r3, [r7, #12]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	408c0000 	.word	0x408c0000
 80021ac:	410c0000 	.word	0x410c0000
 80021b0:	418c0000 	.word	0x418c0000
 80021b4:	420c0000 	.word	0x420c0000
 80021b8:	428c0000 	.word	0x428c0000

080021bc <ISM330DHCX_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	331c      	adds	r3, #28
 80021ce:	f107 020b 	add.w	r2, r7, #11
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f001 f841 	bl	800325c <ism330dhcx_gy_data_rate_get>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295
 80021e4:	e04e      	b.n	8002284 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80021e6:	7afb      	ldrb	r3, [r7, #11]
 80021e8:	2b0a      	cmp	r3, #10
 80021ea:	d846      	bhi.n	800227a <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 80021ec:	a201      	add	r2, pc, #4	; (adr r2, 80021f4 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 80021ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f2:	bf00      	nop
 80021f4:	08002221 	.word	0x08002221
 80021f8:	0800222b 	.word	0x0800222b
 80021fc:	08002233 	.word	0x08002233
 8002200:	0800223b 	.word	0x0800223b
 8002204:	08002243 	.word	0x08002243
 8002208:	0800224b 	.word	0x0800224b
 800220c:	08002253 	.word	0x08002253
 8002210:	0800225b 	.word	0x0800225b
 8002214:	08002263 	.word	0x08002263
 8002218:	0800226b 	.word	0x0800226b
 800221c:	08002273 	.word	0x08002273
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
      break;
 8002228:	e02b      	b.n	8002282 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	4a17      	ldr	r2, [pc, #92]	; (800228c <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 800222e:	601a      	str	r2, [r3, #0]
      break;
 8002230:	e027      	b.n	8002282 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	4a16      	ldr	r2, [pc, #88]	; (8002290 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 8002236:	601a      	str	r2, [r3, #0]
      break;
 8002238:	e023      	b.n	8002282 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	4a15      	ldr	r2, [pc, #84]	; (8002294 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 800223e:	601a      	str	r2, [r3, #0]
      break;
 8002240:	e01f      	b.n	8002282 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	4a14      	ldr	r2, [pc, #80]	; (8002298 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 8002246:	601a      	str	r2, [r3, #0]
      break;
 8002248:	e01b      	b.n	8002282 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	4a13      	ldr	r2, [pc, #76]	; (800229c <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 800224e:	601a      	str	r2, [r3, #0]
      break;
 8002250:	e017      	b.n	8002282 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_417Hz:
      *Odr = 417.0f;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 8002256:	601a      	str	r2, [r3, #0]
      break;
 8002258:	e013      	b.n	8002282 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	4a11      	ldr	r2, [pc, #68]	; (80022a4 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 800225e:	601a      	str	r2, [r3, #0]
      break;
 8002260:	e00f      	b.n	8002282 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	4a10      	ldr	r2, [pc, #64]	; (80022a8 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 8002266:	601a      	str	r2, [r3, #0]
      break;
 8002268:	e00b      	b.n	8002282 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	4a0f      	ldr	r2, [pc, #60]	; (80022ac <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 800226e:	601a      	str	r2, [r3, #0]
      break;
 8002270:	e007      	b.n	8002282 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 8002276:	601a      	str	r2, [r3, #0]
      break;
 8002278:	e003      	b.n	8002282 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
 800227e:	60fb      	str	r3, [r7, #12]
      break;
 8002280:	bf00      	nop
  }

  return ret;
 8002282:	68fb      	ldr	r3, [r7, #12]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	41480000 	.word	0x41480000
 8002290:	41d00000 	.word	0x41d00000
 8002294:	42500000 	.word	0x42500000
 8002298:	42d00000 	.word	0x42d00000
 800229c:	43500000 	.word	0x43500000
 80022a0:	43d08000 	.word	0x43d08000
 80022a4:	44504000 	.word	0x44504000
 80022a8:	44d06000 	.word	0x44d06000
 80022ac:	45505000 	.word	0x45505000
 80022b0:	45d05800 	.word	0x45d05800

080022b4 <ISM330DHCX_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d106      	bne.n	80022d8 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80022ca:	ed97 0a00 	vldr	s0, [r7]
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fa32 	bl	8002738 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 80022d4:	4603      	mov	r3, r0
 80022d6:	e005      	b.n	80022e4 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80022d8:	ed97 0a00 	vldr	s0, [r7]
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 fab7 	bl	8002850 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 80022e2:	4603      	mov	r3, r0
  }
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <ISM330DHCX_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	331c      	adds	r3, #28
 80022fe:	f107 020b 	add.w	r2, r7, #11
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f000 fde7 	bl	8002ed8 <ism330dhcx_gy_full_scale_get>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
 8002314:	e03c      	b.n	8002390 <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 8002316:	7afb      	ldrb	r3, [r7, #11]
 8002318:	2b0c      	cmp	r3, #12
 800231a:	d834      	bhi.n	8002386 <ISM330DHCX_GYRO_GetFullScale+0x9a>
 800231c:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 800231e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002322:	bf00      	nop
 8002324:	08002361 	.word	0x08002361
 8002328:	08002387 	.word	0x08002387
 800232c:	08002359 	.word	0x08002359
 8002330:	08002387 	.word	0x08002387
 8002334:	08002369 	.word	0x08002369
 8002338:	08002387 	.word	0x08002387
 800233c:	08002387 	.word	0x08002387
 8002340:	08002387 	.word	0x08002387
 8002344:	08002373 	.word	0x08002373
 8002348:	08002387 	.word	0x08002387
 800234c:	08002387 	.word	0x08002387
 8002350:	08002387 	.word	0x08002387
 8002354:	0800237d 	.word	0x0800237d
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	227d      	movs	r2, #125	; 0x7d
 800235c:	601a      	str	r2, [r3, #0]
      break;
 800235e:	e016      	b.n	800238e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	22fa      	movs	r2, #250	; 0xfa
 8002364:	601a      	str	r2, [r3, #0]
      break;
 8002366:	e012      	b.n	800238e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800236e:	601a      	str	r2, [r3, #0]
      break;
 8002370:	e00d      	b.n	800238e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002378:	601a      	str	r2, [r3, #0]
      break;
 800237a:	e008      	b.n	800238e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002382:	601a      	str	r2, [r3, #0]
      break;
 8002384:	e003      	b.n	800238e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
 800238a:	60fb      	str	r3, [r7, #12]
      break;
 800238c:	bf00      	nop
  }

  return ret;
 800238e:	68fb      	ldr	r3, [r7, #12]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <ISM330DHCX_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b7d      	cmp	r3, #125	; 0x7d
 80023a6:	dd12      	ble.n	80023ce <ISM330DHCX_GYRO_SetFullScale+0x36>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2bfa      	cmp	r3, #250	; 0xfa
 80023ac:	dd0d      	ble.n	80023ca <ISM330DHCX_GYRO_SetFullScale+0x32>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023b4:	dd07      	ble.n	80023c6 <ISM330DHCX_GYRO_SetFullScale+0x2e>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023bc:	dc01      	bgt.n	80023c2 <ISM330DHCX_GYRO_SetFullScale+0x2a>
 80023be:	2308      	movs	r3, #8
 80023c0:	e006      	b.n	80023d0 <ISM330DHCX_GYRO_SetFullScale+0x38>
 80023c2:	230c      	movs	r3, #12
 80023c4:	e004      	b.n	80023d0 <ISM330DHCX_GYRO_SetFullScale+0x38>
 80023c6:	2304      	movs	r3, #4
 80023c8:	e002      	b.n	80023d0 <ISM330DHCX_GYRO_SetFullScale+0x38>
 80023ca:	2300      	movs	r3, #0
 80023cc:	e000      	b.n	80023d0 <ISM330DHCX_GYRO_SetFullScale+0x38>
 80023ce:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 80023d0:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	331c      	adds	r3, #28
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fd56 	bl	8002e8c <ism330dhcx_gy_full_scale_set>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	e000      	b.n	80023ee <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <ISM330DHCX_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	331c      	adds	r3, #28
 8002404:	f107 0208 	add.w	r2, r7, #8
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f000 ffae 	bl	800336c <ism330dhcx_angular_rate_raw_get>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	e00c      	b.n	8002436 <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800241c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002424:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800242c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <ISM330DHCX_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	331c      	adds	r3, #28
 800244c:	f107 0210 	add.w	r2, r7, #16
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f000 ff8a 	bl	800336c <ism330dhcx_angular_rate_raw_get>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 800245e:	f04f 33ff 	mov.w	r3, #4294967295
 8002462:	e03c      	b.n	80024de <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	4619      	mov	r1, r3
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff fe48 	bl	8002100 <ISM330DHCX_GYRO_GetSensitivity>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
 800247a:	e030      	b.n	80024de <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800247c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002488:	edd7 7a03 	vldr	s15, [r7, #12]
 800248c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002494:	ee17 2a90 	vmov	r2, s15
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800249c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024a0:	ee07 3a90 	vmov	s15, r3
 80024a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b4:	ee17 2a90 	vmov	r2, s15
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80024bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024c0:	ee07 3a90 	vmov	s15, r3
 80024c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024d4:	ee17 2a90 	vmov	r2, s15
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <ISM330DHCX_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	70fb      	strb	r3, [r7, #3]
 80024f2:	4613      	mov	r3, r2
 80024f4:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f103 001c 	add.w	r0, r3, #28
 80024fc:	1cba      	adds	r2, r7, #2
 80024fe:	78f9      	ldrb	r1, [r7, #3]
 8002500:	2301      	movs	r3, #1
 8002502:	f000 fa75 	bl	80029f0 <ism330dhcx_write_reg>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
 8002510:	e000      	b.n	8002514 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8002528:	edd7 7a00 	vldr	s15, [r7]
 800252c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002538:	d801      	bhi.n	800253e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 800253a:	2301      	movs	r3, #1
 800253c:	e058      	b.n	80025f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800253e:	edd7 7a00 	vldr	s15, [r7]
 8002542:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254e:	d801      	bhi.n	8002554 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002550:	2302      	movs	r3, #2
 8002552:	e04d      	b.n	80025f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002554:	edd7 7a00 	vldr	s15, [r7]
 8002558:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002618 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 800255c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002564:	d801      	bhi.n	800256a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8002566:	2303      	movs	r3, #3
 8002568:	e042      	b.n	80025f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800256a:	edd7 7a00 	vldr	s15, [r7]
 800256e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800261c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 8002572:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257a:	d801      	bhi.n	8002580 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 800257c:	2304      	movs	r3, #4
 800257e:	e037      	b.n	80025f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002580:	edd7 7a00 	vldr	s15, [r7]
 8002584:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002620 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8002588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800258c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002590:	d801      	bhi.n	8002596 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8002592:	2305      	movs	r3, #5
 8002594:	e02c      	b.n	80025f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002596:	edd7 7a00 	vldr	s15, [r7]
 800259a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002624 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 800259e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a6:	d801      	bhi.n	80025ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 80025a8:	2306      	movs	r3, #6
 80025aa:	e021      	b.n	80025f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80025ac:	edd7 7a00 	vldr	s15, [r7]
 80025b0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002628 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80025b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025bc:	d801      	bhi.n	80025c2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80025be:	2307      	movs	r3, #7
 80025c0:	e016      	b.n	80025f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80025c2:	edd7 7a00 	vldr	s15, [r7]
 80025c6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800262c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 80025ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d2:	d801      	bhi.n	80025d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80025d4:	2308      	movs	r3, #8
 80025d6:	e00b      	b.n	80025f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80025d8:	edd7 7a00 	vldr	s15, [r7]
 80025dc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002630 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 80025e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e8:	d801      	bhi.n	80025ee <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80025ea:	2309      	movs	r3, #9
 80025ec:	e000      	b.n	80025f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80025ee:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80025f0:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
          :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	331c      	adds	r3, #28
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fa6e 	bl	8002adc <ism330dhcx_xl_data_rate_set>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	e000      	b.n	800260e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	42500000 	.word	0x42500000
 800261c:	42d00000 	.word	0x42d00000
 8002620:	43500000 	.word	0x43500000
 8002624:	43d08000 	.word	0x43d08000
 8002628:	44504000 	.word	0x44504000
 800262c:	44d06000 	.word	0x44d06000
 8002630:	45505000 	.word	0x45505000

08002634 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8002640:	edd7 7a00 	vldr	s15, [r7]
 8002644:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002650:	d801      	bhi.n	8002656 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 8002652:	2301      	movs	r3, #1
 8002654:	e058      	b.n	8002708 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002656:	edd7 7a00 	vldr	s15, [r7]
 800265a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800265e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002666:	d801      	bhi.n	800266c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8002668:	2302      	movs	r3, #2
 800266a:	e04d      	b.n	8002708 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800266c:	edd7 7a00 	vldr	s15, [r7]
 8002670:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800271c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267c:	d801      	bhi.n	8002682 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800267e:	2303      	movs	r3, #3
 8002680:	e042      	b.n	8002708 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002682:	edd7 7a00 	vldr	s15, [r7]
 8002686:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002720 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 800268a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002692:	d801      	bhi.n	8002698 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8002694:	2304      	movs	r3, #4
 8002696:	e037      	b.n	8002708 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002698:	edd7 7a00 	vldr	s15, [r7]
 800269c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002724 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80026a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a8:	d801      	bhi.n	80026ae <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80026aa:	2305      	movs	r3, #5
 80026ac:	e02c      	b.n	8002708 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80026ae:	edd7 7a00 	vldr	s15, [r7]
 80026b2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002728 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80026b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026be:	d801      	bhi.n	80026c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 80026c0:	2306      	movs	r3, #6
 80026c2:	e021      	b.n	8002708 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80026c4:	edd7 7a00 	vldr	s15, [r7]
 80026c8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800272c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80026cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d4:	d801      	bhi.n	80026da <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80026d6:	2307      	movs	r3, #7
 80026d8:	e016      	b.n	8002708 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80026da:	edd7 7a00 	vldr	s15, [r7]
 80026de:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002730 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80026e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ea:	d801      	bhi.n	80026f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80026ec:	2308      	movs	r3, #8
 80026ee:	e00b      	b.n	8002708 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80026f0:	edd7 7a00 	vldr	s15, [r7]
 80026f4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002734 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 80026f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002700:	d801      	bhi.n	8002706 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8002702:	2309      	movs	r3, #9
 8002704:	e000      	b.n	8002708 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002706:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
                :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	42500000 	.word	0x42500000
 8002720:	42d00000 	.word	0x42d00000
 8002724:	43500000 	.word	0x43500000
 8002728:	43d08000 	.word	0x43d08000
 800272c:	44504000 	.word	0x44504000
 8002730:	44d06000 	.word	0x44d06000
 8002734:	45505000 	.word	0x45505000

08002738 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8002744:	edd7 7a00 	vldr	s15, [r7]
 8002748:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800274c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002754:	d801      	bhi.n	800275a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8002756:	2301      	movs	r3, #1
 8002758:	e058      	b.n	800280c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800275a:	edd7 7a00 	vldr	s15, [r7]
 800275e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276a:	d801      	bhi.n	8002770 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800276c:	2302      	movs	r3, #2
 800276e:	e04d      	b.n	800280c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002770:	edd7 7a00 	vldr	s15, [r7]
 8002774:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002834 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8002778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	d801      	bhi.n	8002786 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8002782:	2303      	movs	r3, #3
 8002784:	e042      	b.n	800280c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002786:	edd7 7a00 	vldr	s15, [r7]
 800278a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002838 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800278e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002796:	d801      	bhi.n	800279c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8002798:	2304      	movs	r3, #4
 800279a:	e037      	b.n	800280c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800279c:	edd7 7a00 	vldr	s15, [r7]
 80027a0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800283c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80027a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ac:	d801      	bhi.n	80027b2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80027ae:	2305      	movs	r3, #5
 80027b0:	e02c      	b.n	800280c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80027b2:	edd7 7a00 	vldr	s15, [r7]
 80027b6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002840 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80027ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c2:	d801      	bhi.n	80027c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80027c4:	2306      	movs	r3, #6
 80027c6:	e021      	b.n	800280c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80027c8:	edd7 7a00 	vldr	s15, [r7]
 80027cc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002844 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80027d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d8:	d801      	bhi.n	80027de <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80027da:	2307      	movs	r3, #7
 80027dc:	e016      	b.n	800280c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80027de:	edd7 7a00 	vldr	s15, [r7]
 80027e2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002848 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80027e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ee:	d801      	bhi.n	80027f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80027f0:	2308      	movs	r3, #8
 80027f2:	e00b      	b.n	800280c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80027f4:	edd7 7a00 	vldr	s15, [r7]
 80027f8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800284c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80027fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002804:	d801      	bhi.n	800280a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8002806:	2309      	movs	r3, #9
 8002808:	e000      	b.n	800280c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800280a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 800280c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
          :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	331c      	adds	r3, #28
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fbb0 	bl	8002f7c <ism330dhcx_gy_data_rate_set>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8002822:	f04f 33ff 	mov.w	r3, #4294967295
 8002826:	e000      	b.n	800282a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	42500000 	.word	0x42500000
 8002838:	42d00000 	.word	0x42d00000
 800283c:	43500000 	.word	0x43500000
 8002840:	43d08000 	.word	0x43d08000
 8002844:	44504000 	.word	0x44504000
 8002848:	44d06000 	.word	0x44d06000
 800284c:	45505000 	.word	0x45505000

08002850 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800285c:	edd7 7a00 	vldr	s15, [r7]
 8002860:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286c:	d801      	bhi.n	8002872 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800286e:	2301      	movs	r3, #1
 8002870:	e058      	b.n	8002924 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002872:	edd7 7a00 	vldr	s15, [r7]
 8002876:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800287a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800287e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002882:	d801      	bhi.n	8002888 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8002884:	2302      	movs	r3, #2
 8002886:	e04d      	b.n	8002924 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002888:	edd7 7a00 	vldr	s15, [r7]
 800288c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002938 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8002890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002898:	d801      	bhi.n	800289e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800289a:	2303      	movs	r3, #3
 800289c:	e042      	b.n	8002924 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800289e:	edd7 7a00 	vldr	s15, [r7]
 80028a2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800293c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80028a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ae:	d801      	bhi.n	80028b4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80028b0:	2304      	movs	r3, #4
 80028b2:	e037      	b.n	8002924 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80028b4:	edd7 7a00 	vldr	s15, [r7]
 80028b8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002940 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80028bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c4:	d801      	bhi.n	80028ca <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80028c6:	2305      	movs	r3, #5
 80028c8:	e02c      	b.n	8002924 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80028ca:	edd7 7a00 	vldr	s15, [r7]
 80028ce:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002944 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80028d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028da:	d801      	bhi.n	80028e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80028dc:	2306      	movs	r3, #6
 80028de:	e021      	b.n	8002924 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80028e0:	edd7 7a00 	vldr	s15, [r7]
 80028e4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002948 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80028e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f0:	d801      	bhi.n	80028f6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80028f2:	2307      	movs	r3, #7
 80028f4:	e016      	b.n	8002924 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80028f6:	edd7 7a00 	vldr	s15, [r7]
 80028fa:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800294c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80028fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002906:	d801      	bhi.n	800290c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8002908:	2308      	movs	r3, #8
 800290a:	e00b      	b.n	8002924 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800290c:	edd7 7a00 	vldr	s15, [r7]
 8002910:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002950 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8002914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291c:	d801      	bhi.n	8002922 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800291e:	2309      	movs	r3, #9
 8002920:	e000      	b.n	8002924 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002922:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
                 :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	42500000 	.word	0x42500000
 800293c:	42d00000 	.word	0x42d00000
 8002940:	43500000 	.word	0x43500000
 8002944:	43d08000 	.word	0x43d08000
 8002948:	44504000 	.word	0x44504000
 800294c:	44d06000 	.word	0x44d06000
 8002950:	45505000 	.word	0x45505000

08002954 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	461a      	mov	r2, r3
 8002960:	460b      	mov	r3, r1
 8002962:	72fb      	strb	r3, [r7, #11]
 8002964:	4613      	mov	r3, r2
 8002966:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	695c      	ldr	r4, [r3, #20]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	7b1b      	ldrb	r3, [r3, #12]
 8002974:	b298      	uxth	r0, r3
 8002976:	7afb      	ldrb	r3, [r7, #11]
 8002978:	b299      	uxth	r1, r3
 800297a:	893b      	ldrh	r3, [r7, #8]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	47a0      	blx	r4
 8002980:	4603      	mov	r3, r0
}
 8002982:	4618      	mov	r0, r3
 8002984:	371c      	adds	r7, #28
 8002986:	46bd      	mov	sp, r7
 8002988:	bd90      	pop	{r4, r7, pc}

0800298a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800298a:	b590      	push	{r4, r7, lr}
 800298c:	b087      	sub	sp, #28
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	461a      	mov	r2, r3
 8002996:	460b      	mov	r3, r1
 8002998:	72fb      	strb	r3, [r7, #11]
 800299a:	4613      	mov	r3, r2
 800299c:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	691c      	ldr	r4, [r3, #16]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	7b1b      	ldrb	r3, [r3, #12]
 80029aa:	b298      	uxth	r0, r3
 80029ac:	7afb      	ldrb	r3, [r7, #11]
 80029ae:	b299      	uxth	r1, r3
 80029b0:	893b      	ldrh	r3, [r7, #8]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	47a0      	blx	r4
 80029b6:	4603      	mov	r3, r0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	371c      	adds	r7, #28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd90      	pop	{r4, r7, pc}

080029c0 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	461a      	mov	r2, r3
 80029cc:	460b      	mov	r3, r1
 80029ce:	72fb      	strb	r3, [r7, #11]
 80029d0:	4613      	mov	r3, r2
 80029d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	685c      	ldr	r4, [r3, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6898      	ldr	r0, [r3, #8]
 80029dc:	893b      	ldrh	r3, [r7, #8]
 80029de:	7af9      	ldrb	r1, [r7, #11]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	47a0      	blx	r4
 80029e4:	6178      	str	r0, [r7, #20]
  return ret;
 80029e6:	697b      	ldr	r3, [r7, #20]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	371c      	adds	r7, #28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd90      	pop	{r4, r7, pc}

080029f0 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	461a      	mov	r2, r3
 80029fc:	460b      	mov	r3, r1
 80029fe:	72fb      	strb	r3, [r7, #11]
 8002a00:	4613      	mov	r3, r2
 8002a02:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681c      	ldr	r4, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6898      	ldr	r0, [r3, #8]
 8002a0c:	893b      	ldrh	r3, [r7, #8]
 8002a0e:	7af9      	ldrb	r1, [r7, #11]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	47a0      	blx	r4
 8002a14:	6178      	str	r0, [r7, #20]
  return ret;
 8002a16:	697b      	ldr	r3, [r7, #20]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	371c      	adds	r7, #28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd90      	pop	{r4, r7, pc}

08002a20 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8002a2c:	f107 0208 	add.w	r2, r7, #8
 8002a30:	2301      	movs	r3, #1
 8002a32:	2110      	movs	r1, #16
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ffc3 	bl	80029c0 <ism330dhcx_read_reg>
 8002a3a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0) {
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10f      	bne.n	8002a62 <ism330dhcx_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	7a3b      	ldrb	r3, [r7, #8]
 8002a4c:	f362 0383 	bfi	r3, r2, #2, #2
 8002a50:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8002a52:	f107 0208 	add.w	r2, r7, #8
 8002a56:	2301      	movs	r3, #1
 8002a58:	2110      	movs	r1, #16
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ffc8 	bl	80029f0 <ism330dhcx_write_reg>
 8002a60:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8002a62:	68fb      	ldr	r3, [r7, #12]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8002a76:	f107 0208 	add.w	r2, r7, #8
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	2110      	movs	r1, #16
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ff9e 	bl	80029c0 <ism330dhcx_read_reg>
 8002a84:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl) {
 8002a86:	7a3b      	ldrb	r3, [r7, #8]
 8002a88:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d81a      	bhi.n	8002ac8 <ism330dhcx_xl_full_scale_get+0x5c>
 8002a92:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <ism330dhcx_xl_full_scale_get+0x2c>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002aa9 	.word	0x08002aa9
 8002a9c:	08002ab1 	.word	0x08002ab1
 8002aa0:	08002ab9 	.word	0x08002ab9
 8002aa4:	08002ac1 	.word	0x08002ac1
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
      break;
 8002aae:	e00f      	b.n	8002ad0 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]
      break;
 8002ab6:	e00b      	b.n	8002ad0 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2202      	movs	r2, #2
 8002abc:	701a      	strb	r2, [r3, #0]
      break;
 8002abe:	e007      	b.n	8002ad0 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	701a      	strb	r2, [r3, #0]
      break;
 8002ac6:	e003      	b.n	8002ad0 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
      break;
 8002ace:	bf00      	nop
  }

  return ret;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop

08002adc <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8002aec:	f107 030c 	add.w	r3, r7, #12
 8002af0:	4619      	mov	r1, r3
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fd9f 	bl	8003636 <ism330dhcx_fsm_enable_get>
 8002af8:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f040 80c4 	bne.w	8002c8a <ism330dhcx_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8002b02:	7b3b      	ldrb	r3, [r7, #12]
 8002b04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b08:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8002b0a:	7b3b      	ldrb	r3, [r7, #12]
 8002b0c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002b10:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8002b12:	4313      	orrs	r3, r2
 8002b14:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8002b16:	7b3b      	ldrb	r3, [r7, #12]
 8002b18:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b1c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8002b22:	7b3b      	ldrb	r3, [r7, #12]
 8002b24:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b28:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8002b2e:	7b3b      	ldrb	r3, [r7, #12]
 8002b30:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b34:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8002b36:	4313      	orrs	r3, r2
 8002b38:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8002b3a:	7b3b      	ldrb	r3, [r7, #12]
 8002b3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002b40:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8002b42:	4313      	orrs	r3, r2
 8002b44:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8002b46:	7b3b      	ldrb	r3, [r7, #12]
 8002b48:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002b4c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8002b52:	7b3b      	ldrb	r3, [r7, #12]
 8002b54:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002b58:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8002b5e:	7b7b      	ldrb	r3, [r7, #13]
 8002b60:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b64:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8002b66:	4313      	orrs	r3, r2
 8002b68:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8002b6a:	7b7b      	ldrb	r3, [r7, #13]
 8002b6c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002b70:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8002b72:	4313      	orrs	r3, r2
 8002b74:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8002b76:	7b7b      	ldrb	r3, [r7, #13]
 8002b78:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b7c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8002b82:	7b7b      	ldrb	r3, [r7, #13]
 8002b84:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b88:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8002b8e:	7b7b      	ldrb	r3, [r7, #13]
 8002b90:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b94:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8002b96:	4313      	orrs	r3, r2
 8002b98:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8002b9a:	7b7b      	ldrb	r3, [r7, #13]
 8002b9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002ba0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8002ba6:	7b7b      	ldrb	r3, [r7, #13]
 8002ba8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002bac:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8002bb2:	7b7b      	ldrb	r3, [r7, #13]
 8002bb4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002bb8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d163      	bne.n	8002c8a <ism330dhcx_xl_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8002bc2:	f107 030b 	add.w	r3, r7, #11
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fd61 	bl	8003690 <ism330dhcx_fsm_data_rate_get>
 8002bce:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d159      	bne.n	8002c8a <ism330dhcx_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8002bd6:	7afb      	ldrb	r3, [r7, #11]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d853      	bhi.n	8002c84 <ism330dhcx_xl_data_rate_set+0x1a8>
 8002bdc:	a201      	add	r2, pc, #4	; (adr r2, 8002be4 <ism330dhcx_xl_data_rate_set+0x108>)
 8002bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be2:	bf00      	nop
 8002be4:	08002bf5 	.word	0x08002bf5
 8002be8:	08002c07 	.word	0x08002c07
 8002bec:	08002c25 	.word	0x08002c25
 8002bf0:	08002c4f 	.word	0x08002c4f
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <ism330dhcx_xl_data_rate_set+0x124>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8002bfe:	e045      	b.n	8002c8c <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	75fb      	strb	r3, [r7, #23]
            break;
 8002c04:	e042      	b.n	8002c8c <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d102      	bne.n	8002c12 <ism330dhcx_xl_data_rate_set+0x136>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8002c10:	e03c      	b.n	8002c8c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d102      	bne.n	8002c1e <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	75fb      	strb	r3, [r7, #23]
            break;
 8002c1c:	e036      	b.n	8002c8c <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	75fb      	strb	r3, [r7, #23]
            break;
 8002c22:	e033      	b.n	8002c8c <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <ism330dhcx_xl_data_rate_set+0x154>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8002c2e:	e02d      	b.n	8002c8c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d102      	bne.n	8002c3c <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8002c36:	2303      	movs	r3, #3
 8002c38:	75fb      	strb	r3, [r7, #23]
            break;
 8002c3a:	e027      	b.n	8002c8c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d102      	bne.n	8002c48 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8002c42:	2303      	movs	r3, #3
 8002c44:	75fb      	strb	r3, [r7, #23]
            break;
 8002c46:	e021      	b.n	8002c8c <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	75fb      	strb	r3, [r7, #23]
            break;
 8002c4c:	e01e      	b.n	8002c8c <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <ism330dhcx_xl_data_rate_set+0x17e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8002c54:	2304      	movs	r3, #4
 8002c56:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8002c58:	e018      	b.n	8002c8c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d102      	bne.n	8002c66 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8002c60:	2304      	movs	r3, #4
 8002c62:	75fb      	strb	r3, [r7, #23]
            break;
 8002c64:	e012      	b.n	8002c8c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d102      	bne.n	8002c72 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	75fb      	strb	r3, [r7, #23]
            break;
 8002c70:	e00c      	b.n	8002c8c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d102      	bne.n	8002c7e <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8002c78:	2304      	movs	r3, #4
 8002c7a:	75fb      	strb	r3, [r7, #23]
            break;
 8002c7c:	e006      	b.n	8002c8c <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	75fb      	strb	r3, [r7, #23]
            break;
 8002c82:	e003      	b.n	8002c8c <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	75fb      	strb	r3, [r7, #23]
            break;
 8002c88:	e000      	b.n	8002c8c <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 8002c8a:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d16d      	bne.n	8002d72 <ism330dhcx_xl_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8002c96:	f107 030a 	add.w	r3, r7, #10
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fd3f 	bl	8003720 <ism330dhcx_mlc_get>
 8002ca2:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 8002ca4:	7abb      	ldrb	r3, [r7, #10]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d163      	bne.n	8002d72 <ism330dhcx_xl_data_rate_set+0x296>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8002caa:	f107 0309 	add.w	r3, r7, #9
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fd5f 	bl	8003774 <ism330dhcx_mlc_data_rate_get>
 8002cb6:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d159      	bne.n	8002d72 <ism330dhcx_xl_data_rate_set+0x296>
        switch (mlc_odr) {
 8002cbe:	7a7b      	ldrb	r3, [r7, #9]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d853      	bhi.n	8002d6c <ism330dhcx_xl_data_rate_set+0x290>
 8002cc4:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <ism330dhcx_xl_data_rate_set+0x1f0>)
 8002cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cca:	bf00      	nop
 8002ccc:	08002cdd 	.word	0x08002cdd
 8002cd0:	08002cef 	.word	0x08002cef
 8002cd4:	08002d0d 	.word	0x08002d0d
 8002cd8:	08002d37 	.word	0x08002d37
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d102      	bne.n	8002ce8 <ism330dhcx_xl_data_rate_set+0x20c>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8002ce6:	e045      	b.n	8002d74 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	75fb      	strb	r3, [r7, #23]
            break;
 8002cec:	e042      	b.n	8002d74 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d102      	bne.n	8002cfa <ism330dhcx_xl_data_rate_set+0x21e>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8002cf8:	e03c      	b.n	8002d74 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d102      	bne.n	8002d06 <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8002d00:	2302      	movs	r3, #2
 8002d02:	75fb      	strb	r3, [r7, #23]
            break;
 8002d04:	e036      	b.n	8002d74 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	75fb      	strb	r3, [r7, #23]
            break;
 8002d0a:	e033      	b.n	8002d74 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <ism330dhcx_xl_data_rate_set+0x23c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8002d12:	2303      	movs	r3, #3
 8002d14:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8002d16:	e02d      	b.n	8002d74 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d102      	bne.n	8002d24 <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	75fb      	strb	r3, [r7, #23]
            break;
 8002d22:	e027      	b.n	8002d74 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d102      	bne.n	8002d30 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	75fb      	strb	r3, [r7, #23]
            break;
 8002d2e:	e021      	b.n	8002d74 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	75fb      	strb	r3, [r7, #23]
            break;
 8002d34:	e01e      	b.n	8002d74 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <ism330dhcx_xl_data_rate_set+0x266>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8002d3c:	2304      	movs	r3, #4
 8002d3e:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8002d40:	e018      	b.n	8002d74 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d102      	bne.n	8002d4e <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8002d48:	2304      	movs	r3, #4
 8002d4a:	75fb      	strb	r3, [r7, #23]
            break;
 8002d4c:	e012      	b.n	8002d74 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d102      	bne.n	8002d5a <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8002d54:	2304      	movs	r3, #4
 8002d56:	75fb      	strb	r3, [r7, #23]
            break;
 8002d58:	e00c      	b.n	8002d74 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d102      	bne.n	8002d66 <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8002d60:	2304      	movs	r3, #4
 8002d62:	75fb      	strb	r3, [r7, #23]
            break;
 8002d64:	e006      	b.n	8002d74 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	75fb      	strb	r3, [r7, #23]
            break;
 8002d6a:	e003      	b.n	8002d74 <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	75fb      	strb	r3, [r7, #23]
            break;
 8002d70:	e000      	b.n	8002d74 <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 8002d72:	bf00      	nop
    }
  }

  if (ret == 0) {
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d107      	bne.n	8002d8a <ism330dhcx_xl_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8002d7a:	f107 0208 	add.w	r2, r7, #8
 8002d7e:	2301      	movs	r3, #1
 8002d80:	2110      	movs	r1, #16
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff fe1c 	bl	80029c0 <ism330dhcx_read_reg>
 8002d88:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0) {
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10f      	bne.n	8002db0 <ism330dhcx_xl_data_rate_set+0x2d4>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	7a3b      	ldrb	r3, [r7, #8]
 8002d9a:	f362 1307 	bfi	r3, r2, #4, #4
 8002d9e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8002da0:	f107 0208 	add.w	r2, r7, #8
 8002da4:	2301      	movs	r3, #1
 8002da6:	2110      	movs	r1, #16
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fe21 	bl	80029f0 <ism330dhcx_write_reg>
 8002dae:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8002db0:	693b      	ldr	r3, [r7, #16]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop

08002dbc <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8002dc6:	f107 0208 	add.w	r2, r7, #8
 8002dca:	2301      	movs	r3, #1
 8002dcc:	2110      	movs	r1, #16
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff fdf6 	bl	80029c0 <ism330dhcx_read_reg>
 8002dd4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl) {
 8002dd6:	7a3b      	ldrb	r3, [r7, #8]
 8002dd8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b0b      	cmp	r3, #11
 8002de0:	d84a      	bhi.n	8002e78 <ism330dhcx_xl_data_rate_get+0xbc>
 8002de2:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <ism330dhcx_xl_data_rate_get+0x2c>)
 8002de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de8:	08002e19 	.word	0x08002e19
 8002dec:	08002e21 	.word	0x08002e21
 8002df0:	08002e29 	.word	0x08002e29
 8002df4:	08002e31 	.word	0x08002e31
 8002df8:	08002e39 	.word	0x08002e39
 8002dfc:	08002e41 	.word	0x08002e41
 8002e00:	08002e49 	.word	0x08002e49
 8002e04:	08002e51 	.word	0x08002e51
 8002e08:	08002e59 	.word	0x08002e59
 8002e0c:	08002e61 	.word	0x08002e61
 8002e10:	08002e69 	.word	0x08002e69
 8002e14:	08002e71 	.word	0x08002e71
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
      break;
 8002e1e:	e02f      	b.n	8002e80 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2201      	movs	r2, #1
 8002e24:	701a      	strb	r2, [r3, #0]
      break;
 8002e26:	e02b      	b.n	8002e80 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	701a      	strb	r2, [r3, #0]
      break;
 8002e2e:	e027      	b.n	8002e80 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2203      	movs	r2, #3
 8002e34:	701a      	strb	r2, [r3, #0]
      break;
 8002e36:	e023      	b.n	8002e80 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	701a      	strb	r2, [r3, #0]
      break;
 8002e3e:	e01f      	b.n	8002e80 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2205      	movs	r2, #5
 8002e44:	701a      	strb	r2, [r3, #0]
      break;
 8002e46:	e01b      	b.n	8002e80 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_417Hz:
      *val = ISM330DHCX_XL_ODR_417Hz;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2206      	movs	r2, #6
 8002e4c:	701a      	strb	r2, [r3, #0]
      break;
 8002e4e:	e017      	b.n	8002e80 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2207      	movs	r2, #7
 8002e54:	701a      	strb	r2, [r3, #0]
      break;
 8002e56:	e013      	b.n	8002e80 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1667Hz:
      *val = ISM330DHCX_XL_ODR_1667Hz;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	701a      	strb	r2, [r3, #0]
      break;
 8002e5e:	e00f      	b.n	8002e80 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3333Hz:
      *val = ISM330DHCX_XL_ODR_3333Hz;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2209      	movs	r2, #9
 8002e64:	701a      	strb	r2, [r3, #0]
      break;
 8002e66:	e00b      	b.n	8002e80 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	220a      	movs	r2, #10
 8002e6c:	701a      	strb	r2, [r3, #0]
      break;
 8002e6e:	e007      	b.n	8002e80 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6Hz5:
      *val = ISM330DHCX_XL_ODR_6Hz5;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	220b      	movs	r2, #11
 8002e74:	701a      	strb	r2, [r3, #0]
      break;
 8002e76:	e003      	b.n	8002e80 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
      break;
 8002e7e:	bf00      	nop
  }

  return ret;
 8002e80:	68fb      	ldr	r3, [r7, #12]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop

08002e8c <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8002e98:	f107 0208 	add.w	r2, r7, #8
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	2111      	movs	r1, #17
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff fd8d 	bl	80029c0 <ism330dhcx_read_reg>
 8002ea6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0) {
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10f      	bne.n	8002ece <ism330dhcx_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	7a3b      	ldrb	r3, [r7, #8]
 8002eb8:	f362 0303 	bfi	r3, r2, #0, #4
 8002ebc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8002ebe:	f107 0208 	add.w	r2, r7, #8
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	2111      	movs	r1, #17
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff fd92 	bl	80029f0 <ism330dhcx_write_reg>
 8002ecc:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8002ece:	68fb      	ldr	r3, [r7, #12]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8002ee2:	f107 0208 	add.w	r2, r7, #8
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	2111      	movs	r1, #17
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff fd68 	bl	80029c0 <ism330dhcx_read_reg>
 8002ef0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g) {
 8002ef2:	7a3b      	ldrb	r3, [r7, #8]
 8002ef4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d834      	bhi.n	8002f68 <ism330dhcx_gy_full_scale_get+0x90>
 8002efe:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <ism330dhcx_gy_full_scale_get+0x2c>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f41 	.word	0x08002f41
 8002f08:	08002f61 	.word	0x08002f61
 8002f0c:	08002f39 	.word	0x08002f39
 8002f10:	08002f69 	.word	0x08002f69
 8002f14:	08002f49 	.word	0x08002f49
 8002f18:	08002f69 	.word	0x08002f69
 8002f1c:	08002f69 	.word	0x08002f69
 8002f20:	08002f69 	.word	0x08002f69
 8002f24:	08002f51 	.word	0x08002f51
 8002f28:	08002f69 	.word	0x08002f69
 8002f2c:	08002f69 	.word	0x08002f69
 8002f30:	08002f69 	.word	0x08002f69
 8002f34:	08002f59 	.word	0x08002f59
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	701a      	strb	r2, [r3, #0]
      break;
 8002f3e:	e017      	b.n	8002f70 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
      break;
 8002f46:	e013      	b.n	8002f70 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	701a      	strb	r2, [r3, #0]
      break;
 8002f4e:	e00f      	b.n	8002f70 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2208      	movs	r2, #8
 8002f54:	701a      	strb	r2, [r3, #0]
      break;
 8002f56:	e00b      	b.n	8002f70 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	701a      	strb	r2, [r3, #0]
      break;
 8002f5e:	e007      	b.n	8002f70 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2201      	movs	r2, #1
 8002f64:	701a      	strb	r2, [r3, #0]
      break;
 8002f66:	e003      	b.n	8002f70 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	701a      	strb	r2, [r3, #0]
      break;
 8002f6e:	bf00      	nop
  }

  return ret;
 8002f70:	68fb      	ldr	r3, [r7, #12]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop

08002f7c <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	4619      	mov	r1, r3
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fb4f 	bl	8003636 <ism330dhcx_fsm_enable_get>
 8002f98:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f040 80c4 	bne.w	800312a <ism330dhcx_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8002fa2:	7b3b      	ldrb	r3, [r7, #12]
 8002fa4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002fa8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8002faa:	7b3b      	ldrb	r3, [r7, #12]
 8002fac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002fb0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8002fb6:	7b3b      	ldrb	r3, [r7, #12]
 8002fb8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002fbc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8002fc2:	7b3b      	ldrb	r3, [r7, #12]
 8002fc4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002fc8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8002fce:	7b3b      	ldrb	r3, [r7, #12]
 8002fd0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002fd4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8002fda:	7b3b      	ldrb	r3, [r7, #12]
 8002fdc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002fe0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8002fe6:	7b3b      	ldrb	r3, [r7, #12]
 8002fe8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002fec:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8002ff2:	7b3b      	ldrb	r3, [r7, #12]
 8002ff4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002ff8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8002ffe:	7b7b      	ldrb	r3, [r7, #13]
 8003000:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003004:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003006:	4313      	orrs	r3, r2
 8003008:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800300a:	7b7b      	ldrb	r3, [r7, #13]
 800300c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003010:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003012:	4313      	orrs	r3, r2
 8003014:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003016:	7b7b      	ldrb	r3, [r7, #13]
 8003018:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800301c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800301e:	4313      	orrs	r3, r2
 8003020:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003022:	7b7b      	ldrb	r3, [r7, #13]
 8003024:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003028:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800302a:	4313      	orrs	r3, r2
 800302c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800302e:	7b7b      	ldrb	r3, [r7, #13]
 8003030:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003034:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003036:	4313      	orrs	r3, r2
 8003038:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800303a:	7b7b      	ldrb	r3, [r7, #13]
 800303c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003040:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003042:	4313      	orrs	r3, r2
 8003044:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8003046:	7b7b      	ldrb	r3, [r7, #13]
 8003048:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800304c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800304e:	4313      	orrs	r3, r2
 8003050:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8003052:	7b7b      	ldrb	r3, [r7, #13]
 8003054:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003058:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800305a:	4313      	orrs	r3, r2
 800305c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800305e:	2b01      	cmp	r3, #1
 8003060:	d163      	bne.n	800312a <ism330dhcx_gy_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8003062:	f107 030b 	add.w	r3, r7, #11
 8003066:	4619      	mov	r1, r3
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fb11 	bl	8003690 <ism330dhcx_fsm_data_rate_get>
 800306e:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d159      	bne.n	800312a <ism330dhcx_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8003076:	7afb      	ldrb	r3, [r7, #11]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d853      	bhi.n	8003124 <ism330dhcx_gy_data_rate_set+0x1a8>
 800307c:	a201      	add	r2, pc, #4	; (adr r2, 8003084 <ism330dhcx_gy_data_rate_set+0x108>)
 800307e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003082:	bf00      	nop
 8003084:	08003095 	.word	0x08003095
 8003088:	080030a7 	.word	0x080030a7
 800308c:	080030c5 	.word	0x080030c5
 8003090:	080030ef 	.word	0x080030ef
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <ism330dhcx_gy_data_rate_set+0x124>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 800309a:	2301      	movs	r3, #1
 800309c:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800309e:	e045      	b.n	800312c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	75fb      	strb	r3, [r7, #23]
            break;
 80030a4:	e042      	b.n	800312c <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d102      	bne.n	80030b2 <ism330dhcx_gy_data_rate_set+0x136>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80030ac:	2302      	movs	r3, #2
 80030ae:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80030b0:	e03c      	b.n	800312c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d102      	bne.n	80030be <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80030b8:	2302      	movs	r3, #2
 80030ba:	75fb      	strb	r3, [r7, #23]
            break;
 80030bc:	e036      	b.n	800312c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	75fb      	strb	r3, [r7, #23]
            break;
 80030c2:	e033      	b.n	800312c <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <ism330dhcx_gy_data_rate_set+0x154>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80030ca:	2303      	movs	r3, #3
 80030cc:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80030ce:	e02d      	b.n	800312c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d102      	bne.n	80030dc <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80030d6:	2303      	movs	r3, #3
 80030d8:	75fb      	strb	r3, [r7, #23]
            break;
 80030da:	e027      	b.n	800312c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d102      	bne.n	80030e8 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80030e2:	2303      	movs	r3, #3
 80030e4:	75fb      	strb	r3, [r7, #23]
            break;
 80030e6:	e021      	b.n	800312c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	75fb      	strb	r3, [r7, #23]
            break;
 80030ec:	e01e      	b.n	800312c <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d102      	bne.n	80030fa <ism330dhcx_gy_data_rate_set+0x17e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80030f4:	2304      	movs	r3, #4
 80030f6:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80030f8:	e018      	b.n	800312c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d102      	bne.n	8003106 <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003100:	2304      	movs	r3, #4
 8003102:	75fb      	strb	r3, [r7, #23]
            break;
 8003104:	e012      	b.n	800312c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d102      	bne.n	8003112 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800310c:	2304      	movs	r3, #4
 800310e:	75fb      	strb	r3, [r7, #23]
            break;
 8003110:	e00c      	b.n	800312c <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d102      	bne.n	800311e <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003118:	2304      	movs	r3, #4
 800311a:	75fb      	strb	r3, [r7, #23]
            break;
 800311c:	e006      	b.n	800312c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	75fb      	strb	r3, [r7, #23]
            break;
 8003122:	e003      	b.n	800312c <ism330dhcx_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	75fb      	strb	r3, [r7, #23]
            break;
 8003128:	e000      	b.n	800312c <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 800312a:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 800312c:	2300      	movs	r3, #0
 800312e:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d16d      	bne.n	8003212 <ism330dhcx_gy_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8003136:	f107 030a 	add.w	r3, r7, #10
 800313a:	4619      	mov	r1, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 faef 	bl	8003720 <ism330dhcx_mlc_get>
 8003142:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 8003144:	7abb      	ldrb	r3, [r7, #10]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d163      	bne.n	8003212 <ism330dhcx_gy_data_rate_set+0x296>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800314a:	f107 0309 	add.w	r3, r7, #9
 800314e:	4619      	mov	r1, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fb0f 	bl	8003774 <ism330dhcx_mlc_data_rate_get>
 8003156:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d159      	bne.n	8003212 <ism330dhcx_gy_data_rate_set+0x296>
        switch (mlc_odr) {
 800315e:	7a7b      	ldrb	r3, [r7, #9]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d853      	bhi.n	800320c <ism330dhcx_gy_data_rate_set+0x290>
 8003164:	a201      	add	r2, pc, #4	; (adr r2, 800316c <ism330dhcx_gy_data_rate_set+0x1f0>)
 8003166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316a:	bf00      	nop
 800316c:	0800317d 	.word	0x0800317d
 8003170:	0800318f 	.word	0x0800318f
 8003174:	080031ad 	.word	0x080031ad
 8003178:	080031d7 	.word	0x080031d7
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <ism330dhcx_gy_data_rate_set+0x20c>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8003182:	2301      	movs	r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003186:	e045      	b.n	8003214 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	75fb      	strb	r3, [r7, #23]
            break;
 800318c:	e042      	b.n	8003214 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <ism330dhcx_gy_data_rate_set+0x21e>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8003194:	2302      	movs	r3, #2
 8003196:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003198:	e03c      	b.n	8003214 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d102      	bne.n	80031a6 <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80031a0:	2302      	movs	r3, #2
 80031a2:	75fb      	strb	r3, [r7, #23]
            break;
 80031a4:	e036      	b.n	8003214 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	75fb      	strb	r3, [r7, #23]
            break;
 80031aa:	e033      	b.n	8003214 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <ism330dhcx_gy_data_rate_set+0x23c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80031b2:	2303      	movs	r3, #3
 80031b4:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80031b6:	e02d      	b.n	8003214 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d102      	bne.n	80031c4 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80031be:	2303      	movs	r3, #3
 80031c0:	75fb      	strb	r3, [r7, #23]
            break;
 80031c2:	e027      	b.n	8003214 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d102      	bne.n	80031d0 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80031ca:	2303      	movs	r3, #3
 80031cc:	75fb      	strb	r3, [r7, #23]
            break;
 80031ce:	e021      	b.n	8003214 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	75fb      	strb	r3, [r7, #23]
            break;
 80031d4:	e01e      	b.n	8003214 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <ism330dhcx_gy_data_rate_set+0x266>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80031dc:	2304      	movs	r3, #4
 80031de:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80031e0:	e018      	b.n	8003214 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d102      	bne.n	80031ee <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80031e8:	2304      	movs	r3, #4
 80031ea:	75fb      	strb	r3, [r7, #23]
            break;
 80031ec:	e012      	b.n	8003214 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d102      	bne.n	80031fa <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80031f4:	2304      	movs	r3, #4
 80031f6:	75fb      	strb	r3, [r7, #23]
            break;
 80031f8:	e00c      	b.n	8003214 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d102      	bne.n	8003206 <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003200:	2304      	movs	r3, #4
 8003202:	75fb      	strb	r3, [r7, #23]
            break;
 8003204:	e006      	b.n	8003214 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	75fb      	strb	r3, [r7, #23]
            break;
 800320a:	e003      	b.n	8003214 <ism330dhcx_gy_data_rate_set+0x298>

          default:
            odr_gy = val;
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	75fb      	strb	r3, [r7, #23]
            break;
 8003210:	e000      	b.n	8003214 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8003212:	bf00      	nop
    }
  }

  if (ret == 0) {
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d107      	bne.n	800322a <ism330dhcx_gy_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800321a:	f107 0208 	add.w	r2, r7, #8
 800321e:	2301      	movs	r3, #1
 8003220:	2111      	movs	r1, #17
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff fbcc 	bl	80029c0 <ism330dhcx_read_reg>
 8003228:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0) {
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10f      	bne.n	8003250 <ism330dhcx_gy_data_rate_set+0x2d4>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	b2da      	uxtb	r2, r3
 8003238:	7a3b      	ldrb	r3, [r7, #8]
 800323a:	f362 1307 	bfi	r3, r2, #4, #4
 800323e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8003240:	f107 0208 	add.w	r2, r7, #8
 8003244:	2301      	movs	r3, #1
 8003246:	2111      	movs	r1, #17
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff fbd1 	bl	80029f0 <ism330dhcx_write_reg>
 800324e:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8003250:	693b      	ldr	r3, [r7, #16]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop

0800325c <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003266:	f107 0208 	add.w	r2, r7, #8
 800326a:	2301      	movs	r3, #1
 800326c:	2111      	movs	r1, #17
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff fba6 	bl	80029c0 <ism330dhcx_read_reg>
 8003274:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g) {
 8003276:	7a3b      	ldrb	r3, [r7, #8]
 8003278:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b0a      	cmp	r3, #10
 8003280:	d844      	bhi.n	800330c <ism330dhcx_gy_data_rate_get+0xb0>
 8003282:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <ism330dhcx_gy_data_rate_get+0x2c>)
 8003284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003288:	080032b5 	.word	0x080032b5
 800328c:	080032bd 	.word	0x080032bd
 8003290:	080032c5 	.word	0x080032c5
 8003294:	080032cd 	.word	0x080032cd
 8003298:	080032d5 	.word	0x080032d5
 800329c:	080032dd 	.word	0x080032dd
 80032a0:	080032e5 	.word	0x080032e5
 80032a4:	080032ed 	.word	0x080032ed
 80032a8:	080032f5 	.word	0x080032f5
 80032ac:	080032fd 	.word	0x080032fd
 80032b0:	08003305 	.word	0x08003305
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
      break;
 80032ba:	e02b      	b.n	8003314 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
      break;
 80032c2:	e027      	b.n	8003314 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2202      	movs	r2, #2
 80032c8:	701a      	strb	r2, [r3, #0]
      break;
 80032ca:	e023      	b.n	8003314 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2203      	movs	r2, #3
 80032d0:	701a      	strb	r2, [r3, #0]
      break;
 80032d2:	e01f      	b.n	8003314 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2204      	movs	r2, #4
 80032d8:	701a      	strb	r2, [r3, #0]
      break;
 80032da:	e01b      	b.n	8003314 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2205      	movs	r2, #5
 80032e0:	701a      	strb	r2, [r3, #0]
      break;
 80032e2:	e017      	b.n	8003314 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_417Hz:
      *val = ISM330DHCX_GY_ODR_417Hz;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2206      	movs	r2, #6
 80032e8:	701a      	strb	r2, [r3, #0]
      break;
 80032ea:	e013      	b.n	8003314 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2207      	movs	r2, #7
 80032f0:	701a      	strb	r2, [r3, #0]
      break;
 80032f2:	e00f      	b.n	8003314 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1667Hz:
      *val = ISM330DHCX_GY_ODR_1667Hz;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2208      	movs	r2, #8
 80032f8:	701a      	strb	r2, [r3, #0]
      break;
 80032fa:	e00b      	b.n	8003314 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3333Hz:
      *val = ISM330DHCX_GY_ODR_3333Hz;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2209      	movs	r2, #9
 8003300:	701a      	strb	r2, [r3, #0]
      break;
 8003302:	e007      	b.n	8003314 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	220a      	movs	r2, #10
 8003308:	701a      	strb	r2, [r3, #0]
      break;
 800330a:	e003      	b.n	8003314 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
      break;
 8003312:	bf00      	nop
  }

  return ret;
 8003314:	68fb      	ldr	r3, [r7, #12]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop

08003320 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800332c:	f107 0208 	add.w	r2, r7, #8
 8003330:	2301      	movs	r3, #1
 8003332:	2112      	movs	r1, #18
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff fb43 	bl	80029c0 <ism330dhcx_read_reg>
 800333a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10f      	bne.n	8003362 <ism330dhcx_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	b2da      	uxtb	r2, r3
 800334a:	7a3b      	ldrb	r3, [r7, #8]
 800334c:	f362 1386 	bfi	r3, r2, #6, #1
 8003350:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8003352:	f107 0208 	add.w	r2, r7, #8
 8003356:	2301      	movs	r3, #1
 8003358:	2112      	movs	r1, #18
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff fb48 	bl	80029f0 <ism330dhcx_write_reg>
 8003360:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8003376:	f107 020c 	add.w	r2, r7, #12
 800337a:	2306      	movs	r3, #6
 800337c:	2122      	movs	r1, #34	; 0x22
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff fb1e 	bl	80029c0 <ism330dhcx_read_reg>
 8003384:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003386:	7b7b      	ldrb	r3, [r7, #13]
 8003388:	b21a      	sxth	r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003394:	b29b      	uxth	r3, r3
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	b29a      	uxth	r2, r3
 800339a:	7b3b      	ldrb	r3, [r7, #12]
 800339c:	b29b      	uxth	r3, r3
 800339e:	4413      	add	r3, r2
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	b21a      	sxth	r2, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80033a8:	7bfa      	ldrb	r2, [r7, #15]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	3302      	adds	r3, #2
 80033ae:	b212      	sxth	r2, r2
 80033b0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	3302      	adds	r3, #2
 80033b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	b29a      	uxth	r2, r3
 80033c0:	7bbb      	ldrb	r3, [r7, #14]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	3302      	adds	r3, #2
 80033cc:	b212      	sxth	r2, r2
 80033ce:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80033d0:	7c7a      	ldrb	r2, [r7, #17]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	3304      	adds	r3, #4
 80033d6:	b212      	sxth	r2, r2
 80033d8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	3304      	adds	r3, #4
 80033de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	7c3b      	ldrb	r3, [r7, #16]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	3304      	adds	r3, #4
 80033f4:	b212      	sxth	r2, r2
 80033f6:	801a      	strh	r2, [r3, #0]
  return ret;
 80033f8:	697b      	ldr	r3, [r7, #20]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 800340c:	f107 020c 	add.w	r2, r7, #12
 8003410:	2306      	movs	r3, #6
 8003412:	2128      	movs	r1, #40	; 0x28
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff fad3 	bl	80029c0 <ism330dhcx_read_reg>
 800341a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800341c:	7b7b      	ldrb	r3, [r7, #13]
 800341e:	b21a      	sxth	r2, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800342a:	b29b      	uxth	r3, r3
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	b29a      	uxth	r2, r3
 8003430:	7b3b      	ldrb	r3, [r7, #12]
 8003432:	b29b      	uxth	r3, r3
 8003434:	4413      	add	r3, r2
 8003436:	b29b      	uxth	r3, r3
 8003438:	b21a      	sxth	r2, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800343e:	7bfa      	ldrb	r2, [r7, #15]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	3302      	adds	r3, #2
 8003444:	b212      	sxth	r2, r2
 8003446:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	3302      	adds	r3, #2
 800344c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003450:	b29b      	uxth	r3, r3
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	b29a      	uxth	r2, r3
 8003456:	7bbb      	ldrb	r3, [r7, #14]
 8003458:	b29b      	uxth	r3, r3
 800345a:	4413      	add	r3, r2
 800345c:	b29a      	uxth	r2, r3
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	3302      	adds	r3, #2
 8003462:	b212      	sxth	r2, r2
 8003464:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003466:	7c7a      	ldrb	r2, [r7, #17]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	3304      	adds	r3, #4
 800346c:	b212      	sxth	r2, r2
 800346e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	3304      	adds	r3, #4
 8003474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003478:	b29b      	uxth	r3, r3
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	b29a      	uxth	r2, r3
 800347e:	7c3b      	ldrb	r3, [r7, #16]
 8003480:	b29b      	uxth	r3, r3
 8003482:	4413      	add	r3, r2
 8003484:	b29a      	uxth	r2, r3
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	3304      	adds	r3, #4
 800348a:	b212      	sxth	r2, r2
 800348c:	801a      	strh	r2, [r3, #0]
  return ret;
 800348e:	697b      	ldr	r3, [r7, #20]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 80034a4:	f107 0208 	add.w	r2, r7, #8
 80034a8:	2301      	movs	r3, #1
 80034aa:	2118      	movs	r1, #24
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff fa87 	bl	80029c0 <ism330dhcx_read_reg>
 80034b2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0) {
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10f      	bne.n	80034da <ism330dhcx_device_conf_set+0x42>
    ctrl9_xl.device_conf = (uint8_t)val;
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	7a3b      	ldrb	r3, [r7, #8]
 80034c4:	f362 0341 	bfi	r3, r2, #1, #1
 80034c8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 80034ca:	f107 0208 	add.w	r2, r7, #8
 80034ce:	2301      	movs	r3, #1
 80034d0:	2118      	movs	r1, #24
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff fa8c 	bl	80029f0 <ism330dhcx_write_reg>
 80034d8:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 80034da:	68fb      	ldr	r3, [r7, #12]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80034f0:	f107 0208 	add.w	r2, r7, #8
 80034f4:	2301      	movs	r3, #1
 80034f6:	2101      	movs	r1, #1
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff fa61 	bl	80029c0 <ism330dhcx_read_reg>
 80034fe:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <ism330dhcx_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 8003506:	78fb      	ldrb	r3, [r7, #3]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	b2da      	uxtb	r2, r3
 800350e:	7a3b      	ldrb	r3, [r7, #8]
 8003510:	f362 1387 	bfi	r3, r2, #6, #2
 8003514:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8003516:	f107 0208 	add.w	r2, r7, #8
 800351a:	2301      	movs	r3, #1
 800351c:	2101      	movs	r1, #1
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fa66 	bl	80029f0 <ism330dhcx_write_reg>
 8003524:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8003526:	68fb      	ldr	r3, [r7, #12]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 800353a:	2301      	movs	r3, #1
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	210f      	movs	r1, #15
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff fa3d 	bl	80029c0 <ism330dhcx_read_reg>
 8003546:	60f8      	str	r0, [r7, #12]
  return ret;
 8003548:	68fb      	ldr	r3, [r7, #12]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800355e:	f107 0208 	add.w	r2, r7, #8
 8003562:	2301      	movs	r3, #1
 8003564:	2112      	movs	r1, #18
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff fa2a 	bl	80029c0 <ism330dhcx_read_reg>
 800356c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10f      	bne.n	8003594 <ism330dhcx_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	b2da      	uxtb	r2, r3
 800357c:	7a3b      	ldrb	r3, [r7, #8]
 800357e:	f362 0300 	bfi	r3, r2, #0, #1
 8003582:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8003584:	f107 0208 	add.w	r2, r7, #8
 8003588:	2301      	movs	r3, #1
 800358a:	2112      	movs	r1, #18
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff fa2f 	bl	80029f0 <ism330dhcx_write_reg>
 8003592:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8003594:	68fb      	ldr	r3, [r7, #12]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	460b      	mov	r3, r1
 80035a8:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80035aa:	f107 0208 	add.w	r2, r7, #8
 80035ae:	2301      	movs	r3, #1
 80035b0:	2112      	movs	r1, #18
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff fa04 	bl	80029c0 <ism330dhcx_read_reg>
 80035b8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10f      	bne.n	80035e0 <ism330dhcx_auto_increment_set+0x42>
    ctrl3_c.if_inc = (uint8_t)val;
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	7a3b      	ldrb	r3, [r7, #8]
 80035ca:	f362 0382 	bfi	r3, r2, #2, #1
 80035ce:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80035d0:	f107 0208 	add.w	r2, r7, #8
 80035d4:	2301      	movs	r3, #1
 80035d6:	2112      	movs	r1, #18
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff fa09 	bl	80029f0 <ism330dhcx_write_reg>
 80035de:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80035e0:	68fb      	ldr	r3, [r7, #12]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	460b      	mov	r3, r1
 80035f4:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80035f6:	f107 0208 	add.w	r2, r7, #8
 80035fa:	2301      	movs	r3, #1
 80035fc:	210a      	movs	r1, #10
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff f9de 	bl	80029c0 <ism330dhcx_read_reg>
 8003604:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10f      	bne.n	800362c <ism330dhcx_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	b2da      	uxtb	r2, r3
 8003614:	7a3b      	ldrb	r3, [r7, #8]
 8003616:	f362 0302 	bfi	r3, r2, #0, #3
 800361a:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 800361c:	f107 0208 	add.w	r2, r7, #8
 8003620:	2301      	movs	r3, #1
 8003622:	210a      	movs	r1, #10
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff f9e3 	bl	80029f0 <ism330dhcx_write_reg>
 800362a:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 800362c:	68fb      	ldr	r3, [r7, #12]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8003640:	2102      	movs	r1, #2
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff ff4e 	bl	80034e4 <ism330dhcx_mem_bank_set>
 8003648:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <ism330dhcx_fsm_enable_get+0x28>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 8003650:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8003652:	2301      	movs	r3, #1
 8003654:	2146      	movs	r1, #70	; 0x46
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff f9b2 	bl	80029c0 <ism330dhcx_read_reg>
 800365c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <ism330dhcx_fsm_enable_get+0x3e>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8003668:	2301      	movs	r3, #1
 800366a:	2147      	movs	r1, #71	; 0x47
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff f9a7 	bl	80029c0 <ism330dhcx_read_reg>
 8003672:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <ism330dhcx_fsm_enable_get+0x4e>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800367a:	2100      	movs	r1, #0
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ff31 	bl	80034e4 <ism330dhcx_mem_bank_set>
 8003682:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003684:	68fb      	ldr	r3, [r7, #12]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800369a:	2102      	movs	r1, #2
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff21 	bl	80034e4 <ism330dhcx_mem_bank_set>
 80036a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d107      	bne.n	80036ba <ism330dhcx_fsm_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 80036aa:	f107 0208 	add.w	r2, r7, #8
 80036ae:	2301      	movs	r3, #1
 80036b0:	215f      	movs	r1, #95	; 0x5f
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff f984 	bl	80029c0 <ism330dhcx_read_reg>
 80036b8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d104      	bne.n	80036ca <ism330dhcx_fsm_data_rate_get+0x3a>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80036c0:	2100      	movs	r1, #0
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ff0e 	bl	80034e4 <ism330dhcx_mem_bank_set>
 80036c8:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 80036ca:	7a3b      	ldrb	r3, [r7, #8]
 80036cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d81a      	bhi.n	800370c <ism330dhcx_fsm_data_rate_get+0x7c>
 80036d6:	a201      	add	r2, pc, #4	; (adr r2, 80036dc <ism330dhcx_fsm_data_rate_get+0x4c>)
 80036d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036dc:	080036ed 	.word	0x080036ed
 80036e0:	080036f5 	.word	0x080036f5
 80036e4:	080036fd 	.word	0x080036fd
 80036e8:	08003705 	.word	0x08003705
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
      break;
 80036f2:	e00f      	b.n	8003714 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
      break;
 80036fa:	e00b      	b.n	8003714 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2202      	movs	r2, #2
 8003700:	701a      	strb	r2, [r3, #0]
      break;
 8003702:	e007      	b.n	8003714 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2203      	movs	r2, #3
 8003708:	701a      	strb	r2, [r3, #0]
      break;
 800370a:	e003      	b.n	8003714 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
      break;
 8003712:	bf00      	nop
  }

  return ret;
 8003714:	68fb      	ldr	r3, [r7, #12]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop

08003720 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800372a:	2102      	movs	r1, #2
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff fed9 	bl	80034e4 <ism330dhcx_mem_bank_set>
 8003732:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d107      	bne.n	800374a <ism330dhcx_mlc_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 800373a:	f107 0208 	add.w	r2, r7, #8
 800373e:	2301      	movs	r3, #1
 8003740:	2105      	movs	r1, #5
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff f93c 	bl	80029c0 <ism330dhcx_read_reg>
 8003748:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10b      	bne.n	8003768 <ism330dhcx_mlc_get+0x48>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8003750:	2100      	movs	r1, #0
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff fec6 	bl	80034e4 <ism330dhcx_mem_bank_set>
 8003758:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 800375a:	7a3b      	ldrb	r3, [r7, #8]
 800375c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003768:	68fb      	ldr	r3, [r7, #12]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800377e:	2102      	movs	r1, #2
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff feaf 	bl	80034e4 <ism330dhcx_mem_bank_set>
 8003786:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d107      	bne.n	800379e <ism330dhcx_mlc_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 800378e:	f107 0208 	add.w	r2, r7, #8
 8003792:	2301      	movs	r3, #1
 8003794:	2160      	movs	r1, #96	; 0x60
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff f912 	bl	80029c0 <ism330dhcx_read_reg>
 800379c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d12a      	bne.n	80037fa <ism330dhcx_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 80037a4:	7a3b      	ldrb	r3, [r7, #8]
 80037a6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d81b      	bhi.n	80037e8 <ism330dhcx_mlc_data_rate_get+0x74>
 80037b0:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <ism330dhcx_mlc_data_rate_get+0x44>)
 80037b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b6:	bf00      	nop
 80037b8:	080037c9 	.word	0x080037c9
 80037bc:	080037d1 	.word	0x080037d1
 80037c0:	080037d9 	.word	0x080037d9
 80037c4:	080037e1 	.word	0x080037e1
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
        break;
 80037ce:	e00f      	b.n	80037f0 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
        break;
 80037d6:	e00b      	b.n	80037f0 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2202      	movs	r2, #2
 80037dc:	701a      	strb	r2, [r3, #0]
        break;
 80037de:	e007      	b.n	80037f0 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2203      	movs	r2, #3
 80037e4:	701a      	strb	r2, [r3, #0]
        break;
 80037e6:	e003      	b.n	80037f0 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2200      	movs	r2, #0
 80037ec:	701a      	strb	r2, [r3, #0]
        break;
 80037ee:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80037f0:	2100      	movs	r1, #0
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff fe76 	bl	80034e4 <ism330dhcx_mem_bank_set>
 80037f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80037fa:	68fb      	ldr	r3, [r7, #12]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_Init+0x4c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a10      	ldr	r2, [pc, #64]	; (8003850 <HAL_Init+0x4c>)
 800380e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003814:	2003      	movs	r0, #3
 8003816:	f000 f96d 	bl	8003af4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800381a:	f002 fb35 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 800381e:	4602      	mov	r2, r0
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <HAL_Init+0x50>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	490b      	ldr	r1, [pc, #44]	; (8003858 <HAL_Init+0x54>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
 8003830:	4a0a      	ldr	r2, [pc, #40]	; (800385c <HAL_Init+0x58>)
 8003832:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003834:	200f      	movs	r0, #15
 8003836:	f000 f813 	bl	8003860 <HAL_InitTick>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e002      	b.n	800384a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003844:	f7fd fc3c 	bl	80010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40022000 	.word	0x40022000
 8003854:	46020c00 	.word	0x46020c00
 8003858:	0800bbb4 	.word	0x0800bbb4
 800385c:	20000000 	.word	0x20000000

08003860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003868:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <HAL_InitTick+0x60>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e021      	b.n	80038b8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003874:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <HAL_InitTick+0x64>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <HAL_InitTick+0x60>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	4619      	mov	r1, r3
 800387e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003882:	fbb3 f3f1 	udiv	r3, r3, r1
 8003886:	fbb2 f3f3 	udiv	r3, r2, r3
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f965 	bl	8003b5a <HAL_SYSTICK_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e00e      	b.n	80038b8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b0f      	cmp	r3, #15
 800389e:	d80a      	bhi.n	80038b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038a0:	2200      	movs	r2, #0
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	f04f 30ff 	mov.w	r0, #4294967295
 80038a8:	f000 f92f 	bl	8003b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038ac:	4a06      	ldr	r2, [pc, #24]	; (80038c8 <HAL_InitTick+0x68>)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e000      	b.n	80038b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000074 	.word	0x20000074
 80038c4:	20000000 	.word	0x20000000
 80038c8:	20000070 	.word	0x20000070

080038cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038d0:	4b06      	ldr	r3, [pc, #24]	; (80038ec <HAL_IncTick+0x20>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_IncTick+0x24>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4413      	add	r3, r2
 80038dc:	4a04      	ldr	r2, [pc, #16]	; (80038f0 <HAL_IncTick+0x24>)
 80038de:	6013      	str	r3, [r2, #0]
}
 80038e0:	bf00      	nop
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000074 	.word	0x20000074
 80038f0:	20000368 	.word	0x20000368

080038f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  return uwTick;
 80038f8:	4b03      	ldr	r3, [pc, #12]	; (8003908 <HAL_GetTick+0x14>)
 80038fa:	681b      	ldr	r3, [r3, #0]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	20000368 	.word	0x20000368

0800390c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003914:	f7ff ffee 	bl	80038f4 <HAL_GetTick>
 8003918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d005      	beq.n	8003932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003926:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <HAL_Delay+0x44>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4413      	add	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003932:	bf00      	nop
 8003934:	f7ff ffde 	bl	80038f4 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	429a      	cmp	r2, r3
 8003942:	d8f7      	bhi.n	8003934 <HAL_Delay+0x28>
  {
  }
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000074 	.word	0x20000074

08003954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003964:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <__NVIC_SetPriorityGrouping+0x44>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003970:	4013      	ands	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800397c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003986:	4a04      	ldr	r2, [pc, #16]	; (8003998 <__NVIC_SetPriorityGrouping+0x44>)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	60d3      	str	r3, [r2, #12]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <__NVIC_GetPriorityGrouping+0x18>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	f003 0307 	and.w	r3, r3, #7
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	db0b      	blt.n	80039e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	f003 021f 	and.w	r2, r3, #31
 80039d0:	4907      	ldr	r1, [pc, #28]	; (80039f0 <__NVIC_EnableIRQ+0x38>)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	2001      	movs	r0, #1
 80039da:	fa00 f202 	lsl.w	r2, r0, r2
 80039de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e000e100 	.word	0xe000e100

080039f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	6039      	str	r1, [r7, #0]
 80039fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	db0a      	blt.n	8003a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	490c      	ldr	r1, [pc, #48]	; (8003a40 <__NVIC_SetPriority+0x4c>)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	0112      	lsls	r2, r2, #4
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	440b      	add	r3, r1
 8003a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a1c:	e00a      	b.n	8003a34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4908      	ldr	r1, [pc, #32]	; (8003a44 <__NVIC_SetPriority+0x50>)
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	3b04      	subs	r3, #4
 8003a2c:	0112      	lsls	r2, r2, #4
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	440b      	add	r3, r1
 8003a32:	761a      	strb	r2, [r3, #24]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	e000e100 	.word	0xe000e100
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b089      	sub	sp, #36	; 0x24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f1c3 0307 	rsb	r3, r3, #7
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	bf28      	it	cs
 8003a66:	2304      	movcs	r3, #4
 8003a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	2b06      	cmp	r3, #6
 8003a70:	d902      	bls.n	8003a78 <NVIC_EncodePriority+0x30>
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3b03      	subs	r3, #3
 8003a76:	e000      	b.n	8003a7a <NVIC_EncodePriority+0x32>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43da      	mvns	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a90:	f04f 31ff 	mov.w	r1, #4294967295
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9a:	43d9      	mvns	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa0:	4313      	orrs	r3, r2
         );
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3724      	adds	r7, #36	; 0x24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ac0:	d301      	bcc.n	8003ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e00f      	b.n	8003ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <SysTick_Config+0x40>)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ace:	210f      	movs	r1, #15
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	f7ff ff8e 	bl	80039f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ad8:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <SysTick_Config+0x40>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ade:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <SysTick_Config+0x40>)
 8003ae0:	2207      	movs	r2, #7
 8003ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	e000e010 	.word	0xe000e010

08003af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff ff29 	bl	8003954 <__NVIC_SetPriorityGrouping>
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b086      	sub	sp, #24
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	4603      	mov	r3, r0
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b18:	f7ff ff40 	bl	800399c <__NVIC_GetPriorityGrouping>
 8003b1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	6978      	ldr	r0, [r7, #20]
 8003b24:	f7ff ff90 	bl	8003a48 <NVIC_EncodePriority>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff5f 	bl	80039f4 <__NVIC_SetPriority>
}
 8003b36:	bf00      	nop
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	4603      	mov	r3, r0
 8003b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ff33 	bl	80039b8 <__NVIC_EnableIRQ>
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff ffa4 	bl	8003ab0 <SysTick_Config>
 8003b68:	4603      	mov	r3, r0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8003b72:	b480      	push	{r7}
 8003b74:	b087      	sub	sp, #28
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	607a      	str	r2, [r7, #4]
 8003b7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003b84:	7afb      	ldrb	r3, [r7, #11]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d011      	beq.n	8003bae <HAL_EXTI_RegisterCallback+0x3c>
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	dc13      	bgt.n	8003bb6 <HAL_EXTI_RegisterCallback+0x44>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <HAL_EXTI_RegisterCallback+0x26>
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d007      	beq.n	8003ba6 <HAL_EXTI_RegisterCallback+0x34>
 8003b96:	e00e      	b.n	8003bb6 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
      break;
 8003ba4:	e00a      	b.n	8003bbc <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	605a      	str	r2, [r3, #4]
      break;
 8003bac:	e006      	b.n	8003bbc <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
      break;
 8003bb4:	e002      	b.n	8003bbc <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bba:	bf00      	nop
  }

  return status;
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e003      	b.n	8003be6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003be4:	2300      	movs	r3, #0
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b089      	sub	sp, #36	; 0x24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003c06:	e1ba      	b.n	8003f7e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	4013      	ands	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 81aa 	beq.w	8003f78 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a55      	ldr	r2, [pc, #340]	; (8003d7c <HAL_GPIO_Init+0x188>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d15d      	bne.n	8003ce8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003c32:	2201      	movs	r2, #1
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 0201 	and.w	r2, r3, #1
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003c5c:	4a48      	ldr	r2, [pc, #288]	; (8003d80 <HAL_GPIO_Init+0x18c>)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c64:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003c66:	4a46      	ldr	r2, [pc, #280]	; (8003d80 <HAL_GPIO_Init+0x18c>)
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	08da      	lsrs	r2, r3, #3
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	3208      	adds	r2, #8
 8003c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c7e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	220f      	movs	r2, #15
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	4013      	ands	r3, r2
 8003c94:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	220b      	movs	r2, #11
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	08da      	lsrs	r2, r3, #3
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	3208      	adds	r2, #8
 8003cb2:	69f9      	ldr	r1, [r7, #28]
 8003cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e067      	b.n	8003db8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d003      	beq.n	8003cf8 <HAL_GPIO_Init+0x104>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b12      	cmp	r3, #18
 8003cf6:	d145      	bne.n	8003d84 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	08da      	lsrs	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3208      	adds	r2, #8
 8003d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d04:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	220f      	movs	r2, #15
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	43db      	mvns	r3, r3
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f003 020f 	and.w	r2, r3, #15
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	08da      	lsrs	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3208      	adds	r2, #8
 8003d3e:	69f9      	ldr	r1, [r7, #28]
 8003d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	2203      	movs	r2, #3
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 0203 	and.w	r2, r3, #3
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	e01e      	b.n	8003db8 <HAL_GPIO_Init+0x1c4>
 8003d7a:	bf00      	nop
 8003d7c:	46020000 	.word	0x46020000
 8003d80:	0800bc20 	.word	0x0800bc20
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	2203      	movs	r2, #3
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0203 	and.w	r2, r3, #3
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d00b      	beq.n	8003dd8 <HAL_GPIO_Init+0x1e4>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d007      	beq.n	8003dd8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dcc:	2b11      	cmp	r3, #17
 8003dce:	d003      	beq.n	8003dd8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b12      	cmp	r3, #18
 8003dd6:	d130      	bne.n	8003e3a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	2203      	movs	r2, #3
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	43db      	mvns	r3, r3
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	4013      	ands	r3, r2
 8003dee:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003e0e:	2201      	movs	r2, #1
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	091b      	lsrs	r3, r3, #4
 8003e24:	f003 0201 	and.w	r2, r3, #1
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d017      	beq.n	8003e72 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	43db      	mvns	r3, r3
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	4013      	ands	r3, r2
 8003e58:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d07c      	beq.n	8003f78 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003e7e:	4a47      	ldr	r2, [pc, #284]	; (8003f9c <HAL_GPIO_Init+0x3a8>)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	089b      	lsrs	r3, r3, #2
 8003e84:	3318      	adds	r3, #24
 8003e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	220f      	movs	r2, #15
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	0a9a      	lsrs	r2, r3, #10
 8003ea6:	4b3e      	ldr	r3, [pc, #248]	; (8003fa0 <HAL_GPIO_Init+0x3ac>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	f002 0203 	and.w	r2, r2, #3
 8003eb0:	00d2      	lsls	r2, r2, #3
 8003eb2:	4093      	lsls	r3, r2
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003eba:	4938      	ldr	r1, [pc, #224]	; (8003f9c <HAL_GPIO_Init+0x3a8>)
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	089b      	lsrs	r3, r3, #2
 8003ec0:	3318      	adds	r3, #24
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8003ec8:	4b34      	ldr	r3, [pc, #208]	; (8003f9c <HAL_GPIO_Init+0x3a8>)
 8003eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ece:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_Init+0x2fa>
        {
          tmp |= iocurrent;
 8003ee6:	69fa      	ldr	r2, [r7, #28]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003eee:	4a2b      	ldr	r2, [pc, #172]	; (8003f9c <HAL_GPIO_Init+0x3a8>)
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        tmp = EXTI->EMR1;
 8003ef6:	4b29      	ldr	r3, [pc, #164]	; (8003f9c <HAL_GPIO_Init+0x3a8>)
 8003ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_GPIO_Init+0x328>
        {
          tmp |= iocurrent;
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003f1c:	4a1f      	ldr	r2, [pc, #124]	; (8003f9c <HAL_GPIO_Init+0x3a8>)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <HAL_GPIO_Init+0x3a8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_GPIO_Init+0x354>
        {
          tmp |= iocurrent;
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003f48:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <HAL_GPIO_Init+0x3a8>)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003f4e:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <HAL_GPIO_Init+0x3a8>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	43db      	mvns	r3, r3
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_GPIO_Init+0x37e>
        {
          tmp |= iocurrent;
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003f72:	4a0a      	ldr	r2, [pc, #40]	; (8003f9c <HAL_GPIO_Init+0x3a8>)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	6053      	str	r3, [r2, #4]
      }
    }
    position++;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f47f ae3d 	bne.w	8003c08 <HAL_GPIO_Init+0x14>
  }
}
 8003f8e:	bf00      	nop
 8003f90:	bf00      	nop
 8003f92:	3724      	adds	r7, #36	; 0x24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	46022000 	.word	0x46022000
 8003fa0:	002f7f7f 	.word	0x002f7f7f

08003fa4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b089      	sub	sp, #36	; 0x24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003fb6:	e0bc      	b.n	8004132 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003fb8:	2201      	movs	r2, #1
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80ad 	beq.w	800412c <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a5e      	ldr	r2, [pc, #376]	; (8004150 <HAL_GPIO_DeInit+0x1ac>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d115      	bne.n	8004006 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8003fda:	4a5e      	ldr	r2, [pc, #376]	; (8004154 <HAL_GPIO_DeInit+0x1b0>)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fe2:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003fe4:	4a5b      	ldr	r2, [pc, #364]	; (8004154 <HAL_GPIO_DeInit+0x1b0>)
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4413      	add	r3, r2
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8003ff0:	4b57      	ldr	r3, [pc, #348]	; (8004150 <HAL_GPIO_DeInit+0x1ac>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	4954      	ldr	r1, [pc, #336]	; (8004150 <HAL_GPIO_DeInit+0x1ac>)
 8004000:	4013      	ands	r3, r2
 8004002:	600b      	str	r3, [r1, #0]
 8004004:	e053      	b.n	80040ae <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8004006:	4a54      	ldr	r2, [pc, #336]	; (8004158 <HAL_GPIO_DeInit+0x1b4>)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	3318      	adds	r3, #24
 800400e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004012:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	220f      	movs	r2, #15
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4013      	ands	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	0a9a      	lsrs	r2, r3, #10
 800402c:	4b4b      	ldr	r3, [pc, #300]	; (800415c <HAL_GPIO_DeInit+0x1b8>)
 800402e:	4013      	ands	r3, r2
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	f002 0203 	and.w	r2, r2, #3
 8004036:	00d2      	lsls	r2, r2, #3
 8004038:	4093      	lsls	r3, r2
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	429a      	cmp	r2, r3
 800403e:	d136      	bne.n	80040ae <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8004040:	4b45      	ldr	r3, [pc, #276]	; (8004158 <HAL_GPIO_DeInit+0x1b4>)
 8004042:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	43db      	mvns	r3, r3
 800404a:	4943      	ldr	r1, [pc, #268]	; (8004158 <HAL_GPIO_DeInit+0x1b4>)
 800404c:	4013      	ands	r3, r2
 800404e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8004052:	4b41      	ldr	r3, [pc, #260]	; (8004158 <HAL_GPIO_DeInit+0x1b4>)
 8004054:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	43db      	mvns	r3, r3
 800405c:	493e      	ldr	r1, [pc, #248]	; (8004158 <HAL_GPIO_DeInit+0x1b4>)
 800405e:	4013      	ands	r3, r2
 8004060:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8004064:	4b3c      	ldr	r3, [pc, #240]	; (8004158 <HAL_GPIO_DeInit+0x1b4>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	43db      	mvns	r3, r3
 800406c:	493a      	ldr	r1, [pc, #232]	; (8004158 <HAL_GPIO_DeInit+0x1b4>)
 800406e:	4013      	ands	r3, r2
 8004070:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8004072:	4b39      	ldr	r3, [pc, #228]	; (8004158 <HAL_GPIO_DeInit+0x1b4>)
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	43db      	mvns	r3, r3
 800407a:	4937      	ldr	r1, [pc, #220]	; (8004158 <HAL_GPIO_DeInit+0x1b4>)
 800407c:	4013      	ands	r3, r2
 800407e:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	220f      	movs	r2, #15
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8004090:	4a31      	ldr	r2, [pc, #196]	; (8004158 <HAL_GPIO_DeInit+0x1b4>)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	089b      	lsrs	r3, r3, #2
 8004096:	3318      	adds	r3, #24
 8004098:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	43da      	mvns	r2, r3
 80040a0:	482d      	ldr	r0, [pc, #180]	; (8004158 <HAL_GPIO_DeInit+0x1b4>)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	089b      	lsrs	r3, r3, #2
 80040a6:	400a      	ands	r2, r1
 80040a8:	3318      	adds	r3, #24
 80040aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	2103      	movs	r1, #3
 80040b8:	fa01 f303 	lsl.w	r3, r1, r3
 80040bc:	431a      	orrs	r2, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	08da      	lsrs	r2, r3, #3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	3208      	adds	r2, #8
 80040ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	220f      	movs	r2, #15
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	08d2      	lsrs	r2, r2, #3
 80040e2:	4019      	ands	r1, r3
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	3208      	adds	r2, #8
 80040e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	2103      	movs	r1, #3
 80040f6:	fa01 f303 	lsl.w	r3, r1, r3
 80040fa:	43db      	mvns	r3, r3
 80040fc:	401a      	ands	r2, r3
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	2101      	movs	r1, #1
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	fa01 f303 	lsl.w	r3, r1, r3
 800410e:	43db      	mvns	r3, r3
 8004110:	401a      	ands	r2, r3
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	2103      	movs	r1, #3
 8004120:	fa01 f303 	lsl.w	r3, r1, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	401a      	ands	r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	3301      	adds	r3, #1
 8004130:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	fa22 f303 	lsr.w	r3, r2, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	f47f af3c 	bne.w	8003fb8 <HAL_GPIO_DeInit+0x14>
  }
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	3724      	adds	r7, #36	; 0x24
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	46020000 	.word	0x46020000
 8004154:	0800bc20 	.word	0x0800bc20
 8004158:	46022000 	.word	0x46022000
 800415c:	002f7f7f 	.word	0x002f7f7f

08004160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	887b      	ldrh	r3, [r7, #2]
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
 800417c:	e001      	b.n	8004182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e081      	b.n	80042a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f8a8 	bl	800430c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2224      	movs	r2, #36	; 0x24
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0201 	bic.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d107      	bne.n	800420a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004206:	609a      	str	r2, [r3, #8]
 8004208:	e006      	b.n	8004218 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004216:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d104      	bne.n	800422a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004228:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800423c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800424c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	ea42 0103 	orr.w	r1, r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	021a      	lsls	r2, r3, #8
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69d9      	ldr	r1, [r3, #28]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1a      	ldr	r2, [r3, #32]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e021      	b.n	8004304 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0201 	bic.w	r2, r2, #1
 80042d6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f821 	bl	8004320 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	4608      	mov	r0, r1
 800433e:	4611      	mov	r1, r2
 8004340:	461a      	mov	r2, r3
 8004342:	4603      	mov	r3, r0
 8004344:	817b      	strh	r3, [r7, #10]
 8004346:	460b      	mov	r3, r1
 8004348:	813b      	strh	r3, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b20      	cmp	r3, #32
 8004358:	f040 80f9 	bne.w	800454e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_I2C_Mem_Write+0x34>
 8004362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004364:	2b00      	cmp	r3, #0
 8004366:	d105      	bne.n	8004374 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800436e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0ed      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_I2C_Mem_Write+0x4e>
 800437e:	2302      	movs	r3, #2
 8004380:	e0e6      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800438a:	f7ff fab3 	bl	80038f4 <HAL_GetTick>
 800438e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	2319      	movs	r3, #25
 8004396:	2201      	movs	r2, #1
 8004398:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 fadd 	bl	800495c <I2C_WaitOnFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0d1      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2221      	movs	r2, #33	; 0x21
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2240      	movs	r2, #64	; 0x40
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a3a      	ldr	r2, [r7, #32]
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043d4:	88f8      	ldrh	r0, [r7, #6]
 80043d6:	893a      	ldrh	r2, [r7, #8]
 80043d8:	8979      	ldrh	r1, [r7, #10]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	9301      	str	r3, [sp, #4]
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	4603      	mov	r3, r0
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f9ed 	bl	80047c4 <I2C_RequestMemoryWrite>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0a9      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2bff      	cmp	r3, #255	; 0xff
 8004404:	d90e      	bls.n	8004424 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	22ff      	movs	r2, #255	; 0xff
 800440a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004410:	b2da      	uxtb	r2, r3
 8004412:	8979      	ldrh	r1, [r7, #10]
 8004414:	2300      	movs	r3, #0
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fc09 	bl	8004c34 <I2C_TransferConfig>
 8004422:	e00f      	b.n	8004444 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004432:	b2da      	uxtb	r2, r3
 8004434:	8979      	ldrh	r1, [r7, #10]
 8004436:	2300      	movs	r3, #0
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fbf8 	bl	8004c34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fac7 	bl	80049dc <I2C_WaitOnTXISFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e07b      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	781a      	ldrb	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d034      	beq.n	80044fc <HAL_I2C_Mem_Write+0x1c8>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004496:	2b00      	cmp	r3, #0
 8004498:	d130      	bne.n	80044fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a0:	2200      	movs	r2, #0
 80044a2:	2180      	movs	r1, #128	; 0x80
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fa59 	bl	800495c <I2C_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e04d      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2bff      	cmp	r3, #255	; 0xff
 80044bc:	d90e      	bls.n	80044dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	22ff      	movs	r2, #255	; 0xff
 80044c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	8979      	ldrh	r1, [r7, #10]
 80044cc:	2300      	movs	r3, #0
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fbad 	bl	8004c34 <I2C_TransferConfig>
 80044da:	e00f      	b.n	80044fc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	8979      	ldrh	r1, [r7, #10]
 80044ee:	2300      	movs	r3, #0
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fb9c 	bl	8004c34 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d19e      	bne.n	8004444 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 faa6 	bl	8004a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e01a      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2220      	movs	r2, #32
 8004520:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6859      	ldr	r1, [r3, #4]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <HAL_I2C_Mem_Write+0x224>)
 800452e:	400b      	ands	r3, r1
 8004530:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e000      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800454e:	2302      	movs	r3, #2
  }
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	fe00e800 	.word	0xfe00e800

0800455c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af02      	add	r7, sp, #8
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	4608      	mov	r0, r1
 8004566:	4611      	mov	r1, r2
 8004568:	461a      	mov	r2, r3
 800456a:	4603      	mov	r3, r0
 800456c:	817b      	strh	r3, [r7, #10]
 800456e:	460b      	mov	r3, r1
 8004570:	813b      	strh	r3, [r7, #8]
 8004572:	4613      	mov	r3, r2
 8004574:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b20      	cmp	r3, #32
 8004580:	f040 80fd 	bne.w	800477e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_I2C_Mem_Read+0x34>
 800458a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800458c:	2b00      	cmp	r3, #0
 800458e:	d105      	bne.n	800459c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004596:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0f1      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_I2C_Mem_Read+0x4e>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e0ea      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045b2:	f7ff f99f 	bl	80038f4 <HAL_GetTick>
 80045b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	2319      	movs	r3, #25
 80045be:	2201      	movs	r2, #1
 80045c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f9c9 	bl	800495c <I2C_WaitOnFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0d5      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2222      	movs	r2, #34	; 0x22
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2240      	movs	r2, #64	; 0x40
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a3a      	ldr	r2, [r7, #32]
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045fc:	88f8      	ldrh	r0, [r7, #6]
 80045fe:	893a      	ldrh	r2, [r7, #8]
 8004600:	8979      	ldrh	r1, [r7, #10]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	4603      	mov	r3, r0
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f92d 	bl	800486c <I2C_RequestMemoryRead>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0ad      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	2bff      	cmp	r3, #255	; 0xff
 800462c:	d90e      	bls.n	800464c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	22ff      	movs	r2, #255	; 0xff
 8004632:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004638:	b2da      	uxtb	r2, r3
 800463a:	8979      	ldrh	r1, [r7, #10]
 800463c:	4b52      	ldr	r3, [pc, #328]	; (8004788 <HAL_I2C_Mem_Read+0x22c>)
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 faf5 	bl	8004c34 <I2C_TransferConfig>
 800464a:	e00f      	b.n	800466c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465a:	b2da      	uxtb	r2, r3
 800465c:	8979      	ldrh	r1, [r7, #10]
 800465e:	4b4a      	ldr	r3, [pc, #296]	; (8004788 <HAL_I2C_Mem_Read+0x22c>)
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fae4 	bl	8004c34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004672:	2200      	movs	r2, #0
 8004674:	2104      	movs	r1, #4
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f970 	bl	800495c <I2C_WaitOnFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e07c      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d034      	beq.n	800472c <HAL_I2C_Mem_Read+0x1d0>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d130      	bne.n	800472c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	2200      	movs	r2, #0
 80046d2:	2180      	movs	r1, #128	; 0x80
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f941 	bl	800495c <I2C_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e04d      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2bff      	cmp	r3, #255	; 0xff
 80046ec:	d90e      	bls.n	800470c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	22ff      	movs	r2, #255	; 0xff
 80046f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	8979      	ldrh	r1, [r7, #10]
 80046fc:	2300      	movs	r3, #0
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fa95 	bl	8004c34 <I2C_TransferConfig>
 800470a:	e00f      	b.n	800472c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471a:	b2da      	uxtb	r2, r3
 800471c:	8979      	ldrh	r1, [r7, #10]
 800471e:	2300      	movs	r3, #0
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 fa84 	bl	8004c34 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d19a      	bne.n	800466c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f98e 	bl	8004a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e01a      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2220      	movs	r2, #32
 8004750:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6859      	ldr	r1, [r3, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <HAL_I2C_Mem_Read+0x230>)
 800475e:	400b      	ands	r3, r1
 8004760:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e000      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800477e:	2302      	movs	r3, #2
  }
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	80002400 	.word	0x80002400
 800478c:	fe00e800 	.word	0xfe00e800

08004790 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800479e:	b2db      	uxtb	r3, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	4608      	mov	r0, r1
 80047ce:	4611      	mov	r1, r2
 80047d0:	461a      	mov	r2, r3
 80047d2:	4603      	mov	r3, r0
 80047d4:	817b      	strh	r3, [r7, #10]
 80047d6:	460b      	mov	r3, r1
 80047d8:	813b      	strh	r3, [r7, #8]
 80047da:	4613      	mov	r3, r2
 80047dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	8979      	ldrh	r1, [r7, #10]
 80047e4:	4b20      	ldr	r3, [pc, #128]	; (8004868 <I2C_RequestMemoryWrite+0xa4>)
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fa21 	bl	8004c34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	69b9      	ldr	r1, [r7, #24]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f8f0 	bl	80049dc <I2C_WaitOnTXISFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e02c      	b.n	8004860 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004806:	88fb      	ldrh	r3, [r7, #6]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d105      	bne.n	8004818 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800480c:	893b      	ldrh	r3, [r7, #8]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	629a      	str	r2, [r3, #40]	; 0x28
 8004816:	e015      	b.n	8004844 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004818:	893b      	ldrh	r3, [r7, #8]
 800481a:	0a1b      	lsrs	r3, r3, #8
 800481c:	b29b      	uxth	r3, r3
 800481e:	b2da      	uxtb	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	69b9      	ldr	r1, [r7, #24]
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f8d6 	bl	80049dc <I2C_WaitOnTXISFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e012      	b.n	8004860 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800483a:	893b      	ldrh	r3, [r7, #8]
 800483c:	b2da      	uxtb	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	2200      	movs	r2, #0
 800484c:	2180      	movs	r1, #128	; 0x80
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 f884 	bl	800495c <I2C_WaitOnFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	80002000 	.word	0x80002000

0800486c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	4608      	mov	r0, r1
 8004876:	4611      	mov	r1, r2
 8004878:	461a      	mov	r2, r3
 800487a:	4603      	mov	r3, r0
 800487c:	817b      	strh	r3, [r7, #10]
 800487e:	460b      	mov	r3, r1
 8004880:	813b      	strh	r3, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	b2da      	uxtb	r2, r3
 800488a:	8979      	ldrh	r1, [r7, #10]
 800488c:	4b20      	ldr	r3, [pc, #128]	; (8004910 <I2C_RequestMemoryRead+0xa4>)
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	2300      	movs	r3, #0
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 f9ce 	bl	8004c34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	69b9      	ldr	r1, [r7, #24]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f89d 	bl	80049dc <I2C_WaitOnTXISFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e02c      	b.n	8004906 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d105      	bne.n	80048be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048b2:	893b      	ldrh	r3, [r7, #8]
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	629a      	str	r2, [r3, #40]	; 0x28
 80048bc:	e015      	b.n	80048ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048be:	893b      	ldrh	r3, [r7, #8]
 80048c0:	0a1b      	lsrs	r3, r3, #8
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	69b9      	ldr	r1, [r7, #24]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f883 	bl	80049dc <I2C_WaitOnTXISFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e012      	b.n	8004906 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048e0:	893b      	ldrh	r3, [r7, #8]
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	2200      	movs	r2, #0
 80048f2:	2140      	movs	r1, #64	; 0x40
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f831 	bl	800495c <I2C_WaitOnFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	80002000 	.word	0x80002000

08004914 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b02      	cmp	r3, #2
 8004928:	d103      	bne.n	8004932 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2200      	movs	r2, #0
 8004930:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b01      	cmp	r3, #1
 800493e:	d007      	beq.n	8004950 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	619a      	str	r2, [r3, #24]
  }
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800496c:	e022      	b.n	80049b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d01e      	beq.n	80049b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004976:	f7fe ffbd 	bl	80038f4 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d302      	bcc.n	800498c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d113      	bne.n	80049b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004990:	f043 0220 	orr.w	r2, r3, #32
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e00f      	b.n	80049d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4013      	ands	r3, r2
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	461a      	mov	r2, r3
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d0cd      	beq.n	800496e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049e8:	e02c      	b.n	8004a44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f870 	bl	8004ad4 <I2C_IsErrorOccurred>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e02a      	b.n	8004a54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d01e      	beq.n	8004a44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a06:	f7fe ff75 	bl	80038f4 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d302      	bcc.n	8004a1c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d113      	bne.n	8004a44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	f043 0220 	orr.w	r2, r3, #32
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e007      	b.n	8004a54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d1cb      	bne.n	80049ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a68:	e028      	b.n	8004abc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f830 	bl	8004ad4 <I2C_IsErrorOccurred>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e026      	b.n	8004acc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7e:	f7fe ff39 	bl	80038f4 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d302      	bcc.n	8004a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d113      	bne.n	8004abc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a98:	f043 0220 	orr.w	r2, r3, #32
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e007      	b.n	8004acc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d1cf      	bne.n	8004a6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f003 0310 	and.w	r3, r3, #16
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d040      	beq.n	8004b7c <I2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b08:	d01d      	beq.n	8004b46 <I2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b18:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b1a:	e014      	b.n	8004b46 <I2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d010      	beq.n	8004b46 <I2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b24:	f7fe fee6 	bl	80038f4 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d302      	bcc.n	8004b3a <I2C_IsErrorOccurred+0x66>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d105      	bne.n	8004b46 <I2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	f043 0320 	orr.w	r3, r3, #32
 8004b40:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d002      	beq.n	8004b5a <I2C_IsErrorOccurred+0x86>
 8004b54:	7ffb      	ldrb	r3, [r7, #31]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0e0      	beq.n	8004b1c <I2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b5a:	7ffb      	ldrb	r3, [r7, #31]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <I2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2220      	movs	r2, #32
 8004b66:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2210      	movs	r2, #16
 8004b6e:	61da      	str	r2, [r3, #28]

    error_code |= HAL_I2C_ERROR_AF;
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f043 0304 	orr.w	r3, r3, #4
 8004b76:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	617b      	str	r3, [r7, #20]

  /* Then verify if an additionnal errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <I2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <I2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	f043 0308 	orr.w	r3, r3, #8
 8004bb4:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <I2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	f043 0302 	orr.w	r3, r3, #2
 8004bd4:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 8004be4:	7ffb      	ldrb	r3, [r7, #31]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01c      	beq.n	8004c24 <I2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff fe92 	bl	8004914 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6859      	ldr	r1, [r3, #4]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <I2C_IsErrorOccurred+0x15c>)
 8004bfc:	400b      	ands	r3, r1
 8004bfe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004c24:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	fe00e800 	.word	0xfe00e800

08004c34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	607b      	str	r3, [r7, #4]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	817b      	strh	r3, [r7, #10]
 8004c42:	4613      	mov	r3, r2
 8004c44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	0d5b      	lsrs	r3, r3, #21
 8004c50:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004c54:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <I2C_TransferConfig+0x58>)
 8004c56:	430b      	orrs	r3, r1
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	ea02 0103 	and.w	r1, r2, r3
 8004c5e:	897b      	ldrh	r3, [r7, #10]
 8004c60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c64:	7a7b      	ldrb	r3, [r7, #9]
 8004c66:	041b      	lsls	r3, r3, #16
 8004c68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	431a      	orrs	r2, r3
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	431a      	orrs	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	605a      	str	r2, [r3, #4]
                                    (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                                    I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	03ff63ff 	.word	0x03ff63ff

08004c90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d138      	bne.n	8004d18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e032      	b.n	8004d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2224      	movs	r2, #36	; 0x24
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0201 	bic.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ce2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6819      	ldr	r1, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	e000      	b.n	8004d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d18:	2302      	movs	r3, #2
  }
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d139      	bne.n	8004db0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e033      	b.n	8004db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2224      	movs	r2, #36	; 0x24
 8004d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	e000      	b.n	8004db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004db0:	2302      	movs	r3, #2
  }
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004dc8:	4b34      	ldr	r3, [pc, #208]	; (8004e9c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dd0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d101      	bne.n	8004dde <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e057      	b.n	8004e8e <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de4:	d90a      	bls.n	8004dfc <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004de6:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	4a2a      	ldr	r2, [pc, #168]	; (8004e9c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004df8:	60d3      	str	r3, [r2, #12]
 8004dfa:	e007      	b.n	8004e0c <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004dfc:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e04:	4925      	ldr	r1, [pc, #148]	; (8004e9c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is rised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004e0c:	4b24      	ldr	r3, [pc, #144]	; (8004ea0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a24      	ldr	r2, [pc, #144]	; (8004ea4 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	099b      	lsrs	r3, r3, #6
 8004e18:	2232      	movs	r2, #50	; 0x32
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	4a21      	ldr	r2, [pc, #132]	; (8004ea4 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	099b      	lsrs	r3, r3, #6
 8004e26:	3301      	adds	r3, #1
 8004e28:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004e2a:	e002      	b.n	8004e32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004e32:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d102      	bne.n	8004e44 <HAL_PWREx_ControlVoltageScaling+0x84>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f3      	bne.n	8004e2c <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d01b      	beq.n	8004e82 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is rised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004e4a:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a15      	ldr	r2, [pc, #84]	; (8004ea4 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	099b      	lsrs	r3, r3, #6
 8004e56:	2232      	movs	r2, #50	; 0x32
 8004e58:	fb02 f303 	mul.w	r3, r2, r3
 8004e5c:	4a11      	ldr	r2, [pc, #68]	; (8004ea4 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	099b      	lsrs	r3, r3, #6
 8004e64:	3301      	adds	r3, #1
 8004e66:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004e68:	e002      	b.n	8004e70 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004e70:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d102      	bne.n	8004e82 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f3      	bne.n	8004e6a <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e000      	b.n	8004e8e <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	46020800 	.word	0x46020800
 8004ea0:	20000000 	.word	0x20000000
 8004ea4:	10624dd3 	.word	0x10624dd3

08004ea8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004eac:	4b04      	ldr	r3, [pc, #16]	; (8004ec0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	46020800 	.word	0x46020800

08004ec4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004ec8:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004ed4:	bf00      	nop
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	46020800 	.word	0x46020800

08004ee4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08c      	sub	sp, #48	; 0x30
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004eec:	2300      	movs	r3, #0
 8004eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f000 be58 	b.w	8005bae <HAL_RCC_OscConfig+0xcca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004efe:	4ba2      	ldr	r3, [pc, #648]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f08:	4b9f      	ldr	r3, [pc, #636]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 816f 	beq.w	80051fe <HAL_RCC_OscConfig+0x31a>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d007      	beq.n	8004f36 <HAL_RCC_OscConfig+0x52>
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	2b0c      	cmp	r3, #12
 8004f2a:	f040 80e1 	bne.w	80050f0 <HAL_RCC_OscConfig+0x20c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	f040 80dd 	bne.w	80050f0 <HAL_RCC_OscConfig+0x20c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f36:	4b94      	ldr	r3, [pc, #592]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d006      	beq.n	8004f50 <HAL_RCC_OscConfig+0x6c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d102      	bne.n	8004f50 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	f000 be2f 	b.w	8005bae <HAL_RCC_OscConfig+0xcca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f54:	4b8c      	ldr	r3, [pc, #560]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <HAL_RCC_OscConfig+0x86>
 8004f60:	4b89      	ldr	r3, [pc, #548]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f68:	e005      	b.n	8004f76 <HAL_RCC_OscConfig+0x92>
 8004f6a:	4b87      	ldr	r3, [pc, #540]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8004f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f70:	041b      	lsls	r3, r3, #16
 8004f72:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d255      	bcs.n	8005026 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	4618      	mov	r0, r3
 8004f86:	f001 f8dd 	bl	8006144 <RCC_SetFlashLatencyFromMSIRange>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	f000 be0c 	b.w	8005bae <HAL_RCC_OscConfig+0xcca>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004f96:	4b7c      	ldr	r3, [pc, #496]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	4a7b      	ldr	r2, [pc, #492]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8004f9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fa0:	6093      	str	r3, [r2, #8]
 8004fa2:	4b79      	ldr	r3, [pc, #484]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	4976      	ldr	r1, [pc, #472]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004fbc:	d309      	bcc.n	8004fd2 <HAL_RCC_OscConfig+0xee>
 8004fbe:	4b72      	ldr	r3, [pc, #456]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f023 021f 	bic.w	r2, r3, #31
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	496f      	ldr	r1, [pc, #444]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60cb      	str	r3, [r1, #12]
 8004fd0:	e07e      	b.n	80050d0 <HAL_RCC_OscConfig+0x1ec>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	da0a      	bge.n	8004ff0 <HAL_RCC_OscConfig+0x10c>
 8004fda:	4b6b      	ldr	r3, [pc, #428]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	015b      	lsls	r3, r3, #5
 8004fe8:	4967      	ldr	r1, [pc, #412]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60cb      	str	r3, [r1, #12]
 8004fee:	e06f      	b.n	80050d0 <HAL_RCC_OscConfig+0x1ec>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff8:	d30a      	bcc.n	8005010 <HAL_RCC_OscConfig+0x12c>
 8004ffa:	4b63      	ldr	r3, [pc, #396]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	029b      	lsls	r3, r3, #10
 8005008:	495f      	ldr	r1, [pc, #380]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 800500a:	4313      	orrs	r3, r2
 800500c:	60cb      	str	r3, [r1, #12]
 800500e:	e05f      	b.n	80050d0 <HAL_RCC_OscConfig+0x1ec>
 8005010:	4b5d      	ldr	r3, [pc, #372]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	03db      	lsls	r3, r3, #15
 800501e:	495a      	ldr	r1, [pc, #360]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8005020:	4313      	orrs	r3, r2
 8005022:	60cb      	str	r3, [r1, #12]
 8005024:	e054      	b.n	80050d0 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005026:	4b58      	ldr	r3, [pc, #352]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	4a57      	ldr	r2, [pc, #348]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 800502c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005030:	6093      	str	r3, [r2, #8]
 8005032:	4b55      	ldr	r3, [pc, #340]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	4952      	ldr	r1, [pc, #328]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8005040:	4313      	orrs	r3, r2
 8005042:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800504c:	d309      	bcc.n	8005062 <HAL_RCC_OscConfig+0x17e>
 800504e:	4b4e      	ldr	r3, [pc, #312]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f023 021f 	bic.w	r2, r3, #31
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	494b      	ldr	r1, [pc, #300]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 800505c:	4313      	orrs	r3, r2
 800505e:	60cb      	str	r3, [r1, #12]
 8005060:	e028      	b.n	80050b4 <HAL_RCC_OscConfig+0x1d0>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	2b00      	cmp	r3, #0
 8005068:	da0a      	bge.n	8005080 <HAL_RCC_OscConfig+0x19c>
 800506a:	4b47      	ldr	r3, [pc, #284]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	015b      	lsls	r3, r3, #5
 8005078:	4943      	ldr	r1, [pc, #268]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 800507a:	4313      	orrs	r3, r2
 800507c:	60cb      	str	r3, [r1, #12]
 800507e:	e019      	b.n	80050b4 <HAL_RCC_OscConfig+0x1d0>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005088:	d30a      	bcc.n	80050a0 <HAL_RCC_OscConfig+0x1bc>
 800508a:	4b3f      	ldr	r3, [pc, #252]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	029b      	lsls	r3, r3, #10
 8005098:	493b      	ldr	r1, [pc, #236]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 800509a:	4313      	orrs	r3, r2
 800509c:	60cb      	str	r3, [r1, #12]
 800509e:	e009      	b.n	80050b4 <HAL_RCC_OscConfig+0x1d0>
 80050a0:	4b39      	ldr	r3, [pc, #228]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	03db      	lsls	r3, r3, #15
 80050ae:	4936      	ldr	r1, [pc, #216]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	4618      	mov	r0, r3
 80050c0:	f001 f840 	bl	8006144 <RCC_SetFlashLatencyFromMSIRange>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	f000 bd6f 	b.w	8005bae <HAL_RCC_OscConfig+0xcca>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80050d0:	f000 ffe2 	bl	8006098 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80050d4:	4b2d      	ldr	r3, [pc, #180]	; (800518c <HAL_RCC_OscConfig+0x2a8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fe fbc1 	bl	8003860 <HAL_InitTick>
 80050de:	4603      	mov	r3, r0
 80050e0:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK)
 80050e2:	7ffb      	ldrb	r3, [r7, #31]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8089 	beq.w	80051fc <HAL_RCC_OscConfig+0x318>
        {
          return status;
 80050ea:	7ffb      	ldrb	r3, [r7, #31]
 80050ec:	f000 bd5f 	b.w	8005bae <HAL_RCC_OscConfig+0xcca>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d066      	beq.n	80051c6 <HAL_RCC_OscConfig+0x2e2>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80050f8:	4b23      	ldr	r3, [pc, #140]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a22      	ldr	r2, [pc, #136]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005104:	f7fe fbf6 	bl	80038f4 <HAL_GetTick>
 8005108:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800510a:	e009      	b.n	8005120 <HAL_RCC_OscConfig+0x23c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800510c:	f7fe fbf2 	bl	80038f4 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d902      	bls.n	8005120 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	f000 bd47 	b.w	8005bae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005120:	4b19      	ldr	r3, [pc, #100]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0ef      	beq.n	800510c <HAL_RCC_OscConfig+0x228>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800512c:	4b16      	ldr	r3, [pc, #88]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	4a15      	ldr	r2, [pc, #84]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8005132:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005136:	6093      	str	r3, [r2, #8]
 8005138:	4b13      	ldr	r3, [pc, #76]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	4910      	ldr	r1, [pc, #64]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8005146:	4313      	orrs	r3, r2
 8005148:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005152:	d309      	bcc.n	8005168 <HAL_RCC_OscConfig+0x284>
 8005154:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f023 021f 	bic.w	r2, r3, #31
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	4909      	ldr	r1, [pc, #36]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8005162:	4313      	orrs	r3, r2
 8005164:	60cb      	str	r3, [r1, #12]
 8005166:	e04a      	b.n	80051fe <HAL_RCC_OscConfig+0x31a>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	2b00      	cmp	r3, #0
 800516e:	da0f      	bge.n	8005190 <HAL_RCC_OscConfig+0x2ac>
 8005170:	4b05      	ldr	r3, [pc, #20]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	015b      	lsls	r3, r3, #5
 800517e:	4902      	ldr	r1, [pc, #8]	; (8005188 <HAL_RCC_OscConfig+0x2a4>)
 8005180:	4313      	orrs	r3, r2
 8005182:	60cb      	str	r3, [r1, #12]
 8005184:	e03b      	b.n	80051fe <HAL_RCC_OscConfig+0x31a>
 8005186:	bf00      	nop
 8005188:	46020c00 	.word	0x46020c00
 800518c:	20000070 	.word	0x20000070
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005198:	d30a      	bcc.n	80051b0 <HAL_RCC_OscConfig+0x2cc>
 800519a:	4b94      	ldr	r3, [pc, #592]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	029b      	lsls	r3, r3, #10
 80051a8:	4990      	ldr	r1, [pc, #576]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60cb      	str	r3, [r1, #12]
 80051ae:	e026      	b.n	80051fe <HAL_RCC_OscConfig+0x31a>
 80051b0:	4b8e      	ldr	r3, [pc, #568]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	03db      	lsls	r3, r3, #15
 80051be:	498b      	ldr	r1, [pc, #556]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60cb      	str	r3, [r1, #12]
 80051c4:	e01b      	b.n	80051fe <HAL_RCC_OscConfig+0x31a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80051c6:	4b89      	ldr	r3, [pc, #548]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a88      	ldr	r2, [pc, #544]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80051cc:	f023 0301 	bic.w	r3, r3, #1
 80051d0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80051d2:	f7fe fb8f 	bl	80038f4 <HAL_GetTick>
 80051d6:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80051d8:	e009      	b.n	80051ee <HAL_RCC_OscConfig+0x30a>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051da:	f7fe fb8b 	bl	80038f4 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d902      	bls.n	80051ee <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	f000 bce0 	b.w	8005bae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80051ee:	4b7f      	ldr	r3, [pc, #508]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1ef      	bne.n	80051da <HAL_RCC_OscConfig+0x2f6>
 80051fa:	e000      	b.n	80051fe <HAL_RCC_OscConfig+0x31a>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 808d 	beq.w	8005326 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	2b08      	cmp	r3, #8
 8005210:	d005      	beq.n	800521e <HAL_RCC_OscConfig+0x33a>
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	2b0c      	cmp	r3, #12
 8005216:	d10f      	bne.n	8005238 <HAL_RCC_OscConfig+0x354>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	2b03      	cmp	r3, #3
 800521c:	d10c      	bne.n	8005238 <HAL_RCC_OscConfig+0x354>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800521e:	4b73      	ldr	r3, [pc, #460]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d07c      	beq.n	8005324 <HAL_RCC_OscConfig+0x440>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d178      	bne.n	8005324 <HAL_RCC_OscConfig+0x440>
      {
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f000 bcbb 	b.w	8005bae <HAL_RCC_OscConfig+0xcca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005240:	d106      	bne.n	8005250 <HAL_RCC_OscConfig+0x36c>
 8005242:	4b6a      	ldr	r3, [pc, #424]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a69      	ldr	r2, [pc, #420]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 8005248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	e03b      	b.n	80052c8 <HAL_RCC_OscConfig+0x3e4>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005258:	d112      	bne.n	8005280 <HAL_RCC_OscConfig+0x39c>
 800525a:	4b64      	ldr	r3, [pc, #400]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a63      	ldr	r2, [pc, #396]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 8005260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	4b61      	ldr	r3, [pc, #388]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a60      	ldr	r2, [pc, #384]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 800526c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	4b5e      	ldr	r3, [pc, #376]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a5d      	ldr	r2, [pc, #372]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 8005278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	e023      	b.n	80052c8 <HAL_RCC_OscConfig+0x3e4>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005288:	d112      	bne.n	80052b0 <HAL_RCC_OscConfig+0x3cc>
 800528a:	4b58      	ldr	r3, [pc, #352]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a57      	ldr	r2, [pc, #348]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 8005290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	4b55      	ldr	r3, [pc, #340]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a54      	ldr	r2, [pc, #336]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 800529c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	4b52      	ldr	r3, [pc, #328]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a51      	ldr	r2, [pc, #324]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80052a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e00b      	b.n	80052c8 <HAL_RCC_OscConfig+0x3e4>
 80052b0:	4b4e      	ldr	r3, [pc, #312]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a4d      	ldr	r2, [pc, #308]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80052b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	4b4b      	ldr	r3, [pc, #300]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a4a      	ldr	r2, [pc, #296]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80052c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d014      	beq.n	80052fa <HAL_RCC_OscConfig+0x416>
      {
        tickstart = HAL_GetTick();
 80052d0:	f7fe fb10 	bl	80038f4 <HAL_GetTick>
 80052d4:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052d6:	e009      	b.n	80052ec <HAL_RCC_OscConfig+0x408>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d8:	f7fe fb0c 	bl	80038f4 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	; 0x64
 80052e4:	d902      	bls.n	80052ec <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	f000 bc61 	b.w	8005bae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052ec:	4b3f      	ldr	r3, [pc, #252]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0ef      	beq.n	80052d8 <HAL_RCC_OscConfig+0x3f4>
 80052f8:	e015      	b.n	8005326 <HAL_RCC_OscConfig+0x442>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80052fa:	f7fe fafb 	bl	80038f4 <HAL_GetTick>
 80052fe:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005300:	e009      	b.n	8005316 <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005302:	f7fe faf7 	bl	80038f4 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b64      	cmp	r3, #100	; 0x64
 800530e:	d902      	bls.n	8005316 <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	f000 bc4c 	b.w	8005bae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005316:	4b35      	ldr	r3, [pc, #212]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1ef      	bne.n	8005302 <HAL_RCC_OscConfig+0x41e>
 8005322:	e000      	b.n	8005326 <HAL_RCC_OscConfig+0x442>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d064      	beq.n	80053fc <HAL_RCC_OscConfig+0x518>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	2b04      	cmp	r3, #4
 8005336:	d005      	beq.n	8005344 <HAL_RCC_OscConfig+0x460>
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	2b0c      	cmp	r3, #12
 800533c:	d11a      	bne.n	8005374 <HAL_RCC_OscConfig+0x490>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	2b02      	cmp	r3, #2
 8005342:	d117      	bne.n	8005374 <HAL_RCC_OscConfig+0x490>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005344:	4b29      	ldr	r3, [pc, #164]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800534c:	2b00      	cmp	r3, #0
 800534e:	d006      	beq.n	800535e <HAL_RCC_OscConfig+0x47a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <HAL_RCC_OscConfig+0x47a>
      {
        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f000 bc28 	b.w	8005bae <HAL_RCC_OscConfig+0xcca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800535e:	4b23      	ldr	r3, [pc, #140]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	041b      	lsls	r3, r3, #16
 800536c:	491f      	ldr	r1, [pc, #124]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 800536e:	4313      	orrs	r3, r2
 8005370:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005372:	e043      	b.n	80053fc <HAL_RCC_OscConfig+0x518>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d024      	beq.n	80053c6 <HAL_RCC_OscConfig+0x4e2>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800537c:	4b1b      	ldr	r3, [pc, #108]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1a      	ldr	r2, [pc, #104]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 8005382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005386:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005388:	f7fe fab4 	bl	80038f4 <HAL_GetTick>
 800538c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800538e:	e009      	b.n	80053a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005390:	f7fe fab0 	bl	80038f4 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d902      	bls.n	80053a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	f000 bc05 	b.w	8005bae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053a4:	4b11      	ldr	r3, [pc, #68]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0ef      	beq.n	8005390 <HAL_RCC_OscConfig+0x4ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80053b0:	4b0e      	ldr	r3, [pc, #56]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	041b      	lsls	r3, r3, #16
 80053be:	490b      	ldr	r1, [pc, #44]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	610b      	str	r3, [r1, #16]
 80053c4:	e01a      	b.n	80053fc <HAL_RCC_OscConfig+0x518>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80053c6:	4b09      	ldr	r3, [pc, #36]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a08      	ldr	r2, [pc, #32]	; (80053ec <HAL_RCC_OscConfig+0x508>)
 80053cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053d0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80053d2:	f7fe fa8f 	bl	80038f4 <HAL_GetTick>
 80053d6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053d8:	e00a      	b.n	80053f0 <HAL_RCC_OscConfig+0x50c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053da:	f7fe fa8b 	bl	80038f4 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d903      	bls.n	80053f0 <HAL_RCC_OscConfig+0x50c>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e3e0      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
 80053ec:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053f0:	4baf      	ldr	r3, [pc, #700]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1ee      	bne.n	80053da <HAL_RCC_OscConfig+0x4f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 80c7 	beq.w	8005598 <HAL_RCC_OscConfig+0x6b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800540a:	2300      	movs	r3, #0
 800540c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005410:	4ba7      	ldr	r3, [pc, #668]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 8005412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d111      	bne.n	8005442 <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800541e:	4ba4      	ldr	r3, [pc, #656]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 8005420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005424:	4aa2      	ldr	r2, [pc, #648]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 8005426:	f043 0304 	orr.w	r3, r3, #4
 800542a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800542e:	4ba0      	ldr	r3, [pc, #640]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 8005430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800543c:	2301      	movs	r3, #1
 800543e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005442:	4b9c      	ldr	r3, [pc, #624]	; (80056b4 <HAL_RCC_OscConfig+0x7d0>)
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d118      	bne.n	8005480 <HAL_RCC_OscConfig+0x59c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800544e:	4b99      	ldr	r3, [pc, #612]	; (80056b4 <HAL_RCC_OscConfig+0x7d0>)
 8005450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005452:	4a98      	ldr	r2, [pc, #608]	; (80056b4 <HAL_RCC_OscConfig+0x7d0>)
 8005454:	f043 0301 	orr.w	r3, r3, #1
 8005458:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800545a:	f7fe fa4b 	bl	80038f4 <HAL_GetTick>
 800545e:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005460:	e008      	b.n	8005474 <HAL_RCC_OscConfig+0x590>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005462:	f7fe fa47 	bl	80038f4 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x590>
        {
          return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e39c      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005474:	4b8f      	ldr	r3, [pc, #572]	; (80056b4 <HAL_RCC_OscConfig+0x7d0>)
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0f0      	beq.n	8005462 <HAL_RCC_OscConfig+0x57e>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d05f      	beq.n	8005548 <HAL_RCC_OscConfig+0x664>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005488:	4b89      	ldr	r3, [pc, #548]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 800548a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800548e:	61bb      	str	r3, [r7, #24]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699a      	ldr	r2, [r3, #24]
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549a:	429a      	cmp	r2, r3
 800549c:	d037      	beq.n	800550e <HAL_RCC_OscConfig+0x62a>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d006      	beq.n	80054b6 <HAL_RCC_OscConfig+0x5d2>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_RCC_OscConfig+0x5d2>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e37b      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01b      	beq.n	80054f8 <HAL_RCC_OscConfig+0x614>
        {
          __HAL_RCC_LSI_DISABLE();
 80054c0:	4b7b      	ldr	r3, [pc, #492]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 80054c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054c6:	4a7a      	ldr	r2, [pc, #488]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 80054c8:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80054cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80054d0:	f7fe fa10 	bl	80038f4 <HAL_GetTick>
 80054d4:	6238      	str	r0, [r7, #32]

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x606>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054d8:	f7fe fa0c 	bl	80038f4 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x606>
            {
              return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e361      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80054ea:	4b71      	ldr	r3, [pc, #452]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 80054ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1ef      	bne.n	80054d8 <HAL_RCC_OscConfig+0x5f4>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80054f8:	4b6d      	ldr	r3, [pc, #436]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 80054fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	496a      	ldr	r1, [pc, #424]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800550e:	4b68      	ldr	r3, [pc, #416]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 8005510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005514:	4a66      	ldr	r2, [pc, #408]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 8005516:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800551a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800551e:	f7fe f9e9 	bl	80038f4 <HAL_GetTick>
 8005522:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x654>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005526:	f7fe f9e5 	bl	80038f4 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x654>
        {
          return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e33a      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005538:	4b5d      	ldr	r3, [pc, #372]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 800553a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800553e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0ef      	beq.n	8005526 <HAL_RCC_OscConfig+0x642>
 8005546:	e01b      	b.n	8005580 <HAL_RCC_OscConfig+0x69c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005548:	4b59      	ldr	r3, [pc, #356]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 800554a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800554e:	4a58      	ldr	r2, [pc, #352]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 8005550:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005554:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005558:	f7fe f9cc 	bl	80038f4 <HAL_GetTick>
 800555c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x68e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005560:	f7fe f9c8 	bl	80038f4 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x68e>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e31d      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005572:	4b4f      	ldr	r3, [pc, #316]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 8005574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1ef      	bne.n	8005560 <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005580:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005584:	2b01      	cmp	r3, #1
 8005586:	d107      	bne.n	8005598 <HAL_RCC_OscConfig+0x6b4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005588:	4b49      	ldr	r3, [pc, #292]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 800558a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800558e:	4a48      	ldr	r2, [pc, #288]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 8005590:	f023 0304 	bic.w	r3, r3, #4
 8005594:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 8112 	beq.w	80057ca <HAL_RCC_OscConfig+0x8e6>
  {
    FlagStatus pwrclkchanged = RESET;
 80055a6:	2300      	movs	r3, #0
 80055a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ac:	4b40      	ldr	r3, [pc, #256]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 80055ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d111      	bne.n	80055de <HAL_RCC_OscConfig+0x6fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ba:	4b3d      	ldr	r3, [pc, #244]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 80055bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c0:	4a3b      	ldr	r2, [pc, #236]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 80055c2:	f043 0304 	orr.w	r3, r3, #4
 80055c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80055ca:	4b39      	ldr	r3, [pc, #228]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 80055cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80055d8:	2301      	movs	r3, #1
 80055da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055de:	4b35      	ldr	r3, [pc, #212]	; (80056b4 <HAL_RCC_OscConfig+0x7d0>)
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d118      	bne.n	800561c <HAL_RCC_OscConfig+0x738>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80055ea:	4b32      	ldr	r3, [pc, #200]	; (80056b4 <HAL_RCC_OscConfig+0x7d0>)
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	4a31      	ldr	r2, [pc, #196]	; (80056b4 <HAL_RCC_OscConfig+0x7d0>)
 80055f0:	f043 0301 	orr.w	r3, r3, #1
 80055f4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055f6:	f7fe f97d 	bl	80038f4 <HAL_GetTick>
 80055fa:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x72c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055fe:	f7fe f979 	bl	80038f4 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x72c>
        {
          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e2ce      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005610:	4b28      	ldr	r3, [pc, #160]	; (80056b4 <HAL_RCC_OscConfig+0x7d0>)
 8005612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f0      	beq.n	80055fe <HAL_RCC_OscConfig+0x71a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01f      	beq.n	8005668 <HAL_RCC_OscConfig+0x784>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	d010      	beq.n	8005656 <HAL_RCC_OscConfig+0x772>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005634:	4b1e      	ldr	r3, [pc, #120]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 8005636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800563a:	4a1d      	ldr	r2, [pc, #116]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 800563c:	f043 0304 	orr.w	r3, r3, #4
 8005640:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005644:	4b1a      	ldr	r3, [pc, #104]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 8005646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800564a:	4a19      	ldr	r2, [pc, #100]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 800564c:	f043 0301 	orr.w	r3, r3, #1
 8005650:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005654:	e018      	b.n	8005688 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005656:	4b16      	ldr	r3, [pc, #88]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 8005658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800565c:	4a14      	ldr	r2, [pc, #80]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 800565e:	f043 0301 	orr.w	r3, r3, #1
 8005662:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005666:	e00f      	b.n	8005688 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005668:	4b11      	ldr	r3, [pc, #68]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 800566a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800566e:	4a10      	ldr	r2, [pc, #64]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005678:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 800567a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800567e:	4a0c      	ldr	r2, [pc, #48]	; (80056b0 <HAL_RCC_OscConfig+0x7cc>)
 8005680:	f023 0304 	bic.w	r3, r3, #4
 8005684:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d058      	beq.n	8005742 <HAL_RCC_OscConfig+0x85e>
    {
      tickstart = HAL_GetTick();
 8005690:	f7fe f930 	bl	80038f4 <HAL_GetTick>
 8005694:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005696:	e00f      	b.n	80056b8 <HAL_RCC_OscConfig+0x7d4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005698:	f7fe f92c 	bl	80038f4 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d906      	bls.n	80056b8 <HAL_RCC_OscConfig+0x7d4>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e27f      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
 80056ae:	bf00      	nop
 80056b0:	46020c00 	.word	0x46020c00
 80056b4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056b8:	4ba4      	ldr	r3, [pc, #656]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 80056ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0e8      	beq.n	8005698 <HAL_RCC_OscConfig+0x7b4>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d01b      	beq.n	800570a <HAL_RCC_OscConfig+0x826>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80056d2:	4b9e      	ldr	r3, [pc, #632]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 80056d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056d8:	4a9c      	ldr	r2, [pc, #624]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 80056da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056e2:	e00a      	b.n	80056fa <HAL_RCC_OscConfig+0x816>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e4:	f7fe f906 	bl	80038f4 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x816>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e259      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056fa:	4b94      	ldr	r3, [pc, #592]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 80056fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0ed      	beq.n	80056e4 <HAL_RCC_OscConfig+0x800>
 8005708:	e053      	b.n	80057b2 <HAL_RCC_OscConfig+0x8ce>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800570a:	4b90      	ldr	r3, [pc, #576]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 800570c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005710:	4a8e      	ldr	r2, [pc, #568]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 8005712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005716:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800571a:	e00a      	b.n	8005732 <HAL_RCC_OscConfig+0x84e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571c:	f7fe f8ea 	bl	80038f4 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	f241 3288 	movw	r2, #5000	; 0x1388
 800572a:	4293      	cmp	r3, r2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x84e>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e23d      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005732:	4b86      	ldr	r3, [pc, #536]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 8005734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1ed      	bne.n	800571c <HAL_RCC_OscConfig+0x838>
 8005740:	e037      	b.n	80057b2 <HAL_RCC_OscConfig+0x8ce>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005742:	f7fe f8d7 	bl	80038f4 <HAL_GetTick>
 8005746:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005748:	e00a      	b.n	8005760 <HAL_RCC_OscConfig+0x87c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574a:	f7fe f8d3 	bl	80038f4 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	f241 3288 	movw	r2, #5000	; 0x1388
 8005758:	4293      	cmp	r3, r2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x87c>
        {
          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e226      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005760:	4b7a      	ldr	r3, [pc, #488]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 8005762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1ed      	bne.n	800574a <HAL_RCC_OscConfig+0x866>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800576e:	4b77      	ldr	r3, [pc, #476]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 8005770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01a      	beq.n	80057b2 <HAL_RCC_OscConfig+0x8ce>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800577c:	4b73      	ldr	r3, [pc, #460]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 800577e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005782:	4a72      	ldr	r2, [pc, #456]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 8005784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005788:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800578c:	e00a      	b.n	80057a4 <HAL_RCC_OscConfig+0x8c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800578e:	f7fe f8b1 	bl	80038f4 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	f241 3288 	movw	r2, #5000	; 0x1388
 800579c:	4293      	cmp	r3, r2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x8c0>
          {
            return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e204      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057a4:	4b69      	ldr	r3, [pc, #420]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 80057a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1ed      	bne.n	800578e <HAL_RCC_OscConfig+0x8aa>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d107      	bne.n	80057ca <HAL_RCC_OscConfig+0x8e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ba:	4b64      	ldr	r3, [pc, #400]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 80057bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057c0:	4a62      	ldr	r2, [pc, #392]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 80057c2:	f023 0304 	bic.w	r3, r3, #4
 80057c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d036      	beq.n	8005844 <HAL_RCC_OscConfig+0x960>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d019      	beq.n	8005812 <HAL_RCC_OscConfig+0x92e>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80057de:	4b5b      	ldr	r3, [pc, #364]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a5a      	ldr	r2, [pc, #360]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 80057e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057e8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80057ea:	f7fe f883 	bl	80038f4 <HAL_GetTick>
 80057ee:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x920>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057f2:	f7fe f87f 	bl	80038f4 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x920>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e1d4      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005804:	4b51      	ldr	r3, [pc, #324]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f0      	beq.n	80057f2 <HAL_RCC_OscConfig+0x90e>
 8005810:	e018      	b.n	8005844 <HAL_RCC_OscConfig+0x960>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005812:	4b4e      	ldr	r3, [pc, #312]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a4d      	ldr	r2, [pc, #308]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 8005818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800581c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800581e:	f7fe f869 	bl	80038f4 <HAL_GetTick>
 8005822:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x954>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005826:	f7fe f865 	bl	80038f4 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x954>
        {
          return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e1ba      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005838:	4b44      	ldr	r3, [pc, #272]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1f0      	bne.n	8005826 <HAL_RCC_OscConfig+0x942>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584c:	2b00      	cmp	r3, #0
 800584e:	d036      	beq.n	80058be <HAL_RCC_OscConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	2b00      	cmp	r3, #0
 8005856:	d019      	beq.n	800588c <HAL_RCC_OscConfig+0x9a8>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005858:	4b3c      	ldr	r3, [pc, #240]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a3b      	ldr	r2, [pc, #236]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 800585e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005862:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005864:	f7fe f846 	bl	80038f4 <HAL_GetTick>
 8005868:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0x99a>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800586c:	f7fe f842 	bl	80038f4 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x99a>
        {
          return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e197      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800587e:	4b33      	ldr	r3, [pc, #204]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0f0      	beq.n	800586c <HAL_RCC_OscConfig+0x988>
 800588a:	e018      	b.n	80058be <HAL_RCC_OscConfig+0x9da>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800588c:	4b2f      	ldr	r3, [pc, #188]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a2e      	ldr	r2, [pc, #184]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 8005892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005896:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005898:	f7fe f82c 	bl	80038f4 <HAL_GetTick>
 800589c:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x9ce>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80058a0:	f7fe f828 	bl	80038f4 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e17d      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80058b2:	4b26      	ldr	r3, [pc, #152]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f0      	bne.n	80058a0 <HAL_RCC_OscConfig+0x9bc>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d07f      	beq.n	80059ca <HAL_RCC_OscConfig+0xae6>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d062      	beq.n	8005998 <HAL_RCC_OscConfig+0xab4>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80058d2:	4b1e      	ldr	r3, [pc, #120]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	4a1d      	ldr	r2, [pc, #116]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 80058d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058dc:	6093      	str	r3, [r2, #8]
 80058de:	4b1b      	ldr	r3, [pc, #108]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	4918      	ldr	r1, [pc, #96]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80058f8:	d309      	bcc.n	800590e <HAL_RCC_OscConfig+0xa2a>
 80058fa:	4b14      	ldr	r3, [pc, #80]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f023 021f 	bic.w	r2, r3, #31
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	4911      	ldr	r1, [pc, #68]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 8005908:	4313      	orrs	r3, r2
 800590a:	60cb      	str	r3, [r1, #12]
 800590c:	e02a      	b.n	8005964 <HAL_RCC_OscConfig+0xa80>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	2b00      	cmp	r3, #0
 8005914:	da0a      	bge.n	800592c <HAL_RCC_OscConfig+0xa48>
 8005916:	4b0d      	ldr	r3, [pc, #52]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	015b      	lsls	r3, r3, #5
 8005924:	4909      	ldr	r1, [pc, #36]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 8005926:	4313      	orrs	r3, r2
 8005928:	60cb      	str	r3, [r1, #12]
 800592a:	e01b      	b.n	8005964 <HAL_RCC_OscConfig+0xa80>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005934:	d30c      	bcc.n	8005950 <HAL_RCC_OscConfig+0xa6c>
 8005936:	4b05      	ldr	r3, [pc, #20]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	029b      	lsls	r3, r3, #10
 8005944:	4901      	ldr	r1, [pc, #4]	; (800594c <HAL_RCC_OscConfig+0xa68>)
 8005946:	4313      	orrs	r3, r2
 8005948:	60cb      	str	r3, [r1, #12]
 800594a:	e00b      	b.n	8005964 <HAL_RCC_OscConfig+0xa80>
 800594c:	46020c00 	.word	0x46020c00
 8005950:	4b99      	ldr	r3, [pc, #612]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	03db      	lsls	r3, r3, #15
 800595e:	4996      	ldr	r1, [pc, #600]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005960:	4313      	orrs	r3, r2
 8005962:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005964:	4b94      	ldr	r3, [pc, #592]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a93      	ldr	r2, [pc, #588]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 800596a:	f043 0310 	orr.w	r3, r3, #16
 800596e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005970:	f7fd ffc0 	bl	80038f4 <HAL_GetTick>
 8005974:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0xaa6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005978:	f7fd ffbc 	bl	80038f4 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0xaa6>
        {
          return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e111      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800598a:	4b8b      	ldr	r3, [pc, #556]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f0      	beq.n	8005978 <HAL_RCC_OscConfig+0xa94>
 8005996:	e018      	b.n	80059ca <HAL_RCC_OscConfig+0xae6>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005998:	4b87      	ldr	r3, [pc, #540]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a86      	ldr	r2, [pc, #536]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 800599e:	f023 0310 	bic.w	r3, r3, #16
 80059a2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80059a4:	f7fd ffa6 	bl	80038f4 <HAL_GetTick>
 80059a8:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0xada>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80059ac:	f7fd ffa2 	bl	80038f4 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0xada>
        {
          return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e0f7      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80059be:	4b7e      	ldr	r3, [pc, #504]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0xac8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 80ec 	beq.w	8005bac <HAL_RCC_OscConfig+0xcc8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059d4:	4b78      	ldr	r3, [pc, #480]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	f003 030c 	and.w	r3, r3, #12
 80059dc:	2b0c      	cmp	r3, #12
 80059de:	f000 80e3 	beq.w	8005ba8 <HAL_RCC_OscConfig+0xcc4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	f040 80be 	bne.w	8005b68 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80059ec:	4b72      	ldr	r3, [pc, #456]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a71      	ldr	r2, [pc, #452]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 80059f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059f6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80059f8:	f7fd ff7c 	bl	80038f4 <HAL_GetTick>
 80059fc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0xb2e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a00:	f7fd ff78 	bl	80038f4 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0xb2e>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e0cd      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a12:	4b69      	ldr	r3, [pc, #420]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f0      	bne.n	8005a00 <HAL_RCC_OscConfig+0xb1c>
          }
        }

        /* Enable PWR CLK */
        __HAL_RCC_PWR_CLK_ENABLE();
 8005a1e:	4b66      	ldr	r3, [pc, #408]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a24:	4a64      	ldr	r2, [pc, #400]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005a26:	f043 0304 	orr.w	r3, r3, #4
 8005a2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005a2e:	4b62      	ldr	r3, [pc, #392]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	68fb      	ldr	r3, [r7, #12]

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005a3c:	4b5f      	ldr	r3, [pc, #380]	; (8005bbc <HAL_RCC_OscConfig+0xcd8>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a48:	d102      	bne.n	8005a50 <HAL_RCC_OscConfig+0xb6c>
        {
          pwrboosten = SET;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005a50:	4b5a      	ldr	r3, [pc, #360]	; (8005bbc <HAL_RCC_OscConfig+0xcd8>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	4a59      	ldr	r2, [pc, #356]	; (8005bbc <HAL_RCC_OscConfig+0xcd8>)
 8005a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a5a:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005a5c:	4b56      	ldr	r3, [pc, #344]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a64:	f023 0303 	bic.w	r3, r3, #3
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a70:	3a01      	subs	r2, #1
 8005a72:	0212      	lsls	r2, r2, #8
 8005a74:	4311      	orrs	r1, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	494e      	ldr	r1, [pc, #312]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	628b      	str	r3, [r1, #40]	; 0x28
 8005a82:	4b4d      	ldr	r3, [pc, #308]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a86:	4b4e      	ldr	r3, [pc, #312]	; (8005bc0 <HAL_RCC_OscConfig+0xcdc>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a8e:	3a01      	subs	r2, #1
 8005a90:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005a98:	3a01      	subs	r2, #1
 8005a9a:	0252      	lsls	r2, r2, #9
 8005a9c:	b292      	uxth	r2, r2
 8005a9e:	4311      	orrs	r1, r2
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005aa4:	3a01      	subs	r2, #1
 8005aa6:	0412      	lsls	r2, r2, #16
 8005aa8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005aac:	4311      	orrs	r1, r2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005ab2:	3a01      	subs	r2, #1
 8005ab4:	0612      	lsls	r2, r2, #24
 8005ab6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005aba:	430a      	orrs	r2, r1
 8005abc:	493e      	ldr	r1, [pc, #248]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005ac2:	4b3d      	ldr	r3, [pc, #244]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac6:	4a3c      	ldr	r2, [pc, #240]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005ac8:	f023 0310 	bic.w	r3, r3, #16
 8005acc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005ace:	4b3a      	ldr	r3, [pc, #232]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ad6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005ade:	00d2      	lsls	r2, r2, #3
 8005ae0:	4935      	ldr	r1, [pc, #212]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005ae6:	4b34      	ldr	r3, [pc, #208]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	4a33      	ldr	r2, [pc, #204]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005aec:	f043 0310 	orr.w	r3, r3, #16
 8005af0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005af2:	4b31      	ldr	r3, [pc, #196]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	f023 020c 	bic.w	r2, r3, #12
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afe:	492e      	ldr	r1, [pc, #184]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d105      	bne.n	8005b18 <HAL_RCC_OscConfig+0xc34>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005b0c:	4b2b      	ldr	r3, [pc, #172]	; (8005bbc <HAL_RCC_OscConfig+0xcd8>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4a2a      	ldr	r2, [pc, #168]	; (8005bbc <HAL_RCC_OscConfig+0xcd8>)
 8005b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b16:	60d3      	str	r3, [r2, #12]
        }

        /*Disable PWR clk */
        __HAL_RCC_PWR_CLK_DISABLE();
 8005b18:	4b27      	ldr	r3, [pc, #156]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b1e:	4a26      	ldr	r2, [pc, #152]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005b20:	f023 0304 	bic.w	r3, r3, #4
 8005b24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b28:	4b23      	ldr	r3, [pc, #140]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2c:	4a22      	ldr	r2, [pc, #136]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005b2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b32:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005b34:	4b20      	ldr	r3, [pc, #128]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a1f      	ldr	r2, [pc, #124]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b3e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b40:	f7fd fed8 	bl	80038f4 <HAL_GetTick>
 8005b44:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b46:	e008      	b.n	8005b5a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b48:	f7fd fed4 	bl	80038f4 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e029      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b5a:	4b17      	ldr	r3, [pc, #92]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0f0      	beq.n	8005b48 <HAL_RCC_OscConfig+0xc64>
 8005b66:	e021      	b.n	8005bac <HAL_RCC_OscConfig+0xcc8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005b68:	4b13      	ldr	r3, [pc, #76]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a12      	ldr	r2, [pc, #72]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b72:	6013      	str	r3, [r2, #0]

        /* Disable main PLL outputs to save power if no PLLs on */
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
 8005b74:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	4a0f      	ldr	r2, [pc, #60]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005b7a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005b7e:	6293      	str	r3, [r2, #40]	; 0x28

        tickstart = HAL_GetTick();
 8005b80:	f7fd feb8 	bl	80038f4 <HAL_GetTick>
 8005b84:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0xcb6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b88:	f7fd feb4 	bl	80038f4 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0xcb6>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e009      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005b9a:	4b07      	ldr	r3, [pc, #28]	; (8005bb8 <HAL_RCC_OscConfig+0xcd4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0xca4>
 8005ba6:	e001      	b.n	8005bac <HAL_RCC_OscConfig+0xcc8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <HAL_RCC_OscConfig+0xcca>
    }
  }
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3730      	adds	r7, #48	; 0x30
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	46020c00 	.word	0x46020c00
 8005bbc:	46020800 	.word	0x46020800
 8005bc0:	80800000 	.word	0x80800000

08005bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e146      	b.n	8005e66 <HAL_RCC_ClockConfig+0x2a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bd8:	4ba5      	ldr	r3, [pc, #660]	; (8005e70 <HAL_RCC_ClockConfig+0x2ac>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d910      	bls.n	8005c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be6:	4ba2      	ldr	r3, [pc, #648]	; (8005e70 <HAL_RCC_ClockConfig+0x2ac>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f023 020f 	bic.w	r2, r3, #15
 8005bee:	49a0      	ldr	r1, [pc, #640]	; (8005e70 <HAL_RCC_ClockConfig+0x2ac>)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf6:	4b9e      	ldr	r3, [pc, #632]	; (8005e70 <HAL_RCC_ClockConfig+0x2ac>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d001      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e12e      	b.n	8005e66 <HAL_RCC_ClockConfig+0x2a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 80be 	beq.w	8005d92 <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d137      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c1e:	4b95      	ldr	r3, [pc, #596]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c24:	4a93      	ldr	r2, [pc, #588]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005c26:	f043 0304 	orr.w	r3, r3, #4
 8005c2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005c2e:	4b91      	ldr	r3, [pc, #580]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
      tickstart = HAL_GetTick();
 8005c3c:	f7fd fe5a 	bl	80038f4 <HAL_GetTick>
 8005c40:	6178      	str	r0, [r7, #20]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005c42:	4b8d      	ldr	r3, [pc, #564]	; (8005e78 <HAL_RCC_ClockConfig+0x2b4>)
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00f      	beq.n	8005c6e <HAL_RCC_ClockConfig+0xaa>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_ClockConfig+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005c50:	f7fd fe50 	bl	80038f4 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_ClockConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e101      	b.n	8005e66 <HAL_RCC_ClockConfig+0x2a2>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005c62:	4b85      	ldr	r3, [pc, #532]	; (8005e78 <HAL_RCC_ClockConfig+0x2b4>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0f0      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x8c>
          }
        }
      }

      __HAL_RCC_PWR_CLK_DISABLE();
 8005c6e:	4b81      	ldr	r3, [pc, #516]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c74:	4a7f      	ldr	r2, [pc, #508]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005c76:	f023 0304 	bic.w	r3, r3, #4
 8005c7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005c7e:	4b7d      	ldr	r3, [pc, #500]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d121      	bne.n	8005cce <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e0eb      	b.n	8005e66 <HAL_RCC_ClockConfig+0x2a2>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d107      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xe2>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c96:	4b77      	ldr	r3, [pc, #476]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d115      	bne.n	8005cce <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e0df      	b.n	8005e66 <HAL_RCC_ClockConfig+0x2a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d107      	bne.n	8005cbe <HAL_RCC_ClockConfig+0xfa>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005cae:	4b71      	ldr	r3, [pc, #452]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d109      	bne.n	8005cce <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e0d3      	b.n	8005e66 <HAL_RCC_ClockConfig+0x2a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cbe:	4b6d      	ldr	r3, [pc, #436]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e0cb      	b.n	8005e66 <HAL_RCC_ClockConfig+0x2a2>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005cce:	4b69      	ldr	r3, [pc, #420]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f023 0203 	bic.w	r2, r3, #3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	4966      	ldr	r1, [pc, #408]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005ce0:	f7fd fe08 	bl	80038f4 <HAL_GetTick>
 8005ce4:	6178      	str	r0, [r7, #20]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d112      	bne.n	8005d14 <HAL_RCC_ClockConfig+0x150>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cee:	e00a      	b.n	8005d06 <HAL_RCC_ClockConfig+0x142>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf0:	f7fd fe00 	bl	80038f4 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_ClockConfig+0x142>
        {
          return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e0af      	b.n	8005e66 <HAL_RCC_ClockConfig+0x2a2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d06:	4b5b      	ldr	r3, [pc, #364]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	f003 030c 	and.w	r3, r3, #12
 8005d0e:	2b0c      	cmp	r3, #12
 8005d10:	d1ee      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x12c>
 8005d12:	e03e      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ce>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d112      	bne.n	8005d42 <HAL_RCC_ClockConfig+0x17e>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d1c:	e00a      	b.n	8005d34 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d1e:	f7fd fde9 	bl	80038f4 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e098      	b.n	8005e66 <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d34:	4b4f      	ldr	r3, [pc, #316]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	f003 030c 	and.w	r3, r3, #12
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d1ee      	bne.n	8005d1e <HAL_RCC_ClockConfig+0x15a>
 8005d40:	e027      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ce>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d11d      	bne.n	8005d86 <HAL_RCC_ClockConfig+0x1c2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d4a:	e00a      	b.n	8005d62 <HAL_RCC_ClockConfig+0x19e>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d4c:	f7fd fdd2 	bl	80038f4 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_ClockConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e081      	b.n	8005e66 <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d62:	4b44      	ldr	r3, [pc, #272]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f003 030c 	and.w	r3, r3, #12
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1ee      	bne.n	8005d4c <HAL_RCC_ClockConfig+0x188>
 8005d6e:	e010      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ce>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d70:	f7fd fdc0 	bl	80038f4 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_ClockConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e06f      	b.n	8005e66 <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d86:	4b3b      	ldr	r3, [pc, #236]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	f003 030c 	and.w	r3, r3, #12
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d1ee      	bne.n	8005d70 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d008      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005d9e:	4b35      	ldr	r3, [pc, #212]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f023 020f 	bic.w	r2, r3, #15
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	4932      	ldr	r1, [pc, #200]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d008      	beq.n	8005dce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005dbc:	4b2d      	ldr	r3, [pc, #180]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	492a      	ldr	r1, [pc, #168]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005dda:	4b26      	ldr	r3, [pc, #152]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	4922      	ldr	r1, [pc, #136]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d008      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x248>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
    MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005dfa:	4b1e      	ldr	r3, [pc, #120]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	491b      	ldr	r1, [pc, #108]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	624b      	str	r3, [r1, #36]	; 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e0c:	4b18      	ldr	r3, [pc, #96]	; (8005e70 <HAL_RCC_ClockConfig+0x2ac>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d210      	bcs.n	8005e3c <HAL_RCC_ClockConfig+0x278>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e1a:	4b15      	ldr	r3, [pc, #84]	; (8005e70 <HAL_RCC_ClockConfig+0x2ac>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f023 020f 	bic.w	r2, r3, #15
 8005e22:	4913      	ldr	r1, [pc, #76]	; (8005e70 <HAL_RCC_ClockConfig+0x2ac>)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2a:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <HAL_RCC_ClockConfig+0x2ac>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d001      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x278>
    {
      return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e014      	b.n	8005e66 <HAL_RCC_ClockConfig+0x2a2>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005e3c:	f000 f824 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8005e40:	4602      	mov	r2, r0
 8005e42:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <HAL_RCC_ClockConfig+0x2b0>)
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	490c      	ldr	r1, [pc, #48]	; (8005e7c <HAL_RCC_ClockConfig+0x2b8>)
 8005e4c:	5ccb      	ldrb	r3, [r1, r3]
 8005e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e52:	4a0b      	ldr	r2, [pc, #44]	; (8005e80 <HAL_RCC_ClockConfig+0x2bc>)
 8005e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e56:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <HAL_RCC_ClockConfig+0x2c0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fd fd00 	bl	8003860 <HAL_InitTick>
 8005e60:	4603      	mov	r3, r0
 8005e62:	74fb      	strb	r3, [r7, #19]

  return status;
 8005e64:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40022000 	.word	0x40022000
 8005e74:	46020c00 	.word	0x46020c00
 8005e78:	46020800 	.word	0x46020800
 8005e7c:	0800bbb4 	.word	0x0800bbb4
 8005e80:	20000000 	.word	0x20000000
 8005e84:	20000070 	.word	0x20000070

08005e88 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b08b      	sub	sp, #44	; 0x2c
 8005e8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e96:	4b7b      	ldr	r3, [pc, #492]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f003 030c 	and.w	r3, r3, #12
 8005e9e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ea0:	4b78      	ldr	r3, [pc, #480]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea4:	f003 0303 	and.w	r3, r3, #3
 8005ea8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_RCC_GetSysClockFreq+0x34>
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	2b0c      	cmp	r3, #12
 8005eb4:	d121      	bne.n	8005efa <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d11e      	bne.n	8005efa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005ebc:	4b71      	ldr	r3, [pc, #452]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d107      	bne.n	8005ed8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005ec8:	4b6e      	ldr	r3, [pc, #440]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005eca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ece:	0b1b      	lsrs	r3, r3, #12
 8005ed0:	f003 030f 	and.w	r3, r3, #15
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed6:	e005      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005ed8:	4b6a      	ldr	r3, [pc, #424]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	0f1b      	lsrs	r3, r3, #28
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ee4:	4a68      	ldr	r2, [pc, #416]	; (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d110      	bne.n	8005f16 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ef8:	e00d      	b.n	8005f16 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005efa:	4b62      	ldr	r3, [pc, #392]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	f003 030c 	and.w	r3, r3, #12
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d102      	bne.n	8005f0c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f06:	4b61      	ldr	r3, [pc, #388]	; (800608c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f08:	623b      	str	r3, [r7, #32]
 8005f0a:	e004      	b.n	8005f16 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	2b08      	cmp	r3, #8
 8005f10:	d101      	bne.n	8005f16 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f12:	4b5e      	ldr	r3, [pc, #376]	; (800608c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f14:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b0c      	cmp	r3, #12
 8005f1a:	f040 80ac 	bne.w	8006076 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005f1e:	4b59      	ldr	r3, [pc, #356]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005f28:	4b56      	ldr	r3, [pc, #344]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2c:	0a1b      	lsrs	r3, r3, #8
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	3301      	adds	r3, #1
 8005f34:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005f36:	4b53      	ldr	r3, [pc, #332]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	091b      	lsrs	r3, r3, #4
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005f42:	4b50      	ldr	r3, [pc, #320]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	08db      	lsrs	r3, r3, #3
 8005f48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	fb02 f303 	mul.w	r3, r2, r3
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8086 	beq.w	8006072 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d003      	beq.n	8005f74 <HAL_RCC_GetSysClockFreq+0xec>
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d022      	beq.n	8005fb8 <HAL_RCC_GetSysClockFreq+0x130>
 8005f72:	e043      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8006090 <HAL_RCC_GetSysClockFreq+0x208>
 8005f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f86:	4b3f      	ldr	r3, [pc, #252]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f96:	ed97 6a01 	vldr	s12, [r7, #4]
 8005f9a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006094 <HAL_RCC_GetSysClockFreq+0x20c>
 8005f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005fb6:	e046      	b.n	8006046 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc2:	eddf 6a33 	vldr	s13, [pc, #204]	; 8006090 <HAL_RCC_GetSysClockFreq+0x208>
 8005fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fca:	4b2e      	ldr	r3, [pc, #184]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005fda:	ed97 6a01 	vldr	s12, [r7, #4]
 8005fde:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006094 <HAL_RCC_GetSysClockFreq+0x20c>
 8005fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005ffa:	e024      	b.n	8006046 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	ee07 3a90 	vmov	s15, r3
 800600c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006014:	4b1b      	ldr	r3, [pc, #108]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601c:	ee07 3a90 	vmov	s15, r3
 8006020:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006024:	ed97 6a01 	vldr	s12, [r7, #4]
 8006028:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8006094 <HAL_RCC_GetSysClockFreq+0x20c>
 800602c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006030:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006034:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006038:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800603c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006040:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8006044:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006046:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604a:	0e1b      	lsrs	r3, r3, #24
 800604c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006050:	3301      	adds	r3, #1
 8006052:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800605e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800606a:	ee17 3a90 	vmov	r3, s15
 800606e:	623b      	str	r3, [r7, #32]
 8006070:	e001      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8006076:	6a3b      	ldr	r3, [r7, #32]
}
 8006078:	4618      	mov	r0, r3
 800607a:	372c      	adds	r7, #44	; 0x2c
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	46020c00 	.word	0x46020c00
 8006088:	0800bbcc 	.word	0x0800bbcc
 800608c:	00f42400 	.word	0x00f42400
 8006090:	4b742400 	.word	0x4b742400
 8006094:	46000000 	.word	0x46000000

08006098 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800609c:	f7ff fef4 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 80060a0:	4602      	mov	r2, r0
 80060a2:	4b07      	ldr	r3, [pc, #28]	; (80060c0 <HAL_RCC_GetHCLKFreq+0x28>)
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	4906      	ldr	r1, [pc, #24]	; (80060c4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80060ac:	5ccb      	ldrb	r3, [r1, r3]
 80060ae:	fa22 f303 	lsr.w	r3, r2, r3
 80060b2:	4a05      	ldr	r2, [pc, #20]	; (80060c8 <HAL_RCC_GetHCLKFreq+0x30>)
 80060b4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80060b6:	4b04      	ldr	r3, [pc, #16]	; (80060c8 <HAL_RCC_GetHCLKFreq+0x30>)
 80060b8:	681b      	ldr	r3, [r3, #0]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	46020c00 	.word	0x46020c00
 80060c4:	0800bbb4 	.word	0x0800bbb4
 80060c8:	20000000 	.word	0x20000000

080060cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80060d0:	f7ff ffe2 	bl	8006098 <HAL_RCC_GetHCLKFreq>
 80060d4:	4602      	mov	r2, r0
 80060d6:	4b05      	ldr	r3, [pc, #20]	; (80060ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	091b      	lsrs	r3, r3, #4
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	4903      	ldr	r1, [pc, #12]	; (80060f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060e2:	5ccb      	ldrb	r3, [r1, r3]
 80060e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	46020c00 	.word	0x46020c00
 80060f0:	0800bbc4 	.word	0x0800bbc4

080060f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80060f8:	f7ff ffce 	bl	8006098 <HAL_RCC_GetHCLKFreq>
 80060fc:	4602      	mov	r2, r0
 80060fe:	4b05      	ldr	r3, [pc, #20]	; (8006114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	0a1b      	lsrs	r3, r3, #8
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	4903      	ldr	r1, [pc, #12]	; (8006118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800610a:	5ccb      	ldrb	r3, [r1, r3]
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006110:	4618      	mov	r0, r3
 8006112:	bd80      	pop	{r7, pc}
 8006114:	46020c00 	.word	0x46020c00
 8006118:	0800bbc4 	.word	0x0800bbc4

0800611c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8006120:	f7ff ffba 	bl	8006098 <HAL_RCC_GetHCLKFreq>
 8006124:	4602      	mov	r2, r0
 8006126:	4b05      	ldr	r3, [pc, #20]	; (800613c <HAL_RCC_GetPCLK3Freq+0x20>)
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	091b      	lsrs	r3, r3, #4
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	4903      	ldr	r1, [pc, #12]	; (8006140 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006132:	5ccb      	ldrb	r3, [r1, r3]
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006138:	4618      	mov	r0, r3
 800613a:	bd80      	pop	{r7, pc}
 800613c:	46020c00 	.word	0x46020c00
 8006140:	0800bbc4 	.word	0x0800bbc4

08006144 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800614c:	4b3e      	ldr	r3, [pc, #248]	; (8006248 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800614e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800615a:	f7fe fea5 	bl	8004ea8 <HAL_PWREx_GetVoltageRange>
 800615e:	6178      	str	r0, [r7, #20]
 8006160:	e019      	b.n	8006196 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006162:	4b39      	ldr	r3, [pc, #228]	; (8006248 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006168:	4a37      	ldr	r2, [pc, #220]	; (8006248 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800616a:	f043 0304 	orr.w	r3, r3, #4
 800616e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006172:	4b35      	ldr	r3, [pc, #212]	; (8006248 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006180:	f7fe fe92 	bl	8004ea8 <HAL_PWREx_GetVoltageRange>
 8006184:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006186:	4b30      	ldr	r3, [pc, #192]	; (8006248 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800618c:	4a2e      	ldr	r2, [pc, #184]	; (8006248 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800618e:	f023 0304 	bic.w	r3, r3, #4
 8006192:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800619c:	d003      	beq.n	80061a6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061a4:	d109      	bne.n	80061ba <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061ac:	d202      	bcs.n	80061b4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80061ae:	2301      	movs	r3, #1
 80061b0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80061b2:	e033      	b.n	800621c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80061b4:	2300      	movs	r3, #0
 80061b6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80061b8:	e030      	b.n	800621c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061c0:	d208      	bcs.n	80061d4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c8:	d102      	bne.n	80061d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80061ca:	2303      	movs	r3, #3
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	e025      	b.n	800621c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e035      	b.n	8006240 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061da:	d90f      	bls.n	80061fc <RCC_SetFlashLatencyFromMSIRange+0xb8>

      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d109      	bne.n	80061f6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061e8:	d902      	bls.n	80061f0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80061ea:	2300      	movs	r3, #0
 80061ec:	613b      	str	r3, [r7, #16]
 80061ee:	e015      	b.n	800621c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80061f0:	2301      	movs	r3, #1
 80061f2:	613b      	str	r3, [r7, #16]
 80061f4:	e012      	b.n	800621c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80061f6:	2300      	movs	r3, #0
 80061f8:	613b      	str	r3, [r7, #16]
 80061fa:	e00f      	b.n	800621c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006202:	d109      	bne.n	8006218 <RCC_SetFlashLatencyFromMSIRange+0xd4>

        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800620a:	d102      	bne.n	8006212 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800620c:	2301      	movs	r3, #1
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	e004      	b.n	800621c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006212:	2302      	movs	r3, #2
 8006214:	613b      	str	r3, [r7, #16]
 8006216:	e001      	b.n	800621c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006218:	2301      	movs	r3, #1
 800621a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800621c:	4b0b      	ldr	r3, [pc, #44]	; (800624c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f023 020f 	bic.w	r2, r3, #15
 8006224:	4909      	ldr	r1, [pc, #36]	; (800624c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	4313      	orrs	r3, r2
 800622a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800622c:	4b07      	ldr	r3, [pc, #28]	; (800624c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	429a      	cmp	r2, r3
 8006238:	d001      	beq.n	800623e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	46020c00 	.word	0x46020c00
 800624c:	40022000 	.word	0x40022000

08006250 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006250:	b480      	push	{r7}
 8006252:	b089      	sub	sp, #36	; 0x24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006258:	4bac      	ldr	r3, [pc, #688]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800625a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006260:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006262:	4baa      	ldr	r3, [pc, #680]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800626c:	4ba7      	ldr	r3, [pc, #668]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	0a1b      	lsrs	r3, r3, #8
 8006272:	f003 030f 	and.w	r3, r3, #15
 8006276:	3301      	adds	r3, #1
 8006278:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800627a:	4ba4      	ldr	r3, [pc, #656]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800627c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627e:	f003 0310 	and.w	r3, r3, #16
 8006282:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006284:	4ba1      	ldr	r3, [pc, #644]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	08db      	lsrs	r3, r3, #3
 800628a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	fb02 f303 	mul.w	r3, r2, r3
 8006294:	ee07 3a90 	vmov	s15, r3
 8006298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 8123 	beq.w	80064ee <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d062      	beq.n	8006374 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	f200 8081 	bhi.w	80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d024      	beq.n	8006306 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d17a      	bne.n	80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	ee07 3a90 	vmov	s15, r3
 80062c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062cc:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006510 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80062d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d4:	4b8d      	ldr	r3, [pc, #564]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80062d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062dc:	ee07 3a90 	vmov	s15, r3
 80062e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80062e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80062e8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80062ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80062f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006300:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006304:	e08f      	b.n	8006426 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006306:	4b81      	ldr	r3, [pc, #516]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8006312:	4b7e      	ldr	r3, [pc, #504]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	0f1b      	lsrs	r3, r3, #28
 8006318:	f003 030f 	and.w	r3, r3, #15
 800631c:	e006      	b.n	800632c <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800631e:	4b7b      	ldr	r3, [pc, #492]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006324:	041b      	lsls	r3, r3, #16
 8006326:	0f1b      	lsrs	r3, r3, #28
 8006328:	f003 030f 	and.w	r3, r3, #15
 800632c:	4a7a      	ldr	r2, [pc, #488]	; (8006518 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800632e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	ee07 3a90 	vmov	s15, r3
 8006340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006352:	ed97 6a02 	vldr	s12, [r7, #8]
 8006356:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800635a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800635e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006366:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800636a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006372:	e058      	b.n	8006426 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006510 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006386:	4b61      	ldr	r3, [pc, #388]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006396:	ed97 6a02 	vldr	s12, [r7, #8]
 800639a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800639e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80063a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80063a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80063ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063b6:	e036      	b.n	8006426 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80063b8:	4b54      	ldr	r3, [pc, #336]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 80063c4:	4b51      	ldr	r3, [pc, #324]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	0f1b      	lsrs	r3, r3, #28
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	e006      	b.n	80063de <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 80063d0:	4b4e      	ldr	r3, [pc, #312]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80063d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063d6:	041b      	lsls	r3, r3, #16
 80063d8:	0f1b      	lsrs	r3, r3, #28
 80063da:	f003 030f 	and.w	r3, r3, #15
 80063de:	4a4e      	ldr	r2, [pc, #312]	; (8006518 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80063e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e4:	ee07 3a90 	vmov	s15, r3
 80063e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	ee07 3a90 	vmov	s15, r3
 8006400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006404:	ed97 6a02 	vldr	s12, [r7, #8]
 8006408:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006514 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800640c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006414:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006418:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800641c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006420:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006424:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006426:	4b39      	ldr	r3, [pc, #228]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d017      	beq.n	8006462 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006432:	4b36      	ldr	r3, [pc, #216]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006436:	0a5b      	lsrs	r3, r3, #9
 8006438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006448:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800644c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006458:	ee17 2a90 	vmov	r2, s15
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	e002      	b.n	8006468 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006468:	4b28      	ldr	r3, [pc, #160]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d017      	beq.n	80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006474:	4b25      	ldr	r3, [pc, #148]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006478:	0c1b      	lsrs	r3, r3, #16
 800647a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800648a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800648e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800649a:	ee17 2a90 	vmov	r2, s15
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	605a      	str	r2, [r3, #4]
 80064a2:	e002      	b.n	80064aa <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80064aa:	4b18      	ldr	r3, [pc, #96]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d017      	beq.n	80064e6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80064b6:	4b15      	ldr	r3, [pc, #84]	; (800650c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80064b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ba:	0e1b      	lsrs	r3, r3, #24
 80064bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c0:	ee07 3a90 	vmov	s15, r3
 80064c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80064c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064cc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80064d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80064d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064dc:	ee17 2a90 	vmov	r2, s15
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	609a      	str	r2, [r3, #8]
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }
}
 80064e4:	e00c      	b.n	8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	609a      	str	r2, [r3, #8]
}
 80064ec:	e008      	b.n	8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	609a      	str	r2, [r3, #8]
}
 8006500:	bf00      	nop
 8006502:	3724      	adds	r7, #36	; 0x24
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	46020c00 	.word	0x46020c00
 8006510:	4b742400 	.word	0x4b742400
 8006514:	46000000 	.word	0x46000000
 8006518:	0800bbcc 	.word	0x0800bbcc

0800651c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800651c:	b480      	push	{r7}
 800651e:	b089      	sub	sp, #36	; 0x24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006524:	4bac      	ldr	r3, [pc, #688]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800652e:	4baa      	ldr	r3, [pc, #680]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006538:	4ba7      	ldr	r3, [pc, #668]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	0a1b      	lsrs	r3, r3, #8
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	3301      	adds	r3, #1
 8006544:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006546:	4ba4      	ldr	r3, [pc, #656]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654a:	f003 0310 	and.w	r3, r3, #16
 800654e:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006550:	4ba1      	ldr	r3, [pc, #644]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	08db      	lsrs	r3, r3, #3
 8006556:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	fb02 f303 	mul.w	r3, r2, r3
 8006560:	ee07 3a90 	vmov	s15, r3
 8006564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006568:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8123 	beq.w	80067ba <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2b03      	cmp	r3, #3
 8006578:	d062      	beq.n	8006640 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b03      	cmp	r3, #3
 800657e:	f200 8081 	bhi.w	8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d024      	beq.n	80065d2 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d17a      	bne.n	8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	ee07 3a90 	vmov	s15, r3
 8006594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006598:	eddf 6a90 	vldr	s13, [pc, #576]	; 80067dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800659c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065a0:	4b8d      	ldr	r3, [pc, #564]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80065a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a8:	ee07 3a90 	vmov	s15, r3
 80065ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80065b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80065b4:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80065b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80065bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80065c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80065c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065d0:	e08f      	b.n	80066f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80065d2:	4b81      	ldr	r3, [pc, #516]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 80065de:	4b7e      	ldr	r3, [pc, #504]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	0f1b      	lsrs	r3, r3, #28
 80065e4:	f003 030f 	and.w	r3, r3, #15
 80065e8:	e006      	b.n	80065f8 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 80065ea:	4b7b      	ldr	r3, [pc, #492]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80065ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065f0:	041b      	lsls	r3, r3, #16
 80065f2:	0f1b      	lsrs	r3, r3, #28
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	4a7a      	ldr	r2, [pc, #488]	; (80067e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80065fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065fe:	ee07 3a90 	vmov	s15, r3
 8006602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	ee07 3a90 	vmov	s15, r3
 800660c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	ee07 3a90 	vmov	s15, r3
 800661a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800661e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006622:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800662a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800662e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006632:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800663a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800663e:	e058      	b.n	80066f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664a:	eddf 6a64 	vldr	s13, [pc, #400]	; 80067dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800664e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006652:	4b61      	ldr	r3, [pc, #388]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006662:	ed97 6a02 	vldr	s12, [r7, #8]
 8006666:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800666a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800666e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006676:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800667a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006682:	e036      	b.n	80066f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006684:	4b54      	ldr	r3, [pc, #336]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8006690:	4b51      	ldr	r3, [pc, #324]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	0f1b      	lsrs	r3, r3, #28
 8006696:	f003 030f 	and.w	r3, r3, #15
 800669a:	e006      	b.n	80066aa <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800669c:	4b4e      	ldr	r3, [pc, #312]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800669e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80066a2:	041b      	lsls	r3, r3, #16
 80066a4:	0f1b      	lsrs	r3, r3, #28
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	4a4e      	ldr	r2, [pc, #312]	; (80067e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80066ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b0:	ee07 3a90 	vmov	s15, r3
 80066b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	ee07 3a90 	vmov	s15, r3
 80066be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	ee07 3a90 	vmov	s15, r3
 80066cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80066d4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80066d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80066e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066f0:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80066f2:	4b39      	ldr	r3, [pc, #228]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d017      	beq.n	800672e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066fe:	4b36      	ldr	r3, [pc, #216]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006702:	0a5b      	lsrs	r3, r3, #9
 8006704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006708:	ee07 3a90 	vmov	s15, r3
 800670c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006714:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006718:	edd7 6a07 	vldr	s13, [r7, #28]
 800671c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006724:	ee17 2a90 	vmov	r2, s15
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	e002      	b.n	8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006734:	4b28      	ldr	r3, [pc, #160]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d017      	beq.n	8006770 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006740:	4b25      	ldr	r3, [pc, #148]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006744:	0c1b      	lsrs	r3, r3, #16
 8006746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006752:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006756:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800675a:	edd7 6a07 	vldr	s13, [r7, #28]
 800675e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006766:	ee17 2a90 	vmov	r2, s15
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	605a      	str	r2, [r3, #4]
 800676e:	e002      	b.n	8006776 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006776:	4b18      	ldr	r3, [pc, #96]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d017      	beq.n	80067b2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006782:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006786:	0e1b      	lsrs	r3, r3, #24
 8006788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800678c:	ee07 3a90 	vmov	s15, r3
 8006790:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006794:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006798:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800679c:	edd7 6a07 	vldr	s13, [r7, #28]
 80067a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067a8:	ee17 2a90 	vmov	r2, s15
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80067b0:	e00c      	b.n	80067cc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	609a      	str	r2, [r3, #8]
}
 80067b8:	e008      	b.n	80067cc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	609a      	str	r2, [r3, #8]
}
 80067cc:	bf00      	nop
 80067ce:	3724      	adds	r7, #36	; 0x24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	46020c00 	.word	0x46020c00
 80067dc:	4b742400 	.word	0x4b742400
 80067e0:	46000000 	.word	0x46000000
 80067e4:	0800bbcc 	.word	0x0800bbcc

080067e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b089      	sub	sp, #36	; 0x24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80067f0:	4bac      	ldr	r3, [pc, #688]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80067f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80067fa:	4baa      	ldr	r3, [pc, #680]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	f003 0303 	and.w	r3, r3, #3
 8006802:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006804:	4ba7      	ldr	r3, [pc, #668]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006808:	0a1b      	lsrs	r3, r3, #8
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	3301      	adds	r3, #1
 8006810:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006812:	4ba4      	ldr	r3, [pc, #656]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	f003 0310 	and.w	r3, r3, #16
 800681a:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800681c:	4ba1      	ldr	r3, [pc, #644]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800681e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006820:	08db      	lsrs	r3, r3, #3
 8006822:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	fb02 f303 	mul.w	r3, r2, r3
 800682c:	ee07 3a90 	vmov	s15, r3
 8006830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006834:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 8123 	beq.w	8006a86 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2b03      	cmp	r3, #3
 8006844:	d062      	beq.n	800690c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b03      	cmp	r3, #3
 800684a:	f200 8081 	bhi.w	8006950 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d024      	beq.n	800689e <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2b02      	cmp	r3, #2
 8006858:	d17a      	bne.n	8006950 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	ee07 3a90 	vmov	s15, r3
 8006860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006864:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800686c:	4b8d      	ldr	r3, [pc, #564]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800686e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006874:	ee07 3a90 	vmov	s15, r3
 8006878:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800687c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006880:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006aac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006884:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006888:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800688c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006890:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006898:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800689c:	e08f      	b.n	80069be <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800689e:	4b81      	ldr	r3, [pc, #516]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 80068aa:	4b7e      	ldr	r3, [pc, #504]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	0f1b      	lsrs	r3, r3, #28
 80068b0:	f003 030f 	and.w	r3, r3, #15
 80068b4:	e006      	b.n	80068c4 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 80068b6:	4b7b      	ldr	r3, [pc, #492]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80068b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068bc:	041b      	lsls	r3, r3, #16
 80068be:	0f1b      	lsrs	r3, r3, #28
 80068c0:	f003 030f 	and.w	r3, r3, #15
 80068c4:	4a7a      	ldr	r2, [pc, #488]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80068c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	ee07 3a90 	vmov	s15, r3
 80068d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ee:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006aac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80068f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800690a:	e058      	b.n	80069be <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	ee07 3a90 	vmov	s15, r3
 8006912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006916:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800691a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691e:	4b61      	ldr	r3, [pc, #388]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800692e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006932:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006aac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006936:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800693a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800693e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006942:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800694a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800694e:	e036      	b.n	80069be <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006950:	4b54      	ldr	r3, [pc, #336]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800695c:	4b51      	ldr	r3, [pc, #324]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	0f1b      	lsrs	r3, r3, #28
 8006962:	f003 030f 	and.w	r3, r3, #15
 8006966:	e006      	b.n	8006976 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8006968:	4b4e      	ldr	r3, [pc, #312]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800696a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800696e:	041b      	lsls	r3, r3, #16
 8006970:	0f1b      	lsrs	r3, r3, #28
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	4a4e      	ldr	r2, [pc, #312]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697c:	ee07 3a90 	vmov	s15, r3
 8006980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	ee07 3a90 	vmov	s15, r3
 8006998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800699c:	ed97 6a02 	vldr	s12, [r7, #8]
 80069a0:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006aac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80069a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80069b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069bc:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80069be:	4b39      	ldr	r3, [pc, #228]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d017      	beq.n	80069fa <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80069ca:	4b36      	ldr	r3, [pc, #216]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80069cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ce:	0a5b      	lsrs	r3, r3, #9
 80069d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069d4:	ee07 3a90 	vmov	s15, r3
 80069d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80069dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069e0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80069e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80069e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069f0:	ee17 2a90 	vmov	r2, s15
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	e002      	b.n	8006a00 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006a00:	4b28      	ldr	r3, [pc, #160]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d017      	beq.n	8006a3c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006a0c:	4b25      	ldr	r3, [pc, #148]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a16:	ee07 3a90 	vmov	s15, r3
 8006a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006a1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a22:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006a26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a32:	ee17 2a90 	vmov	r2, s15
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	605a      	str	r2, [r3, #4]
 8006a3a:	e002      	b.n	8006a42 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006a42:	4b18      	ldr	r3, [pc, #96]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d017      	beq.n	8006a7e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006a4e:	4b15      	ldr	r3, [pc, #84]	; (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a52:	0e1b      	lsrs	r3, r3, #24
 8006a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a58:	ee07 3a90 	vmov	s15, r3
 8006a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a64:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006a68:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a74:	ee17 2a90 	vmov	r2, s15
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006a7c:	e00c      	b.n	8006a98 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	609a      	str	r2, [r3, #8]
}
 8006a84:	e008      	b.n	8006a98 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	609a      	str	r2, [r3, #8]
}
 8006a98:	bf00      	nop
 8006a9a:	3724      	adds	r7, #36	; 0x24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	46020c00 	.word	0x46020c00
 8006aa8:	4b742400 	.word	0x4b742400
 8006aac:	46000000 	.word	0x46000000
 8006ab0:	0800bbcc 	.word	0x0800bbcc

08006ab4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b08e      	sub	sp, #56	; 0x38
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ac2:	d145      	bne.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006ac4:	4bcc      	ldr	r3, [pc, #816]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8006ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ace:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006ad0:	4bc9      	ldr	r3, [pc, #804]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8006ad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d108      	bne.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae4:	d104      	bne.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
    {
      frequency = LSE_VALUE;
 8006ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aea:	637b      	str	r3, [r7, #52]	; 0x34
 8006aec:	f001 b8cd 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006af0:	4bc1      	ldr	r3, [pc, #772]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8006af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006af6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006afa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006afe:	d114      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8006b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b06:	d110      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b08:	4bbb      	ldr	r3, [pc, #748]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8006b0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b16:	d103      	bne.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
      {
        frequency = LSI_VALUE / 128U;
 8006b18:	23fa      	movs	r3, #250	; 0xfa
 8006b1a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b1c:	f001 b8b5 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      }
      else
      {
        frequency = LSI_VALUE;
 8006b20:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006b24:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b26:	f001 b8b0 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006b2a:	4bb3      	ldr	r3, [pc, #716]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b36:	d107      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b3e:	d103      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
    {
      frequency = HSE_VALUE / 32U;
 8006b40:	4bae      	ldr	r3, [pc, #696]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8006b42:	637b      	str	r3, [r7, #52]	; 0x34
 8006b44:	f001 b8a1 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b4c:	f001 b89d 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b56:	f001 806d 	beq.w	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1180>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b60:	f201 8090 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b6a:	f000 86d3 	beq.w	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xe60>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b74:	f201 8086 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b7e:	f001 8004 	beq.w	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x10d6>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b88:	f201 807c 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b92:	f000 878b 	beq.w	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b9c:	f201 8072 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ba6:	f000 8732 	beq.w	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bb0:	f201 8068 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bba:	f000 86d9 	beq.w	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bc4:	f201 805e 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bce:	f000 8592 	beq.w	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bd8:	f201 8054 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006be2:	f000 81f6 	beq.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bec:	f201 804a 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bf6:	f000 8194 	beq.w	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c00:	f201 8040 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c0a:	f000 847f 	beq.w	800750c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c14:	f201 8036 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c1e:	f000 842a 	beq.w	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c28:	f201 802c 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c32:	f000 83bd 	beq.w	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c3c:	f201 8022 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c46:	f000 80f1 	beq.w	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c50:	f201 8018 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c5a:	f000 8095 	beq.w	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c64:	f201 800e 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c6e:	f000 8131 	beq.w	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c78:	f201 8004 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c82:	f000 855e 	beq.w	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c8c:	f200 87fa 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c96:	f000 85f8 	beq.w	800788a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ca0:	f200 87f0 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006caa:	f000 859c 	beq.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb4:	f200 87e6 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cbe:	f000 84d0 	beq.w	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc8:	f200 87dc 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b80      	cmp	r3, #128	; 0x80
 8006cd0:	f000 849b 	beq.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b80      	cmp	r3, #128	; 0x80
 8006cd8:	f200 87d4 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d84c      	bhi.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 87cd 	beq.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3b01      	subs	r3, #1
 8006cee:	2b1f      	cmp	r3, #31
 8006cf0:	f200 87c8 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8006cf4:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x248>)
 8006cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	080070cd 	.word	0x080070cd
 8006d00:	0800713b 	.word	0x0800713b
 8006d04:	08007c85 	.word	0x08007c85
 8006d08:	080071a9 	.word	0x080071a9
 8006d0c:	08007c85 	.word	0x08007c85
 8006d10:	08007c85 	.word	0x08007c85
 8006d14:	08007c85 	.word	0x08007c85
 8006d18:	08007217 	.word	0x08007217
 8006d1c:	08007c85 	.word	0x08007c85
 8006d20:	08007c85 	.word	0x08007c85
 8006d24:	08007c85 	.word	0x08007c85
 8006d28:	08007c85 	.word	0x08007c85
 8006d2c:	08007c85 	.word	0x08007c85
 8006d30:	08007c85 	.word	0x08007c85
 8006d34:	08007c85 	.word	0x08007c85
 8006d38:	08007285 	.word	0x08007285
 8006d3c:	08007c85 	.word	0x08007c85
 8006d40:	08007c85 	.word	0x08007c85
 8006d44:	08007c85 	.word	0x08007c85
 8006d48:	08007c85 	.word	0x08007c85
 8006d4c:	08007c85 	.word	0x08007c85
 8006d50:	08007c85 	.word	0x08007c85
 8006d54:	08007c85 	.word	0x08007c85
 8006d58:	08007c85 	.word	0x08007c85
 8006d5c:	08007c85 	.word	0x08007c85
 8006d60:	08007c85 	.word	0x08007c85
 8006d64:	08007c85 	.word	0x08007c85
 8006d68:	08007c85 	.word	0x08007c85
 8006d6c:	08007c85 	.word	0x08007c85
 8006d70:	08007c85 	.word	0x08007c85
 8006d74:	08007c85 	.word	0x08007c85
 8006d78:	080072f9 	.word	0x080072f9
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b40      	cmp	r3, #64	; 0x40
 8006d80:	f000 841d 	beq.w	80075be <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006d84:	f000 bf7e 	b.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
    {
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006d88:	4b1b      	ldr	r3, [pc, #108]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8006d8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d8e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006d92:	633b      	str	r3, [r7, #48]	; 0x30
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	2b80      	cmp	r3, #128	; 0x80
 8006d98:	d036      	beq.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	2b80      	cmp	r3, #128	; 0x80
 8006d9e:	d840      	bhi.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	2b60      	cmp	r3, #96	; 0x60
 8006da4:	d02c      	beq.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	2b60      	cmp	r3, #96	; 0x60
 8006daa:	d83a      	bhi.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	2b40      	cmp	r3, #64	; 0x40
 8006db0:	d009      	beq.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	2b40      	cmp	r3, #64	; 0x40
 8006db6:	d834      	bhi.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00b      	beq.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d010      	beq.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006dc4:	e02d      	b.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff fa40 	bl	8006250 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006dd4:	e028      	b.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dd6:	f107 0318 	add.w	r3, r7, #24
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff fb9e 	bl	800651c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006de4:	e020      	b.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006de6:	f107 030c 	add.w	r3, r7, #12
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff fcfc 	bl	80067e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006df4:	e018      	b.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
 8006df6:	bf00      	nop
 8006df8:	46020c00 	.word	0x46020c00
 8006dfc:	0007a120 	.word	0x0007a120

          case RCC_SAI1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006e00:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006e04:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e06:	e00f      	b.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e08:	4bab      	ldr	r3, [pc, #684]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e14:	d102      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            {
              frequency = HSI_VALUE;
 8006e16:	4ba9      	ldr	r3, [pc, #676]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8006e1a:	e005      	b.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
              frequency = 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e20:	e002      	b.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          default :
          {
            frequency = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e26:	bf00      	nop
          }
        }
        break;
 8006e28:	f000 bf2f 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006e2c:	4ba2      	ldr	r3, [pc, #648]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006e2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e36:	633b      	str	r3, [r7, #48]	; 0x30
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e3e:	d037      	beq.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e46:	d840      	bhi.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8006e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e4e:	d02b      	beq.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e56:	d838      	bhi.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e5e:	d00b      	beq.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
 8006e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e66:	d830      	bhi.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8006e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00c      	beq.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e74:	d010      	beq.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 8006e76:	e028      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x416>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff f9e7 	bl	8006250 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e86:	e023      	b.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e88:	f107 0318 	add.w	r3, r7, #24
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7ff fb45 	bl	800651c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e96:	e01b      	b.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e98:	f107 030c 	add.w	r3, r7, #12
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7ff fca3 	bl	80067e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ea6:	e013      	b.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006ea8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006eae:	e00f      	b.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006eb0:	4b81      	ldr	r3, [pc, #516]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ebc:	d102      	bne.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
            {
              frequency = HSI_VALUE;
 8006ebe:	4b7f      	ldr	r3, [pc, #508]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8006ec0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8006ec2:	e005      	b.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              frequency = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ec8:	e002      	b.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          default :

            frequency = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ece:	bf00      	nop

        }
        break;
 8006ed0:	f000 bedb 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      case RCC_PERIPHCLK_SAES:
        /* Get the current SAES source */
        srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006ed4:	4b78      	ldr	r3, [pc, #480]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006ed6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ede:	633b      	str	r3, [r7, #48]	; 0x30

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006ee0:	4b75      	ldr	r3, [pc, #468]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eec:	d105      	bne.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x446>
        {
          frequency = HSI_VALUE;
 8006ef4:	4b71      	ldr	r3, [pc, #452]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8006ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef8:	e011      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
        }
        else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006efa:	4b6f      	ldr	r3, [pc, #444]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f06:	d106      	bne.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8006f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f0e:	d102      	bne.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
        {
          frequency = HSI_VALUE >> 1U;
 8006f10:	4b6b      	ldr	r3, [pc, #428]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8006f12:	637b      	str	r3, [r7, #52]	; 0x34
 8006f14:	e003      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
        }
        /* Clock not enabled for SAES */
        else
        {
          frequency = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006f1a:	f000 beb6 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8006f1e:	f000 beb4 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_CLK48:

        srcclk = __HAL_RCC_GET_CLK48_SOURCE();
 8006f22:	4b65      	ldr	r3, [pc, #404]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f28:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006f34:	d030      	beq.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006f3c:	d844      	bhi.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f44:	d00b      	beq.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f4c:	d83c      	bhi.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d014      	beq.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f5a:	d008      	beq.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006f5c:	e034      	b.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>

        switch (srcclk)
        {
          case RCC_CLK48CLKSOURCE_PLL1: /* PLL1Q  */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff f974 	bl	8006250 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f6c:	e02f      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_PLL2: /* PLL2Q */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f6e:	f107 0318 	add.w	r3, r7, #24
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff fad2 	bl	800651c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f7c:	e027      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_HSI48: /* HSI48 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006f7e:	4b4e      	ldr	r3, [pc, #312]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8a:	d102      	bne.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
            {
              frequency = HSI48_VALUE;
 8006f8c:	4b4d      	ldr	r3, [pc, #308]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 8006f8e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8006f90:	e01d      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
              frequency = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f96:	e01a      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f98:	4b47      	ldr	r3, [pc, #284]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d005      	beq.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8006fa4:	4b44      	ldr	r3, [pc, #272]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	0e1b      	lsrs	r3, r3, #24
 8006faa:	f003 030f 	and.w	r3, r3, #15
 8006fae:	e006      	b.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8006fb0:	4b41      	ldr	r3, [pc, #260]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006fb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fb6:	041b      	lsls	r3, r3, #16
 8006fb8:	0e1b      	lsrs	r3, r3, #24
 8006fba:	f003 030f 	and.w	r3, r3, #15
 8006fbe:	4a42      	ldr	r2, [pc, #264]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8006fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fc6:	e002      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          default :

            frequency = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fcc:	bf00      	nop

        }
        break;
 8006fce:	f000 be5c 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SDMMC:
        srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006fd2:	4b39      	ldr	r3, [pc, #228]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006fd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fdc:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d157      	bne.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          srcclk = __HAL_RCC_GET_CLK48_SOURCE();
 8006fe4:	4b34      	ldr	r3, [pc, #208]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fea:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006fee:	633b      	str	r3, [r7, #48]	; 0x30
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006ff6:	d030      	beq.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006ffe:	d844      	bhi.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 8007000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007006:	d00b      	beq.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8007008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800700e:	d83c      	bhi.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	2b00      	cmp	r3, #0
 8007014:	d014      	beq.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800701c:	d008      	beq.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 800701e:	e034      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>

          switch (srcclk)
          {
            case RCC_CLK48CLKSOURCE_PLL1: /* PLL1Q  */
            {
              HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff f913 	bl	8006250 <HAL_RCCEx_GetPLL1ClockFreq>
              frequency = pll1_clocks.PLL1_Q_Frequency;
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800702e:	e02f      	b.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_PLL2: /* PLL2Q */
            {
              HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007030:	f107 0318 	add.w	r3, r7, #24
 8007034:	4618      	mov	r0, r3
 8007036:	f7ff fa71 	bl	800651c <HAL_RCCEx_GetPLL2ClockFreq>
              frequency = pll2_clocks.PLL2_Q_Frequency;
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800703e:	e027      	b.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_HSI48: /* HSI48 */
            {
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007040:	4b1d      	ldr	r3, [pc, #116]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800704c:	d102      	bne.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
              {
                frequency = HSI48_VALUE;
 800704e:	4b1d      	ldr	r3, [pc, #116]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 8007050:	637b      	str	r3, [r7, #52]	; 0x34
              }
              else
              {
                frequency = 0U;
              }
              break;
 8007052:	e01d      	b.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
                frequency = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8007058:	e01a      	b.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
            {
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800705a:	4b17      	ldr	r3, [pc, #92]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8007066:	4b14      	ldr	r3, [pc, #80]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	0e1b      	lsrs	r3, r3, #24
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	e006      	b.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007072:	4b11      	ldr	r3, [pc, #68]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8007074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007078:	041b      	lsls	r3, r3, #16
 800707a:	0e1b      	lsrs	r3, r3, #24
 800707c:	f003 030f 	and.w	r3, r3, #15
 8007080:	4a11      	ldr	r2, [pc, #68]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8007082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007086:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8007088:	e002      	b.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            default :
            {
              frequency = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800708e:	bf00      	nop
            }
          }
          break;
 8007090:	f000 bdfb 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        }
        else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800709a:	d108      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800709c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff f8d5 	bl	8006250 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_P_Frequency;
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070aa:	f000 bdee 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070b2:	f000 bdea 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80070b6:	bf00      	nop
 80070b8:	46020c00 	.word	0x46020c00
 80070bc:	00f42400 	.word	0x00f42400
 80070c0:	007a1200 	.word	0x007a1200
 80070c4:	02dc6c00 	.word	0x02dc6c00
 80070c8:	0800bbcc 	.word	0x0800bbcc

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80070cc:	4bad      	ldr	r3, [pc, #692]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80070ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070d2:	f003 0303 	and.w	r3, r3, #3
 80070d6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80070d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d104      	bne.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80070de:	f7ff f809 	bl	80060f4 <HAL_RCC_GetPCLK2Freq>
 80070e2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80070e4:	f000 bdd1 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d104      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
          frequency = HAL_RCC_GetSysClockFreq();
 80070ee:	f7fe fecb 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 80070f2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80070f4:	f000 bdc9 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80070f8:	4ba2      	ldr	r3, [pc, #648]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007104:	d105      	bne.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007108:	2b02      	cmp	r3, #2
 800710a:	d102      	bne.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          frequency = HSI_VALUE;
 800710c:	4b9e      	ldr	r3, [pc, #632]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800710e:	637b      	str	r3, [r7, #52]	; 0x34
 8007110:	e011      	b.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007112:	4b9c      	ldr	r3, [pc, #624]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8007114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b02      	cmp	r3, #2
 800711e:	d106      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8007120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007122:	2b03      	cmp	r3, #3
 8007124:	d103      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
          frequency = LSE_VALUE;
 8007126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800712a:	637b      	str	r3, [r7, #52]	; 0x34
 800712c:	e003      	b.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          frequency = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007132:	f000 bdaa 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007136:	f000 bda8 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800713a:	4b92      	ldr	r3, [pc, #584]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800713c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007140:	f003 030c 	and.w	r3, r3, #12
 8007144:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	2b00      	cmp	r3, #0
 800714a:	d104      	bne.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800714c:	f7fe ffbe 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 8007150:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007152:	f000 bd9a 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	2b04      	cmp	r3, #4
 800715a:	d104      	bne.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
          frequency = HAL_RCC_GetSysClockFreq();
 800715c:	f7fe fe94 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8007160:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007162:	f000 bd92 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007166:	4b87      	ldr	r3, [pc, #540]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800716e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007172:	d105      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	2b08      	cmp	r3, #8
 8007178:	d102      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
          frequency = HSI_VALUE;
 800717a:	4b83      	ldr	r3, [pc, #524]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
 800717e:	e011      	b.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007180:	4b80      	ldr	r3, [pc, #512]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8007182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b02      	cmp	r3, #2
 800718c:	d106      	bne.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	2b0c      	cmp	r3, #12
 8007192:	d103      	bne.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          frequency = LSE_VALUE;
 8007194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007198:	637b      	str	r3, [r7, #52]	; 0x34
 800719a:	e003      	b.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071a0:	f000 bd73 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80071a4:	f000 bd71 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80071a8:	4b76      	ldr	r3, [pc, #472]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80071aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071b2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d104      	bne.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80071ba:	f7fe ff87 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 80071be:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80071c0:	f000 bd63 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	2b10      	cmp	r3, #16
 80071c8:	d104      	bne.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = HAL_RCC_GetSysClockFreq();
 80071ca:	f7fe fe5d 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 80071ce:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80071d0:	f000 bd5b 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80071d4:	4b6b      	ldr	r3, [pc, #428]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e0:	d105      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	2b20      	cmp	r3, #32
 80071e6:	d102      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
          frequency = HSI_VALUE;
 80071e8:	4b67      	ldr	r3, [pc, #412]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 80071ea:	637b      	str	r3, [r7, #52]	; 0x34
 80071ec:	e011      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80071ee:	4b65      	ldr	r3, [pc, #404]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80071f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d106      	bne.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	2b30      	cmp	r3, #48	; 0x30
 8007200:	d103      	bne.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = LSE_VALUE;
 8007202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007206:	637b      	str	r3, [r7, #52]	; 0x34
 8007208:	e003      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800720e:	f000 bd3c 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007212:	f000 bd3a 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007216:	4b5b      	ldr	r3, [pc, #364]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8007218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800721c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007220:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	2b00      	cmp	r3, #0
 8007226:	d104      	bne.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007228:	f7fe ff50 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 800722c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800722e:	f000 bd2c 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	2b40      	cmp	r3, #64	; 0x40
 8007236:	d104      	bne.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
          frequency = HAL_RCC_GetSysClockFreq();
 8007238:	f7fe fe26 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 800723c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800723e:	f000 bd24 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007242:	4b50      	ldr	r3, [pc, #320]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800724a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800724e:	d105      	bne.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	2b80      	cmp	r3, #128	; 0x80
 8007254:	d102      	bne.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HSI_VALUE;
 8007256:	4b4c      	ldr	r3, [pc, #304]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8007258:	637b      	str	r3, [r7, #52]	; 0x34
 800725a:	e011      	b.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800725c:	4b49      	ldr	r3, [pc, #292]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800725e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b02      	cmp	r3, #2
 8007268:	d106      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	2bc0      	cmp	r3, #192	; 0xc0
 800726e:	d103      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          frequency = LSE_VALUE;
 8007270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007274:	637b      	str	r3, [r7, #52]	; 0x34
 8007276:	e003      	b.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
          frequency = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800727c:	f000 bd05 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007280:	f000 bd03 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007284:	4b3f      	ldr	r3, [pc, #252]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8007286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800728a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800728e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007292:	2b00      	cmp	r3, #0
 8007294:	d104      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007296:	f7fe ff19 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 800729a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800729c:	f000 bcf5 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80072a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072a6:	d104      	bne.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
          frequency = HAL_RCC_GetSysClockFreq();
 80072a8:	f7fe fdee 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 80072ac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80072ae:	f000 bcec 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80072b2:	4b34      	ldr	r3, [pc, #208]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072be:	d106      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 80072c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c6:	d102      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
          frequency = HSI_VALUE;
 80072c8:	4b2f      	ldr	r3, [pc, #188]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 80072ca:	637b      	str	r3, [r7, #52]	; 0x34
 80072cc:	e012      	b.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80072ce:	4b2d      	ldr	r3, [pc, #180]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80072d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d107      	bne.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80072dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072e2:	d103      	bne.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x838>
          frequency = LSE_VALUE;
 80072e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072e8:	637b      	str	r3, [r7, #52]	; 0x34
 80072ea:	e003      	b.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
          frequency = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072f0:	f000 bccb 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80072f4:	f000 bcc9 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80072f8:	4b22      	ldr	r3, [pc, #136]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80072fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80072fe:	f003 0307 	and.w	r3, r3, #7
 8007302:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007306:	2b00      	cmp	r3, #0
 8007308:	d104      	bne.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800730a:	f7fe ff07 	bl	800611c <HAL_RCC_GetPCLK3Freq>
 800730e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007310:	f000 bcbb 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	2b01      	cmp	r3, #1
 8007318:	d104      	bne.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 800731a:	f7fe fdb5 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 800731e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007320:	f000 bcb3 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007324:	4b17      	ldr	r3, [pc, #92]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800732c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007330:	d105      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	2b02      	cmp	r3, #2
 8007336:	d102      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HSI_VALUE;
 8007338:	4b13      	ldr	r3, [pc, #76]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800733a:	637b      	str	r3, [r7, #52]	; 0x34
 800733c:	e036      	b.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800733e:	4b11      	ldr	r3, [pc, #68]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8007340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b02      	cmp	r3, #2
 800734a:	d106      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	2b03      	cmp	r3, #3
 8007350:	d103      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
          frequency = LSE_VALUE;
 8007352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007356:	637b      	str	r3, [r7, #52]	; 0x34
 8007358:	e028      	b.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800735a:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0320 	and.w	r3, r3, #32
 8007362:	2b20      	cmp	r3, #32
 8007364:	d11e      	bne.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	2b04      	cmp	r3, #4
 800736a:	d11b      	bne.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d009      	beq.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8007378:	4b02      	ldr	r3, [pc, #8]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	0e1b      	lsrs	r3, r3, #24
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	e00a      	b.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007384:	46020c00 	.word	0x46020c00
 8007388:	00f42400 	.word	0x00f42400
 800738c:	4bb0      	ldr	r3, [pc, #704]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800738e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007392:	041b      	lsls	r3, r3, #16
 8007394:	0e1b      	lsrs	r3, r3, #24
 8007396:	f003 030f 	and.w	r3, r3, #15
 800739a:	4aae      	ldr	r2, [pc, #696]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 800739c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073a0:	637b      	str	r3, [r7, #52]	; 0x34
 80073a2:	e003      	b.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073a8:	f000 bc6f 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80073ac:	f000 bc6d 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_ADCDAC:

        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80073b0:	4ba7      	ldr	r3, [pc, #668]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80073b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80073b6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80073ba:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c2:	d104      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        {
          frequency = HAL_RCC_GetSysClockFreq();
 80073c4:	f7fe fd60 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 80073c8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADC */
        else
        {
          frequency = 0U;
        }
        break;
 80073ca:	f000 bc5e 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d4:	d108      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073d6:	f107 0318 	add.w	r3, r7, #24
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff f89e 	bl	800651c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073e4:	f000 bc51 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d104      	bne.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetHCLKFreq();
 80073ee:	f7fe fe53 	bl	8006098 <HAL_RCC_GetHCLKFreq>
 80073f2:	6378      	str	r0, [r7, #52]	; 0x34
          break;
 80073f4:	f000 bc49 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80073fe:	d118      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007400:	4b93      	ldr	r3, [pc, #588]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800740c:	4b90      	ldr	r3, [pc, #576]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	0f1b      	lsrs	r3, r3, #28
 8007412:	f003 030f 	and.w	r3, r3, #15
 8007416:	e006      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8007418:	4b8d      	ldr	r3, [pc, #564]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800741a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800741e:	041b      	lsls	r3, r3, #16
 8007420:	0f1b      	lsrs	r3, r3, #28
 8007422:	f003 030f 	and.w	r3, r3, #15
 8007426:	4a8b      	ldr	r2, [pc, #556]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 8007428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800742c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800742e:	f000 bc2c 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007432:	4b87      	ldr	r3, [pc, #540]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800743a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800743e:	d106      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007446:	d102      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
          frequency = HSE_VALUE;
 8007448:	4b83      	ldr	r3, [pc, #524]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 800744a:	637b      	str	r3, [r7, #52]	; 0x34
 800744c:	e011      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800744e:	4b80      	ldr	r3, [pc, #512]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800745a:	d106      	bne.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007462:	d102      	bne.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
          frequency = HSI_VALUE;
 8007464:	4b7c      	ldr	r3, [pc, #496]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 8007466:	637b      	str	r3, [r7, #52]	; 0x34
 8007468:	e003      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
          frequency = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800746e:	f000 bc0c 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007472:	f000 bc0a 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_MDF1:
        /* Get the current MDF1 source */
        srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007476:	4b76      	ldr	r3, [pc, #472]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007478:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800747c:	f003 0307 	and.w	r3, r3, #7
 8007480:	633b      	str	r3, [r7, #48]	; 0x30
 8007482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007484:	2b04      	cmp	r3, #4
 8007486:	d83d      	bhi.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8007488:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	080074c5 	.word	0x080074c5
 8007494:	080074a5 	.word	0x080074a5
 8007498:	080074b5 	.word	0x080074b5
 800749c:	080074cd 	.word	0x080074cd
 80074a0:	080074d5 	.word	0x080074d5

        switch (srcclk)
        {
          case RCC_MDF1CLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fe fed1 	bl	8006250 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074b2:	e02a      	b.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_PLL3:

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074b4:	f107 030c 	add.w	r3, r7, #12
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff f995 	bl	80067e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_Q_Frequency;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074c2:	e022      	b.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_HCLK:

            frequency = HAL_RCC_GetHCLKFreq();
 80074c4:	f7fe fde8 	bl	8006098 <HAL_RCC_GetHCLKFreq>
 80074c8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80074ca:	e01e      	b.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80074cc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80074d0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074d2:	e01a      	b.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074d4:	4b5e      	ldr	r3, [pc, #376]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80074e0:	4b5b      	ldr	r3, [pc, #364]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	0e1b      	lsrs	r3, r3, #24
 80074e6:	f003 030f 	and.w	r3, r3, #15
 80074ea:	e006      	b.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80074ec:	4b58      	ldr	r3, [pc, #352]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80074ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074f2:	041b      	lsls	r3, r3, #16
 80074f4:	0e1b      	lsrs	r3, r3, #24
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	4a56      	ldr	r2, [pc, #344]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 80074fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007500:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007502:	e002      	b.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          default:

            frequency = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007508:	bf00      	nop

        }
        break;
 800750a:	e3be      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_ADF1:
        /* Get the current ADF1 source */
        srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800750c:	4b50      	ldr	r3, [pc, #320]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800750e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007512:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007516:	633b      	str	r3, [r7, #48]	; 0x30
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800751e:	d032      	beq.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007526:	d846      	bhi.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800752e:	d026      	beq.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007536:	d83e      	bhi.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800753e:	d012      	beq.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007546:	d836      	bhi.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 8007548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754a:	2b00      	cmp	r3, #0
 800754c:	d013      	beq.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007554:	d12f      	bne.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>

        switch (srcclk)
        {
          case RCC_ADF1CLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800755a:	4618      	mov	r0, r3
 800755c:	f7fe fe78 	bl	8006250 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007564:	e02a      	b.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_PLL3:

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007566:	f107 030c 	add.w	r3, r7, #12
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff f93c 	bl	80067e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_Q_Frequency;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007574:	e022      	b.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_HCLK:

            frequency = HAL_RCC_GetHCLKFreq();
 8007576:	f7fe fd8f 	bl	8006098 <HAL_RCC_GetHCLKFreq>
 800757a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800757c:	e01e      	b.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800757e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007582:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007584:	e01a      	b.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007586:	4b32      	ldr	r3, [pc, #200]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d005      	beq.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 8007592:	4b2f      	ldr	r3, [pc, #188]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	0e1b      	lsrs	r3, r3, #24
 8007598:	f003 030f 	and.w	r3, r3, #15
 800759c:	e006      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800759e:	4b2c      	ldr	r3, [pc, #176]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80075a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075a4:	041b      	lsls	r3, r3, #16
 80075a6:	0e1b      	lsrs	r3, r3, #24
 80075a8:	f003 030f 	and.w	r3, r3, #15
 80075ac:	4a29      	ldr	r2, [pc, #164]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 80075ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075b4:	e002      	b.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          default:

            frequency = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075ba:	bf00      	nop
        }
        break;
 80075bc:	e365      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80075be:	4b24      	ldr	r3, [pc, #144]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80075c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075c8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d103      	bne.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80075d0:	f7fe fd7c 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 80075d4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80075d6:	e358      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075de:	d103      	bne.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          frequency = HAL_RCC_GetSysClockFreq();
 80075e0:	f7fe fc52 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 80075e4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80075e6:	e350      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80075e8:	4b19      	ldr	r3, [pc, #100]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075f4:	d106      	bne.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075fc:	d102      	bne.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
          frequency = HSI_VALUE;
 80075fe:	4b16      	ldr	r3, [pc, #88]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 8007600:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007602:	e342      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007608:	e33f      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800760a:	4b11      	ldr	r3, [pc, #68]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800760c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007610:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007614:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	2b00      	cmp	r3, #0
 800761a:	d103      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800761c:	f7fe fd56 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 8007620:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007622:	e332      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800762a:	d103      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          frequency = HAL_RCC_GetSysClockFreq();
 800762c:	f7fe fc2c 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8007630:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007632:	e32a      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007634:	4b06      	ldr	r3, [pc, #24]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800763c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007640:	d10c      	bne.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007648:	d108      	bne.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
          frequency = HSI_VALUE;
 800764a:	4b03      	ldr	r3, [pc, #12]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800764e:	e31c      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007650:	46020c00 	.word	0x46020c00
 8007654:	0800bbcc 	.word	0x0800bbcc
 8007658:	00f42400 	.word	0x00f42400
          frequency = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007660:	e313      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007662:	4ba9      	ldr	r3, [pc, #676]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007664:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007668:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800766c:	633b      	str	r3, [r7, #48]	; 0x30
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	2bc0      	cmp	r3, #192	; 0xc0
 8007672:	d024      	beq.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	2bc0      	cmp	r3, #192	; 0xc0
 8007678:	d839      	bhi.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	2b80      	cmp	r3, #128	; 0x80
 800767e:	d00d      	beq.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	2b80      	cmp	r3, #128	; 0x80
 8007684:	d833      	bhi.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d011      	beq.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
 8007692:	e02c      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>

        switch (srcclk)
        {
          case RCC_I2C3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007694:	f7fe fd42 	bl	800611c <HAL_RCC_GetPCLK3Freq>
 8007698:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800769a:	e02b      	b.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_HSI:
          {
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800769c:	4b9a      	ldr	r3, [pc, #616]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a8:	d102      	bne.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
            {
              frequency = HSI_VALUE;
 80076aa:	4b98      	ldr	r3, [pc, #608]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 80076ac:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 80076ae:	e021      	b.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
              frequency = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076b4:	e01e      	b.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_SYSCLK:
          {
            frequency = HAL_RCC_GetSysClockFreq();
 80076b6:	f7fe fbe7 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 80076ba:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80076bc:	e01a      	b.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_MSIK:
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80076be:	4b92      	ldr	r3, [pc, #584]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80076ca:	4b8f      	ldr	r3, [pc, #572]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	0f1b      	lsrs	r3, r3, #28
 80076d0:	f003 030f 	and.w	r3, r3, #15
 80076d4:	e006      	b.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc30>
 80076d6:	4b8c      	ldr	r3, [pc, #560]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80076d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076dc:	041b      	lsls	r3, r3, #16
 80076de:	0f1b      	lsrs	r3, r3, #28
 80076e0:	f003 030f 	and.w	r3, r3, #15
 80076e4:	4a8a      	ldr	r2, [pc, #552]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 80076e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076ec:	e002      	b.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          default:
          {
            frequency = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076f2:	bf00      	nop
          }
        }
        break;
 80076f4:	e2c9      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80076f6:	4b84      	ldr	r3, [pc, #528]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80076f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007700:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	2b00      	cmp	r3, #0
 8007706:	d103      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007708:	f7fe fce0 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 800770c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800770e:	e2bc      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007712:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007716:	d103      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
          frequency = HAL_RCC_GetSysClockFreq();
 8007718:	f7fe fbb6 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 800771c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800771e:	e2b4      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007720:	4b79      	ldr	r3, [pc, #484]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800772c:	d106      	bne.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0xc88>
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007734:	d102      	bne.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0xc88>
          frequency = HSI_VALUE;
 8007736:	4b75      	ldr	r3, [pc, #468]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 8007738:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800773a:	e2a6      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 800773c:	2300      	movs	r3, #0
 800773e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007740:	e2a3      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM34:
        /* Get the current LPTIM34 source */
        srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007742:	4b71      	ldr	r3, [pc, #452]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800774c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	2b00      	cmp	r3, #0
 8007752:	d117      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007754:	4b6c      	ldr	r3, [pc, #432]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d005      	beq.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
 8007760:	4b69      	ldr	r3, [pc, #420]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	0e1b      	lsrs	r3, r3, #24
 8007766:	f003 030f 	and.w	r3, r3, #15
 800776a:	e006      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
 800776c:	4b66      	ldr	r3, [pc, #408]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800776e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007772:	041b      	lsls	r3, r3, #16
 8007774:	0e1b      	lsrs	r3, r3, #24
 8007776:	f003 030f 	and.w	r3, r3, #15
 800777a:	4a65      	ldr	r2, [pc, #404]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 800777c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007780:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM34 */
        else
        {
          frequency = 0U;
        }
        break;
 8007782:	e282      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007784:	4b60      	ldr	r3, [pc, #384]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800778a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800778e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007792:	d107      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
 8007794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800779a:	d103      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
          frequency = LSI_VALUE;
 800779c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80077a0:	637b      	str	r3, [r7, #52]	; 0x34
 80077a2:	e01f      	b.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80077a4:	4b58      	ldr	r3, [pc, #352]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077b0:	d106      	bne.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077b8:	d102      	bne.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
          frequency = HSI_VALUE;
 80077ba:	4b54      	ldr	r3, [pc, #336]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 80077bc:	637b      	str	r3, [r7, #52]	; 0x34
 80077be:	e011      	b.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80077c0:	4b51      	ldr	r3, [pc, #324]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80077c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d107      	bne.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077d4:	d103      	bne.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = LSE_VALUE;
 80077d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077da:	637b      	str	r3, [r7, #52]	; 0x34
 80077dc:	e002      	b.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
          frequency = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077e2:	e252      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80077e4:	e251      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80077e6:	4b48      	ldr	r3, [pc, #288]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80077e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80077ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80077f0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d117      	bne.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80077f8:	4b43      	ldr	r3, [pc, #268]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d005      	beq.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>
 8007804:	4b40      	ldr	r3, [pc, #256]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	0e1b      	lsrs	r3, r3, #24
 800780a:	f003 030f 	and.w	r3, r3, #15
 800780e:	e006      	b.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
 8007810:	4b3d      	ldr	r3, [pc, #244]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007812:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007816:	041b      	lsls	r3, r3, #16
 8007818:	0e1b      	lsrs	r3, r3, #24
 800781a:	f003 030f 	and.w	r3, r3, #15
 800781e:	4a3c      	ldr	r2, [pc, #240]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 8007820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007824:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007826:	e230      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007828:	4b37      	ldr	r3, [pc, #220]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800782a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800782e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007836:	d107      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800783e:	d103      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
          frequency = LSI_VALUE;
 8007840:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007844:	637b      	str	r3, [r7, #52]	; 0x34
 8007846:	e01f      	b.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007848:	4b2f      	ldr	r3, [pc, #188]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007854:	d106      	bne.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800785c:	d102      	bne.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
          frequency = HSI_VALUE;
 800785e:	4b2b      	ldr	r3, [pc, #172]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 8007860:	637b      	str	r3, [r7, #52]	; 0x34
 8007862:	e011      	b.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007864:	4b28      	ldr	r3, [pc, #160]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b02      	cmp	r3, #2
 8007870:	d107      	bne.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007878:	d103      	bne.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
          frequency = LSE_VALUE;
 800787a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800787e:	637b      	str	r3, [r7, #52]	; 0x34
 8007880:	e002      	b.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
          frequency = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007886:	e200      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007888:	e1ff      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800788a:	4b1f      	ldr	r3, [pc, #124]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800788c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007890:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007894:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	2b00      	cmp	r3, #0
 800789a:	d103      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800789c:	f7fe fc16 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 80078a0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM2 */
        else
        {
          frequency = 0U;
        }
        break;
 80078a2:	e1f2      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80078a4:	4b18      	ldr	r3, [pc, #96]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80078a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078b2:	d107      	bne.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
 80078b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078ba:	d103      	bne.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
          frequency = LSI_VALUE;
 80078bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80078c0:	637b      	str	r3, [r7, #52]	; 0x34
 80078c2:	e01f      	b.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80078c4:	4b10      	ldr	r3, [pc, #64]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d0:	d106      	bne.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 80078d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80078d8:	d102      	bne.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HSI_VALUE;
 80078da:	4b0c      	ldr	r3, [pc, #48]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 80078dc:	637b      	str	r3, [r7, #52]	; 0x34
 80078de:	e011      	b.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80078e0:	4b09      	ldr	r3, [pc, #36]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80078e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d107      	bne.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80078f4:	d103      	bne.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = LSE_VALUE;
 80078f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078fa:	637b      	str	r3, [r7, #52]	; 0x34
 80078fc:	e002      	b.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
          frequency = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007902:	e1c2      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007904:	e1c1      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007906:	bf00      	nop
 8007908:	46020c00 	.word	0x46020c00
 800790c:	00f42400 	.word	0x00f42400
 8007910:	0800bbcc 	.word	0x0800bbcc

      case RCC_PERIPHCLK_FDCAN1:
        /* Get the current FDCAN1 kernel source */
        srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007914:	4bb0      	ldr	r3, [pc, #704]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800791a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800791e:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007920:	4bad      	ldr	r3, [pc, #692]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800792c:	d105      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	2b00      	cmp	r3, #0
 8007932:	d102      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
        {
          frequency = HSE_VALUE;
 8007934:	4ba9      	ldr	r3, [pc, #676]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007938:	e1a7      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007940:	d107      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe fc82 	bl	8006250 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007950:	e19b      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007954:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007958:	d107      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xeb6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800795a:	f107 0318 	add.w	r3, r7, #24
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe fddc 	bl	800651c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007968:	e18f      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800796e:	e18c      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007970:	4b99      	ldr	r3, [pc, #612]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007976:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800797a:	633b      	str	r3, [r7, #48]	; 0x30
 800797c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007982:	d028      	beq.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800798a:	d83c      	bhi.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007992:	d013      	beq.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800799a:	d834      	bhi.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d004      	beq.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079a8:	d004      	beq.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 80079aa:	e02c      	b.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PCLK2:

            frequency = HAL_RCC_GetPCLK2Freq();
 80079ac:	f7fe fba2 	bl	80060f4 <HAL_RCC_GetPCLK2Freq>
 80079b0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80079b2:	e02b      	b.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 80079b4:	f7fe fa68 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 80079b8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80079ba:	e027      	b.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079bc:	4b86      	ldr	r3, [pc, #536]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c8:	d102      	bne.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
            {
              frequency = HSI_VALUE;
 80079ca:	4b84      	ldr	r3, [pc, #528]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80079cc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 80079ce:	e01d      	b.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>
              frequency = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079d4:	e01a      	b.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079d6:	4b80      	ldr	r3, [pc, #512]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d005      	beq.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80079e2:	4b7d      	ldr	r3, [pc, #500]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	0e1b      	lsrs	r3, r3, #24
 80079e8:	f003 030f 	and.w	r3, r3, #15
 80079ec:	e006      	b.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 80079ee:	4b7a      	ldr	r3, [pc, #488]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80079f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079f4:	041b      	lsls	r3, r3, #16
 80079f6:	0e1b      	lsrs	r3, r3, #24
 80079f8:	f003 030f 	and.w	r3, r3, #15
 80079fc:	4a78      	ldr	r2, [pc, #480]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 80079fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a02:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a04:	e002      	b.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          default:

            frequency = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a0a:	bf00      	nop

        }
        break;
 8007a0c:	e13d      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007a0e:	4b72      	ldr	r3, [pc, #456]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a18:	633b      	str	r3, [r7, #48]	; 0x30
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a20:	d028      	beq.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0xfc0>
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a28:	d83c      	bhi.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a30:	d013      	beq.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0xfa6>
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a38:	d834      	bhi.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d004      	beq.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0xf96>
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a46:	d004      	beq.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0xf9e>
 8007a48:	e02c      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PCLK1:

            frequency = HAL_RCC_GetPCLK1Freq();
 8007a4a:	f7fe fb3f 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 8007a4e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007a50:	e02b      	b.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 8007a52:	f7fe fa19 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8007a56:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007a58:	e027      	b.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a5a:	4b5f      	ldr	r3, [pc, #380]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a66:	d102      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
            {
              frequency = HSI_VALUE;
 8007a68:	4b5c      	ldr	r3, [pc, #368]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8007a6a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8007a6c:	e01d      	b.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0xff6>
              frequency = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a72:	e01a      	b.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a74:	4b58      	ldr	r3, [pc, #352]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007a80:	4b55      	ldr	r3, [pc, #340]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	0e1b      	lsrs	r3, r3, #24
 8007a86:	f003 030f 	and.w	r3, r3, #15
 8007a8a:	e006      	b.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0xfe6>
 8007a8c:	4b52      	ldr	r3, [pc, #328]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a92:	041b      	lsls	r3, r3, #16
 8007a94:	0e1b      	lsrs	r3, r3, #24
 8007a96:	f003 030f 	and.w	r3, r3, #15
 8007a9a:	4a51      	ldr	r2, [pc, #324]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 8007a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007aa2:	e002      	b.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          default:

            frequency = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007aa8:	bf00      	nop

        }
        break;
 8007aaa:	e0ee      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007aac:	4b4a      	ldr	r3, [pc, #296]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ab2:	f003 0318 	and.w	r3, r3, #24
 8007ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aba:	2b18      	cmp	r3, #24
 8007abc:	d861      	bhi.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
 8007abe:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac4:	08007b29 	.word	0x08007b29
 8007ac8:	08007b83 	.word	0x08007b83
 8007acc:	08007b83 	.word	0x08007b83
 8007ad0:	08007b83 	.word	0x08007b83
 8007ad4:	08007b83 	.word	0x08007b83
 8007ad8:	08007b83 	.word	0x08007b83
 8007adc:	08007b83 	.word	0x08007b83
 8007ae0:	08007b83 	.word	0x08007b83
 8007ae4:	08007b31 	.word	0x08007b31
 8007ae8:	08007b83 	.word	0x08007b83
 8007aec:	08007b83 	.word	0x08007b83
 8007af0:	08007b83 	.word	0x08007b83
 8007af4:	08007b83 	.word	0x08007b83
 8007af8:	08007b83 	.word	0x08007b83
 8007afc:	08007b83 	.word	0x08007b83
 8007b00:	08007b83 	.word	0x08007b83
 8007b04:	08007b39 	.word	0x08007b39
 8007b08:	08007b83 	.word	0x08007b83
 8007b0c:	08007b83 	.word	0x08007b83
 8007b10:	08007b83 	.word	0x08007b83
 8007b14:	08007b83 	.word	0x08007b83
 8007b18:	08007b83 	.word	0x08007b83
 8007b1c:	08007b83 	.word	0x08007b83
 8007b20:	08007b83 	.word	0x08007b83
 8007b24:	08007b53 	.word	0x08007b53
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PCLK3:

            frequency = HAL_RCC_GetPCLK3Freq();
 8007b28:	f7fe faf8 	bl	800611c <HAL_RCC_GetPCLK3Freq>
 8007b2c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007b2e:	e02b      	b.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 8007b30:	f7fe f9aa 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8007b34:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007b36:	e027      	b.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b38:	4b27      	ldr	r3, [pc, #156]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b44:	d102      	bne.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
            {
              frequency = HSI_VALUE;
 8007b46:	4b25      	ldr	r3, [pc, #148]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8007b4a:	e01d      	b.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
              frequency = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b50:	e01a      	b.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b52:	4b21      	ldr	r3, [pc, #132]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x10b6>
 8007b5e:	4b1e      	ldr	r3, [pc, #120]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	0e1b      	lsrs	r3, r3, #24
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	e006      	b.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8007b6a:	4b1b      	ldr	r3, [pc, #108]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007b6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b70:	041b      	lsls	r3, r3, #16
 8007b72:	0e1b      	lsrs	r3, r3, #24
 8007b74:	f003 030f 	and.w	r3, r3, #15
 8007b78:	4a19      	ldr	r2, [pc, #100]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 8007b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b7e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b80:	e002      	b.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          default:

            frequency = 0U;
 8007b82:	2300      	movs	r3, #0
 8007b84:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b86:	bf00      	nop
        }
        break;
 8007b88:	e07f      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007b8a:	4b13      	ldr	r3, [pc, #76]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007b8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007b90:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b94:	633b      	str	r3, [r7, #48]	; 0x30
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b9c:	d013      	beq.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ba4:	d842      	bhi.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bac:	d01a      	beq.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1130>
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bb4:	d83a      	bhi.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d01b      	beq.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1140>
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bc2:	d01b      	beq.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1148>
 8007bc4:	e032      	b.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1178>

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_PLL2:

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bc6:	f107 0318 	add.w	r3, r7, #24
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fe fca6 	bl	800651c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007bd4:	e02d      	b.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8007bd6:	bf00      	nop
 8007bd8:	46020c00 	.word	0x46020c00
 8007bdc:	00f42400 	.word	0x00f42400
 8007be0:	0800bbcc 	.word	0x0800bbcc

          case RCC_OSPICLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fe fb31 	bl	8006250 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007bf2:	e01e      	b.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          case RCC_OSPICLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 8007bf4:	f7fe f948 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8007bf8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007bfa:	e01a      	b.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          case RCC_OSPICLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bfc:	4b25      	ldr	r3, [pc, #148]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d005      	beq.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1160>
 8007c08:	4b22      	ldr	r3, [pc, #136]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	0e1b      	lsrs	r3, r3, #24
 8007c0e:	f003 030f 	and.w	r3, r3, #15
 8007c12:	e006      	b.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x116e>
 8007c14:	4b1f      	ldr	r3, [pc, #124]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 8007c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c1a:	041b      	lsls	r3, r3, #16
 8007c1c:	0e1b      	lsrs	r3, r3, #24
 8007c1e:	f003 030f 	and.w	r3, r3, #15
 8007c22:	4a1d      	ldr	r2, [pc, #116]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 8007c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c2a:	e002      	b.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          default:

            frequency = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c30:	bf00      	nop
        }
        break;
 8007c32:	e02a      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_DAC1:
        /* Get the current DAC1 kernel source */
        srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007c34:	4b17      	ldr	r3, [pc, #92]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 8007c36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c3e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Check if LSE is ready and if DAC1 clock selection is LSE */
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007c40:	4b14      	ldr	r3, [pc, #80]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 8007c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c46:	f003 0302 	and.w	r3, r3, #2
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d106      	bne.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d103      	bne.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
        {
          frequency = LSE_VALUE;
 8007c54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c58:	637b      	str	r3, [r7, #52]	; 0x34
 8007c5a:	e012      	b.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
        }
        /* Check if LSI is ready and if DAC1 clock selection is LSI */
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007c5c:	4b0d      	ldr	r3, [pc, #52]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 8007c5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c6a:	d107      	bne.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c72:	d103      	bne.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
        {
          frequency = LSI_VALUE;
 8007c74:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c78:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7a:	e002      	b.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
        }
        /* Clock not enabled for DAC1*/
        else
        {
          frequency = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007c80:	e003      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007c82:	e002      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      default:
         frequency = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c88:	bf00      	nop
    }
  }
  return (frequency);
 8007c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3738      	adds	r7, #56	; 0x38
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	46020c00 	.word	0x46020c00
 8007c98:	0800bbcc 	.word	0x0800bbcc

08007c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e042      	b.n	8007d34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d106      	bne.n	8007cc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f83b 	bl	8007d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2224      	movs	r2, #36	; 0x24
 8007cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f022 0201 	bic.w	r2, r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f8cc 	bl	8007e7c <UART_SetConfig>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d101      	bne.n	8007cee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e022      	b.n	8007d34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa42 	bl	8008180 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fac9 	bl	80082c4 <UART_CheckIdleState>
 8007d32:	4603      	mov	r3, r0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08a      	sub	sp, #40	; 0x28
 8007d54:	af02      	add	r7, sp, #8
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	f040 8083 	bne.w	8007e72 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <HAL_UART_Transmit+0x28>
 8007d72:	88fb      	ldrh	r3, [r7, #6]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e07b      	b.n	8007e74 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d101      	bne.n	8007d8a <HAL_UART_Transmit+0x3a>
 8007d86:	2302      	movs	r3, #2
 8007d88:	e074      	b.n	8007e74 <HAL_UART_Transmit+0x124>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2221      	movs	r2, #33	; 0x21
 8007d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007da2:	f7fb fda7 	bl	80038f4 <HAL_GetTick>
 8007da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	88fa      	ldrh	r2, [r7, #6]
 8007dac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	88fa      	ldrh	r2, [r7, #6]
 8007db4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc0:	d108      	bne.n	8007dd4 <HAL_UART_Transmit+0x84>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d104      	bne.n	8007dd4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	61bb      	str	r3, [r7, #24]
 8007dd2:	e003      	b.n	8007ddc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007de4:	e02c      	b.n	8007e40 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2200      	movs	r2, #0
 8007dee:	2180      	movs	r1, #128	; 0x80
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 fab2 	bl	800835a <UART_WaitOnFlagUntilTimeout>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e039      	b.n	8007e74 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10b      	bne.n	8007e1e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	3302      	adds	r3, #2
 8007e1a:	61bb      	str	r3, [r7, #24]
 8007e1c:	e007      	b.n	8007e2e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	781a      	ldrb	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1cc      	bne.n	8007de6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	2200      	movs	r2, #0
 8007e54:	2140      	movs	r1, #64	; 0x40
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 fa7f 	bl	800835a <UART_WaitOnFlagUntilTimeout>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e006      	b.n	8007e74 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e000      	b.n	8007e74 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007e72:	2302      	movs	r3, #2
  }
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3720      	adds	r7, #32
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e7c:	b5b0      	push	{r4, r5, r7, lr}
 8007e7e:	b08a      	sub	sp, #40	; 0x28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	77fb      	strb	r3, [r7, #31]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a94      	ldr	r2, [pc, #592]	; (80080e0 <UART_SetConfig+0x264>)
 8007e8e:	4293      	cmp	r3, r2
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	69db      	ldr	r3, [r3, #28]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4b8d      	ldr	r3, [pc, #564]	; (80080e4 <UART_SetConfig+0x268>)
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6812      	ldr	r2, [r2, #0]
 8007eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007eb8:	430b      	orrs	r3, r1
 8007eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a80      	ldr	r2, [pc, #512]	; (80080e0 <UART_SetConfig+0x264>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d009      	beq.n	8007ef6 <UART_SetConfig+0x7a>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a80      	ldr	r2, [pc, #512]	; (80080e8 <UART_SetConfig+0x26c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d004      	beq.n	8007ef6 <UART_SetConfig+0x7a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a1b      	ldr	r3, [r3, #32]
 8007ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007f00:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	6812      	ldr	r2, [r2, #0]
 8007f08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f0a:	430b      	orrs	r3, r1
 8007f0c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	f023 010f 	bic.w	r1, r3, #15
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a70      	ldr	r2, [pc, #448]	; (80080ec <UART_SetConfig+0x270>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d102      	bne.n	8007f34 <UART_SetConfig+0xb8>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	623b      	str	r3, [r7, #32]
 8007f32:	e029      	b.n	8007f88 <UART_SetConfig+0x10c>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a6d      	ldr	r2, [pc, #436]	; (80080f0 <UART_SetConfig+0x274>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d102      	bne.n	8007f44 <UART_SetConfig+0xc8>
 8007f3e:	2302      	movs	r3, #2
 8007f40:	623b      	str	r3, [r7, #32]
 8007f42:	e021      	b.n	8007f88 <UART_SetConfig+0x10c>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a6a      	ldr	r2, [pc, #424]	; (80080f4 <UART_SetConfig+0x278>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d102      	bne.n	8007f54 <UART_SetConfig+0xd8>
 8007f4e:	2304      	movs	r3, #4
 8007f50:	623b      	str	r3, [r7, #32]
 8007f52:	e019      	b.n	8007f88 <UART_SetConfig+0x10c>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a67      	ldr	r2, [pc, #412]	; (80080f8 <UART_SetConfig+0x27c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d102      	bne.n	8007f64 <UART_SetConfig+0xe8>
 8007f5e:	2308      	movs	r3, #8
 8007f60:	623b      	str	r3, [r7, #32]
 8007f62:	e011      	b.n	8007f88 <UART_SetConfig+0x10c>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a64      	ldr	r2, [pc, #400]	; (80080fc <UART_SetConfig+0x280>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d102      	bne.n	8007f74 <UART_SetConfig+0xf8>
 8007f6e:	2310      	movs	r3, #16
 8007f70:	623b      	str	r3, [r7, #32]
 8007f72:	e009      	b.n	8007f88 <UART_SetConfig+0x10c>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a59      	ldr	r2, [pc, #356]	; (80080e0 <UART_SetConfig+0x264>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d102      	bne.n	8007f84 <UART_SetConfig+0x108>
 8007f7e:	2320      	movs	r3, #32
 8007f80:	623b      	str	r3, [r7, #32]
 8007f82:	e001      	b.n	8007f88 <UART_SetConfig+0x10c>
 8007f84:	2300      	movs	r3, #0
 8007f86:	623b      	str	r3, [r7, #32]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a54      	ldr	r2, [pc, #336]	; (80080e0 <UART_SetConfig+0x264>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d004      	beq.n	8007f9c <UART_SetConfig+0x120>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a54      	ldr	r2, [pc, #336]	; (80080e8 <UART_SetConfig+0x26c>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d163      	bne.n	8008064 <UART_SetConfig+0x1e8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007f9c:	6a38      	ldr	r0, [r7, #32]
 8007f9e:	f7fe fd89 	bl	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007fa2:	61b8      	str	r0, [r7, #24]

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 80d4 	beq.w	8008154 <UART_SetConfig+0x2d8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb0:	4a53      	ldr	r2, [pc, #332]	; (8008100 <UART_SetConfig+0x284>)
 8007fb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	4413      	add	r3, r2
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d305      	bcc.n	8007fdc <UART_SetConfig+0x160>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d902      	bls.n	8007fe2 <UART_SetConfig+0x166>
      {
        ret = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	77fb      	strb	r3, [r7, #31]
 8007fe0:	e03f      	b.n	8008062 <UART_SetConfig+0x1e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f04f 0100 	mov.w	r1, #0
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fee:	4a44      	ldr	r2, [pc, #272]	; (8008100 <UART_SetConfig+0x284>)
 8007ff0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	f04f 0300 	mov.w	r3, #0
 8007ffa:	f7f8 fe21 	bl	8000c40 <__aeabi_uldivmod>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	4610      	mov	r0, r2
 8008004:	4619      	mov	r1, r3
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	020b      	lsls	r3, r1, #8
 8008010:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008014:	0202      	lsls	r2, r0, #8
 8008016:	6879      	ldr	r1, [r7, #4]
 8008018:	6849      	ldr	r1, [r1, #4]
 800801a:	0849      	lsrs	r1, r1, #1
 800801c:	4608      	mov	r0, r1
 800801e:	f04f 0100 	mov.w	r1, #0
 8008022:	1814      	adds	r4, r2, r0
 8008024:	eb43 0501 	adc.w	r5, r3, r1
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	461a      	mov	r2, r3
 800802e:	f04f 0300 	mov.w	r3, #0
 8008032:	4620      	mov	r0, r4
 8008034:	4629      	mov	r1, r5
 8008036:	f7f8 fe03 	bl	8000c40 <__aeabi_uldivmod>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4613      	mov	r3, r2
 8008040:	617b      	str	r3, [r7, #20]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008048:	d308      	bcc.n	800805c <UART_SetConfig+0x1e0>
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008050:	d204      	bcs.n	800805c <UART_SetConfig+0x1e0>
        {
          huart->Instance->BRR = usartdiv;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	60da      	str	r2, [r3, #12]
 800805a:	e002      	b.n	8008062 <UART_SetConfig+0x1e6>
        }
        else
        {
          ret = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	77fb      	strb	r3, [r7, #31]
    if (pclk != 0U)
 8008060:	e078      	b.n	8008154 <UART_SetConfig+0x2d8>
 8008062:	e077      	b.n	8008154 <UART_SetConfig+0x2d8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	69db      	ldr	r3, [r3, #28]
 8008068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800806c:	d14a      	bne.n	8008104 <UART_SetConfig+0x288>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800806e:	6a38      	ldr	r0, [r7, #32]
 8008070:	f7fe fd20 	bl	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008074:	61b8      	str	r0, [r7, #24]

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d06b      	beq.n	8008154 <UART_SetConfig+0x2d8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	4a1f      	ldr	r2, [pc, #124]	; (8008100 <UART_SetConfig+0x284>)
 8008082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008086:	461a      	mov	r2, r3
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	fbb3 f3f2 	udiv	r3, r3, r2
 800808e:	005a      	lsls	r2, r3, #1
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	085b      	lsrs	r3, r3, #1
 8008096:	441a      	add	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	617b      	str	r3, [r7, #20]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2b0f      	cmp	r3, #15
 80080a8:	d916      	bls.n	80080d8 <UART_SetConfig+0x25c>
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080b0:	d212      	bcs.n	80080d8 <UART_SetConfig+0x25c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	f023 030f 	bic.w	r3, r3, #15
 80080ba:	827b      	strh	r3, [r7, #18]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	085b      	lsrs	r3, r3, #1
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	f003 0307 	and.w	r3, r3, #7
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	8a7b      	ldrh	r3, [r7, #18]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	827b      	strh	r3, [r7, #18]
        huart->Instance->BRR = brrtemp;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	8a7a      	ldrh	r2, [r7, #18]
 80080d4:	60da      	str	r2, [r3, #12]
 80080d6:	e03d      	b.n	8008154 <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	77fb      	strb	r3, [r7, #31]
 80080dc:	e03a      	b.n	8008154 <UART_SetConfig+0x2d8>
 80080de:	bf00      	nop
 80080e0:	46002400 	.word	0x46002400
 80080e4:	cfff69f3 	.word	0xcfff69f3
 80080e8:	56002400 	.word	0x56002400
 80080ec:	40013800 	.word	0x40013800
 80080f0:	40004400 	.word	0x40004400
 80080f4:	40004800 	.word	0x40004800
 80080f8:	40004c00 	.word	0x40004c00
 80080fc:	40005000 	.word	0x40005000
 8008100:	0800bca0 	.word	0x0800bca0
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008104:	6a38      	ldr	r0, [r7, #32]
 8008106:	f7fe fcd5 	bl	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq>
 800810a:	61b8      	str	r0, [r7, #24]

    if (pclk != 0U)
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d020      	beq.n	8008154 <UART_SetConfig+0x2d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	4a19      	ldr	r2, [pc, #100]	; (800817c <UART_SetConfig+0x300>)
 8008118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800811c:	461a      	mov	r2, r3
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	fbb3 f2f2 	udiv	r2, r3, r2
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	085b      	lsrs	r3, r3, #1
 800812a:	441a      	add	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	fbb2 f3f3 	udiv	r3, r2, r3
 8008134:	b29b      	uxth	r3, r3
 8008136:	617b      	str	r3, [r7, #20]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	2b0f      	cmp	r3, #15
 800813c:	d908      	bls.n	8008150 <UART_SetConfig+0x2d4>
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008144:	d204      	bcs.n	8008150 <UART_SetConfig+0x2d4>
      {
        huart->Instance->BRR = usartdiv;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	60da      	str	r2, [r3, #12]
 800814e:	e001      	b.n	8008154 <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	77fb      	strb	r3, [r7, #31]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008170:	7ffb      	ldrb	r3, [r7, #31]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3728      	adds	r7, #40	; 0x28
 8008176:	46bd      	mov	sp, r7
 8008178:	bdb0      	pop	{r4, r5, r7, pc}
 800817a:	bf00      	nop
 800817c:	0800bca0 	.word	0x0800bca0

08008180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00a      	beq.n	80081aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00a      	beq.n	80081ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f2:	f003 0308 	and.w	r3, r3, #8
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00a      	beq.n	8008210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008214:	f003 0310 	and.w	r3, r3, #16
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00a      	beq.n	8008232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00a      	beq.n	8008254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	430a      	orrs	r2, r1
 8008252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825c:	2b00      	cmp	r3, #0
 800825e:	d01a      	beq.n	8008296 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800827a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800827e:	d10a      	bne.n	8008296 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00a      	beq.n	80082b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	430a      	orrs	r2, r1
 80082b6:	605a      	str	r2, [r3, #4]
  }
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af02      	add	r7, sp, #8
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082d4:	f7fb fb0e 	bl	80038f4 <HAL_GetTick>
 80082d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	d10e      	bne.n	8008306 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f82f 	bl	800835a <UART_WaitOnFlagUntilTimeout>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e025      	b.n	8008352 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b04      	cmp	r3, #4
 8008312:	d10e      	bne.n	8008332 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008314:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f819 	bl	800835a <UART_WaitOnFlagUntilTimeout>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e00f      	b.n	8008352 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2220      	movs	r2, #32
 8008336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2220      	movs	r2, #32
 800833e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b09c      	sub	sp, #112	; 0x70
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	603b      	str	r3, [r7, #0]
 8008366:	4613      	mov	r3, r2
 8008368:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800836a:	e0a9      	b.n	80084c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800836c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800836e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008372:	f000 80a5 	beq.w	80084c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008376:	f7fb fabd 	bl	80038f4 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008382:	429a      	cmp	r2, r3
 8008384:	d302      	bcc.n	800838c <UART_WaitOnFlagUntilTimeout+0x32>
 8008386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008388:	2b00      	cmp	r3, #0
 800838a:	d140      	bne.n	800840e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008394:	e853 3f00 	ldrex	r3, [r3]
 8008398:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800839a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800839c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083a0:	667b      	str	r3, [r7, #100]	; 0x64
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	461a      	mov	r2, r3
 80083a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80083b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1e6      	bne.n	800838c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3308      	adds	r3, #8
 80083c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d0:	f023 0301 	bic.w	r3, r3, #1
 80083d4:	663b      	str	r3, [r7, #96]	; 0x60
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	3308      	adds	r3, #8
 80083dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083de:	64ba      	str	r2, [r7, #72]	; 0x48
 80083e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1e5      	bne.n	80083be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2220      	movs	r2, #32
 80083f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2220      	movs	r2, #32
 80083fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e069      	b.n	80084e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0304 	and.w	r3, r3, #4
 8008418:	2b00      	cmp	r3, #0
 800841a:	d051      	beq.n	80084c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800842a:	d149      	bne.n	80084c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008434:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	e853 3f00 	ldrex	r3, [r3]
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800844a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	461a      	mov	r2, r3
 8008452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008454:	637b      	str	r3, [r7, #52]	; 0x34
 8008456:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800845a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800845c:	e841 2300 	strex	r3, r2, [r1]
 8008460:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e6      	bne.n	8008436 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3308      	adds	r3, #8
 800846e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	e853 3f00 	ldrex	r3, [r3]
 8008476:	613b      	str	r3, [r7, #16]
   return(result);
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f023 0301 	bic.w	r3, r3, #1
 800847e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3308      	adds	r3, #8
 8008486:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008488:	623a      	str	r2, [r7, #32]
 800848a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	69f9      	ldr	r1, [r7, #28]
 800848e:	6a3a      	ldr	r2, [r7, #32]
 8008490:	e841 2300 	strex	r3, r2, [r1]
 8008494:	61bb      	str	r3, [r7, #24]
   return(result);
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1e5      	bne.n	8008468 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2220      	movs	r2, #32
 80084a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2220      	movs	r2, #32
 80084a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2220      	movs	r2, #32
 80084b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e010      	b.n	80084e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	69da      	ldr	r2, [r3, #28]
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	4013      	ands	r3, r2
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	bf0c      	ite	eq
 80084d0:	2301      	moveq	r3, #1
 80084d2:	2300      	movne	r3, #0
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	461a      	mov	r2, r3
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	429a      	cmp	r2, r3
 80084dc:	f43f af46 	beq.w	800836c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3770      	adds	r7, #112	; 0x70
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b085      	sub	sp, #20
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d101      	bne.n	8008500 <HAL_UARTEx_DisableFifoMode+0x16>
 80084fc:	2302      	movs	r3, #2
 80084fe:	e027      	b.n	8008550 <HAL_UARTEx_DisableFifoMode+0x66>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2224      	movs	r2, #36	; 0x24
 800850c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f022 0201 	bic.w	r2, r2, #1
 8008526:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800852e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2220      	movs	r2, #32
 8008542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800856c:	2b01      	cmp	r3, #1
 800856e:	d101      	bne.n	8008574 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008570:	2302      	movs	r3, #2
 8008572:	e02d      	b.n	80085d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2224      	movs	r2, #36	; 0x24
 8008580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0201 	bic.w	r2, r2, #1
 800859a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f84f 	bl	8008654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2220      	movs	r2, #32
 80085c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d101      	bne.n	80085f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80085ec:	2302      	movs	r3, #2
 80085ee:	e02d      	b.n	800864c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2224      	movs	r2, #36	; 0x24
 80085fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f022 0201 	bic.w	r2, r2, #1
 8008616:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	430a      	orrs	r2, r1
 800862a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f811 	bl	8008654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2220      	movs	r2, #32
 800863e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008660:	2b00      	cmp	r3, #0
 8008662:	d108      	bne.n	8008676 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008674:	e031      	b.n	80086da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008676:	2308      	movs	r3, #8
 8008678:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800867a:	2308      	movs	r3, #8
 800867c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	0e5b      	lsrs	r3, r3, #25
 8008686:	b2db      	uxtb	r3, r3
 8008688:	f003 0307 	and.w	r3, r3, #7
 800868c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	0f5b      	lsrs	r3, r3, #29
 8008696:	b2db      	uxtb	r3, r3
 8008698:	f003 0307 	and.w	r3, r3, #7
 800869c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	7b3a      	ldrb	r2, [r7, #12]
 80086a2:	4911      	ldr	r1, [pc, #68]	; (80086e8 <UARTEx_SetNbDataToProcess+0x94>)
 80086a4:	5c8a      	ldrb	r2, [r1, r2]
 80086a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80086aa:	7b3a      	ldrb	r2, [r7, #12]
 80086ac:	490f      	ldr	r1, [pc, #60]	; (80086ec <UARTEx_SetNbDataToProcess+0x98>)
 80086ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
 80086be:	7b7a      	ldrb	r2, [r7, #13]
 80086c0:	4909      	ldr	r1, [pc, #36]	; (80086e8 <UARTEx_SetNbDataToProcess+0x94>)
 80086c2:	5c8a      	ldrb	r2, [r1, r2]
 80086c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80086c8:	7b7a      	ldrb	r2, [r7, #13]
 80086ca:	4908      	ldr	r1, [pc, #32]	; (80086ec <UARTEx_SetNbDataToProcess+0x98>)
 80086cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80086da:	bf00      	nop
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	0800bcb8 	.word	0x0800bcb8
 80086ec:	0800bcc0 	.word	0x0800bcc0

080086f0 <MX_MEMS_Init>:
static void Motion_Magneto_Sensor_Handler(uint32_t Instance);
static void MX_DataLogTerminal_Init(void);
static void MX_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DataLogTerminal_Init();
 80086f4:	f000 f808 	bl	8008708 <MX_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 80086f8:	bf00      	nop
 80086fa:	bd80      	pop	{r7, pc}

080086fc <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_DataLogTerminal_Process();
 8008700:	f000 f944 	bl	800898c <MX_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8008704:	bf00      	nop
 8008706:	bd80      	pop	{r7, pc}

08008708 <MX_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_DataLogTerminal_Init(void)
{
 8008708:	b5b0      	push	{r4, r5, r7, lr}
 800870a:	b088      	sub	sp, #32
 800870c:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 800870e:	2000      	movs	r0, #0
 8008710:	f7f8 fe20 	bl	8001354 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8008714:	2101      	movs	r1, #1
 8008716:	2000      	movs	r0, #0
 8008718:	f7f8 fe36 	bl	8001388 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 800871c:	2000      	movs	r0, #0
 800871e:	f7f8 fe8d 	bl	800143c <BSP_PB_GetState>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	bf0c      	ite	eq
 8008728:	2301      	moveq	r3, #1
 800872a:	2300      	movne	r3, #0
 800872c:	b2db      	uxtb	r3, r3
 800872e:	461a      	mov	r2, r3
 8008730:	4b83      	ldr	r3, [pc, #524]	; (8008940 <MX_DataLogTerminal_Init+0x238>)
 8008732:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8008734:	2000      	movs	r0, #0
 8008736:	f7f8 feab 	bl	8001490 <BSP_COM_Init>

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 800873a:	4a82      	ldr	r2, [pc, #520]	; (8008944 <MX_DataLogTerminal_Init+0x23c>)
 800873c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008740:	4881      	ldr	r0, [pc, #516]	; (8008948 <MX_DataLogTerminal_Init+0x240>)
 8008742:	f001 ff81 	bl	800a648 <sniprintf>
  printf("%s", dataOut);
 8008746:	4980      	ldr	r1, [pc, #512]	; (8008948 <MX_DataLogTerminal_Init+0x240>)
 8008748:	4880      	ldr	r0, [pc, #512]	; (800894c <MX_DataLogTerminal_Init+0x244>)
 800874a:	f001 ff65 	bl	800a618 <iprintf>

  CUSTOM_MOTION_SENSOR_Init(CUSTOM_ISM330DHCX_0, MOTION_ACCELERO | MOTION_GYRO);
 800874e:	2103      	movs	r1, #3
 8008750:	2000      	movs	r0, #0
 8008752:	f000 fc53 	bl	8008ffc <CUSTOM_MOTION_SENSOR_Init>

  CUSTOM_MOTION_SENSOR_SetOutputDataRate(CUSTOM_ISM330DHCX_0, MOTION_ACCELERO, ISM330DHCX_ACC_ODR);
 8008756:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8008950 <MX_DataLogTerminal_Init+0x248>
 800875a:	2102      	movs	r1, #2
 800875c:	2000      	movs	r0, #0
 800875e:	f000 fdf5 	bl	800934c <CUSTOM_MOTION_SENSOR_SetOutputDataRate>

  CUSTOM_MOTION_SENSOR_SetFullScale(CUSTOM_ISM330DHCX_0, MOTION_ACCELERO, ISM330DHCX_ACC_FS);
 8008762:	2210      	movs	r2, #16
 8008764:	2102      	movs	r1, #2
 8008766:	2000      	movs	r0, #0
 8008768:	f000 fe36 	bl	80093d8 <CUSTOM_MOTION_SENSOR_SetFullScale>

  CUSTOM_MOTION_SENSOR_SetOutputDataRate(CUSTOM_ISM330DHCX_0, MOTION_GYRO, ISM330DHCX_GYRO_ODR);
 800876c:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8008950 <MX_DataLogTerminal_Init+0x248>
 8008770:	2101      	movs	r1, #1
 8008772:	2000      	movs	r0, #0
 8008774:	f000 fdea 	bl	800934c <CUSTOM_MOTION_SENSOR_SetOutputDataRate>

  CUSTOM_MOTION_SENSOR_SetFullScale(CUSTOM_ISM330DHCX_0, MOTION_GYRO, ISM330DHCX_GYRO_FS);
 8008778:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800877c:	2101      	movs	r1, #1
 800877e:	2000      	movs	r0, #0
 8008780:	f000 fe2a 	bl	80093d8 <CUSTOM_MOTION_SENSOR_SetFullScale>

  for(i = 0; i < CUSTOM_MOTION_INSTANCES_NBR; i++)
 8008784:	2300      	movs	r3, #0
 8008786:	60fb      	str	r3, [r7, #12]
 8008788:	e0c3      	b.n	8008912 <MX_DataLogTerminal_Init+0x20a>
  {
    CUSTOM_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	4613      	mov	r3, r2
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	1a9b      	subs	r3, r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4a6f      	ldr	r2, [pc, #444]	; (8008954 <MX_DataLogTerminal_Init+0x24c>)
 8008798:	4413      	add	r3, r2
 800879a:	4619      	mov	r1, r3
 800879c:	f000 fcb6 	bl	800910c <CUSTOM_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80087a0:	496c      	ldr	r1, [pc, #432]	; (8008954 <MX_DataLogTerminal_Init+0x24c>)
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4613      	mov	r3, r2
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	1a9b      	subs	r3, r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	440b      	add	r3, r1
 80087ae:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80087b0:	4618      	mov	r0, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80087b2:	4968      	ldr	r1, [pc, #416]	; (8008954 <MX_DataLogTerminal_Init+0x24c>)
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	4613      	mov	r3, r2
 80087b8:	00db      	lsls	r3, r3, #3
 80087ba:	1a9b      	subs	r3, r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	440b      	add	r3, r1
 80087c0:	3301      	adds	r3, #1
 80087c2:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80087c4:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80087c6:	4963      	ldr	r1, [pc, #396]	; (8008954 <MX_DataLogTerminal_Init+0x24c>)
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	4613      	mov	r3, r2
 80087cc:	00db      	lsls	r3, r3, #3
 80087ce:	1a9b      	subs	r3, r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	440b      	add	r3, r1
 80087d4:	3302      	adds	r3, #2
 80087d6:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80087d8:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80087da:	495e      	ldr	r1, [pc, #376]	; (8008954 <MX_DataLogTerminal_Init+0x24c>)
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	4613      	mov	r3, r2
 80087e0:	00db      	lsls	r3, r3, #3
 80087e2:	1a9b      	subs	r3, r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	440b      	add	r3, r1
 80087e8:	3303      	adds	r3, #3
 80087ea:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80087ec:	9303      	str	r3, [sp, #12]
 80087ee:	9502      	str	r5, [sp, #8]
 80087f0:	9401      	str	r4, [sp, #4]
 80087f2:	9000      	str	r0, [sp, #0]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4a58      	ldr	r2, [pc, #352]	; (8008958 <MX_DataLogTerminal_Init+0x250>)
 80087f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80087fc:	4852      	ldr	r0, [pc, #328]	; (8008948 <MX_DataLogTerminal_Init+0x240>)
 80087fe:	f001 ff23 	bl	800a648 <sniprintf>
    printf("%s", dataOut);
 8008802:	4951      	ldr	r1, [pc, #324]	; (8008948 <MX_DataLogTerminal_Init+0x240>)
 8008804:	4851      	ldr	r0, [pc, #324]	; (800894c <MX_DataLogTerminal_Init+0x244>)
 8008806:	f001 ff07 	bl	800a618 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 800880a:	4952      	ldr	r1, [pc, #328]	; (8008954 <MX_DataLogTerminal_Init+0x24c>)
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	4613      	mov	r3, r2
 8008810:	00db      	lsls	r3, r3, #3
 8008812:	1a9b      	subs	r3, r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	440b      	add	r3, r1
 8008818:	3314      	adds	r3, #20
 800881a:	edd3 7a00 	vldr	s15, [r3]
 800881e:	463b      	mov	r3, r7
 8008820:	2103      	movs	r1, #3
 8008822:	4618      	mov	r0, r3
 8008824:	eeb0 0a67 	vmov.f32	s0, s15
 8008828:	f000 f91e 	bl	8008a68 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8008830:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8008832:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8008834:	4947      	ldr	r1, [pc, #284]	; (8008954 <MX_DataLogTerminal_Init+0x24c>)
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	4613      	mov	r3, r2
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	1a9b      	subs	r3, r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	440b      	add	r3, r1
 8008842:	3308      	adds	r3, #8
 8008844:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	9000      	str	r0, [sp, #0]
 800884a:	4623      	mov	r3, r4
 800884c:	4a43      	ldr	r2, [pc, #268]	; (800895c <MX_DataLogTerminal_Init+0x254>)
 800884e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008852:	483d      	ldr	r0, [pc, #244]	; (8008948 <MX_DataLogTerminal_Init+0x240>)
 8008854:	f001 fef8 	bl	800a648 <sniprintf>
    printf("%s", dataOut);
 8008858:	493b      	ldr	r1, [pc, #236]	; (8008948 <MX_DataLogTerminal_Init+0x240>)
 800885a:	483c      	ldr	r0, [pc, #240]	; (800894c <MX_DataLogTerminal_Init+0x244>)
 800885c:	f001 fedc 	bl	800a618 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 8008860:	493c      	ldr	r1, [pc, #240]	; (8008954 <MX_DataLogTerminal_Init+0x24c>)
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	4613      	mov	r3, r2
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	1a9b      	subs	r3, r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	440b      	add	r3, r1
 800886e:	3310      	adds	r3, #16
 8008870:	edd3 7a00 	vldr	s15, [r3]
 8008874:	463b      	mov	r3, r7
 8008876:	2103      	movs	r1, #3
 8008878:	4618      	mov	r0, r3
 800887a:	eeb0 0a67 	vmov.f32	s0, s15
 800887e:	f000 f8f3 	bl	8008a68 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8008886:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8008888:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800888a:	4932      	ldr	r1, [pc, #200]	; (8008954 <MX_DataLogTerminal_Init+0x24c>)
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4613      	mov	r3, r2
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	1a9b      	subs	r3, r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	440b      	add	r3, r1
 8008898:	3304      	adds	r3, #4
 800889a:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	9000      	str	r0, [sp, #0]
 80088a0:	4623      	mov	r3, r4
 80088a2:	4a2f      	ldr	r2, [pc, #188]	; (8008960 <MX_DataLogTerminal_Init+0x258>)
 80088a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80088a8:	4827      	ldr	r0, [pc, #156]	; (8008948 <MX_DataLogTerminal_Init+0x240>)
 80088aa:	f001 fecd 	bl	800a648 <sniprintf>
    printf("%s", dataOut);
 80088ae:	4926      	ldr	r1, [pc, #152]	; (8008948 <MX_DataLogTerminal_Init+0x240>)
 80088b0:	4826      	ldr	r0, [pc, #152]	; (800894c <MX_DataLogTerminal_Init+0x244>)
 80088b2:	f001 feb1 	bl	800a618 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 80088b6:	4927      	ldr	r1, [pc, #156]	; (8008954 <MX_DataLogTerminal_Init+0x24c>)
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	4613      	mov	r3, r2
 80088bc:	00db      	lsls	r3, r3, #3
 80088be:	1a9b      	subs	r3, r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	440b      	add	r3, r1
 80088c4:	3318      	adds	r3, #24
 80088c6:	edd3 7a00 	vldr	s15, [r3]
 80088ca:	463b      	mov	r3, r7
 80088cc:	2103      	movs	r1, #3
 80088ce:	4618      	mov	r0, r3
 80088d0:	eeb0 0a67 	vmov.f32	s0, s15
 80088d4:	f000 f8c8 	bl	8008a68 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 80088dc:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 80088de:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 80088e0:	491c      	ldr	r1, [pc, #112]	; (8008954 <MX_DataLogTerminal_Init+0x24c>)
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	4613      	mov	r3, r2
 80088e6:	00db      	lsls	r3, r3, #3
 80088e8:	1a9b      	subs	r3, r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	440b      	add	r3, r1
 80088ee:	330c      	adds	r3, #12
 80088f0:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 80088f2:	9301      	str	r3, [sp, #4]
 80088f4:	9000      	str	r0, [sp, #0]
 80088f6:	4623      	mov	r3, r4
 80088f8:	4a1a      	ldr	r2, [pc, #104]	; (8008964 <MX_DataLogTerminal_Init+0x25c>)
 80088fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80088fe:	4812      	ldr	r0, [pc, #72]	; (8008948 <MX_DataLogTerminal_Init+0x240>)
 8008900:	f001 fea2 	bl	800a648 <sniprintf>
    printf("%s", dataOut);
 8008904:	4910      	ldr	r1, [pc, #64]	; (8008948 <MX_DataLogTerminal_Init+0x240>)
 8008906:	4811      	ldr	r0, [pc, #68]	; (800894c <MX_DataLogTerminal_Init+0x244>)
 8008908:	f001 fe86 	bl	800a618 <iprintf>
  for(i = 0; i < CUSTOM_MOTION_INSTANCES_NBR; i++)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3301      	adds	r3, #1
 8008910:	60fb      	str	r3, [r7, #12]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	f43f af38 	beq.w	800878a <MX_DataLogTerminal_Init+0x82>
  }

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nPlease wait...\r\n");
 800891a:	4a13      	ldr	r2, [pc, #76]	; (8008968 <MX_DataLogTerminal_Init+0x260>)
 800891c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008920:	4809      	ldr	r0, [pc, #36]	; (8008948 <MX_DataLogTerminal_Init+0x240>)
 8008922:	f001 fe91 	bl	800a648 <sniprintf>
  printf("%s", dataOut);
 8008926:	4908      	ldr	r1, [pc, #32]	; (8008948 <MX_DataLogTerminal_Init+0x240>)
 8008928:	4808      	ldr	r0, [pc, #32]	; (800894c <MX_DataLogTerminal_Init+0x244>)
 800892a:	f001 fe75 	bl	800a618 <iprintf>
  HAL_Delay(5000);
 800892e:	f241 3088 	movw	r0, #5000	; 0x1388
 8008932:	f7fa ffeb 	bl	800390c <HAL_Delay>
}
 8008936:	bf00      	nop
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bdb0      	pop	{r4, r5, r7, pc}
 800893e:	bf00      	nop
 8008940:	2000023c 	.word	0x2000023c
 8008944:	0800b8c8 	.word	0x0800b8c8
 8008948:	2000013c 	.word	0x2000013c
 800894c:	0800b918 	.word	0x0800b918
 8008950:	45d05800 	.word	0x45d05800
 8008954:	20000120 	.word	0x20000120
 8008958:	0800b91c 	.word	0x0800b91c
 800895c:	0800b990 	.word	0x0800b990
 8008960:	0800b9bc 	.word	0x0800b9bc
 8008964:	0800b9ec 	.word	0x0800b9ec
 8008968:	0800ba18 	.word	0x0800ba18

0800896c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	4603      	mov	r3, r0
 8008974:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8008976:	4b04      	ldr	r3, [pc, #16]	; (8008988 <BSP_PB_Callback+0x1c>)
 8008978:	2201      	movs	r2, #1
 800897a:	701a      	strb	r2, [r3, #0]
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	2000011c 	.word	0x2000011c

0800898c <MX_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_DataLogTerminal_Process(void)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
  int i;

  if (PushButtonDetected != 0U)
 8008992:	4b2f      	ldr	r3, [pc, #188]	; (8008a50 <MX_DataLogTerminal_Process+0xc4>)
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	d013      	beq.n	80089c4 <MX_DataLogTerminal_Process+0x38>
  {
    /* Debouncing */
    HAL_Delay(50);
 800899c:	2032      	movs	r0, #50	; 0x32
 800899e:	f7fa ffb5 	bl	800390c <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 80089a2:	bf00      	nop
 80089a4:	2000      	movs	r0, #0
 80089a6:	f7f8 fd49 	bl	800143c <BSP_PB_GetState>
 80089aa:	4602      	mov	r2, r0
 80089ac:	4b29      	ldr	r3, [pc, #164]	; (8008a54 <MX_DataLogTerminal_Process+0xc8>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d0f7      	beq.n	80089a4 <MX_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 80089b4:	2032      	movs	r0, #50	; 0x32
 80089b6:	f7fa ffa9 	bl	800390c <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 80089ba:	4b25      	ldr	r3, [pc, #148]	; (8008a50 <MX_DataLogTerminal_Process+0xc4>)
 80089bc:	2200      	movs	r2, #0
 80089be:	701a      	strb	r2, [r3, #0]

    MX_DataLogTerminal_Init();
 80089c0:	f7ff fea2 	bl	8008708 <MX_DataLogTerminal_Init>
  }

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 80089c4:	4a24      	ldr	r2, [pc, #144]	; (8008a58 <MX_DataLogTerminal_Process+0xcc>)
 80089c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80089ca:	4824      	ldr	r0, [pc, #144]	; (8008a5c <MX_DataLogTerminal_Process+0xd0>)
 80089cc:	f001 fe3c 	bl	800a648 <sniprintf>
  printf("%s", dataOut);
 80089d0:	4922      	ldr	r1, [pc, #136]	; (8008a5c <MX_DataLogTerminal_Process+0xd0>)
 80089d2:	4823      	ldr	r0, [pc, #140]	; (8008a60 <MX_DataLogTerminal_Process+0xd4>)
 80089d4:	f001 fe20 	bl	800a618 <iprintf>

  for(i = 0; i < CUSTOM_MOTION_INSTANCES_NBR; i++)
 80089d8:	2300      	movs	r3, #0
 80089da:	607b      	str	r3, [r7, #4]
 80089dc:	e02e      	b.n	8008a3c <MX_DataLogTerminal_Process+0xb0>
  {
    if(MotionCapabilities[i].Acc)
 80089de:	4921      	ldr	r1, [pc, #132]	; (8008a64 <MX_DataLogTerminal_Process+0xd8>)
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	4613      	mov	r3, r2
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	1a9b      	subs	r3, r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	440b      	add	r3, r1
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d003      	beq.n	80089fa <MX_DataLogTerminal_Process+0x6e>
    {
      Motion_Accelero_Sensor_Handler(i);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 f8c1 	bl	8008b7c <Motion_Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 80089fa:	491a      	ldr	r1, [pc, #104]	; (8008a64 <MX_DataLogTerminal_Process+0xd8>)
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	4613      	mov	r3, r2
 8008a00:	00db      	lsls	r3, r3, #3
 8008a02:	1a9b      	subs	r3, r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	440b      	add	r3, r1
 8008a08:	3301      	adds	r3, #1
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <MX_DataLogTerminal_Process+0x8c>
    {
      Motion_Gyro_Sensor_Handler(i);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 f972 	bl	8008cfc <Motion_Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 8008a18:	4912      	ldr	r1, [pc, #72]	; (8008a64 <MX_DataLogTerminal_Process+0xd8>)
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	00db      	lsls	r3, r3, #3
 8008a20:	1a9b      	subs	r3, r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	440b      	add	r3, r1
 8008a26:	3302      	adds	r3, #2
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <MX_DataLogTerminal_Process+0xaa>
    {
      Motion_Magneto_Sensor_Handler(i);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 fa23 	bl	8008e7c <Motion_Magneto_Sensor_Handler>
  for(i = 0; i < CUSTOM_MOTION_INSTANCES_NBR; i++)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	607b      	str	r3, [r7, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0cd      	beq.n	80089de <MX_DataLogTerminal_Process+0x52>
    }
  }

  HAL_Delay( 50 );
 8008a42:	2032      	movs	r0, #50	; 0x32
 8008a44:	f7fa ff62 	bl	800390c <HAL_Delay>
}
 8008a48:	bf00      	nop
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	2000011c 	.word	0x2000011c
 8008a54:	2000023c 	.word	0x2000023c
 8008a58:	0800b8c8 	.word	0x0800b8c8
 8008a5c:	2000013c 	.word	0x2000013c
 8008a60:	0800b918 	.word	0x0800b918
 8008a64:	20000120 	.word	0x20000120

08008a68 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8008a68:	b5b0      	push	{r4, r5, r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	ed87 0a03 	vstr	s0, [r7, #12]
 8008a72:	60b8      	str	r0, [r7, #8]
 8008a74:	6079      	str	r1, [r7, #4]
  if(in >= 0.0f)
 8008a76:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a82:	db03      	blt.n	8008a8c <floatToInt+0x24>
  {
    out_value->sign = 0;
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	2200      	movs	r2, #0
 8008a88:	701a      	strb	r2, [r3, #0]
 8008a8a:	e008      	b.n	8008a9e <floatToInt+0x36>
  }else
  {
    out_value->sign = 1;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	701a      	strb	r2, [r3, #0]
    in = -in;
 8008a92:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a96:	eef1 7a67 	vneg.f32	s15, s15
 8008a9a:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f7f7 fd4e 	bl	8000540 <__aeabi_f2d>
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	460d      	mov	r5, r1
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7f7 fd37 	bl	800051c <__aeabi_i2d>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	ec43 2b11 	vmov	d1, r2, r3
 8008ab6:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8008b70 <floatToInt+0x108>
 8008aba:	f000 fdbf 	bl	800963c <pow>
 8008abe:	ec53 2b10 	vmov	r2, r3, d0
 8008ac2:	f04f 0000 	mov.w	r0, #0
 8008ac6:	492c      	ldr	r1, [pc, #176]	; (8008b78 <floatToInt+0x110>)
 8008ac8:	f7f7 febc 	bl	8000844 <__aeabi_ddiv>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	f7f7 fbd6 	bl	8000284 <__adddf3>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	4610      	mov	r0, r2
 8008ade:	4619      	mov	r1, r3
 8008ae0:	f7f8 f85e 	bl	8000ba0 <__aeabi_d2f>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 8008ae8:	edd7 7a03 	vldr	s15, [r7, #12]
 8008aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008af0:	ee17 2a90 	vmov	r2, s15
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	ee07 3a90 	vmov	s15, r3
 8008b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b04:	ed97 7a03 	vldr	s14, [r7, #12]
 8008b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b0c:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f7f7 fd15 	bl	8000540 <__aeabi_f2d>
 8008b16:	4604      	mov	r4, r0
 8008b18:	460d      	mov	r5, r1
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7f7 fcfe 	bl	800051c <__aeabi_i2d>
 8008b20:	4602      	mov	r2, r0
 8008b22:	460b      	mov	r3, r1
 8008b24:	ec43 2b11 	vmov	d1, r2, r3
 8008b28:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8008b70 <floatToInt+0x108>
 8008b2c:	f000 fd86 	bl	800963c <pow>
 8008b30:	ec53 2b10 	vmov	r2, r3, d0
 8008b34:	4620      	mov	r0, r4
 8008b36:	4629      	mov	r1, r5
 8008b38:	f7f7 fd5a 	bl	80005f0 <__aeabi_dmul>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	ec43 2b17 	vmov	d7, r2, r3
 8008b44:	eeb0 0a47 	vmov.f32	s0, s14
 8008b48:	eef0 0a67 	vmov.f32	s1, s15
 8008b4c:	f000 fd44 	bl	80095d8 <trunc>
 8008b50:	ec53 2b10 	vmov	r2, r3, d0
 8008b54:	4610      	mov	r0, r2
 8008b56:	4619      	mov	r1, r3
 8008b58:	f7f7 fffa 	bl	8000b50 <__aeabi_d2iz>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	461a      	mov	r2, r3
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	609a      	str	r2, [r3, #8]
}
 8008b64:	bf00      	nop
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8008b6c:	f3af 8000 	nop.w
 8008b70:	00000000 	.word	0x00000000
 8008b74:	40240000 	.word	0x40240000
 8008b78:	3fe00000 	.word	0x3fe00000

08008b7c <Motion_Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Motion_Accelero_Sensor_Handler(uint32_t Instance)
{
 8008b7c:	b5b0      	push	{r4, r5, r7, lr}
 8008b7e:	b092      	sub	sp, #72	; 0x48
 8008b80:	af06      	add	r7, sp, #24
 8008b82:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  CUSTOM_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a51      	ldr	r2, [pc, #324]	; (8008ccc <Motion_Accelero_Sensor_Handler+0x150>)
 8008b88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b8c:	4850      	ldr	r0, [pc, #320]	; (8008cd0 <Motion_Accelero_Sensor_Handler+0x154>)
 8008b8e:	f001 fd5b 	bl	800a648 <sniprintf>
  printf("%s", dataOut);
 8008b92:	494f      	ldr	r1, [pc, #316]	; (8008cd0 <Motion_Accelero_Sensor_Handler+0x154>)
 8008b94:	484f      	ldr	r0, [pc, #316]	; (8008cd4 <Motion_Accelero_Sensor_Handler+0x158>)
 8008b96:	f001 fd3f 	bl	800a618 <iprintf>

  if (CUSTOM_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 8008b9a:	f107 031c 	add.w	r3, r7, #28
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	2102      	movs	r1, #2
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fb06 	bl	80091b4 <CUSTOM_MOTION_SENSOR_GetAxes>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d007      	beq.n	8008bbe <Motion_Accelero_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a49      	ldr	r2, [pc, #292]	; (8008cd8 <Motion_Accelero_Sensor_Handler+0x15c>)
 8008bb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008bb6:	4846      	ldr	r0, [pc, #280]	; (8008cd0 <Motion_Accelero_Sensor_Handler+0x154>)
 8008bb8:	f001 fd46 	bl	800a648 <sniprintf>
 8008bbc:	e011      	b.n	8008be2 <Motion_Accelero_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8008bbe:	687d      	ldr	r5, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8008bc0:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8008bc2:	687a      	ldr	r2, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8008bc4:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8008bc6:	6878      	ldr	r0, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8008bc8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8008bca:	9404      	str	r4, [sp, #16]
 8008bcc:	9003      	str	r0, [sp, #12]
 8008bce:	9102      	str	r1, [sp, #8]
 8008bd0:	9201      	str	r2, [sp, #4]
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	462b      	mov	r3, r5
 8008bd6:	4a41      	ldr	r2, [pc, #260]	; (8008cdc <Motion_Accelero_Sensor_Handler+0x160>)
 8008bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008bdc:	483c      	ldr	r0, [pc, #240]	; (8008cd0 <Motion_Accelero_Sensor_Handler+0x154>)
 8008bde:	f001 fd33 	bl	800a648 <sniprintf>
  }

  printf("%s", dataOut);
 8008be2:	493b      	ldr	r1, [pc, #236]	; (8008cd0 <Motion_Accelero_Sensor_Handler+0x154>)
 8008be4:	483b      	ldr	r0, [pc, #236]	; (8008cd4 <Motion_Accelero_Sensor_Handler+0x158>)
 8008be6:	f001 fd17 	bl	800a618 <iprintf>

  if (verbose == 1)
 8008bea:	4b3d      	ldr	r3, [pc, #244]	; (8008ce0 <Motion_Accelero_Sensor_Handler+0x164>)
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d168      	bne.n	8008cc4 <Motion_Accelero_Sensor_Handler+0x148>
  {
    if (CUSTOM_MOTION_SENSOR_ReadID(Instance, &whoami))
 8008bf2:	f107 030f 	add.w	r3, r7, #15
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fab1 	bl	8009160 <CUSTOM_MOTION_SENSOR_ReadID>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d007      	beq.n	8008c14 <Motion_Accelero_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a37      	ldr	r2, [pc, #220]	; (8008ce4 <Motion_Accelero_Sensor_Handler+0x168>)
 8008c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008c0c:	4830      	ldr	r0, [pc, #192]	; (8008cd0 <Motion_Accelero_Sensor_Handler+0x154>)
 8008c0e:	f001 fd1b 	bl	800a648 <sniprintf>
 8008c12:	e008      	b.n	8008c26 <Motion_Accelero_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	7bfa      	ldrb	r2, [r7, #15]
 8008c18:	9200      	str	r2, [sp, #0]
 8008c1a:	4a33      	ldr	r2, [pc, #204]	; (8008ce8 <Motion_Accelero_Sensor_Handler+0x16c>)
 8008c1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008c20:	482b      	ldr	r0, [pc, #172]	; (8008cd0 <Motion_Accelero_Sensor_Handler+0x154>)
 8008c22:	f001 fd11 	bl	800a648 <sniprintf>
    }

    printf("%s", dataOut);
 8008c26:	492a      	ldr	r1, [pc, #168]	; (8008cd0 <Motion_Accelero_Sensor_Handler+0x154>)
 8008c28:	482a      	ldr	r0, [pc, #168]	; (8008cd4 <Motion_Accelero_Sensor_Handler+0x158>)
 8008c2a:	f001 fcf5 	bl	800a618 <iprintf>

    if (CUSTOM_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 8008c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c32:	461a      	mov	r2, r3
 8008c34:	2102      	movs	r1, #2
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fb00 	bl	800923c <CUSTOM_MOTION_SENSOR_GetOutputDataRate>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d007      	beq.n	8008c52 <Motion_Accelero_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a29      	ldr	r2, [pc, #164]	; (8008cec <Motion_Accelero_Sensor_Handler+0x170>)
 8008c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008c4a:	4821      	ldr	r0, [pc, #132]	; (8008cd0 <Motion_Accelero_Sensor_Handler+0x154>)
 8008c4c:	f001 fcfc 	bl	800a648 <sniprintf>
 8008c50:	e014      	b.n	8008c7c <Motion_Accelero_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8008c52:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008c56:	f107 0310 	add.w	r3, r7, #16
 8008c5a:	2103      	movs	r1, #3
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8008c62:	f7ff ff01 	bl	8008a68 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8008c6a:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8008c6c:	9101      	str	r1, [sp, #4]
 8008c6e:	9200      	str	r2, [sp, #0]
 8008c70:	4a1f      	ldr	r2, [pc, #124]	; (8008cf0 <Motion_Accelero_Sensor_Handler+0x174>)
 8008c72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008c76:	4816      	ldr	r0, [pc, #88]	; (8008cd0 <Motion_Accelero_Sensor_Handler+0x154>)
 8008c78:	f001 fce6 	bl	800a648 <sniprintf>
    }

    printf("%s", dataOut);
 8008c7c:	4914      	ldr	r1, [pc, #80]	; (8008cd0 <Motion_Accelero_Sensor_Handler+0x154>)
 8008c7e:	4815      	ldr	r0, [pc, #84]	; (8008cd4 <Motion_Accelero_Sensor_Handler+0x158>)
 8008c80:	f001 fcca 	bl	800a618 <iprintf>

    if (CUSTOM_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 8008c84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c88:	461a      	mov	r2, r3
 8008c8a:	2102      	movs	r1, #2
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fb19 	bl	80092c4 <CUSTOM_MOTION_SENSOR_GetFullScale>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d007      	beq.n	8008ca8 <Motion_Accelero_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a16      	ldr	r2, [pc, #88]	; (8008cf4 <Motion_Accelero_Sensor_Handler+0x178>)
 8008c9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008ca0:	480b      	ldr	r0, [pc, #44]	; (8008cd0 <Motion_Accelero_Sensor_Handler+0x154>)
 8008ca2:	f001 fcd1 	bl	800a648 <sniprintf>
 8008ca6:	e009      	b.n	8008cbc <Motion_Accelero_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	4a11      	ldr	r2, [pc, #68]	; (8008cf8 <Motion_Accelero_Sensor_Handler+0x17c>)
 8008cb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008cb6:	4806      	ldr	r0, [pc, #24]	; (8008cd0 <Motion_Accelero_Sensor_Handler+0x154>)
 8008cb8:	f001 fcc6 	bl	800a648 <sniprintf>
    }

    printf("%s", dataOut);
 8008cbc:	4904      	ldr	r1, [pc, #16]	; (8008cd0 <Motion_Accelero_Sensor_Handler+0x154>)
 8008cbe:	4805      	ldr	r0, [pc, #20]	; (8008cd4 <Motion_Accelero_Sensor_Handler+0x158>)
 8008cc0:	f001 fcaa 	bl	800a618 <iprintf>
  }
}
 8008cc4:	bf00      	nop
 8008cc6:	3730      	adds	r7, #48	; 0x30
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bdb0      	pop	{r4, r5, r7, pc}
 8008ccc:	0800ba2c 	.word	0x0800ba2c
 8008cd0:	2000013c 	.word	0x2000013c
 8008cd4:	0800b918 	.word	0x0800b918
 8008cd8:	0800ba4c 	.word	0x0800ba4c
 8008cdc:	0800ba60 	.word	0x0800ba60
 8008ce0:	20000075 	.word	0x20000075
 8008ce4:	0800ba90 	.word	0x0800ba90
 8008ce8:	0800baa4 	.word	0x0800baa4
 8008cec:	0800bab8 	.word	0x0800bab8
 8008cf0:	0800bacc 	.word	0x0800bacc
 8008cf4:	0800bae4 	.word	0x0800bae4
 8008cf8:	0800baf4 	.word	0x0800baf4

08008cfc <Motion_Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Motion_Gyro_Sensor_Handler(uint32_t Instance)
{
 8008cfc:	b5b0      	push	{r4, r5, r7, lr}
 8008cfe:	b092      	sub	sp, #72	; 0x48
 8008d00:	af06      	add	r7, sp, #24
 8008d02:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  CUSTOM_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a51      	ldr	r2, [pc, #324]	; (8008e4c <Motion_Gyro_Sensor_Handler+0x150>)
 8008d08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d0c:	4850      	ldr	r0, [pc, #320]	; (8008e50 <Motion_Gyro_Sensor_Handler+0x154>)
 8008d0e:	f001 fc9b 	bl	800a648 <sniprintf>
  printf("%s", dataOut);
 8008d12:	494f      	ldr	r1, [pc, #316]	; (8008e50 <Motion_Gyro_Sensor_Handler+0x154>)
 8008d14:	484f      	ldr	r0, [pc, #316]	; (8008e54 <Motion_Gyro_Sensor_Handler+0x158>)
 8008d16:	f001 fc7f 	bl	800a618 <iprintf>

  if (CUSTOM_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 8008d1a:	f107 031c 	add.w	r3, r7, #28
 8008d1e:	461a      	mov	r2, r3
 8008d20:	2101      	movs	r1, #1
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fa46 	bl	80091b4 <CUSTOM_MOTION_SENSOR_GetAxes>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d007      	beq.n	8008d3e <Motion_Gyro_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a49      	ldr	r2, [pc, #292]	; (8008e58 <Motion_Gyro_Sensor_Handler+0x15c>)
 8008d32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d36:	4846      	ldr	r0, [pc, #280]	; (8008e50 <Motion_Gyro_Sensor_Handler+0x154>)
 8008d38:	f001 fc86 	bl	800a648 <sniprintf>
 8008d3c:	e011      	b.n	8008d62 <Motion_Gyro_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8008d3e:	687d      	ldr	r5, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8008d40:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8008d42:	687a      	ldr	r2, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8008d44:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8008d46:	6878      	ldr	r0, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8008d48:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8008d4a:	9404      	str	r4, [sp, #16]
 8008d4c:	9003      	str	r0, [sp, #12]
 8008d4e:	9102      	str	r1, [sp, #8]
 8008d50:	9201      	str	r2, [sp, #4]
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	462b      	mov	r3, r5
 8008d56:	4a41      	ldr	r2, [pc, #260]	; (8008e5c <Motion_Gyro_Sensor_Handler+0x160>)
 8008d58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d5c:	483c      	ldr	r0, [pc, #240]	; (8008e50 <Motion_Gyro_Sensor_Handler+0x154>)
 8008d5e:	f001 fc73 	bl	800a648 <sniprintf>
  }

  printf("%s", dataOut);
 8008d62:	493b      	ldr	r1, [pc, #236]	; (8008e50 <Motion_Gyro_Sensor_Handler+0x154>)
 8008d64:	483b      	ldr	r0, [pc, #236]	; (8008e54 <Motion_Gyro_Sensor_Handler+0x158>)
 8008d66:	f001 fc57 	bl	800a618 <iprintf>

  if (verbose == 1)
 8008d6a:	4b3d      	ldr	r3, [pc, #244]	; (8008e60 <Motion_Gyro_Sensor_Handler+0x164>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d168      	bne.n	8008e44 <Motion_Gyro_Sensor_Handler+0x148>
  {
    if (CUSTOM_MOTION_SENSOR_ReadID(Instance, &whoami))
 8008d72:	f107 030f 	add.w	r3, r7, #15
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f9f1 	bl	8009160 <CUSTOM_MOTION_SENSOR_ReadID>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d007      	beq.n	8008d94 <Motion_Gyro_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a37      	ldr	r2, [pc, #220]	; (8008e64 <Motion_Gyro_Sensor_Handler+0x168>)
 8008d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d8c:	4830      	ldr	r0, [pc, #192]	; (8008e50 <Motion_Gyro_Sensor_Handler+0x154>)
 8008d8e:	f001 fc5b 	bl	800a648 <sniprintf>
 8008d92:	e008      	b.n	8008da6 <Motion_Gyro_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	7bfa      	ldrb	r2, [r7, #15]
 8008d98:	9200      	str	r2, [sp, #0]
 8008d9a:	4a33      	ldr	r2, [pc, #204]	; (8008e68 <Motion_Gyro_Sensor_Handler+0x16c>)
 8008d9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008da0:	482b      	ldr	r0, [pc, #172]	; (8008e50 <Motion_Gyro_Sensor_Handler+0x154>)
 8008da2:	f001 fc51 	bl	800a648 <sniprintf>
    }

    printf("%s", dataOut);
 8008da6:	492a      	ldr	r1, [pc, #168]	; (8008e50 <Motion_Gyro_Sensor_Handler+0x154>)
 8008da8:	482a      	ldr	r0, [pc, #168]	; (8008e54 <Motion_Gyro_Sensor_Handler+0x158>)
 8008daa:	f001 fc35 	bl	800a618 <iprintf>

    if (CUSTOM_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 8008dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008db2:	461a      	mov	r2, r3
 8008db4:	2101      	movs	r1, #1
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fa40 	bl	800923c <CUSTOM_MOTION_SENSOR_GetOutputDataRate>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d007      	beq.n	8008dd2 <Motion_Gyro_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a29      	ldr	r2, [pc, #164]	; (8008e6c <Motion_Gyro_Sensor_Handler+0x170>)
 8008dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008dca:	4821      	ldr	r0, [pc, #132]	; (8008e50 <Motion_Gyro_Sensor_Handler+0x154>)
 8008dcc:	f001 fc3c 	bl	800a648 <sniprintf>
 8008dd0:	e014      	b.n	8008dfc <Motion_Gyro_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8008dd2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008dd6:	f107 0310 	add.w	r3, r7, #16
 8008dda:	2103      	movs	r1, #3
 8008ddc:	4618      	mov	r0, r3
 8008dde:	eeb0 0a67 	vmov.f32	s0, s15
 8008de2:	f7ff fe41 	bl	8008a68 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8008dea:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8008dec:	9101      	str	r1, [sp, #4]
 8008dee:	9200      	str	r2, [sp, #0]
 8008df0:	4a1f      	ldr	r2, [pc, #124]	; (8008e70 <Motion_Gyro_Sensor_Handler+0x174>)
 8008df2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008df6:	4816      	ldr	r0, [pc, #88]	; (8008e50 <Motion_Gyro_Sensor_Handler+0x154>)
 8008df8:	f001 fc26 	bl	800a648 <sniprintf>
    }

    printf("%s", dataOut);
 8008dfc:	4914      	ldr	r1, [pc, #80]	; (8008e50 <Motion_Gyro_Sensor_Handler+0x154>)
 8008dfe:	4815      	ldr	r0, [pc, #84]	; (8008e54 <Motion_Gyro_Sensor_Handler+0x158>)
 8008e00:	f001 fc0a 	bl	800a618 <iprintf>

    if (CUSTOM_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 8008e04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e08:	461a      	mov	r2, r3
 8008e0a:	2101      	movs	r1, #1
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fa59 	bl	80092c4 <CUSTOM_MOTION_SENSOR_GetFullScale>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d007      	beq.n	8008e28 <Motion_Gyro_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a16      	ldr	r2, [pc, #88]	; (8008e74 <Motion_Gyro_Sensor_Handler+0x178>)
 8008e1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e20:	480b      	ldr	r0, [pc, #44]	; (8008e50 <Motion_Gyro_Sensor_Handler+0x154>)
 8008e22:	f001 fc11 	bl	800a648 <sniprintf>
 8008e26:	e009      	b.n	8008e3c <Motion_Gyro_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	4a11      	ldr	r2, [pc, #68]	; (8008e78 <Motion_Gyro_Sensor_Handler+0x17c>)
 8008e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e36:	4806      	ldr	r0, [pc, #24]	; (8008e50 <Motion_Gyro_Sensor_Handler+0x154>)
 8008e38:	f001 fc06 	bl	800a648 <sniprintf>
    }

    printf("%s", dataOut);
 8008e3c:	4904      	ldr	r1, [pc, #16]	; (8008e50 <Motion_Gyro_Sensor_Handler+0x154>)
 8008e3e:	4805      	ldr	r0, [pc, #20]	; (8008e54 <Motion_Gyro_Sensor_Handler+0x158>)
 8008e40:	f001 fbea 	bl	800a618 <iprintf>
  }
}
 8008e44:	bf00      	nop
 8008e46:	3730      	adds	r7, #48	; 0x30
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8008e4c:	0800ba2c 	.word	0x0800ba2c
 8008e50:	2000013c 	.word	0x2000013c
 8008e54:	0800b918 	.word	0x0800b918
 8008e58:	0800bb04 	.word	0x0800bb04
 8008e5c:	0800bb18 	.word	0x0800bb18
 8008e60:	20000075 	.word	0x20000075
 8008e64:	0800ba90 	.word	0x0800ba90
 8008e68:	0800baa4 	.word	0x0800baa4
 8008e6c:	0800bab8 	.word	0x0800bab8
 8008e70:	0800bacc 	.word	0x0800bacc
 8008e74:	0800bae4 	.word	0x0800bae4
 8008e78:	0800bb48 	.word	0x0800bb48

08008e7c <Motion_Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Motion_Magneto_Sensor_Handler(uint32_t Instance)
{
 8008e7c:	b5b0      	push	{r4, r5, r7, lr}
 8008e7e:	b092      	sub	sp, #72	; 0x48
 8008e80:	af06      	add	r7, sp, #24
 8008e82:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  CUSTOM_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a51      	ldr	r2, [pc, #324]	; (8008fcc <Motion_Magneto_Sensor_Handler+0x150>)
 8008e88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e8c:	4850      	ldr	r0, [pc, #320]	; (8008fd0 <Motion_Magneto_Sensor_Handler+0x154>)
 8008e8e:	f001 fbdb 	bl	800a648 <sniprintf>
  printf("%s", dataOut);
 8008e92:	494f      	ldr	r1, [pc, #316]	; (8008fd0 <Motion_Magneto_Sensor_Handler+0x154>)
 8008e94:	484f      	ldr	r0, [pc, #316]	; (8008fd4 <Motion_Magneto_Sensor_Handler+0x158>)
 8008e96:	f001 fbbf 	bl	800a618 <iprintf>

  if (CUSTOM_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 8008e9a:	f107 031c 	add.w	r3, r7, #28
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	2104      	movs	r1, #4
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f986 	bl	80091b4 <CUSTOM_MOTION_SENSOR_GetAxes>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d007      	beq.n	8008ebe <Motion_Magneto_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a49      	ldr	r2, [pc, #292]	; (8008fd8 <Motion_Magneto_Sensor_Handler+0x15c>)
 8008eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008eb6:	4846      	ldr	r0, [pc, #280]	; (8008fd0 <Motion_Magneto_Sensor_Handler+0x154>)
 8008eb8:	f001 fbc6 	bl	800a648 <sniprintf>
 8008ebc:	e011      	b.n	8008ee2 <Motion_Magneto_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8008ebe:	687d      	ldr	r5, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8008ec0:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8008ec2:	687a      	ldr	r2, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8008ec4:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8008ec6:	6878      	ldr	r0, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8008ec8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8008eca:	9404      	str	r4, [sp, #16]
 8008ecc:	9003      	str	r0, [sp, #12]
 8008ece:	9102      	str	r1, [sp, #8]
 8008ed0:	9201      	str	r2, [sp, #4]
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	462b      	mov	r3, r5
 8008ed6:	4a41      	ldr	r2, [pc, #260]	; (8008fdc <Motion_Magneto_Sensor_Handler+0x160>)
 8008ed8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008edc:	483c      	ldr	r0, [pc, #240]	; (8008fd0 <Motion_Magneto_Sensor_Handler+0x154>)
 8008ede:	f001 fbb3 	bl	800a648 <sniprintf>
  }

  printf("%s", dataOut);
 8008ee2:	493b      	ldr	r1, [pc, #236]	; (8008fd0 <Motion_Magneto_Sensor_Handler+0x154>)
 8008ee4:	483b      	ldr	r0, [pc, #236]	; (8008fd4 <Motion_Magneto_Sensor_Handler+0x158>)
 8008ee6:	f001 fb97 	bl	800a618 <iprintf>

  if (verbose == 1)
 8008eea:	4b3d      	ldr	r3, [pc, #244]	; (8008fe0 <Motion_Magneto_Sensor_Handler+0x164>)
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d168      	bne.n	8008fc4 <Motion_Magneto_Sensor_Handler+0x148>
  {
    if (CUSTOM_MOTION_SENSOR_ReadID(Instance, &whoami))
 8008ef2:	f107 030f 	add.w	r3, r7, #15
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f931 	bl	8009160 <CUSTOM_MOTION_SENSOR_ReadID>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d007      	beq.n	8008f14 <Motion_Magneto_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a37      	ldr	r2, [pc, #220]	; (8008fe4 <Motion_Magneto_Sensor_Handler+0x168>)
 8008f08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f0c:	4830      	ldr	r0, [pc, #192]	; (8008fd0 <Motion_Magneto_Sensor_Handler+0x154>)
 8008f0e:	f001 fb9b 	bl	800a648 <sniprintf>
 8008f12:	e008      	b.n	8008f26 <Motion_Magneto_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	7bfa      	ldrb	r2, [r7, #15]
 8008f18:	9200      	str	r2, [sp, #0]
 8008f1a:	4a33      	ldr	r2, [pc, #204]	; (8008fe8 <Motion_Magneto_Sensor_Handler+0x16c>)
 8008f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f20:	482b      	ldr	r0, [pc, #172]	; (8008fd0 <Motion_Magneto_Sensor_Handler+0x154>)
 8008f22:	f001 fb91 	bl	800a648 <sniprintf>
    }

    printf("%s", dataOut);
 8008f26:	492a      	ldr	r1, [pc, #168]	; (8008fd0 <Motion_Magneto_Sensor_Handler+0x154>)
 8008f28:	482a      	ldr	r0, [pc, #168]	; (8008fd4 <Motion_Magneto_Sensor_Handler+0x158>)
 8008f2a:	f001 fb75 	bl	800a618 <iprintf>

    if (CUSTOM_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 8008f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f32:	461a      	mov	r2, r3
 8008f34:	2104      	movs	r1, #4
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f980 	bl	800923c <CUSTOM_MOTION_SENSOR_GetOutputDataRate>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d007      	beq.n	8008f52 <Motion_Magneto_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a29      	ldr	r2, [pc, #164]	; (8008fec <Motion_Magneto_Sensor_Handler+0x170>)
 8008f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f4a:	4821      	ldr	r0, [pc, #132]	; (8008fd0 <Motion_Magneto_Sensor_Handler+0x154>)
 8008f4c:	f001 fb7c 	bl	800a648 <sniprintf>
 8008f50:	e014      	b.n	8008f7c <Motion_Magneto_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8008f52:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008f56:	f107 0310 	add.w	r3, r7, #16
 8008f5a:	2103      	movs	r1, #3
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8008f62:	f7ff fd81 	bl	8008a68 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8008f6a:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8008f6c:	9101      	str	r1, [sp, #4]
 8008f6e:	9200      	str	r2, [sp, #0]
 8008f70:	4a1f      	ldr	r2, [pc, #124]	; (8008ff0 <Motion_Magneto_Sensor_Handler+0x174>)
 8008f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f76:	4816      	ldr	r0, [pc, #88]	; (8008fd0 <Motion_Magneto_Sensor_Handler+0x154>)
 8008f78:	f001 fb66 	bl	800a648 <sniprintf>
    }

    printf("%s", dataOut);
 8008f7c:	4914      	ldr	r1, [pc, #80]	; (8008fd0 <Motion_Magneto_Sensor_Handler+0x154>)
 8008f7e:	4815      	ldr	r0, [pc, #84]	; (8008fd4 <Motion_Magneto_Sensor_Handler+0x158>)
 8008f80:	f001 fb4a 	bl	800a618 <iprintf>

    if (CUSTOM_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 8008f84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f88:	461a      	mov	r2, r3
 8008f8a:	2104      	movs	r1, #4
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f999 	bl	80092c4 <CUSTOM_MOTION_SENSOR_GetFullScale>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d007      	beq.n	8008fa8 <Motion_Magneto_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a16      	ldr	r2, [pc, #88]	; (8008ff4 <Motion_Magneto_Sensor_Handler+0x178>)
 8008f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008fa0:	480b      	ldr	r0, [pc, #44]	; (8008fd0 <Motion_Magneto_Sensor_Handler+0x154>)
 8008fa2:	f001 fb51 	bl	800a648 <sniprintf>
 8008fa6:	e009      	b.n	8008fbc <Motion_Magneto_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	4a11      	ldr	r2, [pc, #68]	; (8008ff8 <Motion_Magneto_Sensor_Handler+0x17c>)
 8008fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008fb6:	4806      	ldr	r0, [pc, #24]	; (8008fd0 <Motion_Magneto_Sensor_Handler+0x154>)
 8008fb8:	f001 fb46 	bl	800a648 <sniprintf>
    }

    printf("%s", dataOut);
 8008fbc:	4904      	ldr	r1, [pc, #16]	; (8008fd0 <Motion_Magneto_Sensor_Handler+0x154>)
 8008fbe:	4805      	ldr	r0, [pc, #20]	; (8008fd4 <Motion_Magneto_Sensor_Handler+0x158>)
 8008fc0:	f001 fb2a 	bl	800a618 <iprintf>
  }
}
 8008fc4:	bf00      	nop
 8008fc6:	3730      	adds	r7, #48	; 0x30
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bdb0      	pop	{r4, r5, r7, pc}
 8008fcc:	0800ba2c 	.word	0x0800ba2c
 8008fd0:	2000013c 	.word	0x2000013c
 8008fd4:	0800b918 	.word	0x0800b918
 8008fd8:	0800bb5c 	.word	0x0800bb5c
 8008fdc:	0800bb70 	.word	0x0800bb70
 8008fe0:	20000075 	.word	0x20000075
 8008fe4:	0800ba90 	.word	0x0800ba90
 8008fe8:	0800baa4 	.word	0x0800baa4
 8008fec:	0800bab8 	.word	0x0800bab8
 8008ff0:	0800bacc 	.word	0x0800bacc
 8008ff4:	0800bae4 	.word	0x0800bae4
 8008ff8:	0800bba0 	.word	0x0800bba0

08008ffc <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b08e      	sub	sp, #56	; 0x38
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8009006:	2300      	movs	r3, #0
 8009008:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800900a:	2301      	movs	r3, #1
 800900c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	62bb      	str	r3, [r7, #40]	; 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d131      	bne.n	800907c <CUSTOM_MOTION_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case CUSTOM_ISM330DHCX_0:
      if (ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 8009018:	6838      	ldr	r0, [r7, #0]
 800901a:	f000 fa21 	bl	8009460 <ISM330DHCX_0_Probe>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 8009024:	f04f 33ff 	mov.w	r3, #4294967295
 8009028:	e064      	b.n	80090f4 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800902a:	4a34      	ldr	r2, [pc, #208]	; (80090fc <CUSTOM_MOTION_SENSOR_Init+0x100>)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	4932      	ldr	r1, [pc, #200]	; (8009100 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800903c:	f107 010c 	add.w	r1, r7, #12
 8009040:	4610      	mov	r0, r2
 8009042:	4798      	blx	r3
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d002      	beq.n	8009050 <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800904a:	f06f 0306 	mvn.w	r3, #6
 800904e:	e051      	b.n	80090f4 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 8009050:	7b3b      	ldrb	r3, [r7, #12]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d103      	bne.n	800905e <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 8009056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009058:	f043 0302 	orr.w	r3, r3, #2
 800905c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800905e:	7b7b      	ldrb	r3, [r7, #13]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d103      	bne.n	800906c <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009066:	f043 0301 	orr.w	r3, r3, #1
 800906a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d108      	bne.n	8009084 <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	f043 0304 	orr.w	r3, r3, #4
 8009078:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800907a:	e003      	b.n	8009084 <CUSTOM_MOTION_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800907c:	f06f 0301 	mvn.w	r3, #1
 8009080:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8009082:	e000      	b.n	8009086 <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 8009084:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8009086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 800908c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800908e:	e031      	b.n	80090f4 <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 8009090:	2300      	movs	r3, #0
 8009092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009094:	e02a      	b.n	80090ec <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909a:	4013      	ands	r3, r2
 800909c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800909e:	429a      	cmp	r2, r3
 80090a0:	d11e      	bne.n	80090e0 <CUSTOM_MOTION_SENSOR_Init+0xe4>
 80090a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a6:	4013      	ands	r3, r2
 80090a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d118      	bne.n	80090e0 <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80090ae:	4a15      	ldr	r2, [pc, #84]	; (8009104 <CUSTOM_MOTION_SENSOR_Init+0x108>)
 80090b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80090b6:	4814      	ldr	r0, [pc, #80]	; (8009108 <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	4613      	mov	r3, r2
 80090bc:	005b      	lsls	r3, r3, #1
 80090be:	4413      	add	r3, r2
 80090c0:	440b      	add	r3, r1
 80090c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	490d      	ldr	r1, [pc, #52]	; (8009100 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80090d0:	4610      	mov	r0, r2
 80090d2:	4798      	blx	r3
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d002      	beq.n	80090e0 <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80090da:	f06f 0304 	mvn.w	r3, #4
 80090de:	e009      	b.n	80090f4 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 80090e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e2:	005b      	lsls	r3, r3, #1
 80090e4:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 80090e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e8:	3301      	adds	r3, #1
 80090ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d9d1      	bls.n	8009096 <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 80090f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3738      	adds	r7, #56	; 0x38
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	2000024c 	.word	0x2000024c
 8009100:	2000036c 	.word	0x2000036c
 8009104:	20000078 	.word	0x20000078
 8009108:	20000240 	.word	0x20000240

0800910c <CUSTOM_MOTION_SENSOR_GetCapabilities>:
 * @param  Instance Motion sensor instance
 * @param  Capabilities pointer to motion sensor capabilities
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetCapabilities(uint32_t Instance, CUSTOM_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <CUSTOM_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800911c:	f06f 0301 	mvn.w	r3, #1
 8009120:	60fb      	str	r3, [r7, #12]
 8009122:	e014      	b.n	800914e <CUSTOM_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8009124:	4a0c      	ldr	r2, [pc, #48]	; (8009158 <CUSTOM_MOTION_SENSOR_GetCapabilities+0x4c>)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	490b      	ldr	r1, [pc, #44]	; (800915c <CUSTOM_MOTION_SENSOR_GetCapabilities+0x50>)
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009136:	6839      	ldr	r1, [r7, #0]
 8009138:	4610      	mov	r0, r2
 800913a:	4798      	blx	r3
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <CUSTOM_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009142:	f06f 0306 	mvn.w	r3, #6
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	e001      	b.n	800914e <CUSTOM_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800914a:	2300      	movs	r3, #0
 800914c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800914e:	68fb      	ldr	r3, [r7, #12]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	2000024c 	.word	0x2000024c
 800915c:	2000036c 	.word	0x2000036c

08009160 <CUSTOM_MOTION_SENSOR_ReadID>:
 * @param  Instance Motion sensor instance
 * @param  Id WHOAMI value
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d003      	beq.n	8009178 <CUSTOM_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009170:	f06f 0301 	mvn.w	r3, #1
 8009174:	60fb      	str	r3, [r7, #12]
 8009176:	e014      	b.n	80091a2 <CUSTOM_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 8009178:	4a0c      	ldr	r2, [pc, #48]	; (80091ac <CUSTOM_MOTION_SENSOR_ReadID+0x4c>)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	490b      	ldr	r1, [pc, #44]	; (80091b0 <CUSTOM_MOTION_SENSOR_ReadID+0x50>)
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	4610      	mov	r0, r2
 800918e:	4798      	blx	r3
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <CUSTOM_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009196:	f06f 0306 	mvn.w	r3, #6
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	e001      	b.n	80091a2 <CUSTOM_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800919e:	2300      	movs	r3, #0
 80091a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80091a2:	68fb      	ldr	r3, [r7, #12]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	2000024c 	.word	0x2000024c
 80091b0:	2000036c 	.word	0x2000036c

080091b4 <CUSTOM_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, CUSTOM_MOTION_SENSOR_Axes_t *Axes)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d003      	beq.n	80091ce <CUSTOM_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80091c6:	f06f 0301 	mvn.w	r3, #1
 80091ca:	617b      	str	r3, [r7, #20]
 80091cc:	e029      	b.n	8009222 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80091ce:	4a17      	ldr	r2, [pc, #92]	; (800922c <CUSTOM_MOTION_SENSOR_GetAxes+0x78>)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	4013      	ands	r3, r2
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d11d      	bne.n	800921c <CUSTOM_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80091e0:	4a13      	ldr	r2, [pc, #76]	; (8009230 <CUSTOM_MOTION_SENSOR_GetAxes+0x7c>)
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80091e8:	4812      	ldr	r0, [pc, #72]	; (8009234 <CUSTOM_MOTION_SENSOR_GetAxes+0x80>)
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	4613      	mov	r3, r2
 80091ee:	005b      	lsls	r3, r3, #1
 80091f0:	4413      	add	r3, r2
 80091f2:	440b      	add	r3, r1
 80091f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	490f      	ldr	r1, [pc, #60]	; (8009238 <CUSTOM_MOTION_SENSOR_GetAxes+0x84>)
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009202:	6879      	ldr	r1, [r7, #4]
 8009204:	4610      	mov	r0, r2
 8009206:	4798      	blx	r3
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <CUSTOM_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800920e:	f06f 0304 	mvn.w	r3, #4
 8009212:	617b      	str	r3, [r7, #20]
 8009214:	e005      	b.n	8009222 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009216:	2300      	movs	r3, #0
 8009218:	617b      	str	r3, [r7, #20]
 800921a:	e002      	b.n	8009222 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800921c:	f06f 0301 	mvn.w	r3, #1
 8009220:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009222:	697b      	ldr	r3, [r7, #20]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3718      	adds	r7, #24
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	20000250 	.word	0x20000250
 8009230:	20000078 	.word	0x20000078
 8009234:	20000240 	.word	0x20000240
 8009238:	2000036c 	.word	0x2000036c

0800923c <CUSTOM_MOTION_SENSOR_GetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr pointer to Output Data Rate read value
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800924e:	f06f 0301 	mvn.w	r3, #1
 8009252:	617b      	str	r3, [r7, #20]
 8009254:	e029      	b.n	80092aa <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009256:	4a17      	ldr	r2, [pc, #92]	; (80092b4 <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x78>)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	4013      	ands	r3, r2
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	429a      	cmp	r2, r3
 8009266:	d11d      	bne.n	80092a4 <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8009268:	4a13      	ldr	r2, [pc, #76]	; (80092b8 <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009270:	4812      	ldr	r0, [pc, #72]	; (80092bc <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x80>)
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	4613      	mov	r3, r2
 8009276:	005b      	lsls	r3, r3, #1
 8009278:	4413      	add	r3, r2
 800927a:	440b      	add	r3, r1
 800927c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	490f      	ldr	r1, [pc, #60]	; (80092c0 <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x84>)
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800928a:	6879      	ldr	r1, [r7, #4]
 800928c:	4610      	mov	r0, r2
 800928e:	4798      	blx	r3
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d003      	beq.n	800929e <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009296:	f06f 0304 	mvn.w	r3, #4
 800929a:	617b      	str	r3, [r7, #20]
 800929c:	e005      	b.n	80092aa <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800929e:	2300      	movs	r3, #0
 80092a0:	617b      	str	r3, [r7, #20]
 80092a2:	e002      	b.n	80092aa <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80092a4:	f06f 0301 	mvn.w	r3, #1
 80092a8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80092aa:	697b      	ldr	r3, [r7, #20]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	20000250 	.word	0x20000250
 80092b8:	20000078 	.word	0x20000078
 80092bc:	20000240 	.word	0x20000240
 80092c0:	2000036c 	.word	0x2000036c

080092c4 <CUSTOM_MOTION_SENSOR_GetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale pointer to Fullscale read value
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d003      	beq.n	80092de <CUSTOM_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80092d6:	f06f 0301 	mvn.w	r3, #1
 80092da:	617b      	str	r3, [r7, #20]
 80092dc:	e029      	b.n	8009332 <CUSTOM_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80092de:	4a17      	ldr	r2, [pc, #92]	; (800933c <CUSTOM_MOTION_SENSOR_GetFullScale+0x78>)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	4013      	ands	r3, r2
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d11d      	bne.n	800932c <CUSTOM_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 80092f0:	4a13      	ldr	r2, [pc, #76]	; (8009340 <CUSTOM_MOTION_SENSOR_GetFullScale+0x7c>)
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80092f8:	4812      	ldr	r0, [pc, #72]	; (8009344 <CUSTOM_MOTION_SENSOR_GetFullScale+0x80>)
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	4613      	mov	r3, r2
 80092fe:	005b      	lsls	r3, r3, #1
 8009300:	4413      	add	r3, r2
 8009302:	440b      	add	r3, r1
 8009304:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	490f      	ldr	r1, [pc, #60]	; (8009348 <CUSTOM_MOTION_SENSOR_GetFullScale+0x84>)
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	4610      	mov	r0, r2
 8009316:	4798      	blx	r3
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <CUSTOM_MOTION_SENSOR_GetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800931e:	f06f 0304 	mvn.w	r3, #4
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	e005      	b.n	8009332 <CUSTOM_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009326:	2300      	movs	r3, #0
 8009328:	617b      	str	r3, [r7, #20]
 800932a:	e002      	b.n	8009332 <CUSTOM_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800932c:	f06f 0301 	mvn.w	r3, #1
 8009330:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009332:	697b      	ldr	r3, [r7, #20]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20000250 	.word	0x20000250
 8009340:	20000078 	.word	0x20000078
 8009344:	20000240 	.word	0x20000240
 8009348:	2000036c 	.word	0x2000036c

0800934c <CUSTOM_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d003      	beq.n	8009368 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009360:	f06f 0301 	mvn.w	r3, #1
 8009364:	617b      	str	r3, [r7, #20]
 8009366:	e02a      	b.n	80093be <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009368:	4a17      	ldr	r2, [pc, #92]	; (80093c8 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	4013      	ands	r3, r2
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	429a      	cmp	r2, r3
 8009378:	d11e      	bne.n	80093b8 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800937a:	4a14      	ldr	r2, [pc, #80]	; (80093cc <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009382:	4813      	ldr	r0, [pc, #76]	; (80093d0 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	4613      	mov	r3, r2
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	4413      	add	r3, r2
 800938c:	440b      	add	r3, r1
 800938e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	490f      	ldr	r1, [pc, #60]	; (80093d4 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800939c:	ed97 0a01 	vldr	s0, [r7, #4]
 80093a0:	4610      	mov	r0, r2
 80093a2:	4798      	blx	r3
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d003      	beq.n	80093b2 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80093aa:	f06f 0304 	mvn.w	r3, #4
 80093ae:	617b      	str	r3, [r7, #20]
 80093b0:	e005      	b.n	80093be <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80093b2:	2300      	movs	r3, #0
 80093b4:	617b      	str	r3, [r7, #20]
 80093b6:	e002      	b.n	80093be <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80093b8:	f06f 0301 	mvn.w	r3, #1
 80093bc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80093be:	697b      	ldr	r3, [r7, #20]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	20000250 	.word	0x20000250
 80093cc:	20000078 	.word	0x20000078
 80093d0:	20000240 	.word	0x20000240
 80093d4:	2000036c 	.word	0x2000036c

080093d8 <CUSTOM_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <CUSTOM_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80093ea:	f06f 0301 	mvn.w	r3, #1
 80093ee:	617b      	str	r3, [r7, #20]
 80093f0:	e029      	b.n	8009446 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80093f2:	4a17      	ldr	r2, [pc, #92]	; (8009450 <CUSTOM_MOTION_SENSOR_SetFullScale+0x78>)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	4013      	ands	r3, r2
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	429a      	cmp	r2, r3
 8009402:	d11d      	bne.n	8009440 <CUSTOM_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 8009404:	4a13      	ldr	r2, [pc, #76]	; (8009454 <CUSTOM_MOTION_SENSOR_SetFullScale+0x7c>)
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800940c:	4812      	ldr	r0, [pc, #72]	; (8009458 <CUSTOM_MOTION_SENSOR_SetFullScale+0x80>)
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	4613      	mov	r3, r2
 8009412:	005b      	lsls	r3, r3, #1
 8009414:	4413      	add	r3, r2
 8009416:	440b      	add	r3, r1
 8009418:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	490f      	ldr	r1, [pc, #60]	; (800945c <CUSTOM_MOTION_SENSOR_SetFullScale+0x84>)
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009426:	6879      	ldr	r1, [r7, #4]
 8009428:	4610      	mov	r0, r2
 800942a:	4798      	blx	r3
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d003      	beq.n	800943a <CUSTOM_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009432:	f06f 0304 	mvn.w	r3, #4
 8009436:	617b      	str	r3, [r7, #20]
 8009438:	e005      	b.n	8009446 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800943a:	2300      	movs	r3, #0
 800943c:	617b      	str	r3, [r7, #20]
 800943e:	e002      	b.n	8009446 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009440:	f06f 0301 	mvn.w	r3, #1
 8009444:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009446:	697b      	ldr	r3, [r7, #20]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	20000250 	.word	0x20000250
 8009454:	20000078 	.word	0x20000078
 8009458:	20000240 	.word	0x20000240
 800945c:	2000036c 	.word	0x2000036c

08009460 <ISM330DHCX_0_Probe>:
 * @param  Functions Motion sensor functions. Could be :
 *         - MOTION_GYRO and/or MOTION_ACCELERO
 * @retval BSP status
 */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b092      	sub	sp, #72	; 0x48
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  ISM330DHCX_IO_t            io_ctx;
  uint8_t                    id;
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 8009468:	2300      	movs	r3, #0
 800946a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the driver */
  io_ctx.BusType     = ISM330DHCX_I2C_BUS; /* I2C */
 800946c:	2300      	movs	r3, #0
 800946e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = ISM330DHCX_I2C_ADD_H; /* SA0 = VDD */
 8009470:	23d7      	movs	r3, #215	; 0xd7
 8009472:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = CUSTOM_ISM330DHCX_0_I2C_Init;
 8009476:	4b4a      	ldr	r3, [pc, #296]	; (80095a0 <ISM330DHCX_0_Probe+0x140>)
 8009478:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = CUSTOM_ISM330DHCX_0_I2C_DeInit;
 800947a:	4b4a      	ldr	r3, [pc, #296]	; (80095a4 <ISM330DHCX_0_Probe+0x144>)
 800947c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = CUSTOM_ISM330DHCX_0_I2C_ReadReg;
 800947e:	4b4a      	ldr	r3, [pc, #296]	; (80095a8 <ISM330DHCX_0_Probe+0x148>)
 8009480:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = CUSTOM_ISM330DHCX_0_I2C_WriteReg;
 8009482:	4b4a      	ldr	r3, [pc, #296]	; (80095ac <ISM330DHCX_0_Probe+0x14c>)
 8009484:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = BSP_GetTick;
 8009486:	4b4a      	ldr	r3, [pc, #296]	; (80095b0 <ISM330DHCX_0_Probe+0x150>)
 8009488:	643b      	str	r3, [r7, #64]	; 0x40

  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 800948a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800948e:	4619      	mov	r1, r3
 8009490:	4848      	ldr	r0, [pc, #288]	; (80095b4 <ISM330DHCX_0_Probe+0x154>)
 8009492:	f7f8 fa71 	bl	8001978 <ISM330DHCX_RegisterBusIO>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <ISM330DHCX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800949c:	f06f 0306 	mvn.w	r3, #6
 80094a0:	647b      	str	r3, [r7, #68]	; 0x44
 80094a2:	e077      	b.n	8009594 <ISM330DHCX_0_Probe+0x134>
  }
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 80094a4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80094a8:	4619      	mov	r1, r3
 80094aa:	4842      	ldr	r0, [pc, #264]	; (80095b4 <ISM330DHCX_0_Probe+0x154>)
 80094ac:	f7f8 fb7e 	bl	8001bac <ISM330DHCX_ReadID>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <ISM330DHCX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80094b6:	f06f 0306 	mvn.w	r3, #6
 80094ba:	647b      	str	r3, [r7, #68]	; 0x44
 80094bc:	e06a      	b.n	8009594 <ISM330DHCX_0_Probe+0x134>
  }
  else if (id != ISM330DHCX_ID)
 80094be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094c2:	2b6b      	cmp	r3, #107	; 0x6b
 80094c4:	d003      	beq.n	80094ce <ISM330DHCX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80094c6:	f06f 0306 	mvn.w	r3, #6
 80094ca:	647b      	str	r3, [r7, #68]	; 0x44
 80094cc:	e062      	b.n	8009594 <ISM330DHCX_0_Probe+0x134>
  }
  else
  {
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 80094ce:	f107 0308 	add.w	r3, r7, #8
 80094d2:	4619      	mov	r1, r3
 80094d4:	4837      	ldr	r0, [pc, #220]	; (80095b4 <ISM330DHCX_0_Probe+0x154>)
 80094d6:	f7f8 fb7f 	bl	8001bd8 <ISM330DHCX_GetCapabilities>
    MotionCtx[CUSTOM_ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80094da:	7a7b      	ldrb	r3, [r7, #9]
 80094dc:	461a      	mov	r2, r3
 80094de:	7a3b      	ldrb	r3, [r7, #8]
 80094e0:	005b      	lsls	r3, r3, #1
 80094e2:	431a      	orrs	r2, r3
 80094e4:	7abb      	ldrb	r3, [r7, #10]
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4313      	orrs	r3, r2
 80094ea:	4a33      	ldr	r2, [pc, #204]	; (80095b8 <ISM330DHCX_0_Probe+0x158>)
 80094ec:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_ISM330DHCX_0] = &ism330dhcx_obj_0;
 80094ee:	4b33      	ldr	r3, [pc, #204]	; (80095bc <ISM330DHCX_0_Probe+0x15c>)
 80094f0:	4a30      	ldr	r2, [pc, #192]	; (80095b4 <ISM330DHCX_0_Probe+0x154>)
 80094f2:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 80094f4:	4b32      	ldr	r3, [pc, #200]	; (80095c0 <ISM330DHCX_0_Probe+0x160>)
 80094f6:	4a33      	ldr	r2, [pc, #204]	; (80095c4 <ISM330DHCX_0_Probe+0x164>)
 80094f8:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80094fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d11d      	bne.n	800953c <ISM330DHCX_0_Probe+0xdc>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	2b00      	cmp	r3, #0
 8009508:	d018      	beq.n	800953c <ISM330DHCX_0_Probe+0xdc>
 800950a:	7a7b      	ldrb	r3, [r7, #9]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d115      	bne.n	800953c <ISM330DHCX_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 8009510:	4b2d      	ldr	r3, [pc, #180]	; (80095c8 <ISM330DHCX_0_Probe+0x168>)
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	4a2d      	ldr	r2, [pc, #180]	; (80095cc <ISM330DHCX_0_Probe+0x16c>)
 8009516:	492e      	ldr	r1, [pc, #184]	; (80095d0 <ISM330DHCX_0_Probe+0x170>)
 8009518:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_ISM330DHCX_0]->Init(MotionCompObj[CUSTOM_ISM330DHCX_0]) != ISM330DHCX_OK)
 800951c:	4b28      	ldr	r3, [pc, #160]	; (80095c0 <ISM330DHCX_0_Probe+0x160>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a26      	ldr	r2, [pc, #152]	; (80095bc <ISM330DHCX_0_Probe+0x15c>)
 8009524:	6812      	ldr	r2, [r2, #0]
 8009526:	4610      	mov	r0, r2
 8009528:	4798      	blx	r3
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d003      	beq.n	8009538 <ISM330DHCX_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009530:	f06f 0304 	mvn.w	r3, #4
 8009534:	647b      	str	r3, [r7, #68]	; 0x44
 8009536:	e001      	b.n	800953c <ISM330DHCX_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009538:	2300      	movs	r3, #0
 800953a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800953c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800953e:	2b00      	cmp	r3, #0
 8009540:	d11d      	bne.n	800957e <ISM330DHCX_0_Probe+0x11e>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f003 0302 	and.w	r3, r3, #2
 8009548:	2b00      	cmp	r3, #0
 800954a:	d018      	beq.n	800957e <ISM330DHCX_0_Probe+0x11e>
 800954c:	7a3b      	ldrb	r3, [r7, #8]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d115      	bne.n	800957e <ISM330DHCX_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_ACC_Driver;
 8009552:	4b1d      	ldr	r3, [pc, #116]	; (80095c8 <ISM330DHCX_0_Probe+0x168>)
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	4a1d      	ldr	r2, [pc, #116]	; (80095cc <ISM330DHCX_0_Probe+0x16c>)
 8009558:	491e      	ldr	r1, [pc, #120]	; (80095d4 <ISM330DHCX_0_Probe+0x174>)
 800955a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_ISM330DHCX_0]->Init(MotionCompObj[CUSTOM_ISM330DHCX_0]) != ISM330DHCX_OK)
 800955e:	4b18      	ldr	r3, [pc, #96]	; (80095c0 <ISM330DHCX_0_Probe+0x160>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a15      	ldr	r2, [pc, #84]	; (80095bc <ISM330DHCX_0_Probe+0x15c>)
 8009566:	6812      	ldr	r2, [r2, #0]
 8009568:	4610      	mov	r0, r2
 800956a:	4798      	blx	r3
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <ISM330DHCX_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009572:	f06f 0304 	mvn.w	r3, #4
 8009576:	647b      	str	r3, [r7, #68]	; 0x44
 8009578:	e001      	b.n	800957e <ISM330DHCX_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800957a:	2300      	movs	r3, #0
 800957c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800957e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009580:	2b00      	cmp	r3, #0
 8009582:	d107      	bne.n	8009594 <ISM330DHCX_0_Probe+0x134>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f003 0304 	and.w	r3, r3, #4
 800958a:	2b00      	cmp	r3, #0
 800958c:	d002      	beq.n	8009594 <ISM330DHCX_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800958e:	f06f 0304 	mvn.w	r3, #4
 8009592:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8009594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009596:	4618      	mov	r0, r3
 8009598:	3748      	adds	r7, #72	; 0x48
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	08001681 	.word	0x08001681
 80095a4:	080016fd 	.word	0x080016fd
 80095a8:	080017b1 	.word	0x080017b1
 80095ac:	0800174d 	.word	0x0800174d
 80095b0:	08001815 	.word	0x08001815
 80095b4:	20000254 	.word	0x20000254
 80095b8:	20000250 	.word	0x20000250
 80095bc:	2000036c 	.word	0x2000036c
 80095c0:	2000024c 	.word	0x2000024c
 80095c4:	20000018 	.word	0x20000018
 80095c8:	20000078 	.word	0x20000078
 80095cc:	20000240 	.word	0x20000240
 80095d0:	2000004c 	.word	0x2000004c
 80095d4:	20000028 	.word	0x20000028

080095d8 <trunc>:
 80095d8:	ec51 0b10 	vmov	r0, r1, d0
 80095dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80095e0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80095e4:	2b13      	cmp	r3, #19
 80095e6:	b5d0      	push	{r4, r6, r7, lr}
 80095e8:	460c      	mov	r4, r1
 80095ea:	dc10      	bgt.n	800960e <trunc+0x36>
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	bfab      	itete	ge
 80095f0:	4a11      	ldrge	r2, [pc, #68]	; (8009638 <trunc+0x60>)
 80095f2:	2100      	movlt	r1, #0
 80095f4:	2100      	movge	r1, #0
 80095f6:	2000      	movlt	r0, #0
 80095f8:	bfa9      	itett	ge
 80095fa:	fa42 f303 	asrge.w	r3, r2, r3
 80095fe:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8009602:	2000      	movge	r0, #0
 8009604:	ea24 0103 	bicge.w	r1, r4, r3
 8009608:	ec41 0b10 	vmov	d0, r0, r1
 800960c:	bdd0      	pop	{r4, r6, r7, pc}
 800960e:	2b33      	cmp	r3, #51	; 0x33
 8009610:	dd08      	ble.n	8009624 <trunc+0x4c>
 8009612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009616:	d1f7      	bne.n	8009608 <trunc+0x30>
 8009618:	ee10 2a10 	vmov	r2, s0
 800961c:	460b      	mov	r3, r1
 800961e:	f7f6 fe31 	bl	8000284 <__adddf3>
 8009622:	e7f1      	b.n	8009608 <trunc+0x30>
 8009624:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8009628:	f04f 33ff 	mov.w	r3, #4294967295
 800962c:	fa23 f202 	lsr.w	r2, r3, r2
 8009630:	ea20 0602 	bic.w	r6, r0, r2
 8009634:	4630      	mov	r0, r6
 8009636:	e7e7      	b.n	8009608 <trunc+0x30>
 8009638:	000fffff 	.word	0x000fffff

0800963c <pow>:
 800963c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009640:	ec59 8b10 	vmov	r8, r9, d0
 8009644:	ec57 6b11 	vmov	r6, r7, d1
 8009648:	f000 f8a6 	bl	8009798 <__ieee754_pow>
 800964c:	4b4e      	ldr	r3, [pc, #312]	; (8009788 <pow+0x14c>)
 800964e:	f993 3000 	ldrsb.w	r3, [r3]
 8009652:	3301      	adds	r3, #1
 8009654:	ec55 4b10 	vmov	r4, r5, d0
 8009658:	d015      	beq.n	8009686 <pow+0x4a>
 800965a:	4632      	mov	r2, r6
 800965c:	463b      	mov	r3, r7
 800965e:	4630      	mov	r0, r6
 8009660:	4639      	mov	r1, r7
 8009662:	f7f7 fa5f 	bl	8000b24 <__aeabi_dcmpun>
 8009666:	b970      	cbnz	r0, 8009686 <pow+0x4a>
 8009668:	4642      	mov	r2, r8
 800966a:	464b      	mov	r3, r9
 800966c:	4640      	mov	r0, r8
 800966e:	4649      	mov	r1, r9
 8009670:	f7f7 fa58 	bl	8000b24 <__aeabi_dcmpun>
 8009674:	2200      	movs	r2, #0
 8009676:	2300      	movs	r3, #0
 8009678:	b148      	cbz	r0, 800968e <pow+0x52>
 800967a:	4630      	mov	r0, r6
 800967c:	4639      	mov	r1, r7
 800967e:	f7f7 fa1f 	bl	8000ac0 <__aeabi_dcmpeq>
 8009682:	2800      	cmp	r0, #0
 8009684:	d17d      	bne.n	8009782 <pow+0x146>
 8009686:	ec45 4b10 	vmov	d0, r4, r5
 800968a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800968e:	4640      	mov	r0, r8
 8009690:	4649      	mov	r1, r9
 8009692:	f7f7 fa15 	bl	8000ac0 <__aeabi_dcmpeq>
 8009696:	b1e0      	cbz	r0, 80096d2 <pow+0x96>
 8009698:	2200      	movs	r2, #0
 800969a:	2300      	movs	r3, #0
 800969c:	4630      	mov	r0, r6
 800969e:	4639      	mov	r1, r7
 80096a0:	f7f7 fa0e 	bl	8000ac0 <__aeabi_dcmpeq>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d16c      	bne.n	8009782 <pow+0x146>
 80096a8:	ec47 6b10 	vmov	d0, r6, r7
 80096ac:	f000 fe5b 	bl	800a366 <finite>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d0e8      	beq.n	8009686 <pow+0x4a>
 80096b4:	2200      	movs	r2, #0
 80096b6:	2300      	movs	r3, #0
 80096b8:	4630      	mov	r0, r6
 80096ba:	4639      	mov	r1, r7
 80096bc:	f7f7 fa0a 	bl	8000ad4 <__aeabi_dcmplt>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d0e0      	beq.n	8009686 <pow+0x4a>
 80096c4:	f000 ff76 	bl	800a5b4 <__errno>
 80096c8:	2400      	movs	r4, #0
 80096ca:	2321      	movs	r3, #33	; 0x21
 80096cc:	6003      	str	r3, [r0, #0]
 80096ce:	4d2f      	ldr	r5, [pc, #188]	; (800978c <pow+0x150>)
 80096d0:	e7d9      	b.n	8009686 <pow+0x4a>
 80096d2:	ec45 4b10 	vmov	d0, r4, r5
 80096d6:	f000 fe46 	bl	800a366 <finite>
 80096da:	bbb8      	cbnz	r0, 800974c <pow+0x110>
 80096dc:	ec49 8b10 	vmov	d0, r8, r9
 80096e0:	f000 fe41 	bl	800a366 <finite>
 80096e4:	b390      	cbz	r0, 800974c <pow+0x110>
 80096e6:	ec47 6b10 	vmov	d0, r6, r7
 80096ea:	f000 fe3c 	bl	800a366 <finite>
 80096ee:	b368      	cbz	r0, 800974c <pow+0x110>
 80096f0:	4622      	mov	r2, r4
 80096f2:	462b      	mov	r3, r5
 80096f4:	4620      	mov	r0, r4
 80096f6:	4629      	mov	r1, r5
 80096f8:	f7f7 fa14 	bl	8000b24 <__aeabi_dcmpun>
 80096fc:	b160      	cbz	r0, 8009718 <pow+0xdc>
 80096fe:	f000 ff59 	bl	800a5b4 <__errno>
 8009702:	2321      	movs	r3, #33	; 0x21
 8009704:	2200      	movs	r2, #0
 8009706:	6003      	str	r3, [r0, #0]
 8009708:	2300      	movs	r3, #0
 800970a:	4610      	mov	r0, r2
 800970c:	4619      	mov	r1, r3
 800970e:	f7f7 f899 	bl	8000844 <__aeabi_ddiv>
 8009712:	4604      	mov	r4, r0
 8009714:	460d      	mov	r5, r1
 8009716:	e7b6      	b.n	8009686 <pow+0x4a>
 8009718:	f000 ff4c 	bl	800a5b4 <__errno>
 800971c:	2322      	movs	r3, #34	; 0x22
 800971e:	2200      	movs	r2, #0
 8009720:	4649      	mov	r1, r9
 8009722:	6003      	str	r3, [r0, #0]
 8009724:	2300      	movs	r3, #0
 8009726:	4640      	mov	r0, r8
 8009728:	2400      	movs	r4, #0
 800972a:	f7f7 f9d3 	bl	8000ad4 <__aeabi_dcmplt>
 800972e:	b158      	cbz	r0, 8009748 <pow+0x10c>
 8009730:	ec47 6b10 	vmov	d0, r6, r7
 8009734:	f000 fe2c 	bl	800a390 <rint>
 8009738:	4632      	mov	r2, r6
 800973a:	463b      	mov	r3, r7
 800973c:	ec51 0b10 	vmov	r0, r1, d0
 8009740:	f7f7 f9be 	bl	8000ac0 <__aeabi_dcmpeq>
 8009744:	2800      	cmp	r0, #0
 8009746:	d0c2      	beq.n	80096ce <pow+0x92>
 8009748:	4d11      	ldr	r5, [pc, #68]	; (8009790 <pow+0x154>)
 800974a:	e79c      	b.n	8009686 <pow+0x4a>
 800974c:	2200      	movs	r2, #0
 800974e:	2300      	movs	r3, #0
 8009750:	4620      	mov	r0, r4
 8009752:	4629      	mov	r1, r5
 8009754:	f7f7 f9b4 	bl	8000ac0 <__aeabi_dcmpeq>
 8009758:	2800      	cmp	r0, #0
 800975a:	d094      	beq.n	8009686 <pow+0x4a>
 800975c:	ec49 8b10 	vmov	d0, r8, r9
 8009760:	f000 fe01 	bl	800a366 <finite>
 8009764:	2800      	cmp	r0, #0
 8009766:	d08e      	beq.n	8009686 <pow+0x4a>
 8009768:	ec47 6b10 	vmov	d0, r6, r7
 800976c:	f000 fdfb 	bl	800a366 <finite>
 8009770:	2800      	cmp	r0, #0
 8009772:	d088      	beq.n	8009686 <pow+0x4a>
 8009774:	f000 ff1e 	bl	800a5b4 <__errno>
 8009778:	2322      	movs	r3, #34	; 0x22
 800977a:	2400      	movs	r4, #0
 800977c:	2500      	movs	r5, #0
 800977e:	6003      	str	r3, [r0, #0]
 8009780:	e781      	b.n	8009686 <pow+0x4a>
 8009782:	2400      	movs	r4, #0
 8009784:	4d03      	ldr	r5, [pc, #12]	; (8009794 <pow+0x158>)
 8009786:	e77e      	b.n	8009686 <pow+0x4a>
 8009788:	2000008c 	.word	0x2000008c
 800978c:	fff00000 	.word	0xfff00000
 8009790:	7ff00000 	.word	0x7ff00000
 8009794:	3ff00000 	.word	0x3ff00000

08009798 <__ieee754_pow>:
 8009798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979c:	ed2d 8b06 	vpush	{d8-d10}
 80097a0:	b08d      	sub	sp, #52	; 0x34
 80097a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80097a6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80097aa:	ec53 2b10 	vmov	r2, r3, d0
 80097ae:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80097b2:	ea56 0100 	orrs.w	r1, r6, r0
 80097b6:	f000 84d2 	beq.w	800a15e <__ieee754_pow+0x9c6>
 80097ba:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80097be:	497e      	ldr	r1, [pc, #504]	; (80099b8 <__ieee754_pow+0x220>)
 80097c0:	4699      	mov	r9, r3
 80097c2:	ee10 8a10 	vmov	r8, s0
 80097c6:	428c      	cmp	r4, r1
 80097c8:	dc09      	bgt.n	80097de <__ieee754_pow+0x46>
 80097ca:	d103      	bne.n	80097d4 <__ieee754_pow+0x3c>
 80097cc:	b97a      	cbnz	r2, 80097ee <__ieee754_pow+0x56>
 80097ce:	42a6      	cmp	r6, r4
 80097d0:	dd02      	ble.n	80097d8 <__ieee754_pow+0x40>
 80097d2:	e00c      	b.n	80097ee <__ieee754_pow+0x56>
 80097d4:	428e      	cmp	r6, r1
 80097d6:	dc02      	bgt.n	80097de <__ieee754_pow+0x46>
 80097d8:	428e      	cmp	r6, r1
 80097da:	d110      	bne.n	80097fe <__ieee754_pow+0x66>
 80097dc:	b178      	cbz	r0, 80097fe <__ieee754_pow+0x66>
 80097de:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80097e2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80097e6:	ea54 0308 	orrs.w	r3, r4, r8
 80097ea:	f000 84b8 	beq.w	800a15e <__ieee754_pow+0x9c6>
 80097ee:	4873      	ldr	r0, [pc, #460]	; (80099bc <__ieee754_pow+0x224>)
 80097f0:	b00d      	add	sp, #52	; 0x34
 80097f2:	ecbd 8b06 	vpop	{d8-d10}
 80097f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fa:	f000 bdc1 	b.w	800a380 <nan>
 80097fe:	f1b9 0f00 	cmp.w	r9, #0
 8009802:	da36      	bge.n	8009872 <__ieee754_pow+0xda>
 8009804:	496e      	ldr	r1, [pc, #440]	; (80099c0 <__ieee754_pow+0x228>)
 8009806:	428e      	cmp	r6, r1
 8009808:	dc51      	bgt.n	80098ae <__ieee754_pow+0x116>
 800980a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800980e:	428e      	cmp	r6, r1
 8009810:	f340 84b0 	ble.w	800a174 <__ieee754_pow+0x9dc>
 8009814:	1531      	asrs	r1, r6, #20
 8009816:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800981a:	2914      	cmp	r1, #20
 800981c:	dd0f      	ble.n	800983e <__ieee754_pow+0xa6>
 800981e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8009822:	fa20 fc01 	lsr.w	ip, r0, r1
 8009826:	fa0c f101 	lsl.w	r1, ip, r1
 800982a:	4281      	cmp	r1, r0
 800982c:	f040 84a2 	bne.w	800a174 <__ieee754_pow+0x9dc>
 8009830:	f00c 0c01 	and.w	ip, ip, #1
 8009834:	f1cc 0102 	rsb	r1, ip, #2
 8009838:	9100      	str	r1, [sp, #0]
 800983a:	b180      	cbz	r0, 800985e <__ieee754_pow+0xc6>
 800983c:	e059      	b.n	80098f2 <__ieee754_pow+0x15a>
 800983e:	2800      	cmp	r0, #0
 8009840:	d155      	bne.n	80098ee <__ieee754_pow+0x156>
 8009842:	f1c1 0114 	rsb	r1, r1, #20
 8009846:	fa46 fc01 	asr.w	ip, r6, r1
 800984a:	fa0c f101 	lsl.w	r1, ip, r1
 800984e:	42b1      	cmp	r1, r6
 8009850:	f040 848d 	bne.w	800a16e <__ieee754_pow+0x9d6>
 8009854:	f00c 0c01 	and.w	ip, ip, #1
 8009858:	f1cc 0102 	rsb	r1, ip, #2
 800985c:	9100      	str	r1, [sp, #0]
 800985e:	4959      	ldr	r1, [pc, #356]	; (80099c4 <__ieee754_pow+0x22c>)
 8009860:	428e      	cmp	r6, r1
 8009862:	d12d      	bne.n	80098c0 <__ieee754_pow+0x128>
 8009864:	2f00      	cmp	r7, #0
 8009866:	da79      	bge.n	800995c <__ieee754_pow+0x1c4>
 8009868:	2000      	movs	r0, #0
 800986a:	4956      	ldr	r1, [pc, #344]	; (80099c4 <__ieee754_pow+0x22c>)
 800986c:	f7f6 ffea 	bl	8000844 <__aeabi_ddiv>
 8009870:	e016      	b.n	80098a0 <__ieee754_pow+0x108>
 8009872:	2100      	movs	r1, #0
 8009874:	9100      	str	r1, [sp, #0]
 8009876:	2800      	cmp	r0, #0
 8009878:	d13b      	bne.n	80098f2 <__ieee754_pow+0x15a>
 800987a:	494f      	ldr	r1, [pc, #316]	; (80099b8 <__ieee754_pow+0x220>)
 800987c:	428e      	cmp	r6, r1
 800987e:	d1ee      	bne.n	800985e <__ieee754_pow+0xc6>
 8009880:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009884:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009888:	ea53 0308 	orrs.w	r3, r3, r8
 800988c:	f000 8467 	beq.w	800a15e <__ieee754_pow+0x9c6>
 8009890:	4b4d      	ldr	r3, [pc, #308]	; (80099c8 <__ieee754_pow+0x230>)
 8009892:	429c      	cmp	r4, r3
 8009894:	dd0d      	ble.n	80098b2 <__ieee754_pow+0x11a>
 8009896:	2f00      	cmp	r7, #0
 8009898:	f280 8465 	bge.w	800a166 <__ieee754_pow+0x9ce>
 800989c:	2000      	movs	r0, #0
 800989e:	2100      	movs	r1, #0
 80098a0:	ec41 0b10 	vmov	d0, r0, r1
 80098a4:	b00d      	add	sp, #52	; 0x34
 80098a6:	ecbd 8b06 	vpop	{d8-d10}
 80098aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ae:	2102      	movs	r1, #2
 80098b0:	e7e0      	b.n	8009874 <__ieee754_pow+0xdc>
 80098b2:	2f00      	cmp	r7, #0
 80098b4:	daf2      	bge.n	800989c <__ieee754_pow+0x104>
 80098b6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80098ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80098be:	e7ef      	b.n	80098a0 <__ieee754_pow+0x108>
 80098c0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80098c4:	d104      	bne.n	80098d0 <__ieee754_pow+0x138>
 80098c6:	4610      	mov	r0, r2
 80098c8:	4619      	mov	r1, r3
 80098ca:	f7f6 fe91 	bl	80005f0 <__aeabi_dmul>
 80098ce:	e7e7      	b.n	80098a0 <__ieee754_pow+0x108>
 80098d0:	493e      	ldr	r1, [pc, #248]	; (80099cc <__ieee754_pow+0x234>)
 80098d2:	428f      	cmp	r7, r1
 80098d4:	d10d      	bne.n	80098f2 <__ieee754_pow+0x15a>
 80098d6:	f1b9 0f00 	cmp.w	r9, #0
 80098da:	db0a      	blt.n	80098f2 <__ieee754_pow+0x15a>
 80098dc:	ec43 2b10 	vmov	d0, r2, r3
 80098e0:	b00d      	add	sp, #52	; 0x34
 80098e2:	ecbd 8b06 	vpop	{d8-d10}
 80098e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ea:	f000 bc7b 	b.w	800a1e4 <__ieee754_sqrt>
 80098ee:	2100      	movs	r1, #0
 80098f0:	9100      	str	r1, [sp, #0]
 80098f2:	ec43 2b10 	vmov	d0, r2, r3
 80098f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80098fa:	f000 fd2b 	bl	800a354 <fabs>
 80098fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009902:	ec51 0b10 	vmov	r0, r1, d0
 8009906:	f1b8 0f00 	cmp.w	r8, #0
 800990a:	d12a      	bne.n	8009962 <__ieee754_pow+0x1ca>
 800990c:	b12c      	cbz	r4, 800991a <__ieee754_pow+0x182>
 800990e:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8009912:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80099c4 <__ieee754_pow+0x22c>
 8009916:	45e6      	cmp	lr, ip
 8009918:	d123      	bne.n	8009962 <__ieee754_pow+0x1ca>
 800991a:	2f00      	cmp	r7, #0
 800991c:	da05      	bge.n	800992a <__ieee754_pow+0x192>
 800991e:	4602      	mov	r2, r0
 8009920:	460b      	mov	r3, r1
 8009922:	2000      	movs	r0, #0
 8009924:	4927      	ldr	r1, [pc, #156]	; (80099c4 <__ieee754_pow+0x22c>)
 8009926:	f7f6 ff8d 	bl	8000844 <__aeabi_ddiv>
 800992a:	f1b9 0f00 	cmp.w	r9, #0
 800992e:	dab7      	bge.n	80098a0 <__ieee754_pow+0x108>
 8009930:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009934:	9b00      	ldr	r3, [sp, #0]
 8009936:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800993a:	4323      	orrs	r3, r4
 800993c:	d108      	bne.n	8009950 <__ieee754_pow+0x1b8>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	4610      	mov	r0, r2
 8009944:	4619      	mov	r1, r3
 8009946:	f7f6 fc9b 	bl	8000280 <__aeabi_dsub>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	e78d      	b.n	800986c <__ieee754_pow+0xd4>
 8009950:	9b00      	ldr	r3, [sp, #0]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d1a4      	bne.n	80098a0 <__ieee754_pow+0x108>
 8009956:	4602      	mov	r2, r0
 8009958:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800995c:	4610      	mov	r0, r2
 800995e:	4619      	mov	r1, r3
 8009960:	e79e      	b.n	80098a0 <__ieee754_pow+0x108>
 8009962:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8009966:	f10c 35ff 	add.w	r5, ip, #4294967295
 800996a:	950a      	str	r5, [sp, #40]	; 0x28
 800996c:	9d00      	ldr	r5, [sp, #0]
 800996e:	46ac      	mov	ip, r5
 8009970:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009972:	ea5c 0505 	orrs.w	r5, ip, r5
 8009976:	d0e4      	beq.n	8009942 <__ieee754_pow+0x1aa>
 8009978:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <__ieee754_pow+0x238>)
 800997a:	429e      	cmp	r6, r3
 800997c:	f340 80fc 	ble.w	8009b78 <__ieee754_pow+0x3e0>
 8009980:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009984:	429e      	cmp	r6, r3
 8009986:	4b10      	ldr	r3, [pc, #64]	; (80099c8 <__ieee754_pow+0x230>)
 8009988:	dd07      	ble.n	800999a <__ieee754_pow+0x202>
 800998a:	429c      	cmp	r4, r3
 800998c:	dc0a      	bgt.n	80099a4 <__ieee754_pow+0x20c>
 800998e:	2f00      	cmp	r7, #0
 8009990:	da84      	bge.n	800989c <__ieee754_pow+0x104>
 8009992:	a307      	add	r3, pc, #28	; (adr r3, 80099b0 <__ieee754_pow+0x218>)
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	e795      	b.n	80098c6 <__ieee754_pow+0x12e>
 800999a:	429c      	cmp	r4, r3
 800999c:	dbf7      	blt.n	800998e <__ieee754_pow+0x1f6>
 800999e:	4b09      	ldr	r3, [pc, #36]	; (80099c4 <__ieee754_pow+0x22c>)
 80099a0:	429c      	cmp	r4, r3
 80099a2:	dd17      	ble.n	80099d4 <__ieee754_pow+0x23c>
 80099a4:	2f00      	cmp	r7, #0
 80099a6:	dcf4      	bgt.n	8009992 <__ieee754_pow+0x1fa>
 80099a8:	e778      	b.n	800989c <__ieee754_pow+0x104>
 80099aa:	bf00      	nop
 80099ac:	f3af 8000 	nop.w
 80099b0:	8800759c 	.word	0x8800759c
 80099b4:	7e37e43c 	.word	0x7e37e43c
 80099b8:	7ff00000 	.word	0x7ff00000
 80099bc:	0800bd71 	.word	0x0800bd71
 80099c0:	433fffff 	.word	0x433fffff
 80099c4:	3ff00000 	.word	0x3ff00000
 80099c8:	3fefffff 	.word	0x3fefffff
 80099cc:	3fe00000 	.word	0x3fe00000
 80099d0:	41e00000 	.word	0x41e00000
 80099d4:	2200      	movs	r2, #0
 80099d6:	4b64      	ldr	r3, [pc, #400]	; (8009b68 <__ieee754_pow+0x3d0>)
 80099d8:	f7f6 fc52 	bl	8000280 <__aeabi_dsub>
 80099dc:	4604      	mov	r4, r0
 80099de:	460d      	mov	r5, r1
 80099e0:	a355      	add	r3, pc, #340	; (adr r3, 8009b38 <__ieee754_pow+0x3a0>)
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	f7f6 fe03 	bl	80005f0 <__aeabi_dmul>
 80099ea:	4606      	mov	r6, r0
 80099ec:	460f      	mov	r7, r1
 80099ee:	4620      	mov	r0, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	a353      	add	r3, pc, #332	; (adr r3, 8009b40 <__ieee754_pow+0x3a8>)
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	f7f6 fdfa 	bl	80005f0 <__aeabi_dmul>
 80099fc:	2200      	movs	r2, #0
 80099fe:	4682      	mov	sl, r0
 8009a00:	468b      	mov	fp, r1
 8009a02:	4b5a      	ldr	r3, [pc, #360]	; (8009b6c <__ieee754_pow+0x3d4>)
 8009a04:	4620      	mov	r0, r4
 8009a06:	4629      	mov	r1, r5
 8009a08:	f7f6 fdf2 	bl	80005f0 <__aeabi_dmul>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	a14d      	add	r1, pc, #308	; (adr r1, 8009b48 <__ieee754_pow+0x3b0>)
 8009a12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a16:	f7f6 fc33 	bl	8000280 <__aeabi_dsub>
 8009a1a:	4622      	mov	r2, r4
 8009a1c:	462b      	mov	r3, r5
 8009a1e:	f7f6 fde7 	bl	80005f0 <__aeabi_dmul>
 8009a22:	4602      	mov	r2, r0
 8009a24:	460b      	mov	r3, r1
 8009a26:	2000      	movs	r0, #0
 8009a28:	4951      	ldr	r1, [pc, #324]	; (8009b70 <__ieee754_pow+0x3d8>)
 8009a2a:	f7f6 fc29 	bl	8000280 <__aeabi_dsub>
 8009a2e:	4680      	mov	r8, r0
 8009a30:	4689      	mov	r9, r1
 8009a32:	4622      	mov	r2, r4
 8009a34:	462b      	mov	r3, r5
 8009a36:	4620      	mov	r0, r4
 8009a38:	4629      	mov	r1, r5
 8009a3a:	2400      	movs	r4, #0
 8009a3c:	f7f6 fdd8 	bl	80005f0 <__aeabi_dmul>
 8009a40:	4602      	mov	r2, r0
 8009a42:	460b      	mov	r3, r1
 8009a44:	4640      	mov	r0, r8
 8009a46:	4649      	mov	r1, r9
 8009a48:	f7f6 fdd2 	bl	80005f0 <__aeabi_dmul>
 8009a4c:	a340      	add	r3, pc, #256	; (adr r3, 8009b50 <__ieee754_pow+0x3b8>)
 8009a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a52:	f7f6 fdcd 	bl	80005f0 <__aeabi_dmul>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4650      	mov	r0, sl
 8009a5c:	4659      	mov	r1, fp
 8009a5e:	f7f6 fc0f 	bl	8000280 <__aeabi_dsub>
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	4680      	mov	r8, r0
 8009a68:	4689      	mov	r9, r1
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	4639      	mov	r1, r7
 8009a6e:	f7f6 fc09 	bl	8000284 <__adddf3>
 8009a72:	4632      	mov	r2, r6
 8009a74:	463b      	mov	r3, r7
 8009a76:	4620      	mov	r0, r4
 8009a78:	460d      	mov	r5, r1
 8009a7a:	f7f6 fc01 	bl	8000280 <__aeabi_dsub>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	4640      	mov	r0, r8
 8009a84:	4649      	mov	r1, r9
 8009a86:	f7f6 fbfb 	bl	8000280 <__aeabi_dsub>
 8009a8a:	9b00      	ldr	r3, [sp, #0]
 8009a8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a8e:	4682      	mov	sl, r0
 8009a90:	3b01      	subs	r3, #1
 8009a92:	468b      	mov	fp, r1
 8009a94:	4313      	orrs	r3, r2
 8009a96:	f040 81f1 	bne.w	8009e7c <__ieee754_pow+0x6e4>
 8009a9a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009b58 <__ieee754_pow+0x3c0>
 8009a9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009aa2:	2600      	movs	r6, #0
 8009aa4:	eeb0 8a47 	vmov.f32	s16, s14
 8009aa8:	eef0 8a67 	vmov.f32	s17, s15
 8009aac:	463b      	mov	r3, r7
 8009aae:	4632      	mov	r2, r6
 8009ab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ab4:	f7f6 fbe4 	bl	8000280 <__aeabi_dsub>
 8009ab8:	4622      	mov	r2, r4
 8009aba:	462b      	mov	r3, r5
 8009abc:	f7f6 fd98 	bl	80005f0 <__aeabi_dmul>
 8009ac0:	4680      	mov	r8, r0
 8009ac2:	4689      	mov	r9, r1
 8009ac4:	4650      	mov	r0, sl
 8009ac6:	4659      	mov	r1, fp
 8009ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009acc:	f7f6 fd90 	bl	80005f0 <__aeabi_dmul>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4640      	mov	r0, r8
 8009ad6:	4649      	mov	r1, r9
 8009ad8:	f7f6 fbd4 	bl	8000284 <__adddf3>
 8009adc:	4680      	mov	r8, r0
 8009ade:	4689      	mov	r9, r1
 8009ae0:	4632      	mov	r2, r6
 8009ae2:	463b      	mov	r3, r7
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	f7f6 fd82 	bl	80005f0 <__aeabi_dmul>
 8009aec:	460b      	mov	r3, r1
 8009aee:	4604      	mov	r4, r0
 8009af0:	460d      	mov	r5, r1
 8009af2:	4602      	mov	r2, r0
 8009af4:	4649      	mov	r1, r9
 8009af6:	4640      	mov	r0, r8
 8009af8:	f7f6 fbc4 	bl	8000284 <__adddf3>
 8009afc:	4b1d      	ldr	r3, [pc, #116]	; (8009b74 <__ieee754_pow+0x3dc>)
 8009afe:	4606      	mov	r6, r0
 8009b00:	460f      	mov	r7, r1
 8009b02:	4299      	cmp	r1, r3
 8009b04:	468b      	mov	fp, r1
 8009b06:	ec45 4b19 	vmov	d9, r4, r5
 8009b0a:	f340 82ff 	ble.w	800a10c <__ieee754_pow+0x974>
 8009b0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009b12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009b16:	4303      	orrs	r3, r0
 8009b18:	f000 81f0 	beq.w	8009efc <__ieee754_pow+0x764>
 8009b1c:	a310      	add	r3, pc, #64	; (adr r3, 8009b60 <__ieee754_pow+0x3c8>)
 8009b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b22:	ec51 0b18 	vmov	r0, r1, d8
 8009b26:	f7f6 fd63 	bl	80005f0 <__aeabi_dmul>
 8009b2a:	a30d      	add	r3, pc, #52	; (adr r3, 8009b60 <__ieee754_pow+0x3c8>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	e6cb      	b.n	80098ca <__ieee754_pow+0x132>
 8009b32:	bf00      	nop
 8009b34:	f3af 8000 	nop.w
 8009b38:	60000000 	.word	0x60000000
 8009b3c:	3ff71547 	.word	0x3ff71547
 8009b40:	f85ddf44 	.word	0xf85ddf44
 8009b44:	3e54ae0b 	.word	0x3e54ae0b
 8009b48:	55555555 	.word	0x55555555
 8009b4c:	3fd55555 	.word	0x3fd55555
 8009b50:	652b82fe 	.word	0x652b82fe
 8009b54:	3ff71547 	.word	0x3ff71547
 8009b58:	00000000 	.word	0x00000000
 8009b5c:	bff00000 	.word	0xbff00000
 8009b60:	8800759c 	.word	0x8800759c
 8009b64:	7e37e43c 	.word	0x7e37e43c
 8009b68:	3ff00000 	.word	0x3ff00000
 8009b6c:	3fd00000 	.word	0x3fd00000
 8009b70:	3fe00000 	.word	0x3fe00000
 8009b74:	408fffff 	.word	0x408fffff
 8009b78:	4bd7      	ldr	r3, [pc, #860]	; (8009ed8 <__ieee754_pow+0x740>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	ea03 0309 	and.w	r3, r3, r9
 8009b80:	b92b      	cbnz	r3, 8009b8e <__ieee754_pow+0x3f6>
 8009b82:	4bd6      	ldr	r3, [pc, #856]	; (8009edc <__ieee754_pow+0x744>)
 8009b84:	f7f6 fd34 	bl	80005f0 <__aeabi_dmul>
 8009b88:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009b8c:	460c      	mov	r4, r1
 8009b8e:	1523      	asrs	r3, r4, #20
 8009b90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009b94:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009b98:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ba4:	4bce      	ldr	r3, [pc, #824]	; (8009ee0 <__ieee754_pow+0x748>)
 8009ba6:	429c      	cmp	r4, r3
 8009ba8:	dd08      	ble.n	8009bbc <__ieee754_pow+0x424>
 8009baa:	4bce      	ldr	r3, [pc, #824]	; (8009ee4 <__ieee754_pow+0x74c>)
 8009bac:	429c      	cmp	r4, r3
 8009bae:	f340 8163 	ble.w	8009e78 <__ieee754_pow+0x6e0>
 8009bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009bb8:	3301      	adds	r3, #1
 8009bba:	9309      	str	r3, [sp, #36]	; 0x24
 8009bbc:	2400      	movs	r4, #0
 8009bbe:	00e3      	lsls	r3, r4, #3
 8009bc0:	4682      	mov	sl, r0
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	46ab      	mov	fp, r5
 8009bc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bc8:	4bc7      	ldr	r3, [pc, #796]	; (8009ee8 <__ieee754_pow+0x750>)
 8009bca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009bce:	ed93 7b00 	vldr	d7, [r3]
 8009bd2:	eeb0 8a47 	vmov.f32	s16, s14
 8009bd6:	eef0 8a67 	vmov.f32	s17, s15
 8009bda:	ec53 2b17 	vmov	r2, r3, d7
 8009bde:	f7f6 fb4f 	bl	8000280 <__aeabi_dsub>
 8009be2:	4652      	mov	r2, sl
 8009be4:	4606      	mov	r6, r0
 8009be6:	460f      	mov	r7, r1
 8009be8:	462b      	mov	r3, r5
 8009bea:	106d      	asrs	r5, r5, #1
 8009bec:	ec51 0b18 	vmov	r0, r1, d8
 8009bf0:	f7f6 fb48 	bl	8000284 <__adddf3>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	49bc      	ldr	r1, [pc, #752]	; (8009eec <__ieee754_pow+0x754>)
 8009bfc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009c00:	f7f6 fe20 	bl	8000844 <__aeabi_ddiv>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009c0c:	ec41 0b19 	vmov	d9, r0, r1
 8009c10:	4630      	mov	r0, r6
 8009c12:	4639      	mov	r1, r7
 8009c14:	f7f6 fcec 	bl	80005f0 <__aeabi_dmul>
 8009c18:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c24:	2300      	movs	r3, #0
 8009c26:	2200      	movs	r2, #0
 8009c28:	9304      	str	r3, [sp, #16]
 8009c2a:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009c2e:	4614      	mov	r4, r2
 8009c30:	461d      	mov	r5, r3
 8009c32:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009c36:	4640      	mov	r0, r8
 8009c38:	4649      	mov	r1, r9
 8009c3a:	f7f6 fcd9 	bl	80005f0 <__aeabi_dmul>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	4630      	mov	r0, r6
 8009c44:	4639      	mov	r1, r7
 8009c46:	f7f6 fb1b 	bl	8000280 <__aeabi_dsub>
 8009c4a:	4606      	mov	r6, r0
 8009c4c:	460f      	mov	r7, r1
 8009c4e:	4620      	mov	r0, r4
 8009c50:	4629      	mov	r1, r5
 8009c52:	ec53 2b18 	vmov	r2, r3, d8
 8009c56:	f7f6 fb13 	bl	8000280 <__aeabi_dsub>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4650      	mov	r0, sl
 8009c60:	4659      	mov	r1, fp
 8009c62:	f7f6 fb0d 	bl	8000280 <__aeabi_dsub>
 8009c66:	4642      	mov	r2, r8
 8009c68:	464b      	mov	r3, r9
 8009c6a:	f7f6 fcc1 	bl	80005f0 <__aeabi_dmul>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	460b      	mov	r3, r1
 8009c72:	4630      	mov	r0, r6
 8009c74:	4639      	mov	r1, r7
 8009c76:	f7f6 fb03 	bl	8000280 <__aeabi_dsub>
 8009c7a:	ec53 2b19 	vmov	r2, r3, d9
 8009c7e:	f7f6 fcb7 	bl	80005f0 <__aeabi_dmul>
 8009c82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c86:	ec41 0b18 	vmov	d8, r0, r1
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	f7f6 fcaf 	bl	80005f0 <__aeabi_dmul>
 8009c92:	4604      	mov	r4, r0
 8009c94:	460d      	mov	r5, r1
 8009c96:	a37c      	add	r3, pc, #496	; (adr r3, 8009e88 <__ieee754_pow+0x6f0>)
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	f7f6 fca8 	bl	80005f0 <__aeabi_dmul>
 8009ca0:	a37b      	add	r3, pc, #492	; (adr r3, 8009e90 <__ieee754_pow+0x6f8>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f7f6 faed 	bl	8000284 <__adddf3>
 8009caa:	4622      	mov	r2, r4
 8009cac:	462b      	mov	r3, r5
 8009cae:	f7f6 fc9f 	bl	80005f0 <__aeabi_dmul>
 8009cb2:	a379      	add	r3, pc, #484	; (adr r3, 8009e98 <__ieee754_pow+0x700>)
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	f7f6 fae4 	bl	8000284 <__adddf3>
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	462b      	mov	r3, r5
 8009cc0:	f7f6 fc96 	bl	80005f0 <__aeabi_dmul>
 8009cc4:	a376      	add	r3, pc, #472	; (adr r3, 8009ea0 <__ieee754_pow+0x708>)
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f7f6 fadb 	bl	8000284 <__adddf3>
 8009cce:	4622      	mov	r2, r4
 8009cd0:	462b      	mov	r3, r5
 8009cd2:	f7f6 fc8d 	bl	80005f0 <__aeabi_dmul>
 8009cd6:	a374      	add	r3, pc, #464	; (adr r3, 8009ea8 <__ieee754_pow+0x710>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	f7f6 fad2 	bl	8000284 <__adddf3>
 8009ce0:	4622      	mov	r2, r4
 8009ce2:	462b      	mov	r3, r5
 8009ce4:	f7f6 fc84 	bl	80005f0 <__aeabi_dmul>
 8009ce8:	a371      	add	r3, pc, #452	; (adr r3, 8009eb0 <__ieee754_pow+0x718>)
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	f7f6 fac9 	bl	8000284 <__adddf3>
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	460f      	mov	r7, r1
 8009cf6:	4622      	mov	r2, r4
 8009cf8:	462b      	mov	r3, r5
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	f7f6 fc77 	bl	80005f0 <__aeabi_dmul>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	4630      	mov	r0, r6
 8009d08:	4639      	mov	r1, r7
 8009d0a:	f7f6 fc71 	bl	80005f0 <__aeabi_dmul>
 8009d0e:	4642      	mov	r2, r8
 8009d10:	4604      	mov	r4, r0
 8009d12:	460d      	mov	r5, r1
 8009d14:	464b      	mov	r3, r9
 8009d16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d1a:	f7f6 fab3 	bl	8000284 <__adddf3>
 8009d1e:	ec53 2b18 	vmov	r2, r3, d8
 8009d22:	f7f6 fc65 	bl	80005f0 <__aeabi_dmul>
 8009d26:	4622      	mov	r2, r4
 8009d28:	462b      	mov	r3, r5
 8009d2a:	f7f6 faab 	bl	8000284 <__adddf3>
 8009d2e:	4642      	mov	r2, r8
 8009d30:	4682      	mov	sl, r0
 8009d32:	468b      	mov	fp, r1
 8009d34:	464b      	mov	r3, r9
 8009d36:	4640      	mov	r0, r8
 8009d38:	4649      	mov	r1, r9
 8009d3a:	f7f6 fc59 	bl	80005f0 <__aeabi_dmul>
 8009d3e:	2200      	movs	r2, #0
 8009d40:	4b6b      	ldr	r3, [pc, #428]	; (8009ef0 <__ieee754_pow+0x758>)
 8009d42:	4606      	mov	r6, r0
 8009d44:	460f      	mov	r7, r1
 8009d46:	f7f6 fa9d 	bl	8000284 <__adddf3>
 8009d4a:	4652      	mov	r2, sl
 8009d4c:	465b      	mov	r3, fp
 8009d4e:	f7f6 fa99 	bl	8000284 <__adddf3>
 8009d52:	9c04      	ldr	r4, [sp, #16]
 8009d54:	460d      	mov	r5, r1
 8009d56:	460b      	mov	r3, r1
 8009d58:	4622      	mov	r2, r4
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	4649      	mov	r1, r9
 8009d5e:	f7f6 fc47 	bl	80005f0 <__aeabi_dmul>
 8009d62:	2200      	movs	r2, #0
 8009d64:	4680      	mov	r8, r0
 8009d66:	4689      	mov	r9, r1
 8009d68:	4b61      	ldr	r3, [pc, #388]	; (8009ef0 <__ieee754_pow+0x758>)
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	f7f6 fa87 	bl	8000280 <__aeabi_dsub>
 8009d72:	4632      	mov	r2, r6
 8009d74:	463b      	mov	r3, r7
 8009d76:	f7f6 fa83 	bl	8000280 <__aeabi_dsub>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4650      	mov	r0, sl
 8009d80:	4659      	mov	r1, fp
 8009d82:	f7f6 fa7d 	bl	8000280 <__aeabi_dsub>
 8009d86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d8a:	f7f6 fc31 	bl	80005f0 <__aeabi_dmul>
 8009d8e:	4606      	mov	r6, r0
 8009d90:	460f      	mov	r7, r1
 8009d92:	4622      	mov	r2, r4
 8009d94:	462b      	mov	r3, r5
 8009d96:	ec51 0b18 	vmov	r0, r1, d8
 8009d9a:	f7f6 fc29 	bl	80005f0 <__aeabi_dmul>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	460b      	mov	r3, r1
 8009da2:	4630      	mov	r0, r6
 8009da4:	4639      	mov	r1, r7
 8009da6:	f7f6 fa6d 	bl	8000284 <__adddf3>
 8009daa:	4606      	mov	r6, r0
 8009dac:	460f      	mov	r7, r1
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	4640      	mov	r0, r8
 8009db4:	4649      	mov	r1, r9
 8009db6:	f7f6 fa65 	bl	8000284 <__adddf3>
 8009dba:	9c04      	ldr	r4, [sp, #16]
 8009dbc:	460d      	mov	r5, r1
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	a33d      	add	r3, pc, #244	; (adr r3, 8009eb8 <__ieee754_pow+0x720>)
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	f7f6 fc13 	bl	80005f0 <__aeabi_dmul>
 8009dca:	4642      	mov	r2, r8
 8009dcc:	464b      	mov	r3, r9
 8009dce:	ec41 0b18 	vmov	d8, r0, r1
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	f7f6 fa53 	bl	8000280 <__aeabi_dsub>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4630      	mov	r0, r6
 8009de0:	4639      	mov	r1, r7
 8009de2:	f7f6 fa4d 	bl	8000280 <__aeabi_dsub>
 8009de6:	a336      	add	r3, pc, #216	; (adr r3, 8009ec0 <__ieee754_pow+0x728>)
 8009de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dec:	f7f6 fc00 	bl	80005f0 <__aeabi_dmul>
 8009df0:	4606      	mov	r6, r0
 8009df2:	460f      	mov	r7, r1
 8009df4:	4620      	mov	r0, r4
 8009df6:	4629      	mov	r1, r5
 8009df8:	a333      	add	r3, pc, #204	; (adr r3, 8009ec8 <__ieee754_pow+0x730>)
 8009dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfe:	f7f6 fbf7 	bl	80005f0 <__aeabi_dmul>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4630      	mov	r0, r6
 8009e08:	4639      	mov	r1, r7
 8009e0a:	f7f6 fa3b 	bl	8000284 <__adddf3>
 8009e0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e10:	4b38      	ldr	r3, [pc, #224]	; (8009ef4 <__ieee754_pow+0x75c>)
 8009e12:	4413      	add	r3, r2
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	f7f6 fa34 	bl	8000284 <__adddf3>
 8009e1c:	4682      	mov	sl, r0
 8009e1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e20:	468b      	mov	fp, r1
 8009e22:	f7f6 fb7b 	bl	800051c <__aeabi_i2d>
 8009e26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e28:	4b33      	ldr	r3, [pc, #204]	; (8009ef8 <__ieee754_pow+0x760>)
 8009e2a:	4606      	mov	r6, r0
 8009e2c:	460f      	mov	r7, r1
 8009e2e:	4413      	add	r3, r2
 8009e30:	4652      	mov	r2, sl
 8009e32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e36:	ec51 0b18 	vmov	r0, r1, d8
 8009e3a:	465b      	mov	r3, fp
 8009e3c:	f7f6 fa22 	bl	8000284 <__adddf3>
 8009e40:	4642      	mov	r2, r8
 8009e42:	464b      	mov	r3, r9
 8009e44:	f7f6 fa1e 	bl	8000284 <__adddf3>
 8009e48:	4632      	mov	r2, r6
 8009e4a:	463b      	mov	r3, r7
 8009e4c:	f7f6 fa1a 	bl	8000284 <__adddf3>
 8009e50:	9c04      	ldr	r4, [sp, #16]
 8009e52:	4632      	mov	r2, r6
 8009e54:	463b      	mov	r3, r7
 8009e56:	4620      	mov	r0, r4
 8009e58:	460d      	mov	r5, r1
 8009e5a:	f7f6 fa11 	bl	8000280 <__aeabi_dsub>
 8009e5e:	4642      	mov	r2, r8
 8009e60:	464b      	mov	r3, r9
 8009e62:	f7f6 fa0d 	bl	8000280 <__aeabi_dsub>
 8009e66:	ec53 2b18 	vmov	r2, r3, d8
 8009e6a:	f7f6 fa09 	bl	8000280 <__aeabi_dsub>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	4650      	mov	r0, sl
 8009e74:	4659      	mov	r1, fp
 8009e76:	e606      	b.n	8009a86 <__ieee754_pow+0x2ee>
 8009e78:	2401      	movs	r4, #1
 8009e7a:	e6a0      	b.n	8009bbe <__ieee754_pow+0x426>
 8009e7c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009ed0 <__ieee754_pow+0x738>
 8009e80:	e60d      	b.n	8009a9e <__ieee754_pow+0x306>
 8009e82:	bf00      	nop
 8009e84:	f3af 8000 	nop.w
 8009e88:	4a454eef 	.word	0x4a454eef
 8009e8c:	3fca7e28 	.word	0x3fca7e28
 8009e90:	93c9db65 	.word	0x93c9db65
 8009e94:	3fcd864a 	.word	0x3fcd864a
 8009e98:	a91d4101 	.word	0xa91d4101
 8009e9c:	3fd17460 	.word	0x3fd17460
 8009ea0:	518f264d 	.word	0x518f264d
 8009ea4:	3fd55555 	.word	0x3fd55555
 8009ea8:	db6fabff 	.word	0xdb6fabff
 8009eac:	3fdb6db6 	.word	0x3fdb6db6
 8009eb0:	33333303 	.word	0x33333303
 8009eb4:	3fe33333 	.word	0x3fe33333
 8009eb8:	e0000000 	.word	0xe0000000
 8009ebc:	3feec709 	.word	0x3feec709
 8009ec0:	dc3a03fd 	.word	0xdc3a03fd
 8009ec4:	3feec709 	.word	0x3feec709
 8009ec8:	145b01f5 	.word	0x145b01f5
 8009ecc:	be3e2fe0 	.word	0xbe3e2fe0
 8009ed0:	00000000 	.word	0x00000000
 8009ed4:	3ff00000 	.word	0x3ff00000
 8009ed8:	7ff00000 	.word	0x7ff00000
 8009edc:	43400000 	.word	0x43400000
 8009ee0:	0003988e 	.word	0x0003988e
 8009ee4:	000bb679 	.word	0x000bb679
 8009ee8:	0800bcc8 	.word	0x0800bcc8
 8009eec:	3ff00000 	.word	0x3ff00000
 8009ef0:	40080000 	.word	0x40080000
 8009ef4:	0800bce8 	.word	0x0800bce8
 8009ef8:	0800bcd8 	.word	0x0800bcd8
 8009efc:	a3b7      	add	r3, pc, #732	; (adr r3, 800a1dc <__ieee754_pow+0xa44>)
 8009efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f02:	4640      	mov	r0, r8
 8009f04:	4649      	mov	r1, r9
 8009f06:	f7f6 f9bd 	bl	8000284 <__adddf3>
 8009f0a:	4622      	mov	r2, r4
 8009f0c:	462b      	mov	r3, r5
 8009f0e:	ec41 0b1a 	vmov	d10, r0, r1
 8009f12:	4630      	mov	r0, r6
 8009f14:	4639      	mov	r1, r7
 8009f16:	f7f6 f9b3 	bl	8000280 <__aeabi_dsub>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	ec51 0b1a 	vmov	r0, r1, d10
 8009f22:	f7f6 fdf5 	bl	8000b10 <__aeabi_dcmpgt>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	f47f adf8 	bne.w	8009b1c <__ieee754_pow+0x384>
 8009f2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f30:	4aa5      	ldr	r2, [pc, #660]	; (800a1c8 <__ieee754_pow+0xa30>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	f340 810c 	ble.w	800a150 <__ieee754_pow+0x9b8>
 8009f38:	151b      	asrs	r3, r3, #20
 8009f3a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009f3e:	4ea3      	ldr	r6, [pc, #652]	; (800a1cc <__ieee754_pow+0xa34>)
 8009f40:	2000      	movs	r0, #0
 8009f42:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009f46:	f1bb 0f00 	cmp.w	fp, #0
 8009f4a:	fa4a f303 	asr.w	r3, sl, r3
 8009f4e:	445b      	add	r3, fp
 8009f50:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009f54:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009f58:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009f5c:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009f60:	fa46 f602 	asr.w	r6, r6, r2
 8009f64:	f1c2 0214 	rsb	r2, r2, #20
 8009f68:	ea23 0106 	bic.w	r1, r3, r6
 8009f6c:	fa4a fa02 	asr.w	sl, sl, r2
 8009f70:	4602      	mov	r2, r0
 8009f72:	4620      	mov	r0, r4
 8009f74:	460b      	mov	r3, r1
 8009f76:	4629      	mov	r1, r5
 8009f78:	bfb8      	it	lt
 8009f7a:	f1ca 0a00 	rsblt	sl, sl, #0
 8009f7e:	f7f6 f97f 	bl	8000280 <__aeabi_dsub>
 8009f82:	ec41 0b19 	vmov	d9, r0, r1
 8009f86:	2400      	movs	r4, #0
 8009f88:	4642      	mov	r2, r8
 8009f8a:	464b      	mov	r3, r9
 8009f8c:	ec51 0b19 	vmov	r0, r1, d9
 8009f90:	f7f6 f978 	bl	8000284 <__adddf3>
 8009f94:	460d      	mov	r5, r1
 8009f96:	4620      	mov	r0, r4
 8009f98:	a379      	add	r3, pc, #484	; (adr r3, 800a180 <__ieee754_pow+0x9e8>)
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	f7f6 fb27 	bl	80005f0 <__aeabi_dmul>
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	460f      	mov	r7, r1
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	4629      	mov	r1, r5
 8009faa:	ec53 2b19 	vmov	r2, r3, d9
 8009fae:	f7f6 f967 	bl	8000280 <__aeabi_dsub>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4640      	mov	r0, r8
 8009fb8:	4649      	mov	r1, r9
 8009fba:	f7f6 f961 	bl	8000280 <__aeabi_dsub>
 8009fbe:	a372      	add	r3, pc, #456	; (adr r3, 800a188 <__ieee754_pow+0x9f0>)
 8009fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc4:	f7f6 fb14 	bl	80005f0 <__aeabi_dmul>
 8009fc8:	4680      	mov	r8, r0
 8009fca:	4689      	mov	r9, r1
 8009fcc:	4620      	mov	r0, r4
 8009fce:	4629      	mov	r1, r5
 8009fd0:	a36f      	add	r3, pc, #444	; (adr r3, 800a190 <__ieee754_pow+0x9f8>)
 8009fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd6:	f7f6 fb0b 	bl	80005f0 <__aeabi_dmul>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	460b      	mov	r3, r1
 8009fde:	4640      	mov	r0, r8
 8009fe0:	4649      	mov	r1, r9
 8009fe2:	f7f6 f94f 	bl	8000284 <__adddf3>
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	460d      	mov	r5, r1
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	4630      	mov	r0, r6
 8009ff0:	4639      	mov	r1, r7
 8009ff2:	f7f6 f947 	bl	8000284 <__adddf3>
 8009ff6:	4632      	mov	r2, r6
 8009ff8:	4680      	mov	r8, r0
 8009ffa:	4689      	mov	r9, r1
 8009ffc:	463b      	mov	r3, r7
 8009ffe:	f7f6 f93f 	bl	8000280 <__aeabi_dsub>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	4620      	mov	r0, r4
 800a008:	4629      	mov	r1, r5
 800a00a:	f7f6 f939 	bl	8000280 <__aeabi_dsub>
 800a00e:	4642      	mov	r2, r8
 800a010:	4606      	mov	r6, r0
 800a012:	460f      	mov	r7, r1
 800a014:	464b      	mov	r3, r9
 800a016:	4640      	mov	r0, r8
 800a018:	4649      	mov	r1, r9
 800a01a:	f7f6 fae9 	bl	80005f0 <__aeabi_dmul>
 800a01e:	4604      	mov	r4, r0
 800a020:	460d      	mov	r5, r1
 800a022:	a35d      	add	r3, pc, #372	; (adr r3, 800a198 <__ieee754_pow+0xa00>)
 800a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a028:	f7f6 fae2 	bl	80005f0 <__aeabi_dmul>
 800a02c:	a35c      	add	r3, pc, #368	; (adr r3, 800a1a0 <__ieee754_pow+0xa08>)
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	f7f6 f925 	bl	8000280 <__aeabi_dsub>
 800a036:	4622      	mov	r2, r4
 800a038:	462b      	mov	r3, r5
 800a03a:	f7f6 fad9 	bl	80005f0 <__aeabi_dmul>
 800a03e:	a35a      	add	r3, pc, #360	; (adr r3, 800a1a8 <__ieee754_pow+0xa10>)
 800a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a044:	f7f6 f91e 	bl	8000284 <__adddf3>
 800a048:	4622      	mov	r2, r4
 800a04a:	462b      	mov	r3, r5
 800a04c:	f7f6 fad0 	bl	80005f0 <__aeabi_dmul>
 800a050:	a357      	add	r3, pc, #348	; (adr r3, 800a1b0 <__ieee754_pow+0xa18>)
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	f7f6 f913 	bl	8000280 <__aeabi_dsub>
 800a05a:	4622      	mov	r2, r4
 800a05c:	462b      	mov	r3, r5
 800a05e:	f7f6 fac7 	bl	80005f0 <__aeabi_dmul>
 800a062:	a355      	add	r3, pc, #340	; (adr r3, 800a1b8 <__ieee754_pow+0xa20>)
 800a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a068:	f7f6 f90c 	bl	8000284 <__adddf3>
 800a06c:	4622      	mov	r2, r4
 800a06e:	462b      	mov	r3, r5
 800a070:	f7f6 fabe 	bl	80005f0 <__aeabi_dmul>
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	4640      	mov	r0, r8
 800a07a:	4649      	mov	r1, r9
 800a07c:	f7f6 f900 	bl	8000280 <__aeabi_dsub>
 800a080:	4604      	mov	r4, r0
 800a082:	460d      	mov	r5, r1
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	4640      	mov	r0, r8
 800a08a:	4649      	mov	r1, r9
 800a08c:	f7f6 fab0 	bl	80005f0 <__aeabi_dmul>
 800a090:	2200      	movs	r2, #0
 800a092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a096:	ec41 0b19 	vmov	d9, r0, r1
 800a09a:	4620      	mov	r0, r4
 800a09c:	4629      	mov	r1, r5
 800a09e:	f7f6 f8ef 	bl	8000280 <__aeabi_dsub>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	ec51 0b19 	vmov	r0, r1, d9
 800a0aa:	f7f6 fbcb 	bl	8000844 <__aeabi_ddiv>
 800a0ae:	4632      	mov	r2, r6
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	460d      	mov	r5, r1
 800a0b4:	463b      	mov	r3, r7
 800a0b6:	4640      	mov	r0, r8
 800a0b8:	4649      	mov	r1, r9
 800a0ba:	f7f6 fa99 	bl	80005f0 <__aeabi_dmul>
 800a0be:	4632      	mov	r2, r6
 800a0c0:	463b      	mov	r3, r7
 800a0c2:	f7f6 f8df 	bl	8000284 <__adddf3>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	4629      	mov	r1, r5
 800a0ce:	f7f6 f8d7 	bl	8000280 <__aeabi_dsub>
 800a0d2:	4642      	mov	r2, r8
 800a0d4:	464b      	mov	r3, r9
 800a0d6:	f7f6 f8d3 	bl	8000280 <__aeabi_dsub>
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4602      	mov	r2, r0
 800a0de:	493c      	ldr	r1, [pc, #240]	; (800a1d0 <__ieee754_pow+0xa38>)
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	f7f6 f8cd 	bl	8000280 <__aeabi_dsub>
 800a0e6:	e9cd 0100 	strd	r0, r1, [sp]
 800a0ea:	9b01      	ldr	r3, [sp, #4]
 800a0ec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a0f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0f4:	da2f      	bge.n	800a156 <__ieee754_pow+0x9be>
 800a0f6:	4650      	mov	r0, sl
 800a0f8:	ed9d 0b00 	vldr	d0, [sp]
 800a0fc:	f000 f9d4 	bl	800a4a8 <scalbn>
 800a100:	ec51 0b10 	vmov	r0, r1, d0
 800a104:	ec53 2b18 	vmov	r2, r3, d8
 800a108:	f7ff bbdf 	b.w	80098ca <__ieee754_pow+0x132>
 800a10c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a110:	4b30      	ldr	r3, [pc, #192]	; (800a1d4 <__ieee754_pow+0xa3c>)
 800a112:	429e      	cmp	r6, r3
 800a114:	f77f af0a 	ble.w	8009f2c <__ieee754_pow+0x794>
 800a118:	4b2f      	ldr	r3, [pc, #188]	; (800a1d8 <__ieee754_pow+0xa40>)
 800a11a:	440b      	add	r3, r1
 800a11c:	4303      	orrs	r3, r0
 800a11e:	d00b      	beq.n	800a138 <__ieee754_pow+0x9a0>
 800a120:	a327      	add	r3, pc, #156	; (adr r3, 800a1c0 <__ieee754_pow+0xa28>)
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	ec51 0b18 	vmov	r0, r1, d8
 800a12a:	f7f6 fa61 	bl	80005f0 <__aeabi_dmul>
 800a12e:	a324      	add	r3, pc, #144	; (adr r3, 800a1c0 <__ieee754_pow+0xa28>)
 800a130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a134:	f7ff bbc9 	b.w	80098ca <__ieee754_pow+0x132>
 800a138:	4622      	mov	r2, r4
 800a13a:	462b      	mov	r3, r5
 800a13c:	f7f6 f8a0 	bl	8000280 <__aeabi_dsub>
 800a140:	4642      	mov	r2, r8
 800a142:	464b      	mov	r3, r9
 800a144:	f7f6 fcda 	bl	8000afc <__aeabi_dcmpge>
 800a148:	2800      	cmp	r0, #0
 800a14a:	f43f aeef 	beq.w	8009f2c <__ieee754_pow+0x794>
 800a14e:	e7e7      	b.n	800a120 <__ieee754_pow+0x988>
 800a150:	f04f 0a00 	mov.w	sl, #0
 800a154:	e717      	b.n	8009f86 <__ieee754_pow+0x7ee>
 800a156:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a15a:	4619      	mov	r1, r3
 800a15c:	e7d2      	b.n	800a104 <__ieee754_pow+0x96c>
 800a15e:	2000      	movs	r0, #0
 800a160:	491b      	ldr	r1, [pc, #108]	; (800a1d0 <__ieee754_pow+0xa38>)
 800a162:	f7ff bb9d 	b.w	80098a0 <__ieee754_pow+0x108>
 800a166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a16a:	f7ff bb99 	b.w	80098a0 <__ieee754_pow+0x108>
 800a16e:	9000      	str	r0, [sp, #0]
 800a170:	f7ff bb75 	b.w	800985e <__ieee754_pow+0xc6>
 800a174:	2100      	movs	r1, #0
 800a176:	f7ff bb5f 	b.w	8009838 <__ieee754_pow+0xa0>
 800a17a:	bf00      	nop
 800a17c:	f3af 8000 	nop.w
 800a180:	00000000 	.word	0x00000000
 800a184:	3fe62e43 	.word	0x3fe62e43
 800a188:	fefa39ef 	.word	0xfefa39ef
 800a18c:	3fe62e42 	.word	0x3fe62e42
 800a190:	0ca86c39 	.word	0x0ca86c39
 800a194:	be205c61 	.word	0xbe205c61
 800a198:	72bea4d0 	.word	0x72bea4d0
 800a19c:	3e663769 	.word	0x3e663769
 800a1a0:	c5d26bf1 	.word	0xc5d26bf1
 800a1a4:	3ebbbd41 	.word	0x3ebbbd41
 800a1a8:	af25de2c 	.word	0xaf25de2c
 800a1ac:	3f11566a 	.word	0x3f11566a
 800a1b0:	16bebd93 	.word	0x16bebd93
 800a1b4:	3f66c16c 	.word	0x3f66c16c
 800a1b8:	5555553e 	.word	0x5555553e
 800a1bc:	3fc55555 	.word	0x3fc55555
 800a1c0:	c2f8f359 	.word	0xc2f8f359
 800a1c4:	01a56e1f 	.word	0x01a56e1f
 800a1c8:	3fe00000 	.word	0x3fe00000
 800a1cc:	000fffff 	.word	0x000fffff
 800a1d0:	3ff00000 	.word	0x3ff00000
 800a1d4:	4090cbff 	.word	0x4090cbff
 800a1d8:	3f6f3400 	.word	0x3f6f3400
 800a1dc:	652b82fe 	.word	0x652b82fe
 800a1e0:	3c971547 	.word	0x3c971547

0800a1e4 <__ieee754_sqrt>:
 800a1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e8:	4e59      	ldr	r6, [pc, #356]	; (800a350 <__ieee754_sqrt+0x16c>)
 800a1ea:	ee10 0a10 	vmov	r0, s0
 800a1ee:	ee10 3a10 	vmov	r3, s0
 800a1f2:	ec55 4b10 	vmov	r4, r5, d0
 800a1f6:	43ae      	bics	r6, r5
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	d110      	bne.n	800a220 <__ieee754_sqrt+0x3c>
 800a1fe:	ee10 2a10 	vmov	r2, s0
 800a202:	462b      	mov	r3, r5
 800a204:	f7f6 f9f4 	bl	80005f0 <__aeabi_dmul>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	4620      	mov	r0, r4
 800a20e:	4629      	mov	r1, r5
 800a210:	f7f6 f838 	bl	8000284 <__adddf3>
 800a214:	4604      	mov	r4, r0
 800a216:	460d      	mov	r5, r1
 800a218:	ec45 4b10 	vmov	d0, r4, r5
 800a21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a220:	2d00      	cmp	r5, #0
 800a222:	dc10      	bgt.n	800a246 <__ieee754_sqrt+0x62>
 800a224:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a228:	4330      	orrs	r0, r6
 800a22a:	d0f5      	beq.n	800a218 <__ieee754_sqrt+0x34>
 800a22c:	b15d      	cbz	r5, 800a246 <__ieee754_sqrt+0x62>
 800a22e:	ee10 2a10 	vmov	r2, s0
 800a232:	462b      	mov	r3, r5
 800a234:	ee10 0a10 	vmov	r0, s0
 800a238:	f7f6 f822 	bl	8000280 <__aeabi_dsub>
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	f7f6 fb00 	bl	8000844 <__aeabi_ddiv>
 800a244:	e7e6      	b.n	800a214 <__ieee754_sqrt+0x30>
 800a246:	1509      	asrs	r1, r1, #20
 800a248:	d07a      	beq.n	800a340 <__ieee754_sqrt+0x15c>
 800a24a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a24e:	07ce      	lsls	r6, r1, #31
 800a250:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a254:	f04f 0e16 	mov.w	lr, #22
 800a258:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a25c:	bf5c      	itt	pl
 800a25e:	0fda      	lsrpl	r2, r3, #31
 800a260:	005b      	lslpl	r3, r3, #1
 800a262:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a266:	bf58      	it	pl
 800a268:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a26c:	0fda      	lsrs	r2, r3, #31
 800a26e:	106d      	asrs	r5, r5, #1
 800a270:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a274:	2000      	movs	r0, #0
 800a276:	005b      	lsls	r3, r3, #1
 800a278:	4684      	mov	ip, r0
 800a27a:	eb0c 0401 	add.w	r4, ip, r1
 800a27e:	4294      	cmp	r4, r2
 800a280:	bfde      	ittt	le
 800a282:	1b12      	suble	r2, r2, r4
 800a284:	eb04 0c01 	addle.w	ip, r4, r1
 800a288:	1840      	addle	r0, r0, r1
 800a28a:	f1be 0e01 	subs.w	lr, lr, #1
 800a28e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a292:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a296:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a29a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a29e:	d1ec      	bne.n	800a27a <__ieee754_sqrt+0x96>
 800a2a0:	4671      	mov	r1, lr
 800a2a2:	2720      	movs	r7, #32
 800a2a4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a2a8:	4562      	cmp	r2, ip
 800a2aa:	eb04 060e 	add.w	r6, r4, lr
 800a2ae:	dc02      	bgt.n	800a2b6 <__ieee754_sqrt+0xd2>
 800a2b0:	d114      	bne.n	800a2dc <__ieee754_sqrt+0xf8>
 800a2b2:	429e      	cmp	r6, r3
 800a2b4:	d812      	bhi.n	800a2dc <__ieee754_sqrt+0xf8>
 800a2b6:	2e00      	cmp	r6, #0
 800a2b8:	eb06 0e04 	add.w	lr, r6, r4
 800a2bc:	da45      	bge.n	800a34a <__ieee754_sqrt+0x166>
 800a2be:	f1be 0f00 	cmp.w	lr, #0
 800a2c2:	db42      	blt.n	800a34a <__ieee754_sqrt+0x166>
 800a2c4:	f10c 0801 	add.w	r8, ip, #1
 800a2c8:	eba2 020c 	sub.w	r2, r2, ip
 800a2cc:	429e      	cmp	r6, r3
 800a2ce:	4421      	add	r1, r4
 800a2d0:	eba3 0306 	sub.w	r3, r3, r6
 800a2d4:	bf88      	it	hi
 800a2d6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a2da:	46c4      	mov	ip, r8
 800a2dc:	0052      	lsls	r2, r2, #1
 800a2de:	3f01      	subs	r7, #1
 800a2e0:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a2e4:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a2e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a2ec:	d1dc      	bne.n	800a2a8 <__ieee754_sqrt+0xc4>
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	d006      	beq.n	800a300 <__ieee754_sqrt+0x11c>
 800a2f2:	1c4c      	adds	r4, r1, #1
 800a2f4:	bf13      	iteet	ne
 800a2f6:	3101      	addne	r1, #1
 800a2f8:	3001      	addeq	r0, #1
 800a2fa:	4639      	moveq	r1, r7
 800a2fc:	f021 0101 	bicne.w	r1, r1, #1
 800a300:	1043      	asrs	r3, r0, #1
 800a302:	07c2      	lsls	r2, r0, #31
 800a304:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a308:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a30c:	bf48      	it	mi
 800a30e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a312:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a316:	460c      	mov	r4, r1
 800a318:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a31c:	463d      	mov	r5, r7
 800a31e:	e77b      	b.n	800a218 <__ieee754_sqrt+0x34>
 800a320:	0ada      	lsrs	r2, r3, #11
 800a322:	3815      	subs	r0, #21
 800a324:	055b      	lsls	r3, r3, #21
 800a326:	2a00      	cmp	r2, #0
 800a328:	d0fa      	beq.n	800a320 <__ieee754_sqrt+0x13c>
 800a32a:	02d7      	lsls	r7, r2, #11
 800a32c:	d50a      	bpl.n	800a344 <__ieee754_sqrt+0x160>
 800a32e:	f1c1 0420 	rsb	r4, r1, #32
 800a332:	1e4d      	subs	r5, r1, #1
 800a334:	fa23 f404 	lsr.w	r4, r3, r4
 800a338:	408b      	lsls	r3, r1
 800a33a:	1b41      	subs	r1, r0, r5
 800a33c:	4322      	orrs	r2, r4
 800a33e:	e784      	b.n	800a24a <__ieee754_sqrt+0x66>
 800a340:	4608      	mov	r0, r1
 800a342:	e7f0      	b.n	800a326 <__ieee754_sqrt+0x142>
 800a344:	0052      	lsls	r2, r2, #1
 800a346:	3101      	adds	r1, #1
 800a348:	e7ef      	b.n	800a32a <__ieee754_sqrt+0x146>
 800a34a:	46e0      	mov	r8, ip
 800a34c:	e7bc      	b.n	800a2c8 <__ieee754_sqrt+0xe4>
 800a34e:	bf00      	nop
 800a350:	7ff00000 	.word	0x7ff00000

0800a354 <fabs>:
 800a354:	ec51 0b10 	vmov	r0, r1, d0
 800a358:	ee10 2a10 	vmov	r2, s0
 800a35c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a360:	ec43 2b10 	vmov	d0, r2, r3
 800a364:	4770      	bx	lr

0800a366 <finite>:
 800a366:	b082      	sub	sp, #8
 800a368:	ed8d 0b00 	vstr	d0, [sp]
 800a36c:	9801      	ldr	r0, [sp, #4]
 800a36e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a372:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a376:	0fc0      	lsrs	r0, r0, #31
 800a378:	b002      	add	sp, #8
 800a37a:	4770      	bx	lr
 800a37c:	0000      	movs	r0, r0
	...

0800a380 <nan>:
 800a380:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a388 <nan+0x8>
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	00000000 	.word	0x00000000
 800a38c:	7ff80000 	.word	0x7ff80000

0800a390 <rint>:
 800a390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a392:	ec51 0b10 	vmov	r0, r1, d0
 800a396:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a39a:	460b      	mov	r3, r1
 800a39c:	ee10 4a10 	vmov	r4, s0
 800a3a0:	0fcd      	lsrs	r5, r1, #31
 800a3a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a3a6:	2e13      	cmp	r6, #19
 800a3a8:	dc58      	bgt.n	800a45c <rint+0xcc>
 800a3aa:	2e00      	cmp	r6, #0
 800a3ac:	da2b      	bge.n	800a406 <rint+0x76>
 800a3ae:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a3b2:	4302      	orrs	r2, r0
 800a3b4:	d023      	beq.n	800a3fe <rint+0x6e>
 800a3b6:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a3ba:	0c4b      	lsrs	r3, r1, #17
 800a3bc:	4302      	orrs	r2, r0
 800a3be:	045b      	lsls	r3, r3, #17
 800a3c0:	4254      	negs	r4, r2
 800a3c2:	4314      	orrs	r4, r2
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	0b24      	lsrs	r4, r4, #12
 800a3c8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a3cc:	ea44 0103 	orr.w	r1, r4, r3
 800a3d0:	4b32      	ldr	r3, [pc, #200]	; (800a49c <rint+0x10c>)
 800a3d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a3d6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4630      	mov	r0, r6
 800a3de:	4639      	mov	r1, r7
 800a3e0:	f7f5 ff50 	bl	8000284 <__adddf3>
 800a3e4:	463b      	mov	r3, r7
 800a3e6:	4632      	mov	r2, r6
 800a3e8:	e9cd 0100 	strd	r0, r1, [sp]
 800a3ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3f0:	f7f5 ff46 	bl	8000280 <__aeabi_dsub>
 800a3f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3f8:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a3fc:	4639      	mov	r1, r7
 800a3fe:	ec41 0b10 	vmov	d0, r0, r1
 800a402:	b003      	add	sp, #12
 800a404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a406:	4a26      	ldr	r2, [pc, #152]	; (800a4a0 <rint+0x110>)
 800a408:	4132      	asrs	r2, r6
 800a40a:	ea01 0702 	and.w	r7, r1, r2
 800a40e:	4307      	orrs	r7, r0
 800a410:	d0f5      	beq.n	800a3fe <rint+0x6e>
 800a412:	0851      	lsrs	r1, r2, #1
 800a414:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800a418:	4314      	orrs	r4, r2
 800a41a:	d00c      	beq.n	800a436 <rint+0xa6>
 800a41c:	ea23 0201 	bic.w	r2, r3, r1
 800a420:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a424:	2e13      	cmp	r6, #19
 800a426:	fa43 f606 	asr.w	r6, r3, r6
 800a42a:	bf0c      	ite	eq
 800a42c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a430:	2400      	movne	r4, #0
 800a432:	ea42 0306 	orr.w	r3, r2, r6
 800a436:	4919      	ldr	r1, [pc, #100]	; (800a49c <rint+0x10c>)
 800a438:	4622      	mov	r2, r4
 800a43a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a43e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a442:	4620      	mov	r0, r4
 800a444:	4629      	mov	r1, r5
 800a446:	f7f5 ff1d 	bl	8000284 <__adddf3>
 800a44a:	4622      	mov	r2, r4
 800a44c:	462b      	mov	r3, r5
 800a44e:	e9cd 0100 	strd	r0, r1, [sp]
 800a452:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a456:	f7f5 ff13 	bl	8000280 <__aeabi_dsub>
 800a45a:	e7d0      	b.n	800a3fe <rint+0x6e>
 800a45c:	2e33      	cmp	r6, #51	; 0x33
 800a45e:	dd07      	ble.n	800a470 <rint+0xe0>
 800a460:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a464:	d1cb      	bne.n	800a3fe <rint+0x6e>
 800a466:	ee10 2a10 	vmov	r2, s0
 800a46a:	f7f5 ff0b 	bl	8000284 <__adddf3>
 800a46e:	e7c6      	b.n	800a3fe <rint+0x6e>
 800a470:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a474:	f04f 36ff 	mov.w	r6, #4294967295
 800a478:	40d6      	lsrs	r6, r2
 800a47a:	4230      	tst	r0, r6
 800a47c:	d0bf      	beq.n	800a3fe <rint+0x6e>
 800a47e:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800a482:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800a486:	bf1f      	itttt	ne
 800a488:	ea24 0101 	bicne.w	r1, r4, r1
 800a48c:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a490:	fa44 f202 	asrne.w	r2, r4, r2
 800a494:	ea41 0402 	orrne.w	r4, r1, r2
 800a498:	e7cd      	b.n	800a436 <rint+0xa6>
 800a49a:	bf00      	nop
 800a49c:	0800bcf8 	.word	0x0800bcf8
 800a4a0:	000fffff 	.word	0x000fffff
 800a4a4:	00000000 	.word	0x00000000

0800a4a8 <scalbn>:
 800a4a8:	b570      	push	{r4, r5, r6, lr}
 800a4aa:	ec55 4b10 	vmov	r4, r5, d0
 800a4ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a4b2:	4606      	mov	r6, r0
 800a4b4:	462b      	mov	r3, r5
 800a4b6:	b99a      	cbnz	r2, 800a4e0 <scalbn+0x38>
 800a4b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a4bc:	4323      	orrs	r3, r4
 800a4be:	d036      	beq.n	800a52e <scalbn+0x86>
 800a4c0:	4b39      	ldr	r3, [pc, #228]	; (800a5a8 <scalbn+0x100>)
 800a4c2:	4629      	mov	r1, r5
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	ee10 0a10 	vmov	r0, s0
 800a4ca:	f7f6 f891 	bl	80005f0 <__aeabi_dmul>
 800a4ce:	4b37      	ldr	r3, [pc, #220]	; (800a5ac <scalbn+0x104>)
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	460d      	mov	r5, r1
 800a4d4:	429e      	cmp	r6, r3
 800a4d6:	da10      	bge.n	800a4fa <scalbn+0x52>
 800a4d8:	a32b      	add	r3, pc, #172	; (adr r3, 800a588 <scalbn+0xe0>)
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	e03a      	b.n	800a556 <scalbn+0xae>
 800a4e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a4e4:	428a      	cmp	r2, r1
 800a4e6:	d10c      	bne.n	800a502 <scalbn+0x5a>
 800a4e8:	ee10 2a10 	vmov	r2, s0
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	f7f5 fec8 	bl	8000284 <__adddf3>
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	460d      	mov	r5, r1
 800a4f8:	e019      	b.n	800a52e <scalbn+0x86>
 800a4fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a4fe:	460b      	mov	r3, r1
 800a500:	3a36      	subs	r2, #54	; 0x36
 800a502:	4432      	add	r2, r6
 800a504:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a508:	428a      	cmp	r2, r1
 800a50a:	dd08      	ble.n	800a51e <scalbn+0x76>
 800a50c:	2d00      	cmp	r5, #0
 800a50e:	a120      	add	r1, pc, #128	; (adr r1, 800a590 <scalbn+0xe8>)
 800a510:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a514:	da1c      	bge.n	800a550 <scalbn+0xa8>
 800a516:	a120      	add	r1, pc, #128	; (adr r1, 800a598 <scalbn+0xf0>)
 800a518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a51c:	e018      	b.n	800a550 <scalbn+0xa8>
 800a51e:	2a00      	cmp	r2, #0
 800a520:	dd08      	ble.n	800a534 <scalbn+0x8c>
 800a522:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a526:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a52a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a52e:	ec45 4b10 	vmov	d0, r4, r5
 800a532:	bd70      	pop	{r4, r5, r6, pc}
 800a534:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a538:	da19      	bge.n	800a56e <scalbn+0xc6>
 800a53a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a53e:	429e      	cmp	r6, r3
 800a540:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a544:	dd0a      	ble.n	800a55c <scalbn+0xb4>
 800a546:	a112      	add	r1, pc, #72	; (adr r1, 800a590 <scalbn+0xe8>)
 800a548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1e2      	bne.n	800a516 <scalbn+0x6e>
 800a550:	a30f      	add	r3, pc, #60	; (adr r3, 800a590 <scalbn+0xe8>)
 800a552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a556:	f7f6 f84b 	bl	80005f0 <__aeabi_dmul>
 800a55a:	e7cb      	b.n	800a4f4 <scalbn+0x4c>
 800a55c:	a10a      	add	r1, pc, #40	; (adr r1, 800a588 <scalbn+0xe0>)
 800a55e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d0b8      	beq.n	800a4d8 <scalbn+0x30>
 800a566:	a10e      	add	r1, pc, #56	; (adr r1, 800a5a0 <scalbn+0xf8>)
 800a568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a56c:	e7b4      	b.n	800a4d8 <scalbn+0x30>
 800a56e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a572:	3236      	adds	r2, #54	; 0x36
 800a574:	4620      	mov	r0, r4
 800a576:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a57a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a57e:	2200      	movs	r2, #0
 800a580:	4b0b      	ldr	r3, [pc, #44]	; (800a5b0 <scalbn+0x108>)
 800a582:	e7e8      	b.n	800a556 <scalbn+0xae>
 800a584:	f3af 8000 	nop.w
 800a588:	c2f8f359 	.word	0xc2f8f359
 800a58c:	01a56e1f 	.word	0x01a56e1f
 800a590:	8800759c 	.word	0x8800759c
 800a594:	7e37e43c 	.word	0x7e37e43c
 800a598:	8800759c 	.word	0x8800759c
 800a59c:	fe37e43c 	.word	0xfe37e43c
 800a5a0:	c2f8f359 	.word	0xc2f8f359
 800a5a4:	81a56e1f 	.word	0x81a56e1f
 800a5a8:	43500000 	.word	0x43500000
 800a5ac:	ffff3cb0 	.word	0xffff3cb0
 800a5b0:	3c900000 	.word	0x3c900000

0800a5b4 <__errno>:
 800a5b4:	4b01      	ldr	r3, [pc, #4]	; (800a5bc <__errno+0x8>)
 800a5b6:	6818      	ldr	r0, [r3, #0]
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	20000090 	.word	0x20000090

0800a5c0 <__libc_init_array>:
 800a5c0:	b570      	push	{r4, r5, r6, lr}
 800a5c2:	4d0d      	ldr	r5, [pc, #52]	; (800a5f8 <__libc_init_array+0x38>)
 800a5c4:	2600      	movs	r6, #0
 800a5c6:	4c0d      	ldr	r4, [pc, #52]	; (800a5fc <__libc_init_array+0x3c>)
 800a5c8:	1b64      	subs	r4, r4, r5
 800a5ca:	10a4      	asrs	r4, r4, #2
 800a5cc:	42a6      	cmp	r6, r4
 800a5ce:	d109      	bne.n	800a5e4 <__libc_init_array+0x24>
 800a5d0:	4d0b      	ldr	r5, [pc, #44]	; (800a600 <__libc_init_array+0x40>)
 800a5d2:	2600      	movs	r6, #0
 800a5d4:	4c0b      	ldr	r4, [pc, #44]	; (800a604 <__libc_init_array+0x44>)
 800a5d6:	f001 f969 	bl	800b8ac <_init>
 800a5da:	1b64      	subs	r4, r4, r5
 800a5dc:	10a4      	asrs	r4, r4, #2
 800a5de:	42a6      	cmp	r6, r4
 800a5e0:	d105      	bne.n	800a5ee <__libc_init_array+0x2e>
 800a5e2:	bd70      	pop	{r4, r5, r6, pc}
 800a5e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5e8:	3601      	adds	r6, #1
 800a5ea:	4798      	blx	r3
 800a5ec:	e7ee      	b.n	800a5cc <__libc_init_array+0xc>
 800a5ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5f2:	3601      	adds	r6, #1
 800a5f4:	4798      	blx	r3
 800a5f6:	e7f2      	b.n	800a5de <__libc_init_array+0x1e>
 800a5f8:	0800bda8 	.word	0x0800bda8
 800a5fc:	0800bda8 	.word	0x0800bda8
 800a600:	0800bda8 	.word	0x0800bda8
 800a604:	0800bdac 	.word	0x0800bdac

0800a608 <memset>:
 800a608:	4402      	add	r2, r0
 800a60a:	4603      	mov	r3, r0
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d100      	bne.n	800a612 <memset+0xa>
 800a610:	4770      	bx	lr
 800a612:	f803 1b01 	strb.w	r1, [r3], #1
 800a616:	e7f9      	b.n	800a60c <memset+0x4>

0800a618 <iprintf>:
 800a618:	b40f      	push	{r0, r1, r2, r3}
 800a61a:	4b0a      	ldr	r3, [pc, #40]	; (800a644 <iprintf+0x2c>)
 800a61c:	b513      	push	{r0, r1, r4, lr}
 800a61e:	681c      	ldr	r4, [r3, #0]
 800a620:	b124      	cbz	r4, 800a62c <iprintf+0x14>
 800a622:	69a3      	ldr	r3, [r4, #24]
 800a624:	b913      	cbnz	r3, 800a62c <iprintf+0x14>
 800a626:	4620      	mov	r0, r4
 800a628:	f000 f89a 	bl	800a760 <__sinit>
 800a62c:	ab05      	add	r3, sp, #20
 800a62e:	9a04      	ldr	r2, [sp, #16]
 800a630:	68a1      	ldr	r1, [r4, #8]
 800a632:	4620      	mov	r0, r4
 800a634:	9301      	str	r3, [sp, #4]
 800a636:	f000 fb13 	bl	800ac60 <_vfiprintf_r>
 800a63a:	b002      	add	sp, #8
 800a63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a640:	b004      	add	sp, #16
 800a642:	4770      	bx	lr
 800a644:	20000090 	.word	0x20000090

0800a648 <sniprintf>:
 800a648:	b40c      	push	{r2, r3}
 800a64a:	4b18      	ldr	r3, [pc, #96]	; (800a6ac <sniprintf+0x64>)
 800a64c:	b530      	push	{r4, r5, lr}
 800a64e:	1e0c      	subs	r4, r1, #0
 800a650:	b09d      	sub	sp, #116	; 0x74
 800a652:	681d      	ldr	r5, [r3, #0]
 800a654:	da08      	bge.n	800a668 <sniprintf+0x20>
 800a656:	238b      	movs	r3, #139	; 0x8b
 800a658:	f04f 30ff 	mov.w	r0, #4294967295
 800a65c:	602b      	str	r3, [r5, #0]
 800a65e:	b01d      	add	sp, #116	; 0x74
 800a660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a664:	b002      	add	sp, #8
 800a666:	4770      	bx	lr
 800a668:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a66c:	9002      	str	r0, [sp, #8]
 800a66e:	9006      	str	r0, [sp, #24]
 800a670:	a902      	add	r1, sp, #8
 800a672:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a676:	bf14      	ite	ne
 800a678:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a67c:	4623      	moveq	r3, r4
 800a67e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a680:	4628      	mov	r0, r5
 800a682:	9304      	str	r3, [sp, #16]
 800a684:	9307      	str	r3, [sp, #28]
 800a686:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a68a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a68e:	ab21      	add	r3, sp, #132	; 0x84
 800a690:	9301      	str	r3, [sp, #4]
 800a692:	f000 f9bb 	bl	800aa0c <_svfiprintf_r>
 800a696:	1c43      	adds	r3, r0, #1
 800a698:	bfbc      	itt	lt
 800a69a:	238b      	movlt	r3, #139	; 0x8b
 800a69c:	602b      	strlt	r3, [r5, #0]
 800a69e:	2c00      	cmp	r4, #0
 800a6a0:	d0dd      	beq.n	800a65e <sniprintf+0x16>
 800a6a2:	9b02      	ldr	r3, [sp, #8]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	701a      	strb	r2, [r3, #0]
 800a6a8:	e7d9      	b.n	800a65e <sniprintf+0x16>
 800a6aa:	bf00      	nop
 800a6ac:	20000090 	.word	0x20000090

0800a6b0 <std>:
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	b510      	push	{r4, lr}
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	6083      	str	r3, [r0, #8]
 800a6b8:	8181      	strh	r1, [r0, #12]
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6643      	str	r3, [r0, #100]	; 0x64
 800a6be:	81c2      	strh	r2, [r0, #14]
 800a6c0:	2208      	movs	r2, #8
 800a6c2:	6183      	str	r3, [r0, #24]
 800a6c4:	e9c0 3300 	strd	r3, r3, [r0]
 800a6c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6cc:	305c      	adds	r0, #92	; 0x5c
 800a6ce:	f7ff ff9b 	bl	800a608 <memset>
 800a6d2:	4b05      	ldr	r3, [pc, #20]	; (800a6e8 <std+0x38>)
 800a6d4:	6224      	str	r4, [r4, #32]
 800a6d6:	6263      	str	r3, [r4, #36]	; 0x24
 800a6d8:	4b04      	ldr	r3, [pc, #16]	; (800a6ec <std+0x3c>)
 800a6da:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6dc:	4b04      	ldr	r3, [pc, #16]	; (800a6f0 <std+0x40>)
 800a6de:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6e0:	4b04      	ldr	r3, [pc, #16]	; (800a6f4 <std+0x44>)
 800a6e2:	6323      	str	r3, [r4, #48]	; 0x30
 800a6e4:	bd10      	pop	{r4, pc}
 800a6e6:	bf00      	nop
 800a6e8:	0800b20d 	.word	0x0800b20d
 800a6ec:	0800b22f 	.word	0x0800b22f
 800a6f0:	0800b267 	.word	0x0800b267
 800a6f4:	0800b28b 	.word	0x0800b28b

0800a6f8 <_cleanup_r>:
 800a6f8:	4901      	ldr	r1, [pc, #4]	; (800a700 <_cleanup_r+0x8>)
 800a6fa:	f000 b8af 	b.w	800a85c <_fwalk_reent>
 800a6fe:	bf00      	nop
 800a700:	0800b561 	.word	0x0800b561

0800a704 <__sfmoreglue>:
 800a704:	b570      	push	{r4, r5, r6, lr}
 800a706:	1e4a      	subs	r2, r1, #1
 800a708:	2568      	movs	r5, #104	; 0x68
 800a70a:	460e      	mov	r6, r1
 800a70c:	4355      	muls	r5, r2
 800a70e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a712:	f000 f8c5 	bl	800a8a0 <_malloc_r>
 800a716:	4604      	mov	r4, r0
 800a718:	b140      	cbz	r0, 800a72c <__sfmoreglue+0x28>
 800a71a:	2100      	movs	r1, #0
 800a71c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a720:	e9c0 1600 	strd	r1, r6, [r0]
 800a724:	300c      	adds	r0, #12
 800a726:	60a0      	str	r0, [r4, #8]
 800a728:	f7ff ff6e 	bl	800a608 <memset>
 800a72c:	4620      	mov	r0, r4
 800a72e:	bd70      	pop	{r4, r5, r6, pc}

0800a730 <__sfp_lock_acquire>:
 800a730:	4801      	ldr	r0, [pc, #4]	; (800a738 <__sfp_lock_acquire+0x8>)
 800a732:	f000 b8b3 	b.w	800a89c <__retarget_lock_acquire_recursive>
 800a736:	bf00      	nop
 800a738:	20000378 	.word	0x20000378

0800a73c <__sfp_lock_release>:
 800a73c:	4801      	ldr	r0, [pc, #4]	; (800a744 <__sfp_lock_release+0x8>)
 800a73e:	f000 b8ae 	b.w	800a89e <__retarget_lock_release_recursive>
 800a742:	bf00      	nop
 800a744:	20000378 	.word	0x20000378

0800a748 <__sinit_lock_acquire>:
 800a748:	4801      	ldr	r0, [pc, #4]	; (800a750 <__sinit_lock_acquire+0x8>)
 800a74a:	f000 b8a7 	b.w	800a89c <__retarget_lock_acquire_recursive>
 800a74e:	bf00      	nop
 800a750:	20000373 	.word	0x20000373

0800a754 <__sinit_lock_release>:
 800a754:	4801      	ldr	r0, [pc, #4]	; (800a75c <__sinit_lock_release+0x8>)
 800a756:	f000 b8a2 	b.w	800a89e <__retarget_lock_release_recursive>
 800a75a:	bf00      	nop
 800a75c:	20000373 	.word	0x20000373

0800a760 <__sinit>:
 800a760:	b510      	push	{r4, lr}
 800a762:	4604      	mov	r4, r0
 800a764:	f7ff fff0 	bl	800a748 <__sinit_lock_acquire>
 800a768:	69a3      	ldr	r3, [r4, #24]
 800a76a:	b11b      	cbz	r3, 800a774 <__sinit+0x14>
 800a76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a770:	f7ff bff0 	b.w	800a754 <__sinit_lock_release>
 800a774:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a778:	6523      	str	r3, [r4, #80]	; 0x50
 800a77a:	4620      	mov	r0, r4
 800a77c:	4b12      	ldr	r3, [pc, #72]	; (800a7c8 <__sinit+0x68>)
 800a77e:	4a13      	ldr	r2, [pc, #76]	; (800a7cc <__sinit+0x6c>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	62a2      	str	r2, [r4, #40]	; 0x28
 800a784:	42a3      	cmp	r3, r4
 800a786:	bf04      	itt	eq
 800a788:	2301      	moveq	r3, #1
 800a78a:	61a3      	streq	r3, [r4, #24]
 800a78c:	f000 f820 	bl	800a7d0 <__sfp>
 800a790:	6060      	str	r0, [r4, #4]
 800a792:	4620      	mov	r0, r4
 800a794:	f000 f81c 	bl	800a7d0 <__sfp>
 800a798:	60a0      	str	r0, [r4, #8]
 800a79a:	4620      	mov	r0, r4
 800a79c:	f000 f818 	bl	800a7d0 <__sfp>
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	2104      	movs	r1, #4
 800a7a4:	60e0      	str	r0, [r4, #12]
 800a7a6:	6860      	ldr	r0, [r4, #4]
 800a7a8:	f7ff ff82 	bl	800a6b0 <std>
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	2109      	movs	r1, #9
 800a7b0:	68a0      	ldr	r0, [r4, #8]
 800a7b2:	f7ff ff7d 	bl	800a6b0 <std>
 800a7b6:	2202      	movs	r2, #2
 800a7b8:	2112      	movs	r1, #18
 800a7ba:	68e0      	ldr	r0, [r4, #12]
 800a7bc:	f7ff ff78 	bl	800a6b0 <std>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	61a3      	str	r3, [r4, #24]
 800a7c4:	e7d2      	b.n	800a76c <__sinit+0xc>
 800a7c6:	bf00      	nop
 800a7c8:	0800bd08 	.word	0x0800bd08
 800a7cc:	0800a6f9 	.word	0x0800a6f9

0800a7d0 <__sfp>:
 800a7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d2:	4607      	mov	r7, r0
 800a7d4:	f7ff ffac 	bl	800a730 <__sfp_lock_acquire>
 800a7d8:	4b1e      	ldr	r3, [pc, #120]	; (800a854 <__sfp+0x84>)
 800a7da:	681e      	ldr	r6, [r3, #0]
 800a7dc:	69b3      	ldr	r3, [r6, #24]
 800a7de:	b913      	cbnz	r3, 800a7e6 <__sfp+0x16>
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7ff ffbd 	bl	800a760 <__sinit>
 800a7e6:	3648      	adds	r6, #72	; 0x48
 800a7e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	d503      	bpl.n	800a7f8 <__sfp+0x28>
 800a7f0:	6833      	ldr	r3, [r6, #0]
 800a7f2:	b30b      	cbz	r3, 800a838 <__sfp+0x68>
 800a7f4:	6836      	ldr	r6, [r6, #0]
 800a7f6:	e7f7      	b.n	800a7e8 <__sfp+0x18>
 800a7f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a7fc:	b9d5      	cbnz	r5, 800a834 <__sfp+0x64>
 800a7fe:	4b16      	ldr	r3, [pc, #88]	; (800a858 <__sfp+0x88>)
 800a800:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a804:	6665      	str	r5, [r4, #100]	; 0x64
 800a806:	60e3      	str	r3, [r4, #12]
 800a808:	f000 f847 	bl	800a89a <__retarget_lock_init_recursive>
 800a80c:	f7ff ff96 	bl	800a73c <__sfp_lock_release>
 800a810:	2208      	movs	r2, #8
 800a812:	4629      	mov	r1, r5
 800a814:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a818:	6025      	str	r5, [r4, #0]
 800a81a:	61a5      	str	r5, [r4, #24]
 800a81c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a820:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a824:	f7ff fef0 	bl	800a608 <memset>
 800a828:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a82c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a830:	4620      	mov	r0, r4
 800a832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a834:	3468      	adds	r4, #104	; 0x68
 800a836:	e7d9      	b.n	800a7ec <__sfp+0x1c>
 800a838:	2104      	movs	r1, #4
 800a83a:	4638      	mov	r0, r7
 800a83c:	f7ff ff62 	bl	800a704 <__sfmoreglue>
 800a840:	4604      	mov	r4, r0
 800a842:	6030      	str	r0, [r6, #0]
 800a844:	2800      	cmp	r0, #0
 800a846:	d1d5      	bne.n	800a7f4 <__sfp+0x24>
 800a848:	f7ff ff78 	bl	800a73c <__sfp_lock_release>
 800a84c:	230c      	movs	r3, #12
 800a84e:	603b      	str	r3, [r7, #0]
 800a850:	e7ee      	b.n	800a830 <__sfp+0x60>
 800a852:	bf00      	nop
 800a854:	0800bd08 	.word	0x0800bd08
 800a858:	ffff0001 	.word	0xffff0001

0800a85c <_fwalk_reent>:
 800a85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a860:	4606      	mov	r6, r0
 800a862:	4688      	mov	r8, r1
 800a864:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a868:	2700      	movs	r7, #0
 800a86a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a86e:	f1b9 0901 	subs.w	r9, r9, #1
 800a872:	d505      	bpl.n	800a880 <_fwalk_reent+0x24>
 800a874:	6824      	ldr	r4, [r4, #0]
 800a876:	2c00      	cmp	r4, #0
 800a878:	d1f7      	bne.n	800a86a <_fwalk_reent+0xe>
 800a87a:	4638      	mov	r0, r7
 800a87c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a880:	89ab      	ldrh	r3, [r5, #12]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d907      	bls.n	800a896 <_fwalk_reent+0x3a>
 800a886:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a88a:	3301      	adds	r3, #1
 800a88c:	d003      	beq.n	800a896 <_fwalk_reent+0x3a>
 800a88e:	4629      	mov	r1, r5
 800a890:	4630      	mov	r0, r6
 800a892:	47c0      	blx	r8
 800a894:	4307      	orrs	r7, r0
 800a896:	3568      	adds	r5, #104	; 0x68
 800a898:	e7e9      	b.n	800a86e <_fwalk_reent+0x12>

0800a89a <__retarget_lock_init_recursive>:
 800a89a:	4770      	bx	lr

0800a89c <__retarget_lock_acquire_recursive>:
 800a89c:	4770      	bx	lr

0800a89e <__retarget_lock_release_recursive>:
 800a89e:	4770      	bx	lr

0800a8a0 <_malloc_r>:
 800a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a2:	1ccd      	adds	r5, r1, #3
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	f025 0503 	bic.w	r5, r5, #3
 800a8aa:	3508      	adds	r5, #8
 800a8ac:	2d0c      	cmp	r5, #12
 800a8ae:	bf38      	it	cc
 800a8b0:	250c      	movcc	r5, #12
 800a8b2:	2d00      	cmp	r5, #0
 800a8b4:	db01      	blt.n	800a8ba <_malloc_r+0x1a>
 800a8b6:	42a9      	cmp	r1, r5
 800a8b8:	d903      	bls.n	800a8c2 <_malloc_r+0x22>
 800a8ba:	230c      	movs	r3, #12
 800a8bc:	6033      	str	r3, [r6, #0]
 800a8be:	2000      	movs	r0, #0
 800a8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8c2:	f000 ff35 	bl	800b730 <__malloc_lock>
 800a8c6:	4921      	ldr	r1, [pc, #132]	; (800a94c <_malloc_r+0xac>)
 800a8c8:	680a      	ldr	r2, [r1, #0]
 800a8ca:	4614      	mov	r4, r2
 800a8cc:	b99c      	cbnz	r4, 800a8f6 <_malloc_r+0x56>
 800a8ce:	4f20      	ldr	r7, [pc, #128]	; (800a950 <_malloc_r+0xb0>)
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	b923      	cbnz	r3, 800a8de <_malloc_r+0x3e>
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	f000 fc88 	bl	800b1ec <_sbrk_r>
 800a8dc:	6038      	str	r0, [r7, #0]
 800a8de:	4629      	mov	r1, r5
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	f000 fc83 	bl	800b1ec <_sbrk_r>
 800a8e6:	1c43      	adds	r3, r0, #1
 800a8e8:	d123      	bne.n	800a932 <_malloc_r+0x92>
 800a8ea:	230c      	movs	r3, #12
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	6033      	str	r3, [r6, #0]
 800a8f0:	f000 ff24 	bl	800b73c <__malloc_unlock>
 800a8f4:	e7e3      	b.n	800a8be <_malloc_r+0x1e>
 800a8f6:	6823      	ldr	r3, [r4, #0]
 800a8f8:	1b5b      	subs	r3, r3, r5
 800a8fa:	d417      	bmi.n	800a92c <_malloc_r+0x8c>
 800a8fc:	2b0b      	cmp	r3, #11
 800a8fe:	d903      	bls.n	800a908 <_malloc_r+0x68>
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	441c      	add	r4, r3
 800a904:	6025      	str	r5, [r4, #0]
 800a906:	e004      	b.n	800a912 <_malloc_r+0x72>
 800a908:	6863      	ldr	r3, [r4, #4]
 800a90a:	42a2      	cmp	r2, r4
 800a90c:	bf0c      	ite	eq
 800a90e:	600b      	streq	r3, [r1, #0]
 800a910:	6053      	strne	r3, [r2, #4]
 800a912:	4630      	mov	r0, r6
 800a914:	f000 ff12 	bl	800b73c <__malloc_unlock>
 800a918:	f104 000b 	add.w	r0, r4, #11
 800a91c:	1d23      	adds	r3, r4, #4
 800a91e:	f020 0007 	bic.w	r0, r0, #7
 800a922:	1ac2      	subs	r2, r0, r3
 800a924:	d0cc      	beq.n	800a8c0 <_malloc_r+0x20>
 800a926:	1a1b      	subs	r3, r3, r0
 800a928:	50a3      	str	r3, [r4, r2]
 800a92a:	e7c9      	b.n	800a8c0 <_malloc_r+0x20>
 800a92c:	4622      	mov	r2, r4
 800a92e:	6864      	ldr	r4, [r4, #4]
 800a930:	e7cc      	b.n	800a8cc <_malloc_r+0x2c>
 800a932:	1cc4      	adds	r4, r0, #3
 800a934:	f024 0403 	bic.w	r4, r4, #3
 800a938:	42a0      	cmp	r0, r4
 800a93a:	d0e3      	beq.n	800a904 <_malloc_r+0x64>
 800a93c:	1a21      	subs	r1, r4, r0
 800a93e:	4630      	mov	r0, r6
 800a940:	f000 fc54 	bl	800b1ec <_sbrk_r>
 800a944:	3001      	adds	r0, #1
 800a946:	d1dd      	bne.n	800a904 <_malloc_r+0x64>
 800a948:	e7cf      	b.n	800a8ea <_malloc_r+0x4a>
 800a94a:	bf00      	nop
 800a94c:	20000284 	.word	0x20000284
 800a950:	20000288 	.word	0x20000288

0800a954 <__ssputs_r>:
 800a954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a958:	688e      	ldr	r6, [r1, #8]
 800a95a:	4682      	mov	sl, r0
 800a95c:	460c      	mov	r4, r1
 800a95e:	4690      	mov	r8, r2
 800a960:	429e      	cmp	r6, r3
 800a962:	461f      	mov	r7, r3
 800a964:	d838      	bhi.n	800a9d8 <__ssputs_r+0x84>
 800a966:	898a      	ldrh	r2, [r1, #12]
 800a968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a96c:	d032      	beq.n	800a9d4 <__ssputs_r+0x80>
 800a96e:	6825      	ldr	r5, [r4, #0]
 800a970:	3301      	adds	r3, #1
 800a972:	6909      	ldr	r1, [r1, #16]
 800a974:	eba5 0901 	sub.w	r9, r5, r1
 800a978:	6965      	ldr	r5, [r4, #20]
 800a97a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a97e:	444b      	add	r3, r9
 800a980:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a984:	106d      	asrs	r5, r5, #1
 800a986:	429d      	cmp	r5, r3
 800a988:	bf38      	it	cc
 800a98a:	461d      	movcc	r5, r3
 800a98c:	0553      	lsls	r3, r2, #21
 800a98e:	d531      	bpl.n	800a9f4 <__ssputs_r+0xa0>
 800a990:	4629      	mov	r1, r5
 800a992:	f7ff ff85 	bl	800a8a0 <_malloc_r>
 800a996:	4606      	mov	r6, r0
 800a998:	b950      	cbnz	r0, 800a9b0 <__ssputs_r+0x5c>
 800a99a:	230c      	movs	r3, #12
 800a99c:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a0:	f8ca 3000 	str.w	r3, [sl]
 800a9a4:	89a3      	ldrh	r3, [r4, #12]
 800a9a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9aa:	81a3      	strh	r3, [r4, #12]
 800a9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9b0:	464a      	mov	r2, r9
 800a9b2:	6921      	ldr	r1, [r4, #16]
 800a9b4:	f000 fe94 	bl	800b6e0 <memcpy>
 800a9b8:	89a3      	ldrh	r3, [r4, #12]
 800a9ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9c2:	81a3      	strh	r3, [r4, #12]
 800a9c4:	6126      	str	r6, [r4, #16]
 800a9c6:	444e      	add	r6, r9
 800a9c8:	6165      	str	r5, [r4, #20]
 800a9ca:	eba5 0509 	sub.w	r5, r5, r9
 800a9ce:	6026      	str	r6, [r4, #0]
 800a9d0:	463e      	mov	r6, r7
 800a9d2:	60a5      	str	r5, [r4, #8]
 800a9d4:	42be      	cmp	r6, r7
 800a9d6:	d900      	bls.n	800a9da <__ssputs_r+0x86>
 800a9d8:	463e      	mov	r6, r7
 800a9da:	4632      	mov	r2, r6
 800a9dc:	4641      	mov	r1, r8
 800a9de:	6820      	ldr	r0, [r4, #0]
 800a9e0:	f000 fe8b 	bl	800b6fa <memmove>
 800a9e4:	68a3      	ldr	r3, [r4, #8]
 800a9e6:	6822      	ldr	r2, [r4, #0]
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	1b9b      	subs	r3, r3, r6
 800a9ec:	4432      	add	r2, r6
 800a9ee:	60a3      	str	r3, [r4, #8]
 800a9f0:	6022      	str	r2, [r4, #0]
 800a9f2:	e7db      	b.n	800a9ac <__ssputs_r+0x58>
 800a9f4:	462a      	mov	r2, r5
 800a9f6:	f000 fef7 	bl	800b7e8 <_realloc_r>
 800a9fa:	4606      	mov	r6, r0
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	d1e1      	bne.n	800a9c4 <__ssputs_r+0x70>
 800aa00:	6921      	ldr	r1, [r4, #16]
 800aa02:	4650      	mov	r0, sl
 800aa04:	f000 fea0 	bl	800b748 <_free_r>
 800aa08:	e7c7      	b.n	800a99a <__ssputs_r+0x46>
	...

0800aa0c <_svfiprintf_r>:
 800aa0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa10:	4698      	mov	r8, r3
 800aa12:	898b      	ldrh	r3, [r1, #12]
 800aa14:	b09d      	sub	sp, #116	; 0x74
 800aa16:	4607      	mov	r7, r0
 800aa18:	061b      	lsls	r3, r3, #24
 800aa1a:	460d      	mov	r5, r1
 800aa1c:	4614      	mov	r4, r2
 800aa1e:	d50e      	bpl.n	800aa3e <_svfiprintf_r+0x32>
 800aa20:	690b      	ldr	r3, [r1, #16]
 800aa22:	b963      	cbnz	r3, 800aa3e <_svfiprintf_r+0x32>
 800aa24:	2140      	movs	r1, #64	; 0x40
 800aa26:	f7ff ff3b 	bl	800a8a0 <_malloc_r>
 800aa2a:	6028      	str	r0, [r5, #0]
 800aa2c:	6128      	str	r0, [r5, #16]
 800aa2e:	b920      	cbnz	r0, 800aa3a <_svfiprintf_r+0x2e>
 800aa30:	230c      	movs	r3, #12
 800aa32:	603b      	str	r3, [r7, #0]
 800aa34:	f04f 30ff 	mov.w	r0, #4294967295
 800aa38:	e0d1      	b.n	800abde <_svfiprintf_r+0x1d2>
 800aa3a:	2340      	movs	r3, #64	; 0x40
 800aa3c:	616b      	str	r3, [r5, #20]
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa44:	f04f 0901 	mov.w	r9, #1
 800aa48:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800abf8 <_svfiprintf_r+0x1ec>
 800aa4c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa4e:	2320      	movs	r3, #32
 800aa50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa54:	2330      	movs	r3, #48	; 0x30
 800aa56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa5a:	4623      	mov	r3, r4
 800aa5c:	469a      	mov	sl, r3
 800aa5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa62:	b10a      	cbz	r2, 800aa68 <_svfiprintf_r+0x5c>
 800aa64:	2a25      	cmp	r2, #37	; 0x25
 800aa66:	d1f9      	bne.n	800aa5c <_svfiprintf_r+0x50>
 800aa68:	ebba 0b04 	subs.w	fp, sl, r4
 800aa6c:	d00b      	beq.n	800aa86 <_svfiprintf_r+0x7a>
 800aa6e:	465b      	mov	r3, fp
 800aa70:	4622      	mov	r2, r4
 800aa72:	4629      	mov	r1, r5
 800aa74:	4638      	mov	r0, r7
 800aa76:	f7ff ff6d 	bl	800a954 <__ssputs_r>
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	f000 80aa 	beq.w	800abd4 <_svfiprintf_r+0x1c8>
 800aa80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa82:	445a      	add	r2, fp
 800aa84:	9209      	str	r2, [sp, #36]	; 0x24
 800aa86:	f89a 3000 	ldrb.w	r3, [sl]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f000 80a2 	beq.w	800abd4 <_svfiprintf_r+0x1c8>
 800aa90:	2300      	movs	r3, #0
 800aa92:	f04f 32ff 	mov.w	r2, #4294967295
 800aa96:	f10a 0a01 	add.w	sl, sl, #1
 800aa9a:	9304      	str	r3, [sp, #16]
 800aa9c:	9307      	str	r3, [sp, #28]
 800aa9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaa2:	931a      	str	r3, [sp, #104]	; 0x68
 800aaa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaa8:	4654      	mov	r4, sl
 800aaaa:	2205      	movs	r2, #5
 800aaac:	4852      	ldr	r0, [pc, #328]	; (800abf8 <_svfiprintf_r+0x1ec>)
 800aaae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab2:	f000 fe07 	bl	800b6c4 <memchr>
 800aab6:	9a04      	ldr	r2, [sp, #16]
 800aab8:	b9d8      	cbnz	r0, 800aaf2 <_svfiprintf_r+0xe6>
 800aaba:	06d0      	lsls	r0, r2, #27
 800aabc:	bf44      	itt	mi
 800aabe:	2320      	movmi	r3, #32
 800aac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aac4:	0711      	lsls	r1, r2, #28
 800aac6:	bf44      	itt	mi
 800aac8:	232b      	movmi	r3, #43	; 0x2b
 800aaca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aace:	f89a 3000 	ldrb.w	r3, [sl]
 800aad2:	2b2a      	cmp	r3, #42	; 0x2a
 800aad4:	d015      	beq.n	800ab02 <_svfiprintf_r+0xf6>
 800aad6:	9a07      	ldr	r2, [sp, #28]
 800aad8:	4654      	mov	r4, sl
 800aada:	2000      	movs	r0, #0
 800aadc:	f04f 0c0a 	mov.w	ip, #10
 800aae0:	4621      	mov	r1, r4
 800aae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aae6:	3b30      	subs	r3, #48	; 0x30
 800aae8:	2b09      	cmp	r3, #9
 800aaea:	d94e      	bls.n	800ab8a <_svfiprintf_r+0x17e>
 800aaec:	b1b0      	cbz	r0, 800ab1c <_svfiprintf_r+0x110>
 800aaee:	9207      	str	r2, [sp, #28]
 800aaf0:	e014      	b.n	800ab1c <_svfiprintf_r+0x110>
 800aaf2:	eba0 0308 	sub.w	r3, r0, r8
 800aaf6:	46a2      	mov	sl, r4
 800aaf8:	fa09 f303 	lsl.w	r3, r9, r3
 800aafc:	4313      	orrs	r3, r2
 800aafe:	9304      	str	r3, [sp, #16]
 800ab00:	e7d2      	b.n	800aaa8 <_svfiprintf_r+0x9c>
 800ab02:	9b03      	ldr	r3, [sp, #12]
 800ab04:	1d19      	adds	r1, r3, #4
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	9103      	str	r1, [sp, #12]
 800ab0c:	bfbb      	ittet	lt
 800ab0e:	425b      	neglt	r3, r3
 800ab10:	f042 0202 	orrlt.w	r2, r2, #2
 800ab14:	9307      	strge	r3, [sp, #28]
 800ab16:	9307      	strlt	r3, [sp, #28]
 800ab18:	bfb8      	it	lt
 800ab1a:	9204      	strlt	r2, [sp, #16]
 800ab1c:	7823      	ldrb	r3, [r4, #0]
 800ab1e:	2b2e      	cmp	r3, #46	; 0x2e
 800ab20:	d10c      	bne.n	800ab3c <_svfiprintf_r+0x130>
 800ab22:	7863      	ldrb	r3, [r4, #1]
 800ab24:	2b2a      	cmp	r3, #42	; 0x2a
 800ab26:	d135      	bne.n	800ab94 <_svfiprintf_r+0x188>
 800ab28:	9b03      	ldr	r3, [sp, #12]
 800ab2a:	3402      	adds	r4, #2
 800ab2c:	1d1a      	adds	r2, r3, #4
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	9203      	str	r2, [sp, #12]
 800ab34:	bfb8      	it	lt
 800ab36:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab3a:	9305      	str	r3, [sp, #20]
 800ab3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac08 <_svfiprintf_r+0x1fc>
 800ab40:	2203      	movs	r2, #3
 800ab42:	7821      	ldrb	r1, [r4, #0]
 800ab44:	4650      	mov	r0, sl
 800ab46:	f000 fdbd 	bl	800b6c4 <memchr>
 800ab4a:	b140      	cbz	r0, 800ab5e <_svfiprintf_r+0x152>
 800ab4c:	2340      	movs	r3, #64	; 0x40
 800ab4e:	eba0 000a 	sub.w	r0, r0, sl
 800ab52:	3401      	adds	r4, #1
 800ab54:	fa03 f000 	lsl.w	r0, r3, r0
 800ab58:	9b04      	ldr	r3, [sp, #16]
 800ab5a:	4303      	orrs	r3, r0
 800ab5c:	9304      	str	r3, [sp, #16]
 800ab5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab62:	2206      	movs	r2, #6
 800ab64:	4825      	ldr	r0, [pc, #148]	; (800abfc <_svfiprintf_r+0x1f0>)
 800ab66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab6a:	f000 fdab 	bl	800b6c4 <memchr>
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	d038      	beq.n	800abe4 <_svfiprintf_r+0x1d8>
 800ab72:	4b23      	ldr	r3, [pc, #140]	; (800ac00 <_svfiprintf_r+0x1f4>)
 800ab74:	bb1b      	cbnz	r3, 800abbe <_svfiprintf_r+0x1b2>
 800ab76:	9b03      	ldr	r3, [sp, #12]
 800ab78:	3307      	adds	r3, #7
 800ab7a:	f023 0307 	bic.w	r3, r3, #7
 800ab7e:	3308      	adds	r3, #8
 800ab80:	9303      	str	r3, [sp, #12]
 800ab82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab84:	4433      	add	r3, r6
 800ab86:	9309      	str	r3, [sp, #36]	; 0x24
 800ab88:	e767      	b.n	800aa5a <_svfiprintf_r+0x4e>
 800ab8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab8e:	460c      	mov	r4, r1
 800ab90:	2001      	movs	r0, #1
 800ab92:	e7a5      	b.n	800aae0 <_svfiprintf_r+0xd4>
 800ab94:	2300      	movs	r3, #0
 800ab96:	3401      	adds	r4, #1
 800ab98:	f04f 0c0a 	mov.w	ip, #10
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	9305      	str	r3, [sp, #20]
 800aba0:	4620      	mov	r0, r4
 800aba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aba6:	3a30      	subs	r2, #48	; 0x30
 800aba8:	2a09      	cmp	r2, #9
 800abaa:	d903      	bls.n	800abb4 <_svfiprintf_r+0x1a8>
 800abac:	2b00      	cmp	r3, #0
 800abae:	d0c5      	beq.n	800ab3c <_svfiprintf_r+0x130>
 800abb0:	9105      	str	r1, [sp, #20]
 800abb2:	e7c3      	b.n	800ab3c <_svfiprintf_r+0x130>
 800abb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800abb8:	4604      	mov	r4, r0
 800abba:	2301      	movs	r3, #1
 800abbc:	e7f0      	b.n	800aba0 <_svfiprintf_r+0x194>
 800abbe:	ab03      	add	r3, sp, #12
 800abc0:	462a      	mov	r2, r5
 800abc2:	a904      	add	r1, sp, #16
 800abc4:	4638      	mov	r0, r7
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	4b0e      	ldr	r3, [pc, #56]	; (800ac04 <_svfiprintf_r+0x1f8>)
 800abca:	e000      	b.n	800abce <_svfiprintf_r+0x1c2>
 800abcc:	bf00      	nop
 800abce:	1c42      	adds	r2, r0, #1
 800abd0:	4606      	mov	r6, r0
 800abd2:	d1d6      	bne.n	800ab82 <_svfiprintf_r+0x176>
 800abd4:	89ab      	ldrh	r3, [r5, #12]
 800abd6:	065b      	lsls	r3, r3, #25
 800abd8:	f53f af2c 	bmi.w	800aa34 <_svfiprintf_r+0x28>
 800abdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abde:	b01d      	add	sp, #116	; 0x74
 800abe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe4:	ab03      	add	r3, sp, #12
 800abe6:	462a      	mov	r2, r5
 800abe8:	a904      	add	r1, sp, #16
 800abea:	4638      	mov	r0, r7
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <_svfiprintf_r+0x1f8>)
 800abf0:	f000 f9d6 	bl	800afa0 <_printf_i>
 800abf4:	e7eb      	b.n	800abce <_svfiprintf_r+0x1c2>
 800abf6:	bf00      	nop
 800abf8:	0800bd6c 	.word	0x0800bd6c
 800abfc:	0800bd76 	.word	0x0800bd76
 800ac00:	00000000 	.word	0x00000000
 800ac04:	0800a955 	.word	0x0800a955
 800ac08:	0800bd72 	.word	0x0800bd72

0800ac0c <__sfputc_r>:
 800ac0c:	6893      	ldr	r3, [r2, #8]
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	6093      	str	r3, [r2, #8]
 800ac14:	b410      	push	{r4}
 800ac16:	da08      	bge.n	800ac2a <__sfputc_r+0x1e>
 800ac18:	6994      	ldr	r4, [r2, #24]
 800ac1a:	42a3      	cmp	r3, r4
 800ac1c:	db01      	blt.n	800ac22 <__sfputc_r+0x16>
 800ac1e:	290a      	cmp	r1, #10
 800ac20:	d103      	bne.n	800ac2a <__sfputc_r+0x1e>
 800ac22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac26:	f000 bb35 	b.w	800b294 <__swbuf_r>
 800ac2a:	6813      	ldr	r3, [r2, #0]
 800ac2c:	1c58      	adds	r0, r3, #1
 800ac2e:	6010      	str	r0, [r2, #0]
 800ac30:	4608      	mov	r0, r1
 800ac32:	7019      	strb	r1, [r3, #0]
 800ac34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <__sfputs_r>:
 800ac3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3c:	4606      	mov	r6, r0
 800ac3e:	460f      	mov	r7, r1
 800ac40:	4614      	mov	r4, r2
 800ac42:	18d5      	adds	r5, r2, r3
 800ac44:	42ac      	cmp	r4, r5
 800ac46:	d101      	bne.n	800ac4c <__sfputs_r+0x12>
 800ac48:	2000      	movs	r0, #0
 800ac4a:	e007      	b.n	800ac5c <__sfputs_r+0x22>
 800ac4c:	463a      	mov	r2, r7
 800ac4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac52:	4630      	mov	r0, r6
 800ac54:	f7ff ffda 	bl	800ac0c <__sfputc_r>
 800ac58:	1c43      	adds	r3, r0, #1
 800ac5a:	d1f3      	bne.n	800ac44 <__sfputs_r+0xa>
 800ac5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac60 <_vfiprintf_r>:
 800ac60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac64:	460d      	mov	r5, r1
 800ac66:	b09d      	sub	sp, #116	; 0x74
 800ac68:	4614      	mov	r4, r2
 800ac6a:	4698      	mov	r8, r3
 800ac6c:	4606      	mov	r6, r0
 800ac6e:	b118      	cbz	r0, 800ac78 <_vfiprintf_r+0x18>
 800ac70:	6983      	ldr	r3, [r0, #24]
 800ac72:	b90b      	cbnz	r3, 800ac78 <_vfiprintf_r+0x18>
 800ac74:	f7ff fd74 	bl	800a760 <__sinit>
 800ac78:	4b89      	ldr	r3, [pc, #548]	; (800aea0 <_vfiprintf_r+0x240>)
 800ac7a:	429d      	cmp	r5, r3
 800ac7c:	d11b      	bne.n	800acb6 <_vfiprintf_r+0x56>
 800ac7e:	6875      	ldr	r5, [r6, #4]
 800ac80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac82:	07d9      	lsls	r1, r3, #31
 800ac84:	d405      	bmi.n	800ac92 <_vfiprintf_r+0x32>
 800ac86:	89ab      	ldrh	r3, [r5, #12]
 800ac88:	059a      	lsls	r2, r3, #22
 800ac8a:	d402      	bmi.n	800ac92 <_vfiprintf_r+0x32>
 800ac8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac8e:	f7ff fe05 	bl	800a89c <__retarget_lock_acquire_recursive>
 800ac92:	89ab      	ldrh	r3, [r5, #12]
 800ac94:	071b      	lsls	r3, r3, #28
 800ac96:	d501      	bpl.n	800ac9c <_vfiprintf_r+0x3c>
 800ac98:	692b      	ldr	r3, [r5, #16]
 800ac9a:	b9eb      	cbnz	r3, 800acd8 <_vfiprintf_r+0x78>
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	4630      	mov	r0, r6
 800aca0:	f000 fb5c 	bl	800b35c <__swsetup_r>
 800aca4:	b1c0      	cbz	r0, 800acd8 <_vfiprintf_r+0x78>
 800aca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aca8:	07dc      	lsls	r4, r3, #31
 800acaa:	d50e      	bpl.n	800acca <_vfiprintf_r+0x6a>
 800acac:	f04f 30ff 	mov.w	r0, #4294967295
 800acb0:	b01d      	add	sp, #116	; 0x74
 800acb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb6:	4b7b      	ldr	r3, [pc, #492]	; (800aea4 <_vfiprintf_r+0x244>)
 800acb8:	429d      	cmp	r5, r3
 800acba:	d101      	bne.n	800acc0 <_vfiprintf_r+0x60>
 800acbc:	68b5      	ldr	r5, [r6, #8]
 800acbe:	e7df      	b.n	800ac80 <_vfiprintf_r+0x20>
 800acc0:	4b79      	ldr	r3, [pc, #484]	; (800aea8 <_vfiprintf_r+0x248>)
 800acc2:	429d      	cmp	r5, r3
 800acc4:	bf08      	it	eq
 800acc6:	68f5      	ldreq	r5, [r6, #12]
 800acc8:	e7da      	b.n	800ac80 <_vfiprintf_r+0x20>
 800acca:	89ab      	ldrh	r3, [r5, #12]
 800accc:	0598      	lsls	r0, r3, #22
 800acce:	d4ed      	bmi.n	800acac <_vfiprintf_r+0x4c>
 800acd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acd2:	f7ff fde4 	bl	800a89e <__retarget_lock_release_recursive>
 800acd6:	e7e9      	b.n	800acac <_vfiprintf_r+0x4c>
 800acd8:	2300      	movs	r3, #0
 800acda:	f8cd 800c 	str.w	r8, [sp, #12]
 800acde:	f04f 0901 	mov.w	r9, #1
 800ace2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800aeac <_vfiprintf_r+0x24c>
 800ace6:	9309      	str	r3, [sp, #36]	; 0x24
 800ace8:	2320      	movs	r3, #32
 800acea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acee:	2330      	movs	r3, #48	; 0x30
 800acf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acf4:	4623      	mov	r3, r4
 800acf6:	469a      	mov	sl, r3
 800acf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acfc:	b10a      	cbz	r2, 800ad02 <_vfiprintf_r+0xa2>
 800acfe:	2a25      	cmp	r2, #37	; 0x25
 800ad00:	d1f9      	bne.n	800acf6 <_vfiprintf_r+0x96>
 800ad02:	ebba 0b04 	subs.w	fp, sl, r4
 800ad06:	d00b      	beq.n	800ad20 <_vfiprintf_r+0xc0>
 800ad08:	465b      	mov	r3, fp
 800ad0a:	4622      	mov	r2, r4
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f7ff ff93 	bl	800ac3a <__sfputs_r>
 800ad14:	3001      	adds	r0, #1
 800ad16:	f000 80aa 	beq.w	800ae6e <_vfiprintf_r+0x20e>
 800ad1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad1c:	445a      	add	r2, fp
 800ad1e:	9209      	str	r2, [sp, #36]	; 0x24
 800ad20:	f89a 3000 	ldrb.w	r3, [sl]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f000 80a2 	beq.w	800ae6e <_vfiprintf_r+0x20e>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad30:	f10a 0a01 	add.w	sl, sl, #1
 800ad34:	9304      	str	r3, [sp, #16]
 800ad36:	9307      	str	r3, [sp, #28]
 800ad38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad3c:	931a      	str	r3, [sp, #104]	; 0x68
 800ad3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad42:	4654      	mov	r4, sl
 800ad44:	2205      	movs	r2, #5
 800ad46:	4859      	ldr	r0, [pc, #356]	; (800aeac <_vfiprintf_r+0x24c>)
 800ad48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad4c:	f000 fcba 	bl	800b6c4 <memchr>
 800ad50:	9a04      	ldr	r2, [sp, #16]
 800ad52:	b9d8      	cbnz	r0, 800ad8c <_vfiprintf_r+0x12c>
 800ad54:	06d1      	lsls	r1, r2, #27
 800ad56:	bf44      	itt	mi
 800ad58:	2320      	movmi	r3, #32
 800ad5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad5e:	0713      	lsls	r3, r2, #28
 800ad60:	bf44      	itt	mi
 800ad62:	232b      	movmi	r3, #43	; 0x2b
 800ad64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad68:	f89a 3000 	ldrb.w	r3, [sl]
 800ad6c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad6e:	d015      	beq.n	800ad9c <_vfiprintf_r+0x13c>
 800ad70:	9a07      	ldr	r2, [sp, #28]
 800ad72:	4654      	mov	r4, sl
 800ad74:	2000      	movs	r0, #0
 800ad76:	f04f 0c0a 	mov.w	ip, #10
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad80:	3b30      	subs	r3, #48	; 0x30
 800ad82:	2b09      	cmp	r3, #9
 800ad84:	d94e      	bls.n	800ae24 <_vfiprintf_r+0x1c4>
 800ad86:	b1b0      	cbz	r0, 800adb6 <_vfiprintf_r+0x156>
 800ad88:	9207      	str	r2, [sp, #28]
 800ad8a:	e014      	b.n	800adb6 <_vfiprintf_r+0x156>
 800ad8c:	eba0 0308 	sub.w	r3, r0, r8
 800ad90:	46a2      	mov	sl, r4
 800ad92:	fa09 f303 	lsl.w	r3, r9, r3
 800ad96:	4313      	orrs	r3, r2
 800ad98:	9304      	str	r3, [sp, #16]
 800ad9a:	e7d2      	b.n	800ad42 <_vfiprintf_r+0xe2>
 800ad9c:	9b03      	ldr	r3, [sp, #12]
 800ad9e:	1d19      	adds	r1, r3, #4
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	9103      	str	r1, [sp, #12]
 800ada6:	bfbb      	ittet	lt
 800ada8:	425b      	neglt	r3, r3
 800adaa:	f042 0202 	orrlt.w	r2, r2, #2
 800adae:	9307      	strge	r3, [sp, #28]
 800adb0:	9307      	strlt	r3, [sp, #28]
 800adb2:	bfb8      	it	lt
 800adb4:	9204      	strlt	r2, [sp, #16]
 800adb6:	7823      	ldrb	r3, [r4, #0]
 800adb8:	2b2e      	cmp	r3, #46	; 0x2e
 800adba:	d10c      	bne.n	800add6 <_vfiprintf_r+0x176>
 800adbc:	7863      	ldrb	r3, [r4, #1]
 800adbe:	2b2a      	cmp	r3, #42	; 0x2a
 800adc0:	d135      	bne.n	800ae2e <_vfiprintf_r+0x1ce>
 800adc2:	9b03      	ldr	r3, [sp, #12]
 800adc4:	3402      	adds	r4, #2
 800adc6:	1d1a      	adds	r2, r3, #4
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	9203      	str	r2, [sp, #12]
 800adce:	bfb8      	it	lt
 800add0:	f04f 33ff 	movlt.w	r3, #4294967295
 800add4:	9305      	str	r3, [sp, #20]
 800add6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aebc <_vfiprintf_r+0x25c>
 800adda:	2203      	movs	r2, #3
 800addc:	7821      	ldrb	r1, [r4, #0]
 800adde:	4650      	mov	r0, sl
 800ade0:	f000 fc70 	bl	800b6c4 <memchr>
 800ade4:	b140      	cbz	r0, 800adf8 <_vfiprintf_r+0x198>
 800ade6:	2340      	movs	r3, #64	; 0x40
 800ade8:	eba0 000a 	sub.w	r0, r0, sl
 800adec:	3401      	adds	r4, #1
 800adee:	fa03 f000 	lsl.w	r0, r3, r0
 800adf2:	9b04      	ldr	r3, [sp, #16]
 800adf4:	4303      	orrs	r3, r0
 800adf6:	9304      	str	r3, [sp, #16]
 800adf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adfc:	2206      	movs	r2, #6
 800adfe:	482c      	ldr	r0, [pc, #176]	; (800aeb0 <_vfiprintf_r+0x250>)
 800ae00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae04:	f000 fc5e 	bl	800b6c4 <memchr>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d03f      	beq.n	800ae8c <_vfiprintf_r+0x22c>
 800ae0c:	4b29      	ldr	r3, [pc, #164]	; (800aeb4 <_vfiprintf_r+0x254>)
 800ae0e:	bb1b      	cbnz	r3, 800ae58 <_vfiprintf_r+0x1f8>
 800ae10:	9b03      	ldr	r3, [sp, #12]
 800ae12:	3307      	adds	r3, #7
 800ae14:	f023 0307 	bic.w	r3, r3, #7
 800ae18:	3308      	adds	r3, #8
 800ae1a:	9303      	str	r3, [sp, #12]
 800ae1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae1e:	443b      	add	r3, r7
 800ae20:	9309      	str	r3, [sp, #36]	; 0x24
 800ae22:	e767      	b.n	800acf4 <_vfiprintf_r+0x94>
 800ae24:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae28:	460c      	mov	r4, r1
 800ae2a:	2001      	movs	r0, #1
 800ae2c:	e7a5      	b.n	800ad7a <_vfiprintf_r+0x11a>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	3401      	adds	r4, #1
 800ae32:	f04f 0c0a 	mov.w	ip, #10
 800ae36:	4619      	mov	r1, r3
 800ae38:	9305      	str	r3, [sp, #20]
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae40:	3a30      	subs	r2, #48	; 0x30
 800ae42:	2a09      	cmp	r2, #9
 800ae44:	d903      	bls.n	800ae4e <_vfiprintf_r+0x1ee>
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d0c5      	beq.n	800add6 <_vfiprintf_r+0x176>
 800ae4a:	9105      	str	r1, [sp, #20]
 800ae4c:	e7c3      	b.n	800add6 <_vfiprintf_r+0x176>
 800ae4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae52:	4604      	mov	r4, r0
 800ae54:	2301      	movs	r3, #1
 800ae56:	e7f0      	b.n	800ae3a <_vfiprintf_r+0x1da>
 800ae58:	ab03      	add	r3, sp, #12
 800ae5a:	462a      	mov	r2, r5
 800ae5c:	a904      	add	r1, sp, #16
 800ae5e:	4630      	mov	r0, r6
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	4b15      	ldr	r3, [pc, #84]	; (800aeb8 <_vfiprintf_r+0x258>)
 800ae64:	e000      	b.n	800ae68 <_vfiprintf_r+0x208>
 800ae66:	bf00      	nop
 800ae68:	4607      	mov	r7, r0
 800ae6a:	1c78      	adds	r0, r7, #1
 800ae6c:	d1d6      	bne.n	800ae1c <_vfiprintf_r+0x1bc>
 800ae6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae70:	07d9      	lsls	r1, r3, #31
 800ae72:	d405      	bmi.n	800ae80 <_vfiprintf_r+0x220>
 800ae74:	89ab      	ldrh	r3, [r5, #12]
 800ae76:	059a      	lsls	r2, r3, #22
 800ae78:	d402      	bmi.n	800ae80 <_vfiprintf_r+0x220>
 800ae7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae7c:	f7ff fd0f 	bl	800a89e <__retarget_lock_release_recursive>
 800ae80:	89ab      	ldrh	r3, [r5, #12]
 800ae82:	065b      	lsls	r3, r3, #25
 800ae84:	f53f af12 	bmi.w	800acac <_vfiprintf_r+0x4c>
 800ae88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae8a:	e711      	b.n	800acb0 <_vfiprintf_r+0x50>
 800ae8c:	ab03      	add	r3, sp, #12
 800ae8e:	462a      	mov	r2, r5
 800ae90:	a904      	add	r1, sp, #16
 800ae92:	4630      	mov	r0, r6
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	4b08      	ldr	r3, [pc, #32]	; (800aeb8 <_vfiprintf_r+0x258>)
 800ae98:	f000 f882 	bl	800afa0 <_printf_i>
 800ae9c:	e7e4      	b.n	800ae68 <_vfiprintf_r+0x208>
 800ae9e:	bf00      	nop
 800aea0:	0800bd2c 	.word	0x0800bd2c
 800aea4:	0800bd4c 	.word	0x0800bd4c
 800aea8:	0800bd0c 	.word	0x0800bd0c
 800aeac:	0800bd6c 	.word	0x0800bd6c
 800aeb0:	0800bd76 	.word	0x0800bd76
 800aeb4:	00000000 	.word	0x00000000
 800aeb8:	0800ac3b 	.word	0x0800ac3b
 800aebc:	0800bd72 	.word	0x0800bd72

0800aec0 <_printf_common>:
 800aec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec4:	4616      	mov	r6, r2
 800aec6:	4699      	mov	r9, r3
 800aec8:	688a      	ldr	r2, [r1, #8]
 800aeca:	4607      	mov	r7, r0
 800aecc:	690b      	ldr	r3, [r1, #16]
 800aece:	460c      	mov	r4, r1
 800aed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aed4:	4293      	cmp	r3, r2
 800aed6:	bfb8      	it	lt
 800aed8:	4613      	movlt	r3, r2
 800aeda:	6033      	str	r3, [r6, #0]
 800aedc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aee0:	b10a      	cbz	r2, 800aee6 <_printf_common+0x26>
 800aee2:	3301      	adds	r3, #1
 800aee4:	6033      	str	r3, [r6, #0]
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	0699      	lsls	r1, r3, #26
 800aeea:	bf42      	ittt	mi
 800aeec:	6833      	ldrmi	r3, [r6, #0]
 800aeee:	3302      	addmi	r3, #2
 800aef0:	6033      	strmi	r3, [r6, #0]
 800aef2:	6825      	ldr	r5, [r4, #0]
 800aef4:	f015 0506 	ands.w	r5, r5, #6
 800aef8:	d106      	bne.n	800af08 <_printf_common+0x48>
 800aefa:	f104 0a19 	add.w	sl, r4, #25
 800aefe:	68e3      	ldr	r3, [r4, #12]
 800af00:	6832      	ldr	r2, [r6, #0]
 800af02:	1a9b      	subs	r3, r3, r2
 800af04:	42ab      	cmp	r3, r5
 800af06:	dc29      	bgt.n	800af5c <_printf_common+0x9c>
 800af08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af0c:	1e13      	subs	r3, r2, #0
 800af0e:	6822      	ldr	r2, [r4, #0]
 800af10:	bf18      	it	ne
 800af12:	2301      	movne	r3, #1
 800af14:	0692      	lsls	r2, r2, #26
 800af16:	d42e      	bmi.n	800af76 <_printf_common+0xb6>
 800af18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af1c:	4649      	mov	r1, r9
 800af1e:	4638      	mov	r0, r7
 800af20:	47c0      	blx	r8
 800af22:	3001      	adds	r0, #1
 800af24:	d021      	beq.n	800af6a <_printf_common+0xaa>
 800af26:	6823      	ldr	r3, [r4, #0]
 800af28:	341a      	adds	r4, #26
 800af2a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800af2e:	f003 0306 	and.w	r3, r3, #6
 800af32:	6832      	ldr	r2, [r6, #0]
 800af34:	2600      	movs	r6, #0
 800af36:	2b04      	cmp	r3, #4
 800af38:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800af3c:	bf08      	it	eq
 800af3e:	1aad      	subeq	r5, r5, r2
 800af40:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800af44:	bf14      	ite	ne
 800af46:	2500      	movne	r5, #0
 800af48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af4c:	4293      	cmp	r3, r2
 800af4e:	bfc4      	itt	gt
 800af50:	1a9b      	subgt	r3, r3, r2
 800af52:	18ed      	addgt	r5, r5, r3
 800af54:	42b5      	cmp	r5, r6
 800af56:	d11a      	bne.n	800af8e <_printf_common+0xce>
 800af58:	2000      	movs	r0, #0
 800af5a:	e008      	b.n	800af6e <_printf_common+0xae>
 800af5c:	2301      	movs	r3, #1
 800af5e:	4652      	mov	r2, sl
 800af60:	4649      	mov	r1, r9
 800af62:	4638      	mov	r0, r7
 800af64:	47c0      	blx	r8
 800af66:	3001      	adds	r0, #1
 800af68:	d103      	bne.n	800af72 <_printf_common+0xb2>
 800af6a:	f04f 30ff 	mov.w	r0, #4294967295
 800af6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af72:	3501      	adds	r5, #1
 800af74:	e7c3      	b.n	800aefe <_printf_common+0x3e>
 800af76:	18e1      	adds	r1, r4, r3
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	2030      	movs	r0, #48	; 0x30
 800af7c:	3302      	adds	r3, #2
 800af7e:	4422      	add	r2, r4
 800af80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af8c:	e7c4      	b.n	800af18 <_printf_common+0x58>
 800af8e:	2301      	movs	r3, #1
 800af90:	4622      	mov	r2, r4
 800af92:	4649      	mov	r1, r9
 800af94:	4638      	mov	r0, r7
 800af96:	47c0      	blx	r8
 800af98:	3001      	adds	r0, #1
 800af9a:	d0e6      	beq.n	800af6a <_printf_common+0xaa>
 800af9c:	3601      	adds	r6, #1
 800af9e:	e7d9      	b.n	800af54 <_printf_common+0x94>

0800afa0 <_printf_i>:
 800afa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afa4:	460c      	mov	r4, r1
 800afa6:	4691      	mov	r9, r2
 800afa8:	4680      	mov	r8, r0
 800afaa:	469a      	mov	sl, r3
 800afac:	7e27      	ldrb	r7, [r4, #24]
 800afae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800afb4:	2f78      	cmp	r7, #120	; 0x78
 800afb6:	d807      	bhi.n	800afc8 <_printf_i+0x28>
 800afb8:	2f62      	cmp	r7, #98	; 0x62
 800afba:	d80a      	bhi.n	800afd2 <_printf_i+0x32>
 800afbc:	2f00      	cmp	r7, #0
 800afbe:	f000 80d8 	beq.w	800b172 <_printf_i+0x1d2>
 800afc2:	2f58      	cmp	r7, #88	; 0x58
 800afc4:	f000 80a3 	beq.w	800b10e <_printf_i+0x16e>
 800afc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800afcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800afd0:	e03a      	b.n	800b048 <_printf_i+0xa8>
 800afd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800afd6:	2b15      	cmp	r3, #21
 800afd8:	d8f6      	bhi.n	800afc8 <_printf_i+0x28>
 800afda:	a001      	add	r0, pc, #4	; (adr r0, 800afe0 <_printf_i+0x40>)
 800afdc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800afe0:	0800b039 	.word	0x0800b039
 800afe4:	0800b04d 	.word	0x0800b04d
 800afe8:	0800afc9 	.word	0x0800afc9
 800afec:	0800afc9 	.word	0x0800afc9
 800aff0:	0800afc9 	.word	0x0800afc9
 800aff4:	0800afc9 	.word	0x0800afc9
 800aff8:	0800b04d 	.word	0x0800b04d
 800affc:	0800afc9 	.word	0x0800afc9
 800b000:	0800afc9 	.word	0x0800afc9
 800b004:	0800afc9 	.word	0x0800afc9
 800b008:	0800afc9 	.word	0x0800afc9
 800b00c:	0800b159 	.word	0x0800b159
 800b010:	0800b07d 	.word	0x0800b07d
 800b014:	0800b13b 	.word	0x0800b13b
 800b018:	0800afc9 	.word	0x0800afc9
 800b01c:	0800afc9 	.word	0x0800afc9
 800b020:	0800b17b 	.word	0x0800b17b
 800b024:	0800afc9 	.word	0x0800afc9
 800b028:	0800b07d 	.word	0x0800b07d
 800b02c:	0800afc9 	.word	0x0800afc9
 800b030:	0800afc9 	.word	0x0800afc9
 800b034:	0800b143 	.word	0x0800b143
 800b038:	680b      	ldr	r3, [r1, #0]
 800b03a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b03e:	1d1a      	adds	r2, r3, #4
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	600a      	str	r2, [r1, #0]
 800b044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b048:	2301      	movs	r3, #1
 800b04a:	e0a3      	b.n	800b194 <_printf_i+0x1f4>
 800b04c:	6825      	ldr	r5, [r4, #0]
 800b04e:	6808      	ldr	r0, [r1, #0]
 800b050:	062e      	lsls	r6, r5, #24
 800b052:	f100 0304 	add.w	r3, r0, #4
 800b056:	d50a      	bpl.n	800b06e <_printf_i+0xce>
 800b058:	6805      	ldr	r5, [r0, #0]
 800b05a:	600b      	str	r3, [r1, #0]
 800b05c:	2d00      	cmp	r5, #0
 800b05e:	da03      	bge.n	800b068 <_printf_i+0xc8>
 800b060:	232d      	movs	r3, #45	; 0x2d
 800b062:	426d      	negs	r5, r5
 800b064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b068:	485e      	ldr	r0, [pc, #376]	; (800b1e4 <_printf_i+0x244>)
 800b06a:	230a      	movs	r3, #10
 800b06c:	e019      	b.n	800b0a2 <_printf_i+0x102>
 800b06e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b072:	6805      	ldr	r5, [r0, #0]
 800b074:	600b      	str	r3, [r1, #0]
 800b076:	bf18      	it	ne
 800b078:	b22d      	sxthne	r5, r5
 800b07a:	e7ef      	b.n	800b05c <_printf_i+0xbc>
 800b07c:	680b      	ldr	r3, [r1, #0]
 800b07e:	6825      	ldr	r5, [r4, #0]
 800b080:	1d18      	adds	r0, r3, #4
 800b082:	6008      	str	r0, [r1, #0]
 800b084:	0628      	lsls	r0, r5, #24
 800b086:	d501      	bpl.n	800b08c <_printf_i+0xec>
 800b088:	681d      	ldr	r5, [r3, #0]
 800b08a:	e002      	b.n	800b092 <_printf_i+0xf2>
 800b08c:	0669      	lsls	r1, r5, #25
 800b08e:	d5fb      	bpl.n	800b088 <_printf_i+0xe8>
 800b090:	881d      	ldrh	r5, [r3, #0]
 800b092:	2f6f      	cmp	r7, #111	; 0x6f
 800b094:	4853      	ldr	r0, [pc, #332]	; (800b1e4 <_printf_i+0x244>)
 800b096:	bf0c      	ite	eq
 800b098:	2308      	moveq	r3, #8
 800b09a:	230a      	movne	r3, #10
 800b09c:	2100      	movs	r1, #0
 800b09e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0a2:	6866      	ldr	r6, [r4, #4]
 800b0a4:	2e00      	cmp	r6, #0
 800b0a6:	60a6      	str	r6, [r4, #8]
 800b0a8:	bfa2      	ittt	ge
 800b0aa:	6821      	ldrge	r1, [r4, #0]
 800b0ac:	f021 0104 	bicge.w	r1, r1, #4
 800b0b0:	6021      	strge	r1, [r4, #0]
 800b0b2:	b90d      	cbnz	r5, 800b0b8 <_printf_i+0x118>
 800b0b4:	2e00      	cmp	r6, #0
 800b0b6:	d04d      	beq.n	800b154 <_printf_i+0x1b4>
 800b0b8:	4616      	mov	r6, r2
 800b0ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800b0be:	fb03 5711 	mls	r7, r3, r1, r5
 800b0c2:	5dc7      	ldrb	r7, [r0, r7]
 800b0c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b0c8:	462f      	mov	r7, r5
 800b0ca:	460d      	mov	r5, r1
 800b0cc:	42bb      	cmp	r3, r7
 800b0ce:	d9f4      	bls.n	800b0ba <_printf_i+0x11a>
 800b0d0:	2b08      	cmp	r3, #8
 800b0d2:	d10b      	bne.n	800b0ec <_printf_i+0x14c>
 800b0d4:	6823      	ldr	r3, [r4, #0]
 800b0d6:	07df      	lsls	r7, r3, #31
 800b0d8:	d508      	bpl.n	800b0ec <_printf_i+0x14c>
 800b0da:	6923      	ldr	r3, [r4, #16]
 800b0dc:	6861      	ldr	r1, [r4, #4]
 800b0de:	4299      	cmp	r1, r3
 800b0e0:	bfde      	ittt	le
 800b0e2:	2330      	movle	r3, #48	; 0x30
 800b0e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b0e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b0ec:	1b92      	subs	r2, r2, r6
 800b0ee:	6122      	str	r2, [r4, #16]
 800b0f0:	464b      	mov	r3, r9
 800b0f2:	aa03      	add	r2, sp, #12
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	4640      	mov	r0, r8
 800b0f8:	f8cd a000 	str.w	sl, [sp]
 800b0fc:	f7ff fee0 	bl	800aec0 <_printf_common>
 800b100:	3001      	adds	r0, #1
 800b102:	d14c      	bne.n	800b19e <_printf_i+0x1fe>
 800b104:	f04f 30ff 	mov.w	r0, #4294967295
 800b108:	b004      	add	sp, #16
 800b10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b10e:	4835      	ldr	r0, [pc, #212]	; (800b1e4 <_printf_i+0x244>)
 800b110:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	680e      	ldr	r6, [r1, #0]
 800b118:	061f      	lsls	r7, r3, #24
 800b11a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b11e:	600e      	str	r6, [r1, #0]
 800b120:	d514      	bpl.n	800b14c <_printf_i+0x1ac>
 800b122:	07d9      	lsls	r1, r3, #31
 800b124:	bf44      	itt	mi
 800b126:	f043 0320 	orrmi.w	r3, r3, #32
 800b12a:	6023      	strmi	r3, [r4, #0]
 800b12c:	b91d      	cbnz	r5, 800b136 <_printf_i+0x196>
 800b12e:	6823      	ldr	r3, [r4, #0]
 800b130:	f023 0320 	bic.w	r3, r3, #32
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	2310      	movs	r3, #16
 800b138:	e7b0      	b.n	800b09c <_printf_i+0xfc>
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	f043 0320 	orr.w	r3, r3, #32
 800b140:	6023      	str	r3, [r4, #0]
 800b142:	2378      	movs	r3, #120	; 0x78
 800b144:	4828      	ldr	r0, [pc, #160]	; (800b1e8 <_printf_i+0x248>)
 800b146:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b14a:	e7e3      	b.n	800b114 <_printf_i+0x174>
 800b14c:	065e      	lsls	r6, r3, #25
 800b14e:	bf48      	it	mi
 800b150:	b2ad      	uxthmi	r5, r5
 800b152:	e7e6      	b.n	800b122 <_printf_i+0x182>
 800b154:	4616      	mov	r6, r2
 800b156:	e7bb      	b.n	800b0d0 <_printf_i+0x130>
 800b158:	680b      	ldr	r3, [r1, #0]
 800b15a:	6826      	ldr	r6, [r4, #0]
 800b15c:	1d1d      	adds	r5, r3, #4
 800b15e:	6960      	ldr	r0, [r4, #20]
 800b160:	600d      	str	r5, [r1, #0]
 800b162:	0635      	lsls	r5, r6, #24
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	d501      	bpl.n	800b16c <_printf_i+0x1cc>
 800b168:	6018      	str	r0, [r3, #0]
 800b16a:	e002      	b.n	800b172 <_printf_i+0x1d2>
 800b16c:	0671      	lsls	r1, r6, #25
 800b16e:	d5fb      	bpl.n	800b168 <_printf_i+0x1c8>
 800b170:	8018      	strh	r0, [r3, #0]
 800b172:	2300      	movs	r3, #0
 800b174:	4616      	mov	r6, r2
 800b176:	6123      	str	r3, [r4, #16]
 800b178:	e7ba      	b.n	800b0f0 <_printf_i+0x150>
 800b17a:	680b      	ldr	r3, [r1, #0]
 800b17c:	1d1a      	adds	r2, r3, #4
 800b17e:	600a      	str	r2, [r1, #0]
 800b180:	2100      	movs	r1, #0
 800b182:	681e      	ldr	r6, [r3, #0]
 800b184:	6862      	ldr	r2, [r4, #4]
 800b186:	4630      	mov	r0, r6
 800b188:	f000 fa9c 	bl	800b6c4 <memchr>
 800b18c:	b108      	cbz	r0, 800b192 <_printf_i+0x1f2>
 800b18e:	1b80      	subs	r0, r0, r6
 800b190:	6060      	str	r0, [r4, #4]
 800b192:	6863      	ldr	r3, [r4, #4]
 800b194:	6123      	str	r3, [r4, #16]
 800b196:	2300      	movs	r3, #0
 800b198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b19c:	e7a8      	b.n	800b0f0 <_printf_i+0x150>
 800b19e:	6923      	ldr	r3, [r4, #16]
 800b1a0:	4632      	mov	r2, r6
 800b1a2:	4649      	mov	r1, r9
 800b1a4:	4640      	mov	r0, r8
 800b1a6:	47d0      	blx	sl
 800b1a8:	3001      	adds	r0, #1
 800b1aa:	d0ab      	beq.n	800b104 <_printf_i+0x164>
 800b1ac:	6823      	ldr	r3, [r4, #0]
 800b1ae:	079b      	lsls	r3, r3, #30
 800b1b0:	d413      	bmi.n	800b1da <_printf_i+0x23a>
 800b1b2:	68e0      	ldr	r0, [r4, #12]
 800b1b4:	9b03      	ldr	r3, [sp, #12]
 800b1b6:	4298      	cmp	r0, r3
 800b1b8:	bfb8      	it	lt
 800b1ba:	4618      	movlt	r0, r3
 800b1bc:	e7a4      	b.n	800b108 <_printf_i+0x168>
 800b1be:	2301      	movs	r3, #1
 800b1c0:	4632      	mov	r2, r6
 800b1c2:	4649      	mov	r1, r9
 800b1c4:	4640      	mov	r0, r8
 800b1c6:	47d0      	blx	sl
 800b1c8:	3001      	adds	r0, #1
 800b1ca:	d09b      	beq.n	800b104 <_printf_i+0x164>
 800b1cc:	3501      	adds	r5, #1
 800b1ce:	68e3      	ldr	r3, [r4, #12]
 800b1d0:	9903      	ldr	r1, [sp, #12]
 800b1d2:	1a5b      	subs	r3, r3, r1
 800b1d4:	42ab      	cmp	r3, r5
 800b1d6:	dcf2      	bgt.n	800b1be <_printf_i+0x21e>
 800b1d8:	e7eb      	b.n	800b1b2 <_printf_i+0x212>
 800b1da:	2500      	movs	r5, #0
 800b1dc:	f104 0619 	add.w	r6, r4, #25
 800b1e0:	e7f5      	b.n	800b1ce <_printf_i+0x22e>
 800b1e2:	bf00      	nop
 800b1e4:	0800bd7d 	.word	0x0800bd7d
 800b1e8:	0800bd8e 	.word	0x0800bd8e

0800b1ec <_sbrk_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	4d05      	ldr	r5, [pc, #20]	; (800b208 <_sbrk_r+0x1c>)
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	4608      	mov	r0, r1
 800b1f6:	602b      	str	r3, [r5, #0]
 800b1f8:	f7f6 f814 	bl	8001224 <_sbrk>
 800b1fc:	1c43      	adds	r3, r0, #1
 800b1fe:	d102      	bne.n	800b206 <_sbrk_r+0x1a>
 800b200:	682b      	ldr	r3, [r5, #0]
 800b202:	b103      	cbz	r3, 800b206 <_sbrk_r+0x1a>
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	bd38      	pop	{r3, r4, r5, pc}
 800b208:	2000037c 	.word	0x2000037c

0800b20c <__sread>:
 800b20c:	b510      	push	{r4, lr}
 800b20e:	460c      	mov	r4, r1
 800b210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b214:	f000 fb0e 	bl	800b834 <_read_r>
 800b218:	2800      	cmp	r0, #0
 800b21a:	bfab      	itete	ge
 800b21c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b21e:	89a3      	ldrhlt	r3, [r4, #12]
 800b220:	181b      	addge	r3, r3, r0
 800b222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b226:	bfac      	ite	ge
 800b228:	6563      	strge	r3, [r4, #84]	; 0x54
 800b22a:	81a3      	strhlt	r3, [r4, #12]
 800b22c:	bd10      	pop	{r4, pc}

0800b22e <__swrite>:
 800b22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b232:	461f      	mov	r7, r3
 800b234:	898b      	ldrh	r3, [r1, #12]
 800b236:	4605      	mov	r5, r0
 800b238:	460c      	mov	r4, r1
 800b23a:	05db      	lsls	r3, r3, #23
 800b23c:	4616      	mov	r6, r2
 800b23e:	d505      	bpl.n	800b24c <__swrite+0x1e>
 800b240:	2302      	movs	r3, #2
 800b242:	2200      	movs	r2, #0
 800b244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b248:	f000 f9c6 	bl	800b5d8 <_lseek_r>
 800b24c:	89a3      	ldrh	r3, [r4, #12]
 800b24e:	4632      	mov	r2, r6
 800b250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b254:	4628      	mov	r0, r5
 800b256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b25a:	81a3      	strh	r3, [r4, #12]
 800b25c:	463b      	mov	r3, r7
 800b25e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b262:	f000 b869 	b.w	800b338 <_write_r>

0800b266 <__sseek>:
 800b266:	b510      	push	{r4, lr}
 800b268:	460c      	mov	r4, r1
 800b26a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b26e:	f000 f9b3 	bl	800b5d8 <_lseek_r>
 800b272:	1c43      	adds	r3, r0, #1
 800b274:	89a3      	ldrh	r3, [r4, #12]
 800b276:	bf15      	itete	ne
 800b278:	6560      	strne	r0, [r4, #84]	; 0x54
 800b27a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b27e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b282:	81a3      	strheq	r3, [r4, #12]
 800b284:	bf18      	it	ne
 800b286:	81a3      	strhne	r3, [r4, #12]
 800b288:	bd10      	pop	{r4, pc}

0800b28a <__sclose>:
 800b28a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b28e:	f000 b8d3 	b.w	800b438 <_close_r>
	...

0800b294 <__swbuf_r>:
 800b294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b296:	460e      	mov	r6, r1
 800b298:	4614      	mov	r4, r2
 800b29a:	4605      	mov	r5, r0
 800b29c:	b118      	cbz	r0, 800b2a6 <__swbuf_r+0x12>
 800b29e:	6983      	ldr	r3, [r0, #24]
 800b2a0:	b90b      	cbnz	r3, 800b2a6 <__swbuf_r+0x12>
 800b2a2:	f7ff fa5d 	bl	800a760 <__sinit>
 800b2a6:	4b21      	ldr	r3, [pc, #132]	; (800b32c <__swbuf_r+0x98>)
 800b2a8:	429c      	cmp	r4, r3
 800b2aa:	d12b      	bne.n	800b304 <__swbuf_r+0x70>
 800b2ac:	686c      	ldr	r4, [r5, #4]
 800b2ae:	69a3      	ldr	r3, [r4, #24]
 800b2b0:	60a3      	str	r3, [r4, #8]
 800b2b2:	89a3      	ldrh	r3, [r4, #12]
 800b2b4:	071a      	lsls	r2, r3, #28
 800b2b6:	d52f      	bpl.n	800b318 <__swbuf_r+0x84>
 800b2b8:	6923      	ldr	r3, [r4, #16]
 800b2ba:	b36b      	cbz	r3, 800b318 <__swbuf_r+0x84>
 800b2bc:	6923      	ldr	r3, [r4, #16]
 800b2be:	b2f6      	uxtb	r6, r6
 800b2c0:	6820      	ldr	r0, [r4, #0]
 800b2c2:	4637      	mov	r7, r6
 800b2c4:	1ac0      	subs	r0, r0, r3
 800b2c6:	6963      	ldr	r3, [r4, #20]
 800b2c8:	4283      	cmp	r3, r0
 800b2ca:	dc04      	bgt.n	800b2d6 <__swbuf_r+0x42>
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	f000 f946 	bl	800b560 <_fflush_r>
 800b2d4:	bb30      	cbnz	r0, 800b324 <__swbuf_r+0x90>
 800b2d6:	68a3      	ldr	r3, [r4, #8]
 800b2d8:	3001      	adds	r0, #1
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	60a3      	str	r3, [r4, #8]
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	1c5a      	adds	r2, r3, #1
 800b2e2:	6022      	str	r2, [r4, #0]
 800b2e4:	701e      	strb	r6, [r3, #0]
 800b2e6:	6963      	ldr	r3, [r4, #20]
 800b2e8:	4283      	cmp	r3, r0
 800b2ea:	d004      	beq.n	800b2f6 <__swbuf_r+0x62>
 800b2ec:	89a3      	ldrh	r3, [r4, #12]
 800b2ee:	07db      	lsls	r3, r3, #31
 800b2f0:	d506      	bpl.n	800b300 <__swbuf_r+0x6c>
 800b2f2:	2e0a      	cmp	r6, #10
 800b2f4:	d104      	bne.n	800b300 <__swbuf_r+0x6c>
 800b2f6:	4621      	mov	r1, r4
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	f000 f931 	bl	800b560 <_fflush_r>
 800b2fe:	b988      	cbnz	r0, 800b324 <__swbuf_r+0x90>
 800b300:	4638      	mov	r0, r7
 800b302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b304:	4b0a      	ldr	r3, [pc, #40]	; (800b330 <__swbuf_r+0x9c>)
 800b306:	429c      	cmp	r4, r3
 800b308:	d101      	bne.n	800b30e <__swbuf_r+0x7a>
 800b30a:	68ac      	ldr	r4, [r5, #8]
 800b30c:	e7cf      	b.n	800b2ae <__swbuf_r+0x1a>
 800b30e:	4b09      	ldr	r3, [pc, #36]	; (800b334 <__swbuf_r+0xa0>)
 800b310:	429c      	cmp	r4, r3
 800b312:	bf08      	it	eq
 800b314:	68ec      	ldreq	r4, [r5, #12]
 800b316:	e7ca      	b.n	800b2ae <__swbuf_r+0x1a>
 800b318:	4621      	mov	r1, r4
 800b31a:	4628      	mov	r0, r5
 800b31c:	f000 f81e 	bl	800b35c <__swsetup_r>
 800b320:	2800      	cmp	r0, #0
 800b322:	d0cb      	beq.n	800b2bc <__swbuf_r+0x28>
 800b324:	f04f 37ff 	mov.w	r7, #4294967295
 800b328:	e7ea      	b.n	800b300 <__swbuf_r+0x6c>
 800b32a:	bf00      	nop
 800b32c:	0800bd2c 	.word	0x0800bd2c
 800b330:	0800bd4c 	.word	0x0800bd4c
 800b334:	0800bd0c 	.word	0x0800bd0c

0800b338 <_write_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	4604      	mov	r4, r0
 800b33c:	4d06      	ldr	r5, [pc, #24]	; (800b358 <_write_r+0x20>)
 800b33e:	4608      	mov	r0, r1
 800b340:	4611      	mov	r1, r2
 800b342:	2200      	movs	r2, #0
 800b344:	602a      	str	r2, [r5, #0]
 800b346:	461a      	mov	r2, r3
 800b348:	f7f5 ff1b 	bl	8001182 <_write>
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	d102      	bne.n	800b356 <_write_r+0x1e>
 800b350:	682b      	ldr	r3, [r5, #0]
 800b352:	b103      	cbz	r3, 800b356 <_write_r+0x1e>
 800b354:	6023      	str	r3, [r4, #0]
 800b356:	bd38      	pop	{r3, r4, r5, pc}
 800b358:	2000037c 	.word	0x2000037c

0800b35c <__swsetup_r>:
 800b35c:	4b32      	ldr	r3, [pc, #200]	; (800b428 <__swsetup_r+0xcc>)
 800b35e:	b570      	push	{r4, r5, r6, lr}
 800b360:	681d      	ldr	r5, [r3, #0]
 800b362:	4606      	mov	r6, r0
 800b364:	460c      	mov	r4, r1
 800b366:	b125      	cbz	r5, 800b372 <__swsetup_r+0x16>
 800b368:	69ab      	ldr	r3, [r5, #24]
 800b36a:	b913      	cbnz	r3, 800b372 <__swsetup_r+0x16>
 800b36c:	4628      	mov	r0, r5
 800b36e:	f7ff f9f7 	bl	800a760 <__sinit>
 800b372:	4b2e      	ldr	r3, [pc, #184]	; (800b42c <__swsetup_r+0xd0>)
 800b374:	429c      	cmp	r4, r3
 800b376:	d10f      	bne.n	800b398 <__swsetup_r+0x3c>
 800b378:	686c      	ldr	r4, [r5, #4]
 800b37a:	89a3      	ldrh	r3, [r4, #12]
 800b37c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b380:	0719      	lsls	r1, r3, #28
 800b382:	d42c      	bmi.n	800b3de <__swsetup_r+0x82>
 800b384:	06dd      	lsls	r5, r3, #27
 800b386:	d411      	bmi.n	800b3ac <__swsetup_r+0x50>
 800b388:	2309      	movs	r3, #9
 800b38a:	6033      	str	r3, [r6, #0]
 800b38c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b390:	f04f 30ff 	mov.w	r0, #4294967295
 800b394:	81a3      	strh	r3, [r4, #12]
 800b396:	e03e      	b.n	800b416 <__swsetup_r+0xba>
 800b398:	4b25      	ldr	r3, [pc, #148]	; (800b430 <__swsetup_r+0xd4>)
 800b39a:	429c      	cmp	r4, r3
 800b39c:	d101      	bne.n	800b3a2 <__swsetup_r+0x46>
 800b39e:	68ac      	ldr	r4, [r5, #8]
 800b3a0:	e7eb      	b.n	800b37a <__swsetup_r+0x1e>
 800b3a2:	4b24      	ldr	r3, [pc, #144]	; (800b434 <__swsetup_r+0xd8>)
 800b3a4:	429c      	cmp	r4, r3
 800b3a6:	bf08      	it	eq
 800b3a8:	68ec      	ldreq	r4, [r5, #12]
 800b3aa:	e7e6      	b.n	800b37a <__swsetup_r+0x1e>
 800b3ac:	0758      	lsls	r0, r3, #29
 800b3ae:	d512      	bpl.n	800b3d6 <__swsetup_r+0x7a>
 800b3b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3b2:	b141      	cbz	r1, 800b3c6 <__swsetup_r+0x6a>
 800b3b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3b8:	4299      	cmp	r1, r3
 800b3ba:	d002      	beq.n	800b3c2 <__swsetup_r+0x66>
 800b3bc:	4630      	mov	r0, r6
 800b3be:	f000 f9c3 	bl	800b748 <_free_r>
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	6363      	str	r3, [r4, #52]	; 0x34
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3cc:	81a3      	strh	r3, [r4, #12]
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	6063      	str	r3, [r4, #4]
 800b3d2:	6923      	ldr	r3, [r4, #16]
 800b3d4:	6023      	str	r3, [r4, #0]
 800b3d6:	89a3      	ldrh	r3, [r4, #12]
 800b3d8:	f043 0308 	orr.w	r3, r3, #8
 800b3dc:	81a3      	strh	r3, [r4, #12]
 800b3de:	6923      	ldr	r3, [r4, #16]
 800b3e0:	b94b      	cbnz	r3, 800b3f6 <__swsetup_r+0x9a>
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3ec:	d003      	beq.n	800b3f6 <__swsetup_r+0x9a>
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	f000 f927 	bl	800b644 <__smakebuf_r>
 800b3f6:	89a0      	ldrh	r0, [r4, #12]
 800b3f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3fc:	f010 0301 	ands.w	r3, r0, #1
 800b400:	d00a      	beq.n	800b418 <__swsetup_r+0xbc>
 800b402:	2300      	movs	r3, #0
 800b404:	60a3      	str	r3, [r4, #8]
 800b406:	6963      	ldr	r3, [r4, #20]
 800b408:	425b      	negs	r3, r3
 800b40a:	61a3      	str	r3, [r4, #24]
 800b40c:	6923      	ldr	r3, [r4, #16]
 800b40e:	b943      	cbnz	r3, 800b422 <__swsetup_r+0xc6>
 800b410:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b414:	d1ba      	bne.n	800b38c <__swsetup_r+0x30>
 800b416:	bd70      	pop	{r4, r5, r6, pc}
 800b418:	0781      	lsls	r1, r0, #30
 800b41a:	bf58      	it	pl
 800b41c:	6963      	ldrpl	r3, [r4, #20]
 800b41e:	60a3      	str	r3, [r4, #8]
 800b420:	e7f4      	b.n	800b40c <__swsetup_r+0xb0>
 800b422:	2000      	movs	r0, #0
 800b424:	e7f7      	b.n	800b416 <__swsetup_r+0xba>
 800b426:	bf00      	nop
 800b428:	20000090 	.word	0x20000090
 800b42c:	0800bd2c 	.word	0x0800bd2c
 800b430:	0800bd4c 	.word	0x0800bd4c
 800b434:	0800bd0c 	.word	0x0800bd0c

0800b438 <_close_r>:
 800b438:	b538      	push	{r3, r4, r5, lr}
 800b43a:	2300      	movs	r3, #0
 800b43c:	4d05      	ldr	r5, [pc, #20]	; (800b454 <_close_r+0x1c>)
 800b43e:	4604      	mov	r4, r0
 800b440:	4608      	mov	r0, r1
 800b442:	602b      	str	r3, [r5, #0]
 800b444:	f7f5 feb9 	bl	80011ba <_close>
 800b448:	1c43      	adds	r3, r0, #1
 800b44a:	d102      	bne.n	800b452 <_close_r+0x1a>
 800b44c:	682b      	ldr	r3, [r5, #0]
 800b44e:	b103      	cbz	r3, 800b452 <_close_r+0x1a>
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	bd38      	pop	{r3, r4, r5, pc}
 800b454:	2000037c 	.word	0x2000037c

0800b458 <__sflush_r>:
 800b458:	898a      	ldrh	r2, [r1, #12]
 800b45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b45e:	4605      	mov	r5, r0
 800b460:	0710      	lsls	r0, r2, #28
 800b462:	460c      	mov	r4, r1
 800b464:	d458      	bmi.n	800b518 <__sflush_r+0xc0>
 800b466:	684b      	ldr	r3, [r1, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	dc05      	bgt.n	800b478 <__sflush_r+0x20>
 800b46c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b46e:	2b00      	cmp	r3, #0
 800b470:	dc02      	bgt.n	800b478 <__sflush_r+0x20>
 800b472:	2000      	movs	r0, #0
 800b474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b47a:	2e00      	cmp	r6, #0
 800b47c:	d0f9      	beq.n	800b472 <__sflush_r+0x1a>
 800b47e:	2300      	movs	r3, #0
 800b480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b484:	682f      	ldr	r7, [r5, #0]
 800b486:	602b      	str	r3, [r5, #0]
 800b488:	d032      	beq.n	800b4f0 <__sflush_r+0x98>
 800b48a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b48c:	89a3      	ldrh	r3, [r4, #12]
 800b48e:	075a      	lsls	r2, r3, #29
 800b490:	d505      	bpl.n	800b49e <__sflush_r+0x46>
 800b492:	6863      	ldr	r3, [r4, #4]
 800b494:	1ac0      	subs	r0, r0, r3
 800b496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b498:	b10b      	cbz	r3, 800b49e <__sflush_r+0x46>
 800b49a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b49c:	1ac0      	subs	r0, r0, r3
 800b49e:	2300      	movs	r3, #0
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	6a21      	ldr	r1, [r4, #32]
 800b4a8:	47b0      	blx	r6
 800b4aa:	1c43      	adds	r3, r0, #1
 800b4ac:	89a3      	ldrh	r3, [r4, #12]
 800b4ae:	d106      	bne.n	800b4be <__sflush_r+0x66>
 800b4b0:	6829      	ldr	r1, [r5, #0]
 800b4b2:	291d      	cmp	r1, #29
 800b4b4:	d82c      	bhi.n	800b510 <__sflush_r+0xb8>
 800b4b6:	4a29      	ldr	r2, [pc, #164]	; (800b55c <__sflush_r+0x104>)
 800b4b8:	40ca      	lsrs	r2, r1
 800b4ba:	07d6      	lsls	r6, r2, #31
 800b4bc:	d528      	bpl.n	800b510 <__sflush_r+0xb8>
 800b4be:	2200      	movs	r2, #0
 800b4c0:	04d9      	lsls	r1, r3, #19
 800b4c2:	6062      	str	r2, [r4, #4]
 800b4c4:	6922      	ldr	r2, [r4, #16]
 800b4c6:	6022      	str	r2, [r4, #0]
 800b4c8:	d504      	bpl.n	800b4d4 <__sflush_r+0x7c>
 800b4ca:	1c42      	adds	r2, r0, #1
 800b4cc:	d101      	bne.n	800b4d2 <__sflush_r+0x7a>
 800b4ce:	682b      	ldr	r3, [r5, #0]
 800b4d0:	b903      	cbnz	r3, 800b4d4 <__sflush_r+0x7c>
 800b4d2:	6560      	str	r0, [r4, #84]	; 0x54
 800b4d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4d6:	602f      	str	r7, [r5, #0]
 800b4d8:	2900      	cmp	r1, #0
 800b4da:	d0ca      	beq.n	800b472 <__sflush_r+0x1a>
 800b4dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4e0:	4299      	cmp	r1, r3
 800b4e2:	d002      	beq.n	800b4ea <__sflush_r+0x92>
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	f000 f92f 	bl	800b748 <_free_r>
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	6360      	str	r0, [r4, #52]	; 0x34
 800b4ee:	e7c1      	b.n	800b474 <__sflush_r+0x1c>
 800b4f0:	6a21      	ldr	r1, [r4, #32]
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	47b0      	blx	r6
 800b4f8:	1c41      	adds	r1, r0, #1
 800b4fa:	d1c7      	bne.n	800b48c <__sflush_r+0x34>
 800b4fc:	682b      	ldr	r3, [r5, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d0c4      	beq.n	800b48c <__sflush_r+0x34>
 800b502:	2b1d      	cmp	r3, #29
 800b504:	d001      	beq.n	800b50a <__sflush_r+0xb2>
 800b506:	2b16      	cmp	r3, #22
 800b508:	d101      	bne.n	800b50e <__sflush_r+0xb6>
 800b50a:	602f      	str	r7, [r5, #0]
 800b50c:	e7b1      	b.n	800b472 <__sflush_r+0x1a>
 800b50e:	89a3      	ldrh	r3, [r4, #12]
 800b510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b514:	81a3      	strh	r3, [r4, #12]
 800b516:	e7ad      	b.n	800b474 <__sflush_r+0x1c>
 800b518:	690f      	ldr	r7, [r1, #16]
 800b51a:	2f00      	cmp	r7, #0
 800b51c:	d0a9      	beq.n	800b472 <__sflush_r+0x1a>
 800b51e:	0793      	lsls	r3, r2, #30
 800b520:	680e      	ldr	r6, [r1, #0]
 800b522:	600f      	str	r7, [r1, #0]
 800b524:	bf0c      	ite	eq
 800b526:	694b      	ldreq	r3, [r1, #20]
 800b528:	2300      	movne	r3, #0
 800b52a:	eba6 0807 	sub.w	r8, r6, r7
 800b52e:	608b      	str	r3, [r1, #8]
 800b530:	f1b8 0f00 	cmp.w	r8, #0
 800b534:	dd9d      	ble.n	800b472 <__sflush_r+0x1a>
 800b536:	4643      	mov	r3, r8
 800b538:	463a      	mov	r2, r7
 800b53a:	6a21      	ldr	r1, [r4, #32]
 800b53c:	4628      	mov	r0, r5
 800b53e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b540:	47b0      	blx	r6
 800b542:	2800      	cmp	r0, #0
 800b544:	dc06      	bgt.n	800b554 <__sflush_r+0xfc>
 800b546:	89a3      	ldrh	r3, [r4, #12]
 800b548:	f04f 30ff 	mov.w	r0, #4294967295
 800b54c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b550:	81a3      	strh	r3, [r4, #12]
 800b552:	e78f      	b.n	800b474 <__sflush_r+0x1c>
 800b554:	4407      	add	r7, r0
 800b556:	eba8 0800 	sub.w	r8, r8, r0
 800b55a:	e7e9      	b.n	800b530 <__sflush_r+0xd8>
 800b55c:	20400001 	.word	0x20400001

0800b560 <_fflush_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	690b      	ldr	r3, [r1, #16]
 800b564:	4605      	mov	r5, r0
 800b566:	460c      	mov	r4, r1
 800b568:	b913      	cbnz	r3, 800b570 <_fflush_r+0x10>
 800b56a:	2500      	movs	r5, #0
 800b56c:	4628      	mov	r0, r5
 800b56e:	bd38      	pop	{r3, r4, r5, pc}
 800b570:	b118      	cbz	r0, 800b57a <_fflush_r+0x1a>
 800b572:	6983      	ldr	r3, [r0, #24]
 800b574:	b90b      	cbnz	r3, 800b57a <_fflush_r+0x1a>
 800b576:	f7ff f8f3 	bl	800a760 <__sinit>
 800b57a:	4b14      	ldr	r3, [pc, #80]	; (800b5cc <_fflush_r+0x6c>)
 800b57c:	429c      	cmp	r4, r3
 800b57e:	d11b      	bne.n	800b5b8 <_fflush_r+0x58>
 800b580:	686c      	ldr	r4, [r5, #4]
 800b582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d0ef      	beq.n	800b56a <_fflush_r+0xa>
 800b58a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b58c:	07d0      	lsls	r0, r2, #31
 800b58e:	d404      	bmi.n	800b59a <_fflush_r+0x3a>
 800b590:	0599      	lsls	r1, r3, #22
 800b592:	d402      	bmi.n	800b59a <_fflush_r+0x3a>
 800b594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b596:	f7ff f981 	bl	800a89c <__retarget_lock_acquire_recursive>
 800b59a:	4628      	mov	r0, r5
 800b59c:	4621      	mov	r1, r4
 800b59e:	f7ff ff5b 	bl	800b458 <__sflush_r>
 800b5a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5a4:	4605      	mov	r5, r0
 800b5a6:	07da      	lsls	r2, r3, #31
 800b5a8:	d4e0      	bmi.n	800b56c <_fflush_r+0xc>
 800b5aa:	89a3      	ldrh	r3, [r4, #12]
 800b5ac:	059b      	lsls	r3, r3, #22
 800b5ae:	d4dd      	bmi.n	800b56c <_fflush_r+0xc>
 800b5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5b2:	f7ff f974 	bl	800a89e <__retarget_lock_release_recursive>
 800b5b6:	e7d9      	b.n	800b56c <_fflush_r+0xc>
 800b5b8:	4b05      	ldr	r3, [pc, #20]	; (800b5d0 <_fflush_r+0x70>)
 800b5ba:	429c      	cmp	r4, r3
 800b5bc:	d101      	bne.n	800b5c2 <_fflush_r+0x62>
 800b5be:	68ac      	ldr	r4, [r5, #8]
 800b5c0:	e7df      	b.n	800b582 <_fflush_r+0x22>
 800b5c2:	4b04      	ldr	r3, [pc, #16]	; (800b5d4 <_fflush_r+0x74>)
 800b5c4:	429c      	cmp	r4, r3
 800b5c6:	bf08      	it	eq
 800b5c8:	68ec      	ldreq	r4, [r5, #12]
 800b5ca:	e7da      	b.n	800b582 <_fflush_r+0x22>
 800b5cc:	0800bd2c 	.word	0x0800bd2c
 800b5d0:	0800bd4c 	.word	0x0800bd4c
 800b5d4:	0800bd0c 	.word	0x0800bd0c

0800b5d8 <_lseek_r>:
 800b5d8:	b538      	push	{r3, r4, r5, lr}
 800b5da:	4604      	mov	r4, r0
 800b5dc:	4d06      	ldr	r5, [pc, #24]	; (800b5f8 <_lseek_r+0x20>)
 800b5de:	4608      	mov	r0, r1
 800b5e0:	4611      	mov	r1, r2
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	602a      	str	r2, [r5, #0]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	f7f5 fe0e 	bl	8001208 <_lseek>
 800b5ec:	1c43      	adds	r3, r0, #1
 800b5ee:	d102      	bne.n	800b5f6 <_lseek_r+0x1e>
 800b5f0:	682b      	ldr	r3, [r5, #0]
 800b5f2:	b103      	cbz	r3, 800b5f6 <_lseek_r+0x1e>
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	bd38      	pop	{r3, r4, r5, pc}
 800b5f8:	2000037c 	.word	0x2000037c

0800b5fc <__swhatbuf_r>:
 800b5fc:	b570      	push	{r4, r5, r6, lr}
 800b5fe:	460e      	mov	r6, r1
 800b600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b604:	b096      	sub	sp, #88	; 0x58
 800b606:	4614      	mov	r4, r2
 800b608:	2900      	cmp	r1, #0
 800b60a:	461d      	mov	r5, r3
 800b60c:	da07      	bge.n	800b61e <__swhatbuf_r+0x22>
 800b60e:	2300      	movs	r3, #0
 800b610:	602b      	str	r3, [r5, #0]
 800b612:	89b3      	ldrh	r3, [r6, #12]
 800b614:	061a      	lsls	r2, r3, #24
 800b616:	d410      	bmi.n	800b63a <__swhatbuf_r+0x3e>
 800b618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b61c:	e00e      	b.n	800b63c <__swhatbuf_r+0x40>
 800b61e:	466a      	mov	r2, sp
 800b620:	f000 f91a 	bl	800b858 <_fstat_r>
 800b624:	2800      	cmp	r0, #0
 800b626:	dbf2      	blt.n	800b60e <__swhatbuf_r+0x12>
 800b628:	9a01      	ldr	r2, [sp, #4]
 800b62a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b62e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b632:	425a      	negs	r2, r3
 800b634:	415a      	adcs	r2, r3
 800b636:	602a      	str	r2, [r5, #0]
 800b638:	e7ee      	b.n	800b618 <__swhatbuf_r+0x1c>
 800b63a:	2340      	movs	r3, #64	; 0x40
 800b63c:	2000      	movs	r0, #0
 800b63e:	6023      	str	r3, [r4, #0]
 800b640:	b016      	add	sp, #88	; 0x58
 800b642:	bd70      	pop	{r4, r5, r6, pc}

0800b644 <__smakebuf_r>:
 800b644:	898b      	ldrh	r3, [r1, #12]
 800b646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b648:	079d      	lsls	r5, r3, #30
 800b64a:	4606      	mov	r6, r0
 800b64c:	460c      	mov	r4, r1
 800b64e:	d507      	bpl.n	800b660 <__smakebuf_r+0x1c>
 800b650:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b654:	6023      	str	r3, [r4, #0]
 800b656:	6123      	str	r3, [r4, #16]
 800b658:	2301      	movs	r3, #1
 800b65a:	6163      	str	r3, [r4, #20]
 800b65c:	b002      	add	sp, #8
 800b65e:	bd70      	pop	{r4, r5, r6, pc}
 800b660:	ab01      	add	r3, sp, #4
 800b662:	466a      	mov	r2, sp
 800b664:	f7ff ffca 	bl	800b5fc <__swhatbuf_r>
 800b668:	9900      	ldr	r1, [sp, #0]
 800b66a:	4605      	mov	r5, r0
 800b66c:	4630      	mov	r0, r6
 800b66e:	f7ff f917 	bl	800a8a0 <_malloc_r>
 800b672:	b948      	cbnz	r0, 800b688 <__smakebuf_r+0x44>
 800b674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b678:	059a      	lsls	r2, r3, #22
 800b67a:	d4ef      	bmi.n	800b65c <__smakebuf_r+0x18>
 800b67c:	f023 0303 	bic.w	r3, r3, #3
 800b680:	f043 0302 	orr.w	r3, r3, #2
 800b684:	81a3      	strh	r3, [r4, #12]
 800b686:	e7e3      	b.n	800b650 <__smakebuf_r+0xc>
 800b688:	4b0d      	ldr	r3, [pc, #52]	; (800b6c0 <__smakebuf_r+0x7c>)
 800b68a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b68c:	89a3      	ldrh	r3, [r4, #12]
 800b68e:	6020      	str	r0, [r4, #0]
 800b690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b694:	6120      	str	r0, [r4, #16]
 800b696:	81a3      	strh	r3, [r4, #12]
 800b698:	9b00      	ldr	r3, [sp, #0]
 800b69a:	6163      	str	r3, [r4, #20]
 800b69c:	9b01      	ldr	r3, [sp, #4]
 800b69e:	b15b      	cbz	r3, 800b6b8 <__smakebuf_r+0x74>
 800b6a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	f000 f8e9 	bl	800b87c <_isatty_r>
 800b6aa:	b128      	cbz	r0, 800b6b8 <__smakebuf_r+0x74>
 800b6ac:	89a3      	ldrh	r3, [r4, #12]
 800b6ae:	f023 0303 	bic.w	r3, r3, #3
 800b6b2:	f043 0301 	orr.w	r3, r3, #1
 800b6b6:	81a3      	strh	r3, [r4, #12]
 800b6b8:	89a0      	ldrh	r0, [r4, #12]
 800b6ba:	4305      	orrs	r5, r0
 800b6bc:	81a5      	strh	r5, [r4, #12]
 800b6be:	e7cd      	b.n	800b65c <__smakebuf_r+0x18>
 800b6c0:	0800a6f9 	.word	0x0800a6f9

0800b6c4 <memchr>:
 800b6c4:	b2c9      	uxtb	r1, r1
 800b6c6:	4402      	add	r2, r0
 800b6c8:	b510      	push	{r4, lr}
 800b6ca:	4290      	cmp	r0, r2
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	d101      	bne.n	800b6d4 <memchr+0x10>
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	e003      	b.n	800b6dc <memchr+0x18>
 800b6d4:	781c      	ldrb	r4, [r3, #0]
 800b6d6:	3001      	adds	r0, #1
 800b6d8:	428c      	cmp	r4, r1
 800b6da:	d1f6      	bne.n	800b6ca <memchr+0x6>
 800b6dc:	4618      	mov	r0, r3
 800b6de:	bd10      	pop	{r4, pc}

0800b6e0 <memcpy>:
 800b6e0:	440a      	add	r2, r1
 800b6e2:	1e43      	subs	r3, r0, #1
 800b6e4:	4291      	cmp	r1, r2
 800b6e6:	d100      	bne.n	800b6ea <memcpy+0xa>
 800b6e8:	4770      	bx	lr
 800b6ea:	b510      	push	{r4, lr}
 800b6ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6f0:	4291      	cmp	r1, r2
 800b6f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6f6:	d1f9      	bne.n	800b6ec <memcpy+0xc>
 800b6f8:	bd10      	pop	{r4, pc}

0800b6fa <memmove>:
 800b6fa:	4288      	cmp	r0, r1
 800b6fc:	b510      	push	{r4, lr}
 800b6fe:	eb01 0402 	add.w	r4, r1, r2
 800b702:	d902      	bls.n	800b70a <memmove+0x10>
 800b704:	4284      	cmp	r4, r0
 800b706:	4623      	mov	r3, r4
 800b708:	d807      	bhi.n	800b71a <memmove+0x20>
 800b70a:	1e43      	subs	r3, r0, #1
 800b70c:	42a1      	cmp	r1, r4
 800b70e:	d008      	beq.n	800b722 <memmove+0x28>
 800b710:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b714:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b718:	e7f8      	b.n	800b70c <memmove+0x12>
 800b71a:	4402      	add	r2, r0
 800b71c:	4601      	mov	r1, r0
 800b71e:	428a      	cmp	r2, r1
 800b720:	d100      	bne.n	800b724 <memmove+0x2a>
 800b722:	bd10      	pop	{r4, pc}
 800b724:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b728:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b72c:	e7f7      	b.n	800b71e <memmove+0x24>
	...

0800b730 <__malloc_lock>:
 800b730:	4801      	ldr	r0, [pc, #4]	; (800b738 <__malloc_lock+0x8>)
 800b732:	f7ff b8b3 	b.w	800a89c <__retarget_lock_acquire_recursive>
 800b736:	bf00      	nop
 800b738:	20000374 	.word	0x20000374

0800b73c <__malloc_unlock>:
 800b73c:	4801      	ldr	r0, [pc, #4]	; (800b744 <__malloc_unlock+0x8>)
 800b73e:	f7ff b8ae 	b.w	800a89e <__retarget_lock_release_recursive>
 800b742:	bf00      	nop
 800b744:	20000374 	.word	0x20000374

0800b748 <_free_r>:
 800b748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b74a:	2900      	cmp	r1, #0
 800b74c:	d047      	beq.n	800b7de <_free_r+0x96>
 800b74e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b752:	1f0c      	subs	r4, r1, #4
 800b754:	9001      	str	r0, [sp, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	bfb8      	it	lt
 800b75a:	18e4      	addlt	r4, r4, r3
 800b75c:	f7ff ffe8 	bl	800b730 <__malloc_lock>
 800b760:	4a20      	ldr	r2, [pc, #128]	; (800b7e4 <_free_r+0x9c>)
 800b762:	9801      	ldr	r0, [sp, #4]
 800b764:	6813      	ldr	r3, [r2, #0]
 800b766:	4615      	mov	r5, r2
 800b768:	b933      	cbnz	r3, 800b778 <_free_r+0x30>
 800b76a:	6063      	str	r3, [r4, #4]
 800b76c:	6014      	str	r4, [r2, #0]
 800b76e:	b003      	add	sp, #12
 800b770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b774:	f7ff bfe2 	b.w	800b73c <__malloc_unlock>
 800b778:	42a3      	cmp	r3, r4
 800b77a:	d90b      	bls.n	800b794 <_free_r+0x4c>
 800b77c:	6821      	ldr	r1, [r4, #0]
 800b77e:	1862      	adds	r2, r4, r1
 800b780:	4293      	cmp	r3, r2
 800b782:	bf02      	ittt	eq
 800b784:	681a      	ldreq	r2, [r3, #0]
 800b786:	685b      	ldreq	r3, [r3, #4]
 800b788:	1852      	addeq	r2, r2, r1
 800b78a:	6063      	str	r3, [r4, #4]
 800b78c:	bf08      	it	eq
 800b78e:	6022      	streq	r2, [r4, #0]
 800b790:	602c      	str	r4, [r5, #0]
 800b792:	e7ec      	b.n	800b76e <_free_r+0x26>
 800b794:	461a      	mov	r2, r3
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	b10b      	cbz	r3, 800b79e <_free_r+0x56>
 800b79a:	42a3      	cmp	r3, r4
 800b79c:	d9fa      	bls.n	800b794 <_free_r+0x4c>
 800b79e:	6811      	ldr	r1, [r2, #0]
 800b7a0:	1855      	adds	r5, r2, r1
 800b7a2:	42a5      	cmp	r5, r4
 800b7a4:	d10b      	bne.n	800b7be <_free_r+0x76>
 800b7a6:	6824      	ldr	r4, [r4, #0]
 800b7a8:	4421      	add	r1, r4
 800b7aa:	1854      	adds	r4, r2, r1
 800b7ac:	6011      	str	r1, [r2, #0]
 800b7ae:	42a3      	cmp	r3, r4
 800b7b0:	d1dd      	bne.n	800b76e <_free_r+0x26>
 800b7b2:	681c      	ldr	r4, [r3, #0]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	4421      	add	r1, r4
 800b7b8:	6053      	str	r3, [r2, #4]
 800b7ba:	6011      	str	r1, [r2, #0]
 800b7bc:	e7d7      	b.n	800b76e <_free_r+0x26>
 800b7be:	d902      	bls.n	800b7c6 <_free_r+0x7e>
 800b7c0:	230c      	movs	r3, #12
 800b7c2:	6003      	str	r3, [r0, #0]
 800b7c4:	e7d3      	b.n	800b76e <_free_r+0x26>
 800b7c6:	6825      	ldr	r5, [r4, #0]
 800b7c8:	1961      	adds	r1, r4, r5
 800b7ca:	428b      	cmp	r3, r1
 800b7cc:	bf02      	ittt	eq
 800b7ce:	6819      	ldreq	r1, [r3, #0]
 800b7d0:	685b      	ldreq	r3, [r3, #4]
 800b7d2:	1949      	addeq	r1, r1, r5
 800b7d4:	6063      	str	r3, [r4, #4]
 800b7d6:	bf08      	it	eq
 800b7d8:	6021      	streq	r1, [r4, #0]
 800b7da:	6054      	str	r4, [r2, #4]
 800b7dc:	e7c7      	b.n	800b76e <_free_r+0x26>
 800b7de:	b003      	add	sp, #12
 800b7e0:	bd30      	pop	{r4, r5, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20000284 	.word	0x20000284

0800b7e8 <_realloc_r>:
 800b7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ea:	4607      	mov	r7, r0
 800b7ec:	4614      	mov	r4, r2
 800b7ee:	460e      	mov	r6, r1
 800b7f0:	b921      	cbnz	r1, 800b7fc <_realloc_r+0x14>
 800b7f2:	4611      	mov	r1, r2
 800b7f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b7f8:	f7ff b852 	b.w	800a8a0 <_malloc_r>
 800b7fc:	b922      	cbnz	r2, 800b808 <_realloc_r+0x20>
 800b7fe:	4625      	mov	r5, r4
 800b800:	f7ff ffa2 	bl	800b748 <_free_r>
 800b804:	4628      	mov	r0, r5
 800b806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b808:	f000 f848 	bl	800b89c <_malloc_usable_size_r>
 800b80c:	42a0      	cmp	r0, r4
 800b80e:	d20f      	bcs.n	800b830 <_realloc_r+0x48>
 800b810:	4621      	mov	r1, r4
 800b812:	4638      	mov	r0, r7
 800b814:	f7ff f844 	bl	800a8a0 <_malloc_r>
 800b818:	4605      	mov	r5, r0
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d0f2      	beq.n	800b804 <_realloc_r+0x1c>
 800b81e:	4631      	mov	r1, r6
 800b820:	4622      	mov	r2, r4
 800b822:	f7ff ff5d 	bl	800b6e0 <memcpy>
 800b826:	4631      	mov	r1, r6
 800b828:	4638      	mov	r0, r7
 800b82a:	f7ff ff8d 	bl	800b748 <_free_r>
 800b82e:	e7e9      	b.n	800b804 <_realloc_r+0x1c>
 800b830:	4635      	mov	r5, r6
 800b832:	e7e7      	b.n	800b804 <_realloc_r+0x1c>

0800b834 <_read_r>:
 800b834:	b538      	push	{r3, r4, r5, lr}
 800b836:	4604      	mov	r4, r0
 800b838:	4d06      	ldr	r5, [pc, #24]	; (800b854 <_read_r+0x20>)
 800b83a:	4608      	mov	r0, r1
 800b83c:	4611      	mov	r1, r2
 800b83e:	2200      	movs	r2, #0
 800b840:	602a      	str	r2, [r5, #0]
 800b842:	461a      	mov	r2, r3
 800b844:	f7f5 fc80 	bl	8001148 <_read>
 800b848:	1c43      	adds	r3, r0, #1
 800b84a:	d102      	bne.n	800b852 <_read_r+0x1e>
 800b84c:	682b      	ldr	r3, [r5, #0]
 800b84e:	b103      	cbz	r3, 800b852 <_read_r+0x1e>
 800b850:	6023      	str	r3, [r4, #0]
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	2000037c 	.word	0x2000037c

0800b858 <_fstat_r>:
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	2300      	movs	r3, #0
 800b85c:	4d06      	ldr	r5, [pc, #24]	; (800b878 <_fstat_r+0x20>)
 800b85e:	4604      	mov	r4, r0
 800b860:	4608      	mov	r0, r1
 800b862:	4611      	mov	r1, r2
 800b864:	602b      	str	r3, [r5, #0]
 800b866:	f7f5 fcb4 	bl	80011d2 <_fstat>
 800b86a:	1c43      	adds	r3, r0, #1
 800b86c:	d102      	bne.n	800b874 <_fstat_r+0x1c>
 800b86e:	682b      	ldr	r3, [r5, #0]
 800b870:	b103      	cbz	r3, 800b874 <_fstat_r+0x1c>
 800b872:	6023      	str	r3, [r4, #0]
 800b874:	bd38      	pop	{r3, r4, r5, pc}
 800b876:	bf00      	nop
 800b878:	2000037c 	.word	0x2000037c

0800b87c <_isatty_r>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	2300      	movs	r3, #0
 800b880:	4d05      	ldr	r5, [pc, #20]	; (800b898 <_isatty_r+0x1c>)
 800b882:	4604      	mov	r4, r0
 800b884:	4608      	mov	r0, r1
 800b886:	602b      	str	r3, [r5, #0]
 800b888:	f7f5 fcb3 	bl	80011f2 <_isatty>
 800b88c:	1c43      	adds	r3, r0, #1
 800b88e:	d102      	bne.n	800b896 <_isatty_r+0x1a>
 800b890:	682b      	ldr	r3, [r5, #0]
 800b892:	b103      	cbz	r3, 800b896 <_isatty_r+0x1a>
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	bd38      	pop	{r3, r4, r5, pc}
 800b898:	2000037c 	.word	0x2000037c

0800b89c <_malloc_usable_size_r>:
 800b89c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8a0:	1f18      	subs	r0, r3, #4
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	bfbc      	itt	lt
 800b8a6:	580b      	ldrlt	r3, [r1, r0]
 800b8a8:	18c0      	addlt	r0, r0, r3
 800b8aa:	4770      	bx	lr

0800b8ac <_init>:
 800b8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ae:	bf00      	nop
 800b8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8b2:	bc08      	pop	{r3}
 800b8b4:	469e      	mov	lr, r3
 800b8b6:	4770      	bx	lr

0800b8b8 <_fini>:
 800b8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ba:	bf00      	nop
 800b8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8be:	bc08      	pop	{r3}
 800b8c0:	469e      	mov	lr, r3
 800b8c2:	4770      	bx	lr
