
STM32WobbleBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005454  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080057d0  080057d0  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080057d8  080057d8  000157d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080057dc  080057dc  000157dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  080057e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  2000000c  080057e9  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000c0  080057e9  000200c0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018a96  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002772  00000000  00000000  00038ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ad8  00000000  00000000  0003b248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a20  00000000  00000000  0003bd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030799  00000000  00000000  0003c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000eae6  00000000  00000000  0006ced9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00131476  00000000  00000000  0007b9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001ace35  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002bc4  00000000  00000000  001ace88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000000c 	.word	0x2000000c
 8000250:	00000000 	.word	0x00000000
 8000254:	08005670 	.word	0x08005670

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000010 	.word	0x20000010
 8000270:	08005670 	.word	0x08005670

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b980 	b.w	800059c <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ba:	4604      	mov	r4, r0
 80002bc:	4688      	mov	r8, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	f040 8084 	bne.w	80003cc <__udivmoddi4+0x118>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	4617      	mov	r7, r2
 80002c8:	d943      	bls.n	8000352 <__udivmoddi4+0x9e>
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	b142      	cbz	r2, 80002e2 <__udivmoddi4+0x2e>
 80002d0:	f1c2 0020 	rsb	r0, r2, #32
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	fa24 f000 	lsr.w	r0, r4, r0
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea40 0801 	orr.w	r8, r0, r1
 80002e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80002e6:	0c23      	lsrs	r3, r4, #16
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fbb8 f6fc 	udiv	r6, r8, ip
 80002f0:	fb0c 8116 	mls	r1, ip, r6, r8
 80002f4:	fb06 f00e 	mul.w	r0, r6, lr
 80002f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002fc:	4298      	cmp	r0, r3
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x5c>
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	f106 31ff 	add.w	r1, r6, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x5a>
 8000308:	4298      	cmp	r0, r3
 800030a:	f200 8131 	bhi.w	8000570 <__udivmoddi4+0x2bc>
 800030e:	460e      	mov	r6, r1
 8000310:	1a19      	subs	r1, r3, r0
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fc 	udiv	r0, r1, ip
 8000318:	fb0c 1110 	mls	r1, ip, r0, r1
 800031c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000320:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000324:	45a6      	cmp	lr, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x84>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x82>
 8000330:	45a6      	cmp	lr, r4
 8000332:	f200 811a 	bhi.w	800056a <__udivmoddi4+0x2b6>
 8000336:	4618      	mov	r0, r3
 8000338:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033c:	eba4 040e 	sub.w	r4, r4, lr
 8000340:	2600      	movs	r6, #0
 8000342:	b11d      	cbz	r5, 800034c <__udivmoddi4+0x98>
 8000344:	40d4      	lsrs	r4, r2
 8000346:	2300      	movs	r3, #0
 8000348:	e9c5 4300 	strd	r4, r3, [r5]
 800034c:	4631      	mov	r1, r6
 800034e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xa2>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	2a00      	cmp	r2, #0
 800035c:	d152      	bne.n	8000404 <__udivmoddi4+0x150>
 800035e:	1bcb      	subs	r3, r1, r7
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	fa1f f887 	uxth.w	r8, r7
 8000368:	2601      	movs	r6, #1
 800036a:	0c21      	lsrs	r1, r4, #16
 800036c:	fbb3 fcfe 	udiv	ip, r3, lr
 8000370:	fb0e 301c 	mls	r0, lr, ip, r3
 8000374:	fb08 f90c 	mul.w	r9, r8, ip
 8000378:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800037c:	4589      	cmp	r9, r1
 800037e:	d90b      	bls.n	8000398 <__udivmoddi4+0xe4>
 8000380:	1879      	adds	r1, r7, r1
 8000382:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000386:	bf2c      	ite	cs
 8000388:	2001      	movcs	r0, #1
 800038a:	2000      	movcc	r0, #0
 800038c:	4589      	cmp	r9, r1
 800038e:	d902      	bls.n	8000396 <__udivmoddi4+0xe2>
 8000390:	2800      	cmp	r0, #0
 8000392:	f000 80f0 	beq.w	8000576 <__udivmoddi4+0x2c2>
 8000396:	469c      	mov	ip, r3
 8000398:	eba1 0109 	sub.w	r1, r1, r9
 800039c:	b2a3      	uxth	r3, r4
 800039e:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a6:	fb08 f800 	mul.w	r8, r8, r0
 80003aa:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003ae:	45a0      	cmp	r8, r4
 80003b0:	d907      	bls.n	80003c2 <__udivmoddi4+0x10e>
 80003b2:	193c      	adds	r4, r7, r4
 80003b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b8:	d202      	bcs.n	80003c0 <__udivmoddi4+0x10c>
 80003ba:	45a0      	cmp	r8, r4
 80003bc:	f200 80d2 	bhi.w	8000564 <__udivmoddi4+0x2b0>
 80003c0:	4618      	mov	r0, r3
 80003c2:	eba4 0408 	sub.w	r4, r4, r8
 80003c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003ca:	e7ba      	b.n	8000342 <__udivmoddi4+0x8e>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x130>
 80003d0:	2d00      	cmp	r5, #0
 80003d2:	f000 80be 	beq.w	8000552 <__udivmoddi4+0x29e>
 80003d6:	2600      	movs	r6, #0
 80003d8:	e9c5 0100 	strd	r0, r1, [r5]
 80003dc:	4630      	mov	r0, r6
 80003de:	4631      	mov	r1, r6
 80003e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003e4:	fab3 f683 	clz	r6, r3
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d14d      	bne.n	8000488 <__udivmoddi4+0x1d4>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f0c0 80b3 	bcc.w	8000558 <__udivmoddi4+0x2a4>
 80003f2:	4282      	cmp	r2, r0
 80003f4:	f240 80b0 	bls.w	8000558 <__udivmoddi4+0x2a4>
 80003f8:	4630      	mov	r0, r6
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a6      	beq.n	800034c <__udivmoddi4+0x98>
 80003fe:	e9c5 4800 	strd	r4, r8, [r5]
 8000402:	e7a3      	b.n	800034c <__udivmoddi4+0x98>
 8000404:	4097      	lsls	r7, r2
 8000406:	f1c2 0320 	rsb	r3, r2, #32
 800040a:	fa01 f002 	lsl.w	r0, r1, r2
 800040e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000412:	40d9      	lsrs	r1, r3
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	fa1f f887 	uxth.w	r8, r7
 800041c:	4094      	lsls	r4, r2
 800041e:	4303      	orrs	r3, r0
 8000420:	fbb1 f0fe 	udiv	r0, r1, lr
 8000424:	0c1e      	lsrs	r6, r3, #16
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	fb00 fc08 	mul.w	ip, r0, r8
 800042e:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8000432:	458c      	cmp	ip, r1
 8000434:	d90e      	bls.n	8000454 <__udivmoddi4+0x1a0>
 8000436:	1879      	adds	r1, r7, r1
 8000438:	f100 36ff 	add.w	r6, r0, #4294967295
 800043c:	bf2c      	ite	cs
 800043e:	f04f 0901 	movcs.w	r9, #1
 8000442:	f04f 0900 	movcc.w	r9, #0
 8000446:	458c      	cmp	ip, r1
 8000448:	d903      	bls.n	8000452 <__udivmoddi4+0x19e>
 800044a:	f1b9 0f00 	cmp.w	r9, #0
 800044e:	f000 8096 	beq.w	800057e <__udivmoddi4+0x2ca>
 8000452:	4630      	mov	r0, r6
 8000454:	eba1 010c 	sub.w	r1, r1, ip
 8000458:	b29b      	uxth	r3, r3
 800045a:	fbb1 f6fe 	udiv	r6, r1, lr
 800045e:	fb0e 1116 	mls	r1, lr, r6, r1
 8000462:	fb06 fc08 	mul.w	ip, r6, r8
 8000466:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800046a:	458c      	cmp	ip, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x1ca>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f106 33ff 	add.w	r3, r6, #4294967295
 8000474:	d202      	bcs.n	800047c <__udivmoddi4+0x1c8>
 8000476:	458c      	cmp	ip, r1
 8000478:	f200 8088 	bhi.w	800058c <__udivmoddi4+0x2d8>
 800047c:	461e      	mov	r6, r3
 800047e:	eba1 030c 	sub.w	r3, r1, ip
 8000482:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000486:	e770      	b.n	800036a <__udivmoddi4+0xb6>
 8000488:	f1c6 0720 	rsb	r7, r6, #32
 800048c:	fa03 f406 	lsl.w	r4, r3, r6
 8000490:	fa02 fc06 	lsl.w	ip, r2, r6
 8000494:	fa01 fe06 	lsl.w	lr, r1, r6
 8000498:	40fa      	lsrs	r2, r7
 800049a:	fa20 f807 	lsr.w	r8, r0, r7
 800049e:	40f9      	lsrs	r1, r7
 80004a0:	fa00 f306 	lsl.w	r3, r0, r6
 80004a4:	4322      	orrs	r2, r4
 80004a6:	ea48 040e 	orr.w	r4, r8, lr
 80004aa:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80004ae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b2:	fa1f f982 	uxth.w	r9, r2
 80004b6:	fbb1 faf8 	udiv	sl, r1, r8
 80004ba:	fb08 111a 	mls	r1, r8, sl, r1
 80004be:	fb0a f009 	mul.w	r0, sl, r9
 80004c2:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 80004c6:	4570      	cmp	r0, lr
 80004c8:	d90e      	bls.n	80004e8 <__udivmoddi4+0x234>
 80004ca:	eb12 0e0e 	adds.w	lr, r2, lr
 80004ce:	f10a 31ff 	add.w	r1, sl, #4294967295
 80004d2:	bf2c      	ite	cs
 80004d4:	f04f 0b01 	movcs.w	fp, #1
 80004d8:	f04f 0b00 	movcc.w	fp, #0
 80004dc:	4570      	cmp	r0, lr
 80004de:	d902      	bls.n	80004e6 <__udivmoddi4+0x232>
 80004e0:	f1bb 0f00 	cmp.w	fp, #0
 80004e4:	d04e      	beq.n	8000584 <__udivmoddi4+0x2d0>
 80004e6:	468a      	mov	sl, r1
 80004e8:	ebae 0e00 	sub.w	lr, lr, r0
 80004ec:	b2a4      	uxth	r4, r4
 80004ee:	fbbe f0f8 	udiv	r0, lr, r8
 80004f2:	fb08 ee10 	mls	lr, r8, r0, lr
 80004f6:	fb00 f909 	mul.w	r9, r0, r9
 80004fa:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80004fe:	45f1      	cmp	r9, lr
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x25e>
 8000502:	eb12 0e0e 	adds.w	lr, r2, lr
 8000506:	f100 31ff 	add.w	r1, r0, #4294967295
 800050a:	d201      	bcs.n	8000510 <__udivmoddi4+0x25c>
 800050c:	45f1      	cmp	r9, lr
 800050e:	d840      	bhi.n	8000592 <__udivmoddi4+0x2de>
 8000510:	4608      	mov	r0, r1
 8000512:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8000516:	ebae 0e09 	sub.w	lr, lr, r9
 800051a:	fba0 890c 	umull	r8, r9, r0, ip
 800051e:	45ce      	cmp	lr, r9
 8000520:	4641      	mov	r1, r8
 8000522:	464c      	mov	r4, r9
 8000524:	d302      	bcc.n	800052c <__udivmoddi4+0x278>
 8000526:	d106      	bne.n	8000536 <__udivmoddi4+0x282>
 8000528:	4543      	cmp	r3, r8
 800052a:	d204      	bcs.n	8000536 <__udivmoddi4+0x282>
 800052c:	3801      	subs	r0, #1
 800052e:	ebb8 010c 	subs.w	r1, r8, ip
 8000532:	eb69 0402 	sbc.w	r4, r9, r2
 8000536:	b37d      	cbz	r5, 8000598 <__udivmoddi4+0x2e4>
 8000538:	1a5a      	subs	r2, r3, r1
 800053a:	eb6e 0e04 	sbc.w	lr, lr, r4
 800053e:	40f2      	lsrs	r2, r6
 8000540:	fa0e f707 	lsl.w	r7, lr, r7
 8000544:	fa2e f306 	lsr.w	r3, lr, r6
 8000548:	2600      	movs	r6, #0
 800054a:	4317      	orrs	r7, r2
 800054c:	e9c5 7300 	strd	r7, r3, [r5]
 8000550:	e6fc      	b.n	800034c <__udivmoddi4+0x98>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e6f9      	b.n	800034c <__udivmoddi4+0x98>
 8000558:	1a84      	subs	r4, r0, r2
 800055a:	eb61 0103 	sbc.w	r1, r1, r3
 800055e:	2001      	movs	r0, #1
 8000560:	4688      	mov	r8, r1
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x146>
 8000564:	3802      	subs	r0, #2
 8000566:	443c      	add	r4, r7
 8000568:	e72b      	b.n	80003c2 <__udivmoddi4+0x10e>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e6e3      	b.n	8000338 <__udivmoddi4+0x84>
 8000570:	3e02      	subs	r6, #2
 8000572:	443b      	add	r3, r7
 8000574:	e6cc      	b.n	8000310 <__udivmoddi4+0x5c>
 8000576:	f1ac 0c02 	sub.w	ip, ip, #2
 800057a:	4439      	add	r1, r7
 800057c:	e70c      	b.n	8000398 <__udivmoddi4+0xe4>
 800057e:	3802      	subs	r0, #2
 8000580:	4439      	add	r1, r7
 8000582:	e767      	b.n	8000454 <__udivmoddi4+0x1a0>
 8000584:	f1aa 0a02 	sub.w	sl, sl, #2
 8000588:	4496      	add	lr, r2
 800058a:	e7ad      	b.n	80004e8 <__udivmoddi4+0x234>
 800058c:	3e02      	subs	r6, #2
 800058e:	4439      	add	r1, r7
 8000590:	e775      	b.n	800047e <__udivmoddi4+0x1ca>
 8000592:	3802      	subs	r0, #2
 8000594:	4496      	add	lr, r2
 8000596:	e7bc      	b.n	8000512 <__udivmoddi4+0x25e>
 8000598:	462e      	mov	r6, r5
 800059a:	e6d7      	b.n	800034c <__udivmoddi4+0x98>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	4b2c      	ldr	r3, [pc, #176]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005bc:	4a2a      	ldr	r2, [pc, #168]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005c6:	4b28      	ldr	r3, [pc, #160]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005cc:	f003 0304 	and.w	r3, r3, #4
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005da:	4a23      	ldr	r2, [pc, #140]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005f8:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_GPIO_Init+0xc8>)
 8000604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UserCalibrationLED_GPIO_Port, UserCalibrationLED_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2180      	movs	r1, #128	; 0x80
 8000614:	4815      	ldr	r0, [pc, #84]	; (800066c <MX_GPIO_Init+0xcc>)
 8000616:	f000 fdb3 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButtonInterrupt_Pin;
 800061a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_GPIO_Init+0xd0>)
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(UserCalibrationButtonInterrupt_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	4619      	mov	r1, r3
 800062e:	4811      	ldr	r0, [pc, #68]	; (8000674 <MX_GPIO_Init+0xd4>)
 8000630:	f000 fbce 	bl	8000dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationLED_Pin;
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	2301      	movs	r3, #1
 800063a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UserCalibrationLED_GPIO_Port, &GPIO_InitStruct);
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	4619      	mov	r1, r3
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <MX_GPIO_Init+0xcc>)
 800064c:	f000 fbc0 	bl	8000dd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 1, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2101      	movs	r1, #1
 8000654:	2018      	movs	r0, #24
 8000656:	f000 fb86 	bl	8000d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800065a:	2018      	movs	r0, #24
 800065c:	f000 fb9d 	bl	8000d9a <HAL_NVIC_EnableIRQ>

}
 8000660:	bf00      	nop
 8000662:	3720      	adds	r7, #32
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	46020c00 	.word	0x46020c00
 800066c:	42021c00 	.word	0x42021c00
 8000670:	10110000 	.word	0x10110000
 8000674:	42020800 	.word	0x42020800

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 fa14 	bl	8000aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f806 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f7ff ff8c 	bl	80005a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000688:	f000 f934 	bl	80008f4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068c:	e7fe      	b.n	800068c <main+0x14>
	...

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09e      	sub	sp, #120	; 0x78
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0318 	add.w	r3, r7, #24
 800069a:	2260      	movs	r2, #96	; 0x60
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 ffde 	bl	8005660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
 80006b2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b4:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80006b8:	f000 fdac 	bl	8001214 <HAL_PWREx_ControlVoltageScaling>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80006c2:	f000 f88d 	bl	80007e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006c6:	2310      	movs	r3, #16
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ca:	2301      	movs	r3, #1
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006ce:	2310      	movs	r3, #16
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80006d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006dc:	2301      	movs	r3, #1
 80006de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006e8:	2350      	movs	r3, #80	; 0x50
 80006ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0318 	add.w	r3, r7, #24
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fe17 	bl	8001338 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000710:	f000 f866 	bl	80007e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	231f      	movs	r3, #31
 8000716:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2303      	movs	r3, #3
 800071a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	2104      	movs	r1, #4
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fc71 	bl	8002018 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800073c:	f000 f850 	bl	80007e0 <Error_Handler>
  }
  __HAL_RCC_PWR_CLK_DISABLE();
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <SystemClock_Config+0xc8>)
 8000742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000746:	4a04      	ldr	r2, [pc, #16]	; (8000758 <SystemClock_Config+0xc8>)
 8000748:	f023 0304 	bic.w	r3, r3, #4
 800074c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000750:	bf00      	nop
 8000752:	3778      	adds	r7, #120	; 0x78
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	46020c00 	.word	0x46020c00

0800075c <HAL_GPIO_EXTI_Rising_Callback>:
// When the button's signal goes from a low to a high state
// which is what happens when you push a button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButtonInterrupt_Pin)
 8000766:	88fb      	ldrh	r3, [r7, #6]
 8000768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800076c:	d128      	bne.n	80007c0 <HAL_GPIO_EXTI_Rising_Callback+0x64>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		uint8_t* cMessage = (uint8_t*)"";
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <HAL_GPIO_EXTI_Rising_Callback+0x6c>)
 8000770:	60fb      	str	r3, [r7, #12]

		// Turn user green LED on/off
		if(iIsUserCalibrationLEDOn == 0)
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d105      	bne.n	8000786 <HAL_GPIO_EXTI_Rising_Callback+0x2a>
		{
			iIsUserCalibrationLEDOn = 1;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 800077c:	2201      	movs	r2, #1
 800077e:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Request User Calibration Mode\n\0";
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <HAL_GPIO_EXTI_Rising_Callback+0x74>)
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	e004      	b.n	8000790 <HAL_GPIO_EXTI_Rising_Callback+0x34>
		}
		else
		{
			iIsUserCalibrationLEDOn = 0;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Unrequest User Calibration Mode\n\0";
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 800078e:	60fb      	str	r3, [r7, #12]
		}

		// Send the message via virtual COM port
		// It uses the UART1 of STLINK's virtual com port and we
		// are transmitting the serial data with this call
		uint16_t iMessageLength = (uint16_t)strlen(cMessage);
 8000790:	68f8      	ldr	r0, [r7, #12]
 8000792:	f7ff fd6f 	bl	8000274 <strlen>
 8000796:	4603      	mov	r3, r0
 8000798:	817b      	strh	r3, [r7, #10]
		if(HAL_UART_Transmit(&huart1, cMessage, iMessageLength, 100) != HAL_OK)
 800079a:	897a      	ldrh	r2, [r7, #10]
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	68f9      	ldr	r1, [r7, #12]
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 80007a2:	f004 fa69 	bl	8004c78 <HAL_UART_Transmit>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <HAL_GPIO_EXTI_Rising_Callback+0x54>
		{
			Error_Handler();
 80007ac:	f000 f818 	bl	80007e0 <Error_Handler>
		}

		HAL_GPIO_WritePin(UserCalibrationLED_GPIO_Port, UserCalibrationLED_Pin, iIsUserCalibrationLEDOn);
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	4808      	ldr	r0, [pc, #32]	; (80007dc <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 80007bc:	f000 fce0 	bl	8001180 <HAL_GPIO_WritePin>
	}
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	08005688 	.word	0x08005688
 80007cc:	20000028 	.word	0x20000028
 80007d0:	0800568c 	.word	0x0800568c
 80007d4:	080056ac 	.word	0x080056ac
 80007d8:	2000002c 	.word	0x2000002c
 80007dc:	42021c00 	.word	0x42021c00

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_MspInit+0x30>)
 80007f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007f8:	4a08      	ldr	r2, [pc, #32]	; (800081c <HAL_MspInit+0x30>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_MspInit+0x30>)
 8000804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000810:	f000 fd82 	bl	8001318 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	46020c00 	.word	0x46020c00

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086c:	f000 f980 	bl	8000b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButtonInterrupt_Pin);
 8000878:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800087c:	f000 fc98 	bl	80011b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <SystemInit+0x68>)
 800088a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088e:	4a17      	ldr	r2, [pc, #92]	; (80008ec <SystemInit+0x68>)
 8000890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <SystemInit+0x6c>)
 800089a:	2201      	movs	r2, #1
 800089c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <SystemInit+0x6c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <SystemInit+0x6c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <SystemInit+0x6c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <SystemInit+0x6c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <SystemInit+0x6c>)
 80008b6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80008ba:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80008be:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <SystemInit+0x6c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <SystemInit+0x6c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <SystemInit+0x6c>)
 80008cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <SystemInit+0x6c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <SystemInit+0x68>)
 80008da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008de:	609a      	str	r2, [r3, #8]
  #endif
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00
 80008f0:	46020c00 	.word	0x46020c00

080008f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f8:	4b22      	ldr	r3, [pc, #136]	; (8000984 <MX_USART1_UART_Init+0x90>)
 80008fa:	4a23      	ldr	r2, [pc, #140]	; (8000988 <MX_USART1_UART_Init+0x94>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <MX_USART1_UART_Init+0x90>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_USART1_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_USART1_UART_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <MX_USART1_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_USART1_UART_Init+0x90>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <MX_USART1_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_USART1_UART_Init+0x90>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_USART1_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_USART1_UART_Init+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_USART1_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800093c:	4811      	ldr	r0, [pc, #68]	; (8000984 <MX_USART1_UART_Init+0x90>)
 800093e:	f004 f94b 	bl	8004bd8 <HAL_UART_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000948:	f7ff ff4a 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094c:	2100      	movs	r1, #0
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <MX_USART1_UART_Init+0x90>)
 8000950:	f004 fd98 	bl	8005484 <HAL_UARTEx_SetTxFifoThreshold>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800095a:	f7ff ff41 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095e:	2100      	movs	r1, #0
 8000960:	4808      	ldr	r0, [pc, #32]	; (8000984 <MX_USART1_UART_Init+0x90>)
 8000962:	f004 fdcd 	bl	8005500 <HAL_UARTEx_SetRxFifoThreshold>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800096c:	f7ff ff38 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_USART1_UART_Init+0x90>)
 8000972:	f004 fd4e 	bl	8005412 <HAL_UARTEx_DisableFifoMode>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800097c:	f7ff ff30 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000002c 	.word	0x2000002c
 8000988:	40013800 	.word	0x40013800

0800098c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b0ba      	sub	sp, #232	; 0xe8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	22c0      	movs	r2, #192	; 0xc0
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f004 fe57 	bl	8005660 <memset>
  if(uartHandle->Instance==USART1)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <HAL_UART_MspInit+0xbc>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d141      	bne.n	8000a40 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009bc:	2301      	movs	r3, #1
 80009be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009c0:	2300      	movs	r3, #0
 80009c2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 fe6b 	bl	80026a4 <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009d4:	f7ff ff04 	bl	80007e0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <HAL_UART_MspInit+0xc0>)
 80009da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80009de:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <HAL_UART_MspInit+0xc0>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_UART_MspInit+0xc0>)
 80009ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80009ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_UART_MspInit+0xc0>)
 80009f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009fc:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <HAL_UART_MspInit+0xc0>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_UART_MspInit+0xc0>)
 8000a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000a14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a2e:	2307      	movs	r3, #7
 8000a30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <HAL_UART_MspInit+0xc4>)
 8000a3c:	f000 f9c8 	bl	8000dd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a40:	bf00      	nop
 8000a42:	37e8      	adds	r7, #232	; 0xe8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40013800 	.word	0x40013800
 8000a4c:	46020c00 	.word	0x46020c00
 8000a50:	42020000 	.word	0x42020000

08000a54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a5a:	e003      	b.n	8000a64 <LoopCopyDataInit>

08000a5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a62:	3104      	adds	r1, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a6c:	d3f6      	bcc.n	8000a5c <CopyDataInit>
	ldr	r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a70:	e002      	b.n	8000a78 <LoopFillZerobss>

08000a72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a74:	f842 3b04 	str.w	r3, [r2], #4

08000a78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <LoopForever+0x16>)
	cmp	r2, r3
 8000a7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a7c:	d3f9      	bcc.n	8000a72 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a7e:	f7ff ff01 	bl	8000884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f004 fdc9 	bl	8005618 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a86:	f7ff fdf7 	bl	8000678 <main>

08000a8a <LoopForever>:

LoopForever:
    b LoopForever
 8000a8a:	e7fe      	b.n	8000a8a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000a8c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000a90:	080057e0 	.word	0x080057e0
	ldr	r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a98:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000a9c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000aa0:	200000c0 	.word	0x200000c0

08000aa4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC1_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_Init+0x4c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <HAL_Init+0x4c>)
 8000ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f949 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000abe:	f001 fc0d 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_Init+0x50>)
 8000ac6:	6a1b      	ldr	r3, [r3, #32]
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	490b      	ldr	r1, [pc, #44]	; (8000afc <HAL_Init+0x54>)
 8000ace:	5ccb      	ldrb	r3, [r1, r3]
 8000ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_Init+0x58>)
 8000ad6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ad8:	200f      	movs	r0, #15
 8000ada:	f000 f813 	bl	8000b04 <HAL_InitTick>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e002      	b.n	8000aee <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae8:	f7ff fe80 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40022000 	.word	0x40022000
 8000af8:	46020c00 	.word	0x46020c00
 8000afc:	080056d0 	.word	0x080056d0
 8000b00:	20000000 	.word	0x20000000

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_InitTick+0x60>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d101      	bne.n	8000b18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e021      	b.n	8000b5c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <HAL_InitTick+0x64>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_InitTick+0x60>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f941 	bl	8000db6 <HAL_SYSTICK_Config>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00e      	b.n	8000b5c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d80a      	bhi.n	8000b5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f000 f90b 	bl	8000d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <HAL_InitTick+0x68>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	200000bc 	.word	0x200000bc

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200000bc 	.word	0x200000bc

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4907      	ldr	r1, [pc, #28]	; (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	; (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	; 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff8e 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff29 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff40 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff90 	bl	8000ca4 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5f 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff33 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffa4 	bl	8000d0c <SysTick_Config>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000de2:	e1ba      	b.n	800115a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	2101      	movs	r1, #1
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	4013      	ands	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 81aa 	beq.w	8001154 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a55      	ldr	r2, [pc, #340]	; (8000f58 <HAL_GPIO_Init+0x188>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d15d      	bne.n	8000ec4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69fa      	ldr	r2, [r7, #28]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0201 	and.w	r2, r3, #1
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69fa      	ldr	r2, [r7, #28]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69fa      	ldr	r2, [r7, #28]
 8000e36:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000e38:	4a48      	ldr	r2, [pc, #288]	; (8000f5c <HAL_GPIO_Init+0x18c>)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e40:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000e42:	4a46      	ldr	r2, [pc, #280]	; (8000f5c <HAL_GPIO_Init+0x18c>)
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	4413      	add	r3, r2
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	08da      	lsrs	r2, r3, #3
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	3208      	adds	r2, #8
 8000e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69fa      	ldr	r2, [r7, #28]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	220b      	movs	r2, #11
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69fa      	ldr	r2, [r7, #28]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	08da      	lsrs	r2, r3, #3
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	3208      	adds	r2, #8
 8000e8e:	69f9      	ldr	r1, [r7, #28]
 8000e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	69fa      	ldr	r2, [r7, #28]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	69fa      	ldr	r2, [r7, #28]
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e067      	b.n	8000f94 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x104>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b12      	cmp	r3, #18
 8000ed2:	d145      	bne.n	8000f60 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	f003 020f 	and.w	r2, r3, #15
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69fa      	ldr	r2, [r7, #28]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3208      	adds	r2, #8
 8000f1a:	69f9      	ldr	r1, [r7, #28]
 8000f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69fa      	ldr	r2, [r7, #28]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0203 	and.w	r2, r3, #3
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	69fa      	ldr	r2, [r7, #28]
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e01e      	b.n	8000f94 <HAL_GPIO_Init+0x1c4>
 8000f56:	bf00      	nop
 8000f58:	46020000 	.word	0x46020000
 8000f5c:	08005728 	.word	0x08005728
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69fa      	ldr	r2, [r7, #28]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0203 	and.w	r2, r3, #3
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	69fa      	ldr	r2, [r7, #28]
 8000f92:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d00b      	beq.n	8000fb4 <HAL_GPIO_Init+0x1e4>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d007      	beq.n	8000fb4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa8:	2b11      	cmp	r3, #17
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b12      	cmp	r3, #18
 8000fb2:	d130      	bne.n	8001016 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69fa      	ldr	r2, [r7, #28]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000fea:	2201      	movs	r2, #1
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69fa      	ldr	r2, [r7, #28]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	091b      	lsrs	r3, r3, #4
 8001000:	f003 0201 	and.w	r2, r3, #1
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69fa      	ldr	r2, [r7, #28]
 800100c:	4313      	orrs	r3, r2
 800100e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b03      	cmp	r3, #3
 800101c:	d017      	beq.n	800104e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	4013      	ands	r3, r2
 8001034:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69fa      	ldr	r2, [r7, #28]
 8001044:	4313      	orrs	r3, r2
 8001046:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d07c      	beq.n	8001154 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800105a:	4a47      	ldr	r2, [pc, #284]	; (8001178 <HAL_GPIO_Init+0x3a8>)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3318      	adds	r3, #24
 8001062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001066:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	220f      	movs	r2, #15
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	4013      	ands	r3, r2
 800107c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	0a9a      	lsrs	r2, r3, #10
 8001082:	4b3e      	ldr	r3, [pc, #248]	; (800117c <HAL_GPIO_Init+0x3ac>)
 8001084:	4013      	ands	r3, r2
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	f002 0203 	and.w	r2, r2, #3
 800108c:	00d2      	lsls	r2, r2, #3
 800108e:	4093      	lsls	r3, r2
 8001090:	69fa      	ldr	r2, [r7, #28]
 8001092:	4313      	orrs	r3, r2
 8001094:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001096:	4938      	ldr	r1, [pc, #224]	; (8001178 <HAL_GPIO_Init+0x3a8>)
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3318      	adds	r3, #24
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80010a4:	4b34      	ldr	r3, [pc, #208]	; (8001178 <HAL_GPIO_Init+0x3a8>)
 80010a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x2fa>
        {
          tmp |= iocurrent;
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80010ca:	4a2b      	ldr	r2, [pc, #172]	; (8001178 <HAL_GPIO_Init+0x3a8>)
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        tmp = EXTI->EMR1;
 80010d2:	4b29      	ldr	r3, [pc, #164]	; (8001178 <HAL_GPIO_Init+0x3a8>)
 80010d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x328>
        {
          tmp |= iocurrent;
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80010f8:	4a1f      	ldr	r2, [pc, #124]	; (8001178 <HAL_GPIO_Init+0x3a8>)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_GPIO_Init+0x3a8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	69fa      	ldr	r2, [r7, #28]
 800110c:	4013      	ands	r3, r2
 800110e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x354>
        {
          tmp |= iocurrent;
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <HAL_GPIO_Init+0x3a8>)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <HAL_GPIO_Init+0x3a8>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	4013      	ands	r3, r2
 8001138:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x37e>
        {
          tmp |= iocurrent;
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_GPIO_Init+0x3a8>)
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	6053      	str	r3, [r2, #4]
      }
    }
    position++;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	f47f ae3d 	bne.w	8000de4 <HAL_GPIO_Init+0x14>
  }
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	3724      	adds	r7, #36	; 0x24
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	46022000 	.word	0x46022000
 800117c:	002f7f7f 	.word	0x002f7f7f

08001180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80011c6:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fac4 	bl	800075c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	4013      	ands	r3, r2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80011e0:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f807 	bl	80011fc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	46022000 	.word	0x46022000

080011fc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800121c:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800121e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001224:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	d101      	bne.n	8001232 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e057      	b.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001238:	d90a      	bls.n	8001250 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4313      	orrs	r3, r2
 8001246:	4a2a      	ldr	r2, [pc, #168]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800124c:	60d3      	str	r3, [r2, #12]
 800124e:	e007      	b.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001250:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001258:	4925      	ldr	r1, [pc, #148]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4313      	orrs	r3, r2
 800125e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is rised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a24      	ldr	r2, [pc, #144]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	099b      	lsrs	r3, r3, #6
 800126c:	2232      	movs	r2, #50	; 0x32
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	099b      	lsrs	r3, r3, #6
 800127a:	3301      	adds	r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800127e:	e002      	b.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3b01      	subs	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d102      	bne.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x84>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f3      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d01b      	beq.n	80012d6 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is rised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	099b      	lsrs	r3, r3, #6
 80012aa:	2232      	movs	r2, #50	; 0x32
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	099b      	lsrs	r3, r3, #6
 80012b8:	3301      	adds	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80012bc:	e002      	b.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80012c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <HAL_PWREx_ControlVoltageScaling+0xc2>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f3      	bne.n	80012be <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e000      	b.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	46020800 	.word	0x46020800
 80012f4:	20000000 	.word	0x20000000
 80012f8:	10624dd3 	.word	0x10624dd3

080012fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <HAL_PWREx_GetVoltageRange+0x18>)
 8001302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001304:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	46020800 	.word	0x46020800

08001318 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	46020800 	.word	0x46020800

08001338 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	; 0x30
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	f000 be58 	b.w	8002002 <HAL_RCC_OscConfig+0xcca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001352:	4ba2      	ldr	r3, [pc, #648]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800135c:	4b9f      	ldr	r3, [pc, #636]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 800135e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	627b      	str	r3, [r7, #36]	; 0x24

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 816f 	beq.w	8001652 <HAL_RCC_OscConfig+0x31a>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001376:	2b00      	cmp	r3, #0
 8001378:	d007      	beq.n	800138a <HAL_RCC_OscConfig+0x52>
 800137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137c:	2b0c      	cmp	r3, #12
 800137e:	f040 80e1 	bne.w	8001544 <HAL_RCC_OscConfig+0x20c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	2b01      	cmp	r3, #1
 8001386:	f040 80dd 	bne.w	8001544 <HAL_RCC_OscConfig+0x20c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800138a:	4b94      	ldr	r3, [pc, #592]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	2b00      	cmp	r3, #0
 8001394:	d006      	beq.n	80013a4 <HAL_RCC_OscConfig+0x6c>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d102      	bne.n	80013a4 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	f000 be2f 	b.w	8002002 <HAL_RCC_OscConfig+0xcca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a8:	4b8c      	ldr	r3, [pc, #560]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d004      	beq.n	80013be <HAL_RCC_OscConfig+0x86>
 80013b4:	4b89      	ldr	r3, [pc, #548]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80013bc:	e005      	b.n	80013ca <HAL_RCC_OscConfig+0x92>
 80013be:	4b87      	ldr	r3, [pc, #540]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80013c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013c4:	041b      	lsls	r3, r3, #16
 80013c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d255      	bcs.n	800147a <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10a      	bne.n	80013ea <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 f8dd 	bl	8002598 <RCC_SetFlashLatencyFromMSIRange>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d002      	beq.n	80013ea <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	f000 be0c 	b.w	8002002 <HAL_RCC_OscConfig+0xcca>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80013ea:	4b7c      	ldr	r3, [pc, #496]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	4a7b      	ldr	r2, [pc, #492]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80013f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013f4:	6093      	str	r3, [r2, #8]
 80013f6:	4b79      	ldr	r3, [pc, #484]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	4976      	ldr	r1, [pc, #472]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001404:	4313      	orrs	r3, r2
 8001406:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001410:	d309      	bcc.n	8001426 <HAL_RCC_OscConfig+0xee>
 8001412:	4b72      	ldr	r3, [pc, #456]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f023 021f 	bic.w	r2, r3, #31
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	496f      	ldr	r1, [pc, #444]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001420:	4313      	orrs	r3, r2
 8001422:	60cb      	str	r3, [r1, #12]
 8001424:	e07e      	b.n	8001524 <HAL_RCC_OscConfig+0x1ec>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	2b00      	cmp	r3, #0
 800142c:	da0a      	bge.n	8001444 <HAL_RCC_OscConfig+0x10c>
 800142e:	4b6b      	ldr	r3, [pc, #428]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	015b      	lsls	r3, r3, #5
 800143c:	4967      	ldr	r1, [pc, #412]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 800143e:	4313      	orrs	r3, r2
 8001440:	60cb      	str	r3, [r1, #12]
 8001442:	e06f      	b.n	8001524 <HAL_RCC_OscConfig+0x1ec>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800144c:	d30a      	bcc.n	8001464 <HAL_RCC_OscConfig+0x12c>
 800144e:	4b63      	ldr	r3, [pc, #396]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	029b      	lsls	r3, r3, #10
 800145c:	495f      	ldr	r1, [pc, #380]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 800145e:	4313      	orrs	r3, r2
 8001460:	60cb      	str	r3, [r1, #12]
 8001462:	e05f      	b.n	8001524 <HAL_RCC_OscConfig+0x1ec>
 8001464:	4b5d      	ldr	r3, [pc, #372]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	03db      	lsls	r3, r3, #15
 8001472:	495a      	ldr	r1, [pc, #360]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001474:	4313      	orrs	r3, r2
 8001476:	60cb      	str	r3, [r1, #12]
 8001478:	e054      	b.n	8001524 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800147a:	4b58      	ldr	r3, [pc, #352]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	4a57      	ldr	r2, [pc, #348]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001480:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001484:	6093      	str	r3, [r2, #8]
 8001486:	4b55      	ldr	r3, [pc, #340]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	4952      	ldr	r1, [pc, #328]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001494:	4313      	orrs	r3, r2
 8001496:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80014a0:	d309      	bcc.n	80014b6 <HAL_RCC_OscConfig+0x17e>
 80014a2:	4b4e      	ldr	r3, [pc, #312]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	f023 021f 	bic.w	r2, r3, #31
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	494b      	ldr	r1, [pc, #300]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	60cb      	str	r3, [r1, #12]
 80014b4:	e028      	b.n	8001508 <HAL_RCC_OscConfig+0x1d0>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	da0a      	bge.n	80014d4 <HAL_RCC_OscConfig+0x19c>
 80014be:	4b47      	ldr	r3, [pc, #284]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	015b      	lsls	r3, r3, #5
 80014cc:	4943      	ldr	r1, [pc, #268]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	60cb      	str	r3, [r1, #12]
 80014d2:	e019      	b.n	8001508 <HAL_RCC_OscConfig+0x1d0>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014dc:	d30a      	bcc.n	80014f4 <HAL_RCC_OscConfig+0x1bc>
 80014de:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	029b      	lsls	r3, r3, #10
 80014ec:	493b      	ldr	r1, [pc, #236]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	60cb      	str	r3, [r1, #12]
 80014f2:	e009      	b.n	8001508 <HAL_RCC_OscConfig+0x1d0>
 80014f4:	4b39      	ldr	r3, [pc, #228]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	03db      	lsls	r3, r3, #15
 8001502:	4936      	ldr	r1, [pc, #216]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001504:	4313      	orrs	r3, r2
 8001506:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10a      	bne.n	8001524 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	4618      	mov	r0, r3
 8001514:	f001 f840 	bl	8002598 <RCC_SetFlashLatencyFromMSIRange>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	f000 bd6f 	b.w	8002002 <HAL_RCC_OscConfig+0xcca>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001524:	f000 ffe2 	bl	80024ec <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001528:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <HAL_RCC_OscConfig+0x2a8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fae9 	bl	8000b04 <HAL_InitTick>
 8001532:	4603      	mov	r3, r0
 8001534:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK)
 8001536:	7ffb      	ldrb	r3, [r7, #31]
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 8089 	beq.w	8001650 <HAL_RCC_OscConfig+0x318>
        {
          return status;
 800153e:	7ffb      	ldrb	r3, [r7, #31]
 8001540:	f000 bd5f 	b.w	8002002 <HAL_RCC_OscConfig+0xcca>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d066      	beq.n	800161a <HAL_RCC_OscConfig+0x2e2>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a22      	ldr	r2, [pc, #136]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001558:	f7ff fb1e 	bl	8000b98 <HAL_GetTick>
 800155c:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800155e:	e009      	b.n	8001574 <HAL_RCC_OscConfig+0x23c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001560:	f7ff fb1a 	bl	8000b98 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	6a3b      	ldr	r3, [r7, #32]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d902      	bls.n	8001574 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	f000 bd47 	b.w	8002002 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0ef      	beq.n	8001560 <HAL_RCC_OscConfig+0x228>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4a15      	ldr	r2, [pc, #84]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001586:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800158a:	6093      	str	r3, [r2, #8]
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	4910      	ldr	r1, [pc, #64]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 800159a:	4313      	orrs	r3, r2
 800159c:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80015a6:	d309      	bcc.n	80015bc <HAL_RCC_OscConfig+0x284>
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f023 021f 	bic.w	r2, r3, #31
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4909      	ldr	r1, [pc, #36]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	60cb      	str	r3, [r1, #12]
 80015ba:	e04a      	b.n	8001652 <HAL_RCC_OscConfig+0x31a>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	da0f      	bge.n	80015e4 <HAL_RCC_OscConfig+0x2ac>
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	015b      	lsls	r3, r3, #5
 80015d2:	4902      	ldr	r1, [pc, #8]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60cb      	str	r3, [r1, #12]
 80015d8:	e03b      	b.n	8001652 <HAL_RCC_OscConfig+0x31a>
 80015da:	bf00      	nop
 80015dc:	46020c00 	.word	0x46020c00
 80015e0:	20000004 	.word	0x20000004
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ec:	d30a      	bcc.n	8001604 <HAL_RCC_OscConfig+0x2cc>
 80015ee:	4b94      	ldr	r3, [pc, #592]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	029b      	lsls	r3, r3, #10
 80015fc:	4990      	ldr	r1, [pc, #576]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	60cb      	str	r3, [r1, #12]
 8001602:	e026      	b.n	8001652 <HAL_RCC_OscConfig+0x31a>
 8001604:	4b8e      	ldr	r3, [pc, #568]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	03db      	lsls	r3, r3, #15
 8001612:	498b      	ldr	r1, [pc, #556]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 8001614:	4313      	orrs	r3, r2
 8001616:	60cb      	str	r3, [r1, #12]
 8001618:	e01b      	b.n	8001652 <HAL_RCC_OscConfig+0x31a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800161a:	4b89      	ldr	r3, [pc, #548]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a88      	ldr	r2, [pc, #544]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001626:	f7ff fab7 	bl	8000b98 <HAL_GetTick>
 800162a:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800162c:	e009      	b.n	8001642 <HAL_RCC_OscConfig+0x30a>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800162e:	f7ff fab3 	bl	8000b98 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d902      	bls.n	8001642 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	f000 bce0 	b.w	8002002 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001642:	4b7f      	ldr	r3, [pc, #508]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1ef      	bne.n	800162e <HAL_RCC_OscConfig+0x2f6>
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x31a>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001650:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 808d 	beq.w	800177a <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001662:	2b08      	cmp	r3, #8
 8001664:	d005      	beq.n	8001672 <HAL_RCC_OscConfig+0x33a>
 8001666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001668:	2b0c      	cmp	r3, #12
 800166a:	d10f      	bne.n	800168c <HAL_RCC_OscConfig+0x354>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	2b03      	cmp	r3, #3
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x354>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001672:	4b73      	ldr	r3, [pc, #460]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d07c      	beq.n	8001778 <HAL_RCC_OscConfig+0x440>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d178      	bne.n	8001778 <HAL_RCC_OscConfig+0x440>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	f000 bcbb 	b.w	8002002 <HAL_RCC_OscConfig+0xcca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001694:	d106      	bne.n	80016a4 <HAL_RCC_OscConfig+0x36c>
 8001696:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a69      	ldr	r2, [pc, #420]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e03b      	b.n	800171c <HAL_RCC_OscConfig+0x3e4>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ac:	d112      	bne.n	80016d4 <HAL_RCC_OscConfig+0x39c>
 80016ae:	4b64      	ldr	r3, [pc, #400]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a63      	ldr	r2, [pc, #396]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80016b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b61      	ldr	r3, [pc, #388]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a60      	ldr	r2, [pc, #384]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80016c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	4b5e      	ldr	r3, [pc, #376]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a5d      	ldr	r2, [pc, #372]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80016cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e023      	b.n	800171c <HAL_RCC_OscConfig+0x3e4>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80016dc:	d112      	bne.n	8001704 <HAL_RCC_OscConfig+0x3cc>
 80016de:	4b58      	ldr	r3, [pc, #352]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a57      	ldr	r2, [pc, #348]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80016e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b55      	ldr	r3, [pc, #340]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a54      	ldr	r2, [pc, #336]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80016f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b52      	ldr	r3, [pc, #328]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a51      	ldr	r2, [pc, #324]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e00b      	b.n	800171c <HAL_RCC_OscConfig+0x3e4>
 8001704:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a4d      	ldr	r2, [pc, #308]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 800170a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b4b      	ldr	r3, [pc, #300]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a4a      	ldr	r2, [pc, #296]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 8001716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800171a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d014      	beq.n	800174e <HAL_RCC_OscConfig+0x416>
      {
        tickstart = HAL_GetTick();
 8001724:	f7ff fa38 	bl	8000b98 <HAL_GetTick>
 8001728:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800172a:	e009      	b.n	8001740 <HAL_RCC_OscConfig+0x408>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fa34 	bl	8000b98 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	; 0x64
 8001738:	d902      	bls.n	8001740 <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	f000 bc61 	b.w	8002002 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001740:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0ef      	beq.n	800172c <HAL_RCC_OscConfig+0x3f4>
 800174c:	e015      	b.n	800177a <HAL_RCC_OscConfig+0x442>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800174e:	f7ff fa23 	bl	8000b98 <HAL_GetTick>
 8001752:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001754:	e009      	b.n	800176a <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001756:	f7ff fa1f 	bl	8000b98 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b64      	cmp	r3, #100	; 0x64
 8001762:	d902      	bls.n	800176a <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	f000 bc4c 	b.w	8002002 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800176a:	4b35      	ldr	r3, [pc, #212]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ef      	bne.n	8001756 <HAL_RCC_OscConfig+0x41e>
 8001776:	e000      	b.n	800177a <HAL_RCC_OscConfig+0x442>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d064      	beq.n	8001850 <HAL_RCC_OscConfig+0x518>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001788:	2b04      	cmp	r3, #4
 800178a:	d005      	beq.n	8001798 <HAL_RCC_OscConfig+0x460>
 800178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d11a      	bne.n	80017c8 <HAL_RCC_OscConfig+0x490>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	2b02      	cmp	r3, #2
 8001796:	d117      	bne.n	80017c8 <HAL_RCC_OscConfig+0x490>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001798:	4b29      	ldr	r3, [pc, #164]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d006      	beq.n	80017b2 <HAL_RCC_OscConfig+0x47a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <HAL_RCC_OscConfig+0x47a>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	f000 bc28 	b.w	8002002 <HAL_RCC_OscConfig+0xcca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80017b2:	4b23      	ldr	r3, [pc, #140]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	041b      	lsls	r3, r3, #16
 80017c0:	491f      	ldr	r1, [pc, #124]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c6:	e043      	b.n	8001850 <HAL_RCC_OscConfig+0x518>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d024      	beq.n	800181a <HAL_RCC_OscConfig+0x4e2>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1a      	ldr	r2, [pc, #104]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017da:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80017dc:	f7ff f9dc 	bl	8000b98 <HAL_GetTick>
 80017e0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e2:	e009      	b.n	80017f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e4:	f7ff f9d8 	bl	8000b98 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d902      	bls.n	80017f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	f000 bc05 	b.w	8002002 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0ef      	beq.n	80017e4 <HAL_RCC_OscConfig+0x4ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	041b      	lsls	r3, r3, #16
 8001812:	490b      	ldr	r1, [pc, #44]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 8001814:	4313      	orrs	r3, r2
 8001816:	610b      	str	r3, [r1, #16]
 8001818:	e01a      	b.n	8001850 <HAL_RCC_OscConfig+0x518>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a08      	ldr	r2, [pc, #32]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 8001820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001826:	f7ff f9b7 	bl	8000b98 <HAL_GetTick>
 800182a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800182c:	e00a      	b.n	8001844 <HAL_RCC_OscConfig+0x50c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182e:	f7ff f9b3 	bl	8000b98 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d903      	bls.n	8001844 <HAL_RCC_OscConfig+0x50c>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e3e0      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
 8001840:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001844:	4baf      	ldr	r3, [pc, #700]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1ee      	bne.n	800182e <HAL_RCC_OscConfig+0x4f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80c7 	beq.w	80019ec <HAL_RCC_OscConfig+0x6b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001864:	4ba7      	ldr	r3, [pc, #668]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	d111      	bne.n	8001896 <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	4ba4      	ldr	r3, [pc, #656]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001878:	4aa2      	ldr	r2, [pc, #648]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001882:	4ba0      	ldr	r3, [pc, #640]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001890:	2301      	movs	r3, #1
 8001892:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001896:	4b9c      	ldr	r3, [pc, #624]	; (8001b08 <HAL_RCC_OscConfig+0x7d0>)
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d118      	bne.n	80018d4 <HAL_RCC_OscConfig+0x59c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80018a2:	4b99      	ldr	r3, [pc, #612]	; (8001b08 <HAL_RCC_OscConfig+0x7d0>)
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	4a98      	ldr	r2, [pc, #608]	; (8001b08 <HAL_RCC_OscConfig+0x7d0>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ae:	f7ff f973 	bl	8000b98 <HAL_GetTick>
 80018b2:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x590>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b6:	f7ff f96f 	bl	8000b98 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x590>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e39c      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018c8:	4b8f      	ldr	r3, [pc, #572]	; (8001b08 <HAL_RCC_OscConfig+0x7d0>)
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x57e>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d05f      	beq.n	800199c <HAL_RCC_OscConfig+0x664>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80018dc:	4b89      	ldr	r3, [pc, #548]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 80018de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018e2:	61bb      	str	r3, [r7, #24]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699a      	ldr	r2, [r3, #24]
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d037      	beq.n	8001962 <HAL_RCC_OscConfig+0x62a>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <HAL_RCC_OscConfig+0x5d2>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_OscConfig+0x5d2>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e37b      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d01b      	beq.n	800194c <HAL_RCC_OscConfig+0x614>
        {
          __HAL_RCC_LSI_DISABLE();
 8001914:	4b7b      	ldr	r3, [pc, #492]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800191a:	4a7a      	ldr	r2, [pc, #488]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 800191c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001920:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001924:	f7ff f938 	bl	8000b98 <HAL_GetTick>
 8001928:	6238      	str	r0, [r7, #32]

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x606>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192c:	f7ff f934 	bl	8000b98 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x606>
            {
              return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e361      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800193e:	4b71      	ldr	r3, [pc, #452]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1ef      	bne.n	800192c <HAL_RCC_OscConfig+0x5f4>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800194c:	4b6d      	ldr	r3, [pc, #436]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 800194e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001952:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	496a      	ldr	r1, [pc, #424]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 800195c:	4313      	orrs	r3, r2
 800195e:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001962:	4b68      	ldr	r3, [pc, #416]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001968:	4a66      	ldr	r2, [pc, #408]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 800196a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800196e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001972:	f7ff f911 	bl	8000b98 <HAL_GetTick>
 8001976:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x654>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197a:	f7ff f90d 	bl	8000b98 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x654>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e33a      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800198c:	4b5d      	ldr	r3, [pc, #372]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 800198e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001992:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0ef      	beq.n	800197a <HAL_RCC_OscConfig+0x642>
 800199a:	e01b      	b.n	80019d4 <HAL_RCC_OscConfig+0x69c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800199c:	4b59      	ldr	r3, [pc, #356]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 800199e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019a2:	4a58      	ldr	r2, [pc, #352]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 80019a4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80019a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80019ac:	f7ff f8f4 	bl	8000b98 <HAL_GetTick>
 80019b0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x68e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b4:	f7ff f8f0 	bl	8000b98 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x68e>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e31d      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80019c6:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 80019c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1ef      	bne.n	80019b4 <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d107      	bne.n	80019ec <HAL_RCC_OscConfig+0x6b4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019dc:	4b49      	ldr	r3, [pc, #292]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 80019de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e2:	4a48      	ldr	r2, [pc, #288]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 8112 	beq.w	8001c1e <HAL_RCC_OscConfig+0x8e6>
  {
    FlagStatus pwrclkchanged = RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a00:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d111      	bne.n	8001a32 <HAL_RCC_OscConfig+0x6fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a14:	4a3b      	ldr	r2, [pc, #236]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001a1e:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001a32:	4b35      	ldr	r3, [pc, #212]	; (8001b08 <HAL_RCC_OscConfig+0x7d0>)
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d118      	bne.n	8001a70 <HAL_RCC_OscConfig+0x738>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001a3e:	4b32      	ldr	r3, [pc, #200]	; (8001b08 <HAL_RCC_OscConfig+0x7d0>)
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	4a31      	ldr	r2, [pc, #196]	; (8001b08 <HAL_RCC_OscConfig+0x7d0>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff f8a5 	bl	8000b98 <HAL_GetTick>
 8001a4e:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x72c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a52:	f7ff f8a1 	bl	8000b98 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x72c>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e2ce      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001a64:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <HAL_RCC_OscConfig+0x7d0>)
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01f      	beq.n	8001abc <HAL_RCC_OscConfig+0x784>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d010      	beq.n	8001aaa <HAL_RCC_OscConfig+0x772>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001a8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a8e:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a9e:	4a19      	ldr	r2, [pc, #100]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001aa8:	e018      	b.n	8001adc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ab0:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001aba:	e00f      	b.n	8001adc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001abe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ac2:	4a10      	ldr	r2, [pc, #64]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ad2:	4a0c      	ldr	r2, [pc, #48]	; (8001b04 <HAL_RCC_OscConfig+0x7cc>)
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d058      	beq.n	8001b96 <HAL_RCC_OscConfig+0x85e>
    {
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f858 	bl	8000b98 <HAL_GetTick>
 8001ae8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aea:	e00f      	b.n	8001b0c <HAL_RCC_OscConfig+0x7d4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aec:	f7ff f854 	bl	8000b98 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d906      	bls.n	8001b0c <HAL_RCC_OscConfig+0x7d4>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e27f      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
 8001b02:	bf00      	nop
 8001b04:	46020c00 	.word	0x46020c00
 8001b08:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0c:	4ba4      	ldr	r3, [pc, #656]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0e8      	beq.n	8001aec <HAL_RCC_OscConfig+0x7b4>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01b      	beq.n	8001b5e <HAL_RCC_OscConfig+0x826>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b26:	4b9e      	ldr	r3, [pc, #632]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b2c:	4a9c      	ldr	r2, [pc, #624]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_OscConfig+0x816>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b38:	f7ff f82e 	bl	8000b98 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x816>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e259      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b4e:	4b94      	ldr	r3, [pc, #592]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ed      	beq.n	8001b38 <HAL_RCC_OscConfig+0x800>
 8001b5c:	e053      	b.n	8001c06 <HAL_RCC_OscConfig+0x8ce>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b5e:	4b90      	ldr	r3, [pc, #576]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b64:	4a8e      	ldr	r2, [pc, #568]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_OscConfig+0x84e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b70:	f7ff f812 	bl	8000b98 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x84e>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e23d      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b86:	4b86      	ldr	r3, [pc, #536]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1ed      	bne.n	8001b70 <HAL_RCC_OscConfig+0x838>
 8001b94:	e037      	b.n	8001c06 <HAL_RCC_OscConfig+0x8ce>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001b96:	f7fe ffff 	bl	8000b98 <HAL_GetTick>
 8001b9a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x87c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7fe fffb 	bl	8000b98 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x87c>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e226      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bb4:	4b7a      	ldr	r3, [pc, #488]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001bb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1ed      	bne.n	8001b9e <HAL_RCC_OscConfig+0x866>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001bc2:	4b77      	ldr	r3, [pc, #476]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d01a      	beq.n	8001c06 <HAL_RCC_OscConfig+0x8ce>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001bd0:	4b73      	ldr	r3, [pc, #460]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd6:	4a72      	ldr	r2, [pc, #456]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bdc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001be0:	e00a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x8c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be2:	f7fe ffd9 	bl	8000b98 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x8c0>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e204      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bf8:	4b69      	ldr	r3, [pc, #420]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001bfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1ed      	bne.n	8001be2 <HAL_RCC_OscConfig+0x8aa>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_OscConfig+0x8e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0e:	4b64      	ldr	r3, [pc, #400]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c14:	4a62      	ldr	r2, [pc, #392]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001c16:	f023 0304 	bic.w	r3, r3, #4
 8001c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d036      	beq.n	8001c98 <HAL_RCC_OscConfig+0x960>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d019      	beq.n	8001c66 <HAL_RCC_OscConfig+0x92e>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001c32:	4b5b      	ldr	r3, [pc, #364]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a5a      	ldr	r2, [pc, #360]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001c38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c3c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001c3e:	f7fe ffab 	bl	8000b98 <HAL_GetTick>
 8001c42:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x920>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c46:	f7fe ffa7 	bl	8000b98 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x920>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e1d4      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001c58:	4b51      	ldr	r3, [pc, #324]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x90e>
 8001c64:	e018      	b.n	8001c98 <HAL_RCC_OscConfig+0x960>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001c66:	4b4e      	ldr	r3, [pc, #312]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a4d      	ldr	r2, [pc, #308]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c70:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001c72:	f7fe ff91 	bl	8000b98 <HAL_GetTick>
 8001c76:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x954>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c7a:	f7fe ff8d 	bl	8000b98 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x954>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e1ba      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001c8c:	4b44      	ldr	r3, [pc, #272]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x942>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d036      	beq.n	8001d12 <HAL_RCC_OscConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d019      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x9a8>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001cac:	4b3c      	ldr	r3, [pc, #240]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a3b      	ldr	r2, [pc, #236]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001cb8:	f7fe ff6e 	bl	8000b98 <HAL_GetTick>
 8001cbc:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x99a>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001cc0:	f7fe ff6a 	bl	8000b98 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x99a>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e197      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001cd2:	4b33      	ldr	r3, [pc, #204]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x988>
 8001cde:	e018      	b.n	8001d12 <HAL_RCC_OscConfig+0x9da>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001ce0:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a2e      	ldr	r2, [pc, #184]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001cec:	f7fe ff54 	bl	8000b98 <HAL_GetTick>
 8001cf0:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x9ce>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001cf4:	f7fe ff50 	bl	8000b98 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e17d      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x9bc>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d07f      	beq.n	8001e1e <HAL_RCC_OscConfig+0xae6>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d062      	beq.n	8001dec <HAL_RCC_OscConfig+0xab4>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001d2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d30:	6093      	str	r3, [r2, #8]
 8001d32:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3e:	4918      	ldr	r1, [pc, #96]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001d4c:	d309      	bcc.n	8001d62 <HAL_RCC_OscConfig+0xa2a>
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f023 021f 	bic.w	r2, r3, #31
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4911      	ldr	r1, [pc, #68]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	60cb      	str	r3, [r1, #12]
 8001d60:	e02a      	b.n	8001db8 <HAL_RCC_OscConfig+0xa80>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	da0a      	bge.n	8001d80 <HAL_RCC_OscConfig+0xa48>
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	015b      	lsls	r3, r3, #5
 8001d78:	4909      	ldr	r1, [pc, #36]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60cb      	str	r3, [r1, #12]
 8001d7e:	e01b      	b.n	8001db8 <HAL_RCC_OscConfig+0xa80>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d88:	d30c      	bcc.n	8001da4 <HAL_RCC_OscConfig+0xa6c>
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	029b      	lsls	r3, r3, #10
 8001d98:	4901      	ldr	r1, [pc, #4]	; (8001da0 <HAL_RCC_OscConfig+0xa68>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	60cb      	str	r3, [r1, #12]
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCC_OscConfig+0xa80>
 8001da0:	46020c00 	.word	0x46020c00
 8001da4:	4b99      	ldr	r3, [pc, #612]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	03db      	lsls	r3, r3, #15
 8001db2:	4996      	ldr	r1, [pc, #600]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001db8:	4b94      	ldr	r3, [pc, #592]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a93      	ldr	r2, [pc, #588]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001dbe:	f043 0310 	orr.w	r3, r3, #16
 8001dc2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001dc4:	f7fe fee8 	bl	8000b98 <HAL_GetTick>
 8001dc8:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0xaa6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001dcc:	f7fe fee4 	bl	8000b98 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0xaa6>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e111      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001dde:	4b8b      	ldr	r3, [pc, #556]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0xa94>
 8001dea:	e018      	b.n	8001e1e <HAL_RCC_OscConfig+0xae6>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001dec:	4b87      	ldr	r3, [pc, #540]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a86      	ldr	r2, [pc, #536]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001df2:	f023 0310 	bic.w	r3, r3, #16
 8001df6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001df8:	f7fe fece 	bl	8000b98 <HAL_GetTick>
 8001dfc:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0xada>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001e00:	f7fe feca 	bl	8000b98 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0xada>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e0f7      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001e12:	4b7e      	ldr	r3, [pc, #504]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0xac8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80ec 	beq.w	8002000 <HAL_RCC_OscConfig+0xcc8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e28:	4b78      	ldr	r3, [pc, #480]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b0c      	cmp	r3, #12
 8001e32:	f000 80e3 	beq.w	8001ffc <HAL_RCC_OscConfig+0xcc4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	f040 80be 	bne.w	8001fbc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001e40:	4b72      	ldr	r3, [pc, #456]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a71      	ldr	r2, [pc, #452]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001e4c:	f7fe fea4 	bl	8000b98 <HAL_GetTick>
 8001e50:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0xb2e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe fea0 	bl	8000b98 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0xb2e>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e0cd      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e66:	4b69      	ldr	r3, [pc, #420]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0xb1c>
          }
        }

        /* Enable PWR CLK */
        __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	4b66      	ldr	r3, [pc, #408]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e78:	4a64      	ldr	r2, [pc, #400]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001e7a:	f043 0304 	orr.w	r3, r3, #4
 8001e7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001e82:	4b62      	ldr	r3, [pc, #392]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001e90:	4b5f      	ldr	r3, [pc, #380]	; (8002010 <HAL_RCC_OscConfig+0xcd8>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e9c:	d102      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xb6c>
        {
          pwrboosten = SET;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001ea4:	4b5a      	ldr	r3, [pc, #360]	; (8002010 <HAL_RCC_OscConfig+0xcd8>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4a59      	ldr	r2, [pc, #356]	; (8002010 <HAL_RCC_OscConfig+0xcd8>)
 8001eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eae:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001eb0:	4b56      	ldr	r3, [pc, #344]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001eb8:	f023 0303 	bic.w	r3, r3, #3
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ec4:	3a01      	subs	r2, #1
 8001ec6:	0212      	lsls	r2, r2, #8
 8001ec8:	4311      	orrs	r1, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	494e      	ldr	r1, [pc, #312]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	628b      	str	r3, [r1, #40]	; 0x28
 8001ed6:	4b4d      	ldr	r3, [pc, #308]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eda:	4b4e      	ldr	r3, [pc, #312]	; (8002014 <HAL_RCC_OscConfig+0xcdc>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ee2:	3a01      	subs	r2, #1
 8001ee4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001eec:	3a01      	subs	r2, #1
 8001eee:	0252      	lsls	r2, r2, #9
 8001ef0:	b292      	uxth	r2, r2
 8001ef2:	4311      	orrs	r1, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ef8:	3a01      	subs	r2, #1
 8001efa:	0412      	lsls	r2, r2, #16
 8001efc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001f00:	4311      	orrs	r1, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001f06:	3a01      	subs	r2, #1
 8001f08:	0612      	lsls	r2, r2, #24
 8001f0a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	493e      	ldr	r1, [pc, #248]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001f16:	4b3d      	ldr	r3, [pc, #244]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	4a3c      	ldr	r2, [pc, #240]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001f1c:	f023 0310 	bic.w	r3, r3, #16
 8001f20:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f2a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f32:	00d2      	lsls	r2, r2, #3
 8001f34:	4935      	ldr	r1, [pc, #212]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f3a:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	4a33      	ldr	r2, [pc, #204]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001f40:	f043 0310 	orr.w	r3, r3, #16
 8001f44:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001f46:	4b31      	ldr	r3, [pc, #196]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	f023 020c 	bic.w	r2, r3, #12
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	492e      	ldr	r1, [pc, #184]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8001f58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d105      	bne.n	8001f6c <HAL_RCC_OscConfig+0xc34>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001f60:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <HAL_RCC_OscConfig+0xcd8>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4a2a      	ldr	r2, [pc, #168]	; (8002010 <HAL_RCC_OscConfig+0xcd8>)
 8001f66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f6a:	60d3      	str	r3, [r2, #12]
        }

        /*Disable PWR clk */
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f72:	4a26      	ldr	r2, [pc, #152]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001f74:	f023 0304 	bic.w	r3, r3, #4
 8001f78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f7c:	4b23      	ldr	r3, [pc, #140]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	4a22      	ldr	r2, [pc, #136]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001f82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f86:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001f88:	4b20      	ldr	r3, [pc, #128]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1f      	ldr	r2, [pc, #124]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f92:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001f94:	f7fe fe00 	bl	8000b98 <HAL_GetTick>
 8001f98:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7fe fdfc 	bl	8000b98 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e029      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001fae:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0xc64>
 8001fba:	e021      	b.n	8002000 <HAL_RCC_OscConfig+0xcc8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a12      	ldr	r2, [pc, #72]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fc6:	6013      	str	r3, [r2, #0]

        /* Disable main PLL outputs to save power if no PLLs on */
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
 8001fc8:	4b10      	ldr	r3, [pc, #64]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	4a0f      	ldr	r2, [pc, #60]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001fce:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001fd2:	6293      	str	r3, [r2, #40]	; 0x28

        tickstart = HAL_GetTick();
 8001fd4:	f7fe fde0 	bl	8000b98 <HAL_GetTick>
 8001fd8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0xcb6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7fe fddc 	bl	8000b98 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0xcb6>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e009      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <HAL_RCC_OscConfig+0xcd4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0xca4>
 8001ffa:	e001      	b.n	8002000 <HAL_RCC_OscConfig+0xcc8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_RCC_OscConfig+0xcca>
    }
  }
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3730      	adds	r7, #48	; 0x30
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	46020c00 	.word	0x46020c00
 8002010:	46020800 	.word	0x46020800
 8002014:	80800000 	.word	0x80800000

08002018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e146      	b.n	80022ba <HAL_RCC_ClockConfig+0x2a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800202c:	4ba5      	ldr	r3, [pc, #660]	; (80022c4 <HAL_RCC_ClockConfig+0x2ac>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d910      	bls.n	800205c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4ba2      	ldr	r3, [pc, #648]	; (80022c4 <HAL_RCC_ClockConfig+0x2ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 020f 	bic.w	r2, r3, #15
 8002042:	49a0      	ldr	r1, [pc, #640]	; (80022c4 <HAL_RCC_ClockConfig+0x2ac>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b9e      	ldr	r3, [pc, #632]	; (80022c4 <HAL_RCC_ClockConfig+0x2ac>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e12e      	b.n	80022ba <HAL_RCC_ClockConfig+0x2a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80be 	beq.w	80021e6 <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d137      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	4b95      	ldr	r3, [pc, #596]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 8002074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002078:	4a93      	ldr	r2, [pc, #588]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002082:	4b91      	ldr	r3, [pc, #580]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 8002084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
      tickstart = HAL_GetTick();
 8002090:	f7fe fd82 	bl	8000b98 <HAL_GetTick>
 8002094:	6178      	str	r0, [r7, #20]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002096:	4b8d      	ldr	r3, [pc, #564]	; (80022cc <HAL_RCC_ClockConfig+0x2b4>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00f      	beq.n	80020c2 <HAL_RCC_ClockConfig+0xaa>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_ClockConfig+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80020a4:	f7fe fd78 	bl	8000b98 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e101      	b.n	80022ba <HAL_RCC_ClockConfig+0x2a2>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80020b6:	4b85      	ldr	r3, [pc, #532]	; (80022cc <HAL_RCC_ClockConfig+0x2b4>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x8c>
          }
        }
      }

      __HAL_RCC_PWR_CLK_DISABLE();
 80020c2:	4b81      	ldr	r3, [pc, #516]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 80020c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c8:	4a7f      	ldr	r2, [pc, #508]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 80020ca:	f023 0304 	bic.w	r3, r3, #4
 80020ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80020d2:	4b7d      	ldr	r3, [pc, #500]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d121      	bne.n	8002122 <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0eb      	b.n	80022ba <HAL_RCC_ClockConfig+0x2a2>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xe2>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ea:	4b77      	ldr	r3, [pc, #476]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d115      	bne.n	8002122 <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0df      	b.n	80022ba <HAL_RCC_ClockConfig+0x2a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xfa>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002102:	4b71      	ldr	r3, [pc, #452]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0d3      	b.n	80022ba <HAL_RCC_ClockConfig+0x2a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002112:	4b6d      	ldr	r3, [pc, #436]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e0cb      	b.n	80022ba <HAL_RCC_ClockConfig+0x2a2>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002122:	4b69      	ldr	r3, [pc, #420]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f023 0203 	bic.w	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4966      	ldr	r1, [pc, #408]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 8002130:	4313      	orrs	r3, r2
 8002132:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002134:	f7fe fd30 	bl	8000b98 <HAL_GetTick>
 8002138:	6178      	str	r0, [r7, #20]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d112      	bne.n	8002168 <HAL_RCC_ClockConfig+0x150>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x142>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe fd28 	bl	8000b98 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x142>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0af      	b.n	80022ba <HAL_RCC_ClockConfig+0x2a2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800215a:	4b5b      	ldr	r3, [pc, #364]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d1ee      	bne.n	8002144 <HAL_RCC_ClockConfig+0x12c>
 8002166:	e03e      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ce>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d112      	bne.n	8002196 <HAL_RCC_ClockConfig+0x17e>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002172:	f7fe fd11 	bl	8000b98 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e098      	b.n	80022ba <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002188:	4b4f      	ldr	r3, [pc, #316]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	2b08      	cmp	r3, #8
 8002192:	d1ee      	bne.n	8002172 <HAL_RCC_ClockConfig+0x15a>
 8002194:	e027      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ce>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d11d      	bne.n	80021da <HAL_RCC_ClockConfig+0x1c2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_ClockConfig+0x19e>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a0:	f7fe fcfa 	bl	8000b98 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e081      	b.n	80022ba <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021b6:	4b44      	ldr	r3, [pc, #272]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1ee      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x188>
 80021c2:	e010      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ce>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f7fe fce8 	bl	8000b98 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_ClockConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e06f      	b.n	80022ba <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d1ee      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80021f2:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	f023 020f 	bic.w	r2, r3, #15
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	4932      	ldr	r1, [pc, #200]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 8002200:	4313      	orrs	r3, r2
 8002202:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002210:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	492a      	ldr	r1, [pc, #168]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 800221e:	4313      	orrs	r3, r2
 8002220:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800222e:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	4922      	ldr	r1, [pc, #136]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 800223e:	4313      	orrs	r3, r2
 8002240:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	2b00      	cmp	r3, #0
 800224c:	d008      	beq.n	8002260 <HAL_RCC_ClockConfig+0x248>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
    MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800224e:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	491b      	ldr	r1, [pc, #108]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 800225c:	4313      	orrs	r3, r2
 800225e:	624b      	str	r3, [r1, #36]	; 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <HAL_RCC_ClockConfig+0x2ac>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d210      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x278>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_RCC_ClockConfig+0x2ac>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 020f 	bic.w	r2, r3, #15
 8002276:	4913      	ldr	r1, [pc, #76]	; (80022c4 <HAL_RCC_ClockConfig+0x2ac>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_RCC_ClockConfig+0x2ac>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x278>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e014      	b.n	80022ba <HAL_RCC_ClockConfig+0x2a2>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002290:	f000 f824 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <HAL_RCC_ClockConfig+0x2b0>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	490c      	ldr	r1, [pc, #48]	; (80022d0 <HAL_RCC_ClockConfig+0x2b8>)
 80022a0:	5ccb      	ldrb	r3, [r1, r3]
 80022a2:	fa22 f303 	lsr.w	r3, r2, r3
 80022a6:	4a0b      	ldr	r2, [pc, #44]	; (80022d4 <HAL_RCC_ClockConfig+0x2bc>)
 80022a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_ClockConfig+0x2c0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe fc28 	bl	8000b04 <HAL_InitTick>
 80022b4:	4603      	mov	r3, r0
 80022b6:	74fb      	strb	r3, [r7, #19]

  return status;
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40022000 	.word	0x40022000
 80022c8:	46020c00 	.word	0x46020c00
 80022cc:	46020800 	.word	0x46020800
 80022d0:	080056d0 	.word	0x080056d0
 80022d4:	20000000 	.word	0x20000000
 80022d8:	20000004 	.word	0x20000004

080022dc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	b08b      	sub	sp, #44	; 0x2c
 80022e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ea:	4b7b      	ldr	r3, [pc, #492]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f4:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x34>
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2b0c      	cmp	r3, #12
 8002308:	d121      	bne.n	800234e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d11e      	bne.n	800234e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002310:	4b71      	ldr	r3, [pc, #452]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d107      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800231c:	4b6e      	ldr	r3, [pc, #440]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800231e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002322:	0b1b      	lsrs	r3, r3, #12
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	e005      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800232c:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	0f1b      	lsrs	r3, r3, #28
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002338:	4a68      	ldr	r2, [pc, #416]	; (80024dc <HAL_RCC_GetSysClockFreq+0x200>)
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002340:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d110      	bne.n	800236a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800234c:	e00d      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800234e:	4b62      	ldr	r3, [pc, #392]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b04      	cmp	r3, #4
 8002358:	d102      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800235a:	4b61      	ldr	r3, [pc, #388]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x204>)
 800235c:	623b      	str	r3, [r7, #32]
 800235e:	e004      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b08      	cmp	r3, #8
 8002364:	d101      	bne.n	800236a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002366:	4b5e      	ldr	r3, [pc, #376]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002368:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b0c      	cmp	r3, #12
 800236e:	f040 80ac 	bne.w	80024ca <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002372:	4b59      	ldr	r3, [pc, #356]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800237c:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3301      	adds	r3, #1
 8002388:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800238a:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002396:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	08db      	lsrs	r3, r3, #3
 800239c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	fb02 f303 	mul.w	r3, r2, r3
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ae:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 8086 	beq.w	80024c6 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d003      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0xec>
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d022      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x130>
 80023c6:	e043      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d2:	eddf 6a44 	vldr	s13, [pc, #272]	; 80024e4 <HAL_RCC_GetSysClockFreq+0x208>
 80023d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023da:	4b3f      	ldr	r3, [pc, #252]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80023dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80023ea:	ed97 6a01 	vldr	s12, [r7, #4]
 80023ee:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80024e8 <HAL_RCC_GetSysClockFreq+0x20c>
 80023f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80023fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002406:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800240a:	e046      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002416:	eddf 6a33 	vldr	s13, [pc, #204]	; 80024e4 <HAL_RCC_GetSysClockFreq+0x208>
 800241a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800241e:	4b2e      	ldr	r3, [pc, #184]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800242e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002432:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80024e8 <HAL_RCC_GetSysClockFreq+0x20c>
 8002436:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800243a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800243e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002442:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800244e:	e024      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	ee07 3a90 	vmov	s15, r3
 8002460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800246a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002478:	ed97 6a01 	vldr	s12, [r7, #4]
 800247c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80024e8 <HAL_RCC_GetSysClockFreq+0x20c>
 8002480:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002484:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002488:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800248c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002494:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002498:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800249c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249e:	0e1b      	lsrs	r3, r3, #24
 80024a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024a4:	3301      	adds	r3, #1
 80024a6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80024b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024be:	ee17 3a90 	vmov	r3, s15
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	e001      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80024ca:	6a3b      	ldr	r3, [r7, #32]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	372c      	adds	r7, #44	; 0x2c
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	46020c00 	.word	0x46020c00
 80024dc:	080056e8 	.word	0x080056e8
 80024e0:	00f42400 	.word	0x00f42400
 80024e4:	4b742400 	.word	0x4b742400
 80024e8:	46000000 	.word	0x46000000

080024ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80024f0:	f7ff fef4 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <HAL_RCC_GetHCLKFreq+0x28>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	4906      	ldr	r1, [pc, #24]	; (8002518 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002500:	5ccb      	ldrb	r3, [r1, r3]
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <HAL_RCC_GetHCLKFreq+0x30>)
 8002508:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800250a:	4b04      	ldr	r3, [pc, #16]	; (800251c <HAL_RCC_GetHCLKFreq+0x30>)
 800250c:	681b      	ldr	r3, [r3, #0]
}
 800250e:	4618      	mov	r0, r3
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	46020c00 	.word	0x46020c00
 8002518:	080056d0 	.word	0x080056d0
 800251c:	20000000 	.word	0x20000000

08002520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002524:	f7ff ffe2 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8002528:	4602      	mov	r2, r0
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	4903      	ldr	r1, [pc, #12]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002536:	5ccb      	ldrb	r3, [r1, r3]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	bd80      	pop	{r7, pc}
 8002540:	46020c00 	.word	0x46020c00
 8002544:	080056e0 	.word	0x080056e0

08002548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800254c:	f7ff ffce 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	0a1b      	lsrs	r3, r3, #8
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	4903      	ldr	r1, [pc, #12]	; (800256c <HAL_RCC_GetPCLK2Freq+0x24>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002564:	4618      	mov	r0, r3
 8002566:	bd80      	pop	{r7, pc}
 8002568:	46020c00 	.word	0x46020c00
 800256c:	080056e0 	.word	0x080056e0

08002570 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002574:	f7ff ffba 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_RCC_GetPCLK3Freq+0x20>)
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4903      	ldr	r1, [pc, #12]	; (8002594 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800258c:	4618      	mov	r0, r3
 800258e:	bd80      	pop	{r7, pc}
 8002590:	46020c00 	.word	0x46020c00
 8002594:	080056e0 	.word	0x080056e0

08002598 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025a0:	4b3e      	ldr	r3, [pc, #248]	; (800269c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80025a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025ae:	f7fe fea5 	bl	80012fc <HAL_PWREx_GetVoltageRange>
 80025b2:	6178      	str	r0, [r7, #20]
 80025b4:	e019      	b.n	80025ea <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	4b39      	ldr	r3, [pc, #228]	; (800269c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80025b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025bc:	4a37      	ldr	r2, [pc, #220]	; (800269c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80025c6:	4b35      	ldr	r3, [pc, #212]	; (800269c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80025c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025d4:	f7fe fe92 	bl	80012fc <HAL_PWREx_GetVoltageRange>
 80025d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025da:	4b30      	ldr	r3, [pc, #192]	; (800269c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80025dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e0:	4a2e      	ldr	r2, [pc, #184]	; (800269c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80025e2:	f023 0304 	bic.w	r3, r3, #4
 80025e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025f0:	d003      	beq.n	80025fa <RCC_SetFlashLatencyFromMSIRange+0x62>
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025f8:	d109      	bne.n	800260e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002600:	d202      	bcs.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002602:	2301      	movs	r3, #1
 8002604:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002606:	e033      	b.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800260c:	e030      	b.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002614:	d208      	bcs.n	8002628 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261c:	d102      	bne.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800261e:	2303      	movs	r3, #3
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	e025      	b.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e035      	b.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800262e:	d90f      	bls.n	8002650 <RCC_SetFlashLatencyFromMSIRange+0xb8>

      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800263c:	d902      	bls.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	e015      	b.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002644:	2301      	movs	r3, #1
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	e012      	b.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	e00f      	b.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002656:	d109      	bne.n	800266c <RCC_SetFlashLatencyFromMSIRange+0xd4>

        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265e:	d102      	bne.n	8002666 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002660:	2301      	movs	r3, #1
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	e004      	b.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002666:	2302      	movs	r3, #2
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	e001      	b.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800266c:	2301      	movs	r3, #1
 800266e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 020f 	bic.w	r2, r3, #15
 8002678:	4909      	ldr	r1, [pc, #36]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002680:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	429a      	cmp	r2, r3
 800268c:	d001      	beq.n	8002692 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	46020c00 	.word	0x46020c00
 80026a0:	40022000 	.word	0x40022000

080026a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026ac:	2300      	movs	r3, #0
 80026ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026b0:	2300      	movs	r3, #0
 80026b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80026c0:	4bae      	ldr	r3, [pc, #696]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80026c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c6:	f023 0203 	bic.w	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ce:	49ab      	ldr	r1, [pc, #684]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80026e2:	4ba6      	ldr	r3, [pc, #664]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80026e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e8:	f023 020c 	bic.w	r2, r3, #12
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f0:	49a2      	ldr	r1, [pc, #648]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002704:	4b9d      	ldr	r3, [pc, #628]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	499a      	ldr	r1, [pc, #616]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002726:	4b95      	ldr	r3, [pc, #596]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800272c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	4991      	ldr	r1, [pc, #580]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002748:	4b8c      	ldr	r3, [pc, #560]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800274a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800274e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	4989      	ldr	r1, [pc, #548]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800276a:	4b84      	ldr	r3, [pc, #528]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800276c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002770:	f023 0207 	bic.w	r2, r3, #7
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002778:	4980      	ldr	r1, [pc, #512]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800278c:	4b7b      	ldr	r3, [pc, #492]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800278e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002792:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800279a:	4978      	ldr	r1, [pc, #480]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80027ae:	4b73      	ldr	r3, [pc, #460]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80027b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027bc:	496f      	ldr	r1, [pc, #444]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80027d0:	4b6a      	ldr	r3, [pc, #424]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80027d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027de:	4967      	ldr	r1, [pc, #412]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80027f2:	4b62      	ldr	r3, [pc, #392]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80027f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	495e      	ldr	r1, [pc, #376]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002814:	4b59      	ldr	r3, [pc, #356]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002816:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800281a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002822:	4956      	ldr	r1, [pc, #344]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002836:	4b51      	ldr	r3, [pc, #324]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800283c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002844:	494d      	ldr	r1, [pc, #308]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002858:	4b48      	ldr	r3, [pc, #288]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800285a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800285e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002866:	4945      	ldr	r1, [pc, #276]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d042      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002880:	2b80      	cmp	r3, #128	; 0x80
 8002882:	d028      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002884:	2b80      	cmp	r3, #128	; 0x80
 8002886:	d823      	bhi.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8002888:	2b60      	cmp	r3, #96	; 0x60
 800288a:	d026      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x236>
 800288c:	2b60      	cmp	r3, #96	; 0x60
 800288e:	d81f      	bhi.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d006      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002894:	2b40      	cmp	r3, #64	; 0x40
 8002896:	d81b      	bhi.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8002898:	2b00      	cmp	r3, #0
 800289a:	d009      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800289c:	2b20      	cmp	r3, #32
 800289e:	d00f      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80028a0:	e016      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028a2:	4b36      	ldr	r3, [pc, #216]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	4a35      	ldr	r2, [pc, #212]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80028ae:	e015      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x238>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3304      	adds	r3, #4
 80028b4:	4618      	mov	r0, r3
 80028b6:	f002 f85f 	bl	8004978 <RCCEx_PLL2_Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	74fb      	strb	r3, [r7, #19]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80028be:	e00d      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x238>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3328      	adds	r3, #40	; 0x28
 80028c4:	4618      	mov	r0, r3
 80028c6:	f002 f8ef 	bl	8004aa8 <RCCEx_PLL3_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	74fb      	strb	r3, [r7, #19]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80028ce:	e005      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	74fb      	strb	r3, [r7, #19]
        break;
 80028d4:	e002      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        break;
 80028d6:	bf00      	nop
 80028d8:	e000      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        break;
 80028da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10c      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80028e2:	4b26      	ldr	r3, [pc, #152]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80028e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80028e8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f2:	4922      	ldr	r1, [pc, #136]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80028fa:	e001      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d04c      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002916:	d02e      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800291c:	d828      	bhi.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800291e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002922:	d02d      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8002924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002928:	d822      	bhi.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800292a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800292e:	d008      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8002930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002934:	d81c      	bhi.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800293a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800293e:	d00f      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002940:	e016      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	4a0d      	ldr	r2, [pc, #52]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800294e:	e018      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x2de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3304      	adds	r3, #4
 8002954:	4618      	mov	r0, r3
 8002956:	f002 f80f 	bl	8004978 <RCCEx_PLL2_Config>
 800295a:	4603      	mov	r3, r0
 800295c:	74fb      	strb	r3, [r7, #19]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800295e:	e010      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x2de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3328      	adds	r3, #40	; 0x28
 8002964:	4618      	mov	r0, r3
 8002966:	f002 f89f 	bl	8004aa8 <RCCEx_PLL3_Config>
 800296a:	4603      	mov	r3, r0
 800296c:	74fb      	strb	r3, [r7, #19]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800296e:	e008      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	74fb      	strb	r3, [r7, #19]
        break;
 8002974:	e005      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x2de>
        break;
 8002976:	bf00      	nop
 8002978:	e003      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800297a:	bf00      	nop
 800297c:	46020c00 	.word	0x46020c00
        break;
 8002980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002982:	7cfb      	ldrb	r3, [r7, #19]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10c      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8002988:	4bb7      	ldr	r3, [pc, #732]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800298a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800298e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002998:	49b3      	ldr	r1, [pc, #716]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80029a0:	e001      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x302>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a2:	7cfb      	ldrb	r3, [r7, #19]
 80029a4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d03e      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029b8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80029bc:	d025      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x366>
 80029be:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80029c2:	d81f      	bhi.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80029c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029c8:	d01f      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x366>
 80029ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ce:	d819      	bhi.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80029d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029d4:	d019      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x366>
 80029d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029da:	d813      	bhi.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80029dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e0:	d008      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80029e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e6:	d80d      	bhi.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00e      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x366>
 80029ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f0:	d00b      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x366>
 80029f2:	e007      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 ffbd 	bl	8004978 <RCCEx_PLL2_Config>
 80029fe:	4603      	mov	r3, r0
 8002a00:	74fb      	strb	r3, [r7, #19]
        break;
 8002a02:	e003      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x368>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	74fb      	strb	r3, [r7, #19]
        break;
 8002a08:	e000      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x368>
        break;
 8002a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a0c:	7cfb      	ldrb	r3, [r7, #19]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x388>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002a12:	4b95      	ldr	r3, [pc, #596]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a18:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a22:	4991      	ldr	r1, [pc, #580]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8002a2a:	e001      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d036      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d81b      	bhi.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x3da>
 8002a46:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002a85 	.word	0x08002a85
 8002a50:	08002a61 	.word	0x08002a61
 8002a54:	08002a6f 	.word	0x08002a6f
 8002a58:	08002a85 	.word	0x08002a85
 8002a5c:	08002a85 	.word	0x08002a85
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a60:	4b81      	ldr	r3, [pc, #516]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a64:	4a80      	ldr	r2, [pc, #512]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002a6c:	e00b      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3328      	adds	r3, #40	; 0x28
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 f818 	bl	8004aa8 <RCCEx_PLL3_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	74fb      	strb	r3, [r7, #19]
        break;
 8002a7c:	e003      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	74fb      	strb	r3, [r7, #19]
        break;
 8002a82:	e000      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        break;
 8002a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a86:	7cfb      	ldrb	r3, [r7, #19]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x402>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8002a8c:	4b76      	ldr	r3, [pc, #472]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002a92:	f023 0207 	bic.w	r2, r3, #7
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a9c:	4972      	ldr	r1, [pc, #456]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8002aa4:	e001      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x406>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d042      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x498>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));

    switch (pPeriphClkInit->Adf1ClockSelection)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ac0:	d025      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8002ac2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ac6:	d81f      	bhi.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002ac8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002acc:	d021      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x46e>
 8002ace:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ad2:	d819      	bhi.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002ad4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ad8:	d00e      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x454>
 8002ada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ade:	d813      	bhi.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d018      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x472>
 8002ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae8:	d10e      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x464>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002aea:	4b5f      	ldr	r3, [pc, #380]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	4a5e      	ldr	r2, [pc, #376]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002af6:	e00f      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x474>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3328      	adds	r3, #40	; 0x28
 8002afc:	4618      	mov	r0, r3
 8002afe:	f001 ffd3 	bl	8004aa8 <RCCEx_PLL3_Config>
 8002b02:	4603      	mov	r3, r0
 8002b04:	74fb      	strb	r3, [r7, #19]
        break;
 8002b06:	e007      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x474>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	74fb      	strb	r3, [r7, #19]
        break;
 8002b0c:	e004      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 8002b0e:	bf00      	nop
 8002b10:	e002      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 8002b12:	bf00      	nop
 8002b14:	e000      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 8002b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b18:	7cfb      	ldrb	r3, [r7, #19]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8002b1e:	4b52      	ldr	r3, [pc, #328]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b24:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2e:	494e      	ldr	r1, [pc, #312]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8002b36:	e001      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x498>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a0 	beq.w	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	747b      	strb	r3, [r7, #17]
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4e:	4b46      	ldr	r3, [pc, #280]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d110      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5c:	4b42      	ldr	r3, [pc, #264]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b62:	4a41      	ldr	r2, [pc, #260]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002b6c:	4b3e      	ldr	r3, [pc, #248]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	747b      	strb	r3, [r7, #17]
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b82:	4a3a      	ldr	r2, [pc, #232]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b8a:	f7fe f805 	bl	8000b98 <HAL_GetTick>
 8002b8e:	60f8      	str	r0, [r7, #12]

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b90:	e009      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b92:	f7fe f801 	bl	8000b98 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d902      	bls.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        ret = HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	74fb      	strb	r3, [r7, #19]
        break;
 8002ba4:	e005      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ba6:	4b31      	ldr	r3, [pc, #196]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0ef      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
      }
    }

    if (ret == HAL_OK)
 8002bb2:	7cfb      	ldrb	r3, [r7, #19]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d15b      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bb8:	4b2b      	ldr	r3, [pc, #172]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc2:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01f      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d019      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x566>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bd6:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002be2:	4b21      	ldr	r3, [pc, #132]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002be8:	4a1f      	ldr	r2, [pc, #124]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf2:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bf8:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c02:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d016      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fd ffc0 	bl	8000b98 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c1a:	e00b      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x590>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1c:	f7fd ffbc 	bl	8000b98 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d902      	bls.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x590>
          {
            ret = HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	74fb      	strb	r3, [r7, #19]
            break;
 8002c32:	e006      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0ec      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x578>
          }
        }
      }

      if (ret == HAL_OK)
 8002c42:	7cfb      	ldrb	r3, [r7, #19]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10c      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x5be>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8002c48:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002c58:	4903      	ldr	r1, [pc, #12]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
 8002c60:	e008      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c62:	7cfb      	ldrb	r3, [r7, #19]
 8002c64:	74bb      	strb	r3, [r7, #18]
 8002c66:	e005      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002c68:	46020c00 	.word	0x46020c00
 8002c6c:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c70:	7cfb      	ldrb	r3, [r7, #19]
 8002c72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c74:	7c7b      	ldrb	r3, [r7, #17]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d107      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7a:	4bab      	ldr	r3, [pc, #684]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c80:	4aa9      	ldr	r2, [pc, #676]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002c82:	f023 0304 	bic.w	r3, r3, #4
 8002c86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d03a      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x668>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(pPeriphClkInit->Clk48ClockSelection));

    switch (pPeriphClkInit->Clk48ClockSelection)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c9c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002ca0:	d01f      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
 8002ca2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002ca6:	d819      	bhi.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x638>
 8002ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cac:	d00f      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8002cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cb2:	d813      	bhi.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x638>
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d016      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002cb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cbc:	d10e      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      case RCC_CLK48CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 fe58 	bl	8004978 <RCCEx_PLL2_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	74fb      	strb	r3, [r7, #19]
        break;
 8002ccc:	e00c      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x644>
      case RCC_CLK48CLKSOURCE_PLL1:
        /* Enable CLK48 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cce:	4b96      	ldr	r3, [pc, #600]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	4a95      	ldr	r2, [pc, #596]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002cda:	e005      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x644>
      case RCC_CLK48CLKSOURCE_HSI48:
        break;
      case RCC_CLK48CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	74fb      	strb	r3, [r7, #19]
        break;
 8002ce0:	e002      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x644>
        break;
 8002ce2:	bf00      	nop
 8002ce4:	e000      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x644>
        break;
 8002ce6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002ce8:	7cfb      	ldrb	r3, [r7, #19]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->Clk48ClockSelection);
 8002cee:	4b8e      	ldr	r3, [pc, #568]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cfe:	498a      	ldr	r1, [pc, #552]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8002d06:	e001      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x668>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d08:	7cfb      	ldrb	r3, [r7, #19]
 8002d0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d027      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d22:	d00a      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x696>
 8002d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d28:	d804      	bhi.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x690>
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d007      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8002d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d32:	d006      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	74fb      	strb	r3, [r7, #19]
        break;
 8002d38:	e004      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 8002d3a:	bf00      	nop
 8002d3c:	e002      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 8002d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8002d4a:	4b77      	ldr	r3, [pc, #476]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002d4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5a:	4973      	ldr	r1, [pc, #460]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8002d62:	e001      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00b      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8002d74:	4b6c      	ldr	r3, [pc, #432]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002d76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d7a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d84:	4968      	ldr	r1, [pc, #416]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d017      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002da2:	d105      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002da4:	4b60      	ldr	r3, [pc, #384]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	4a5f      	ldr	r2, [pc, #380]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dae:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8002db0:	4b5d      	ldr	r3, [pc, #372]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002db2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002db6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002dc0:	4959      	ldr	r1, [pc, #356]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8002dd4:	4b54      	ldr	r3, [pc, #336]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002de4:	4950      	ldr	r1, [pc, #320]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00b      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x76c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8002df8:	4b4b      	ldr	r3, [pc, #300]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e08:	4947      	ldr	r1, [pc, #284]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00b      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8002e1c:	4b42      	ldr	r3, [pc, #264]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e22:	f023 0218 	bic.w	r2, r3, #24
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002e2c:	493e      	ldr	r1, [pc, #248]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d023      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e4a:	d105      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e4c:	4b36      	ldr	r3, [pc, #216]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	4a35      	ldr	r2, [pc, #212]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e56:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e62:	d105      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    {
      /* Enable PLL2 Q CLK output */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002e64:	4b30      	ldr	r3, [pc, #192]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	4a2f      	ldr	r2, [pc, #188]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
    }
    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8002e70:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002e76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e80:	4929      	ldr	r1, [pc, #164]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d032      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e9e:	d00e      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002ea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ea4:	d813      	bhi.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d014      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8002eaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eae:	d10e      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x82a>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eba:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8002ebc:	e00b      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 fd58 	bl	8004978 <RCCEx_PLL2_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	74fb      	strb	r3, [r7, #19]
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8002ecc:	e003      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      default:
        ret = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	74fb      	strb	r3, [r7, #19]
        break;
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x832>
        break;
 8002ed4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002ed6:	7cfb      	ldrb	r3, [r7, #19]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10c      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8002edc:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ee2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eec:	490e      	ldr	r1, [pc, #56]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8002ef4:	e001      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef6:	7cfb      	ldrb	r3, [r7, #19]
 8002ef8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f0c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f16:	4904      	ldr	r1, [pc, #16]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  return status;
 8002f1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	46020c00 	.word	0x46020c00

08002f2c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8002f34:	4bac      	ldr	r3, [pc, #688]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f3c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002f3e:	4baa      	ldr	r3, [pc, #680]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002f48:	4ba7      	ldr	r3, [pc, #668]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	3301      	adds	r3, #1
 8002f54:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8002f56:	4ba4      	ldr	r3, [pc, #656]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002f60:	4ba1      	ldr	r3, [pc, #644]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	08db      	lsrs	r3, r3, #3
 8002f66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	fb02 f303 	mul.w	r3, r2, r3
 8002f70:	ee07 3a90 	vmov	s15, r3
 8002f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f78:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8123 	beq.w	80031ca <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d062      	beq.n	8003050 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	f200 8081 	bhi.w	8003094 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d024      	beq.n	8002fe2 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d17a      	bne.n	8003094 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	ee07 3a90 	vmov	s15, r3
 8002fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa8:	eddf 6a90 	vldr	s13, [pc, #576]	; 80031ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8002fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fb0:	4b8d      	ldr	r3, [pc, #564]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb8:	ee07 3a90 	vmov	s15, r3
 8002fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fc4:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80031f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8002fc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fe0:	e08f      	b.n	8003102 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8002fe2:	4b81      	ldr	r3, [pc, #516]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8002fee:	4b7e      	ldr	r3, [pc, #504]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	0f1b      	lsrs	r3, r3, #28
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	e006      	b.n	8003008 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8002ffa:	4b7b      	ldr	r3, [pc, #492]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002ffc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003000:	041b      	lsls	r3, r3, #16
 8003002:	0f1b      	lsrs	r3, r3, #28
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	4a7a      	ldr	r2, [pc, #488]	; (80031f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800300a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300e:	ee07 3a90 	vmov	s15, r3
 8003012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	ee07 3a90 	vmov	s15, r3
 800301c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800302e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003032:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80031f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800303a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800303e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003042:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800304e:	e058      	b.n	8003102 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	ee07 3a90 	vmov	s15, r3
 8003056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305a:	eddf 6a64 	vldr	s13, [pc, #400]	; 80031ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800305e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003062:	4b61      	ldr	r3, [pc, #388]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306a:	ee07 3a90 	vmov	s15, r3
 800306e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003072:	ed97 6a02 	vldr	s12, [r7, #8]
 8003076:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80031f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800307a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800307e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003086:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800308a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003092:	e036      	b.n	8003102 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003094:	4b54      	ldr	r3, [pc, #336]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 80030a0:	4b51      	ldr	r3, [pc, #324]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	0f1b      	lsrs	r3, r3, #28
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	e006      	b.n	80030ba <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 80030ac:	4b4e      	ldr	r3, [pc, #312]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80030ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030b2:	041b      	lsls	r3, r3, #16
 80030b4:	0f1b      	lsrs	r3, r3, #28
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	4a4e      	ldr	r2, [pc, #312]	; (80031f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80030bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c0:	ee07 3a90 	vmov	s15, r3
 80030c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	ee07 3a90 	vmov	s15, r3
 80030dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80030e4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80031f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80030e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80030f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003100:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003102:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d017      	beq.n	800313e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800310e:	4b36      	ldr	r3, [pc, #216]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003112:	0a5b      	lsrs	r3, r3, #9
 8003114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003118:	ee07 3a90 	vmov	s15, r3
 800311c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003124:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003128:	edd7 6a07 	vldr	s13, [r7, #28]
 800312c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003134:	ee17 2a90 	vmov	r2, s15
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e002      	b.n	8003144 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003144:	4b28      	ldr	r3, [pc, #160]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d017      	beq.n	8003180 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003150:	4b25      	ldr	r3, [pc, #148]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003166:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800316a:	edd7 6a07 	vldr	s13, [r7, #28]
 800316e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003176:	ee17 2a90 	vmov	r2, s15
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	e002      	b.n	8003186 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003186:	4b18      	ldr	r3, [pc, #96]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d017      	beq.n	80031c2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003196:	0e1b      	lsrs	r3, r3, #24
 8003198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800319c:	ee07 3a90 	vmov	s15, r3
 80031a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80031a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031a8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80031ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80031b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031b8:	ee17 2a90 	vmov	r2, s15
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	609a      	str	r2, [r3, #8]
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }
}
 80031c0:	e00c      	b.n	80031dc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	609a      	str	r2, [r3, #8]
}
 80031c8:	e008      	b.n	80031dc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
}
 80031dc:	bf00      	nop
 80031de:	3724      	adds	r7, #36	; 0x24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	46020c00 	.word	0x46020c00
 80031ec:	4b742400 	.word	0x4b742400
 80031f0:	46000000 	.word	0x46000000
 80031f4:	080056e8 	.word	0x080056e8

080031f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	; 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003200:	4bac      	ldr	r3, [pc, #688]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003208:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800320a:	4baa      	ldr	r3, [pc, #680]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003214:	4ba7      	ldr	r3, [pc, #668]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	0a1b      	lsrs	r3, r3, #8
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	3301      	adds	r3, #1
 8003220:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8003222:	4ba4      	ldr	r3, [pc, #656]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800322c:	4ba1      	ldr	r3, [pc, #644]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	08db      	lsrs	r3, r3, #3
 8003232:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	fb02 f303 	mul.w	r3, r2, r3
 800323c:	ee07 3a90 	vmov	s15, r3
 8003240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003244:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 8123 	beq.w	8003496 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d062      	beq.n	800331c <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b03      	cmp	r3, #3
 800325a:	f200 8081 	bhi.w	8003360 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d024      	beq.n	80032ae <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d17a      	bne.n	8003360 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003274:	eddf 6a90 	vldr	s13, [pc, #576]	; 80034b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8003278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327c:	4b8d      	ldr	r3, [pc, #564]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003284:	ee07 3a90 	vmov	s15, r3
 8003288:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800328c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003290:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80034bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003294:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003298:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800329c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80032a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032ac:	e08f      	b.n	80033ce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80032ae:	4b81      	ldr	r3, [pc, #516]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 80032ba:	4b7e      	ldr	r3, [pc, #504]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	0f1b      	lsrs	r3, r3, #28
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	e006      	b.n	80032d4 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 80032c6:	4b7b      	ldr	r3, [pc, #492]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80032c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032cc:	041b      	lsls	r3, r3, #16
 80032ce:	0f1b      	lsrs	r3, r3, #28
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	4a7a      	ldr	r2, [pc, #488]	; (80034c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80032d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80032fe:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80034bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800330a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800330e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800331a:	e058      	b.n	80033ce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003326:	eddf 6a64 	vldr	s13, [pc, #400]	; 80034b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800332a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332e:	4b61      	ldr	r3, [pc, #388]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800333e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003342:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80034bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003346:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800334a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800334e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003352:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800335e:	e036      	b.n	80033ce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003360:	4b54      	ldr	r3, [pc, #336]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 800336c:	4b51      	ldr	r3, [pc, #324]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	0f1b      	lsrs	r3, r3, #28
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	e006      	b.n	8003386 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8003378:	4b4e      	ldr	r3, [pc, #312]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800337a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800337e:	041b      	lsls	r3, r3, #16
 8003380:	0f1b      	lsrs	r3, r3, #28
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	4a4e      	ldr	r2, [pc, #312]	; (80034c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338c:	ee07 3a90 	vmov	s15, r3
 8003390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	ee07 3a90 	vmov	s15, r3
 80033a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80033b0:	eddf 5a42 	vldr	s11, [pc, #264]	; 80034bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80033b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80033c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033cc:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80033ce:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d017      	beq.n	800340a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80033da:	4b36      	ldr	r3, [pc, #216]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	0a5b      	lsrs	r3, r3, #9
 80033e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033e4:	ee07 3a90 	vmov	s15, r3
 80033e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80033ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033f0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80033f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80033f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003400:	ee17 2a90 	vmov	r2, s15
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	e002      	b.n	8003410 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003410:	4b28      	ldr	r3, [pc, #160]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d017      	beq.n	800344c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800341c:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800341e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003420:	0c1b      	lsrs	r3, r3, #16
 8003422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800342e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003432:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003436:	edd7 6a07 	vldr	s13, [r7, #28]
 800343a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800343e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003442:	ee17 2a90 	vmov	r2, s15
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	e002      	b.n	8003452 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003452:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d017      	beq.n	800348e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800345e:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	0e1b      	lsrs	r3, r3, #24
 8003464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003468:	ee07 3a90 	vmov	s15, r3
 800346c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003470:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003474:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003478:	edd7 6a07 	vldr	s13, [r7, #28]
 800347c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003484:	ee17 2a90 	vmov	r2, s15
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800348c:	e00c      	b.n	80034a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
}
 8003494:	e008      	b.n	80034a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	609a      	str	r2, [r3, #8]
}
 80034a8:	bf00      	nop
 80034aa:	3724      	adds	r7, #36	; 0x24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	46020c00 	.word	0x46020c00
 80034b8:	4b742400 	.word	0x4b742400
 80034bc:	46000000 	.word	0x46000000
 80034c0:	080056e8 	.word	0x080056e8

080034c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	; 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80034cc:	4bac      	ldr	r3, [pc, #688]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80034ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80034d6:	4baa      	ldr	r3, [pc, #680]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80034e0:	4ba7      	ldr	r3, [pc, #668]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	3301      	adds	r3, #1
 80034ec:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80034ee:	4ba4      	ldr	r3, [pc, #656]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80034f8:	4ba1      	ldr	r3, [pc, #644]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80034fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fc:	08db      	lsrs	r3, r3, #3
 80034fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	fb02 f303 	mul.w	r3, r2, r3
 8003508:	ee07 3a90 	vmov	s15, r3
 800350c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003510:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8123 	beq.w	8003762 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d062      	beq.n	80035e8 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b03      	cmp	r3, #3
 8003526:	f200 8081 	bhi.w	800362c <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d024      	beq.n	800357a <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d17a      	bne.n	800362c <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	ee07 3a90 	vmov	s15, r3
 800353c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003540:	eddf 6a90 	vldr	s13, [pc, #576]	; 8003784 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8003544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003548:	4b8d      	ldr	r3, [pc, #564]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003550:	ee07 3a90 	vmov	s15, r3
 8003554:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003558:	ed97 6a02 	vldr	s12, [r7, #8]
 800355c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8003788 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003560:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003564:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800356c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003574:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8003578:	e08f      	b.n	800369a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800357a:	4b81      	ldr	r3, [pc, #516]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8003586:	4b7e      	ldr	r3, [pc, #504]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	0f1b      	lsrs	r3, r3, #28
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	e006      	b.n	80035a0 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8003592:	4b7b      	ldr	r3, [pc, #492]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003594:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003598:	041b      	lsls	r3, r3, #16
 800359a:	0f1b      	lsrs	r3, r3, #28
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	4a7a      	ldr	r2, [pc, #488]	; (800378c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80035a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	ee07 3a90 	vmov	s15, r3
 80035b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ca:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003788 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80035ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035da:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80035de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035e6:	e058      	b.n	800369a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003784 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80035f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035fa:	4b61      	ldr	r3, [pc, #388]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800360a:	ed97 6a02 	vldr	s12, [r7, #8]
 800360e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003788 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003612:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003616:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800361a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800361e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800362a:	e036      	b.n	800369a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800362c:	4b54      	ldr	r3, [pc, #336]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8003638:	4b51      	ldr	r3, [pc, #324]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	0f1b      	lsrs	r3, r3, #28
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	e006      	b.n	8003652 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8003644:	4b4e      	ldr	r3, [pc, #312]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003646:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800364a:	041b      	lsls	r3, r3, #16
 800364c:	0f1b      	lsrs	r3, r3, #28
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	4a4e      	ldr	r2, [pc, #312]	; (800378c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8003654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003658:	ee07 3a90 	vmov	s15, r3
 800365c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800366a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	ee07 3a90 	vmov	s15, r3
 8003674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003678:	ed97 6a02 	vldr	s12, [r7, #8]
 800367c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003788 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800368c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003694:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003698:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800369a:	4b39      	ldr	r3, [pc, #228]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d017      	beq.n	80036d6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80036a6:	4b36      	ldr	r3, [pc, #216]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	0a5b      	lsrs	r3, r3, #9
 80036ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b0:	ee07 3a90 	vmov	s15, r3
 80036b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80036b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036bc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80036c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80036c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036cc:	ee17 2a90 	vmov	r2, s15
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e002      	b.n	80036dc <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80036dc:	4b28      	ldr	r3, [pc, #160]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d017      	beq.n	8003718 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80036fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036fe:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003702:	edd7 6a07 	vldr	s13, [r7, #28]
 8003706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800370a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800370e:	ee17 2a90 	vmov	r2, s15
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	e002      	b.n	800371e <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800371e:	4b18      	ldr	r3, [pc, #96]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d017      	beq.n	800375a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800372a:	4b15      	ldr	r3, [pc, #84]	; (8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	0e1b      	lsrs	r3, r3, #24
 8003730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003734:	ee07 3a90 	vmov	s15, r3
 8003738:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800373c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003740:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003744:	edd7 6a07 	vldr	s13, [r7, #28]
 8003748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800374c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003750:	ee17 2a90 	vmov	r2, s15
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8003758:	e00c      	b.n	8003774 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	609a      	str	r2, [r3, #8]
}
 8003760:	e008      	b.n	8003774 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
}
 8003774:	bf00      	nop
 8003776:	3724      	adds	r7, #36	; 0x24
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	46020c00 	.word	0x46020c00
 8003784:	4b742400 	.word	0x4b742400
 8003788:	46000000 	.word	0x46000000
 800378c:	080056e8 	.word	0x080056e8

08003790 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08e      	sub	sp, #56	; 0x38
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800379e:	d145      	bne.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80037a0:	4bcc      	ldr	r3, [pc, #816]	; (8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80037a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037aa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80037ac:	4bc9      	ldr	r3, [pc, #804]	; (8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80037ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d108      	bne.n	80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c0:	d104      	bne.n	80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
    {
      frequency = LSE_VALUE;
 80037c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037c6:	637b      	str	r3, [r7, #52]	; 0x34
 80037c8:	f001 b8cd 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80037cc:	4bc1      	ldr	r3, [pc, #772]	; (8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80037ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037da:	d114      	bne.n	8003806 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e2:	d110      	bne.n	8003806 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80037e4:	4bbb      	ldr	r3, [pc, #748]	; (8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80037e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037f2:	d103      	bne.n	80037fc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
      {
        frequency = LSI_VALUE / 128U;
 80037f4:	23fa      	movs	r3, #250	; 0xfa
 80037f6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80037f8:	f001 b8b5 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      }
      else
      {
        frequency = LSI_VALUE;
 80037fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003800:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003802:	f001 b8b0 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003806:	4bb3      	ldr	r3, [pc, #716]	; (8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003812:	d107      	bne.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800381a:	d103      	bne.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
    {
      frequency = HSE_VALUE / 32U;
 800381c:	4bae      	ldr	r3, [pc, #696]	; (8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 800381e:	637b      	str	r3, [r7, #52]	; 0x34
 8003820:	f001 b8a1 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	637b      	str	r3, [r7, #52]	; 0x34
 8003828:	f001 b89d 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003832:	f001 806d 	beq.w	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x1180>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800383c:	f201 8090 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003846:	f000 86d3 	beq.w	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe60>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003850:	f201 8086 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800385a:	f001 8004 	beq.w	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x10d6>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003864:	f201 807c 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800386e:	f000 878b 	beq.w	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003878:	f201 8072 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003882:	f000 8732 	beq.w	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800388c:	f201 8068 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003896:	f000 86d9 	beq.w	800464c <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038a0:	f201 805e 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038aa:	f000 8592 	beq.w	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b4:	f201 8054 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038be:	f000 81f6 	beq.w	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c8:	f201 804a 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d2:	f000 8194 	beq.w	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038dc:	f201 8040 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038e6:	f000 847f 	beq.w	80041e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038f0:	f201 8036 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fa:	f000 842a 	beq.w	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003904:	f201 802c 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800390e:	f000 83bd 	beq.w	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003918:	f201 8022 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003922:	f000 80f1 	beq.w	8003b08 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800392c:	f201 8018 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003936:	f000 8095 	beq.w	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003940:	f201 800e 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394a:	f000 8131 	beq.w	8003bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003954:	f201 8004 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800395e:	f000 855e 	beq.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003968:	f200 87fa 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003972:	f000 85f8 	beq.w	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397c:	f200 87f0 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003986:	f000 859c 	beq.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003990:	f200 87e6 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800399a:	f000 84d0 	beq.w	800433e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a4:	f200 87dc 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b80      	cmp	r3, #128	; 0x80
 80039ac:	f000 849b 	beq.w	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b80      	cmp	r3, #128	; 0x80
 80039b4:	f200 87d4 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d84c      	bhi.n	8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 87cd 	beq.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	2b1f      	cmp	r3, #31
 80039cc:	f200 87c8 	bhi.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80039d0:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>)
 80039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d6:	bf00      	nop
 80039d8:	08003da9 	.word	0x08003da9
 80039dc:	08003e17 	.word	0x08003e17
 80039e0:	08004961 	.word	0x08004961
 80039e4:	08003e85 	.word	0x08003e85
 80039e8:	08004961 	.word	0x08004961
 80039ec:	08004961 	.word	0x08004961
 80039f0:	08004961 	.word	0x08004961
 80039f4:	08003ef3 	.word	0x08003ef3
 80039f8:	08004961 	.word	0x08004961
 80039fc:	08004961 	.word	0x08004961
 8003a00:	08004961 	.word	0x08004961
 8003a04:	08004961 	.word	0x08004961
 8003a08:	08004961 	.word	0x08004961
 8003a0c:	08004961 	.word	0x08004961
 8003a10:	08004961 	.word	0x08004961
 8003a14:	08003f61 	.word	0x08003f61
 8003a18:	08004961 	.word	0x08004961
 8003a1c:	08004961 	.word	0x08004961
 8003a20:	08004961 	.word	0x08004961
 8003a24:	08004961 	.word	0x08004961
 8003a28:	08004961 	.word	0x08004961
 8003a2c:	08004961 	.word	0x08004961
 8003a30:	08004961 	.word	0x08004961
 8003a34:	08004961 	.word	0x08004961
 8003a38:	08004961 	.word	0x08004961
 8003a3c:	08004961 	.word	0x08004961
 8003a40:	08004961 	.word	0x08004961
 8003a44:	08004961 	.word	0x08004961
 8003a48:	08004961 	.word	0x08004961
 8003a4c:	08004961 	.word	0x08004961
 8003a50:	08004961 	.word	0x08004961
 8003a54:	08003fd5 	.word	0x08003fd5
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b40      	cmp	r3, #64	; 0x40
 8003a5c:	f000 841d 	beq.w	800429a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8003a60:	f000 bf7e 	b.w	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
    {
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003a64:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003a66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003a6a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	2b80      	cmp	r3, #128	; 0x80
 8003a74:	d036      	beq.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	2b80      	cmp	r3, #128	; 0x80
 8003a7a:	d840      	bhi.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7e:	2b60      	cmp	r3, #96	; 0x60
 8003a80:	d02c      	beq.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	2b60      	cmp	r3, #96	; 0x60
 8003a86:	d83a      	bhi.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	2b40      	cmp	r3, #64	; 0x40
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	d834      	bhi.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d010      	beq.n	8003ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8003aa0:	e02d      	b.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x36e>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff fa40 	bl	8002f2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003ab0:	e028      	b.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ab2:	f107 0318 	add.w	r3, r7, #24
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fb9e 	bl	80031f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003ac0:	e020      	b.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ac2:	f107 030c 	add.w	r3, r7, #12
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff fcfc 	bl	80034c4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003ad0:	e018      	b.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
 8003ad2:	bf00      	nop
 8003ad4:	46020c00 	.word	0x46020c00
 8003ad8:	0007a120 	.word	0x0007a120

          case RCC_SAI1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003adc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003ae2:	e00f      	b.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ae4:	4bab      	ldr	r3, [pc, #684]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af0:	d102      	bne.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            {
              frequency = HSI_VALUE;
 8003af2:	4ba9      	ldr	r3, [pc, #676]	; (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8003af4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8003af6:	e005      	b.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
              frequency = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003afc:	e002      	b.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          default :
          {
            frequency = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003b02:	bf00      	nop
          }
        }
        break;
 8003b04:	f000 bf2f 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003b08:	4ba2      	ldr	r3, [pc, #648]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003b0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003b0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b12:	633b      	str	r3, [r7, #48]	; 0x30
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1a:	d037      	beq.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b22:	d840      	bhi.n	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b2a:	d02b      	beq.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b32:	d838      	bhi.n	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b3a:	d00b      	beq.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b42:	d830      	bhi.n	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00c      	beq.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b50:	d010      	beq.n	8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 8003b52:	e028      	b.n	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x416>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff f9e7 	bl	8002f2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003b62:	e023      	b.n	8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b64:	f107 0318 	add.w	r3, r7, #24
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fb45 	bl	80031f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003b72:	e01b      	b.n	8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff fca3 	bl	80034c4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003b82:	e013      	b.n	8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003b84:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003b88:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003b8a:	e00f      	b.n	8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b8c:	4b81      	ldr	r3, [pc, #516]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b98:	d102      	bne.n	8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
            {
              frequency = HSI_VALUE;
 8003b9a:	4b7f      	ldr	r3, [pc, #508]	; (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8003b9e:	e005      	b.n	8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              frequency = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003ba4:	e002      	b.n	8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          default :

            frequency = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003baa:	bf00      	nop

        }
        break;
 8003bac:	f000 bedb 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      case RCC_PERIPHCLK_SAES:
        /* Get the current SAES source */
        srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8003bb0:	4b78      	ldr	r3, [pc, #480]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003bb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bba:	633b      	str	r3, [r7, #48]	; 0x30

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8003bbc:	4b75      	ldr	r3, [pc, #468]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc8:	d105      	bne.n	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d102      	bne.n	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
        {
          frequency = HSI_VALUE;
 8003bd0:	4b71      	ldr	r3, [pc, #452]	; (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8003bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd4:	e011      	b.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
        }
        else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8003bd6:	4b6f      	ldr	r3, [pc, #444]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bea:	d102      	bne.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
        {
          frequency = HSI_VALUE >> 1U;
 8003bec:	4b6b      	ldr	r3, [pc, #428]	; (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8003bee:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf0:	e003      	b.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
        }
        /* Clock not enabled for SAES */
        else
        {
          frequency = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8003bf6:	f000 beb6 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8003bfa:	f000 beb4 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_CLK48:

        srcclk = __HAL_RCC_GET_CLK48_SOURCE();
 8003bfe:	4b65      	ldr	r3, [pc, #404]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c04:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c10:	d030      	beq.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c18:	d844      	bhi.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c20:	d00b      	beq.n	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c28:	d83c      	bhi.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d014      	beq.n	8003c5a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c36:	d008      	beq.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8003c38:	e034      	b.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>

        switch (srcclk)
        {
          case RCC_CLK48CLKSOURCE_PLL1: /* PLL1Q  */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff f974 	bl	8002f2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003c48:	e02f      	b.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_PLL2: /* PLL2Q */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c4a:	f107 0318 	add.w	r3, r7, #24
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fad2 	bl	80031f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_Q_Frequency;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003c58:	e027      	b.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_HSI48: /* HSI48 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003c5a:	4b4e      	ldr	r3, [pc, #312]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c66:	d102      	bne.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
            {
              frequency = HSI48_VALUE;
 8003c68:	4b4d      	ldr	r3, [pc, #308]	; (8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 8003c6a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8003c6c:	e01d      	b.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
              frequency = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003c72:	e01a      	b.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003c74:	4b47      	ldr	r3, [pc, #284]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8003c80:	4b44      	ldr	r3, [pc, #272]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	0e1b      	lsrs	r3, r3, #24
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	e006      	b.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8003c8c:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003c8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c92:	041b      	lsls	r3, r3, #16
 8003c94:	0e1b      	lsrs	r3, r3, #24
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	4a42      	ldr	r2, [pc, #264]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8003c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003ca2:	e002      	b.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          default :

            frequency = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003ca8:	bf00      	nop

        }
        break;
 8003caa:	f000 be5c 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SDMMC:
        srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8003cae:	4b39      	ldr	r3, [pc, #228]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003cb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb8:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8003cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d157      	bne.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          srcclk = __HAL_RCC_GET_CLK48_SOURCE();
 8003cc0:	4b34      	ldr	r3, [pc, #208]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cc6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003cca:	633b      	str	r3, [r7, #48]	; 0x30
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003cd2:	d030      	beq.n	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003cda:	d844      	bhi.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ce2:	d00b      	beq.n	8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cea:	d83c      	bhi.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d014      	beq.n	8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cf8:	d008      	beq.n	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 8003cfa:	e034      	b.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>

          switch (srcclk)
          {
            case RCC_CLK48CLKSOURCE_PLL1: /* PLL1Q  */
            {
              HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff f913 	bl	8002f2c <HAL_RCCEx_GetPLL1ClockFreq>
              frequency = pll1_clocks.PLL1_Q_Frequency;
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8003d0a:	e02f      	b.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_PLL2: /* PLL2Q */
            {
              HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d0c:	f107 0318 	add.w	r3, r7, #24
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fa71 	bl	80031f8 <HAL_RCCEx_GetPLL2ClockFreq>
              frequency = pll2_clocks.PLL2_Q_Frequency;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8003d1a:	e027      	b.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_HSI48: /* HSI48 */
            {
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003d1c:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d28:	d102      	bne.n	8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
              {
                frequency = HSI48_VALUE;
 8003d2a:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
              }
              else
              {
                frequency = 0U;
              }
              break;
 8003d2e:	e01d      	b.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
                frequency = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8003d34:	e01a      	b.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
            {
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003d36:	4b17      	ldr	r3, [pc, #92]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d005      	beq.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8003d42:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0e1b      	lsrs	r3, r3, #24
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	e006      	b.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8003d4e:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d54:	041b      	lsls	r3, r3, #16
 8003d56:	0e1b      	lsrs	r3, r3, #24
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	4a11      	ldr	r2, [pc, #68]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8003d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d62:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8003d64:	e002      	b.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            default :
            {
              frequency = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8003d6a:	bf00      	nop
            }
          }
          break;
 8003d6c:	f000 bdfb 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        }
        else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d76:	d108      	bne.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff f8d5 	bl	8002f2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_P_Frequency;
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003d86:	f000 bdee 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d8e:	f000 bdea 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8003d92:	bf00      	nop
 8003d94:	46020c00 	.word	0x46020c00
 8003d98:	00f42400 	.word	0x00f42400
 8003d9c:	007a1200 	.word	0x007a1200
 8003da0:	02dc6c00 	.word	0x02dc6c00
 8003da4:	080056e8 	.word	0x080056e8

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003da8:	4bad      	ldr	r3, [pc, #692]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d104      	bne.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8003dba:	f7fe fbc5 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
 8003dbe:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003dc0:	f000 bdd1 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d104      	bne.n	8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
          frequency = HAL_RCC_GetSysClockFreq();
 8003dca:	f7fe fa87 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8003dce:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8003dd0:	f000 bdc9 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003dd4:	4ba2      	ldr	r3, [pc, #648]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	d105      	bne.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d102      	bne.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          frequency = HSI_VALUE;
 8003de8:	4b9e      	ldr	r3, [pc, #632]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8003dea:	637b      	str	r3, [r7, #52]	; 0x34
 8003dec:	e011      	b.n	8003e12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003dee:	4b9c      	ldr	r3, [pc, #624]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d106      	bne.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d103      	bne.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
          frequency = LSE_VALUE;
 8003e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34
 8003e08:	e003      	b.n	8003e12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          frequency = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e0e:	f000 bdaa 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8003e12:	f000 bda8 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003e16:	4b92      	ldr	r3, [pc, #584]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e1c:	f003 030c 	and.w	r3, r3, #12
 8003e20:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e28:	f7fe fb7a 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 8003e2c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003e2e:	f000 bd9a 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d104      	bne.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e38:	f7fe fa50 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8003e3c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8003e3e:	f000 bd92 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003e42:	4b87      	ldr	r3, [pc, #540]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d102      	bne.n	8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
          frequency = HSI_VALUE;
 8003e56:	4b83      	ldr	r3, [pc, #524]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8003e58:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5a:	e011      	b.n	8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003e5c:	4b80      	ldr	r3, [pc, #512]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003e5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d106      	bne.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6c:	2b0c      	cmp	r3, #12
 8003e6e:	d103      	bne.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          frequency = LSE_VALUE;
 8003e70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e74:	637b      	str	r3, [r7, #52]	; 0x34
 8003e76:	e003      	b.n	8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e7c:	f000 bd73 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8003e80:	f000 bd71 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003e84:	4b76      	ldr	r3, [pc, #472]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e8e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e96:	f7fe fb43 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 8003e9a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8003e9c:	f000 bd63 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	d104      	bne.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ea6:	f7fe fa19 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8003eaa:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8003eac:	f000 bd5b 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003eb0:	4b6b      	ldr	r3, [pc, #428]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebc:	d105      	bne.n	8003eca <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d102      	bne.n	8003eca <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
          frequency = HSI_VALUE;
 8003ec4:	4b67      	ldr	r3, [pc, #412]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8003ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec8:	e011      	b.n	8003eee <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003eca:	4b65      	ldr	r3, [pc, #404]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d106      	bne.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	2b30      	cmp	r3, #48	; 0x30
 8003edc:	d103      	bne.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = LSE_VALUE;
 8003ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee4:	e003      	b.n	8003eee <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003eea:	f000 bd3c 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8003eee:	f000 bd3a 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003ef2:	4b5b      	ldr	r3, [pc, #364]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ef8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003efc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d104      	bne.n	8003f0e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f04:	f7fe fb0c 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 8003f08:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8003f0a:	f000 bd2c 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	d104      	bne.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f14:	f7fe f9e2 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8003f18:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8003f1a:	f000 bd24 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003f1e:	4b50      	ldr	r3, [pc, #320]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2a:	d105      	bne.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2e:	2b80      	cmp	r3, #128	; 0x80
 8003f30:	d102      	bne.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HSI_VALUE;
 8003f32:	4b4c      	ldr	r3, [pc, #304]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8003f34:	637b      	str	r3, [r7, #52]	; 0x34
 8003f36:	e011      	b.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8003f38:	4b49      	ldr	r3, [pc, #292]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d106      	bne.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	2bc0      	cmp	r3, #192	; 0xc0
 8003f4a:	d103      	bne.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          frequency = LSE_VALUE;
 8003f4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
 8003f52:	e003      	b.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
          frequency = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f58:	f000 bd05 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8003f5c:	f000 bd03 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003f60:	4b3f      	ldr	r3, [pc, #252]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d104      	bne.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f72:	f7fe fad5 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 8003f76:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8003f78:	f000 bcf5 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f82:	d104      	bne.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f84:	f7fe f9aa 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8003f88:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8003f8a:	f000 bcec 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8003f8e:	4b34      	ldr	r3, [pc, #208]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9a:	d106      	bne.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa2:	d102      	bne.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
          frequency = HSI_VALUE;
 8003fa4:	4b2f      	ldr	r3, [pc, #188]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8003fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa8:	e012      	b.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003faa:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d107      	bne.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fbe:	d103      	bne.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
          frequency = LSE_VALUE;
 8003fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc6:	e003      	b.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
          frequency = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fcc:	f000 bccb 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8003fd0:	f000 bcc9 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003fd4:	4b22      	ldr	r3, [pc, #136]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003fd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d104      	bne.n	8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003fe6:	f7fe fac3 	bl	8002570 <HAL_RCC_GetPCLK3Freq>
 8003fea:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003fec:	f000 bcbb 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d104      	bne.n	8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ff6:	f7fe f971 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8003ffa:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8003ffc:	f000 bcb3 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004000:	4b17      	ldr	r3, [pc, #92]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400c:	d105      	bne.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	2b02      	cmp	r3, #2
 8004012:	d102      	bne.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HSI_VALUE;
 8004014:	4b13      	ldr	r3, [pc, #76]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
 8004018:	e036      	b.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800401a:	4b11      	ldr	r3, [pc, #68]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800401c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b02      	cmp	r3, #2
 8004026:	d106      	bne.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	2b03      	cmp	r3, #3
 800402c:	d103      	bne.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
          frequency = LSE_VALUE;
 800402e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004032:	637b      	str	r3, [r7, #52]	; 0x34
 8004034:	e028      	b.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b20      	cmp	r3, #32
 8004040:	d11e      	bne.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	2b04      	cmp	r3, #4
 8004046:	d11b      	bne.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8004054:	4b02      	ldr	r3, [pc, #8]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	0e1b      	lsrs	r3, r3, #24
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	e00a      	b.n	8004076 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004060:	46020c00 	.word	0x46020c00
 8004064:	00f42400 	.word	0x00f42400
 8004068:	4bb0      	ldr	r3, [pc, #704]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800406a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800406e:	041b      	lsls	r3, r3, #16
 8004070:	0e1b      	lsrs	r3, r3, #24
 8004072:	f003 030f 	and.w	r3, r3, #15
 8004076:	4aae      	ldr	r2, [pc, #696]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 8004078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
 800407e:	e003      	b.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004084:	f000 bc6f 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8004088:	f000 bc6d 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_ADCDAC:

        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800408c:	4ba7      	ldr	r3, [pc, #668]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800408e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004092:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004096:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409e:	d104      	bne.n	80040aa <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        {
          frequency = HAL_RCC_GetSysClockFreq();
 80040a0:	f7fe f91c 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 80040a4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADC */
        else
        {
          frequency = 0U;
        }
        break;
 80040a6:	f000 bc5e 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b0:	d108      	bne.n	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80040b2:	f107 0318 	add.w	r3, r7, #24
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff f89e 	bl	80031f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040c0:	f000 bc51 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d104      	bne.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetHCLKFreq();
 80040ca:	f7fe fa0f 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 80040ce:	6378      	str	r0, [r7, #52]	; 0x34
          break;
 80040d0:	f000 bc49 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80040da:	d118      	bne.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80040dc:	4b93      	ldr	r3, [pc, #588]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80040e8:	4b90      	ldr	r3, [pc, #576]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	0f1b      	lsrs	r3, r3, #28
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	e006      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 80040f4:	4b8d      	ldr	r3, [pc, #564]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80040f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040fa:	041b      	lsls	r3, r3, #16
 80040fc:	0f1b      	lsrs	r3, r3, #28
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	4a8b      	ldr	r2, [pc, #556]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 8004104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004108:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800410a:	f000 bc2c 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800410e:	4b87      	ldr	r3, [pc, #540]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800411a:	d106      	bne.n	800412a <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004122:	d102      	bne.n	800412a <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
          frequency = HSE_VALUE;
 8004124:	4b83      	ldr	r3, [pc, #524]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 8004126:	637b      	str	r3, [r7, #52]	; 0x34
 8004128:	e011      	b.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800412a:	4b80      	ldr	r3, [pc, #512]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004136:	d106      	bne.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800413e:	d102      	bne.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
          frequency = HSI_VALUE;
 8004140:	4b7c      	ldr	r3, [pc, #496]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 8004142:	637b      	str	r3, [r7, #52]	; 0x34
 8004144:	e003      	b.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
          frequency = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800414a:	f000 bc0c 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800414e:	f000 bc0a 	b.w	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_MDF1:
        /* Get the current MDF1 source */
        srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004152:	4b76      	ldr	r3, [pc, #472]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004154:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	633b      	str	r3, [r7, #48]	; 0x30
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	2b04      	cmp	r3, #4
 8004162:	d83d      	bhi.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004164:	a201      	add	r2, pc, #4	; (adr r2, 800416c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	080041a1 	.word	0x080041a1
 8004170:	08004181 	.word	0x08004181
 8004174:	08004191 	.word	0x08004191
 8004178:	080041a9 	.word	0x080041a9
 800417c:	080041b1 	.word	0x080041b1

        switch (srcclk)
        {
          case RCC_MDF1CLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe fed1 	bl	8002f2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800418e:	e02a      	b.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_PLL3:

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004190:	f107 030c 	add.w	r3, r7, #12
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff f995 	bl	80034c4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_Q_Frequency;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800419e:	e022      	b.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_HCLK:

            frequency = HAL_RCC_GetHCLKFreq();
 80041a0:	f7fe f9a4 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 80041a4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80041a6:	e01e      	b.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80041a8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80041ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80041ae:	e01a      	b.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80041b0:	4b5e      	ldr	r3, [pc, #376]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80041bc:	4b5b      	ldr	r3, [pc, #364]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	0e1b      	lsrs	r3, r3, #24
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	e006      	b.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80041c8:	4b58      	ldr	r3, [pc, #352]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80041ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	0e1b      	lsrs	r3, r3, #24
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	4a56      	ldr	r2, [pc, #344]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 80041d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80041de:	e002      	b.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          default:

            frequency = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80041e4:	bf00      	nop

        }
        break;
 80041e6:	e3be      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_ADF1:
        /* Get the current ADF1 source */
        srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80041e8:	4b50      	ldr	r3, [pc, #320]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80041ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041ee:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80041f2:	633b      	str	r3, [r7, #48]	; 0x30
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041fa:	d032      	beq.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004202:	d846      	bhi.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800420a:	d026      	beq.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004212:	d83e      	bhi.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800421a:	d012      	beq.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004222:	d836      	bhi.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 8004224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004226:	2b00      	cmp	r3, #0
 8004228:	d013      	beq.n	8004252 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004230:	d12f      	bne.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>

        switch (srcclk)
        {
          case RCC_ADF1CLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe fe78 	bl	8002f2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004240:	e02a      	b.n	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_PLL3:

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004242:	f107 030c 	add.w	r3, r7, #12
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff f93c 	bl	80034c4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_Q_Frequency;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004250:	e022      	b.n	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_HCLK:

            frequency = HAL_RCC_GetHCLKFreq();
 8004252:	f7fe f94b 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8004256:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8004258:	e01e      	b.n	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800425a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800425e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004260:	e01a      	b.n	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004262:	4b32      	ldr	r3, [pc, #200]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d005      	beq.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 800426e:	4b2f      	ldr	r3, [pc, #188]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	0e1b      	lsrs	r3, r3, #24
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	e006      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800427a:	4b2c      	ldr	r3, [pc, #176]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800427c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	0e1b      	lsrs	r3, r3, #24
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	4a29      	ldr	r2, [pc, #164]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 800428a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004290:	e002      	b.n	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          default:

            frequency = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004296:	bf00      	nop
        }
        break;
 8004298:	e365      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800429a:	4b24      	ldr	r3, [pc, #144]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800429c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042a4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d103      	bne.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80042ac:	f7fe f938 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 80042b0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80042b2:	e358      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ba:	d103      	bne.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          frequency = HAL_RCC_GetSysClockFreq();
 80042bc:	f7fe f80e 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 80042c0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80042c2:	e350      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80042c4:	4b19      	ldr	r3, [pc, #100]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d0:	d106      	bne.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d8:	d102      	bne.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
          frequency = HSI_VALUE;
 80042da:	4b16      	ldr	r3, [pc, #88]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042de:	e342      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042e4:	e33f      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80042e6:	4b11      	ldr	r3, [pc, #68]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80042e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042ec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80042f0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d103      	bne.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80042f8:	f7fe f912 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 80042fc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80042fe:	e332      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004306:	d103      	bne.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          frequency = HAL_RCC_GetSysClockFreq();
 8004308:	f7fd ffe8 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800430c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800430e:	e32a      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431c:	d10c      	bne.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004324:	d108      	bne.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
          frequency = HSI_VALUE;
 8004326:	4b03      	ldr	r3, [pc, #12]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 8004328:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800432a:	e31c      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800432c:	46020c00 	.word	0x46020c00
 8004330:	080056e8 	.word	0x080056e8
 8004334:	00f42400 	.word	0x00f42400
          frequency = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800433c:	e313      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800433e:	4ba9      	ldr	r3, [pc, #676]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004344:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004348:	633b      	str	r3, [r7, #48]	; 0x30
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	2bc0      	cmp	r3, #192	; 0xc0
 800434e:	d024      	beq.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	2bc0      	cmp	r3, #192	; 0xc0
 8004354:	d839      	bhi.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	2b80      	cmp	r3, #128	; 0x80
 800435a:	d00d      	beq.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	2b80      	cmp	r3, #128	; 0x80
 8004360:	d833      	bhi.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	2b40      	cmp	r3, #64	; 0x40
 800436c:	d011      	beq.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
 800436e:	e02c      	b.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>

        switch (srcclk)
        {
          case RCC_I2C3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004370:	f7fe f8fe 	bl	8002570 <HAL_RCC_GetPCLK3Freq>
 8004374:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8004376:	e02b      	b.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_HSI:
          {
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004378:	4b9a      	ldr	r3, [pc, #616]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004384:	d102      	bne.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
            {
              frequency = HSI_VALUE;
 8004386:	4b98      	ldr	r3, [pc, #608]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 8004388:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800438a:	e021      	b.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
              frequency = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004390:	e01e      	b.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_SYSCLK:
          {
            frequency = HAL_RCC_GetSysClockFreq();
 8004392:	f7fd ffa3 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8004396:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8004398:	e01a      	b.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_MSIK:
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800439a:	4b92      	ldr	r3, [pc, #584]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80043a6:	4b8f      	ldr	r3, [pc, #572]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0f1b      	lsrs	r3, r3, #28
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	e006      	b.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc30>
 80043b2:	4b8c      	ldr	r3, [pc, #560]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80043b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043b8:	041b      	lsls	r3, r3, #16
 80043ba:	0f1b      	lsrs	r3, r3, #28
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	4a8a      	ldr	r2, [pc, #552]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 80043c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80043c8:	e002      	b.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          default:
          {
            frequency = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80043ce:	bf00      	nop
          }
        }
        break;
 80043d0:	e2c9      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80043d2:	4b84      	ldr	r3, [pc, #528]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80043d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043dc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d103      	bne.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80043e4:	f7fe f89c 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 80043e8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80043ea:	e2bc      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80043ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043f2:	d103      	bne.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
          frequency = HAL_RCC_GetSysClockFreq();
 80043f4:	f7fd ff72 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 80043f8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80043fa:	e2b4      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80043fc:	4b79      	ldr	r3, [pc, #484]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004408:	d106      	bne.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xc88>
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004410:	d102      	bne.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xc88>
          frequency = HSI_VALUE;
 8004412:	4b75      	ldr	r3, [pc, #468]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 8004414:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004416:	e2a6      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800441c:	e2a3      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM34:
        /* Get the current LPTIM34 source */
        srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800441e:	4b71      	ldr	r3, [pc, #452]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004428:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	2b00      	cmp	r3, #0
 800442e:	d117      	bne.n	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004430:	4b6c      	ldr	r3, [pc, #432]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
 800443c:	4b69      	ldr	r3, [pc, #420]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	0e1b      	lsrs	r3, r3, #24
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	e006      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
 8004448:	4b66      	ldr	r3, [pc, #408]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800444a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800444e:	041b      	lsls	r3, r3, #16
 8004450:	0e1b      	lsrs	r3, r3, #24
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	4a65      	ldr	r2, [pc, #404]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 8004458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800445c:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM34 */
        else
        {
          frequency = 0U;
        }
        break;
 800445e:	e282      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004460:	4b60      	ldr	r3, [pc, #384]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800446a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800446e:	d107      	bne.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004476:	d103      	bne.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
          frequency = LSI_VALUE;
 8004478:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800447c:	637b      	str	r3, [r7, #52]	; 0x34
 800447e:	e01f      	b.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004480:	4b58      	ldr	r3, [pc, #352]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448c:	d106      	bne.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004494:	d102      	bne.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
          frequency = HSI_VALUE;
 8004496:	4b54      	ldr	r3, [pc, #336]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 8004498:	637b      	str	r3, [r7, #52]	; 0x34
 800449a:	e011      	b.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800449c:	4b51      	ldr	r3, [pc, #324]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800449e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d107      	bne.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b0:	d103      	bne.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = LSE_VALUE;
 80044b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b6:	637b      	str	r3, [r7, #52]	; 0x34
 80044b8:	e002      	b.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
          frequency = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044be:	e252      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80044c0:	e251      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80044c2:	4b48      	ldr	r3, [pc, #288]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80044c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044cc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d117      	bne.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80044d4:	4b43      	ldr	r3, [pc, #268]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>
 80044e0:	4b40      	ldr	r3, [pc, #256]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	0e1b      	lsrs	r3, r3, #24
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	e006      	b.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
 80044ec:	4b3d      	ldr	r3, [pc, #244]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80044ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	0e1b      	lsrs	r3, r3, #24
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	4a3c      	ldr	r2, [pc, #240]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 80044fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004500:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004502:	e230      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004504:	4b37      	ldr	r3, [pc, #220]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800450a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800450e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004512:	d107      	bne.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451a:	d103      	bne.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
          frequency = LSI_VALUE;
 800451c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004520:	637b      	str	r3, [r7, #52]	; 0x34
 8004522:	e01f      	b.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004524:	4b2f      	ldr	r3, [pc, #188]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800452c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004530:	d106      	bne.n	8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004538:	d102      	bne.n	8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
          frequency = HSI_VALUE;
 800453a:	4b2b      	ldr	r3, [pc, #172]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 800453c:	637b      	str	r3, [r7, #52]	; 0x34
 800453e:	e011      	b.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004540:	4b28      	ldr	r3, [pc, #160]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b02      	cmp	r3, #2
 800454c:	d107      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004554:	d103      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
          frequency = LSE_VALUE;
 8004556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
 800455c:	e002      	b.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
          frequency = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004562:	e200      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8004564:	e1ff      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004566:	4b1f      	ldr	r3, [pc, #124]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800456c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004570:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	2b00      	cmp	r3, #0
 8004576:	d103      	bne.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004578:	f7fd ffd2 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 800457c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM2 */
        else
        {
          frequency = 0U;
        }
        break;
 800457e:	e1f2      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004580:	4b18      	ldr	r3, [pc, #96]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004586:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800458a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800458e:	d107      	bne.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004596:	d103      	bne.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
          frequency = LSI_VALUE;
 8004598:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800459c:	637b      	str	r3, [r7, #52]	; 0x34
 800459e:	e01f      	b.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80045a0:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ac:	d106      	bne.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045b4:	d102      	bne.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HSI_VALUE;
 80045b6:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 80045b8:	637b      	str	r3, [r7, #52]	; 0x34
 80045ba:	e011      	b.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80045bc:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80045be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d107      	bne.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80045d0:	d103      	bne.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = LSE_VALUE;
 80045d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d6:	637b      	str	r3, [r7, #52]	; 0x34
 80045d8:	e002      	b.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
          frequency = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045de:	e1c2      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80045e0:	e1c1      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80045e2:	bf00      	nop
 80045e4:	46020c00 	.word	0x46020c00
 80045e8:	00f42400 	.word	0x00f42400
 80045ec:	080056e8 	.word	0x080056e8

      case RCC_PERIPHCLK_FDCAN1:
        /* Get the current FDCAN1 kernel source */
        srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80045f0:	4bb0      	ldr	r3, [pc, #704]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80045f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80045fa:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80045fc:	4bad      	ldr	r3, [pc, #692]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004608:	d105      	bne.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	2b00      	cmp	r3, #0
 800460e:	d102      	bne.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
        {
          frequency = HSE_VALUE;
 8004610:	4ba9      	ldr	r3, [pc, #676]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8004612:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004614:	e1a7      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800461c:	d107      	bne.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800461e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe fc82 	bl	8002f2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800462c:	e19b      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004634:	d107      	bne.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0xeb6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004636:	f107 0318 	add.w	r3, r7, #24
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe fddc 	bl	80031f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004644:	e18f      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800464a:	e18c      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800464c:	4b99      	ldr	r3, [pc, #612]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800464e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004652:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004656:	633b      	str	r3, [r7, #48]	; 0x30
 8004658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800465e:	d028      	beq.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004666:	d83c      	bhi.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800466e:	d013      	beq.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 8004670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004672:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004676:	d834      	bhi.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467a:	2b00      	cmp	r3, #0
 800467c:	d004      	beq.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004684:	d004      	beq.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8004686:	e02c      	b.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PCLK2:

            frequency = HAL_RCC_GetPCLK2Freq();
 8004688:	f7fd ff5e 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
 800468c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800468e:	e02b      	b.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 8004690:	f7fd fe24 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8004694:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8004696:	e027      	b.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004698:	4b86      	ldr	r3, [pc, #536]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a4:	d102      	bne.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
            {
              frequency = HSI_VALUE;
 80046a6:	4b84      	ldr	r3, [pc, #528]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80046a8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 80046aa:	e01d      	b.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>
              frequency = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80046b0:	e01a      	b.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80046b2:	4b80      	ldr	r3, [pc, #512]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80046be:	4b7d      	ldr	r3, [pc, #500]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	0e1b      	lsrs	r3, r3, #24
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	e006      	b.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 80046ca:	4b7a      	ldr	r3, [pc, #488]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80046cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046d0:	041b      	lsls	r3, r3, #16
 80046d2:	0e1b      	lsrs	r3, r3, #24
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	4a78      	ldr	r2, [pc, #480]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 80046da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80046e0:	e002      	b.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          default:

            frequency = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80046e6:	bf00      	nop

        }
        break;
 80046e8:	e13d      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80046ea:	4b72      	ldr	r3, [pc, #456]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80046ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046f4:	633b      	str	r3, [r7, #48]	; 0x30
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046fc:	d028      	beq.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0xfc0>
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004704:	d83c      	bhi.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800470c:	d013      	beq.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0xfa6>
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004714:	d834      	bhi.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0xf96>
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004722:	d004      	beq.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0xf9e>
 8004724:	e02c      	b.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PCLK1:

            frequency = HAL_RCC_GetPCLK1Freq();
 8004726:	f7fd fefb 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 800472a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800472c:	e02b      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 800472e:	f7fd fdd5 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8004732:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8004734:	e027      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004736:	4b5f      	ldr	r3, [pc, #380]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004742:	d102      	bne.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
            {
              frequency = HSI_VALUE;
 8004744:	4b5c      	ldr	r3, [pc, #368]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8004746:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8004748:	e01d      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xff6>
              frequency = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800474e:	e01a      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004750:	4b58      	ldr	r3, [pc, #352]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800475c:	4b55      	ldr	r3, [pc, #340]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	0e1b      	lsrs	r3, r3, #24
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	e006      	b.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0xfe6>
 8004768:	4b52      	ldr	r3, [pc, #328]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800476a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	0e1b      	lsrs	r3, r3, #24
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	4a51      	ldr	r2, [pc, #324]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 8004778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800477e:	e002      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          default:

            frequency = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004784:	bf00      	nop

        }
        break;
 8004786:	e0ee      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004788:	4b4a      	ldr	r3, [pc, #296]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800478a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800478e:	f003 0318 	and.w	r3, r3, #24
 8004792:	633b      	str	r3, [r7, #48]	; 0x30
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	2b18      	cmp	r3, #24
 8004798:	d861      	bhi.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
 800479a:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	08004805 	.word	0x08004805
 80047a4:	0800485f 	.word	0x0800485f
 80047a8:	0800485f 	.word	0x0800485f
 80047ac:	0800485f 	.word	0x0800485f
 80047b0:	0800485f 	.word	0x0800485f
 80047b4:	0800485f 	.word	0x0800485f
 80047b8:	0800485f 	.word	0x0800485f
 80047bc:	0800485f 	.word	0x0800485f
 80047c0:	0800480d 	.word	0x0800480d
 80047c4:	0800485f 	.word	0x0800485f
 80047c8:	0800485f 	.word	0x0800485f
 80047cc:	0800485f 	.word	0x0800485f
 80047d0:	0800485f 	.word	0x0800485f
 80047d4:	0800485f 	.word	0x0800485f
 80047d8:	0800485f 	.word	0x0800485f
 80047dc:	0800485f 	.word	0x0800485f
 80047e0:	08004815 	.word	0x08004815
 80047e4:	0800485f 	.word	0x0800485f
 80047e8:	0800485f 	.word	0x0800485f
 80047ec:	0800485f 	.word	0x0800485f
 80047f0:	0800485f 	.word	0x0800485f
 80047f4:	0800485f 	.word	0x0800485f
 80047f8:	0800485f 	.word	0x0800485f
 80047fc:	0800485f 	.word	0x0800485f
 8004800:	0800482f 	.word	0x0800482f
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PCLK3:

            frequency = HAL_RCC_GetPCLK3Freq();
 8004804:	f7fd feb4 	bl	8002570 <HAL_RCC_GetPCLK3Freq>
 8004808:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800480a:	e02b      	b.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 800480c:	f7fd fd66 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8004810:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8004812:	e027      	b.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004814:	4b27      	ldr	r3, [pc, #156]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004820:	d102      	bne.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
            {
              frequency = HSI_VALUE;
 8004822:	4b25      	ldr	r3, [pc, #148]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8004824:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8004826:	e01d      	b.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
              frequency = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800482c:	e01a      	b.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800482e:	4b21      	ldr	r3, [pc, #132]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x10b6>
 800483a:	4b1e      	ldr	r3, [pc, #120]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	0e1b      	lsrs	r3, r3, #24
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	e006      	b.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8004846:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004848:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800484c:	041b      	lsls	r3, r3, #16
 800484e:	0e1b      	lsrs	r3, r3, #24
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	4a19      	ldr	r2, [pc, #100]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 8004856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800485c:	e002      	b.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          default:

            frequency = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004862:	bf00      	nop
        }
        break;
 8004864:	e07f      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004866:	4b13      	ldr	r3, [pc, #76]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004868:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800486c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004870:	633b      	str	r3, [r7, #48]	; 0x30
 8004872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004874:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004878:	d013      	beq.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004880:	d842      	bhi.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004888:	d01a      	beq.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1130>
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004890:	d83a      	bhi.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01b      	beq.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1140>
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800489e:	d01b      	beq.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1148>
 80048a0:	e032      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_PLL2:

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048a2:	f107 0318 	add.w	r3, r7, #24
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe fca6 	bl	80031f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_Q_Frequency;
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80048b0:	e02d      	b.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80048b2:	bf00      	nop
 80048b4:	46020c00 	.word	0x46020c00
 80048b8:	00f42400 	.word	0x00f42400
 80048bc:	080056e8 	.word	0x080056e8

          case RCC_OSPICLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fe fb31 	bl	8002f2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80048ce:	e01e      	b.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          case RCC_OSPICLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 80048d0:	f7fd fd04 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 80048d4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80048d6:	e01a      	b.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          case RCC_OSPICLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80048d8:	4b25      	ldr	r3, [pc, #148]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1160>
 80048e4:	4b22      	ldr	r3, [pc, #136]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	0e1b      	lsrs	r3, r3, #24
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	e006      	b.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x116e>
 80048f0:	4b1f      	ldr	r3, [pc, #124]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 80048f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048f6:	041b      	lsls	r3, r3, #16
 80048f8:	0e1b      	lsrs	r3, r3, #24
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	4a1d      	ldr	r2, [pc, #116]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 8004900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004904:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004906:	e002      	b.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          default:

            frequency = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800490c:	bf00      	nop
        }
        break;
 800490e:	e02a      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_DAC1:
        /* Get the current DAC1 kernel source */
        srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8004910:	4b17      	ldr	r3, [pc, #92]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 8004912:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004916:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800491a:	633b      	str	r3, [r7, #48]	; 0x30
        /* Check if LSE is ready and if DAC1 clock selection is LSE */
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800491c:	4b14      	ldr	r3, [pc, #80]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800491e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b02      	cmp	r3, #2
 8004928:	d106      	bne.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	2b00      	cmp	r3, #0
 800492e:	d103      	bne.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
        {
          frequency = LSE_VALUE;
 8004930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004934:	637b      	str	r3, [r7, #52]	; 0x34
 8004936:	e012      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
        }
        /* Check if LSI is ready and if DAC1 clock selection is LSI */
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8004938:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800493a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800493e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004946:	d107      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494e:	d103      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
        {
          frequency = LSI_VALUE;
 8004950:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004954:	637b      	str	r3, [r7, #52]	; 0x34
 8004956:	e002      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
        }
        /* Clock not enabled for DAC1*/
        else
        {
          frequency = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800495c:	e003      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800495e:	e002      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      default:
         frequency = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004964:	bf00      	nop
    }
  }
  return (frequency);
 8004966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004968:	4618      	mov	r0, r3
 800496a:	3738      	adds	r7, #56	; 0x38
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	46020c00 	.word	0x46020c00
 8004974:	080056e8 	.word	0x080056e8

08004978 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004980:	4b47      	ldr	r3, [pc, #284]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a46      	ldr	r2, [pc, #280]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 8004986:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800498a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800498c:	f7fc f904 	bl	8000b98 <HAL_GetTick>
 8004990:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004992:	e008      	b.n	80049a6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004994:	f7fc f900 	bl	8000b98 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e077      	b.n	8004a96 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049a6:	4b3e      	ldr	r3, [pc, #248]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80049b2:	4b3b      	ldr	r3, [pc, #236]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049ba:	f023 0303 	bic.w	r3, r3, #3
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6811      	ldr	r1, [r2, #0]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6852      	ldr	r2, [r2, #4]
 80049c6:	3a01      	subs	r2, #1
 80049c8:	0212      	lsls	r2, r2, #8
 80049ca:	430a      	orrs	r2, r1
 80049cc:	4934      	ldr	r1, [pc, #208]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	62cb      	str	r3, [r1, #44]	; 0x2c
 80049d2:	4b33      	ldr	r3, [pc, #204]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 80049d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d6:	4b33      	ldr	r3, [pc, #204]	; (8004aa4 <RCCEx_PLL2_Config+0x12c>)
 80049d8:	4013      	ands	r3, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6892      	ldr	r2, [r2, #8]
 80049de:	3a01      	subs	r2, #1
 80049e0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68d2      	ldr	r2, [r2, #12]
 80049e8:	3a01      	subs	r2, #1
 80049ea:	0252      	lsls	r2, r2, #9
 80049ec:	b292      	uxth	r2, r2
 80049ee:	4311      	orrs	r1, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6912      	ldr	r2, [r2, #16]
 80049f4:	3a01      	subs	r2, #1
 80049f6:	0412      	lsls	r2, r2, #16
 80049f8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80049fc:	4311      	orrs	r1, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6952      	ldr	r2, [r2, #20]
 8004a02:	3a01      	subs	r2, #1
 8004a04:	0612      	lsls	r2, r2, #24
 8004a06:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	4924      	ldr	r1, [pc, #144]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004a12:	4b23      	ldr	r3, [pc, #140]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	f023 020c 	bic.w	r2, r3, #12
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	4920      	ldr	r1, [pc, #128]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004a24:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 8004a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	491c      	ldr	r1, [pc, #112]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8004a32:	4b1b      	ldr	r3, [pc, #108]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	4a1a      	ldr	r2, [pc, #104]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 8004a38:	f023 0310 	bic.w	r3, r3, #16
 8004a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a3e:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a46:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	69d2      	ldr	r2, [r2, #28]
 8004a4e:	00d2      	lsls	r2, r2, #3
 8004a50:	4913      	ldr	r1, [pc, #76]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	4a11      	ldr	r2, [pc, #68]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 8004a5c:	f043 0310 	orr.w	r3, r3, #16
 8004a60:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8004a62:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a0e      	ldr	r2, [pc, #56]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 8004a68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a6c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a6e:	f7fc f893 	bl	8000b98 <HAL_GetTick>
 8004a72:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a74:	e008      	b.n	8004a88 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a76:	f7fc f88f 	bl	8000b98 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e006      	b.n	8004a96 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <RCCEx_PLL2_Config+0x128>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0f0      	beq.n	8004a76 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0

}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	46020c00 	.word	0x46020c00
 8004aa4:	80800000 	.word	0x80800000

08004aa8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters N & P & optionally M as well as PLL3 output clock(s)
  * @note   PLL3 is temporary disable to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004ab0:	4b47      	ldr	r3, [pc, #284]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a46      	ldr	r2, [pc, #280]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004abc:	f7fc f86c 	bl	8000b98 <HAL_GetTick>
 8004ac0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ac2:	e008      	b.n	8004ad6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ac4:	f7fc f868 	bl	8000b98 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e077      	b.n	8004bc6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ad6:	4b3e      	ldr	r3, [pc, #248]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004ae2:	4b3b      	ldr	r3, [pc, #236]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004aea:	f023 0303 	bic.w	r3, r3, #3
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6811      	ldr	r1, [r2, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6852      	ldr	r2, [r2, #4]
 8004af6:	3a01      	subs	r2, #1
 8004af8:	0212      	lsls	r2, r2, #8
 8004afa:	430a      	orrs	r2, r1
 8004afc:	4934      	ldr	r1, [pc, #208]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	630b      	str	r3, [r1, #48]	; 0x30
 8004b02:	4b33      	ldr	r3, [pc, #204]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b06:	4b33      	ldr	r3, [pc, #204]	; (8004bd4 <RCCEx_PLL3_Config+0x12c>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6892      	ldr	r2, [r2, #8]
 8004b0e:	3a01      	subs	r2, #1
 8004b10:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	68d2      	ldr	r2, [r2, #12]
 8004b18:	3a01      	subs	r2, #1
 8004b1a:	0252      	lsls	r2, r2, #9
 8004b1c:	b292      	uxth	r2, r2
 8004b1e:	4311      	orrs	r1, r2
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6912      	ldr	r2, [r2, #16]
 8004b24:	3a01      	subs	r2, #1
 8004b26:	0412      	lsls	r2, r2, #16
 8004b28:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004b2c:	4311      	orrs	r1, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6952      	ldr	r2, [r2, #20]
 8004b32:	3a01      	subs	r2, #1
 8004b34:	0612      	lsls	r2, r2, #24
 8004b36:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	4924      	ldr	r1, [pc, #144]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8004b42:	4b23      	ldr	r3, [pc, #140]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	f023 020c 	bic.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	4920      	ldr	r1, [pc, #128]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004b54:	4b1e      	ldr	r3, [pc, #120]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	491c      	ldr	r1, [pc, #112]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8004b62:	4b1b      	ldr	r3, [pc, #108]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	4a1a      	ldr	r2, [pc, #104]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004b68:	f023 0310 	bic.w	r3, r3, #16
 8004b6c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b6e:	4b18      	ldr	r3, [pc, #96]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	69d2      	ldr	r2, [r2, #28]
 8004b7e:	00d2      	lsls	r2, r2, #3
 8004b80:	4913      	ldr	r1, [pc, #76]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8004b86:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	4a11      	ldr	r2, [pc, #68]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004b8c:	f043 0310 	orr.w	r3, r3, #16
 8004b90:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004b92:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a0e      	ldr	r2, [pc, #56]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b9e:	f7fb fffb 	bl	8000b98 <HAL_GetTick>
 8004ba2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ba4:	e008      	b.n	8004bb8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ba6:	f7fb fff7 	bl	8000b98 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e006      	b.n	8004bc6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <RCCEx_PLL3_Config+0x128>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	46020c00 	.word	0x46020c00
 8004bd4:	80800000 	.word	0x80800000

08004bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e042      	b.n	8004c70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d106      	bne.n	8004c02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7fb fec5 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2224      	movs	r2, #36	; 0x24
 8004c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0201 	bic.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f8c2 	bl	8004da4 <UART_SetConfig>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e022      	b.n	8004c70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fa38 	bl	80050a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fabf 	bl	80051ec <UART_CheckIdleState>
 8004c6e:	4603      	mov	r3, r0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08a      	sub	sp, #40	; 0x28
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	f040 8083 	bne.w	8004d9a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_UART_Transmit+0x28>
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e07b      	b.n	8004d9c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_UART_Transmit+0x3a>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e074      	b.n	8004d9c <HAL_UART_Transmit+0x124>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2221      	movs	r2, #33	; 0x21
 8004cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cca:	f7fb ff65 	bl	8000b98 <HAL_GetTick>
 8004cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	88fa      	ldrh	r2, [r7, #6]
 8004cd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	88fa      	ldrh	r2, [r7, #6]
 8004cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce8:	d108      	bne.n	8004cfc <HAL_UART_Transmit+0x84>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	61bb      	str	r3, [r7, #24]
 8004cfa:	e003      	b.n	8004d04 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004d0c:	e02c      	b.n	8004d68 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2200      	movs	r2, #0
 8004d16:	2180      	movs	r1, #128	; 0x80
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fab2 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e039      	b.n	8004d9c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10b      	bne.n	8004d46 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	3302      	adds	r3, #2
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	e007      	b.n	8004d56 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	781a      	ldrb	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	3301      	adds	r3, #1
 8004d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1cc      	bne.n	8004d0e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	2140      	movs	r1, #64	; 0x40
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fa7f 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e006      	b.n	8004d9c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	e000      	b.n	8004d9c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004d9a:	2302      	movs	r3, #2
  }
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3720      	adds	r7, #32
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da4:	b5b0      	push	{r4, r5, r7, lr}
 8004da6:	b08a      	sub	sp, #40	; 0x28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	77fb      	strb	r3, [r7, #31]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a94      	ldr	r2, [pc, #592]	; (8005008 <UART_SetConfig+0x264>)
 8004db6:	4293      	cmp	r3, r2
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4b8d      	ldr	r3, [pc, #564]	; (800500c <UART_SetConfig+0x268>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6812      	ldr	r2, [r2, #0]
 8004dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a80      	ldr	r2, [pc, #512]	; (8005008 <UART_SetConfig+0x264>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d009      	beq.n	8004e1e <UART_SetConfig+0x7a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a80      	ldr	r2, [pc, #512]	; (8005010 <UART_SetConfig+0x26c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d004      	beq.n	8004e1e <UART_SetConfig+0x7a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004e28:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e32:	430b      	orrs	r3, r1
 8004e34:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	f023 010f 	bic.w	r1, r3, #15
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a70      	ldr	r2, [pc, #448]	; (8005014 <UART_SetConfig+0x270>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d102      	bne.n	8004e5c <UART_SetConfig+0xb8>
 8004e56:	2301      	movs	r3, #1
 8004e58:	623b      	str	r3, [r7, #32]
 8004e5a:	e029      	b.n	8004eb0 <UART_SetConfig+0x10c>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a6d      	ldr	r2, [pc, #436]	; (8005018 <UART_SetConfig+0x274>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d102      	bne.n	8004e6c <UART_SetConfig+0xc8>
 8004e66:	2302      	movs	r3, #2
 8004e68:	623b      	str	r3, [r7, #32]
 8004e6a:	e021      	b.n	8004eb0 <UART_SetConfig+0x10c>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a6a      	ldr	r2, [pc, #424]	; (800501c <UART_SetConfig+0x278>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d102      	bne.n	8004e7c <UART_SetConfig+0xd8>
 8004e76:	2304      	movs	r3, #4
 8004e78:	623b      	str	r3, [r7, #32]
 8004e7a:	e019      	b.n	8004eb0 <UART_SetConfig+0x10c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a67      	ldr	r2, [pc, #412]	; (8005020 <UART_SetConfig+0x27c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d102      	bne.n	8004e8c <UART_SetConfig+0xe8>
 8004e86:	2308      	movs	r3, #8
 8004e88:	623b      	str	r3, [r7, #32]
 8004e8a:	e011      	b.n	8004eb0 <UART_SetConfig+0x10c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a64      	ldr	r2, [pc, #400]	; (8005024 <UART_SetConfig+0x280>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d102      	bne.n	8004e9c <UART_SetConfig+0xf8>
 8004e96:	2310      	movs	r3, #16
 8004e98:	623b      	str	r3, [r7, #32]
 8004e9a:	e009      	b.n	8004eb0 <UART_SetConfig+0x10c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a59      	ldr	r2, [pc, #356]	; (8005008 <UART_SetConfig+0x264>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d102      	bne.n	8004eac <UART_SetConfig+0x108>
 8004ea6:	2320      	movs	r3, #32
 8004ea8:	623b      	str	r3, [r7, #32]
 8004eaa:	e001      	b.n	8004eb0 <UART_SetConfig+0x10c>
 8004eac:	2300      	movs	r3, #0
 8004eae:	623b      	str	r3, [r7, #32]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a54      	ldr	r2, [pc, #336]	; (8005008 <UART_SetConfig+0x264>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d004      	beq.n	8004ec4 <UART_SetConfig+0x120>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a54      	ldr	r2, [pc, #336]	; (8005010 <UART_SetConfig+0x26c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d163      	bne.n	8004f8c <UART_SetConfig+0x1e8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004ec4:	6a38      	ldr	r0, [r7, #32]
 8004ec6:	f7fe fc63 	bl	8003790 <HAL_RCCEx_GetPeriphCLKFreq>
 8004eca:	61b8      	str	r0, [r7, #24]

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80d4 	beq.w	800507c <UART_SetConfig+0x2d8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	4a53      	ldr	r2, [pc, #332]	; (8005028 <UART_SetConfig+0x284>)
 8004eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	4413      	add	r3, r2
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d305      	bcc.n	8004f04 <UART_SetConfig+0x160>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d902      	bls.n	8004f0a <UART_SetConfig+0x166>
      {
        ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	77fb      	strb	r3, [r7, #31]
 8004f08:	e03f      	b.n	8004f8a <UART_SetConfig+0x1e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f04f 0100 	mov.w	r1, #0
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	4a44      	ldr	r2, [pc, #272]	; (8005028 <UART_SetConfig+0x284>)
 8004f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	f7fb f9af 	bl	8000284 <__aeabi_uldivmod>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	020b      	lsls	r3, r1, #8
 8004f38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f3c:	0202      	lsls	r2, r0, #8
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	6849      	ldr	r1, [r1, #4]
 8004f42:	0849      	lsrs	r1, r1, #1
 8004f44:	4608      	mov	r0, r1
 8004f46:	f04f 0100 	mov.w	r1, #0
 8004f4a:	1814      	adds	r4, r2, r0
 8004f4c:	eb43 0501 	adc.w	r5, r3, r1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	461a      	mov	r2, r3
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	f7fb f991 	bl	8000284 <__aeabi_uldivmod>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4613      	mov	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f70:	d308      	bcc.n	8004f84 <UART_SetConfig+0x1e0>
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f78:	d204      	bcs.n	8004f84 <UART_SetConfig+0x1e0>
        {
          huart->Instance->BRR = usartdiv;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	60da      	str	r2, [r3, #12]
 8004f82:	e002      	b.n	8004f8a <UART_SetConfig+0x1e6>
        }
        else
        {
          ret = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	77fb      	strb	r3, [r7, #31]
    if (pclk != 0U)
 8004f88:	e078      	b.n	800507c <UART_SetConfig+0x2d8>
 8004f8a:	e077      	b.n	800507c <UART_SetConfig+0x2d8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f94:	d14a      	bne.n	800502c <UART_SetConfig+0x288>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004f96:	6a38      	ldr	r0, [r7, #32]
 8004f98:	f7fe fbfa 	bl	8003790 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f9c:	61b8      	str	r0, [r7, #24]

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d06b      	beq.n	800507c <UART_SetConfig+0x2d8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	4a1f      	ldr	r2, [pc, #124]	; (8005028 <UART_SetConfig+0x284>)
 8004faa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fb6:	005a      	lsls	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	085b      	lsrs	r3, r3, #1
 8004fbe:	441a      	add	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	617b      	str	r3, [r7, #20]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2b0f      	cmp	r3, #15
 8004fd0:	d916      	bls.n	8005000 <UART_SetConfig+0x25c>
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd8:	d212      	bcs.n	8005000 <UART_SetConfig+0x25c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f023 030f 	bic.w	r3, r3, #15
 8004fe2:	827b      	strh	r3, [r7, #18]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	085b      	lsrs	r3, r3, #1
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	8a7b      	ldrh	r3, [r7, #18]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	827b      	strh	r3, [r7, #18]
        huart->Instance->BRR = brrtemp;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	8a7a      	ldrh	r2, [r7, #18]
 8004ffc:	60da      	str	r2, [r3, #12]
 8004ffe:	e03d      	b.n	800507c <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	77fb      	strb	r3, [r7, #31]
 8005004:	e03a      	b.n	800507c <UART_SetConfig+0x2d8>
 8005006:	bf00      	nop
 8005008:	46002400 	.word	0x46002400
 800500c:	cfff69f3 	.word	0xcfff69f3
 8005010:	56002400 	.word	0x56002400
 8005014:	40013800 	.word	0x40013800
 8005018:	40004400 	.word	0x40004400
 800501c:	40004800 	.word	0x40004800
 8005020:	40004c00 	.word	0x40004c00
 8005024:	40005000 	.word	0x40005000
 8005028:	080057a8 	.word	0x080057a8
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800502c:	6a38      	ldr	r0, [r7, #32]
 800502e:	f7fe fbaf 	bl	8003790 <HAL_RCCEx_GetPeriphCLKFreq>
 8005032:	61b8      	str	r0, [r7, #24]

    if (pclk != 0U)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d020      	beq.n	800507c <UART_SetConfig+0x2d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	4a19      	ldr	r2, [pc, #100]	; (80050a4 <UART_SetConfig+0x300>)
 8005040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005044:	461a      	mov	r2, r3
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	fbb3 f2f2 	udiv	r2, r3, r2
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	085b      	lsrs	r3, r3, #1
 8005052:	441a      	add	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	fbb2 f3f3 	udiv	r3, r2, r3
 800505c:	b29b      	uxth	r3, r3
 800505e:	617b      	str	r3, [r7, #20]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b0f      	cmp	r3, #15
 8005064:	d908      	bls.n	8005078 <UART_SetConfig+0x2d4>
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800506c:	d204      	bcs.n	8005078 <UART_SetConfig+0x2d4>
      {
        huart->Instance->BRR = usartdiv;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	60da      	str	r2, [r3, #12]
 8005076:	e001      	b.n	800507c <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	77fb      	strb	r3, [r7, #31]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005098:	7ffb      	ldrb	r3, [r7, #31]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3728      	adds	r7, #40	; 0x28
 800509e:	46bd      	mov	sp, r7
 80050a0:	bdb0      	pop	{r4, r5, r7, pc}
 80050a2:	bf00      	nop
 80050a4:	080057a8 	.word	0x080057a8

080050a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01a      	beq.n	80051be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a6:	d10a      	bne.n	80051be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]
  }
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051fc:	f7fb fccc 	bl	8000b98 <HAL_GetTick>
 8005200:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b08      	cmp	r3, #8
 800520e:	d10e      	bne.n	800522e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f82f 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e025      	b.n	800527a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b04      	cmp	r3, #4
 800523a:	d10e      	bne.n	800525a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800523c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f819 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e00f      	b.n	800527a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b09c      	sub	sp, #112	; 0x70
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005292:	e0a9      	b.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529a:	f000 80a5 	beq.w	80053e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529e:	f7fb fc7b 	bl	8000b98 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d302      	bcc.n	80052b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80052ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d140      	bne.n	8005336 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052bc:	e853 3f00 	ldrex	r3, [r3]
 80052c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052c8:	667b      	str	r3, [r7, #100]	; 0x64
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e6      	bne.n	80052b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3308      	adds	r3, #8
 80052ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f8:	f023 0301 	bic.w	r3, r3, #1
 80052fc:	663b      	str	r3, [r7, #96]	; 0x60
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3308      	adds	r3, #8
 8005304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005306:	64ba      	str	r2, [r7, #72]	; 0x48
 8005308:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800530c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e5      	bne.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2220      	movs	r2, #32
 8005326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e069      	b.n	800540a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d051      	beq.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800534e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005352:	d149      	bne.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800535c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005372:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
 800537e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e6      	bne.n	800535e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3308      	adds	r3, #8
 8005396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	613b      	str	r3, [r7, #16]
   return(result);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f023 0301 	bic.w	r3, r3, #1
 80053a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053b0:	623a      	str	r2, [r7, #32]
 80053b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	69f9      	ldr	r1, [r7, #28]
 80053b6:	6a3a      	ldr	r2, [r7, #32]
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e5      	bne.n	8005390 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e010      	b.n	800540a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69da      	ldr	r2, [r3, #28]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4013      	ands	r3, r2
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	429a      	cmp	r2, r3
 8005404:	f43f af46 	beq.w	8005294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3770      	adds	r7, #112	; 0x70
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_UARTEx_DisableFifoMode+0x16>
 8005424:	2302      	movs	r3, #2
 8005426:	e027      	b.n	8005478 <HAL_UARTEx_DisableFifoMode+0x66>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2224      	movs	r2, #36	; 0x24
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0201 	bic.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005456:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005498:	2302      	movs	r3, #2
 800549a:	e02d      	b.n	80054f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2224      	movs	r2, #36	; 0x24
 80054a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0201 	bic.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f84f 	bl	800557c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005514:	2302      	movs	r3, #2
 8005516:	e02d      	b.n	8005574 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2224      	movs	r2, #36	; 0x24
 8005524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f811 	bl	800557c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2220      	movs	r2, #32
 8005566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005588:	2b00      	cmp	r3, #0
 800558a:	d108      	bne.n	800559e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800559c:	e031      	b.n	8005602 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800559e:	2308      	movs	r3, #8
 80055a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055a2:	2308      	movs	r3, #8
 80055a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	0e5b      	lsrs	r3, r3, #25
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	0f5b      	lsrs	r3, r3, #29
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055c6:	7bbb      	ldrb	r3, [r7, #14]
 80055c8:	7b3a      	ldrb	r2, [r7, #12]
 80055ca:	4911      	ldr	r1, [pc, #68]	; (8005610 <UARTEx_SetNbDataToProcess+0x94>)
 80055cc:	5c8a      	ldrb	r2, [r1, r2]
 80055ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80055d2:	7b3a      	ldrb	r2, [r7, #12]
 80055d4:	490f      	ldr	r1, [pc, #60]	; (8005614 <UARTEx_SetNbDataToProcess+0x98>)
 80055d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80055dc:	b29a      	uxth	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
 80055e6:	7b7a      	ldrb	r2, [r7, #13]
 80055e8:	4909      	ldr	r1, [pc, #36]	; (8005610 <UARTEx_SetNbDataToProcess+0x94>)
 80055ea:	5c8a      	ldrb	r2, [r1, r2]
 80055ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80055f0:	7b7a      	ldrb	r2, [r7, #13]
 80055f2:	4908      	ldr	r1, [pc, #32]	; (8005614 <UARTEx_SetNbDataToProcess+0x98>)
 80055f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005602:	bf00      	nop
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	080057c0 	.word	0x080057c0
 8005614:	080057c8 	.word	0x080057c8

08005618 <__libc_init_array>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	4d0d      	ldr	r5, [pc, #52]	; (8005650 <__libc_init_array+0x38>)
 800561c:	2600      	movs	r6, #0
 800561e:	4c0d      	ldr	r4, [pc, #52]	; (8005654 <__libc_init_array+0x3c>)
 8005620:	1b64      	subs	r4, r4, r5
 8005622:	10a4      	asrs	r4, r4, #2
 8005624:	42a6      	cmp	r6, r4
 8005626:	d109      	bne.n	800563c <__libc_init_array+0x24>
 8005628:	4d0b      	ldr	r5, [pc, #44]	; (8005658 <__libc_init_array+0x40>)
 800562a:	2600      	movs	r6, #0
 800562c:	4c0b      	ldr	r4, [pc, #44]	; (800565c <__libc_init_array+0x44>)
 800562e:	f000 f81f 	bl	8005670 <_init>
 8005632:	1b64      	subs	r4, r4, r5
 8005634:	10a4      	asrs	r4, r4, #2
 8005636:	42a6      	cmp	r6, r4
 8005638:	d105      	bne.n	8005646 <__libc_init_array+0x2e>
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005640:	3601      	adds	r6, #1
 8005642:	4798      	blx	r3
 8005644:	e7ee      	b.n	8005624 <__libc_init_array+0xc>
 8005646:	f855 3b04 	ldr.w	r3, [r5], #4
 800564a:	3601      	adds	r6, #1
 800564c:	4798      	blx	r3
 800564e:	e7f2      	b.n	8005636 <__libc_init_array+0x1e>
 8005650:	080057d8 	.word	0x080057d8
 8005654:	080057d8 	.word	0x080057d8
 8005658:	080057d8 	.word	0x080057d8
 800565c:	080057dc 	.word	0x080057dc

08005660 <memset>:
 8005660:	4402      	add	r2, r0
 8005662:	4603      	mov	r3, r0
 8005664:	4293      	cmp	r3, r2
 8005666:	d100      	bne.n	800566a <memset+0xa>
 8005668:	4770      	bx	lr
 800566a:	f803 1b01 	strb.w	r1, [r3], #1
 800566e:	e7f9      	b.n	8005664 <memset+0x4>

08005670 <_init>:
 8005670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005672:	bf00      	nop
 8005674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005676:	bc08      	pop	{r3}
 8005678:	469e      	mov	lr, r3
 800567a:	4770      	bx	lr

0800567c <_fini>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	bf00      	nop
 8005680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005682:	bc08      	pop	{r3}
 8005684:	469e      	mov	lr, r3
 8005686:	4770      	bx	lr
