
STM32WobbleBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ae74  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006eb  0801b0b0  0801b0b0  0002b0b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b79c  0801b79c  0002b79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b7a4  0801b7a4  0002b7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b7a8  0801b7a8  0002b7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000114  20000000  0801b7ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002859  20000118  0801b8c0  00030118  2**3
                  ALLOC
  8 ._user_heap_stack 00000607  20002971  0801b8c0  00032971  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 10 .debug_info   00060bb0  00000000  00000000  0003014a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007875  00000000  00000000  00090cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003048  00000000  00000000  00098570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002df0  00000000  00000000  0009b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a138  00000000  00000000  0009e3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00034c93  00000000  00000000  000d84e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015e37b  00000000  00000000  0010d173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0026b4ee  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000da34  00000000  00000000  0026b544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000118 	.word	0x20000118
 8000254:	00000000 	.word	0x00000000
 8000258:	0801b094 	.word	0x0801b094

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000011c 	.word	0x2000011c
 8000274:	0801b094 	.word	0x0801b094

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_uldivmod>:
 8000c00:	b953      	cbnz	r3, 8000c18 <__aeabi_uldivmod+0x18>
 8000c02:	b94a      	cbnz	r2, 8000c18 <__aeabi_uldivmod+0x18>
 8000c04:	2900      	cmp	r1, #0
 8000c06:	bf08      	it	eq
 8000c08:	2800      	cmpeq	r0, #0
 8000c0a:	bf1c      	itt	ne
 8000c0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c10:	f04f 30ff 	movne.w	r0, #4294967295
 8000c14:	f000 b980 	b.w	8000f18 <__aeabi_idiv0>
 8000c18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c20:	f000 f806 	bl	8000c30 <__udivmoddi4>
 8000c24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2c:	b004      	add	sp, #16
 8000c2e:	4770      	bx	lr

08000c30 <__udivmoddi4>:
 8000c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c34:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000c36:	4604      	mov	r4, r0
 8000c38:	4688      	mov	r8, r1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f040 8084 	bne.w	8000d48 <__udivmoddi4+0x118>
 8000c40:	428a      	cmp	r2, r1
 8000c42:	4617      	mov	r7, r2
 8000c44:	d943      	bls.n	8000cce <__udivmoddi4+0x9e>
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	b142      	cbz	r2, 8000c5e <__udivmoddi4+0x2e>
 8000c4c:	f1c2 0020 	rsb	r0, r2, #32
 8000c50:	4091      	lsls	r1, r2
 8000c52:	4097      	lsls	r7, r2
 8000c54:	fa24 f000 	lsr.w	r0, r4, r0
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea40 0801 	orr.w	r8, r0, r1
 8000c5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000c62:	0c23      	lsrs	r3, r4, #16
 8000c64:	fa1f fe87 	uxth.w	lr, r7
 8000c68:	fbb8 f6fc 	udiv	r6, r8, ip
 8000c6c:	fb0c 8116 	mls	r1, ip, r6, r8
 8000c70:	fb06 f00e 	mul.w	r0, r6, lr
 8000c74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c78:	4298      	cmp	r0, r3
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0x5c>
 8000c7c:	18fb      	adds	r3, r7, r3
 8000c7e:	f106 31ff 	add.w	r1, r6, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x5a>
 8000c84:	4298      	cmp	r0, r3
 8000c86:	f200 8131 	bhi.w	8000eec <__udivmoddi4+0x2bc>
 8000c8a:	460e      	mov	r6, r1
 8000c8c:	1a19      	subs	r1, r3, r0
 8000c8e:	b2a3      	uxth	r3, r4
 8000c90:	fbb1 f0fc 	udiv	r0, r1, ip
 8000c94:	fb0c 1110 	mls	r1, ip, r0, r1
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0x84>
 8000ca4:	193c      	adds	r4, r7, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x82>
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	f200 811a 	bhi.w	8000ee6 <__udivmoddi4+0x2b6>
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0x98>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xa2>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d152      	bne.n	8000d80 <__udivmoddi4+0x150>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	0c21      	lsrs	r1, r4, #16
 8000ce8:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cec:	fb0e 301c 	mls	r0, lr, ip, r3
 8000cf0:	fb08 f90c 	mul.w	r9, r8, ip
 8000cf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf8:	4589      	cmp	r9, r1
 8000cfa:	d90b      	bls.n	8000d14 <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000d02:	bf2c      	ite	cs
 8000d04:	2001      	movcs	r0, #1
 8000d06:	2000      	movcc	r0, #0
 8000d08:	4589      	cmp	r9, r1
 8000d0a:	d902      	bls.n	8000d12 <__udivmoddi4+0xe2>
 8000d0c:	2800      	cmp	r0, #0
 8000d0e:	f000 80f0 	beq.w	8000ef2 <__udivmoddi4+0x2c2>
 8000d12:	469c      	mov	ip, r3
 8000d14:	eba1 0109 	sub.w	r1, r1, r9
 8000d18:	b2a3      	uxth	r3, r4
 8000d1a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d1e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d22:	fb08 f800 	mul.w	r8, r8, r0
 8000d26:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2a:	45a0      	cmp	r8, r4
 8000d2c:	d907      	bls.n	8000d3e <__udivmoddi4+0x10e>
 8000d2e:	193c      	adds	r4, r7, r4
 8000d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x10c>
 8000d36:	45a0      	cmp	r8, r4
 8000d38:	f200 80d2 	bhi.w	8000ee0 <__udivmoddi4+0x2b0>
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	eba4 0408 	sub.w	r4, r4, r8
 8000d42:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d46:	e7ba      	b.n	8000cbe <__udivmoddi4+0x8e>
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d909      	bls.n	8000d60 <__udivmoddi4+0x130>
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	f000 80be 	beq.w	8000ece <__udivmoddi4+0x29e>
 8000d52:	2600      	movs	r6, #0
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	4630      	mov	r0, r6
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d60:	fab3 f683 	clz	r6, r3
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d14d      	bne.n	8000e04 <__udivmoddi4+0x1d4>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	f0c0 80b3 	bcc.w	8000ed4 <__udivmoddi4+0x2a4>
 8000d6e:	4282      	cmp	r2, r0
 8000d70:	f240 80b0 	bls.w	8000ed4 <__udivmoddi4+0x2a4>
 8000d74:	4630      	mov	r0, r6
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0a6      	beq.n	8000cc8 <__udivmoddi4+0x98>
 8000d7a:	e9c5 4800 	strd	r4, r8, [r5]
 8000d7e:	e7a3      	b.n	8000cc8 <__udivmoddi4+0x98>
 8000d80:	4097      	lsls	r7, r2
 8000d82:	f1c2 0320 	rsb	r3, r2, #32
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	fa24 f303 	lsr.w	r3, r4, r3
 8000d94:	fa1f f887 	uxth.w	r8, r7
 8000d98:	4094      	lsls	r4, r2
 8000d9a:	4303      	orrs	r3, r0
 8000d9c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da0:	0c1e      	lsrs	r6, r3, #16
 8000da2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da6:	fb00 fc08 	mul.w	ip, r0, r8
 8000daa:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8000dae:	458c      	cmp	ip, r1
 8000db0:	d90e      	bls.n	8000dd0 <__udivmoddi4+0x1a0>
 8000db2:	1879      	adds	r1, r7, r1
 8000db4:	f100 36ff 	add.w	r6, r0, #4294967295
 8000db8:	bf2c      	ite	cs
 8000dba:	f04f 0901 	movcs.w	r9, #1
 8000dbe:	f04f 0900 	movcc.w	r9, #0
 8000dc2:	458c      	cmp	ip, r1
 8000dc4:	d903      	bls.n	8000dce <__udivmoddi4+0x19e>
 8000dc6:	f1b9 0f00 	cmp.w	r9, #0
 8000dca:	f000 8096 	beq.w	8000efa <__udivmoddi4+0x2ca>
 8000dce:	4630      	mov	r0, r6
 8000dd0:	eba1 010c 	sub.w	r1, r1, ip
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dda:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dde:	fb06 fc08 	mul.w	ip, r6, r8
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	458c      	cmp	ip, r1
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1ca>
 8000dea:	1879      	adds	r1, r7, r1
 8000dec:	f106 33ff 	add.w	r3, r6, #4294967295
 8000df0:	d202      	bcs.n	8000df8 <__udivmoddi4+0x1c8>
 8000df2:	458c      	cmp	ip, r1
 8000df4:	f200 8088 	bhi.w	8000f08 <__udivmoddi4+0x2d8>
 8000df8:	461e      	mov	r6, r3
 8000dfa:	eba1 030c 	sub.w	r3, r1, ip
 8000dfe:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e02:	e770      	b.n	8000ce6 <__udivmoddi4+0xb6>
 8000e04:	f1c6 0720 	rsb	r7, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa02 fc06 	lsl.w	ip, r2, r6
 8000e10:	fa01 fe06 	lsl.w	lr, r1, r6
 8000e14:	40fa      	lsrs	r2, r7
 8000e16:	fa20 f807 	lsr.w	r8, r0, r7
 8000e1a:	40f9      	lsrs	r1, r7
 8000e1c:	fa00 f306 	lsl.w	r3, r0, r6
 8000e20:	4322      	orrs	r2, r4
 8000e22:	ea48 040e 	orr.w	r4, r8, lr
 8000e26:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000e2a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e2e:	fa1f f982 	uxth.w	r9, r2
 8000e32:	fbb1 faf8 	udiv	sl, r1, r8
 8000e36:	fb08 111a 	mls	r1, r8, sl, r1
 8000e3a:	fb0a f009 	mul.w	r0, sl, r9
 8000e3e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8000e42:	4570      	cmp	r0, lr
 8000e44:	d90e      	bls.n	8000e64 <__udivmoddi4+0x234>
 8000e46:	eb12 0e0e 	adds.w	lr, r2, lr
 8000e4a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000e4e:	bf2c      	ite	cs
 8000e50:	f04f 0b01 	movcs.w	fp, #1
 8000e54:	f04f 0b00 	movcc.w	fp, #0
 8000e58:	4570      	cmp	r0, lr
 8000e5a:	d902      	bls.n	8000e62 <__udivmoddi4+0x232>
 8000e5c:	f1bb 0f00 	cmp.w	fp, #0
 8000e60:	d04e      	beq.n	8000f00 <__udivmoddi4+0x2d0>
 8000e62:	468a      	mov	sl, r1
 8000e64:	ebae 0e00 	sub.w	lr, lr, r0
 8000e68:	b2a4      	uxth	r4, r4
 8000e6a:	fbbe f0f8 	udiv	r0, lr, r8
 8000e6e:	fb08 ee10 	mls	lr, r8, r0, lr
 8000e72:	fb00 f909 	mul.w	r9, r0, r9
 8000e76:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8000e7a:	45f1      	cmp	r9, lr
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x25e>
 8000e7e:	eb12 0e0e 	adds.w	lr, r2, lr
 8000e82:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e86:	d201      	bcs.n	8000e8c <__udivmoddi4+0x25c>
 8000e88:	45f1      	cmp	r9, lr
 8000e8a:	d840      	bhi.n	8000f0e <__udivmoddi4+0x2de>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8000e92:	ebae 0e09 	sub.w	lr, lr, r9
 8000e96:	fba0 890c 	umull	r8, r9, r0, ip
 8000e9a:	45ce      	cmp	lr, r9
 8000e9c:	4641      	mov	r1, r8
 8000e9e:	464c      	mov	r4, r9
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0x278>
 8000ea2:	d106      	bne.n	8000eb2 <__udivmoddi4+0x282>
 8000ea4:	4543      	cmp	r3, r8
 8000ea6:	d204      	bcs.n	8000eb2 <__udivmoddi4+0x282>
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	ebb8 010c 	subs.w	r1, r8, ip
 8000eae:	eb69 0402 	sbc.w	r4, r9, r2
 8000eb2:	b37d      	cbz	r5, 8000f14 <__udivmoddi4+0x2e4>
 8000eb4:	1a5a      	subs	r2, r3, r1
 8000eb6:	eb6e 0e04 	sbc.w	lr, lr, r4
 8000eba:	40f2      	lsrs	r2, r6
 8000ebc:	fa0e f707 	lsl.w	r7, lr, r7
 8000ec0:	fa2e f306 	lsr.w	r3, lr, r6
 8000ec4:	2600      	movs	r6, #0
 8000ec6:	4317      	orrs	r7, r2
 8000ec8:	e9c5 7300 	strd	r7, r3, [r5]
 8000ecc:	e6fc      	b.n	8000cc8 <__udivmoddi4+0x98>
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e6f9      	b.n	8000cc8 <__udivmoddi4+0x98>
 8000ed4:	1a84      	subs	r4, r0, r2
 8000ed6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eda:	2001      	movs	r0, #1
 8000edc:	4688      	mov	r8, r1
 8000ede:	e74a      	b.n	8000d76 <__udivmoddi4+0x146>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	e72b      	b.n	8000d3e <__udivmoddi4+0x10e>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	e6e3      	b.n	8000cb4 <__udivmoddi4+0x84>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	e6cc      	b.n	8000c8c <__udivmoddi4+0x5c>
 8000ef2:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	e70c      	b.n	8000d14 <__udivmoddi4+0xe4>
 8000efa:	3802      	subs	r0, #2
 8000efc:	4439      	add	r1, r7
 8000efe:	e767      	b.n	8000dd0 <__udivmoddi4+0x1a0>
 8000f00:	f1aa 0a02 	sub.w	sl, sl, #2
 8000f04:	4496      	add	lr, r2
 8000f06:	e7ad      	b.n	8000e64 <__udivmoddi4+0x234>
 8000f08:	3e02      	subs	r6, #2
 8000f0a:	4439      	add	r1, r7
 8000f0c:	e775      	b.n	8000dfa <__udivmoddi4+0x1ca>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4496      	add	lr, r2
 8000f12:	e7bc      	b.n	8000e8e <__udivmoddi4+0x25e>
 8000f14:	462e      	mov	r6, r5
 8000f16:	e6d7      	b.n	8000cc8 <__udivmoddi4+0x98>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <MX_MEMS_Init>:
static void DWT_Init(void);
static void DWT_Start(void);
static uint32_t DWT_Stop(void);

void MX_MEMS_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DataLogFusion_Init();
 8000f20:	f000 f820 	bl	8000f64 <MX_DataLogFusion_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_DataLogFusion_Process();
 8000f2c:	f000 f87a 	bl	8001024 <MX_DataLogFusion_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *              the configuration information for TIM module.
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d102      	bne.n	8000f4e <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	200023b8 	.word	0x200023b8
 8000f60:	20000588 	.word	0x20000588

08000f64 <MX_DataLogFusion_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_DataLogFusion_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
  float ans_float;

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 8000f6a:	f001 fc5d 	bl	8002828 <MX_TIM15_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 8000f6e:	2064      	movs	r0, #100	; 0x64
 8000f70:	f000 fbec 	bl	800174c <TIM_Config>

  /* Initialize (disabled) sensors */
  Init_Sensors();
 8000f74:	f000 f8e4 	bl	8001140 <Init_Sensors>

  /* Sensor Fusion API initialization function */
  MotionFX_manager_init();
 8000f78:	f001 f8ce 	bl	8002118 <MotionFX_manager_init>

  /* OPTIONAL */
  /* Get library version */
  MotionFX_manager_get_version(LibVersion, &LibVersionLen);
 8000f7c:	4924      	ldr	r1, [pc, #144]	; (8001010 <MX_DataLogFusion_Init+0xac>)
 8000f7e:	4825      	ldr	r0, [pc, #148]	; (8001014 <MX_DataLogFusion_Init+0xb0>)
 8000f80:	f001 f976 	bl	8002270 <MotionFX_manager_get_version>

  /* Enable magnetometer calibration */
  MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8000f84:	200a      	movs	r0, #10
 8000f86:	f001 f992 	bl	80022ae <MotionFX_manager_MagCal_start>

  /* Test if calibration data are available */
  MFX_MagCal_output_t mag_cal_test;
  MotionFX_MagCal_getParams(&mag_cal_test);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f017 fcf7 	bl	8018980 <MotionFX_MagCal_getParams>

  /* If calibration data are available load HI coefficients */
  if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8000f92:	7c3b      	ldrb	r3, [r7, #16]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d132      	bne.n	8000ffe <MX_DataLogFusion_Init+0x9a>
  {
    ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8000f98:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001018 <MX_DataLogFusion_Init+0xb4>
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.x = (int32_t)ans_float;
 8000fa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb0:	ee17 2a90 	vmov	r2, s15
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <MX_DataLogFusion_Init+0xb8>)
 8000fb6:	601a      	str	r2, [r3, #0]
    ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8000fb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fbc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001018 <MX_DataLogFusion_Init+0xb4>
 8000fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc4:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.y = (int32_t)ans_float;
 8000fc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd0:	ee17 2a90 	vmov	r2, s15
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_DataLogFusion_Init+0xb8>)
 8000fd6:	605a      	str	r2, [r3, #4]
    ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8000fd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fdc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001018 <MX_DataLogFusion_Init+0xb4>
 8000fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe4:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.z = (int32_t)ans_float;
 8000fe8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff0:	ee17 2a90 	vmov	r2, s15
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_DataLogFusion_Init+0xb8>)
 8000ff6:	609a      	str	r2, [r3, #8]

    MagCalStatus = 1;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_DataLogFusion_Init+0xbc>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
  }

  DWT_Init();
 8000ffe:	f000 fbd9 	bl	80017b4 <DWT_Init>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 8001002:	f000 fcfb 	bl	80019fc <UART_StartReceiveMsg>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20002004 	.word	0x20002004
 8001014:	20001fe0 	.word	0x20001fe0
 8001018:	43fa0000 	.word	0x43fa0000
 800101c:	200005cc 	.word	0x200005cc
 8001020:	200005d8 	.word	0x200005d8

08001024 <MX_DataLogFusion_Process>:
/**
  * @brief  Process of the application
  * @retval None
  */
static void MX_DataLogFusion_Process(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  static TMsg msg_dat;
  static TMsg msg_cmd;

  if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 8001028:	483b      	ldr	r0, [pc, #236]	; (8001118 <MX_DataLogFusion_Process+0xf4>)
 800102a:	f000 fc15 	bl	8001858 <UART_ReceivedMSG>
 800102e:	4603      	mov	r3, r0
 8001030:	2b01      	cmp	r3, #1
 8001032:	d106      	bne.n	8001042 <MX_DataLogFusion_Process+0x1e>
  {
    if (msg_cmd.Data[0] == DEV_ADDR)
 8001034:	4b38      	ldr	r3, [pc, #224]	; (8001118 <MX_DataLogFusion_Process+0xf4>)
 8001036:	791b      	ldrb	r3, [r3, #4]
 8001038:	2b32      	cmp	r3, #50	; 0x32
 800103a:	d102      	bne.n	8001042 <MX_DataLogFusion_Process+0x1e>
    {
      (void)HandleMSG((TMsg *)&msg_cmd);
 800103c:	4836      	ldr	r0, [pc, #216]	; (8001118 <MX_DataLogFusion_Process+0xf4>)
 800103e:	f005 f83f 	bl	80060c0 <HandleMSG>
    }
  }

  if (MagCalRequest == 1U)
 8001042:	4b36      	ldr	r3, [pc, #216]	; (800111c <MX_DataLogFusion_Process+0xf8>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d120      	bne.n	800108e <MX_DataLogFusion_Process+0x6a>
  {
    /* Debouncing */
    HAL_Delay(50);
 800104c:	2032      	movs	r0, #50	; 0x32
 800104e:	f005 fc4f 	bl	80068f0 <HAL_Delay>

    /* Wait until the button is released */
    // TODO:  Figure out if #define BUTTON_KEY BUTTON USER is really needed
    while ((BSP_PB_GetState( BUTTON_USER ) == PushButtonState));
 8001052:	bf00      	nop
 8001054:	2000      	movs	r0, #0
 8001056:	f001 fd3b 	bl	8002ad0 <BSP_PB_GetState>
 800105a:	4602      	mov	r2, r0
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <MX_DataLogFusion_Process+0xfc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d0f7      	beq.n	8001054 <MX_DataLogFusion_Process+0x30>

    /* Debouncing */
    HAL_Delay(50);
 8001064:	2032      	movs	r0, #50	; 0x32
 8001066:	f005 fc43 	bl	80068f0 <HAL_Delay>

    MagCalRequest = 0;
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <MX_DataLogFusion_Process+0xf8>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]

    /* Reset magnetometer calibration value*/
    MagCalStatus = 0;
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <MX_DataLogFusion_Process+0x100>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
    MagOffset.x = 0;
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <MX_DataLogFusion_Process+0x104>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
    MagOffset.y = 0;
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <MX_DataLogFusion_Process+0x104>)
 800107e:	2200      	movs	r2, #0
 8001080:	605a      	str	r2, [r3, #4]
    MagOffset.z = 0;
 8001082:	4b29      	ldr	r3, [pc, #164]	; (8001128 <MX_DataLogFusion_Process+0x104>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]

    /* Enable magnetometer calibration */
    MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8001088:	200a      	movs	r0, #10
 800108a:	f001 f910 	bl	80022ae <MotionFX_manager_MagCal_start>
  }

  if (SensorReadRequest == 1U)
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <MX_DataLogFusion_Process+0x108>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d13d      	bne.n	8001114 <MX_DataLogFusion_Process+0xf0>
  {
    SensorReadRequest = 0;
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <MX_DataLogFusion_Process+0x108>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]

    /* Acquire data from enabled sensors and fill Msg stream */
    RTC_Handler(&msg_dat);
 800109e:	4824      	ldr	r0, [pc, #144]	; (8001130 <MX_DataLogFusion_Process+0x10c>)
 80010a0:	f000 f862 	bl	8001168 <RTC_Handler>
    Accelero_Sensor_Handler(&msg_dat);
 80010a4:	4822      	ldr	r0, [pc, #136]	; (8001130 <MX_DataLogFusion_Process+0x10c>)
 80010a6:	f000 f9b3 	bl	8001410 <Accelero_Sensor_Handler>
    Gyro_Sensor_Handler(&msg_dat);
 80010aa:	4821      	ldr	r0, [pc, #132]	; (8001130 <MX_DataLogFusion_Process+0x10c>)
 80010ac:	f000 fa0a 	bl	80014c4 <Gyro_Sensor_Handler>
    Magneto_Sensor_Handler(&msg_dat);
 80010b0:	481f      	ldr	r0, [pc, #124]	; (8001130 <MX_DataLogFusion_Process+0x10c>)
 80010b2:	f000 fa61 	bl	8001578 <Magneto_Sensor_Handler>

    /* Sensor Fusion specific part */
    FX_Data_Handler(&msg_dat);
 80010b6:	481e      	ldr	r0, [pc, #120]	; (8001130 <MX_DataLogFusion_Process+0x10c>)
 80010b8:	f000 f8ca 	bl	8001250 <FX_Data_Handler>

    /* Send data stream */
    INIT_STREAMING_HEADER(&msg_dat);
 80010bc:	481c      	ldr	r0, [pc, #112]	; (8001130 <MX_DataLogFusion_Process+0x10c>)
 80010be:	f004 ffe5 	bl	800608c <INIT_STREAMING_HEADER>
    msg_dat.Len = STREAMING_MSG_LENGTH;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_DataLogFusion_Process+0x10c>)
 80010c4:	2277      	movs	r2, #119	; 0x77
 80010c6:	601a      	str	r2, [r3, #0]

    if (UseOfflineData == 1U)
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_DataLogFusion_Process+0x110>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d11e      	bne.n	800110e <MX_DataLogFusion_Process+0xea>
    {
      OfflineDataCount--;
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_DataLogFusion_Process+0x114>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	4a18      	ldr	r2, [pc, #96]	; (8001138 <MX_DataLogFusion_Process+0x114>)
 80010d8:	6013      	str	r3, [r2, #0]
      if (OfflineDataCount < 0)
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_DataLogFusion_Process+0x114>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	da02      	bge.n	80010e8 <MX_DataLogFusion_Process+0xc4>
      {
        OfflineDataCount = 0;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_DataLogFusion_Process+0x114>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
      }

      OfflineDataReadIndex++;
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_DataLogFusion_Process+0x118>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a13      	ldr	r2, [pc, #76]	; (800113c <MX_DataLogFusion_Process+0x118>)
 80010f0:	6013      	str	r3, [r2, #0]
      if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_DataLogFusion_Process+0x118>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b07      	cmp	r3, #7
 80010f8:	dd02      	ble.n	8001100 <MX_DataLogFusion_Process+0xdc>
      {
        OfflineDataReadIndex = 0;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <MX_DataLogFusion_Process+0x118>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
      }

      if (OfflineDataCount > 0)
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <MX_DataLogFusion_Process+0x114>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	dd02      	ble.n	800110e <MX_DataLogFusion_Process+0xea>
      {
        SensorReadRequest = 1;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <MX_DataLogFusion_Process+0x108>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
      }
    }
    UART_SendMsg(&msg_dat);
 800110e:	4808      	ldr	r0, [pc, #32]	; (8001130 <MX_DataLogFusion_Process+0x10c>)
 8001110:	f000 fc58 	bl	80019c4 <UART_SendMsg>
  }
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200005dc 	.word	0x200005dc
 800111c:	200005c8 	.word	0x200005c8
 8001120:	2000059c 	.word	0x2000059c
 8001124:	200005d8 	.word	0x200005d8
 8001128:	200005cc 	.word	0x200005cc
 800112c:	20000588 	.word	0x20000588
 8001130:	200006e0 	.word	0x200006e0
 8001134:	20000589 	.word	0x20000589
 8001138:	20000594 	.word	0x20000594
 800113c:	2000058c 	.word	0x2000058c

08001140 <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
static void Init_Sensors(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 8001144:	f000 fe50 	bl	8001de8 <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 8001148:	f000 fe56 	bl	8001df8 <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 800114c:	f000 fe5c 	bl	8001e08 <BSP_SENSOR_MAG_Init>

  BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8001150:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001164 <Init_Sensors+0x24>
 8001154:	f000 feb7 	bl	8001ec6 <BSP_SENSOR_ACC_SetOutputDataRate>
  BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8001158:	2004      	movs	r0, #4
 800115a:	f000 fec3 	bl	8001ee4 <BSP_SENSOR_ACC_SetFullScale>
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	42c80000 	.word	0x42c80000

08001168 <RTC_Handler>:
 * @brief  Handles the time+date getting/sending
 * @param  Msg the time+date part of the stream
 * @retval None
 */
static void RTC_Handler(TMsg *Msg)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08c      	sub	sp, #48	; 0x30
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint8_t sub_sec = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 8001176:	4b32      	ldr	r3, [pc, #200]	; (8001240 <RTC_Handler+0xd8>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (UseOfflineData == 1)
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <RTC_Handler+0xdc>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d12b      	bne.n	80011dc <RTC_Handler+0x74>
  {
    Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <RTC_Handler+0xe0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a30      	ldr	r2, [pc, #192]	; (800124c <RTC_Handler+0xe4>)
 800118a:	2134      	movs	r1, #52	; 0x34
 800118c:	fb01 f303 	mul.w	r3, r1, r3
 8001190:	4413      	add	r3, r2
 8001192:	781a      	ldrb	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <RTC_Handler+0xe0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a2b      	ldr	r2, [pc, #172]	; (800124c <RTC_Handler+0xe4>)
 800119e:	2134      	movs	r1, #52	; 0x34
 80011a0:	fb01 f303 	mul.w	r3, r1, r3
 80011a4:	4413      	add	r3, r2
 80011a6:	3301      	adds	r3, #1
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <RTC_Handler+0xe0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a26      	ldr	r2, [pc, #152]	; (800124c <RTC_Handler+0xe4>)
 80011b4:	2134      	movs	r1, #52	; 0x34
 80011b6:	fb01 f303 	mul.w	r3, r1, r3
 80011ba:	4413      	add	r3, r2
 80011bc:	3302      	adds	r3, #2
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 80011c4:	4b20      	ldr	r3, [pc, #128]	; (8001248 <RTC_Handler+0xe0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a20      	ldr	r2, [pc, #128]	; (800124c <RTC_Handler+0xe4>)
 80011ca:	2134      	movs	r1, #52	; 0x34
 80011cc:	fb01 f303 	mul.w	r3, r1, r3
 80011d0:	4413      	add	r3, r2
 80011d2:	3303      	adds	r3, #3
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	729a      	strb	r2, [r3, #10]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
    Msg->Data[6] = sub_sec;
  }
}
 80011da:	e02d      	b.n	8001238 <RTC_Handler+0xd0>
    (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	4816      	ldr	r0, [pc, #88]	; (8001240 <RTC_Handler+0xd8>)
 80011e6:	f00b f9ed 	bl	800c5c4 <HAL_RTC_GetTime>
    (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	2200      	movs	r2, #0
 80011f0:	4619      	mov	r1, r3
 80011f2:	4813      	ldr	r0, [pc, #76]	; (8001240 <RTC_Handler+0xd8>)
 80011f4:	f00b face 	bl	800c794 <HAL_RTC_GetDate>
    ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2264      	movs	r2, #100	; 0x64
 8001200:	fb02 f303 	mul.w	r3, r2, r3
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    ans_int32 /= RtcSynchPrediv + 1;
 8001206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120a:	3301      	adds	r3, #1
 800120c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	b2db      	uxtb	r3, r3
 8001216:	623b      	str	r3, [r7, #32]
    sub_sec = (uint8_t)ans_uint32;
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
 800121e:	7a3a      	ldrb	r2, [r7, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 8001224:	7a7a      	ldrb	r2, [r7, #9]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 800122a:	7aba      	ldrb	r2, [r7, #10]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = sub_sec;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001236:	729a      	strb	r2, [r3, #10]
}
 8001238:	bf00      	nop
 800123a:	3730      	adds	r7, #48	; 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20002388 	.word	0x20002388
 8001244:	20000589 	.word	0x20000589
 8001248:	2000058c 	.word	0x2000058c
 800124c:	20001e40 	.word	0x20001e40

08001250 <FX_Data_Handler>:
 * @brief  Sensor Fusion data handler
 * @param  Msg the Sensor Fusion data part of the stream
 * @retval None
 */
static void FX_Data_Handler(TMsg *Msg)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b09e      	sub	sp, #120	; 0x78
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t elapsed_time_us = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	677b      	str	r3, [r7, #116]	; 0x74
  MFX_input_t data_in;
  MFX_input_t *pdata_in = &data_in;
 800125c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001260:	673b      	str	r3, [r7, #112]	; 0x70
  MFX_output_t data_out;
  MFX_output_t *pdata_out = &data_out;
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	66fb      	str	r3, [r7, #108]	; 0x6c

  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 8001268:	4b62      	ldr	r3, [pc, #392]	; (80013f4 <FX_Data_Handler+0x1a4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b10      	cmp	r3, #16
 8001272:	f040 80ba 	bne.w	80013ea <FX_Data_Handler+0x19a>
  {
    if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 8001276:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <FX_Data_Handler+0x1a4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0320 	and.w	r3, r3, #32
 800127e:	2b20      	cmp	r3, #32
 8001280:	f040 80b3 	bne.w	80013ea <FX_Data_Handler+0x19a>
    {
      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 8001284:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <FX_Data_Handler+0x1a4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800128c:	2b40      	cmp	r3, #64	; 0x40
 800128e:	f040 80ac 	bne.w	80013ea <FX_Data_Handler+0x19a>
      {
        /* Convert angular velocity from [mdps] to [dps] */
        data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 8001292:	4b59      	ldr	r3, [pc, #356]	; (80013f8 <FX_Data_Handler+0x1a8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80013fc <FX_Data_Handler+0x1ac>
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 80012aa:	4b53      	ldr	r3, [pc, #332]	; (80013f8 <FX_Data_Handler+0x1a8>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80013fc <FX_Data_Handler+0x1ac>
 80012ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012be:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 80012c2:	4b4d      	ldr	r3, [pc, #308]	; (80013f8 <FX_Data_Handler+0x1a8>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ce:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80013fc <FX_Data_Handler+0x1ac>
 80012d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

        /* Convert acceleration from [mg] to [g] */
        data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 80012da:	4b49      	ldr	r3, [pc, #292]	; (8001400 <FX_Data_Handler+0x1b0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e6:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80013fc <FX_Data_Handler+0x1ac>
 80012ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ee:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 80012f2:	4b43      	ldr	r3, [pc, #268]	; (8001400 <FX_Data_Handler+0x1b0>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fe:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80013fc <FX_Data_Handler+0x1ac>
 8001302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001306:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800130a:	4b3d      	ldr	r3, [pc, #244]	; (8001400 <FX_Data_Handler+0x1b0>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001316:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80013fc <FX_Data_Handler+0x1ac>
 800131a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

        /* Convert magnetic field intensity from [mGauss] to [uT / 50] */
        data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <FX_Data_Handler+0x1b4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001408 <FX_Data_Handler+0x1b8>
 8001332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001336:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800133a:	4b32      	ldr	r3, [pc, #200]	; (8001404 <FX_Data_Handler+0x1b4>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001346:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001408 <FX_Data_Handler+0x1b8>
 800134a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 8001352:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <FX_Data_Handler+0x1b4>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001408 <FX_Data_Handler+0x1b8>
 8001362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001366:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

        /* Run Sensor Fusion algorithm */
        DWT_Start();
 800136a:	f000 fa3b 	bl	80017e4 <DWT_Start>
        MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 800136e:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800140c <FX_Data_Handler+0x1bc>
 8001372:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001374:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001376:	f000 ff27 	bl	80021c8 <MotionFX_manager_run>
        elapsed_time_us = DWT_Stop();
 800137a:	f000 fa45 	bl	8001808 <DWT_Stop>
 800137e:	6778      	str	r0, [r7, #116]	; 0x74

        (void)memcpy(&Msg->Data[55], (void *)pdata_out->quaternion, 4U * sizeof(float));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 8001386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001388:	330c      	adds	r3, #12
 800138a:	2210      	movs	r2, #16
 800138c:	4619      	mov	r1, r3
 800138e:	f019 fa27 	bl	801a7e0 <memcpy>
        (void)memcpy(&Msg->Data[71], (void *)pdata_out->rotation, 3U * sizeof(float));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	334b      	adds	r3, #75	; 0x4b
 8001396:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001398:	220c      	movs	r2, #12
 800139a:	4618      	mov	r0, r3
 800139c:	f019 fa20 	bl	801a7e0 <memcpy>
        (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity, 3U * sizeof(float));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f103 0057 	add.w	r0, r3, #87	; 0x57
 80013a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013a8:	331c      	adds	r3, #28
 80013aa:	220c      	movs	r2, #12
 80013ac:	4619      	mov	r1, r3
 80013ae:	f019 fa17 	bl	801a7e0 <memcpy>
        (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration, 3U * sizeof(float));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f103 0063 	add.w	r0, r3, #99	; 0x63
 80013b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ba:	3328      	adds	r3, #40	; 0x28
 80013bc:	220c      	movs	r2, #12
 80013be:	4619      	mov	r1, r3
 80013c0:	f019 fa0e 	bl	801a7e0 <memcpy>

        (void)memcpy(&Msg->Data[107], (void *) & (pdata_out->heading), sizeof(float));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	336f      	adds	r3, #111	; 0x6f
 80013c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013ca:	3234      	adds	r2, #52	; 0x34
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	601a      	str	r2, [r3, #0]
        (void)memcpy(&Msg->Data[111], (void *) & (pdata_out->headingErr), sizeof(float));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3373      	adds	r3, #115	; 0x73
 80013d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013d6:	3238      	adds	r2, #56	; 0x38
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	601a      	str	r2, [r3, #0]

        Serialize_s32(&Msg->Data[115], (int32_t)elapsed_time_us, 4);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3377      	adds	r3, #119	; 0x77
 80013e0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80013e2:	2204      	movs	r2, #4
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 f937 	bl	8002658 <Serialize_s32>
      }
    }
  }
}
 80013ea:	bf00      	nop
 80013ec:	3778      	adds	r7, #120	; 0x78
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000584 	.word	0x20000584
 80013f8:	200005ac 	.word	0x200005ac
 80013fc:	3a83126f 	.word	0x3a83126f
 8001400:	200005a0 	.word	0x200005a0
 8001404:	200005b8 	.word	0x200005b8
 8001408:	3b03126f 	.word	0x3b03126f
 800140c:	3c23d70a 	.word	0x3c23d70a

08001410 <Accelero_Sensor_Handler>:
 * @brief  Handles the ACC axes data getting/sending
 * @param  Msg the ACC part of the stream
 * @retval None
 */
static void Accelero_Sensor_Handler(TMsg *Msg)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <Accelero_Sensor_Handler+0xa0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	2b10      	cmp	r3, #16
 8001422:	d140      	bne.n	80014a6 <Accelero_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <Accelero_Sensor_Handler+0xa4>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d121      	bne.n	8001470 <Accelero_Sensor_Handler+0x60>
    {
      AccValue.x = OfflineData[OfflineDataReadIndex].acceleration_x_mg;
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <Accelero_Sensor_Handler+0xa8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a22      	ldr	r2, [pc, #136]	; (80014bc <Accelero_Sensor_Handler+0xac>)
 8001432:	2134      	movs	r1, #52	; 0x34
 8001434:	fb01 f303 	mul.w	r3, r1, r3
 8001438:	4413      	add	r3, r2
 800143a:	3310      	adds	r3, #16
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a20      	ldr	r2, [pc, #128]	; (80014c0 <Accelero_Sensor_Handler+0xb0>)
 8001440:	6013      	str	r3, [r2, #0]
      AccValue.y = OfflineData[OfflineDataReadIndex].acceleration_y_mg;
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <Accelero_Sensor_Handler+0xa8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <Accelero_Sensor_Handler+0xac>)
 8001448:	2134      	movs	r1, #52	; 0x34
 800144a:	fb01 f303 	mul.w	r3, r1, r3
 800144e:	4413      	add	r3, r2
 8001450:	3314      	adds	r3, #20
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <Accelero_Sensor_Handler+0xb0>)
 8001456:	6053      	str	r3, [r2, #4]
      AccValue.z = OfflineData[OfflineDataReadIndex].acceleration_z_mg;
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <Accelero_Sensor_Handler+0xa8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a17      	ldr	r2, [pc, #92]	; (80014bc <Accelero_Sensor_Handler+0xac>)
 800145e:	2134      	movs	r1, #52	; 0x34
 8001460:	fb01 f303 	mul.w	r3, r1, r3
 8001464:	4413      	add	r3, r2
 8001466:	3318      	adds	r3, #24
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a15      	ldr	r2, [pc, #84]	; (80014c0 <Accelero_Sensor_Handler+0xb0>)
 800146c:	6093      	str	r3, [r2, #8]
 800146e:	e002      	b.n	8001476 <Accelero_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_ACC_GetAxes(&AccValue);
 8001470:	4813      	ldr	r0, [pc, #76]	; (80014c0 <Accelero_Sensor_Handler+0xb0>)
 8001472:	f000 fd01 	bl	8001e78 <BSP_SENSOR_ACC_GetAxes>
    }

    Serialize_s32(&Msg->Data[19], (int32_t)AccValue.x, 4);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3317      	adds	r3, #23
 800147a:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <Accelero_Sensor_Handler+0xb0>)
 800147c:	6811      	ldr	r1, [r2, #0]
 800147e:	2204      	movs	r2, #4
 8001480:	4618      	mov	r0, r3
 8001482:	f001 f8e9 	bl	8002658 <Serialize_s32>
    Serialize_s32(&Msg->Data[23], (int32_t)AccValue.y, 4);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	331b      	adds	r3, #27
 800148a:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <Accelero_Sensor_Handler+0xb0>)
 800148c:	6851      	ldr	r1, [r2, #4]
 800148e:	2204      	movs	r2, #4
 8001490:	4618      	mov	r0, r3
 8001492:	f001 f8e1 	bl	8002658 <Serialize_s32>
    Serialize_s32(&Msg->Data[27], (int32_t)AccValue.z, 4);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	331f      	adds	r3, #31
 800149a:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <Accelero_Sensor_Handler+0xb0>)
 800149c:	6891      	ldr	r1, [r2, #8]
 800149e:	2204      	movs	r2, #4
 80014a0:	4618      	mov	r0, r3
 80014a2:	f001 f8d9 	bl	8002658 <Serialize_s32>
  }
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000584 	.word	0x20000584
 80014b4:	20000589 	.word	0x20000589
 80014b8:	2000058c 	.word	0x2000058c
 80014bc:	20001e40 	.word	0x20001e40
 80014c0:	200005a0 	.word	0x200005a0

080014c4 <Gyro_Sensor_Handler>:
 * @brief  Handles the GYR axes data getting/sending
 * @param  Msg the GYR part of the stream
 * @retval None
 */
static void Gyro_Sensor_Handler(TMsg *Msg)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 80014cc:	4b25      	ldr	r3, [pc, #148]	; (8001564 <Gyro_Sensor_Handler+0xa0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0320 	and.w	r3, r3, #32
 80014d4:	2b20      	cmp	r3, #32
 80014d6:	d140      	bne.n	800155a <Gyro_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <Gyro_Sensor_Handler+0xa4>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d121      	bne.n	8001524 <Gyro_Sensor_Handler+0x60>
    {
      GyrValue.x = OfflineData[OfflineDataReadIndex].angular_rate_x_mdps;
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <Gyro_Sensor_Handler+0xa8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a22      	ldr	r2, [pc, #136]	; (8001570 <Gyro_Sensor_Handler+0xac>)
 80014e6:	2134      	movs	r1, #52	; 0x34
 80014e8:	fb01 f303 	mul.w	r3, r1, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	331c      	adds	r3, #28
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a20      	ldr	r2, [pc, #128]	; (8001574 <Gyro_Sensor_Handler+0xb0>)
 80014f4:	6013      	str	r3, [r2, #0]
      GyrValue.y = OfflineData[OfflineDataReadIndex].angular_rate_y_mdps;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <Gyro_Sensor_Handler+0xa8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <Gyro_Sensor_Handler+0xac>)
 80014fc:	2134      	movs	r1, #52	; 0x34
 80014fe:	fb01 f303 	mul.w	r3, r1, r3
 8001502:	4413      	add	r3, r2
 8001504:	3320      	adds	r3, #32
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a1a      	ldr	r2, [pc, #104]	; (8001574 <Gyro_Sensor_Handler+0xb0>)
 800150a:	6053      	str	r3, [r2, #4]
      GyrValue.z = OfflineData[OfflineDataReadIndex].angular_rate_z_mdps;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <Gyro_Sensor_Handler+0xa8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a17      	ldr	r2, [pc, #92]	; (8001570 <Gyro_Sensor_Handler+0xac>)
 8001512:	2134      	movs	r1, #52	; 0x34
 8001514:	fb01 f303 	mul.w	r3, r1, r3
 8001518:	4413      	add	r3, r2
 800151a:	3324      	adds	r3, #36	; 0x24
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <Gyro_Sensor_Handler+0xb0>)
 8001520:	6093      	str	r3, [r2, #8]
 8001522:	e002      	b.n	800152a <Gyro_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8001524:	4813      	ldr	r0, [pc, #76]	; (8001574 <Gyro_Sensor_Handler+0xb0>)
 8001526:	f000 fcb4 	bl	8001e92 <BSP_SENSOR_GYR_GetAxes>
    }

    Serialize_s32(&Msg->Data[31], GyrValue.x, 4);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3323      	adds	r3, #35	; 0x23
 800152e:	4a11      	ldr	r2, [pc, #68]	; (8001574 <Gyro_Sensor_Handler+0xb0>)
 8001530:	6811      	ldr	r1, [r2, #0]
 8001532:	2204      	movs	r2, #4
 8001534:	4618      	mov	r0, r3
 8001536:	f001 f88f 	bl	8002658 <Serialize_s32>
    Serialize_s32(&Msg->Data[35], GyrValue.y, 4);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3327      	adds	r3, #39	; 0x27
 800153e:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <Gyro_Sensor_Handler+0xb0>)
 8001540:	6851      	ldr	r1, [r2, #4]
 8001542:	2204      	movs	r2, #4
 8001544:	4618      	mov	r0, r3
 8001546:	f001 f887 	bl	8002658 <Serialize_s32>
    Serialize_s32(&Msg->Data[39], GyrValue.z, 4);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	332b      	adds	r3, #43	; 0x2b
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <Gyro_Sensor_Handler+0xb0>)
 8001550:	6891      	ldr	r1, [r2, #8]
 8001552:	2204      	movs	r2, #4
 8001554:	4618      	mov	r0, r3
 8001556:	f001 f87f 	bl	8002658 <Serialize_s32>
  }
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000584 	.word	0x20000584
 8001568:	20000589 	.word	0x20000589
 800156c:	2000058c 	.word	0x2000058c
 8001570:	20001e40 	.word	0x20001e40
 8001574:	200005ac 	.word	0x200005ac

08001578 <Magneto_Sensor_Handler>:
 * @brief  Handles the MAG axes data getting/sending
 * @param  Msg the MAG part of the stream
 * @retval None
 */
static void Magneto_Sensor_Handler(TMsg *Msg)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  float ans_float;
  MFX_MagCal_input_t mag_data_in;
  MFX_MagCal_output_t mag_data_out;

  if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 8001580:	4b68      	ldr	r3, [pc, #416]	; (8001724 <Magneto_Sensor_Handler+0x1ac>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001588:	2b40      	cmp	r3, #64	; 0x40
 800158a:	f040 80c7 	bne.w	800171c <Magneto_Sensor_Handler+0x1a4>
  {
    if (UseOfflineData == 1)
 800158e:	4b66      	ldr	r3, [pc, #408]	; (8001728 <Magneto_Sensor_Handler+0x1b0>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d121      	bne.n	80015da <Magneto_Sensor_Handler+0x62>
    {
     MagValue.x = OfflineData[OfflineDataReadIndex].magnetic_field_x_mgauss;
 8001596:	4b65      	ldr	r3, [pc, #404]	; (800172c <Magneto_Sensor_Handler+0x1b4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a65      	ldr	r2, [pc, #404]	; (8001730 <Magneto_Sensor_Handler+0x1b8>)
 800159c:	2134      	movs	r1, #52	; 0x34
 800159e:	fb01 f303 	mul.w	r3, r1, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	3328      	adds	r3, #40	; 0x28
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a62      	ldr	r2, [pc, #392]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80015aa:	6013      	str	r3, [r2, #0]
     MagValue.y = OfflineData[OfflineDataReadIndex].magnetic_field_y_mgauss;
 80015ac:	4b5f      	ldr	r3, [pc, #380]	; (800172c <Magneto_Sensor_Handler+0x1b4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a5f      	ldr	r2, [pc, #380]	; (8001730 <Magneto_Sensor_Handler+0x1b8>)
 80015b2:	2134      	movs	r1, #52	; 0x34
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	332c      	adds	r3, #44	; 0x2c
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a5d      	ldr	r2, [pc, #372]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80015c0:	6053      	str	r3, [r2, #4]
     MagValue.z = OfflineData[OfflineDataReadIndex].magnetic_field_z_mgauss;
 80015c2:	4b5a      	ldr	r3, [pc, #360]	; (800172c <Magneto_Sensor_Handler+0x1b4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a5a      	ldr	r2, [pc, #360]	; (8001730 <Magneto_Sensor_Handler+0x1b8>)
 80015c8:	2134      	movs	r1, #52	; 0x34
 80015ca:	fb01 f303 	mul.w	r3, r1, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	3330      	adds	r3, #48	; 0x30
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a57      	ldr	r2, [pc, #348]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80015d6:	6093      	str	r3, [r2, #8]
 80015d8:	e088      	b.n	80016ec <Magneto_Sensor_Handler+0x174>
    }
    else
    {
      BSP_SENSOR_MAG_GetAxes(&MagValue);
 80015da:	4856      	ldr	r0, [pc, #344]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80015dc:	f000 fc66 	bl	8001eac <BSP_SENSOR_MAG_GetAxes>

      if (MagCalStatus == 0U)
 80015e0:	4b55      	ldr	r3, [pc, #340]	; (8001738 <Magneto_Sensor_Handler+0x1c0>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d16c      	bne.n	80016c2 <Magneto_Sensor_Handler+0x14a>
      {
        mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 80015e8:	4b52      	ldr	r3, [pc, #328]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f4:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800173c <Magneto_Sensor_Handler+0x1c4>
 80015f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015fc:	edc7 7a07 	vstr	s15, [r7, #28]
        mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 8001600:	4b4c      	ldr	r3, [pc, #304]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800173c <Magneto_Sensor_Handler+0x1c4>
 8001610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001614:	edc7 7a08 	vstr	s15, [r7, #32]
        mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 8001618:	4b46      	ldr	r3, [pc, #280]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	ee07 3a90 	vmov	s15, r3
 8001620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001624:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800173c <Magneto_Sensor_Handler+0x1c4>
 8001628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        mag_data_in.time_stamp = (int)TimeStamp;
 8001630:	4b43      	ldr	r3, [pc, #268]	; (8001740 <Magneto_Sensor_Handler+0x1c8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
        TimeStamp += (uint32_t)ALGO_PERIOD;
 8001636:	4b42      	ldr	r3, [pc, #264]	; (8001740 <Magneto_Sensor_Handler+0x1c8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	330a      	adds	r3, #10
 800163c:	4a40      	ldr	r2, [pc, #256]	; (8001740 <Magneto_Sensor_Handler+0x1c8>)
 800163e:	6013      	str	r3, [r2, #0]

        MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 8001640:	f107 020c 	add.w	r2, r7, #12
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fe20 	bl	8002290 <MotionFX_manager_MagCal_run>

        if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 8001650:	7e3b      	ldrb	r3, [r7, #24]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d135      	bne.n	80016c2 <Magneto_Sensor_Handler+0x14a>
        {
          MagCalStatus = 1;
 8001656:	4b38      	ldr	r3, [pc, #224]	; (8001738 <Magneto_Sensor_Handler+0x1c0>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]

          ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800165c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001660:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001744 <Magneto_Sensor_Handler+0x1cc>
 8001664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001668:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          MagOffset.x = (int32_t)ans_float;
 800166c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001674:	ee17 2a90 	vmov	r2, s15
 8001678:	4b33      	ldr	r3, [pc, #204]	; (8001748 <Magneto_Sensor_Handler+0x1d0>)
 800167a:	601a      	str	r2, [r3, #0]
          ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800167c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001680:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001744 <Magneto_Sensor_Handler+0x1cc>
 8001684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001688:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          MagOffset.y = (int32_t)ans_float;
 800168c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001694:	ee17 2a90 	vmov	r2, s15
 8001698:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <Magneto_Sensor_Handler+0x1d0>)
 800169a:	605a      	str	r2, [r3, #4]
          ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800169c:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001744 <Magneto_Sensor_Handler+0x1cc>
 80016a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          MagOffset.z = (int32_t)ans_float;
 80016ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b4:	ee17 2a90 	vmov	r2, s15
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <Magneto_Sensor_Handler+0x1d0>)
 80016ba:	609a      	str	r2, [r3, #8]

          /* Disable magnetometer calibration */
          MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 80016bc:	200a      	movs	r0, #10
 80016be:	f000 fe02 	bl	80022c6 <MotionFX_manager_MagCal_stop>
        }
      }

      MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <Magneto_Sensor_Handler+0x1d0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	4a19      	ldr	r2, [pc, #100]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80016ce:	6013      	str	r3, [r2, #0]
      MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <Magneto_Sensor_Handler+0x1d0>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	4a16      	ldr	r2, [pc, #88]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80016dc:	6053      	str	r3, [r2, #4]
      MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <Magneto_Sensor_Handler+0x1d0>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	4a12      	ldr	r2, [pc, #72]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80016ea:	6093      	str	r3, [r2, #8]
    }

    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	332f      	adds	r3, #47	; 0x2f
 80016f0:	4a10      	ldr	r2, [pc, #64]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80016f2:	6811      	ldr	r1, [r2, #0]
 80016f4:	2204      	movs	r2, #4
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 ffae 	bl	8002658 <Serialize_s32>
    Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3333      	adds	r3, #51	; 0x33
 8001700:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 8001702:	6851      	ldr	r1, [r2, #4]
 8001704:	2204      	movs	r2, #4
 8001706:	4618      	mov	r0, r3
 8001708:	f000 ffa6 	bl	8002658 <Serialize_s32>
    Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3337      	adds	r3, #55	; 0x37
 8001710:	4a08      	ldr	r2, [pc, #32]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 8001712:	6891      	ldr	r1, [r2, #8]
 8001714:	2204      	movs	r2, #4
 8001716:	4618      	mov	r0, r3
 8001718:	f000 ff9e 	bl	8002658 <Serialize_s32>
  }
}
 800171c:	bf00      	nop
 800171e:	3730      	adds	r7, #48	; 0x30
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000584 	.word	0x20000584
 8001728:	20000589 	.word	0x20000589
 800172c:	2000058c 	.word	0x2000058c
 8001730:	20001e40 	.word	0x20001e40
 8001734:	200005b8 	.word	0x200005b8
 8001738:	200005d8 	.word	0x200005d8
 800173c:	3b03126f 	.word	0x3b03126f
 8001740:	200005c4 	.word	0x200005c4
 8001744:	43fa0000 	.word	0x43fa0000
 8001748:	200005cc 	.word	0x200005cc

0800174c <TIM_Config>:
 * @brief  Timer configuration
 * @param  Freq the desired Timer frequency
 * @retval None
 */
static void TIM_Config(uint32_t Freq)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 8001754:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001758:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <TIM_Config+0x60>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	fbb2 f3f3 	udiv	r3, r2, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	3b01      	subs	r3, #1
 8001772:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 8001774:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <TIM_Config+0x64>)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <TIM_Config+0x64>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <TIM_Config+0x64>)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <TIM_Config+0x64>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <TIM_Config+0x64>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 8001792:	4807      	ldr	r0, [pc, #28]	; (80017b0 <TIM_Config+0x64>)
 8001794:	f00b f94e 	bl	800ca34 <HAL_TIM_Base_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <TIM_Config+0x56>
  {
    Error_Handler();
 800179e:	f000 fcb5 	bl	800210c <Error_Handler>
  }
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000010 	.word	0x20000010
 80017b0:	200023b8 	.word	0x200023b8

080017b4 <DWT_Init>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
static void DWT_Init(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <DWT_Init+0x28>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <DWT_Init+0x28>)
 80017be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c2:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <DWT_Init+0x2c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <DWT_Init+0x2c>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000edf0 	.word	0xe000edf0
 80017e0:	e0001000 	.word	0xe0001000

080017e4 <DWT_Start>:
 * @brief  Start counting clock cycles
 * @param  None
 * @retval None
 */
static void DWT_Start(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <DWT_Start+0x20>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <DWT_Start+0x20>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <DWT_Start+0x20>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6013      	str	r3, [r2, #0]
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e0001000 	.word	0xe0001000

08001808 <DWT_Stop>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
static uint32_t DWT_Stop(void)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
  volatile uint32_t cycles_count = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	603b      	str	r3, [r7, #0]
  uint32_t system_core_clock_mhz = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <DWT_Stop+0x44>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a0c      	ldr	r2, [pc, #48]	; (800184c <DWT_Stop+0x44>)
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	6013      	str	r3, [r2, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <DWT_Stop+0x44>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	603b      	str	r3, [r7, #0]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <DWT_Stop+0x48>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a09      	ldr	r2, [pc, #36]	; (8001854 <DWT_Stop+0x4c>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	0c9b      	lsrs	r3, r3, #18
 8001834:	607b      	str	r3, [r7, #4]
  return cycles_count / system_core_clock_mhz;
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e0001000 	.word	0xe0001000
 8001850:	20000010 	.word	0x20000010
 8001854:	431bde83 	.word	0x431bde83

08001858 <UART_ReceivedMSG>:
 * @brief  Check if a message is received via UART
 * @param  Msg the pointer to the message to be received
 * @retval 1 if a complete message is found, 0 otherwise
 */
int UART_ReceivedMSG(TMsg *Msg)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	83fb      	strh	r3, [r7, #30]
  uint8_t inc;

  // TODO:  Set the COM1 and RESET pins
  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 8001864:	4b54      	ldr	r3, [pc, #336]	; (80019b8 <UART_ReceivedMSG+0x160>)
 8001866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001868:	4618      	mov	r0, r3
 800186a:	f000 f8e1 	bl	8001a30 <Get_DMA_Flag_Status>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	f040 809c 	bne.w	80019ae <UART_ReceivedMSG+0x156>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 8001876:	4b50      	ldr	r3, [pc, #320]	; (80019b8 <UART_ReceivedMSG+0x160>)
 8001878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f8e8 	bl	8001a50 <Get_DMA_Counter>
 8001880:	4603      	mov	r3, r0
 8001882:	b29b      	uxth	r3, r3
 8001884:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001888:	83bb      	strh	r3, [r7, #28]

    if (dma_counter >= UartEngine.StartOfMsg)
 800188a:	4b4c      	ldr	r3, [pc, #304]	; (80019bc <UART_ReceivedMSG+0x164>)
 800188c:	889b      	ldrh	r3, [r3, #4]
 800188e:	8bba      	ldrh	r2, [r7, #28]
 8001890:	429a      	cmp	r2, r3
 8001892:	d305      	bcc.n	80018a0 <UART_ReceivedMSG+0x48>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 8001894:	4b49      	ldr	r3, [pc, #292]	; (80019bc <UART_ReceivedMSG+0x164>)
 8001896:	889b      	ldrh	r3, [r3, #4]
 8001898:	8bba      	ldrh	r2, [r7, #28]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	843b      	strh	r3, [r7, #32]
 800189e:	e007      	b.n	80018b0 <UART_ReceivedMSG+0x58>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 80018a0:	4b46      	ldr	r3, [pc, #280]	; (80019bc <UART_ReceivedMSG+0x164>)
 80018a2:	889b      	ldrh	r3, [r3, #4]
 80018a4:	8bba      	ldrh	r2, [r7, #28]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018ae:	843b      	strh	r3, [r7, #32]
    }

    j = UartEngine.StartOfMsg;
 80018b0:	4b42      	ldr	r3, [pc, #264]	; (80019bc <UART_ReceivedMSG+0x164>)
 80018b2:	889b      	ldrh	r3, [r3, #4]
 80018b4:	84bb      	strh	r3, [r7, #36]	; 0x24

    for (k = 0; k < length; k++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	847b      	strh	r3, [r7, #34]	; 0x22
 80018ba:	e06d      	b.n	8001998 <UART_ReceivedMSG+0x140>
    {
      data = UartRxBuffer[j];
 80018bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018be:	4a40      	ldr	r2, [pc, #256]	; (80019c0 <UART_ReceivedMSG+0x168>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	76fb      	strb	r3, [r7, #27]
      j++;
 80018c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018c6:	3301      	adds	r3, #1
 80018c8:	84bb      	strh	r3, [r7, #36]	; 0x24

      if (j >= (uint16_t)UART_RxBufferSize)
 80018ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018d0:	d301      	bcc.n	80018d6 <UART_ReceivedMSG+0x7e>
      {
        j = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      if (data == (uint8_t)TMsg_EOF)
 80018d6:	7efb      	ldrb	r3, [r7, #27]
 80018d8:	2bf0      	cmp	r3, #240	; 0xf0
 80018da:	d15a      	bne.n	8001992 <UART_ReceivedMSG+0x13a>
      {
        j = UartEngine.StartOfMsg;
 80018dc:	4b37      	ldr	r3, [pc, #220]	; (80019bc <UART_ReceivedMSG+0x164>)
 80018de:	889b      	ldrh	r3, [r3, #4]
 80018e0:	84bb      	strh	r3, [r7, #36]	; 0x24

        for (i = 0; i < k; i += inc)
 80018e2:	2300      	movs	r3, #0
 80018e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80018e6:	e03a      	b.n	800195e <UART_ReceivedMSG+0x106>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 80018e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018ea:	3301      	adds	r3, #1
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f2:	833b      	strh	r3, [r7, #24]

          if (source >= TMsg_MaxLen)
 80018f4:	8bfb      	ldrh	r3, [r7, #30]
 80018f6:	2bff      	cmp	r3, #255	; 0xff
 80018f8:	d904      	bls.n	8001904 <UART_ReceivedMSG+0xac>
          {
            UartEngine.StartOfMsg = j;
 80018fa:	4a30      	ldr	r2, [pc, #192]	; (80019bc <UART_ReceivedMSG+0x164>)
 80018fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018fe:	8093      	strh	r3, [r2, #4]
            return 0;
 8001900:	2300      	movs	r3, #0
 8001902:	e055      	b.n	80019b0 <UART_ReceivedMSG+0x158>
          }

          Source0 = UartRxBuffer[j];
 8001904:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001906:	4a2e      	ldr	r2, [pc, #184]	; (80019c0 <UART_ReceivedMSG+0x168>)
 8001908:	5cd3      	ldrb	r3, [r2, r3]
 800190a:	75fb      	strb	r3, [r7, #23]
          Source1 = UartRxBuffer[j2];
 800190c:	8b3b      	ldrh	r3, [r7, #24]
 800190e:	4a2c      	ldr	r2, [pc, #176]	; (80019c0 <UART_ReceivedMSG+0x168>)
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	75bb      	strb	r3, [r7, #22]
          Dest    = &Msg->Data[source];
 8001914:	8bfb      	ldrh	r3, [r7, #30]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	3304      	adds	r3, #4
 800191c:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 800191e:	7db9      	ldrb	r1, [r7, #22]
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fdf6 	bl	8002516 <ReverseByteStuffCopyByte2>
 800192a:	4603      	mov	r3, r0
 800192c:	73fb      	strb	r3, [r7, #15]

          if (inc == 0U)
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d104      	bne.n	800193e <UART_ReceivedMSG+0xe6>
          {
            UartEngine.StartOfMsg = j2;
 8001934:	4a21      	ldr	r2, [pc, #132]	; (80019bc <UART_ReceivedMSG+0x164>)
 8001936:	8b3b      	ldrh	r3, [r7, #24]
 8001938:	8093      	strh	r3, [r2, #4]
            return 0;
 800193a:	2300      	movs	r3, #0
 800193c:	e038      	b.n	80019b0 <UART_ReceivedMSG+0x158>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	b29a      	uxth	r2, r3
 8001942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001944:	4413      	add	r3, r2
 8001946:	b29b      	uxth	r3, r3
 8001948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800194c:	84bb      	strh	r3, [r7, #36]	; 0x24
          source++;
 800194e:	8bfb      	ldrh	r3, [r7, #30]
 8001950:	3301      	adds	r3, #1
 8001952:	83fb      	strh	r3, [r7, #30]
        for (i = 0; i < k; i += inc)
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	b29a      	uxth	r2, r3
 8001958:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800195a:	4413      	add	r3, r2
 800195c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800195e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001960:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001962:	429a      	cmp	r2, r3
 8001964:	d3c0      	bcc.n	80018e8 <UART_ReceivedMSG+0x90>
        }

        Msg->Len = source;
 8001966:	8bfa      	ldrh	r2, [r7, #30]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 800196c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800196e:	3301      	adds	r3, #1
 8001970:	b29b      	uxth	r3, r3
 8001972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001976:	84bb      	strh	r3, [r7, #36]	; 0x24
        UartEngine.StartOfMsg = j;
 8001978:	4a10      	ldr	r2, [pc, #64]	; (80019bc <UART_ReceivedMSG+0x164>)
 800197a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800197c:	8093      	strh	r3, [r2, #4]

        if (CHK_CheckAndRemove(Msg) != 0) /* check message integrity */
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 fe1a 	bl	80025b8 <CHK_CheckAndRemove>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <UART_ReceivedMSG+0x136>
        {
          return 1;
 800198a:	2301      	movs	r3, #1
 800198c:	e010      	b.n	80019b0 <UART_ReceivedMSG+0x158>
        }
        else
        {
          return 0;
 800198e:	2300      	movs	r3, #0
 8001990:	e00e      	b.n	80019b0 <UART_ReceivedMSG+0x158>
    for (k = 0; k < length; k++)
 8001992:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001994:	3301      	adds	r3, #1
 8001996:	847b      	strh	r3, [r7, #34]	; 0x22
 8001998:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800199a:	8c3b      	ldrh	r3, [r7, #32]
 800199c:	429a      	cmp	r2, r3
 800199e:	d38d      	bcc.n	80018bc <UART_ReceivedMSG+0x64>
        }
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 80019a0:	8c3b      	ldrh	r3, [r7, #32]
 80019a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019a6:	d902      	bls.n	80019ae <UART_ReceivedMSG+0x156>
    {
      UartEngine.StartOfMsg = dma_counter;
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <UART_ReceivedMSG+0x164>)
 80019aa:	8bbb      	ldrh	r3, [r7, #28]
 80019ac:	8093      	strh	r3, [r2, #4]
    }
  }

  return 0;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3728      	adds	r7, #40	; 0x28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20002410 	.word	0x20002410
 80019bc:	20002208 	.word	0x20002208
 80019c0:	20002008 	.word	0x20002008

080019c4 <UART_SendMsg>:
 * @brief  Send a message via UART
 * @param  Msg the pointer to the message to be sent
 * @retval None
 */
void UART_SendMsg(TMsg *Msg)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 fdc9 	bl	8002564 <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4807      	ldr	r0, [pc, #28]	; (80019f4 <UART_SendMsg+0x30>)
 80019d6:	f000 fd70 	bl	80024ba <ByteStuffCopy>
 80019da:	4603      	mov	r3, r0
 80019dc:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 80019de:	89fa      	ldrh	r2, [r7, #14]
 80019e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80019e4:	4903      	ldr	r1, [pc, #12]	; (80019f4 <UART_SendMsg+0x30>)
 80019e6:	4804      	ldr	r0, [pc, #16]	; (80019f8 <UART_SendMsg+0x34>)
 80019e8:	f00b fee2 	bl	800d7b0 <HAL_UART_Transmit>
}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200007e4 	.word	0x200007e4
 80019f8:	20002410 	.word	0x20002410

080019fc <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <UART_StartReceiveMsg+0x2c>)
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <UART_StartReceiveMsg+0x30>)
 8001a04:	659a      	str	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <UART_StartReceiveMsg+0x2c>)
 8001a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <UART_StartReceiveMsg+0x2c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8001a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a1c:	4903      	ldr	r1, [pc, #12]	; (8001a2c <UART_StartReceiveMsg+0x30>)
 8001a1e:	4802      	ldr	r0, [pc, #8]	; (8001a28 <UART_StartReceiveMsg+0x2c>)
 8001a20:	f00b ff5c 	bl	800d8dc <HAL_UART_Receive_DMA>
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20002410 	.word	0x20002410
 8001a2c:	20002008 	.word	0x20002008

08001a30 <Get_DMA_Flag_Status>:
 * @brief  Get the DMA Stream pending flags
 * @param  handle_dma DMA handle
 * @retval The state of FLAG (SET or RESET)
 */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, handle_dma->ErrorCode));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691a      	ldr	r2, [r3, #16]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	4013      	ands	r3, r2
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <Get_DMA_Counter>:
 * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
 * @param  handle_dma DMA handle
 * @retval The number of remaining data units in the current DMA Stream transfer
 */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5e:	b29b      	uxth	r3, r3
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001a70:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <MX_CRC_Init+0x3c>)
 8001a72:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <MX_CRC_Init+0x40>)
 8001a74:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_CRC_Init+0x3c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <MX_CRC_Init+0x3c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_CRC_Init+0x3c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <MX_CRC_Init+0x3c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_CRC_Init+0x3c>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a94:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <MX_CRC_Init+0x3c>)
 8001a96:	f005 f85f 	bl	8006b58 <HAL_CRC_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001aa0:	f000 fb34 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20002210 	.word	0x20002210
 8001aac:	40023000 	.word	0x40023000

08001ab0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <HAL_CRC_MspInit+0x3c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d10e      	bne.n	8001ae0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_CRC_MspInit+0x40>)
 8001ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac8:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <HAL_CRC_MspInit+0x40>)
 8001aca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ace:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_CRC_MspInit+0x40>)
 8001ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40023000 	.word	0x40023000
 8001af0:	46020c00 	.word	0x46020c00

08001af4 <MX_GPDMA1_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel5;
DMA_HandleTypeDef handle_GPDMA1_Channel5;

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END GPDMA1_Init 0 */

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel5.Instance = GPDMA1_Channel5;
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <MX_GPDMA1_Init+0x84>)
 8001afa:	4a20      	ldr	r2, [pc, #128]	; (8001b7c <MX_GPDMA1_Init+0x88>)
 8001afc:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel5.Init.Request = DMA_REQUEST_SW;
 8001afe:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <MX_GPDMA1_Init+0x84>)
 8001b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b04:	605a      	str	r2, [r3, #4]
  handle_GPDMA1_Channel5.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <MX_GPDMA1_Init+0x84>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  handle_GPDMA1_Channel5.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <MX_GPDMA1_Init+0x84>)
 8001b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b12:	60da      	str	r2, [r3, #12]
  handle_GPDMA1_Channel5.Init.SrcInc = DMA_SINC_FIXED;
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <MX_GPDMA1_Init+0x84>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
  handle_GPDMA1_Channel5.Init.DestInc = DMA_DINC_FIXED;
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <MX_GPDMA1_Init+0x84>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	615a      	str	r2, [r3, #20]
  handle_GPDMA1_Channel5.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <MX_GPDMA1_Init+0x84>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
  handle_GPDMA1_Channel5.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <MX_GPDMA1_Init+0x84>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	61da      	str	r2, [r3, #28]
  handle_GPDMA1_Channel5.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_GPDMA1_Init+0x84>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	621a      	str	r2, [r3, #32]
  handle_GPDMA1_Channel5.Init.SrcBurstLength = 1;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_GPDMA1_Init+0x84>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24
  handle_GPDMA1_Channel5.Init.DestBurstLength = 1;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_GPDMA1_Init+0x84>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28
  handle_GPDMA1_Channel5.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_GPDMA1_Init+0x84>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
  handle_GPDMA1_Channel5.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_GPDMA1_Init+0x84>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	631a      	str	r2, [r3, #48]	; 0x30
  handle_GPDMA1_Channel5.Init.Mode = DMA_NORMAL;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_GPDMA1_Init+0x84>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 8001b50:	4809      	ldr	r0, [pc, #36]	; (8001b78 <MX_GPDMA1_Init+0x84>)
 8001b52:	f005 f8eb 	bl	8006d2c <HAL_DMA_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_GPDMA1_Init+0x6c>
  {
    Error_Handler();
 8001b5c:	f000 fad6 	bl	800210c <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001b60:	2110      	movs	r1, #16
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_GPDMA1_Init+0x84>)
 8001b64:	f005 fa74 	bl	8007050 <HAL_DMA_ConfigChannelAttributes>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_GPDMA1_Init+0x7e>
  {
    Error_Handler();
 8001b6e:	f000 facd 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20002234 	.word	0x20002234
 8001b7c:	400202d0 	.word	0x400202d0

08001b80 <MX_GPIO_Init>:
     PC15-OSC32_OUT (PC15)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b96:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <MX_GPIO_Init+0xc8>)
 8001b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b9c:	4a2a      	ldr	r2, [pc, #168]	; (8001c48 <MX_GPIO_Init+0xc8>)
 8001b9e:	f043 0304 	orr.w	r3, r3, #4
 8001ba2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ba6:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <MX_GPIO_Init+0xc8>)
 8001ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bb4:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <MX_GPIO_Init+0xc8>)
 8001bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bba:	4a23      	ldr	r2, [pc, #140]	; (8001c48 <MX_GPIO_Init+0xc8>)
 8001bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001bc4:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <MX_GPIO_Init+0xc8>)
 8001bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <MX_GPIO_Init+0xc8>)
 8001bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bd8:	4a1b      	ldr	r2, [pc, #108]	; (8001c48 <MX_GPIO_Init+0xc8>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001be2:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <MX_GPIO_Init+0xc8>)
 8001be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UserCalibrationLED_GPIO_Port, UserCalibrationLED_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2180      	movs	r1, #128	; 0x80
 8001bf4:	4815      	ldr	r0, [pc, #84]	; (8001c4c <MX_GPIO_Init+0xcc>)
 8001bf6:	f006 f89f 	bl	8007d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButtonInterrupt_Pin;
 8001bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <MX_GPIO_Init+0xd0>)
 8001c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(UserCalibrationButtonInterrupt_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4811      	ldr	r0, [pc, #68]	; (8001c54 <MX_GPIO_Init+0xd4>)
 8001c10:	f005 fdc4 	bl	800779c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationLED_Pin;
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UserCalibrationLED_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4808      	ldr	r0, [pc, #32]	; (8001c4c <MX_GPIO_Init+0xcc>)
 8001c2c:	f005 fdb6 	bl	800779c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 1, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2101      	movs	r1, #1
 8001c34:	2018      	movs	r0, #24
 8001c36:	f004 ff5a 	bl	8006aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001c3a:	2018      	movs	r0, #24
 8001c3c:	f004 ff71 	bl	8006b22 <HAL_NVIC_EnableIRQ>

}
 8001c40:	bf00      	nop
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	46020c00 	.word	0x46020c00
 8001c4c:	42021c00 	.word	0x42021c00
 8001c50:	10110000 	.word	0x10110000
 8001c54:	42020800 	.word	0x42020800

08001c58 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <MX_I2C2_Init+0x74>)
 8001c5e:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <MX_I2C2_Init+0x78>)
 8001c60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F07BFF;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <MX_I2C2_Init+0x74>)
 8001c64:	4a1b      	ldr	r2, [pc, #108]	; (8001cd4 <MX_I2C2_Init+0x7c>)
 8001c66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <MX_I2C2_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <MX_I2C2_Init+0x74>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c74:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <MX_I2C2_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c7a:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <MX_I2C2_Init+0x74>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <MX_I2C2_Init+0x74>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <MX_I2C2_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <MX_I2C2_Init+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c92:	480e      	ldr	r0, [pc, #56]	; (8001ccc <MX_I2C2_Init+0x74>)
 8001c94:	f006 f899 	bl	8007dca <HAL_I2C_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c9e:	f000 fa35 	bl	800210c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4809      	ldr	r0, [pc, #36]	; (8001ccc <MX_I2C2_Init+0x74>)
 8001ca6:	f006 fdfd 	bl	80088a4 <HAL_I2CEx_ConfigAnalogFilter>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001cb0:	f000 fa2c 	bl	800210c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4805      	ldr	r0, [pc, #20]	; (8001ccc <MX_I2C2_Init+0x74>)
 8001cb8:	f006 fe3f 	bl	800893a <HAL_I2CEx_ConfigDigitalFilter>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001cc2:	f000 fa23 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200022ac 	.word	0x200022ac
 8001cd0:	40005800 	.word	0x40005800
 8001cd4:	00f07bff 	.word	0x00f07bff

08001cd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b0ba      	sub	sp, #232	; 0xe8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	22c0      	movs	r2, #192	; 0xc0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f018 fd7e 	bl	801a7fa <memset>
  if(i2cHandle->Instance==I2C2)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a24      	ldr	r2, [pc, #144]	; (8001d94 <HAL_I2C_MspInit+0xbc>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d140      	bne.n	8001d8a <HAL_I2C_MspInit+0xb2>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4618      	mov	r0, r3
 8001d16:	f008 f8a5 	bl	8009e64 <HAL_RCCEx_PeriphCLKConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d20:	f000 f9f4 	bl	800210c <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d24:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <HAL_I2C_MspInit+0xc0>)
 8001d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_I2C_MspInit+0xc0>)
 8001d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d30:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <HAL_I2C_MspInit+0xc0>)
 8001d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = AccelGyroI2CClock_Pin|AccelGyroI2CData_Pin;
 8001d42:	2330      	movs	r3, #48	; 0x30
 8001d44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d48:	2312      	movs	r3, #18
 8001d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d64:	4619      	mov	r1, r3
 8001d66:	480d      	ldr	r0, [pc, #52]	; (8001d9c <HAL_I2C_MspInit+0xc4>)
 8001d68:	f005 fd18 	bl	800779c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_I2C_MspInit+0xc0>)
 8001d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d72:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <HAL_I2C_MspInit+0xc0>)
 8001d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d78:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_I2C_MspInit+0xc0>)
 8001d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	37e8      	adds	r7, #232	; 0xe8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40005800 	.word	0x40005800
 8001d98:	46020c00 	.word	0x46020c00
 8001d9c:	42021c00 	.word	0x42021c00

08001da0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <HAL_I2C_MspDeInit+0x3c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d10f      	bne.n	8001dd2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_I2C_MspDeInit+0x40>)
 8001db4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001db8:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <HAL_I2C_MspDeInit+0x40>)
 8001dba:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001dbe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(AccelGyroI2CClock_GPIO_Port, AccelGyroI2CClock_Pin);
 8001dc2:	2110      	movs	r1, #16
 8001dc4:	4807      	ldr	r0, [pc, #28]	; (8001de4 <HAL_I2C_MspDeInit+0x44>)
 8001dc6:	f005 fec1 	bl	8007b4c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(AccelGyroI2CData_GPIO_Port, AccelGyroI2CData_Pin);
 8001dca:	2120      	movs	r1, #32
 8001dcc:	4805      	ldr	r0, [pc, #20]	; (8001de4 <HAL_I2C_MspDeInit+0x44>)
 8001dce:	f005 febd 	bl	8007b4c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40005800 	.word	0x40005800
 8001de0:	46020c00 	.word	0x46020c00
 8001de4:	42021c00 	.word	0x42021c00

08001de8 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	//
  (void)BSP_MOTION_SENSOR_Init(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_ACCELERO);
 8001dec:	2102      	movs	r1, #2
 8001dee:	2000      	movs	r0, #0
 8001df0:	f001 fa90 	bl	8003314 <BSP_MOTION_SENSOR_Init>
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Init(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_GYRO);
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f001 fa88 	bl	8003314 <BSP_MOTION_SENSOR_Init>
}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Init(IIS2MDC_MAGNET_INSTANCE_ID, MOTION_MAGNETO);
 8001e0c:	2104      	movs	r1, #4
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f001 fa80 	bl	8003314 <BSP_MOTION_SENSOR_Init>
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Enable(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_ACCELERO);
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f001 fac8 	bl	80033b4 <BSP_MOTION_SENSOR_Enable>
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Enable(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_GYRO);
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f001 fac0 	bl	80033b4 <BSP_MOTION_SENSOR_Enable>
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Enable(IIS2MDC_MAGNET_INSTANCE_ID, MOTION_MAGNETO);
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f001 fab8 	bl	80033b4 <BSP_MOTION_SENSOR_Enable>
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Disable(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_ACCELERO);
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f001 fb10 	bl	8003474 <BSP_MOTION_SENSOR_Disable>
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Disable(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_GYRO);
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f001 fb08 	bl	8003474 <BSP_MOTION_SENSOR_Disable>
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Disable(IIS2MDC_MAGNET_INSTANCE_ID, MOTION_MAGNETO);
 8001e6c:	2104      	movs	r1, #4
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f001 fb00 	bl	8003474 <BSP_MOTION_SENSOR_Disable>
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(BSP_MOTION_SENSOR_Axes_t *Axes)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  (void)BSP_MOTION_SENSOR_GetAxes(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_ACCELERO, Axes);
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	2102      	movs	r1, #2
 8001e84:	2000      	movs	r0, #0
 8001e86:	f001 fb55 	bl	8003534 <BSP_MOTION_SENSOR_GetAxes>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(BSP_MOTION_SENSOR_Axes_t *Axes)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  (void)BSP_MOTION_SENSOR_GetAxes(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_GYRO, Axes);
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f001 fb48 	bl	8003534 <BSP_MOTION_SENSOR_GetAxes>
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(BSP_MOTION_SENSOR_Axes_t *Axes)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  (void)BSP_MOTION_SENSOR_GetAxes(IIS2MDC_MAGNET_INSTANCE_ID, MOTION_MAGNETO, Axes);
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f001 fb3b 	bl	8003534 <BSP_MOTION_SENSOR_GetAxes>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)BSP_MOTION_SENSOR_SetOutputDataRate(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_ACCELERO, Odr);
 8001ed0:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f001 fb90 	bl	80035fc <BSP_MOTION_SENSOR_SetOutputDataRate>
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  (void)BSP_MOTION_SENSOR_SetFullScale(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_ACCELERO, Fullscale);
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	2102      	movs	r1, #2
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f001 fbe7 	bl	80036c4 <BSP_MOTION_SENSOR_SetFullScale>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	226e      	movs	r2, #110	; 0x6e
 8001f0a:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	2277      	movs	r2, #119	; 0x77
 8001f12:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3302      	adds	r3, #2
 8001f18:	2275      	movs	r2, #117	; 0x75
 8001f1a:	701a      	strb	r2, [r3, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	226e      	movs	r2, #110	; 0x6e
 8001f34:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	2277      	movs	r2, #119	; 0x77
 8001f3c:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3302      	adds	r3, #2
 8001f42:	2275      	movs	r2, #117	; 0x75
 8001f44:	701a      	strb	r2, [r3, #0]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	226e      	movs	r2, #110	; 0x6e
 8001f5e:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3301      	adds	r3, #1
 8001f64:	2265      	movs	r2, #101	; 0x65
 8001f66:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	2275      	movs	r2, #117	; 0x75
 8001f6e:	701a      	strb	r2, [r3, #0]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f80:	f004 fc32 	bl	80067e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f84:	f000 f814 	bl	8001fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f88:	f7ff fdfa 	bl	8001b80 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001f8c:	f000 fcc6 	bl	800291c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001f90:	f7ff fe62 	bl	8001c58 <MX_I2C2_Init>
  MX_TIM15_Init();
 8001f94:	f000 fc48 	bl	8002828 <MX_TIM15_Init>
  MX_RTC_Init();
 8001f98:	f000 f9a2 	bl	80022e0 <MX_RTC_Init>
  MX_GPDMA1_Init();
 8001f9c:	f7ff fdaa 	bl	8001af4 <MX_GPDMA1_Init>
  MX_CRC_Init();
 8001fa0:	f7ff fd64 	bl	8001a6c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  MX_MEMS_Init();
 8001fa4:	f7fe ffba 	bl	8000f1c <MX_MEMS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_MEMS_Process();
 8001fa8:	f7fe ffbe 	bl	8000f28 <MX_MEMS_Process>
 8001fac:	e7fc      	b.n	8001fa8 <main+0x2c>
	...

08001fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b09e      	sub	sp, #120	; 0x78
 8001fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb6:	f107 0318 	add.w	r3, r7, #24
 8001fba:	2260      	movs	r2, #96	; 0x60
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f018 fc1b 	bl	801a7fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]
 8001fd0:	611a      	str	r2, [r3, #16]
 8001fd2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001fd4:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001fd8:	f006 fcfc 	bl	80089d4 <HAL_PWREx_ControlVoltageScaling>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001fe2:	f000 f893 	bl	800210c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001fe6:	2318      	movs	r3, #24
 8001fe8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001fea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001ff4:	2310      	movs	r3, #16
 8001ff6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8001ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001ffe:	2300      	movs	r3, #0
 8002000:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002002:	2302      	movs	r3, #2
 8002004:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002006:	2301      	movs	r3, #1
 8002008:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800200a:	2300      	movs	r3, #0
 800200c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800200e:	2301      	movs	r3, #1
 8002010:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002012:	2350      	movs	r3, #80	; 0x50
 8002014:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002016:	2302      	movs	r3, #2
 8002018:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800201a:	2302      	movs	r3, #2
 800201c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800201e:	2302      	movs	r3, #2
 8002020:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8002022:	2300      	movs	r3, #0
 8002024:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800202a:	f107 0318 	add.w	r3, r7, #24
 800202e:	4618      	mov	r0, r3
 8002030:	f006 fd62 	bl	8008af8 <HAL_RCC_OscConfig>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800203a:	f000 f867 	bl	800210c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203e:	231f      	movs	r3, #31
 8002040:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002042:	2303      	movs	r3, #3
 8002044:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002056:	463b      	mov	r3, r7
 8002058:	2104      	movs	r1, #4
 800205a:	4618      	mov	r0, r3
 800205c:	f007 fbbc 	bl	80097d8 <HAL_RCC_ClockConfig>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002066:	f000 f851 	bl	800210c <Error_Handler>
  }
  __HAL_RCC_PWR_CLK_DISABLE();
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <SystemClock_Config+0xd4>)
 800206c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <SystemClock_Config+0xd4>)
 8002072:	f023 0304 	bic.w	r3, r3, #4
 8002076:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800207a:	bf00      	nop
 800207c:	3778      	adds	r7, #120	; 0x78
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	46020c00 	.word	0x46020c00

08002088 <HAL_GPIO_EXTI_Rising_Callback>:
// When the button's signal goes from a low to a high state
// which is what happens when you push a button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButtonInterrupt_Pin)
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002098:	d128      	bne.n	80020ec <HAL_GPIO_EXTI_Rising_Callback+0x64>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		uint8_t* cMessage = (uint8_t*)"";
 800209a:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_GPIO_EXTI_Rising_Callback+0x6c>)
 800209c:	60fb      	str	r3, [r7, #12]

		// Turn user green LED on/off
		if(iIsUserCalibrationLEDOn == 0)
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <HAL_GPIO_EXTI_Rising_Callback+0x2a>
		{
			iIsUserCalibrationLEDOn = 1;
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Request User Calibration Mode\n\0";
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_GPIO_EXTI_Rising_Callback+0x74>)
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	e004      	b.n	80020bc <HAL_GPIO_EXTI_Rising_Callback+0x34>
		}
		else
		{
			iIsUserCalibrationLEDOn = 0;
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Unrequest User Calibration Mode\n\0";
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 80020ba:	60fb      	str	r3, [r7, #12]
		}

		// Send the message via virtual COM port
		// It uses the UART1 of STLINK's virtual com port and we
		// are transmitting the serial data with this call
		uint16_t iMessageLength = (uint16_t)strlen(cMessage);
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f7fe f8db 	bl	8000278 <strlen>
 80020c2:	4603      	mov	r3, r0
 80020c4:	817b      	strh	r3, [r7, #10]
		if(HAL_UART_Transmit(&huart1, cMessage, iMessageLength, 100) != HAL_OK)
 80020c6:	897a      	ldrh	r2, [r7, #10]
 80020c8:	2364      	movs	r3, #100	; 0x64
 80020ca:	68f9      	ldr	r1, [r7, #12]
 80020cc:	480d      	ldr	r0, [pc, #52]	; (8002104 <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 80020ce:	f00b fb6f 	bl	800d7b0 <HAL_UART_Transmit>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_GPIO_EXTI_Rising_Callback+0x54>
		{
			Error_Handler();
 80020d8:	f000 f818 	bl	800210c <Error_Handler>
		}

		HAL_GPIO_WritePin(UserCalibrationLED_GPIO_Port, UserCalibrationLED_Pin, iIsUserCalibrationLEDOn);
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	2180      	movs	r1, #128	; 0x80
 80020e6:	4808      	ldr	r0, [pc, #32]	; (8002108 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 80020e8:	f005 fe26 	bl	8007d38 <HAL_GPIO_WritePin>
	}
}
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	0801b0b0 	.word	0x0801b0b0
 80020f8:	200009e4 	.word	0x200009e4
 80020fc:	0801b0b4 	.word	0x0801b0b4
 8002100:	0801b0d4 	.word	0x0801b0d4
 8002104:	200022f8 	.word	0x200022f8
 8002108:	42021c00 	.word	0x42021c00

0800210c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002110:	b672      	cpsid	i
}
 8002112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002114:	e7fe      	b.n	8002114 <Error_Handler+0x8>
	...

08002118 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 800211c:	f015 fea8 	bl	8017e70 <MotionFX_GetStateSize>
 8002120:	4603      	mov	r3, r0
 8002122:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 8002126:	d901      	bls.n	800212c <MotionFX_manager_init+0x14>
    Error_Handler();
 8002128:	f7ff fff0 	bl	800210c <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 800212c:	4821      	ldr	r0, [pc, #132]	; (80021b4 <MotionFX_manager_init+0x9c>)
 800212e:	f015 fea3 	bl	8017e78 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 8002132:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <MotionFX_manager_init+0xa0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4619      	mov	r1, r3
 8002138:	481e      	ldr	r0, [pc, #120]	; (80021b4 <MotionFX_manager_init+0x9c>)
 800213a:	f015 ff85 	bl	8018048 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <MotionFX_manager_init+0xa0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	331d      	adds	r3, #29
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff feda 	bl	8001efe <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 800214a:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <MotionFX_manager_init+0xa0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3321      	adds	r3, #33	; 0x21
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fee9 	bl	8001f28 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 8002156:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <MotionFX_manager_init+0xa0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	3325      	adds	r3, #37	; 0x25
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fef8 	bl	8001f52 <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <MotionFX_manager_init+0xa0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a15      	ldr	r2, [pc, #84]	; (80021bc <MotionFX_manager_init+0xa4>)
 8002168:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <MotionFX_manager_init+0xa0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <MotionFX_manager_init+0xa8>)
 8002170:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <MotionFX_manager_init+0xa0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <MotionFX_manager_init+0xac>)
 8002178:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <MotionFX_manager_init+0xa0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <MotionFX_manager_init+0xa0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2201      	movs	r2, #1
 800218a:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <MotionFX_manager_init+0xa0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2201      	movs	r2, #1
 8002192:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <MotionFX_manager_init+0xa0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	4806      	ldr	r0, [pc, #24]	; (80021b4 <MotionFX_manager_init+0x9c>)
 800219c:	f015 ff08 	bl	8017fb0 <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 80021a0:	2100      	movs	r1, #0
 80021a2:	4804      	ldr	r0, [pc, #16]	; (80021b4 <MotionFX_manager_init+0x9c>)
 80021a4:	f015 ff8c 	bl	80180c0 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 80021a8:	2100      	movs	r1, #0
 80021aa:	4802      	ldr	r0, [pc, #8]	; (80021b4 <MotionFX_manager_init+0x9c>)
 80021ac:	f015 ffa8 	bl	8018100 <MotionFX_enable_9X>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000a1c 	.word	0x20000a1c
 80021b8:	20000008 	.word	0x20000008
 80021bc:	3ac88a48 	.word	0x3ac88a48
 80021c0:	3b83126f 	.word	0x3b83126f
 80021c4:	3b449ba6 	.word	0x3b449ba6

080021c8 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	ed87 0a01 	vstr	s0, [r7, #4]
  if (discardedCount == sampleToDiscard)
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <MotionFX_manager_run+0x4c>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <MotionFX_manager_run+0x50>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d10e      	bne.n	8002200 <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	480c      	ldr	r0, [pc, #48]	; (800221c <MotionFX_manager_run+0x54>)
 80021ea:	f015 ffb9 	bl	8018160 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2200      	movs	r2, #0
 80021f2:	9200      	str	r2, [sp, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	68b9      	ldr	r1, [r7, #8]
 80021f8:	4808      	ldr	r0, [pc, #32]	; (800221c <MotionFX_manager_run+0x54>)
 80021fa:	f015 ffa1 	bl	8018140 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 80021fe:	e004      	b.n	800220a <MotionFX_manager_run+0x42>
    discardedCount++;
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <MotionFX_manager_run+0x4c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	4a03      	ldr	r2, [pc, #12]	; (8002214 <MotionFX_manager_run+0x4c>)
 8002208:	6013      	str	r3, [r2, #0]
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000a18 	.word	0x20000a18
 8002218:	2000000c 	.word	0x2000000c
 800221c:	20000a1c 	.word	0x20000a1c

08002220 <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 8002224:	2101      	movs	r1, #1
 8002226:	4802      	ldr	r0, [pc, #8]	; (8002230 <MotionFX_manager_start_6X+0x10>)
 8002228:	f015 ff4a 	bl	80180c0 <MotionFX_enable_6X>
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000a1c 	.word	0x20000a1c

08002234 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8002238:	2100      	movs	r1, #0
 800223a:	4802      	ldr	r0, [pc, #8]	; (8002244 <MotionFX_manager_stop_6X+0x10>)
 800223c:	f015 ff40 	bl	80180c0 <MotionFX_enable_6X>
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000a1c 	.word	0x20000a1c

08002248 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 800224c:	2101      	movs	r1, #1
 800224e:	4802      	ldr	r0, [pc, #8]	; (8002258 <MotionFX_manager_start_9X+0x10>)
 8002250:	f015 ff56 	bl	8018100 <MotionFX_enable_9X>
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000a1c 	.word	0x20000a1c

0800225c <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8002260:	2100      	movs	r1, #0
 8002262:	4802      	ldr	r0, [pc, #8]	; (800226c <MotionFX_manager_stop_9X+0x10>)
 8002264:	f015 ff4c 	bl	8018100 <MotionFX_enable_9X>
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000a1c 	.word	0x20000a1c

08002270 <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  *length = (int)MotionFX_GetLibVersion(version);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f016 fbbc 	bl	80189f8 <MotionFX_GetLibVersion>
 8002280:	4603      	mov	r3, r0
 8002282:	461a      	mov	r2, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	601a      	str	r2, [r3, #0]
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f016 f952 	bl	8018544 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 80022a0:	6838      	ldr	r0, [r7, #0]
 80022a2:	f016 fb6d 	bl	8018980 <MotionFX_MagCal_getParams>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 80022b6:	2101      	movs	r1, #1
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f016 f8a7 	bl	801840c <MotionFX_MagCal_init>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 80022ce:	2100      	movs	r1, #0
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f016 f89b 	bl	801840c <MotionFX_MagCal_init>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08e      	sub	sp, #56	; 0x38
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80022e6:	f107 031c 	add.w	r3, r7, #28
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	60da      	str	r2, [r3, #12]
 80022f4:	611a      	str	r2, [r3, #16]
 80022f6:	615a      	str	r2, [r3, #20]
 80022f8:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 80022fa:	f107 0308 	add.w	r3, r7, #8
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	60da      	str	r2, [r3, #12]
 8002308:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800230e:	4b33      	ldr	r3, [pc, #204]	; (80023dc <MX_RTC_Init+0xfc>)
 8002310:	4a33      	ldr	r2, [pc, #204]	; (80023e0 <MX_RTC_Init+0x100>)
 8002312:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002314:	4b31      	ldr	r3, [pc, #196]	; (80023dc <MX_RTC_Init+0xfc>)
 8002316:	2200      	movs	r2, #0
 8002318:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800231a:	4b30      	ldr	r3, [pc, #192]	; (80023dc <MX_RTC_Init+0xfc>)
 800231c:	227f      	movs	r2, #127	; 0x7f
 800231e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002320:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <MX_RTC_Init+0xfc>)
 8002322:	22ff      	movs	r2, #255	; 0xff
 8002324:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002326:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <MX_RTC_Init+0xfc>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800232c:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <MX_RTC_Init+0xfc>)
 800232e:	2200      	movs	r2, #0
 8002330:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002332:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <MX_RTC_Init+0xfc>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002338:	4b28      	ldr	r3, [pc, #160]	; (80023dc <MX_RTC_Init+0xfc>)
 800233a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800233e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002340:	4b26      	ldr	r3, [pc, #152]	; (80023dc <MX_RTC_Init+0xfc>)
 8002342:	2200      	movs	r2, #0
 8002344:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8002346:	4b25      	ldr	r3, [pc, #148]	; (80023dc <MX_RTC_Init+0xfc>)
 8002348:	2200      	movs	r2, #0
 800234a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800234c:	4823      	ldr	r0, [pc, #140]	; (80023dc <MX_RTC_Init+0xfc>)
 800234e:	f00a f823 	bl	800c398 <HAL_RTC_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002358:	f7ff fed8 	bl	800210c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8002360:	2300      	movs	r3, #0
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8002364:	2300      	movs	r3, #0
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8002368:	2300      	movs	r3, #0
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	4619      	mov	r1, r3
 8002372:	481a      	ldr	r0, [pc, #104]	; (80023dc <MX_RTC_Init+0xfc>)
 8002374:	f00a fb30 	bl	800c9d8 <HAL_RTCEx_PrivilegeModeSet>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800237e:	f7ff fec5 	bl	800210c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002382:	2300      	movs	r3, #0
 8002384:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8002386:	2300      	movs	r3, #0
 8002388:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 800238a:	2300      	movs	r3, #0
 800238c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002396:	f107 0308 	add.w	r3, r7, #8
 800239a:	2201      	movs	r2, #1
 800239c:	4619      	mov	r1, r3
 800239e:	480f      	ldr	r0, [pc, #60]	; (80023dc <MX_RTC_Init+0xfc>)
 80023a0:	f00a f874 	bl	800c48c <HAL_RTC_SetTime>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80023aa:	f7ff feaf 	bl	800210c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80023ae:	2301      	movs	r3, #1
 80023b0:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80023b2:	2301      	movs	r3, #1
 80023b4:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 80023b6:	2301      	movs	r3, #1
 80023b8:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80023be:	1d3b      	adds	r3, r7, #4
 80023c0:	2201      	movs	r2, #1
 80023c2:	4619      	mov	r1, r3
 80023c4:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_RTC_Init+0xfc>)
 80023c6:	f00a f95f 	bl	800c688 <HAL_RTC_SetDate>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 80023d0:	f7ff fe9c 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80023d4:	bf00      	nop
 80023d6:	3738      	adds	r7, #56	; 0x38
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20002388 	.word	0x20002388
 80023e0:	46007800 	.word	0x46007800

080023e4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b0b4      	sub	sp, #208	; 0xd0
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023ec:	f107 0310 	add.w	r3, r7, #16
 80023f0:	22c0      	movs	r2, #192	; 0xc0
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f018 fa00 	bl	801a7fa <memset>
  if(rtcHandle->Instance==RTC)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a17      	ldr	r2, [pc, #92]	; (800245c <HAL_RTC_MspInit+0x78>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d127      	bne.n	8002454 <HAL_RTC_MspInit+0x70>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002404:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002408:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800240a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800240e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002412:	f107 0310 	add.w	r3, r7, #16
 8002416:	4618      	mov	r0, r3
 8002418:	f007 fd24 	bl	8009e64 <HAL_RCCEx_PeriphCLKConfig>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002422:	f7ff fe73 	bl	800210c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <HAL_RTC_MspInit+0x7c>)
 8002428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800242c:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <HAL_RTC_MspInit+0x7c>)
 800242e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002432:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_RTC_MspInit+0x7c>)
 8002438:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800243c:	4a08      	ldr	r2, [pc, #32]	; (8002460 <HAL_RTC_MspInit+0x7c>)
 800243e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002442:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_RTC_MspInit+0x7c>)
 8002448:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800244c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002454:	bf00      	nop
 8002456:	37d0      	adds	r7, #208	; 0xd0
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	46007800 	.word	0x46007800
 8002460:	46020c00 	.word	0x46020c00

08002464 <ByteStuffCopyByte>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 8002470:	2302      	movs	r3, #2
 8002472:	60fb      	str	r3, [r7, #12]

  switch (Source)
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	2bf0      	cmp	r3, #240	; 0xf0
 8002478:	d002      	beq.n	8002480 <ByteStuffCopyByte+0x1c>
 800247a:	2bf1      	cmp	r3, #241	; 0xf1
 800247c:	d008      	beq.n	8002490 <ByteStuffCopyByte+0x2c>
 800247e:	e00f      	b.n	80024a0 <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	22f1      	movs	r2, #241	; 0xf1
 8002484:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3301      	adds	r3, #1
 800248a:	22f2      	movs	r2, #242	; 0xf2
 800248c:	701a      	strb	r2, [r3, #0]
      break;
 800248e:	e00d      	b.n	80024ac <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	22f1      	movs	r2, #241	; 0xf1
 8002494:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3301      	adds	r3, #1
 800249a:	22f1      	movs	r2, #241	; 0xf1
 800249c:	701a      	strb	r2, [r3, #0]
      break;
 800249e:	e005      	b.n	80024ac <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	701a      	strb	r2, [r3, #0]
      ret = 1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]
      break;
 80024aa:	bf00      	nop
  }

  return ret;
 80024ac:	68fb      	ldr	r3, [r7, #12]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <ByteStuffCopy>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	e011      	b.n	80024f2 <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	18d0      	adds	r0, r2, r3
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	3304      	adds	r3, #4
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	4619      	mov	r1, r3
 80024e0:	f7ff ffc0 	bl	8002464 <ByteStuffCopyByte>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	4413      	add	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3301      	adds	r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d3e8      	bcc.n	80024ce <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	22f0      	movs	r2, #240	; 0xf0
 8002504:	701a      	strb	r2, [r3, #0]
  count++;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	3301      	adds	r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
  return count;
 800250c:	68bb      	ldr	r3, [r7, #8]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <ReverseByteStuffCopyByte2>:
 * @param  Source1 input data
 * @param  Dest the destination data
 * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
 */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	603a      	str	r2, [r7, #0]
 8002520:	71fb      	strb	r3, [r7, #7]
 8002522:	460b      	mov	r3, r1
 8002524:	71bb      	strb	r3, [r7, #6]
  if (Source0 == (uint8_t)TMsg_BS)
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	2bf1      	cmp	r3, #241	; 0xf1
 800252a:	d111      	bne.n	8002550 <ReverseByteStuffCopyByte2+0x3a>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 800252c:	79bb      	ldrb	r3, [r7, #6]
 800252e:	2bf1      	cmp	r3, #241	; 0xf1
 8002530:	d104      	bne.n	800253c <ReverseByteStuffCopyByte2+0x26>
    {
      *Dest = TMsg_BS;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	22f1      	movs	r2, #241	; 0xf1
 8002536:	701a      	strb	r2, [r3, #0]
      return 2;
 8002538:	2302      	movs	r3, #2
 800253a:	e00d      	b.n	8002558 <ReverseByteStuffCopyByte2+0x42>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 800253c:	79bb      	ldrb	r3, [r7, #6]
 800253e:	2bf2      	cmp	r3, #242	; 0xf2
 8002540:	d104      	bne.n	800254c <ReverseByteStuffCopyByte2+0x36>
    {
      *Dest = TMsg_EOF;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	22f0      	movs	r2, #240	; 0xf0
 8002546:	701a      	strb	r2, [r3, #0]
      return 2;
 8002548:	2302      	movs	r3, #2
 800254a:	e005      	b.n	8002558 <ReverseByteStuffCopyByte2+0x42>
    }

    return 0; // invalid sequence
 800254c:	2300      	movs	r3, #0
 800254e:	e003      	b.n	8002558 <ReverseByteStuffCopyByte2+0x42>
  }
  else
  {
    *Dest = Source0;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	79fa      	ldrb	r2, [r7, #7]
 8002554:	701a      	strb	r2, [r3, #0]
    return 1;
 8002556:	2301      	movs	r3, #1
  }
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <CHK_ComputeAndAdd>:
 * @brief  Compute and add checksum
 * @param  Msg pointer to the message
 * @retval None
 */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8002570:	2300      	movs	r3, #0
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	e00a      	b.n	800258c <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4413      	add	r3, r2
 800257c:	3304      	adds	r3, #4
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3301      	adds	r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	429a      	cmp	r2, r3
 8002594:	d3ef      	bcc.n	8002576 <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4413      	add	r3, r2
 800259c:	3304      	adds	r3, #4
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	601a      	str	r2, [r3, #0]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <CHK_CheckAndRemove>:
 * @brief  Compute and remove checksum
 * @param  Msg pointer to the message
 * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
 */
int CHK_CheckAndRemove(TMsg *Msg)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	e00a      	b.n	80025e0 <CHK_CheckAndRemove+0x28>
  {
    chk += Msg->Data[i];
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4413      	add	r3, r2
 80025d0:	3304      	adds	r3, #4
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	4413      	add	r3, r2
 80025d8:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	3301      	adds	r3, #1
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d3ef      	bcc.n	80025ca <CHK_CheckAndRemove+0x12>
  }

  Msg->Len--;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	1e5a      	subs	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	bf0c      	ite	eq
 80025fa:	2301      	moveq	r3, #1
 80025fc:	2300      	movne	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <Deserialize>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval Rebuild unsigned int variable
 */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	3b01      	subs	r3, #1
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	4413      	add	r3, r2
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 8002626:	e00d      	b.n	8002644 <Deserialize+0x38>
  {
    app <<= 8;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	3b01      	subs	r3, #1
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	4413      	add	r3, r2
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4413      	add	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ee      	bne.n	8002628 <Deserialize+0x1c>
  }

  return app;
 800264a:	68fb      	ldr	r3, [r7, #12]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	e00f      	b.n	800268a <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	4413      	add	r3, r2
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3301      	adds	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	429a      	cmp	r2, r3
 8002690:	d3eb      	bcc.n	800266a <Serialize_s32+0x12>
  }
}
 8002692:	bf00      	nop
 8002694:	bf00      	nop
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <HAL_MspInit+0x30>)
 80026a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ac:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <HAL_MspInit+0x30>)
 80026ae:	f043 0304 	orr.w	r3, r3, #4
 80026b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_MspInit+0x30>)
 80026b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80026c4:	f006 fa08 	bl	8008ad8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	46020c00 	.word	0x46020c00

080026d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026d8:	e7fe      	b.n	80026d8 <NMI_Handler+0x4>

080026da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026de:	e7fe      	b.n	80026de <HardFault_Handler+0x4>

080026e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <MemManage_Handler+0x4>

080026e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ea:	e7fe      	b.n	80026ea <BusFault_Handler+0x4>

080026ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <UsageFault_Handler+0x4>

080026f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002720:	f004 f8c6 	bl	80068b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}

08002728 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButtonInterrupt_Pin);
 800272c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002730:	f005 fb1a 	bl	8007d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}

08002738 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800273c:	4802      	ldr	r0, [pc, #8]	; (8002748 <TIM15_IRQHandler+0x10>)
 800273e:	f00a faa0 	bl	800cc82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200023b8 	.word	0x200023b8

0800274c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002754:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <_sbrk+0x5c>)
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <_sbrk+0x60>)
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002760:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <_sbrk+0x64>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <_sbrk+0x64>)
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <_sbrk+0x68>)
 800276c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <_sbrk+0x64>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	429a      	cmp	r2, r3
 800277a:	d207      	bcs.n	800278c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800277c:	f018 f806 	bl	801a78c <__errno>
 8002780:	4603      	mov	r3, r0
 8002782:	220c      	movs	r2, #12
 8002784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
 800278a:	e009      	b.n	80027a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <_sbrk+0x64>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002792:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <_sbrk+0x64>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	4a05      	ldr	r2, [pc, #20]	; (80027b0 <_sbrk+0x64>)
 800279c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800279e:	68fb      	ldr	r3, [r7, #12]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200c0000 	.word	0x200c0000
 80027ac:	00000400 	.word	0x00000400
 80027b0:	2000139c 	.word	0x2000139c
 80027b4:	20002978 	.word	0x20002978

080027b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <SystemInit+0x68>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	4a17      	ldr	r2, [pc, #92]	; (8002820 <SystemInit+0x68>)
 80027c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <SystemInit+0x6c>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <SystemInit+0x6c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <SystemInit+0x6c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <SystemInit+0x6c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <SystemInit+0x6c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <SystemInit+0x6c>)
 80027ea:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80027ee:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80027f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <SystemInit+0x6c>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <SystemInit+0x6c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a09      	ldr	r2, [pc, #36]	; (8002824 <SystemInit+0x6c>)
 8002800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002804:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <SystemInit+0x6c>)
 8002808:	2200      	movs	r2, #0
 800280a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <SystemInit+0x68>)
 800280e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002812:	609a      	str	r2, [r3, #8]
  #endif
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000ed00 	.word	0xe000ed00
 8002824:	46020c00 	.word	0x46020c00

08002828 <MX_TIM15_Init>:

TIM_HandleTypeDef htim15;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800282e:	f107 0310 	add.w	r3, r7, #16
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002846:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <MX_TIM15_Init+0x9c>)
 8002848:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <MX_TIM15_Init+0xa0>)
 800284a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <MX_TIM15_Init+0x9c>)
 800284e:	2200      	movs	r2, #0
 8002850:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002852:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <MX_TIM15_Init+0x9c>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002858:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <MX_TIM15_Init+0x9c>)
 800285a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800285e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <MX_TIM15_Init+0x9c>)
 8002862:	2200      	movs	r2, #0
 8002864:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002866:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <MX_TIM15_Init+0x9c>)
 8002868:	2200      	movs	r2, #0
 800286a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <MX_TIM15_Init+0x9c>)
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002872:	4814      	ldr	r0, [pc, #80]	; (80028c4 <MX_TIM15_Init+0x9c>)
 8002874:	f00a f8de 	bl	800ca34 <HAL_TIM_Base_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800287e:	f7ff fc45 	bl	800210c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002886:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002888:	f107 0310 	add.w	r3, r7, #16
 800288c:	4619      	mov	r1, r3
 800288e:	480d      	ldr	r0, [pc, #52]	; (80028c4 <MX_TIM15_Init+0x9c>)
 8002890:	f00a fb76 	bl	800cf80 <HAL_TIM_ConfigClockSource>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800289a:	f7ff fc37 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	4619      	mov	r1, r3
 80028aa:	4806      	ldr	r0, [pc, #24]	; (80028c4 <MX_TIM15_Init+0x9c>)
 80028ac:	f00a fe28 	bl	800d500 <HAL_TIMEx_MasterConfigSynchronization>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80028b6:	f7ff fc29 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80028ba:	bf00      	nop
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	200023b8 	.word	0x200023b8
 80028c8:	40014000 	.word	0x40014000

080028cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <HAL_TIM_Base_MspInit+0x48>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d116      	bne.n	800290c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <HAL_TIM_Base_MspInit+0x4c>)
 80028e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028e4:	4a0c      	ldr	r2, [pc, #48]	; (8002918 <HAL_TIM_Base_MspInit+0x4c>)
 80028e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ea:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_TIM_Base_MspInit+0x4c>)
 80028f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80028fc:	2200      	movs	r2, #0
 80028fe:	2100      	movs	r1, #0
 8002900:	2045      	movs	r0, #69	; 0x45
 8002902:	f004 f8f4 	bl	8006aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002906:	2045      	movs	r0, #69	; 0x45
 8002908:	f004 f90b 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40014000 	.word	0x40014000
 8002918:	46020c00 	.word	0x46020c00

0800291c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002920:	4b22      	ldr	r3, [pc, #136]	; (80029ac <MX_USART1_UART_Init+0x90>)
 8002922:	4a23      	ldr	r2, [pc, #140]	; (80029b0 <MX_USART1_UART_Init+0x94>)
 8002924:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <MX_USART1_UART_Init+0x90>)
 8002928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800292c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800292e:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <MX_USART1_UART_Init+0x90>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002934:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <MX_USART1_UART_Init+0x90>)
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800293a:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <MX_USART1_UART_Init+0x90>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <MX_USART1_UART_Init+0x90>)
 8002942:	220c      	movs	r2, #12
 8002944:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002946:	4b19      	ldr	r3, [pc, #100]	; (80029ac <MX_USART1_UART_Init+0x90>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800294c:	4b17      	ldr	r3, [pc, #92]	; (80029ac <MX_USART1_UART_Init+0x90>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002952:	4b16      	ldr	r3, [pc, #88]	; (80029ac <MX_USART1_UART_Init+0x90>)
 8002954:	2200      	movs	r2, #0
 8002956:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <MX_USART1_UART_Init+0x90>)
 800295a:	2200      	movs	r2, #0
 800295c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800295e:	4b13      	ldr	r3, [pc, #76]	; (80029ac <MX_USART1_UART_Init+0x90>)
 8002960:	2200      	movs	r2, #0
 8002962:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002964:	4811      	ldr	r0, [pc, #68]	; (80029ac <MX_USART1_UART_Init+0x90>)
 8002966:	f00a fed3 	bl	800d710 <HAL_UART_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002970:	f7ff fbcc 	bl	800210c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002974:	2100      	movs	r1, #0
 8002976:	480d      	ldr	r0, [pc, #52]	; (80029ac <MX_USART1_UART_Init+0x90>)
 8002978:	f00b fe2a 	bl	800e5d0 <HAL_UARTEx_SetTxFifoThreshold>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002982:	f7ff fbc3 	bl	800210c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002986:	2100      	movs	r1, #0
 8002988:	4808      	ldr	r0, [pc, #32]	; (80029ac <MX_USART1_UART_Init+0x90>)
 800298a:	f00b fe5f 	bl	800e64c <HAL_UARTEx_SetRxFifoThreshold>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002994:	f7ff fbba 	bl	800210c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002998:	4804      	ldr	r0, [pc, #16]	; (80029ac <MX_USART1_UART_Init+0x90>)
 800299a:	f00b fde0 	bl	800e55e <HAL_UARTEx_DisableFifoMode>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80029a4:	f7ff fbb2 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	200022f8 	.word	0x200022f8
 80029b0:	40013800 	.word	0x40013800

080029b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b0ba      	sub	sp, #232	; 0xe8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	22c0      	movs	r2, #192	; 0xc0
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f017 ff10 	bl	801a7fa <memset>
  if(uartHandle->Instance==USART1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a24      	ldr	r2, [pc, #144]	; (8002a70 <HAL_UART_MspInit+0xbc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d141      	bne.n	8002a68 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029e4:	2301      	movs	r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029e8:	2300      	movs	r3, #0
 80029ea:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	4618      	mov	r0, r3
 80029f2:	f007 fa37 	bl	8009e64 <HAL_RCCEx_PeriphCLKConfig>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029fc:	f7ff fb86 	bl	800210c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a00:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <HAL_UART_MspInit+0xc0>)
 8002a02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a06:	4a1b      	ldr	r2, [pc, #108]	; (8002a74 <HAL_UART_MspInit+0xc0>)
 8002a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a0c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002a10:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <HAL_UART_MspInit+0xc0>)
 8002a12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <HAL_UART_MspInit+0xc0>)
 8002a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a24:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <HAL_UART_MspInit+0xc0>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_UART_MspInit+0xc0>)
 8002a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002a3c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a56:	2307      	movs	r3, #7
 8002a58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4805      	ldr	r0, [pc, #20]	; (8002a78 <HAL_UART_MspInit+0xc4>)
 8002a64:	f004 fe9a 	bl	800779c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a68:	bf00      	nop
 8002a6a:	37e8      	adds	r7, #232	; 0xe8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40013800 	.word	0x40013800
 8002a74:	46020c00 	.word	0x46020c00
 8002a78:	42020000 	.word	0x42020000

08002a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ab4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002a80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002a82:	e003      	b.n	8002a8c <LoopCopyDataInit>

08002a84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002a86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002a88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002a8a:	3104      	adds	r1, #4

08002a8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a8c:	480b      	ldr	r0, [pc, #44]	; (8002abc <LoopForever+0xa>)
	ldr	r3, =_edata
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002a90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002a92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a94:	d3f6      	bcc.n	8002a84 <CopyDataInit>
	ldr	r2, =_sbss
 8002a96:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002a98:	e002      	b.n	8002aa0 <LoopFillZerobss>

08002a9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a9c:	f842 3b04 	str.w	r3, [r2], #4

08002aa0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002aa0:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <LoopForever+0x16>)
	cmp	r2, r3
 8002aa2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002aa4:	d3f9      	bcc.n	8002a9a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002aa6:	f7ff fe87 	bl	80027b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aaa:	f017 fe75 	bl	801a798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002aae:	f7ff fa65 	bl	8001f7c <main>

08002ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ab2:	e7fe      	b.n	8002ab2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002ab4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002ab8:	0801b7ac 	.word	0x0801b7ac
	ldr	r0, =_sdata
 8002abc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002ac0:	20000114 	.word	0x20000114
	ldr	r2, =_sbss
 8002ac4:	20000118 	.word	0x20000118
	ldr	r3, = _ebss
 8002ac8:	20002971 	.word	0x20002971

08002acc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002acc:	e7fe      	b.n	8002acc <ADC1_IRQHandler>
	...

08002ad0 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	4a06      	ldr	r2, [pc, #24]	; (8002af8 <BSP_PB_GetState+0x28>)
 8002ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f005 f90d 	bl	8007d08 <HAL_GPIO_ReadPin>
 8002aee:	4603      	mov	r3, r0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20000014 	.word	0x20000014

08002afc <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C2 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 8002b06:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <BSP_I2C2_Init+0x64>)
 8002b08:	4a16      	ldr	r2, [pc, #88]	; (8002b64 <BSP_I2C2_Init+0x68>)
 8002b0a:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8002b0c:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <BSP_I2C2_Init+0x6c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d11f      	bne.n	8002b54 <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 8002b14:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <BSP_I2C2_Init+0x6c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	4a13      	ldr	r2, [pc, #76]	; (8002b68 <BSP_I2C2_Init+0x6c>)
 8002b1c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8002b1e:	4810      	ldr	r0, [pc, #64]	; (8002b60 <BSP_I2C2_Init+0x64>)
 8002b20:	f005 fc40 	bl	80083a4 <HAL_I2C_GetState>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d114      	bne.n	8002b54 <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8002b2a:	480d      	ldr	r0, [pc, #52]	; (8002b60 <BSP_I2C2_Init+0x64>)
 8002b2c:	f000 fb1e 	bl	800316c <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8002b30:	f007 f8d6 	bl	8009ce0 <HAL_RCC_GetPCLK1Freq>
 8002b34:	4603      	mov	r3, r0
 8002b36:	490d      	ldr	r1, [pc, #52]	; (8002b6c <BSP_I2C2_Init+0x70>)
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f8a1 	bl	8002c80 <I2C_GetTiming>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4619      	mov	r1, r3
 8002b42:	4807      	ldr	r0, [pc, #28]	; (8002b60 <BSP_I2C2_Init+0x64>)
 8002b44:	f7ff f888 	bl	8001c58 <MX_I2C2_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <BSP_I2C2_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002b4e:	f06f 0307 	mvn.w	r3, #7
 8002b52:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
return ret;
 8002b54:	687b      	ldr	r3, [r7, #4]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200024a0 	.word	0x200024a0
 8002b64:	40005800 	.word	0x40005800
 8002b68:	200013a0 	.word	0x200013a0
 8002b6c:	000186a0 	.word	0x000186a0

08002b70 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <BSP_I2C2_DeInit+0x40>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <BSP_I2C2_DeInit+0x40>)
 8002b82:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 8002b84:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <BSP_I2C2_DeInit+0x40>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10b      	bne.n	8002ba4 <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 8002b8c:	4809      	ldr	r0, [pc, #36]	; (8002bb4 <BSP_I2C2_DeInit+0x44>)
 8002b8e:	f000 fb53 	bl	8003238 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 8002b92:	4808      	ldr	r0, [pc, #32]	; (8002bb4 <BSP_I2C2_DeInit+0x44>)
 8002b94:	f005 f9a8 	bl	8007ee8 <HAL_I2C_DeInit>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8002b9e:	f06f 0307 	mvn.w	r3, #7
 8002ba2:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8002ba4:	687b      	ldr	r3, [r7, #4]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200013a0 	.word	0x200013a0
 8002bb4:	200024a0 	.word	0x200024a0

08002bb8 <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60ba      	str	r2, [r7, #8]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	81fb      	strh	r3, [r7, #14]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	81bb      	strh	r3, [r7, #12]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002bce:	89b9      	ldrh	r1, [r7, #12]
 8002bd0:	89f8      	ldrh	r0, [r7, #14]
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f000 fb4f 	bl	800327c <I2C2_WriteReg>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	e00c      	b.n	8002c04 <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8002bea:	4809      	ldr	r0, [pc, #36]	; (8002c10 <BSP_I2C2_WriteReg+0x58>)
 8002bec:	f005 fbe8 	bl	80083c0 <HAL_I2C_GetError>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d103      	bne.n	8002bfe <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002bf6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	e002      	b.n	8002c04 <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002bfe:	f06f 0303 	mvn.w	r3, #3
 8002c02:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8002c04:	697b      	ldr	r3, [r7, #20]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	200024a0 	.word	0x200024a0

08002c14 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60ba      	str	r2, [r7, #8]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	81fb      	strh	r3, [r7, #14]
 8002c22:	460b      	mov	r3, r1
 8002c24:	81bb      	strh	r3, [r7, #12]
 8002c26:	4613      	mov	r3, r2
 8002c28:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002c2a:	89b9      	ldrh	r1, [r7, #12]
 8002c2c:	89f8      	ldrh	r0, [r7, #14]
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f000 fb47 	bl	80032c8 <I2C2_ReadReg>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d102      	bne.n	8002c46 <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e00c      	b.n	8002c60 <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8002c46:	4809      	ldr	r0, [pc, #36]	; (8002c6c <BSP_I2C2_ReadReg+0x58>)
 8002c48:	f005 fbba 	bl	80083c0 <HAL_I2C_GetError>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d103      	bne.n	8002c5a <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002c52:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	e002      	b.n	8002c60 <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002c5a:	f06f 0303 	mvn.w	r3, #3
 8002c5e:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8002c60:	697b      	ldr	r3, [r7, #20]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200024a0 	.word	0x200024a0

08002c70 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8002c74:	f003 fe30 	bl	80068d8 <HAL_GetTick>
 8002c78:	4603      	mov	r3, r0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d06b      	beq.n	8002d6c <I2C_GetTiming+0xec>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d068      	beq.n	8002d6c <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	e060      	b.n	8002d62 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002ca0:	4a35      	ldr	r2, [pc, #212]	; (8002d78 <I2C_GetTiming+0xf8>)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	3304      	adds	r3, #4
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d352      	bcc.n	8002d5c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002cb6:	4a30      	ldr	r2, [pc, #192]	; (8002d78 <I2C_GetTiming+0xf8>)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3308      	adds	r3, #8
 8002cc4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d847      	bhi.n	8002d5c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8002ccc:	6939      	ldr	r1, [r7, #16]
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f856 	bl	8002d80 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8002cd4:	6939      	ldr	r1, [r7, #16]
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f940 	bl	8002f5c <I2C_Compute_SCLL_SCLH>
 8002cdc:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ce2:	d842      	bhi.n	8002d6a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8002ce4:	4925      	ldr	r1, [pc, #148]	; (8002d7c <I2C_GetTiming+0xfc>)
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8002cf6:	4821      	ldr	r0, [pc, #132]	; (8002d7c <I2C_GetTiming+0xfc>)
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4403      	add	r3, r0
 8002d04:	3304      	adds	r3, #4
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	051b      	lsls	r3, r3, #20
 8002d0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8002d0e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8002d10:	481a      	ldr	r0, [pc, #104]	; (8002d7c <I2C_GetTiming+0xfc>)
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4403      	add	r3, r0
 8002d1e:	3308      	adds	r3, #8
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	041b      	lsls	r3, r3, #16
 8002d24:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8002d28:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 8002d2a:	4814      	ldr	r0, [pc, #80]	; (8002d7c <I2C_GetTiming+0xfc>)
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4403      	add	r3, r0
 8002d38:	330c      	adds	r3, #12
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8002d40:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8002d42:	480e      	ldr	r0, [pc, #56]	; (8002d7c <I2C_GetTiming+0xfc>)
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4403      	add	r3, r0
 8002d50:	3310      	adds	r3, #16
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8002d56:	430b      	orrs	r3, r1
 8002d58:	617b      	str	r3, [r7, #20]
        }
        break;
 8002d5a:	e006      	b.n	8002d6a <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d99b      	bls.n	8002ca0 <I2C_GetTiming+0x20>
 8002d68:	e000      	b.n	8002d6c <I2C_GetTiming+0xec>
        break;
 8002d6a:	bf00      	nop
      }
    }
  }

  return ret;
 8002d6c:	697b      	ldr	r3, [r7, #20]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	0801b1c0 	.word	0x0801b1c0
 8002d7c:	200013a4 	.word	0x200013a4

08002d80 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b08f      	sub	sp, #60	; 0x3c
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8002d8a:	2310      	movs	r3, #16
 8002d8c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	085a      	lsrs	r2, r3, #1
 8002d92:	4b6e      	ldr	r3, [pc, #440]	; (8002f4c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8002d94:	4413      	add	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d9c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002d9e:	2332      	movs	r3, #50	; 0x32
 8002da0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8002da2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002da6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002da8:	4a69      	ldr	r2, [pc, #420]	; (8002f50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3324      	adds	r3, #36	; 0x24
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	4a65      	ldr	r2, [pc, #404]	; (8002f50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	330c      	adds	r3, #12
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002dcc:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002dce:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002dd0:	495f      	ldr	r1, [pc, #380]	; (8002f50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	202c      	movs	r0, #44	; 0x2c
 8002dd6:	fb00 f303 	mul.w	r3, r0, r3
 8002dda:	440b      	add	r3, r1
 8002ddc:	3328      	adds	r3, #40	; 0x28
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3303      	adds	r3, #3
 8002de2:	69f9      	ldr	r1, [r7, #28]
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002dec:	4a58      	ldr	r2, [pc, #352]	; (8002f50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	3310      	adds	r3, #16
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	4a54      	ldr	r2, [pc, #336]	; (8002f50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	3320      	adds	r3, #32
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002e10:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002e12:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002e14:	494e      	ldr	r1, [pc, #312]	; (8002f50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	202c      	movs	r0, #44	; 0x2c
 8002e1a:	fb00 f303 	mul.w	r3, r0, r3
 8002e1e:	440b      	add	r3, r1
 8002e20:	3328      	adds	r3, #40	; 0x28
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3304      	adds	r3, #4
 8002e26:	69f9      	ldr	r1, [r7, #28]
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002e30:	4a47      	ldr	r2, [pc, #284]	; (8002f50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3320      	adds	r3, #32
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	4a43      	ldr	r2, [pc, #268]	; (8002f50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3314      	adds	r3, #20
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4403      	add	r3, r0
 8002e54:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	dc01      	bgt.n	8002e60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	dc01      	bgt.n	8002e6a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e6e:	e062      	b.n	8002f36 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
 8002e74:	e059      	b.n	8002f2a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	3301      	adds	r3, #1
 8002e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e7c:	3201      	adds	r2, #1
 8002e7e:	fb02 f203 	mul.w	r2, r2, r3
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fb02 f303 	mul.w	r3, r2, r3
 8002e88:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d348      	bcc.n	8002f24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002e92:	2300      	movs	r3, #0
 8002e94:	623b      	str	r3, [r7, #32]
 8002e96:	e042      	b.n	8002f1e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8002e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	6a3a      	ldr	r2, [r7, #32]
 8002e9e:	fb02 f203 	mul.w	r2, r2, r3
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fb02 f303 	mul.w	r3, r2, r3
 8002ea8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d332      	bcc.n	8002f18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8002eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d82e      	bhi.n	8002f18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 8002eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d02a      	beq.n	8002f18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8002ec2:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4924      	ldr	r1, [pc, #144]	; (8002f58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8002ed6:	4b1f      	ldr	r3, [pc, #124]	; (8002f54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	491f      	ldr	r1, [pc, #124]	; (8002f58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eea:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4919      	ldr	r1, [pc, #100]	; (8002f58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3308      	adds	r3, #8
 8002efe:	6a3a      	ldr	r2, [r7, #32]
 8002f00:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8002f06:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	4a11      	ldr	r2, [pc, #68]	; (8002f54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002f0e:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8002f10:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b7f      	cmp	r3, #127	; 0x7f
 8002f16:	d812      	bhi.n	8002f3e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	623b      	str	r3, [r7, #32]
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	2b0f      	cmp	r3, #15
 8002f22:	d9b9      	bls.n	8002e98 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	3301      	adds	r3, #1
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	2b0f      	cmp	r3, #15
 8002f2e:	d9a2      	bls.n	8002e76 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	3301      	adds	r3, #1
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	2b0f      	cmp	r3, #15
 8002f3a:	d999      	bls.n	8002e70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8002f3c:	e000      	b.n	8002f40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8002f3e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002f40:	373c      	adds	r7, #60	; 0x3c
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	3b9aca00 	.word	0x3b9aca00
 8002f50:	0801b1c0 	.word	0x0801b1c0
 8002f54:	20001da4 	.word	0x20001da4
 8002f58:	200013a4 	.word	0x200013a4

08002f5c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b093      	sub	sp, #76	; 0x4c
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	085a      	lsrs	r2, r3, #1
 8002f70:	4b7a      	ldr	r3, [pc, #488]	; (800315c <I2C_Compute_SCLL_SCLH+0x200>)
 8002f72:	4413      	add	r3, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 8002f7c:	4a78      	ldr	r2, [pc, #480]	; (8003160 <I2C_Compute_SCLL_SCLH+0x204>)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	085a      	lsrs	r2, r3, #1
 8002f8c:	4b73      	ldr	r3, [pc, #460]	; (800315c <I2C_Compute_SCLL_SCLH+0x200>)
 8002f8e:	4413      	add	r3, r2
 8002f90:	4973      	ldr	r1, [pc, #460]	; (8003160 <I2C_Compute_SCLL_SCLH+0x204>)
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	202c      	movs	r0, #44	; 0x2c
 8002f96:	fb00 f202 	mul.w	r2, r0, r2
 8002f9a:	440a      	add	r2, r1
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002fa4:	2332      	movs	r3, #50	; 0x32
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002fa8:	4a6d      	ldr	r2, [pc, #436]	; (8003160 <I2C_Compute_SCLL_SCLH+0x204>)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	212c      	movs	r1, #44	; 0x2c
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3328      	adds	r3, #40	; 0x28
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002fc0:	4a67      	ldr	r2, [pc, #412]	; (8003160 <I2C_Compute_SCLL_SCLH+0x204>)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	212c      	movs	r1, #44	; 0x2c
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	3304      	adds	r3, #4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a62      	ldr	r2, [pc, #392]	; (800315c <I2C_Compute_SCLL_SCLH+0x200>)
 8002fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8002fd8:	4a61      	ldr	r2, [pc, #388]	; (8003160 <I2C_Compute_SCLL_SCLH+0x204>)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a5c      	ldr	r2, [pc, #368]	; (800315c <I2C_Compute_SCLL_SCLH+0x200>)
 8002fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fee:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff8:	e0a3      	b.n	8003142 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8002ffa:	495a      	ldr	r1, [pc, #360]	; (8003164 <I2C_Compute_SCLL_SCLH+0x208>)
 8002ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003014:	2300      	movs	r3, #0
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003018:	e08c      	b.n	8003134 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800301a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	441a      	add	r2, r3
 8003020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003022:	3301      	adds	r3, #1
 8003024:	6979      	ldr	r1, [r7, #20]
 8003026:	fb01 f103 	mul.w	r1, r1, r3
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	440b      	add	r3, r1
 8003030:	4413      	add	r3, r2
 8003032:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003034:	4a4a      	ldr	r2, [pc, #296]	; (8003160 <I2C_Compute_SCLL_SCLH+0x204>)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	212c      	movs	r1, #44	; 0x2c
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	3318      	adds	r3, #24
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	429a      	cmp	r2, r3
 8003048:	d971      	bls.n	800312e <I2C_Compute_SCLL_SCLH+0x1d2>
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003058:	429a      	cmp	r2, r3
 800305a:	d268      	bcs.n	800312e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800305c:	2300      	movs	r3, #0
 800305e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003060:	e062      	b.n	8003128 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	441a      	add	r2, r3
 8003068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306a:	3301      	adds	r3, #1
 800306c:	6979      	ldr	r1, [r7, #20]
 800306e:	fb01 f103 	mul.w	r1, r1, r3
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	440b      	add	r3, r1
 8003078:	4413      	add	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	441a      	add	r2, r3
 8003082:	4937      	ldr	r1, [pc, #220]	; (8003160 <I2C_Compute_SCLL_SCLH+0x204>)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	202c      	movs	r0, #44	; 0x2c
 8003088:	fb00 f303 	mul.w	r3, r0, r3
 800308c:	440b      	add	r3, r1
 800308e:	3320      	adds	r3, #32
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	441a      	add	r2, r3
 8003094:	4932      	ldr	r1, [pc, #200]	; (8003160 <I2C_Compute_SCLL_SCLH+0x204>)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	202c      	movs	r0, #44	; 0x2c
 800309a:	fb00 f303 	mul.w	r3, r0, r3
 800309e:	440b      	add	r3, r1
 80030a0:	3324      	adds	r3, #36	; 0x24
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4413      	add	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min)
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d338      	bcc.n	8003122 <I2C_Compute_SCLL_SCLH+0x1c6>
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d834      	bhi.n	8003122 <I2C_Compute_SCLL_SCLH+0x1c6>
 80030b8:	4a29      	ldr	r2, [pc, #164]	; (8003160 <I2C_Compute_SCLL_SCLH+0x204>)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	331c      	adds	r3, #28
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d329      	bcc.n	8003122 <I2C_Compute_SCLL_SCLH+0x1c6>
              && (ti2cclk < tscl_h))
 80030ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d225      	bcs.n	8003122 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	da02      	bge.n	80030ea <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80030e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e6:	425b      	negs	r3, r3
 80030e8:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80030ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d917      	bls.n	8003122 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80030f6:	491b      	ldr	r1, [pc, #108]	; (8003164 <I2C_Compute_SCLL_SCLH+0x208>)
 80030f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	3310      	adds	r3, #16
 8003106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003108:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800310a:	4916      	ldr	r1, [pc, #88]	; (8003164 <I2C_Compute_SCLL_SCLH+0x208>)
 800310c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	330c      	adds	r3, #12
 800311a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800311c:	601a      	str	r2, [r3, #0]
              ret = count;
 800311e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003120:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003124:	3301      	adds	r3, #1
 8003126:	63bb      	str	r3, [r7, #56]	; 0x38
 8003128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312a:	2bff      	cmp	r3, #255	; 0xff
 800312c:	d999      	bls.n	8003062 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800312e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003130:	3301      	adds	r3, #1
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003136:	2bff      	cmp	r3, #255	; 0xff
 8003138:	f67f af6f 	bls.w	800301a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800313c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313e:	3301      	adds	r3, #1
 8003140:	637b      	str	r3, [r7, #52]	; 0x34
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <I2C_Compute_SCLL_SCLH+0x20c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003148:	429a      	cmp	r2, r3
 800314a:	f4ff af56 	bcc.w	8002ffa <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800314e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003150:	4618      	mov	r0, r3
 8003152:	374c      	adds	r7, #76	; 0x4c
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	3b9aca00 	.word	0x3b9aca00
 8003160:	0801b1c0 	.word	0x0801b1c0
 8003164:	200013a4 	.word	0x200013a4
 8003168:	20001da4 	.word	0x20001da4

0800316c <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hI2c)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8003174:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <I2C2_MspInit+0xc4>)
 8003176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800317a:	4a2d      	ldr	r2, [pc, #180]	; (8003230 <I2C2_MspInit+0xc4>)
 800317c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003180:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003184:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <I2C2_MspInit+0xc4>)
 8003186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800318a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 8003192:	4b27      	ldr	r3, [pc, #156]	; (8003230 <I2C2_MspInit+0xc4>)
 8003194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003198:	4a25      	ldr	r2, [pc, #148]	; (8003230 <I2C2_MspInit+0xc4>)
 800319a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031a2:	4b23      	ldr	r3, [pc, #140]	; (8003230 <I2C2_MspInit+0xc4>)
 80031a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SCL_PIN;
 80031b0:	2310      	movs	r3, #16
 80031b2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80031b4:	2312      	movs	r3, #18
 80031b6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 80031b8:	2301      	movs	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 80031bc:	2302      	movs	r3, #2
 80031be:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SCL_AF;
 80031c0:	2304      	movs	r3, #4
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	4619      	mov	r1, r3
 80031ca:	481a      	ldr	r0, [pc, #104]	; (8003234 <I2C2_MspInit+0xc8>)
 80031cc:	f004 fae6 	bl	800779c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SDA_PIN;
 80031d0:	2320      	movs	r3, #32
 80031d2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80031d4:	2312      	movs	r3, #18
 80031d6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 80031d8:	2301      	movs	r3, #1
 80031da:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 80031dc:	2302      	movs	r3, #2
 80031de:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SDA_AF;
 80031e0:	2304      	movs	r3, #4
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	4619      	mov	r1, r3
 80031ea:	4812      	ldr	r0, [pc, #72]	; (8003234 <I2C2_MspInit+0xc8>)
 80031ec:	f004 fad6 	bl	800779c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 80031f0:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <I2C2_MspInit+0xc4>)
 80031f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031f6:	4a0e      	ldr	r2, [pc, #56]	; (8003230 <I2C2_MspInit+0xc4>)
 80031f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031fc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <I2C2_MspInit+0xc4>)
 8003202:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <I2C2_MspInit+0xc4>)
 8003210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003212:	4a07      	ldr	r2, [pc, #28]	; (8003230 <I2C2_MspInit+0xc4>)
 8003214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003218:	6753      	str	r3, [r2, #116]	; 0x74

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 800321a:	4b05      	ldr	r3, [pc, #20]	; (8003230 <I2C2_MspInit+0xc4>)
 800321c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321e:	4a04      	ldr	r2, [pc, #16]	; (8003230 <I2C2_MspInit+0xc4>)
 8003220:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003224:	6753      	str	r3, [r2, #116]	; 0x74
}
 8003226:	bf00      	nop
 8003228:	3728      	adds	r7, #40	; 0x28
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	46020c00 	.word	0x46020c00
 8003234:	42021c00 	.word	0x42021c00

08003238 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 8003240:	2310      	movs	r3, #16
 8003242:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4619      	mov	r1, r3
 8003248:	480a      	ldr	r0, [pc, #40]	; (8003274 <I2C2_MspDeInit+0x3c>)
 800324a:	f004 fc7f 	bl	8007b4c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 800324e:	2320      	movs	r3, #32
 8003250:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4619      	mov	r1, r3
 8003256:	4807      	ldr	r0, [pc, #28]	; (8003274 <I2C2_MspDeInit+0x3c>)
 8003258:	f004 fc78 	bl	8007b4c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <I2C2_MspDeInit+0x40>)
 800325e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003262:	4a05      	ldr	r2, [pc, #20]	; (8003278 <I2C2_MspDeInit+0x40>)
 8003264:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003268:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800326c:	bf00      	nop
 800326e:	3720      	adds	r7, #32
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	42021c00 	.word	0x42021c00
 8003278:	46020c00 	.word	0x46020c00

0800327c <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af04      	add	r7, sp, #16
 8003282:	607b      	str	r3, [r7, #4]
 8003284:	4603      	mov	r3, r0
 8003286:	81fb      	strh	r3, [r7, #14]
 8003288:	460b      	mov	r3, r1
 800328a:	81bb      	strh	r3, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8003290:	8978      	ldrh	r0, [r7, #10]
 8003292:	89ba      	ldrh	r2, [r7, #12]
 8003294:	89f9      	ldrh	r1, [r7, #14]
 8003296:	f242 7310 	movw	r3, #10000	; 0x2710
 800329a:	9302      	str	r3, [sp, #8]
 800329c:	8b3b      	ldrh	r3, [r7, #24]
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	4603      	mov	r3, r0
 80032a6:	4807      	ldr	r0, [pc, #28]	; (80032c4 <I2C2_WriteReg+0x48>)
 80032a8:	f004 fe4e 	bl	8007f48 <HAL_I2C_Mem_Write>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e001      	b.n	80032ba <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80032b6:	f06f 0307 	mvn.w	r3, #7
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200024a0 	.word	0x200024a0

080032c8 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af04      	add	r7, sp, #16
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	4603      	mov	r3, r0
 80032d2:	81fb      	strh	r3, [r7, #14]
 80032d4:	460b      	mov	r3, r1
 80032d6:	81bb      	strh	r3, [r7, #12]
 80032d8:	4613      	mov	r3, r2
 80032da:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80032dc:	8978      	ldrh	r0, [r7, #10]
 80032de:	89ba      	ldrh	r2, [r7, #12]
 80032e0:	89f9      	ldrh	r1, [r7, #14]
 80032e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80032e6:	9302      	str	r3, [sp, #8]
 80032e8:	8b3b      	ldrh	r3, [r7, #24]
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	4603      	mov	r3, r0
 80032f2:	4807      	ldr	r0, [pc, #28]	; (8003310 <I2C2_ReadReg+0x48>)
 80032f4:	f004 ff3c 	bl	8008170 <HAL_I2C_Mem_Read>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80032fe:	2300      	movs	r3, #0
 8003300:	e001      	b.n	8003306 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003302:	f06f 0307 	mvn.w	r3, #7
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	200024a0 	.word	0x200024a0

08003314 <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_GYRO and/or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d903      	bls.n	8003330 <BSP_MOTION_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003328:	f06f 0301 	mvn.w	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	e03a      	b.n	80033a6 <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 0U) && ((Functions & MOTION_MAGNETO) != 0U))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d108      	bne.n	8003348 <BSP_MOTION_SENSOR_Init+0x34>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <BSP_MOTION_SENSOR_Init+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003340:	f06f 030a 	mvn.w	r3, #10
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	e02e      	b.n	80033a6 <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 1U) && ((Functions & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d108      	bne.n	8003360 <BSP_MOTION_SENSOR_Init+0x4c>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <BSP_MOTION_SENSOR_Init+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003358:	f06f 030a 	mvn.w	r3, #10
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	e022      	b.n	80033a6 <BSP_MOTION_SENSOR_Init+0x92>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <BSP_MOTION_SENSOR_Init+0x66>
    {
      /* Probe the ISM330DHCX sensor */
      if (ISM330DHCX_Probe(Functions) != BSP_ERROR_NONE)
 8003366:	6838      	ldr	r0, [r7, #0]
 8003368:	f000 fa14 	bl	8003794 <ISM330DHCX_Probe>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00c      	beq.n	800338c <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8003372:	f06f 0304 	mvn.w	r3, #4
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e008      	b.n	800338c <BSP_MOTION_SENSOR_Init+0x78>
      }
    }
    else /* Instance = 1 */
    {
      /* Probe the IIS2MDC sensor */
      if (IIS2MDC_Probe(Functions) != BSP_ERROR_NONE)
 800337a:	6838      	ldr	r0, [r7, #0]
 800337c:	f000 fa80 	bl	8003880 <IIS2MDC_Probe>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8003386:	f06f 0304 	mvn.w	r3, #4
 800338a:	60fb      	str	r3, [r7, #12]
      }
    }

    if (status == BSP_ERROR_NONE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <BSP_MOTION_SENSOR_Init+0x92>
    {
      /* Store current initialized functions */
      Motion_Sensor_Ctx[Instance].Functions |= Functions;
 8003392:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <BSP_MOTION_SENSOR_Init+0x9c>)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	431a      	orrs	r2, r3
 800339e:	4904      	ldr	r1, [pc, #16]	; (80033b0 <BSP_MOTION_SENSOR_Init+0x9c>)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 80033a6:	68fb      	ldr	r3, [r7, #12]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20001da8 	.word	0x20001da8

080033b4 <BSP_MOTION_SENSOR_Enable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d903      	bls.n	80033d0 <BSP_MOTION_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80033c8:	f06f 0301 	mvn.w	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	e045      	b.n	800345c <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d108      	bne.n	80033e8 <BSP_MOTION_SENSOR_Enable+0x34>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <BSP_MOTION_SENSOR_Enable+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80033e0:	f06f 030a 	mvn.w	r3, #10
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e039      	b.n	800345c <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d108      	bne.n	8003400 <BSP_MOTION_SENSOR_Enable+0x4c>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <BSP_MOTION_SENSOR_Enable+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80033f8:	f06f 030a 	mvn.w	r3, #10
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	e02d      	b.n	800345c <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003400:	4a19      	ldr	r2, [pc, #100]	; (8003468 <BSP_MOTION_SENSOR_Enable+0xb4>)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d103      	bne.n	8003418 <BSP_MOTION_SENSOR_Enable+0x64>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 8003410:	f04f 33ff 	mov.w	r3, #4294967295
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	e021      	b.n	800345c <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else
  {
    /* Enable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d006      	beq.n	800342c <BSP_MOTION_SENSOR_Enable+0x78>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d101      	bne.n	8003428 <BSP_MOTION_SENSOR_Enable+0x74>
 8003424:	2301      	movs	r3, #1
 8003426:	e002      	b.n	800342e <BSP_MOTION_SENSOR_Enable+0x7a>
 8003428:	2302      	movs	r3, #2
 800342a:	e000      	b.n	800342e <BSP_MOTION_SENSOR_Enable+0x7a>
 800342c:	2300      	movs	r3, #0
 800342e:	72fb      	strb	r3, [r7, #11]
    if (Motion_Sensor_FuncDrv[Instance][index]->Enable(Motion_Sensor_CompObj[Instance]) < 0)
 8003430:	7af9      	ldrb	r1, [r7, #11]
 8003432:	480e      	ldr	r0, [pc, #56]	; (800346c <BSP_MOTION_SENSOR_Enable+0xb8>)
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	440b      	add	r3, r1
 800343e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	490a      	ldr	r1, [pc, #40]	; (8003470 <BSP_MOTION_SENSOR_Enable+0xbc>)
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800344c:	4610      	mov	r0, r2
 800344e:	4798      	blx	r3
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	da02      	bge.n	800345c <BSP_MOTION_SENSOR_Enable+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003456:	f06f 0304 	mvn.w	r3, #4
 800345a:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 800345c:	68fb      	ldr	r3, [r7, #12]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20001da8 	.word	0x20001da8
 800346c:	20001dc0 	.word	0x20001dc0
 8003470:	20001db0 	.word	0x20001db0

08003474 <BSP_MOTION_SENSOR_Disable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status
  */
int32_t BSP_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d903      	bls.n	8003490 <BSP_MOTION_SENSOR_Disable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003488:	f06f 0301 	mvn.w	r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	e045      	b.n	800351c <BSP_MOTION_SENSOR_Disable+0xa8>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d108      	bne.n	80034a8 <BSP_MOTION_SENSOR_Disable+0x34>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <BSP_MOTION_SENSOR_Disable+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80034a0:	f06f 030a 	mvn.w	r3, #10
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	e039      	b.n	800351c <BSP_MOTION_SENSOR_Disable+0xa8>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d108      	bne.n	80034c0 <BSP_MOTION_SENSOR_Disable+0x4c>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <BSP_MOTION_SENSOR_Disable+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80034b8:	f06f 030a 	mvn.w	r3, #10
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	e02d      	b.n	800351c <BSP_MOTION_SENSOR_Disable+0xa8>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 80034c0:	4a19      	ldr	r2, [pc, #100]	; (8003528 <BSP_MOTION_SENSOR_Disable+0xb4>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d103      	bne.n	80034d8 <BSP_MOTION_SENSOR_Disable+0x64>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 80034d0:	f04f 33ff 	mov.w	r3, #4294967295
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	e021      	b.n	800351c <BSP_MOTION_SENSOR_Disable+0xa8>
  }
  else
  {
    /* Disable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d006      	beq.n	80034ec <BSP_MOTION_SENSOR_Disable+0x78>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d101      	bne.n	80034e8 <BSP_MOTION_SENSOR_Disable+0x74>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e002      	b.n	80034ee <BSP_MOTION_SENSOR_Disable+0x7a>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e000      	b.n	80034ee <BSP_MOTION_SENSOR_Disable+0x7a>
 80034ec:	2300      	movs	r3, #0
 80034ee:	72fb      	strb	r3, [r7, #11]
    if (Motion_Sensor_FuncDrv[Instance][index]->Disable(Motion_Sensor_CompObj[Instance]) < 0)
 80034f0:	7af9      	ldrb	r1, [r7, #11]
 80034f2:	480e      	ldr	r0, [pc, #56]	; (800352c <BSP_MOTION_SENSOR_Disable+0xb8>)
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	440b      	add	r3, r1
 80034fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	490a      	ldr	r1, [pc, #40]	; (8003530 <BSP_MOTION_SENSOR_Disable+0xbc>)
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800350c:	4610      	mov	r0, r2
 800350e:	4798      	blx	r3
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	da02      	bge.n	800351c <BSP_MOTION_SENSOR_Disable+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003516:	f06f 0304 	mvn.w	r3, #4
 800351a:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 800351c:	68fb      	ldr	r3, [r7, #12]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20001da8 	.word	0x20001da8
 800352c:	20001dc0 	.word	0x20001dc0
 8003530:	20001db0 	.word	0x20001db0

08003534 <BSP_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Axes Pointer to motion sensor axes.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Axes == NULL))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d802      	bhi.n	8003550 <BSP_MOTION_SENSOR_GetAxes+0x1c>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d103      	bne.n	8003558 <BSP_MOTION_SENSOR_GetAxes+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003550:	f06f 0301 	mvn.w	r3, #1
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	e046      	b.n	80035e6 <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d108      	bne.n	8003570 <BSP_MOTION_SENSOR_GetAxes+0x3c>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <BSP_MOTION_SENSOR_GetAxes+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003568:	f06f 030a 	mvn.w	r3, #10
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	e03a      	b.n	80035e6 <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d108      	bne.n	8003588 <BSP_MOTION_SENSOR_GetAxes+0x54>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <BSP_MOTION_SENSOR_GetAxes+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003580:	f06f 030a 	mvn.w	r3, #10
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	e02e      	b.n	80035e6 <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003588:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <BSP_MOTION_SENSOR_GetAxes+0xbc>)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d103      	bne.n	80035a0 <BSP_MOTION_SENSOR_GetAxes+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8003598:	f04f 33ff 	mov.w	r3, #4294967295
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	e022      	b.n	80035e6 <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else
  {
    /* Get the motion sensor axes */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d006      	beq.n	80035b4 <BSP_MOTION_SENSOR_GetAxes+0x80>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d101      	bne.n	80035b0 <BSP_MOTION_SENSOR_GetAxes+0x7c>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e002      	b.n	80035b6 <BSP_MOTION_SENSOR_GetAxes+0x82>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e000      	b.n	80035b6 <BSP_MOTION_SENSOR_GetAxes+0x82>
 80035b4:	2300      	movs	r3, #0
 80035b6:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetAxes(Motion_Sensor_CompObj[Instance], Axes) < 0)
 80035b8:	7cf9      	ldrb	r1, [r7, #19]
 80035ba:	480e      	ldr	r0, [pc, #56]	; (80035f4 <BSP_MOTION_SENSOR_GetAxes+0xc0>)
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	440b      	add	r3, r1
 80035c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	490a      	ldr	r1, [pc, #40]	; (80035f8 <BSP_MOTION_SENSOR_GetAxes+0xc4>)
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4610      	mov	r0, r2
 80035d8:	4798      	blx	r3
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	da02      	bge.n	80035e6 <BSP_MOTION_SENSOR_GetAxes+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80035e0:	f06f 0304 	mvn.w	r3, #4
 80035e4:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80035e6:	697b      	ldr	r3, [r7, #20]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20001da8 	.word	0x20001da8
 80035f4:	20001dc0 	.word	0x20001dc0
 80035f8:	20001db0 	.word	0x20001db0

080035fc <BSP_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d903      	bls.n	800361c <BSP_MOTION_SENSOR_SetOutputDataRate+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003614:	f06f 0301 	mvn.w	r3, #1
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	e047      	b.n	80036ac <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d108      	bne.n	8003634 <BSP_MOTION_SENSOR_SetOutputDataRate+0x38>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <BSP_MOTION_SENSOR_SetOutputDataRate+0x38>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800362c:	f06f 030a 	mvn.w	r3, #10
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e03b      	b.n	80036ac <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d108      	bne.n	800364c <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003644:	f06f 030a 	mvn.w	r3, #10
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	e02f      	b.n	80036ac <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 800364c:	4a1a      	ldr	r2, [pc, #104]	; (80036b8 <BSP_MOTION_SENSOR_SetOutputDataRate+0xbc>)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d103      	bne.n	8003664 <BSP_MOTION_SENSOR_SetOutputDataRate+0x68>
  {
    status = BSP_ERROR_NO_INIT;
 800365c:	f04f 33ff 	mov.w	r3, #4294967295
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	e023      	b.n	80036ac <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else
  {
    /* Set the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d006      	beq.n	8003678 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7c>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d101      	bne.n	8003674 <BSP_MOTION_SENSOR_SetOutputDataRate+0x78>
 8003670:	2301      	movs	r3, #1
 8003672:	e002      	b.n	800367a <BSP_MOTION_SENSOR_SetOutputDataRate+0x7e>
 8003674:	2302      	movs	r3, #2
 8003676:	e000      	b.n	800367a <BSP_MOTION_SENSOR_SetOutputDataRate+0x7e>
 8003678:	2300      	movs	r3, #0
 800367a:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->SetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 800367c:	7cf9      	ldrb	r1, [r7, #19]
 800367e:	480f      	ldr	r0, [pc, #60]	; (80036bc <BSP_MOTION_SENSOR_SetOutputDataRate+0xc0>)
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	440b      	add	r3, r1
 800368a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	490b      	ldr	r1, [pc, #44]	; (80036c0 <BSP_MOTION_SENSOR_SetOutputDataRate+0xc4>)
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003698:	ed97 0a01 	vldr	s0, [r7, #4]
 800369c:	4610      	mov	r0, r2
 800369e:	4798      	blx	r3
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	da02      	bge.n	80036ac <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80036a6:	f06f 0304 	mvn.w	r3, #4
 80036aa:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80036ac:	697b      	ldr	r3, [r7, #20]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20001da8 	.word	0x20001da8
 80036bc:	20001dc0 	.word	0x20001dc0
 80036c0:	20001db0 	.word	0x20001db0

080036c4 <BSP_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d903      	bls.n	80036e2 <BSP_MOTION_SENSOR_SetFullScale+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80036da:	f06f 0301 	mvn.w	r3, #1
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	e04d      	b.n	800377e <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d108      	bne.n	80036fa <BSP_MOTION_SENSOR_SetFullScale+0x36>
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <BSP_MOTION_SENSOR_SetFullScale+0x36>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80036f2:	f06f 030a 	mvn.w	r3, #10
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e041      	b.n	800377e <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d108      	bne.n	8003712 <BSP_MOTION_SENSOR_SetFullScale+0x4e>
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <BSP_MOTION_SENSOR_SetFullScale+0x4e>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800370a:	f06f 030a 	mvn.w	r3, #10
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	e035      	b.n	800377e <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003712:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <BSP_MOTION_SENSOR_SetFullScale+0xc4>)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d103      	bne.n	800372a <BSP_MOTION_SENSOR_SetFullScale+0x66>
  {
    status = BSP_ERROR_NO_INIT;
 8003722:	f04f 33ff 	mov.w	r3, #4294967295
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e029      	b.n	800377e <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else
  {
    /* Set the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d006      	beq.n	800373e <BSP_MOTION_SENSOR_SetFullScale+0x7a>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d101      	bne.n	800373a <BSP_MOTION_SENSOR_SetFullScale+0x76>
 8003736:	2301      	movs	r3, #1
 8003738:	e002      	b.n	8003740 <BSP_MOTION_SENSOR_SetFullScale+0x7c>
 800373a:	2302      	movs	r3, #2
 800373c:	e000      	b.n	8003740 <BSP_MOTION_SENSOR_SetFullScale+0x7c>
 800373e:	2300      	movs	r3, #0
 8003740:	74fb      	strb	r3, [r7, #19]
    if (index == MAGNETO_ID)
 8003742:	7cfb      	ldrb	r3, [r7, #19]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d103      	bne.n	8003750 <BSP_MOTION_SENSOR_SetFullScale+0x8c>
    {
      /* Feature not supported for Magneto */
      status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003748:	f06f 030a 	mvn.w	r3, #10
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	e016      	b.n	800377e <BSP_MOTION_SENSOR_SetFullScale+0xba>
    }
    else
    {
      if (Motion_Sensor_FuncDrv[Instance][index]->SetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 8003750:	7cf9      	ldrb	r1, [r7, #19]
 8003752:	480e      	ldr	r0, [pc, #56]	; (800378c <BSP_MOTION_SENSOR_SetFullScale+0xc8>)
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	440b      	add	r3, r1
 800375e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	490a      	ldr	r1, [pc, #40]	; (8003790 <BSP_MOTION_SENSOR_SetFullScale+0xcc>)
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4610      	mov	r0, r2
 8003770:	4798      	blx	r3
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	da02      	bge.n	800377e <BSP_MOTION_SENSOR_SetFullScale+0xba>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8003778:	f06f 0304 	mvn.w	r3, #4
 800377c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return status;
 800377e:	697b      	ldr	r3, [r7, #20]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20001da8 	.word	0x20001da8
 800378c:	20001dc0 	.word	0x20001dc0
 8003790:	20001db0 	.word	0x20001db0

08003794 <ISM330DHCX_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status.
  */
static int32_t ISM330DHCX_Probe(uint32_t Functions)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08c      	sub	sp, #48	; 0x30
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 800379c:	2300      	movs	r3, #0
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ISM330DHCX_IO_t            IOCtx;
  uint8_t                 ism330dlc_id;
  static ISM330DHCX_Object_t ISM330DHCX_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = ISM330DHCX_I2C_BUS;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = ISM330DHCX_I2C_ADD_H;
 80037a4:	23d7      	movs	r3, #215	; 0xd7
 80037a6:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 80037a8:	4b29      	ldr	r3, [pc, #164]	; (8003850 <ISM330DHCX_Probe+0xbc>)
 80037aa:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 80037ac:	4b29      	ldr	r3, [pc, #164]	; (8003854 <ISM330DHCX_Probe+0xc0>)
 80037ae:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 80037b0:	4b29      	ldr	r3, [pc, #164]	; (8003858 <ISM330DHCX_Probe+0xc4>)
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 80037b4:	4b29      	ldr	r3, [pc, #164]	; (800385c <ISM330DHCX_Probe+0xc8>)
 80037b6:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 80037b8:	4b29      	ldr	r3, [pc, #164]	; (8003860 <ISM330DHCX_Probe+0xcc>)
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Register Component Bus IO operations */
  if (ISM330DHCX_RegisterBusIO(&ISM330DHCX_Obj, &IOCtx) != ISM330DHCX_OK)
 80037bc:	f107 0310 	add.w	r3, r7, #16
 80037c0:	4619      	mov	r1, r3
 80037c2:	4828      	ldr	r0, [pc, #160]	; (8003864 <ISM330DHCX_Probe+0xd0>)
 80037c4:	f000 fd36 	bl	8004234 <ISM330DHCX_RegisterBusIO>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <ISM330DHCX_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 80037ce:	f06f 0307 	mvn.w	r3, #7
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d4:	e037      	b.n	8003846 <ISM330DHCX_Probe+0xb2>
  }
  /* Read the sensor ID */
  else if (ISM330DHCX_ReadID(&ISM330DHCX_Obj, &ism330dlc_id) != ISM330DHCX_OK)
 80037d6:	f107 030f 	add.w	r3, r7, #15
 80037da:	4619      	mov	r1, r3
 80037dc:	4821      	ldr	r0, [pc, #132]	; (8003864 <ISM330DHCX_Probe+0xd0>)
 80037de:	f000 fe37 	bl	8004450 <ISM330DHCX_ReadID>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <ISM330DHCX_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 80037e8:	f06f 0304 	mvn.w	r3, #4
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ee:	e02a      	b.n	8003846 <ISM330DHCX_Probe+0xb2>
  }
  /* Check if the returned sensor ID is correct */
  else if (ism330dlc_id != ISM330DHCX_ID)
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	2b6b      	cmp	r3, #107	; 0x6b
 80037f4:	d003      	beq.n	80037fe <ISM330DHCX_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 80037f6:	f06f 0306 	mvn.w	r3, #6
 80037fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fc:	e023      	b.n	8003846 <ISM330DHCX_Probe+0xb2>
  }
  else
  {
    Motion_Sensor_CompObj[0] = &ISM330DHCX_Obj;
 80037fe:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <ISM330DHCX_Probe+0xd4>)
 8003800:	4a18      	ldr	r2, [pc, #96]	; (8003864 <ISM330DHCX_Probe+0xd0>)
 8003802:	601a      	str	r2, [r3, #0]
    Motion_Sensor_Drv[0]     = (MOTION_SENSOR_CommonDrv_t *) &ISM330DHCX_COMMON_Driver;
 8003804:	4b19      	ldr	r3, [pc, #100]	; (800386c <ISM330DHCX_Probe+0xd8>)
 8003806:	4a1a      	ldr	r2, [pc, #104]	; (8003870 <ISM330DHCX_Probe+0xdc>)
 8003808:	601a      	str	r2, [r3, #0]
    /* Initialize the component */
    if (Motion_Sensor_Drv[0]->Init(Motion_Sensor_CompObj[0]) < 0)
 800380a:	4b18      	ldr	r3, [pc, #96]	; (800386c <ISM330DHCX_Probe+0xd8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a15      	ldr	r2, [pc, #84]	; (8003868 <ISM330DHCX_Probe+0xd4>)
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	4610      	mov	r0, r2
 8003816:	4798      	blx	r3
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	da03      	bge.n	8003826 <ISM330DHCX_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800381e:	f06f 0304 	mvn.w	r3, #4
 8003822:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003824:	e00f      	b.n	8003846 <ISM330DHCX_Probe+0xb2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_GYRO) != 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <ISM330DHCX_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[0][GYRO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_GYRO_Driver;
 8003830:	4b10      	ldr	r3, [pc, #64]	; (8003874 <ISM330DHCX_Probe+0xe0>)
 8003832:	4a11      	ldr	r2, [pc, #68]	; (8003878 <ISM330DHCX_Probe+0xe4>)
 8003834:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & MOTION_ACCELERO) != 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <ISM330DHCX_Probe+0xb2>
      {
        Motion_Sensor_FuncDrv[0][ACCELERO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_ACC_Driver;
 8003840:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <ISM330DHCX_Probe+0xe0>)
 8003842:	4a0e      	ldr	r2, [pc, #56]	; (800387c <ISM330DHCX_Probe+0xe8>)
 8003844:	605a      	str	r2, [r3, #4]
      }
    }
  }

  return status;
 8003846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003848:	4618      	mov	r0, r3
 800384a:	3730      	adds	r7, #48	; 0x30
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	08002afd 	.word	0x08002afd
 8003854:	08002b71 	.word	0x08002b71
 8003858:	08002c15 	.word	0x08002c15
 800385c:	08002bb9 	.word	0x08002bb9
 8003860:	08002c71 	.word	0x08002c71
 8003864:	20001dd8 	.word	0x20001dd8
 8003868:	20001db0 	.word	0x20001db0
 800386c:	20001db8 	.word	0x20001db8
 8003870:	2000004c 	.word	0x2000004c
 8003874:	20001dc0 	.word	0x20001dc0
 8003878:	20000080 	.word	0x20000080
 800387c:	2000005c 	.word	0x2000005c

08003880 <IIS2MDC_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status.
  */
static int32_t IIS2MDC_Probe(uint32_t Functions)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08c      	sub	sp, #48	; 0x30
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8003888:	2300      	movs	r3, #0
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c
  IIS2MDC_IO_t            IOCtx;
  uint8_t                 iis2mdc_id;
  static IIS2MDC_Object_t IIS2MDC_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = IIS2MDC_I2C_BUS;
 800388c:	2300      	movs	r3, #0
 800388e:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = IIS2MDC_I2C_ADD;
 8003890:	233d      	movs	r3, #61	; 0x3d
 8003892:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8003894:	4b25      	ldr	r3, [pc, #148]	; (800392c <IIS2MDC_Probe+0xac>)
 8003896:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8003898:	4b25      	ldr	r3, [pc, #148]	; (8003930 <IIS2MDC_Probe+0xb0>)
 800389a:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 800389c:	4b25      	ldr	r3, [pc, #148]	; (8003934 <IIS2MDC_Probe+0xb4>)
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 80038a0:	4b25      	ldr	r3, [pc, #148]	; (8003938 <IIS2MDC_Probe+0xb8>)
 80038a2:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 80038a4:	4b25      	ldr	r3, [pc, #148]	; (800393c <IIS2MDC_Probe+0xbc>)
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Register Component Bus IO operations */
  if (IIS2MDC_RegisterBusIO(&IIS2MDC_Obj, &IOCtx) != IIS2MDC_OK)
 80038a8:	f107 0310 	add.w	r3, r7, #16
 80038ac:	4619      	mov	r1, r3
 80038ae:	4824      	ldr	r0, [pc, #144]	; (8003940 <IIS2MDC_Probe+0xc0>)
 80038b0:	f000 f852 	bl	8003958 <IIS2MDC_RegisterBusIO>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <IIS2MDC_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 80038ba:	f06f 0307 	mvn.w	r3, #7
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c0:	e02f      	b.n	8003922 <IIS2MDC_Probe+0xa2>
  }
  /* Read the sensor ID */
  else if (IIS2MDC_ReadID(&IIS2MDC_Obj, &iis2mdc_id) != IIS2MDC_OK)
 80038c2:	f107 030f 	add.w	r3, r7, #15
 80038c6:	4619      	mov	r1, r3
 80038c8:	481d      	ldr	r0, [pc, #116]	; (8003940 <IIS2MDC_Probe+0xc0>)
 80038ca:	f000 f90e 	bl	8003aea <IIS2MDC_ReadID>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <IIS2MDC_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 80038d4:	f06f 0304 	mvn.w	r3, #4
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038da:	e022      	b.n	8003922 <IIS2MDC_Probe+0xa2>
  }
  /* Check if the returned sensor ID is correct */
  else if (iis2mdc_id != IIS2MDC_ID)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	d003      	beq.n	80038ea <IIS2MDC_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 80038e2:	f06f 0306 	mvn.w	r3, #6
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e8:	e01b      	b.n	8003922 <IIS2MDC_Probe+0xa2>
  }
  else
  {
    Motion_Sensor_CompObj[1] = &IIS2MDC_Obj;
 80038ea:	4b16      	ldr	r3, [pc, #88]	; (8003944 <IIS2MDC_Probe+0xc4>)
 80038ec:	4a14      	ldr	r2, [pc, #80]	; (8003940 <IIS2MDC_Probe+0xc0>)
 80038ee:	605a      	str	r2, [r3, #4]
    Motion_Sensor_Drv[1]     = (MOTION_SENSOR_CommonDrv_t *) &IIS2MDC_COMMON_Driver;
 80038f0:	4b15      	ldr	r3, [pc, #84]	; (8003948 <IIS2MDC_Probe+0xc8>)
 80038f2:	4a16      	ldr	r2, [pc, #88]	; (800394c <IIS2MDC_Probe+0xcc>)
 80038f4:	605a      	str	r2, [r3, #4]
    /* Initialize the component */
    if (Motion_Sensor_Drv[1]->Init(Motion_Sensor_CompObj[1]) < 0)
 80038f6:	4b14      	ldr	r3, [pc, #80]	; (8003948 <IIS2MDC_Probe+0xc8>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a11      	ldr	r2, [pc, #68]	; (8003944 <IIS2MDC_Probe+0xc4>)
 80038fe:	6852      	ldr	r2, [r2, #4]
 8003900:	4610      	mov	r0, r2
 8003902:	4798      	blx	r3
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	da03      	bge.n	8003912 <IIS2MDC_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800390a:	f06f 0304 	mvn.w	r3, #4
 800390e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003910:	e007      	b.n	8003922 <IIS2MDC_Probe+0xa2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_MAGNETO) != 0U)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <IIS2MDC_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[1][MAGNETO_ID] = (MOTION_SENSOR_FuncDrv_t *) &IIS2MDC_MAG_Driver;
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <IIS2MDC_Probe+0xd0>)
 800391e:	4a0d      	ldr	r2, [pc, #52]	; (8003954 <IIS2MDC_Probe+0xd4>)
 8003920:	615a      	str	r2, [r3, #20]
      }
    }
  }

  return status;
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003924:	4618      	mov	r0, r3
 8003926:	3730      	adds	r7, #48	; 0x30
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	08002afd 	.word	0x08002afd
 8003930:	08002b71 	.word	0x08002b71
 8003934:	08002c15 	.word	0x08002c15
 8003938:	08002bb9 	.word	0x08002bb9
 800393c:	08002c71 	.word	0x08002c71
 8003940:	20001e08 	.word	0x20001e08
 8003944:	20001db0 	.word	0x20001db0
 8003948:	20001db8 	.word	0x20001db8
 800394c:	20000018 	.word	0x20000018
 8003950:	20001dc0 	.word	0x20001dc0
 8003954:	20000028 	.word	0x20000028

08003958 <IIS2MDC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d103      	bne.n	8003974 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 800396c:	f04f 33ff 	mov.w	r3, #4294967295
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	e05e      	b.n	8003a32 <IIS2MDC_RegisterBusIO+0xda>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	7b1a      	ldrb	r2, [r3, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	699a      	ldr	r2, [r3, #24]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a23      	ldr	r2, [pc, #140]	; (8003a3c <IIS2MDC_RegisterBusIO+0xe4>)
 80039b0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a22      	ldr	r2, [pc, #136]	; (8003a40 <IIS2MDC_RegisterBusIO+0xe8>)
 80039b6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <IIS2MDC_RegisterBusIO+0x76>
    {
      ret = IIS2MDC_ERROR;
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	e031      	b.n	8003a32 <IIS2MDC_RegisterBusIO+0xda>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4798      	blx	r3
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <IIS2MDC_RegisterBusIO+0x8a>
    {
      ret = IIS2MDC_ERROR;
 80039da:	f04f 33ff 	mov.w	r3, #4294967295
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	e027      	b.n	8003a32 <IIS2MDC_RegisterBusIO+0xda>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d023      	beq.n	8003a32 <IIS2MDC_RegisterBusIO+0xda>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d11e      	bne.n	8003a32 <IIS2MDC_RegisterBusIO+0xda>
        {
          if (pObj->IO.BusType == IIS2MDC_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d10e      	bne.n	8003a1a <IIS2MDC_RegisterBusIO+0xc2>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80039fc:	2334      	movs	r3, #52	; 0x34
 80039fe:	72fb      	strb	r3, [r7, #11]

            if (IIS2MDC_Write_Reg(pObj, IIS2MDC_CFG_REG_C, data) != IIS2MDC_OK)
 8003a00:	7afb      	ldrb	r3, [r7, #11]
 8003a02:	461a      	mov	r2, r3
 8003a04:	2162      	movs	r1, #98	; 0x62
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fa15 	bl	8003e36 <IIS2MDC_Write_Reg>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00f      	beq.n	8003a32 <IIS2MDC_RegisterBusIO+0xda>
            {
              ret = IIS2MDC_ERROR;
 8003a12:	f04f 33ff 	mov.w	r3, #4294967295
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e00b      	b.n	8003a32 <IIS2MDC_RegisterBusIO+0xda>
            }
          }
          else
          {
            /* Disable I2C interface on the component */
            if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	331c      	adds	r3, #28
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fbe1 	bl	80041e8 <iis2mdc_i2c_interface_set>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <IIS2MDC_RegisterBusIO+0xda>
            {
              ret = IIS2MDC_ERROR;
 8003a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a30:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003a32:	68fb      	ldr	r3, [r7, #12]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	08003e6d 	.word	0x08003e6d
 8003a40:	08003ecf 	.word	0x08003ecf

08003a44 <IIS2MDC_Init>:
 * @brief  Initialize the IIS2MDC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	331c      	adds	r3, #28
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fb20 	bl	8004098 <iis2mdc_block_data_update_set>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a62:	e028      	b.n	8003ab6 <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	331c      	adds	r3, #28
 8003a68:	2102      	movs	r1, #2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fa90 	bl	8003f90 <iis2mdc_operating_mode_set>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 8003a76:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7a:	e01c      	b.n	8003ab6 <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	331c      	adds	r3, #28
 8003a80:	2103      	movs	r1, #3
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 faaa 	bl	8003fdc <iis2mdc_data_rate_set>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 8003a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a92:	e010      	b.n	8003ab6 <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	331c      	adds	r3, #28
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fb7e 	bl	800419c <iis2mdc_self_test_set>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 8003aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aaa:	e004      	b.n	8003ab6 <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <IIS2MDC_DeInit>:
 * @brief  Deinitialize the IIS2MDC magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f874 	bl	8003bb4 <IIS2MDC_MAG_Disable>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 8003ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad6:	e004      	b.n	8003ae2 <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <IIS2MDC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	331c      	adds	r3, #28
 8003af8:	6839      	ldr	r1, [r7, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fb3d 	bl	800417a <iis2mdc_device_id_get>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 8003b06:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0a:	e000      	b.n	8003b0e <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <IIS2MDC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
 * @retval Component status
 */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2201      	movs	r2, #1
 8003b32:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2200      	movs	r2, #0
 8003b38:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2232      	movs	r2, #50	; 0x32
 8003b4a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	4a04      	ldr	r2, [pc, #16]	; (8003b70 <IIS2MDC_GetCapabilities+0x58>)
 8003b60:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	42c80000 	.word	0x42c80000

08003b74 <IIS2MDC_MAG_Enable>:
 * @brief Enable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e010      	b.n	8003bac <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	331c      	adds	r3, #28
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 f9fd 	bl	8003f90 <iis2mdc_operating_mode_set>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 8003b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba0:	e004      	b.n	8003bac <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <IIS2MDC_MAG_Disable>:
 * @brief Disable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e010      	b.n	8003bec <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	331c      	adds	r3, #28
 8003bce:	2102      	movs	r1, #2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 f9dd 	bl	8003f90 <iis2mdc_operating_mode_set>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 8003bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003be0:	e004      	b.n	8003bec <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <IIS2MDC_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003c04:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <IIS2MDC_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	331c      	adds	r3, #28
 8003c26:	f107 020b 	add.w	r2, r7, #11
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 f9fb 	bl	8004028 <iis2mdc_data_rate_get>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 8003c38:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3c:	e023      	b.n	8003c86 <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003c3e:	7afb      	ldrb	r3, [r7, #11]
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d81b      	bhi.n	8003c7c <IIS2MDC_MAG_GetOutputDataRate+0x68>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c5d 	.word	0x08003c5d
 8003c50:	08003c65 	.word	0x08003c65
 8003c54:	08003c6d 	.word	0x08003c6d
 8003c58:	08003c75 	.word	0x08003c75
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4a0c      	ldr	r2, [pc, #48]	; (8003c90 <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 8003c60:	601a      	str	r2, [r3, #0]
      break;
 8003c62:	e00f      	b.n	8003c84 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4a0b      	ldr	r2, [pc, #44]	; (8003c94 <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 8003c68:	601a      	str	r2, [r3, #0]
      break;
 8003c6a:	e00b      	b.n	8003c84 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 8003c70:	601a      	str	r2, [r3, #0]
      break;
 8003c72:	e007      	b.n	8003c84 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	4a09      	ldr	r2, [pc, #36]	; (8003c9c <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 8003c78:	601a      	str	r2, [r3, #0]
      break;
 8003c7a:	e003      	b.n	8003c84 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 8003c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c80:	60fb      	str	r3, [r7, #12]
      break;
 8003c82:	bf00      	nop
  }

  return ret;
 8003c84:	68fb      	ldr	r3, [r7, #12]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	41200000 	.word	0x41200000
 8003c94:	41a00000 	.word	0x41a00000
 8003c98:	42480000 	.word	0x42480000
 8003c9c:	42c80000 	.word	0x42c80000

08003ca0 <IIS2MDC_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8003cac:	edd7 7a00 	vldr	s15, [r7]
 8003cb0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003cb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cbc:	d801      	bhi.n	8003cc2 <IIS2MDC_MAG_SetOutputDataRate+0x22>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e016      	b.n	8003cf0 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8003cc2:	edd7 7a00 	vldr	s15, [r7]
 8003cc6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd2:	d801      	bhi.n	8003cd8 <IIS2MDC_MAG_SetOutputDataRate+0x38>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e00b      	b.n	8003cf0 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8003cd8:	edd7 7a00 	vldr	s15, [r7]
 8003cdc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003d18 <IIS2MDC_MAG_SetOutputDataRate+0x78>
 8003ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce8:	d801      	bhi.n	8003cee <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e000      	b.n	8003cf0 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8003cee:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 8003cf0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	331c      	adds	r3, #28
 8003cf6:	7bfa      	ldrb	r2, [r7, #15]
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f96e 	bl	8003fdc <iis2mdc_data_rate_set>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 8003d06:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0a:	e000      	b.n	8003d0e <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	42480000 	.word	0x42480000

08003d1c <IIS2MDC_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2232      	movs	r2, #50	; 0x32
 8003d2a:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <IIS2MDC_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <IIS2MDC_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	331c      	adds	r3, #28
 8003d60:	f107 0208 	add.w	r2, r7, #8
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f9bc 	bl	80040e4 <iis2mdc_magnetic_raw_get>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 8003d72:	f04f 33ff 	mov.w	r3, #4294967295
 8003d76:	e00c      	b.n	8003d92 <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003d78:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003d80:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003d88:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b086      	sub	sp, #24
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	331c      	adds	r3, #28
 8003da8:	f107 0210 	add.w	r2, r7, #16
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f998 	bl	80040e4 <iis2mdc_magnetic_raw_get>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 8003dba:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbe:	e036      	b.n	8003e2e <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 8003dc0:	f107 030c 	add.w	r3, r7, #12
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff ff14 	bl	8003bf4 <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003dcc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003dd0:	ee07 3a90 	vmov	s15, r3
 8003dd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003de4:	ee17 2a90 	vmov	r2, s15
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003dec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003df0:	ee07 3a90 	vmov	s15, r3
 8003df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003df8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e04:	ee17 2a90 	vmov	r2, s15
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003e0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e10:	ee07 3a90 	vmov	s15, r3
 8003e14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e18:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e24:	ee17 2a90 	vmov	r2, s15
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <IIS2MDC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Write_Reg(IIS2MDC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	460b      	mov	r3, r1
 8003e40:	70fb      	strb	r3, [r7, #3]
 8003e42:	4613      	mov	r3, r2
 8003e44:	70bb      	strb	r3, [r7, #2]
  if (iis2mdc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS2MDC_OK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f103 001c 	add.w	r0, r3, #28
 8003e4c:	1cba      	adds	r2, r7, #2
 8003e4e:	78f9      	ldrb	r1, [r7, #3]
 8003e50:	2301      	movs	r3, #1
 8003e52:	f000 f885 	bl	8003f60 <iis2mdc_write_reg>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <IIS2MDC_Write_Reg+0x2c>
  {
    return IIS2MDC_ERROR;
 8003e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e60:	e000      	b.n	8003e64 <IIS2MDC_Write_Reg+0x2e>
  }

  return IIS2MDC_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003e6c:	b590      	push	{r4, r7, lr}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	461a      	mov	r2, r3
 8003e78:	460b      	mov	r3, r1
 8003e7a:	72fb      	strb	r3, [r7, #11]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10e      	bne.n	8003eaa <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	695c      	ldr	r4, [r3, #20]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	7b1b      	ldrb	r3, [r3, #12]
 8003e94:	b298      	uxth	r0, r3
 8003e96:	7afb      	ldrb	r3, [r7, #11]
 8003e98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	b299      	uxth	r1, r3
 8003ea0:	893b      	ldrh	r3, [r7, #8]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	47a0      	blx	r4
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	e00d      	b.n	8003ec6 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	695c      	ldr	r4, [r3, #20]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	7b1b      	ldrb	r3, [r3, #12]
 8003eb2:	b298      	uxth	r0, r3
 8003eb4:	7afb      	ldrb	r3, [r7, #11]
 8003eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	b299      	uxth	r1, r3
 8003ebe:	893b      	ldrh	r3, [r7, #8]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	47a0      	blx	r4
 8003ec4:	4603      	mov	r3, r0
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd90      	pop	{r4, r7, pc}

08003ece <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003ece:	b590      	push	{r4, r7, lr}
 8003ed0:	b087      	sub	sp, #28
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	460b      	mov	r3, r1
 8003edc:	72fb      	strb	r3, [r7, #11]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10e      	bne.n	8003f0c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	691c      	ldr	r4, [r3, #16]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	7b1b      	ldrb	r3, [r3, #12]
 8003ef6:	b298      	uxth	r0, r3
 8003ef8:	7afb      	ldrb	r3, [r7, #11]
 8003efa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	b299      	uxth	r1, r3
 8003f02:	893b      	ldrh	r3, [r7, #8]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	47a0      	blx	r4
 8003f08:	4603      	mov	r3, r0
 8003f0a:	e00d      	b.n	8003f28 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	691c      	ldr	r4, [r3, #16]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	7b1b      	ldrb	r3, [r3, #12]
 8003f14:	b298      	uxth	r0, r3
 8003f16:	7afb      	ldrb	r3, [r7, #11]
 8003f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	b299      	uxth	r1, r3
 8003f20:	893b      	ldrh	r3, [r7, #8]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	47a0      	blx	r4
 8003f26:	4603      	mov	r3, r0
  }
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd90      	pop	{r4, r7, pc}

08003f30 <iis2mdc_read_reg>:
  *
  */
int32_t iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003f30:	b590      	push	{r4, r7, lr}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	72fb      	strb	r3, [r7, #11]
 8003f40:	4613      	mov	r3, r2
 8003f42:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685c      	ldr	r4, [r3, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6898      	ldr	r0, [r3, #8]
 8003f4c:	893b      	ldrh	r3, [r7, #8]
 8003f4e:	7af9      	ldrb	r1, [r7, #11]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	47a0      	blx	r4
 8003f54:	6178      	str	r0, [r7, #20]
  return ret;
 8003f56:	697b      	ldr	r3, [r7, #20]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd90      	pop	{r4, r7, pc}

08003f60 <iis2mdc_write_reg>:
  *
  */
int32_t iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	72fb      	strb	r3, [r7, #11]
 8003f70:	4613      	mov	r3, r2
 8003f72:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681c      	ldr	r4, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6898      	ldr	r0, [r3, #8]
 8003f7c:	893b      	ldrh	r3, [r7, #8]
 8003f7e:	7af9      	ldrb	r1, [r7, #11]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	47a0      	blx	r4
 8003f84:	6178      	str	r0, [r7, #20]
  return ret;
 8003f86:	697b      	ldr	r3, [r7, #20]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	371c      	adds	r7, #28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd90      	pop	{r4, r7, pc}

08003f90 <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003f9c:	f107 0208 	add.w	r2, r7, #8
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	2160      	movs	r1, #96	; 0x60
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff ffc3 	bl	8003f30 <iis2mdc_read_reg>
 8003faa:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10f      	bne.n	8003fd2 <iis2mdc_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	7a3b      	ldrb	r3, [r7, #8]
 8003fbc:	f362 0301 	bfi	r3, r2, #0, #2
 8003fc0:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003fc2:	f107 0208 	add.w	r2, r7, #8
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	2160      	movs	r1, #96	; 0x60
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff ffc8 	bl	8003f60 <iis2mdc_write_reg>
 8003fd0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003fe8:	f107 0208 	add.w	r2, r7, #8
 8003fec:	2301      	movs	r3, #1
 8003fee:	2160      	movs	r1, #96	; 0x60
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff ff9d 	bl	8003f30 <iis2mdc_read_reg>
 8003ff6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10f      	bne.n	800401e <iis2mdc_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8003ffe:	78fb      	ldrb	r3, [r7, #3]
 8004000:	f003 0303 	and.w	r3, r3, #3
 8004004:	b2da      	uxtb	r2, r3
 8004006:	7a3b      	ldrb	r3, [r7, #8]
 8004008:	f362 0383 	bfi	r3, r2, #2, #2
 800400c:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800400e:	f107 0208 	add.w	r2, r7, #8
 8004012:	2301      	movs	r3, #1
 8004014:	2160      	movs	r1, #96	; 0x60
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff ffa2 	bl	8003f60 <iis2mdc_write_reg>
 800401c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800401e:	68fb      	ldr	r3, [r7, #12]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8004032:	f107 0208 	add.w	r2, r7, #8
 8004036:	2301      	movs	r3, #1
 8004038:	2160      	movs	r1, #96	; 0x60
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff ff78 	bl	8003f30 <iis2mdc_read_reg>
 8004040:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8004042:	7a3b      	ldrb	r3, [r7, #8]
 8004044:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b03      	cmp	r3, #3
 800404c:	d81a      	bhi.n	8004084 <iis2mdc_data_rate_get+0x5c>
 800404e:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <iis2mdc_data_rate_get+0x2c>)
 8004050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004054:	08004065 	.word	0x08004065
 8004058:	0800406d 	.word	0x0800406d
 800405c:	08004075 	.word	0x08004075
 8004060:	0800407d 	.word	0x0800407d
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2200      	movs	r2, #0
 8004068:	701a      	strb	r2, [r3, #0]
      break;
 800406a:	e00f      	b.n	800408c <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2201      	movs	r2, #1
 8004070:	701a      	strb	r2, [r3, #0]
      break;
 8004072:	e00b      	b.n	800408c <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2202      	movs	r2, #2
 8004078:	701a      	strb	r2, [r3, #0]
      break;
 800407a:	e007      	b.n	800408c <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2203      	movs	r2, #3
 8004080:	701a      	strb	r2, [r3, #0]
      break;
 8004082:	e003      	b.n	800408c <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]
      break;
 800408a:	bf00      	nop
  }

  return ret;
 800408c:	68fb      	ldr	r3, [r7, #12]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop

08004098 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80040a4:	f107 0208 	add.w	r2, r7, #8
 80040a8:	2301      	movs	r3, #1
 80040aa:	2162      	movs	r1, #98	; 0x62
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ff3f 	bl	8003f30 <iis2mdc_read_reg>
 80040b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10f      	bne.n	80040da <iis2mdc_block_data_update_set+0x42>
    reg.bdu = val;
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	7a3b      	ldrb	r3, [r7, #8]
 80040c4:	f362 1304 	bfi	r3, r2, #4, #1
 80040c8:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80040ca:	f107 0208 	add.w	r2, r7, #8
 80040ce:	2301      	movs	r3, #1
 80040d0:	2162      	movs	r1, #98	; 0x62
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff ff44 	bl	8003f60 <iis2mdc_write_reg>
 80040d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80040da:	68fb      	ldr	r3, [r7, #12]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 80040ee:	f107 020c 	add.w	r2, r7, #12
 80040f2:	2306      	movs	r3, #6
 80040f4:	2168      	movs	r1, #104	; 0x68
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff ff1a 	bl	8003f30 <iis2mdc_read_reg>
 80040fc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80040fe:	7b7b      	ldrb	r3, [r7, #13]
 8004100:	b21a      	sxth	r2, r3
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800410c:	b29b      	uxth	r3, r3
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	b29a      	uxth	r2, r3
 8004112:	7b3b      	ldrb	r3, [r7, #12]
 8004114:	b29b      	uxth	r3, r3
 8004116:	4413      	add	r3, r2
 8004118:	b29b      	uxth	r3, r3
 800411a:	b21a      	sxth	r2, r3
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004120:	7bfa      	ldrb	r2, [r7, #15]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	3302      	adds	r3, #2
 8004126:	b212      	sxth	r2, r2
 8004128:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	3302      	adds	r3, #2
 800412e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004132:	b29b      	uxth	r3, r3
 8004134:	021b      	lsls	r3, r3, #8
 8004136:	b29a      	uxth	r2, r3
 8004138:	7bbb      	ldrb	r3, [r7, #14]
 800413a:	b29b      	uxth	r3, r3
 800413c:	4413      	add	r3, r2
 800413e:	b29a      	uxth	r2, r3
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	3302      	adds	r3, #2
 8004144:	b212      	sxth	r2, r2
 8004146:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004148:	7c7a      	ldrb	r2, [r7, #17]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	3304      	adds	r3, #4
 800414e:	b212      	sxth	r2, r2
 8004150:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	3304      	adds	r3, #4
 8004156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800415a:	b29b      	uxth	r3, r3
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	b29a      	uxth	r2, r3
 8004160:	7c3b      	ldrb	r3, [r7, #16]
 8004162:	b29b      	uxth	r3, r3
 8004164:	4413      	add	r3, r2
 8004166:	b29a      	uxth	r2, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	3304      	adds	r3, #4
 800416c:	b212      	sxth	r2, r2
 800416e:	801a      	strh	r2, [r3, #0]
  return ret;
 8004170:	697b      	ldr	r3, [r7, #20]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 8004184:	2301      	movs	r3, #1
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	214f      	movs	r1, #79	; 0x4f
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff fed0 	bl	8003f30 <iis2mdc_read_reg>
 8004190:	60f8      	str	r0, [r7, #12]
  return ret;
 8004192:	68fb      	ldr	r3, [r7, #12]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80041a8:	f107 0208 	add.w	r2, r7, #8
 80041ac:	2301      	movs	r3, #1
 80041ae:	2162      	movs	r1, #98	; 0x62
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff febd 	bl	8003f30 <iis2mdc_read_reg>
 80041b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10f      	bne.n	80041de <iis2mdc_self_test_set+0x42>
    reg.self_test = val;
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	7a3b      	ldrb	r3, [r7, #8]
 80041c8:	f362 0341 	bfi	r3, r2, #1, #1
 80041cc:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80041ce:	f107 0208 	add.w	r2, r7, #8
 80041d2:	2301      	movs	r3, #1
 80041d4:	2162      	movs	r1, #98	; 0x62
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff fec2 	bl	8003f60 <iis2mdc_write_reg>
 80041dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041de:	68fb      	ldr	r3, [r7, #12]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80041f4:	f107 0208 	add.w	r2, r7, #8
 80041f8:	2301      	movs	r3, #1
 80041fa:	2162      	movs	r1, #98	; 0x62
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7ff fe97 	bl	8003f30 <iis2mdc_read_reg>
 8004202:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10f      	bne.n	800422a <iis2mdc_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	b2da      	uxtb	r2, r3
 8004212:	7a3b      	ldrb	r3, [r7, #8]
 8004214:	f362 1345 	bfi	r3, r2, #5, #1
 8004218:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800421a:	f107 0208 	add.w	r2, r7, #8
 800421e:	2301      	movs	r3, #1
 8004220:	2162      	movs	r1, #98	; 0x62
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff fe9c 	bl	8003f60 <iis2mdc_write_reg>
 8004228:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800422a:	68fb      	ldr	r3, [r7, #12]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <ISM330DHCX_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d103      	bne.n	8004250 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 8004248:	f04f 33ff 	mov.w	r3, #4294967295
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	e04d      	b.n	80042ec <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	7b1a      	ldrb	r2, [r3, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	695a      	ldr	r2, [r3, #20]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	699a      	ldr	r2, [r3, #24]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a1b      	ldr	r2, [pc, #108]	; (80042f8 <ISM330DHCX_RegisterBusIO+0xc4>)
 800428c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a1a      	ldr	r2, [pc, #104]	; (80042fc <ISM330DHCX_RegisterBusIO+0xc8>)
 8004292:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 80042a2:	f04f 33ff 	mov.w	r3, #4294967295
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	e020      	b.n	80042ec <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4798      	blx	r3
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 80042b6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	e016      	b.n	80042ec <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d112      	bne.n	80042ec <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10d      	bne.n	80042ec <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80042d0:	230c      	movs	r3, #12
 80042d2:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 80042d4:	7afb      	ldrb	r3, [r7, #11]
 80042d6:	461a      	mov	r2, r3
 80042d8:	2112      	movs	r1, #18
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fd55 	bl	8004d8a <ISM330DHCX_Write_Reg>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ea:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80042ec:	68fb      	ldr	r3, [r7, #12]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	080051f9 	.word	0x080051f9
 80042fc:	0800522f 	.word	0x0800522f

08004300 <ISM330DHCX_Init>:
 * @brief  Initialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	331c      	adds	r3, #28
 800430c:	2101      	movs	r1, #1
 800430e:	4618      	mov	r0, r3
 8004310:	f001 fd71 	bl	8005df6 <ism330dhcx_auto_increment_set>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 800431a:	f04f 33ff 	mov.w	r3, #4294967295
 800431e:	e06c      	b.n	80043fa <ISM330DHCX_Init+0xfa>
  }

    /* SW reset */
  if ( ism330dhcx_reset_set( &(pObj->Ctx), PROPERTY_ENABLE)!= ISM330DHCX_OK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	331c      	adds	r3, #28
 8004324:	2101      	movs	r1, #1
 8004326:	4618      	mov	r0, r3
 8004328:	f001 fd3f 	bl	8005daa <ism330dhcx_reset_set>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8004332:	f04f 33ff 	mov.w	r3, #4294967295
 8004336:	e060      	b.n	80043fa <ISM330DHCX_Init+0xfa>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if ( ism330dhcx_auto_increment_set( &(pObj->Ctx), PROPERTY_ENABLE ) != ISM330DHCX_OK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	331c      	adds	r3, #28
 800433c:	2101      	movs	r1, #1
 800433e:	4618      	mov	r0, r3
 8004340:	f001 fd59 	bl	8005df6 <ism330dhcx_auto_increment_set>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 800434a:	f04f 33ff 	mov.w	r3, #4294967295
 800434e:	e054      	b.n	80043fa <ISM330DHCX_Init+0xfa>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	331c      	adds	r3, #28
 8004354:	2101      	movs	r1, #1
 8004356:	4618      	mov	r0, r3
 8004358:	f001 fc34 	bl	8005bc4 <ism330dhcx_block_data_update_set>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
 8004366:	e048      	b.n	80043fa <ISM330DHCX_Init+0xfa>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	331c      	adds	r3, #28
 800436c:	2100      	movs	r1, #0
 800436e:	4618      	mov	r0, r3
 8004370:	f001 fd67 	bl	8005e42 <ism330dhcx_fifo_mode_set>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	e03c      	b.n	80043fa <ISM330DHCX_Init+0xfa>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2204      	movs	r2, #4
 8004384:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	331c      	adds	r3, #28
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fff6 	bl	8005380 <ism330dhcx_xl_data_rate_set>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <ISM330DHCX_Init+0xa0>
  {
    return ISM330DHCX_ERROR;
 800439a:	f04f 33ff 	mov.w	r3, #4294967295
 800439e:	e02c      	b.n	80043fa <ISM330DHCX_Init+0xfa>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	331c      	adds	r3, #28
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 ff8c 	bl	80052c4 <ism330dhcx_xl_full_scale_set>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 80043b2:	f04f 33ff 	mov.w	r3, #4294967295
 80043b6:	e020      	b.n	80043fa <ISM330DHCX_Init+0xfa>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2204      	movs	r2, #4
 80043bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	331c      	adds	r3, #28
 80043c4:	2100      	movs	r1, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 fa2a 	bl	8005820 <ism330dhcx_gy_data_rate_set>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <ISM330DHCX_Init+0xd8>
  {
    return ISM330DHCX_ERROR;
 80043d2:	f04f 33ff 	mov.w	r3, #4294967295
 80043d6:	e010      	b.n	80043fa <ISM330DHCX_Init+0xfa>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	331c      	adds	r3, #28
 80043dc:	210c      	movs	r1, #12
 80043de:	4618      	mov	r0, r3
 80043e0:	f001 f9a6 	bl	8005730 <ism330dhcx_gy_full_scale_set>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 80043ea:	f04f 33ff 	mov.w	r3, #4294967295
 80043ee:	e004      	b.n	80043fa <ISM330DHCX_Init+0xfa>
  }

  pObj->is_initialized = 1;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <ISM330DHCX_DeInit>:
 * @brief  Deinitialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f888 	bl	8004520 <ISM330DHCX_ACC_Disable>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
 800441a:	e015      	b.n	8004448 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fa92 	bl	8004946 <ISM330DHCX_GYRO_Disable>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004428:	f04f 33ff 	mov.w	r3, #4294967295
 800442c:	e00c      	b.n	8004448 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <ISM330DHCX_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	331c      	adds	r3, #28
 800445e:	6839      	ldr	r1, [r7, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f001 fc91 	bl	8005d88 <ism330dhcx_device_id_get>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 800446c:	f04f 33ff 	mov.w	r3, #4294967295
 8004470:	e000      	b.n	8004474 <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <ISM330DHCX_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to ISM330DHCX sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2201      	movs	r2, #1
 800448a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2201      	movs	r2, #1
 8004490:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2200      	movs	r2, #0
 8004496:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2200      	movs	r2, #0
 800449c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80044a4:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2210      	movs	r2, #16
 80044aa:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2200      	movs	r2, #0
 80044b0:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	4a07      	ldr	r2, [pc, #28]	; (80044d4 <ISM330DHCX_GetCapabilities+0x58>)
 80044b6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	4a06      	ldr	r2, [pc, #24]	; (80044d4 <ISM330DHCX_GetCapabilities+0x58>)
 80044bc:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	45d05800 	.word	0x45d05800

080044d8 <ISM330DHCX_ACC_Enable>:
 * @brief  Enable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	e014      	b.n	8004518 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f103 021c 	add.w	r2, r3, #28
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80044fa:	4619      	mov	r1, r3
 80044fc:	4610      	mov	r0, r2
 80044fe:	f000 ff3f 	bl	8005380 <ism330dhcx_xl_data_rate_set>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8004508:	f04f 33ff 	mov.w	r3, #4294967295
 800450c:	e004      	b.n	8004518 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <ISM330DHCX_ACC_Disable>:
 * @brief  Disable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	e01f      	b.n	8004576 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f103 021c 	add.w	r2, r3, #28
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	332b      	adds	r3, #43	; 0x2b
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f001 f88c 	bl	8005660 <ism330dhcx_xl_data_rate_get>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 800454e:	f04f 33ff 	mov.w	r3, #4294967295
 8004552:	e010      	b.n	8004576 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	331c      	adds	r3, #28
 8004558:	2100      	movs	r1, #0
 800455a:	4618      	mov	r0, r3
 800455c:	f000 ff10 	bl	8005380 <ism330dhcx_xl_data_rate_set>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8004566:	f04f 33ff 	mov.w	r3, #4294967295
 800456a:	e004      	b.n	8004576 <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <ISM330DHCX_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	331c      	adds	r3, #28
 8004592:	f107 020b 	add.w	r2, r7, #11
 8004596:	4611      	mov	r1, r2
 8004598:	4618      	mov	r0, r3
 800459a:	f000 feb9 	bl	8005310 <ism330dhcx_xl_full_scale_get>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 80045a4:	f04f 33ff 	mov.w	r3, #4294967295
 80045a8:	e023      	b.n	80045f2 <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80045aa:	7afb      	ldrb	r3, [r7, #11]
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d81b      	bhi.n	80045e8 <ISM330DHCX_ACC_GetSensitivity+0x68>
 80045b0:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045d9 	.word	0x080045d9
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	4a0c      	ldr	r2, [pc, #48]	; (80045fc <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 80045cc:	601a      	str	r2, [r3, #0]
      break;
 80045ce:	e00f      	b.n	80045f0 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	4a0b      	ldr	r2, [pc, #44]	; (8004600 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 80045d4:	601a      	str	r2, [r3, #0]
      break;
 80045d6:	e00b      	b.n	80045f0 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 80045dc:	601a      	str	r2, [r3, #0]
      break;
 80045de:	e007      	b.n	80045f0 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	4a09      	ldr	r2, [pc, #36]	; (8004608 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 80045e4:	601a      	str	r2, [r3, #0]
      break;
 80045e6:	e003      	b.n	80045f0 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 80045e8:	f04f 33ff 	mov.w	r3, #4294967295
 80045ec:	60fb      	str	r3, [r7, #12]
      break;
 80045ee:	bf00      	nop
  }

  return ret;
 80045f0:	68fb      	ldr	r3, [r7, #12]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	3d79db23 	.word	0x3d79db23
 8004600:	3df9db23 	.word	0x3df9db23
 8004604:	3e79db23 	.word	0x3e79db23
 8004608:	3ef9db23 	.word	0x3ef9db23

0800460c <ISM330DHCX_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	331c      	adds	r3, #28
 800461e:	f107 020b 	add.w	r2, r7, #11
 8004622:	4611      	mov	r1, r2
 8004624:	4618      	mov	r0, r3
 8004626:	f001 f81b 	bl	8005660 <ism330dhcx_xl_data_rate_get>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004630:	f04f 33ff 	mov.w	r3, #4294967295
 8004634:	e04e      	b.n	80046d4 <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004636:	7afb      	ldrb	r3, [r7, #11]
 8004638:	2b0a      	cmp	r3, #10
 800463a:	d846      	bhi.n	80046ca <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 800463c:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	08004671 	.word	0x08004671
 8004648:	0800467b 	.word	0x0800467b
 800464c:	08004683 	.word	0x08004683
 8004650:	0800468b 	.word	0x0800468b
 8004654:	08004693 	.word	0x08004693
 8004658:	0800469b 	.word	0x0800469b
 800465c:	080046a3 	.word	0x080046a3
 8004660:	080046ab 	.word	0x080046ab
 8004664:	080046b3 	.word	0x080046b3
 8004668:	080046bb 	.word	0x080046bb
 800466c:	080046c3 	.word	0x080046c3
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
      break;
 8004678:	e02b      	b.n	80046d2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	4a17      	ldr	r2, [pc, #92]	; (80046dc <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 800467e:	601a      	str	r2, [r3, #0]
      break;
 8004680:	e027      	b.n	80046d2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	4a16      	ldr	r2, [pc, #88]	; (80046e0 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 8004686:	601a      	str	r2, [r3, #0]
      break;
 8004688:	e023      	b.n	80046d2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	4a15      	ldr	r2, [pc, #84]	; (80046e4 <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 800468e:	601a      	str	r2, [r3, #0]
      break;
 8004690:	e01f      	b.n	80046d2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 8004696:	601a      	str	r2, [r3, #0]
      break;
 8004698:	e01b      	b.n	80046d2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	4a13      	ldr	r2, [pc, #76]	; (80046ec <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 800469e:	601a      	str	r2, [r3, #0]
      break;
 80046a0:	e017      	b.n	80046d2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_417Hz:
      *Odr = 417.0f;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	4a12      	ldr	r2, [pc, #72]	; (80046f0 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 80046a6:	601a      	str	r2, [r3, #0]
      break;
 80046a8:	e013      	b.n	80046d2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	4a11      	ldr	r2, [pc, #68]	; (80046f4 <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 80046ae:	601a      	str	r2, [r3, #0]
      break;
 80046b0:	e00f      	b.n	80046d2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	4a10      	ldr	r2, [pc, #64]	; (80046f8 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 80046b6:	601a      	str	r2, [r3, #0]
      break;
 80046b8:	e00b      	b.n	80046d2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	4a0f      	ldr	r2, [pc, #60]	; (80046fc <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 80046be:	601a      	str	r2, [r3, #0]
      break;
 80046c0:	e007      	b.n	80046d2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	4a0e      	ldr	r2, [pc, #56]	; (8004700 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 80046c6:	601a      	str	r2, [r3, #0]
      break;
 80046c8:	e003      	b.n	80046d2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295
 80046ce:	60fb      	str	r3, [r7, #12]
      break;
 80046d0:	bf00      	nop
  }

  return ret;
 80046d2:	68fb      	ldr	r3, [r7, #12]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	41480000 	.word	0x41480000
 80046e0:	41d00000 	.word	0x41d00000
 80046e4:	42500000 	.word	0x42500000
 80046e8:	42d00000 	.word	0x42d00000
 80046ec:	43500000 	.word	0x43500000
 80046f0:	43d08000 	.word	0x43d08000
 80046f4:	44504000 	.word	0x44504000
 80046f8:	44d06000 	.word	0x44d06000
 80046fc:	45505000 	.word	0x45505000
 8004700:	45d05800 	.word	0x45d05800

08004704 <ISM330DHCX_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004716:	2b01      	cmp	r3, #1
 8004718:	d106      	bne.n	8004728 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800471a:	ed97 0a00 	vldr	s0, [r7]
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fb4e 	bl	8004dc0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 8004724:	4603      	mov	r3, r0
 8004726:	e005      	b.n	8004734 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004728:	ed97 0a00 	vldr	s0, [r7]
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fbd3 	bl	8004ed8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 8004732:	4603      	mov	r3, r0
  }
}
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <ISM330DHCX_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	331c      	adds	r3, #28
 800474e:	f107 020b 	add.w	r2, r7, #11
 8004752:	4611      	mov	r1, r2
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fddb 	bl	8005310 <ism330dhcx_xl_full_scale_get>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004760:	f04f 33ff 	mov.w	r3, #4294967295
 8004764:	e023      	b.n	80047ae <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004766:	7afb      	ldrb	r3, [r7, #11]
 8004768:	2b03      	cmp	r3, #3
 800476a:	d81b      	bhi.n	80047a4 <ISM330DHCX_ACC_GetFullScale+0x68>
 800476c:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <ISM330DHCX_ACC_GetFullScale+0x38>)
 800476e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004772:	bf00      	nop
 8004774:	08004785 	.word	0x08004785
 8004778:	0800479d 	.word	0x0800479d
 800477c:	0800478d 	.word	0x0800478d
 8004780:	08004795 	.word	0x08004795
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2202      	movs	r2, #2
 8004788:	601a      	str	r2, [r3, #0]
      break;
 800478a:	e00f      	b.n	80047ac <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2204      	movs	r2, #4
 8004790:	601a      	str	r2, [r3, #0]
      break;
 8004792:	e00b      	b.n	80047ac <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2208      	movs	r2, #8
 8004798:	601a      	str	r2, [r3, #0]
      break;
 800479a:	e007      	b.n	80047ac <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2210      	movs	r2, #16
 80047a0:	601a      	str	r2, [r3, #0]
      break;
 80047a2:	e003      	b.n	80047ac <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 80047a4:	f04f 33ff 	mov.w	r3, #4294967295
 80047a8:	60fb      	str	r3, [r7, #12]
      break;
 80047aa:	bf00      	nop
  }

  return ret;
 80047ac:	68fb      	ldr	r3, [r7, #12]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop

080047b8 <ISM330DHCX_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	dd0b      	ble.n	80047e0 <ISM330DHCX_ACC_SetFullScale+0x28>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	dd06      	ble.n	80047dc <ISM330DHCX_ACC_SetFullScale+0x24>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	dc01      	bgt.n	80047d8 <ISM330DHCX_ACC_SetFullScale+0x20>
 80047d4:	2303      	movs	r3, #3
 80047d6:	e004      	b.n	80047e2 <ISM330DHCX_ACC_SetFullScale+0x2a>
 80047d8:	2301      	movs	r3, #1
 80047da:	e002      	b.n	80047e2 <ISM330DHCX_ACC_SetFullScale+0x2a>
 80047dc:	2302      	movs	r3, #2
 80047de:	e000      	b.n	80047e2 <ISM330DHCX_ACC_SetFullScale+0x2a>
 80047e0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 80047e2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	331c      	adds	r3, #28
 80047e8:	7bfa      	ldrb	r2, [r7, #15]
 80047ea:	4611      	mov	r1, r2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fd69 	bl	80052c4 <ism330dhcx_xl_full_scale_set>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 80047f8:	f04f 33ff 	mov.w	r3, #4294967295
 80047fc:	e000      	b.n	8004800 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <ISM330DHCX_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	331c      	adds	r3, #28
 8004816:	f107 0208 	add.w	r2, r7, #8
 800481a:	4611      	mov	r1, r2
 800481c:	4618      	mov	r0, r3
 800481e:	f001 fa42 	bl	8005ca6 <ism330dhcx_acceleration_raw_get>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8004828:	f04f 33ff 	mov.w	r3, #4294967295
 800482c:	e00c      	b.n	8004848 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800482e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004836:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800483e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <ISM330DHCX_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	331c      	adds	r3, #28
 8004864:	f107 0210 	add.w	r2, r7, #16
 8004868:	4611      	mov	r1, r2
 800486a:	4618      	mov	r0, r3
 800486c:	f001 fa1b 	bl	8005ca6 <ism330dhcx_acceleration_raw_get>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004876:	f04f 33ff 	mov.w	r3, #4294967295
 800487a:	e03c      	b.n	80048f6 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 800487c:	f107 030c 	add.w	r3, r7, #12
 8004880:	4619      	mov	r1, r3
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff fe7c 	bl	8004580 <ISM330DHCX_ACC_GetSensitivity>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 800488e:	f04f 33ff 	mov.w	r3, #4294967295
 8004892:	e030      	b.n	80048f6 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004894:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004898:	ee07 3a90 	vmov	s15, r3
 800489c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80048a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048ac:	ee17 2a90 	vmov	r2, s15
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80048b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80048b8:	ee07 3a90 	vmov	s15, r3
 80048bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80048c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048cc:	ee17 2a90 	vmov	r2, s15
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80048d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048d8:	ee07 3a90 	vmov	s15, r3
 80048dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80048e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048ec:	ee17 2a90 	vmov	r2, s15
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <ISM330DHCX_GYRO_Enable>:
 * @brief  Enable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b082      	sub	sp, #8
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	e014      	b.n	800493e <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f103 021c 	add.w	r2, r3, #28
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004920:	4619      	mov	r1, r3
 8004922:	4610      	mov	r0, r2
 8004924:	f000 ff7c 	bl	8005820 <ism330dhcx_gy_data_rate_set>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 800492e:	f04f 33ff 	mov.w	r3, #4294967295
 8004932:	e004      	b.n	800493e <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <ISM330DHCX_GYRO_Disable>:
 * @brief  Disable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e01f      	b.n	800499c <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f103 021c 	add.w	r2, r3, #28
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	332c      	adds	r3, #44	; 0x2c
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f001 f8c9 	bl	8005b00 <ism330dhcx_gy_data_rate_get>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8004974:	f04f 33ff 	mov.w	r3, #4294967295
 8004978:	e010      	b.n	800499c <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	331c      	adds	r3, #28
 800497e:	2100      	movs	r1, #0
 8004980:	4618      	mov	r0, r3
 8004982:	f000 ff4d 	bl	8005820 <ism330dhcx_gy_data_rate_set>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 800498c:	f04f 33ff 	mov.w	r3, #4294967295
 8004990:	e004      	b.n	800499c <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <ISM330DHCX_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	331c      	adds	r3, #28
 80049b6:	f107 020b 	add.w	r2, r7, #11
 80049ba:	4611      	mov	r1, r2
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fedd 	bl	800577c <ism330dhcx_gy_full_scale_get>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 80049c8:	f04f 33ff 	mov.w	r3, #4294967295
 80049cc:	e039      	b.n	8004a42 <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80049ce:	7afb      	ldrb	r3, [r7, #11]
 80049d0:	2b0c      	cmp	r3, #12
 80049d2:	d831      	bhi.n	8004a38 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	08004a19 	.word	0x08004a19
 80049e0:	08004a39 	.word	0x08004a39
 80049e4:	08004a11 	.word	0x08004a11
 80049e8:	08004a39 	.word	0x08004a39
 80049ec:	08004a21 	.word	0x08004a21
 80049f0:	08004a39 	.word	0x08004a39
 80049f4:	08004a39 	.word	0x08004a39
 80049f8:	08004a39 	.word	0x08004a39
 80049fc:	08004a29 	.word	0x08004a29
 8004a00:	08004a39 	.word	0x08004a39
 8004a04:	08004a39 	.word	0x08004a39
 8004a08:	08004a39 	.word	0x08004a39
 8004a0c:	08004a31 	.word	0x08004a31
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	4a0e      	ldr	r2, [pc, #56]	; (8004a4c <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 8004a14:	601a      	str	r2, [r3, #0]
      break;
 8004a16:	e013      	b.n	8004a40 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	4a0d      	ldr	r2, [pc, #52]	; (8004a50 <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 8004a1c:	601a      	str	r2, [r3, #0]
      break;
 8004a1e:	e00f      	b.n	8004a40 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	4a0c      	ldr	r2, [pc, #48]	; (8004a54 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 8004a24:	601a      	str	r2, [r3, #0]
      break;
 8004a26:	e00b      	b.n	8004a40 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	4a0b      	ldr	r2, [pc, #44]	; (8004a58 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 8004a2c:	601a      	str	r2, [r3, #0]
      break;
 8004a2e:	e007      	b.n	8004a40 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 8004a34:	601a      	str	r2, [r3, #0]
      break;
 8004a36:	e003      	b.n	8004a40 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 8004a38:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3c:	60fb      	str	r3, [r7, #12]
      break;
 8004a3e:	bf00      	nop
  }

  return ret;
 8004a40:	68fb      	ldr	r3, [r7, #12]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	408c0000 	.word	0x408c0000
 8004a50:	410c0000 	.word	0x410c0000
 8004a54:	418c0000 	.word	0x418c0000
 8004a58:	420c0000 	.word	0x420c0000
 8004a5c:	428c0000 	.word	0x428c0000

08004a60 <ISM330DHCX_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	331c      	adds	r3, #28
 8004a72:	f107 020b 	add.w	r2, r7, #11
 8004a76:	4611      	mov	r1, r2
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f001 f841 	bl	8005b00 <ism330dhcx_gy_data_rate_get>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004a84:	f04f 33ff 	mov.w	r3, #4294967295
 8004a88:	e04e      	b.n	8004b28 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004a8a:	7afb      	ldrb	r3, [r7, #11]
 8004a8c:	2b0a      	cmp	r3, #10
 8004a8e:	d846      	bhi.n	8004b1e <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 8004a90:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 8004a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a96:	bf00      	nop
 8004a98:	08004ac5 	.word	0x08004ac5
 8004a9c:	08004acf 	.word	0x08004acf
 8004aa0:	08004ad7 	.word	0x08004ad7
 8004aa4:	08004adf 	.word	0x08004adf
 8004aa8:	08004ae7 	.word	0x08004ae7
 8004aac:	08004aef 	.word	0x08004aef
 8004ab0:	08004af7 	.word	0x08004af7
 8004ab4:	08004aff 	.word	0x08004aff
 8004ab8:	08004b07 	.word	0x08004b07
 8004abc:	08004b0f 	.word	0x08004b0f
 8004ac0:	08004b17 	.word	0x08004b17
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
      break;
 8004acc:	e02b      	b.n	8004b26 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	4a17      	ldr	r2, [pc, #92]	; (8004b30 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 8004ad2:	601a      	str	r2, [r3, #0]
      break;
 8004ad4:	e027      	b.n	8004b26 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	4a16      	ldr	r2, [pc, #88]	; (8004b34 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 8004ada:	601a      	str	r2, [r3, #0]
      break;
 8004adc:	e023      	b.n	8004b26 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 8004ae2:	601a      	str	r2, [r3, #0]
      break;
 8004ae4:	e01f      	b.n	8004b26 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	4a14      	ldr	r2, [pc, #80]	; (8004b3c <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 8004aea:	601a      	str	r2, [r3, #0]
      break;
 8004aec:	e01b      	b.n	8004b26 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 8004af2:	601a      	str	r2, [r3, #0]
      break;
 8004af4:	e017      	b.n	8004b26 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_417Hz:
      *Odr = 417.0f;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	4a12      	ldr	r2, [pc, #72]	; (8004b44 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 8004afa:	601a      	str	r2, [r3, #0]
      break;
 8004afc:	e013      	b.n	8004b26 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	4a11      	ldr	r2, [pc, #68]	; (8004b48 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 8004b02:	601a      	str	r2, [r3, #0]
      break;
 8004b04:	e00f      	b.n	8004b26 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	4a10      	ldr	r2, [pc, #64]	; (8004b4c <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 8004b0a:	601a      	str	r2, [r3, #0]
      break;
 8004b0c:	e00b      	b.n	8004b26 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	4a0f      	ldr	r2, [pc, #60]	; (8004b50 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 8004b12:	601a      	str	r2, [r3, #0]
      break;
 8004b14:	e007      	b.n	8004b26 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	4a0e      	ldr	r2, [pc, #56]	; (8004b54 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 8004b1a:	601a      	str	r2, [r3, #0]
      break;
 8004b1c:	e003      	b.n	8004b26 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8004b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b22:	60fb      	str	r3, [r7, #12]
      break;
 8004b24:	bf00      	nop
  }

  return ret;
 8004b26:	68fb      	ldr	r3, [r7, #12]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	41480000 	.word	0x41480000
 8004b34:	41d00000 	.word	0x41d00000
 8004b38:	42500000 	.word	0x42500000
 8004b3c:	42d00000 	.word	0x42d00000
 8004b40:	43500000 	.word	0x43500000
 8004b44:	43d08000 	.word	0x43d08000
 8004b48:	44504000 	.word	0x44504000
 8004b4c:	44d06000 	.word	0x44d06000
 8004b50:	45505000 	.word	0x45505000
 8004b54:	45d05800 	.word	0x45d05800

08004b58 <ISM330DHCX_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d106      	bne.n	8004b7c <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004b6e:	ed97 0a00 	vldr	s0, [r7]
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fa32 	bl	8004fdc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	e005      	b.n	8004b88 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004b7c:	ed97 0a00 	vldr	s0, [r7]
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fab7 	bl	80050f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 8004b86:	4603      	mov	r3, r0
  }
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <ISM330DHCX_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	331c      	adds	r3, #28
 8004ba2:	f107 020b 	add.w	r2, r7, #11
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fde7 	bl	800577c <ism330dhcx_gy_full_scale_get>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb8:	e03c      	b.n	8004c34 <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 8004bba:	7afb      	ldrb	r3, [r7, #11]
 8004bbc:	2b0c      	cmp	r3, #12
 8004bbe:	d834      	bhi.n	8004c2a <ISM330DHCX_GYRO_GetFullScale+0x9a>
 8004bc0:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 8004bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc6:	bf00      	nop
 8004bc8:	08004c05 	.word	0x08004c05
 8004bcc:	08004c2b 	.word	0x08004c2b
 8004bd0:	08004bfd 	.word	0x08004bfd
 8004bd4:	08004c2b 	.word	0x08004c2b
 8004bd8:	08004c0d 	.word	0x08004c0d
 8004bdc:	08004c2b 	.word	0x08004c2b
 8004be0:	08004c2b 	.word	0x08004c2b
 8004be4:	08004c2b 	.word	0x08004c2b
 8004be8:	08004c17 	.word	0x08004c17
 8004bec:	08004c2b 	.word	0x08004c2b
 8004bf0:	08004c2b 	.word	0x08004c2b
 8004bf4:	08004c2b 	.word	0x08004c2b
 8004bf8:	08004c21 	.word	0x08004c21
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	227d      	movs	r2, #125	; 0x7d
 8004c00:	601a      	str	r2, [r3, #0]
      break;
 8004c02:	e016      	b.n	8004c32 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	22fa      	movs	r2, #250	; 0xfa
 8004c08:	601a      	str	r2, [r3, #0]
      break;
 8004c0a:	e012      	b.n	8004c32 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004c12:	601a      	str	r2, [r3, #0]
      break;
 8004c14:	e00d      	b.n	8004c32 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c1c:	601a      	str	r2, [r3, #0]
      break;
 8004c1e:	e008      	b.n	8004c32 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004c26:	601a      	str	r2, [r3, #0]
      break;
 8004c28:	e003      	b.n	8004c32 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 8004c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2e:	60fb      	str	r3, [r7, #12]
      break;
 8004c30:	bf00      	nop
  }

  return ret;
 8004c32:	68fb      	ldr	r3, [r7, #12]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <ISM330DHCX_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b7d      	cmp	r3, #125	; 0x7d
 8004c4a:	dd12      	ble.n	8004c72 <ISM330DHCX_GYRO_SetFullScale+0x36>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2bfa      	cmp	r3, #250	; 0xfa
 8004c50:	dd0d      	ble.n	8004c6e <ISM330DHCX_GYRO_SetFullScale+0x32>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c58:	dd07      	ble.n	8004c6a <ISM330DHCX_GYRO_SetFullScale+0x2e>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c60:	dc01      	bgt.n	8004c66 <ISM330DHCX_GYRO_SetFullScale+0x2a>
 8004c62:	2308      	movs	r3, #8
 8004c64:	e006      	b.n	8004c74 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004c66:	230c      	movs	r3, #12
 8004c68:	e004      	b.n	8004c74 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004c6a:	2304      	movs	r3, #4
 8004c6c:	e002      	b.n	8004c74 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e000      	b.n	8004c74 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004c72:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8004c74:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	331c      	adds	r3, #28
 8004c7a:	7bfa      	ldrb	r2, [r7, #15]
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fd56 	bl	8005730 <ism330dhcx_gy_full_scale_set>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 8004c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8e:	e000      	b.n	8004c92 <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <ISM330DHCX_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	331c      	adds	r3, #28
 8004ca8:	f107 0208 	add.w	r2, r7, #8
 8004cac:	4611      	mov	r1, r2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 ffae 	bl	8005c10 <ism330dhcx_angular_rate_raw_get>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8004cba:	f04f 33ff 	mov.w	r3, #4294967295
 8004cbe:	e00c      	b.n	8004cda <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004cc0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004cc8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004cd0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <ISM330DHCX_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b086      	sub	sp, #24
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	331c      	adds	r3, #28
 8004cf0:	f107 0210 	add.w	r2, r7, #16
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 ff8a 	bl	8005c10 <ism330dhcx_angular_rate_raw_get>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 8004d02:	f04f 33ff 	mov.w	r3, #4294967295
 8004d06:	e03c      	b.n	8004d82 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8004d08:	f107 030c 	add.w	r3, r7, #12
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff fe48 	bl	80049a4 <ISM330DHCX_GYRO_GetSensitivity>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8004d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1e:	e030      	b.n	8004d82 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004d20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d24:	ee07 3a90 	vmov	s15, r3
 8004d28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d38:	ee17 2a90 	vmov	r2, s15
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004d40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d44:	ee07 3a90 	vmov	s15, r3
 8004d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d58:	ee17 2a90 	vmov	r2, s15
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004d60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d64:	ee07 3a90 	vmov	s15, r3
 8004d68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d78:	ee17 2a90 	vmov	r2, s15
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <ISM330DHCX_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	70fb      	strb	r3, [r7, #3]
 8004d96:	4613      	mov	r3, r2
 8004d98:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f103 001c 	add.w	r0, r3, #28
 8004da0:	1cba      	adds	r2, r7, #2
 8004da2:	78f9      	ldrb	r1, [r7, #3]
 8004da4:	2301      	movs	r3, #1
 8004da6:	f000 fa75 	bl	8005294 <ism330dhcx_write_reg>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004db0:	f04f 33ff 	mov.w	r3, #4294967295
 8004db4:	e000      	b.n	8004db8 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8004dcc:	edd7 7a00 	vldr	s15, [r7]
 8004dd0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004dd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ddc:	d801      	bhi.n	8004de2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e058      	b.n	8004e94 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004de2:	edd7 7a00 	vldr	s15, [r7]
 8004de6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df2:	d801      	bhi.n	8004df8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e04d      	b.n	8004e94 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004df8:	edd7 7a00 	vldr	s15, [r7]
 8004dfc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004ebc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004e00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e08:	d801      	bhi.n	8004e0e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e042      	b.n	8004e94 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004e0e:	edd7 7a00 	vldr	s15, [r7]
 8004e12:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004ec0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e1e:	d801      	bhi.n	8004e24 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004e20:	2304      	movs	r3, #4
 8004e22:	e037      	b.n	8004e94 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004e24:	edd7 7a00 	vldr	s15, [r7]
 8004e28:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004ec4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e34:	d801      	bhi.n	8004e3a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004e36:	2305      	movs	r3, #5
 8004e38:	e02c      	b.n	8004e94 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004e3a:	edd7 7a00 	vldr	s15, [r7]
 8004e3e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004ec8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e4a:	d801      	bhi.n	8004e50 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004e4c:	2306      	movs	r3, #6
 8004e4e:	e021      	b.n	8004e94 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004e50:	edd7 7a00 	vldr	s15, [r7]
 8004e54:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004ecc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004e58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e60:	d801      	bhi.n	8004e66 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004e62:	2307      	movs	r3, #7
 8004e64:	e016      	b.n	8004e94 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004e66:	edd7 7a00 	vldr	s15, [r7]
 8004e6a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004ed0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e76:	d801      	bhi.n	8004e7c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004e78:	2308      	movs	r3, #8
 8004e7a:	e00b      	b.n	8004e94 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004e7c:	edd7 7a00 	vldr	s15, [r7]
 8004e80:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004ed4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004e84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8c:	d801      	bhi.n	8004e92 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004e8e:	2309      	movs	r3, #9
 8004e90:	e000      	b.n	8004e94 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004e92:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8004e94:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
          :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	331c      	adds	r3, #28
 8004e9a:	7bfa      	ldrb	r2, [r7, #15]
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fa6e 	bl	8005380 <ism330dhcx_xl_data_rate_set>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8004eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8004eae:	e000      	b.n	8004eb2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	42500000 	.word	0x42500000
 8004ec0:	42d00000 	.word	0x42d00000
 8004ec4:	43500000 	.word	0x43500000
 8004ec8:	43d08000 	.word	0x43d08000
 8004ecc:	44504000 	.word	0x44504000
 8004ed0:	44d06000 	.word	0x44d06000
 8004ed4:	45505000 	.word	0x45505000

08004ed8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8004ee4:	edd7 7a00 	vldr	s15, [r7]
 8004ee8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef4:	d801      	bhi.n	8004efa <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e058      	b.n	8004fac <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004efa:	edd7 7a00 	vldr	s15, [r7]
 8004efe:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0a:	d801      	bhi.n	8004f10 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e04d      	b.n	8004fac <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004f10:	edd7 7a00 	vldr	s15, [r7]
 8004f14:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004fc0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f20:	d801      	bhi.n	8004f26 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004f22:	2303      	movs	r3, #3
 8004f24:	e042      	b.n	8004fac <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004f26:	edd7 7a00 	vldr	s15, [r7]
 8004f2a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004fc4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f36:	d801      	bhi.n	8004f3c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	e037      	b.n	8004fac <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004f3c:	edd7 7a00 	vldr	s15, [r7]
 8004f40:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004fc8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4c:	d801      	bhi.n	8004f52 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004f4e:	2305      	movs	r3, #5
 8004f50:	e02c      	b.n	8004fac <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004f52:	edd7 7a00 	vldr	s15, [r7]
 8004f56:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004fcc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f62:	d801      	bhi.n	8004f68 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004f64:	2306      	movs	r3, #6
 8004f66:	e021      	b.n	8004fac <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004f68:	edd7 7a00 	vldr	s15, [r7]
 8004f6c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004fd0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f78:	d801      	bhi.n	8004f7e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004f7a:	2307      	movs	r3, #7
 8004f7c:	e016      	b.n	8004fac <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004f7e:	edd7 7a00 	vldr	s15, [r7]
 8004f82:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004fd4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f8e:	d801      	bhi.n	8004f94 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004f90:	2308      	movs	r3, #8
 8004f92:	e00b      	b.n	8004fac <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004f94:	edd7 7a00 	vldr	s15, [r7]
 8004f98:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004fd8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa4:	d801      	bhi.n	8004faa <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004fa6:	2309      	movs	r3, #9
 8004fa8:	e000      	b.n	8004fac <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004faa:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
                :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	42500000 	.word	0x42500000
 8004fc4:	42d00000 	.word	0x42d00000
 8004fc8:	43500000 	.word	0x43500000
 8004fcc:	43d08000 	.word	0x43d08000
 8004fd0:	44504000 	.word	0x44504000
 8004fd4:	44d06000 	.word	0x44d06000
 8004fd8:	45505000 	.word	0x45505000

08004fdc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8004fe8:	edd7 7a00 	vldr	s15, [r7]
 8004fec:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff8:	d801      	bhi.n	8004ffe <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e058      	b.n	80050b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004ffe:	edd7 7a00 	vldr	s15, [r7]
 8005002:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800500a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800500e:	d801      	bhi.n	8005014 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005010:	2302      	movs	r3, #2
 8005012:	e04d      	b.n	80050b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005014:	edd7 7a00 	vldr	s15, [r7]
 8005018:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80050d8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800501c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005024:	d801      	bhi.n	800502a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8005026:	2303      	movs	r3, #3
 8005028:	e042      	b.n	80050b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800502a:	edd7 7a00 	vldr	s15, [r7]
 800502e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80050dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8005032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503a:	d801      	bhi.n	8005040 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800503c:	2304      	movs	r3, #4
 800503e:	e037      	b.n	80050b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005040:	edd7 7a00 	vldr	s15, [r7]
 8005044:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80050e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800504c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005050:	d801      	bhi.n	8005056 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005052:	2305      	movs	r3, #5
 8005054:	e02c      	b.n	80050b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005056:	edd7 7a00 	vldr	s15, [r7]
 800505a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80050e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800505e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005066:	d801      	bhi.n	800506c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005068:	2306      	movs	r3, #6
 800506a:	e021      	b.n	80050b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800506c:	edd7 7a00 	vldr	s15, [r7]
 8005070:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80050e8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005074:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507c:	d801      	bhi.n	8005082 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800507e:	2307      	movs	r3, #7
 8005080:	e016      	b.n	80050b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005082:	edd7 7a00 	vldr	s15, [r7]
 8005086:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80050ec <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800508a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005092:	d801      	bhi.n	8005098 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005094:	2308      	movs	r3, #8
 8005096:	e00b      	b.n	80050b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005098:	edd7 7a00 	vldr	s15, [r7]
 800509c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80050f0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80050a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a8:	d801      	bhi.n	80050ae <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80050aa:	2309      	movs	r3, #9
 80050ac:	e000      	b.n	80050b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80050ae:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80050b0:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
          :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	331c      	adds	r3, #28
 80050b6:	7bfa      	ldrb	r2, [r7, #15]
 80050b8:	4611      	mov	r1, r2
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fbb0 	bl	8005820 <ism330dhcx_gy_data_rate_set>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80050c6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ca:	e000      	b.n	80050ce <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	42500000 	.word	0x42500000
 80050dc:	42d00000 	.word	0x42d00000
 80050e0:	43500000 	.word	0x43500000
 80050e4:	43d08000 	.word	0x43d08000
 80050e8:	44504000 	.word	0x44504000
 80050ec:	44d06000 	.word	0x44d06000
 80050f0:	45505000 	.word	0x45505000

080050f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8005100:	edd7 7a00 	vldr	s15, [r7]
 8005104:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800510c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005110:	d801      	bhi.n	8005116 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8005112:	2301      	movs	r3, #1
 8005114:	e058      	b.n	80051c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005116:	edd7 7a00 	vldr	s15, [r7]
 800511a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800511e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005126:	d801      	bhi.n	800512c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005128:	2302      	movs	r3, #2
 800512a:	e04d      	b.n	80051c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800512c:	edd7 7a00 	vldr	s15, [r7]
 8005130:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80051dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513c:	d801      	bhi.n	8005142 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800513e:	2303      	movs	r3, #3
 8005140:	e042      	b.n	80051c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005142:	edd7 7a00 	vldr	s15, [r7]
 8005146:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80051e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800514a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800514e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005152:	d801      	bhi.n	8005158 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005154:	2304      	movs	r3, #4
 8005156:	e037      	b.n	80051c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005158:	edd7 7a00 	vldr	s15, [r7]
 800515c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80051e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005168:	d801      	bhi.n	800516e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800516a:	2305      	movs	r3, #5
 800516c:	e02c      	b.n	80051c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800516e:	edd7 7a00 	vldr	s15, [r7]
 8005172:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80051e8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800517a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517e:	d801      	bhi.n	8005184 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005180:	2306      	movs	r3, #6
 8005182:	e021      	b.n	80051c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005184:	edd7 7a00 	vldr	s15, [r7]
 8005188:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80051ec <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800518c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005194:	d801      	bhi.n	800519a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005196:	2307      	movs	r3, #7
 8005198:	e016      	b.n	80051c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800519a:	edd7 7a00 	vldr	s15, [r7]
 800519e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80051f0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80051a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051aa:	d801      	bhi.n	80051b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80051ac:	2308      	movs	r3, #8
 80051ae:	e00b      	b.n	80051c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80051b0:	edd7 7a00 	vldr	s15, [r7]
 80051b4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80051f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80051b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	d801      	bhi.n	80051c6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80051c2:	2309      	movs	r3, #9
 80051c4:	e000      	b.n	80051c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80051c6:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
                 :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	42500000 	.word	0x42500000
 80051e0:	42d00000 	.word	0x42d00000
 80051e4:	43500000 	.word	0x43500000
 80051e8:	43d08000 	.word	0x43d08000
 80051ec:	44504000 	.word	0x44504000
 80051f0:	44d06000 	.word	0x44d06000
 80051f4:	45505000 	.word	0x45505000

080051f8 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	607a      	str	r2, [r7, #4]
 8005202:	461a      	mov	r2, r3
 8005204:	460b      	mov	r3, r1
 8005206:	72fb      	strb	r3, [r7, #11]
 8005208:	4613      	mov	r3, r2
 800520a:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	695c      	ldr	r4, [r3, #20]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	7b1b      	ldrb	r3, [r3, #12]
 8005218:	b298      	uxth	r0, r3
 800521a:	7afb      	ldrb	r3, [r7, #11]
 800521c:	b299      	uxth	r1, r3
 800521e:	893b      	ldrh	r3, [r7, #8]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	47a0      	blx	r4
 8005224:	4603      	mov	r3, r0
}
 8005226:	4618      	mov	r0, r3
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	bd90      	pop	{r4, r7, pc}

0800522e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800522e:	b590      	push	{r4, r7, lr}
 8005230:	b087      	sub	sp, #28
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	461a      	mov	r2, r3
 800523a:	460b      	mov	r3, r1
 800523c:	72fb      	strb	r3, [r7, #11]
 800523e:	4613      	mov	r3, r2
 8005240:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	691c      	ldr	r4, [r3, #16]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	7b1b      	ldrb	r3, [r3, #12]
 800524e:	b298      	uxth	r0, r3
 8005250:	7afb      	ldrb	r3, [r7, #11]
 8005252:	b299      	uxth	r1, r3
 8005254:	893b      	ldrh	r3, [r7, #8]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	47a0      	blx	r4
 800525a:	4603      	mov	r3, r0
}
 800525c:	4618      	mov	r0, r3
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	bd90      	pop	{r4, r7, pc}

08005264 <ism330dhcx_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                            uint16_t len)
{
 8005264:	b590      	push	{r4, r7, lr}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	607a      	str	r2, [r7, #4]
 800526e:	461a      	mov	r2, r3
 8005270:	460b      	mov	r3, r1
 8005272:	72fb      	strb	r3, [r7, #11]
 8005274:	4613      	mov	r3, r2
 8005276:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	685c      	ldr	r4, [r3, #4]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6898      	ldr	r0, [r3, #8]
 8005280:	893b      	ldrh	r3, [r7, #8]
 8005282:	7af9      	ldrb	r1, [r7, #11]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	47a0      	blx	r4
 8005288:	6178      	str	r0, [r7, #20]
  return ret;
 800528a:	697b      	ldr	r3, [r7, #20]
}
 800528c:	4618      	mov	r0, r3
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	bd90      	pop	{r4, r7, pc}

08005294 <ism330dhcx_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                             uint16_t len)
{
 8005294:	b590      	push	{r4, r7, lr}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	607a      	str	r2, [r7, #4]
 800529e:	461a      	mov	r2, r3
 80052a0:	460b      	mov	r3, r1
 80052a2:	72fb      	strb	r3, [r7, #11]
 80052a4:	4613      	mov	r3, r2
 80052a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681c      	ldr	r4, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6898      	ldr	r0, [r3, #8]
 80052b0:	893b      	ldrh	r3, [r7, #8]
 80052b2:	7af9      	ldrb	r1, [r7, #11]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	47a0      	blx	r4
 80052b8:	6178      	str	r0, [r7, #20]
  return ret;
 80052ba:	697b      	ldr	r3, [r7, #20]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd90      	pop	{r4, r7, pc}

080052c4 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80052d0:	f107 0208 	add.w	r2, r7, #8
 80052d4:	2301      	movs	r3, #1
 80052d6:	2110      	movs	r1, #16
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7ff ffc3 	bl	8005264 <ism330dhcx_read_reg>
 80052de:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10f      	bne.n	8005306 <ism330dhcx_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	7a3b      	ldrb	r3, [r7, #8]
 80052f0:	f362 0383 	bfi	r3, r2, #2, #2
 80052f4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 80052f6:	f107 0208 	add.w	r2, r7, #8
 80052fa:	2301      	movs	r3, #1
 80052fc:	2110      	movs	r1, #16
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7ff ffc8 	bl	8005294 <ism330dhcx_write_reg>
 8005304:	60f8      	str	r0, [r7, #12]
                               (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 8005306:	68fb      	ldr	r3, [r7, #12]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800531a:	f107 0208 	add.w	r2, r7, #8
 800531e:	2301      	movs	r3, #1
 8005320:	2110      	movs	r1, #16
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff ff9e 	bl	8005264 <ism330dhcx_read_reg>
 8005328:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl){
 800532a:	7a3b      	ldrb	r3, [r7, #8]
 800532c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b03      	cmp	r3, #3
 8005334:	d81a      	bhi.n	800536c <ism330dhcx_xl_full_scale_get+0x5c>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <ism330dhcx_xl_full_scale_get+0x2c>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	0800534d 	.word	0x0800534d
 8005340:	08005355 	.word	0x08005355
 8005344:	0800535d 	.word	0x0800535d
 8005348:	08005365 	.word	0x08005365
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2200      	movs	r2, #0
 8005350:	701a      	strb	r2, [r3, #0]
      break;
 8005352:	e00f      	b.n	8005374 <ism330dhcx_xl_full_scale_get+0x64>
    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2201      	movs	r2, #1
 8005358:	701a      	strb	r2, [r3, #0]
      break;
 800535a:	e00b      	b.n	8005374 <ism330dhcx_xl_full_scale_get+0x64>
    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2202      	movs	r2, #2
 8005360:	701a      	strb	r2, [r3, #0]
      break;
 8005362:	e007      	b.n	8005374 <ism330dhcx_xl_full_scale_get+0x64>
    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	2203      	movs	r2, #3
 8005368:	701a      	strb	r2, [r3, #0]
      break;
 800536a:	e003      	b.n	8005374 <ism330dhcx_xl_full_scale_get+0x64>
    default:
      *val = ISM330DHCX_2g;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2200      	movs	r2, #0
 8005370:	701a      	strb	r2, [r3, #0]
      break;
 8005372:	bf00      	nop
  }
  return ret;
 8005374:	68fb      	ldr	r3, [r7, #12]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop

08005380 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	75fb      	strb	r3, [r7, #23]
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005390:	f107 030c 	add.w	r3, r7, #12
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fd79 	bl	8005e8e <ism330dhcx_fsm_enable_get>
 800539c:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f040 80c4 	bne.w	800552e <ism330dhcx_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80053a6:	7b3b      	ldrb	r3, [r7, #12]
 80053a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80053ac:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80053ae:	7b3b      	ldrb	r3, [r7, #12]
 80053b0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80053b4:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80053b6:	4313      	orrs	r3, r2
 80053b8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80053ba:	7b3b      	ldrb	r3, [r7, #12]
 80053bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80053c0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80053c2:	4313      	orrs	r3, r2
 80053c4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80053c6:	7b3b      	ldrb	r3, [r7, #12]
 80053c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80053cc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80053ce:	4313      	orrs	r3, r2
 80053d0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80053d2:	7b3b      	ldrb	r3, [r7, #12]
 80053d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80053d8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80053da:	4313      	orrs	r3, r2
 80053dc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80053de:	7b3b      	ldrb	r3, [r7, #12]
 80053e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80053e4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80053e6:	4313      	orrs	r3, r2
 80053e8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80053ea:	7b3b      	ldrb	r3, [r7, #12]
 80053ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80053f0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80053f2:	4313      	orrs	r3, r2
 80053f4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80053f6:	7b3b      	ldrb	r3, [r7, #12]
 80053f8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80053fc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80053fe:	4313      	orrs	r3, r2
 8005400:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005402:	7b7b      	ldrb	r3, [r7, #13]
 8005404:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005408:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 800540a:	4313      	orrs	r3, r2
 800540c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800540e:	7b7b      	ldrb	r3, [r7, #13]
 8005410:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005414:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005416:	4313      	orrs	r3, r2
 8005418:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800541a:	7b7b      	ldrb	r3, [r7, #13]
 800541c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005420:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8005422:	4313      	orrs	r3, r2
 8005424:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8005426:	7b7b      	ldrb	r3, [r7, #13]
 8005428:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800542c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800542e:	4313      	orrs	r3, r2
 8005430:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8005432:	7b7b      	ldrb	r3, [r7, #13]
 8005434:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005438:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 800543a:	4313      	orrs	r3, r2
 800543c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800543e:	7b7b      	ldrb	r3, [r7, #13]
 8005440:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005444:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8005446:	4313      	orrs	r3, r2
 8005448:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800544a:	7b7b      	ldrb	r3, [r7, #13]
 800544c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005450:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8005452:	4313      	orrs	r3, r2
 8005454:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 8005456:	7b7b      	ldrb	r3, [r7, #13]
 8005458:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800545c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800545e:	4313      	orrs	r3, r2
 8005460:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005462:	2b01      	cmp	r3, #1
 8005464:	d163      	bne.n	800552e <ism330dhcx_xl_data_rate_set+0x1ae>

      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8005466:	f107 030b 	add.w	r3, r7, #11
 800546a:	4619      	mov	r1, r3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fd3b 	bl	8005ee8 <ism330dhcx_fsm_data_rate_get>
 8005472:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d159      	bne.n	800552e <ism330dhcx_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 800547a:	7afb      	ldrb	r3, [r7, #11]
 800547c:	2b03      	cmp	r3, #3
 800547e:	d853      	bhi.n	8005528 <ism330dhcx_xl_data_rate_set+0x1a8>
 8005480:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <ism330dhcx_xl_data_rate_set+0x108>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	08005499 	.word	0x08005499
 800548c:	080054ab 	.word	0x080054ab
 8005490:	080054c9 	.word	0x080054c9
 8005494:	080054f3 	.word	0x080054f3
          case ISM330DHCX_ODR_FSM_12Hz5:

            if (val == ISM330DHCX_XL_ODR_OFF){
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d102      	bne.n	80054a4 <ism330dhcx_xl_data_rate_set+0x124>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 800549e:	2301      	movs	r3, #1
 80054a0:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 80054a2:	e045      	b.n	8005530 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80054a4:	78fb      	ldrb	r3, [r7, #3]
 80054a6:	75fb      	strb	r3, [r7, #23]
            break;
 80054a8:	e042      	b.n	8005530 <ism330dhcx_xl_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_26Hz:

            if (val == ISM330DHCX_XL_ODR_OFF){
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d102      	bne.n	80054b6 <ism330dhcx_xl_data_rate_set+0x136>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80054b0:	2302      	movs	r3, #2
 80054b2:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 80054b4:	e03c      	b.n	8005530 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5){
 80054b6:	78fb      	ldrb	r3, [r7, #3]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d102      	bne.n	80054c2 <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80054bc:	2302      	movs	r3, #2
 80054be:	75fb      	strb	r3, [r7, #23]
            break;
 80054c0:	e036      	b.n	8005530 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	75fb      	strb	r3, [r7, #23]
            break;
 80054c6:	e033      	b.n	8005530 <ism330dhcx_xl_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_52Hz:

            if (val == ISM330DHCX_XL_ODR_OFF){
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d102      	bne.n	80054d4 <ism330dhcx_xl_data_rate_set+0x154>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80054ce:	2303      	movs	r3, #3
 80054d0:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 80054d2:	e02d      	b.n	8005530 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5){
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d102      	bne.n	80054e0 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80054da:	2303      	movs	r3, #3
 80054dc:	75fb      	strb	r3, [r7, #23]
            break;
 80054de:	e027      	b.n	8005530 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_26Hz){
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d102      	bne.n	80054ec <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80054e6:	2303      	movs	r3, #3
 80054e8:	75fb      	strb	r3, [r7, #23]
            break;
 80054ea:	e021      	b.n	8005530 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	75fb      	strb	r3, [r7, #23]
            break;
 80054f0:	e01e      	b.n	8005530 <ism330dhcx_xl_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_104Hz:

            if (val == ISM330DHCX_XL_ODR_OFF){
 80054f2:	78fb      	ldrb	r3, [r7, #3]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d102      	bne.n	80054fe <ism330dhcx_xl_data_rate_set+0x17e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80054f8:	2304      	movs	r3, #4
 80054fa:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 80054fc:	e018      	b.n	8005530 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5){
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d102      	bne.n	800550a <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005504:	2304      	movs	r3, #4
 8005506:	75fb      	strb	r3, [r7, #23]
            break;
 8005508:	e012      	b.n	8005530 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_26Hz){
 800550a:	78fb      	ldrb	r3, [r7, #3]
 800550c:	2b02      	cmp	r3, #2
 800550e:	d102      	bne.n	8005516 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005510:	2304      	movs	r3, #4
 8005512:	75fb      	strb	r3, [r7, #23]
            break;
 8005514:	e00c      	b.n	8005530 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_52Hz){
 8005516:	78fb      	ldrb	r3, [r7, #3]
 8005518:	2b03      	cmp	r3, #3
 800551a:	d102      	bne.n	8005522 <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800551c:	2304      	movs	r3, #4
 800551e:	75fb      	strb	r3, [r7, #23]
            break;
 8005520:	e006      	b.n	8005530 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	75fb      	strb	r3, [r7, #23]
            break;
 8005526:	e003      	b.n	8005530 <ism330dhcx_xl_data_rate_set+0x1b0>
          default:
            odr_xl = val;
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	75fb      	strb	r3, [r7, #23]
            break;
 800552c:	e000      	b.n	8005530 <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 800552e:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8005530:	2300      	movs	r3, #0
 8005532:	72bb      	strb	r3, [r7, #10]
  if (ret == 0) {
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d16d      	bne.n	8005616 <ism330dhcx_xl_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 800553a:	f107 030a 	add.w	r3, r7, #10
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 fd19 	bl	8005f78 <ism330dhcx_mlc_get>
 8005546:	6138      	str	r0, [r7, #16]
    if ( mlc_enable == PROPERTY_ENABLE ){
 8005548:	7abb      	ldrb	r3, [r7, #10]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d163      	bne.n	8005616 <ism330dhcx_xl_data_rate_set+0x296>

      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800554e:	f107 0309 	add.w	r3, r7, #9
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fd39 	bl	8005fcc <ism330dhcx_mlc_data_rate_get>
 800555a:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d159      	bne.n	8005616 <ism330dhcx_xl_data_rate_set+0x296>
        switch (mlc_odr) {
 8005562:	7a7b      	ldrb	r3, [r7, #9]
 8005564:	2b03      	cmp	r3, #3
 8005566:	d853      	bhi.n	8005610 <ism330dhcx_xl_data_rate_set+0x290>
 8005568:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <ism330dhcx_xl_data_rate_set+0x1f0>)
 800556a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556e:	bf00      	nop
 8005570:	08005581 	.word	0x08005581
 8005574:	08005593 	.word	0x08005593
 8005578:	080055b1 	.word	0x080055b1
 800557c:	080055db 	.word	0x080055db
          case ISM330DHCX_ODR_PRGS_12Hz5:

            if (val == ISM330DHCX_XL_ODR_OFF){
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d102      	bne.n	800558c <ism330dhcx_xl_data_rate_set+0x20c>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8005586:	2301      	movs	r3, #1
 8005588:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 800558a:	e045      	b.n	8005618 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	75fb      	strb	r3, [r7, #23]
            break;
 8005590:	e042      	b.n	8005618 <ism330dhcx_xl_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF){
 8005592:	78fb      	ldrb	r3, [r7, #3]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <ism330dhcx_xl_data_rate_set+0x21e>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005598:	2302      	movs	r3, #2
 800559a:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 800559c:	e03c      	b.n	8005618 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5){
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d102      	bne.n	80055aa <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80055a4:	2302      	movs	r3, #2
 80055a6:	75fb      	strb	r3, [r7, #23]
            break;
 80055a8:	e036      	b.n	8005618 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80055aa:	78fb      	ldrb	r3, [r7, #3]
 80055ac:	75fb      	strb	r3, [r7, #23]
            break;
 80055ae:	e033      	b.n	8005618 <ism330dhcx_xl_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_52Hz:

            if (val == ISM330DHCX_XL_ODR_OFF){
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d102      	bne.n	80055bc <ism330dhcx_xl_data_rate_set+0x23c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80055b6:	2303      	movs	r3, #3
 80055b8:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 80055ba:	e02d      	b.n	8005618 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5){
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d102      	bne.n	80055c8 <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80055c2:	2303      	movs	r3, #3
 80055c4:	75fb      	strb	r3, [r7, #23]
            break;
 80055c6:	e027      	b.n	8005618 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_26Hz){
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d102      	bne.n	80055d4 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80055ce:	2303      	movs	r3, #3
 80055d0:	75fb      	strb	r3, [r7, #23]
            break;
 80055d2:	e021      	b.n	8005618 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	75fb      	strb	r3, [r7, #23]
            break;
 80055d8:	e01e      	b.n	8005618 <ism330dhcx_xl_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF){
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d102      	bne.n	80055e6 <ism330dhcx_xl_data_rate_set+0x266>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80055e0:	2304      	movs	r3, #4
 80055e2:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 80055e4:	e018      	b.n	8005618 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5){
 80055e6:	78fb      	ldrb	r3, [r7, #3]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d102      	bne.n	80055f2 <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80055ec:	2304      	movs	r3, #4
 80055ee:	75fb      	strb	r3, [r7, #23]
            break;
 80055f0:	e012      	b.n	8005618 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_26Hz){
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d102      	bne.n	80055fe <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80055f8:	2304      	movs	r3, #4
 80055fa:	75fb      	strb	r3, [r7, #23]
            break;
 80055fc:	e00c      	b.n	8005618 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_52Hz){
 80055fe:	78fb      	ldrb	r3, [r7, #3]
 8005600:	2b03      	cmp	r3, #3
 8005602:	d102      	bne.n	800560a <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005604:	2304      	movs	r3, #4
 8005606:	75fb      	strb	r3, [r7, #23]
            break;
 8005608:	e006      	b.n	8005618 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	75fb      	strb	r3, [r7, #23]
            break;
 800560e:	e003      	b.n	8005618 <ism330dhcx_xl_data_rate_set+0x298>
          default:
            odr_xl = val;
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	75fb      	strb	r3, [r7, #23]
            break;
 8005614:	e000      	b.n	8005618 <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 8005616:	bf00      	nop
    }
  }
  if(ret == 0){
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d107      	bne.n	800562e <ism330dhcx_xl_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800561e:	f107 0208 	add.w	r2, r7, #8
 8005622:	2301      	movs	r3, #1
 8005624:	2110      	movs	r1, #16
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff fe1c 	bl	8005264 <ism330dhcx_read_reg>
 800562c:	6138      	str	r0, [r7, #16]
                              (uint8_t*)&ctrl1_xl, 1);
  }
  if(ret == 0){
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10f      	bne.n	8005654 <ism330dhcx_xl_data_rate_set+0x2d4>
    ctrl1_xl.odr_xl= (uint8_t)odr_xl;
 8005634:	7dfb      	ldrb	r3, [r7, #23]
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	b2da      	uxtb	r2, r3
 800563c:	7a3b      	ldrb	r3, [r7, #8]
 800563e:	f362 1307 	bfi	r3, r2, #4, #4
 8005642:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005644:	f107 0208 	add.w	r2, r7, #8
 8005648:	2301      	movs	r3, #1
 800564a:	2110      	movs	r1, #16
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff fe21 	bl	8005294 <ism330dhcx_write_reg>
 8005652:	6138      	str	r0, [r7, #16]
                               (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 8005654:	693b      	ldr	r3, [r7, #16]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop

08005660 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   ism330dhcx_odr_xl_t *val)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800566a:	f107 0208 	add.w	r2, r7, #8
 800566e:	2301      	movs	r3, #1
 8005670:	2110      	movs	r1, #16
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fdf6 	bl	8005264 <ism330dhcx_read_reg>
 8005678:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl){
 800567a:	7a3b      	ldrb	r3, [r7, #8]
 800567c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b0b      	cmp	r3, #11
 8005684:	d84a      	bhi.n	800571c <ism330dhcx_xl_data_rate_get+0xbc>
 8005686:	a201      	add	r2, pc, #4	; (adr r2, 800568c <ism330dhcx_xl_data_rate_get+0x2c>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	080056bd 	.word	0x080056bd
 8005690:	080056c5 	.word	0x080056c5
 8005694:	080056cd 	.word	0x080056cd
 8005698:	080056d5 	.word	0x080056d5
 800569c:	080056dd 	.word	0x080056dd
 80056a0:	080056e5 	.word	0x080056e5
 80056a4:	080056ed 	.word	0x080056ed
 80056a8:	080056f5 	.word	0x080056f5
 80056ac:	080056fd 	.word	0x080056fd
 80056b0:	08005705 	.word	0x08005705
 80056b4:	0800570d 	.word	0x0800570d
 80056b8:	08005715 	.word	0x08005715
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2200      	movs	r2, #0
 80056c0:	701a      	strb	r2, [r3, #0]
      break;
 80056c2:	e02f      	b.n	8005724 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2201      	movs	r2, #1
 80056c8:	701a      	strb	r2, [r3, #0]
      break;
 80056ca:	e02b      	b.n	8005724 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2202      	movs	r2, #2
 80056d0:	701a      	strb	r2, [r3, #0]
      break;
 80056d2:	e027      	b.n	8005724 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2203      	movs	r2, #3
 80056d8:	701a      	strb	r2, [r3, #0]
      break;
 80056da:	e023      	b.n	8005724 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2204      	movs	r2, #4
 80056e0:	701a      	strb	r2, [r3, #0]
      break;
 80056e2:	e01f      	b.n	8005724 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2205      	movs	r2, #5
 80056e8:	701a      	strb	r2, [r3, #0]
      break;
 80056ea:	e01b      	b.n	8005724 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_417Hz:
      *val = ISM330DHCX_XL_ODR_417Hz;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2206      	movs	r2, #6
 80056f0:	701a      	strb	r2, [r3, #0]
      break;
 80056f2:	e017      	b.n	8005724 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	2207      	movs	r2, #7
 80056f8:	701a      	strb	r2, [r3, #0]
      break;
 80056fa:	e013      	b.n	8005724 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_1667Hz:
      *val = ISM330DHCX_XL_ODR_1667Hz;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2208      	movs	r2, #8
 8005700:	701a      	strb	r2, [r3, #0]
      break;
 8005702:	e00f      	b.n	8005724 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_3333Hz:
      *val = ISM330DHCX_XL_ODR_3333Hz;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2209      	movs	r2, #9
 8005708:	701a      	strb	r2, [r3, #0]
      break;
 800570a:	e00b      	b.n	8005724 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	220a      	movs	r2, #10
 8005710:	701a      	strb	r2, [r3, #0]
      break;
 8005712:	e007      	b.n	8005724 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_6Hz5:
      *val = ISM330DHCX_XL_ODR_6Hz5;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	220b      	movs	r2, #11
 8005718:	701a      	strb	r2, [r3, #0]
      break;
 800571a:	e003      	b.n	8005724 <ism330dhcx_xl_data_rate_get+0xc4>
    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
      break;
 8005722:	bf00      	nop
  }
  return ret;
 8005724:	68fb      	ldr	r3, [r7, #12]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop

08005730 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800573c:	f107 0208 	add.w	r2, r7, #8
 8005740:	2301      	movs	r3, #1
 8005742:	2111      	movs	r1, #17
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff fd8d 	bl	8005264 <ism330dhcx_read_reg>
 800574a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10f      	bne.n	8005772 <ism330dhcx_gy_full_scale_set+0x42>
    ctrl2_g.fs_g= (uint8_t)val;
 8005752:	78fb      	ldrb	r3, [r7, #3]
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	b2da      	uxtb	r2, r3
 800575a:	7a3b      	ldrb	r3, [r7, #8]
 800575c:	f362 0303 	bfi	r3, r2, #0, #4
 8005760:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005762:	f107 0208 	add.w	r2, r7, #8
 8005766:	2301      	movs	r3, #1
 8005768:	2111      	movs	r1, #17
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff fd92 	bl	8005294 <ism330dhcx_write_reg>
 8005770:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005772:	68fb      	ldr	r3, [r7, #12]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005786:	f107 0208 	add.w	r2, r7, #8
 800578a:	2301      	movs	r3, #1
 800578c:	2111      	movs	r1, #17
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff fd68 	bl	8005264 <ism330dhcx_read_reg>
 8005794:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g){
 8005796:	7a3b      	ldrb	r3, [r7, #8]
 8005798:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b0c      	cmp	r3, #12
 80057a0:	d834      	bhi.n	800580c <ism330dhcx_gy_full_scale_get+0x90>
 80057a2:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <ism330dhcx_gy_full_scale_get+0x2c>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057e5 	.word	0x080057e5
 80057ac:	08005805 	.word	0x08005805
 80057b0:	080057dd 	.word	0x080057dd
 80057b4:	0800580d 	.word	0x0800580d
 80057b8:	080057ed 	.word	0x080057ed
 80057bc:	0800580d 	.word	0x0800580d
 80057c0:	0800580d 	.word	0x0800580d
 80057c4:	0800580d 	.word	0x0800580d
 80057c8:	080057f5 	.word	0x080057f5
 80057cc:	0800580d 	.word	0x0800580d
 80057d0:	0800580d 	.word	0x0800580d
 80057d4:	0800580d 	.word	0x0800580d
 80057d8:	080057fd 	.word	0x080057fd
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2202      	movs	r2, #2
 80057e0:	701a      	strb	r2, [r3, #0]
      break;
 80057e2:	e017      	b.n	8005814 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2200      	movs	r2, #0
 80057e8:	701a      	strb	r2, [r3, #0]
      break;
 80057ea:	e013      	b.n	8005814 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2204      	movs	r2, #4
 80057f0:	701a      	strb	r2, [r3, #0]
      break;
 80057f2:	e00f      	b.n	8005814 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2208      	movs	r2, #8
 80057f8:	701a      	strb	r2, [r3, #0]
      break;
 80057fa:	e00b      	b.n	8005814 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	220c      	movs	r2, #12
 8005800:	701a      	strb	r2, [r3, #0]
      break;
 8005802:	e007      	b.n	8005814 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2201      	movs	r2, #1
 8005808:	701a      	strb	r2, [r3, #0]
      break;
 800580a:	e003      	b.n	8005814 <ism330dhcx_gy_full_scale_get+0x98>
    default:
      *val = ISM330DHCX_125dps;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2202      	movs	r2, #2
 8005810:	701a      	strb	r2, [r3, #0]
      break;
 8005812:	bf00      	nop
  }
  return ret;
 8005814:	68fb      	ldr	r3, [r7, #12]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop

08005820 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	75fb      	strb	r3, [r7, #23]
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005830:	f107 030c 	add.w	r3, r7, #12
 8005834:	4619      	mov	r1, r3
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fb29 	bl	8005e8e <ism330dhcx_fsm_enable_get>
 800583c:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	f040 80c4 	bne.w	80059ce <ism330dhcx_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005846:	7b3b      	ldrb	r3, [r7, #12]
 8005848:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800584c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800584e:	7b3b      	ldrb	r3, [r7, #12]
 8005850:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005854:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005856:	4313      	orrs	r3, r2
 8005858:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800585a:	7b3b      	ldrb	r3, [r7, #12]
 800585c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005860:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8005862:	4313      	orrs	r3, r2
 8005864:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8005866:	7b3b      	ldrb	r3, [r7, #12]
 8005868:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800586c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800586e:	4313      	orrs	r3, r2
 8005870:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8005872:	7b3b      	ldrb	r3, [r7, #12]
 8005874:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005878:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800587a:	4313      	orrs	r3, r2
 800587c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800587e:	7b3b      	ldrb	r3, [r7, #12]
 8005880:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005884:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8005886:	4313      	orrs	r3, r2
 8005888:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800588a:	7b3b      	ldrb	r3, [r7, #12]
 800588c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005890:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8005892:	4313      	orrs	r3, r2
 8005894:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8005896:	7b3b      	ldrb	r3, [r7, #12]
 8005898:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800589c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800589e:	4313      	orrs	r3, r2
 80058a0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80058a2:	7b7b      	ldrb	r3, [r7, #13]
 80058a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80058a8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80058aa:	4313      	orrs	r3, r2
 80058ac:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80058ae:	7b7b      	ldrb	r3, [r7, #13]
 80058b0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80058b4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80058b6:	4313      	orrs	r3, r2
 80058b8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80058ba:	7b7b      	ldrb	r3, [r7, #13]
 80058bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80058c0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80058c2:	4313      	orrs	r3, r2
 80058c4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80058c6:	7b7b      	ldrb	r3, [r7, #13]
 80058c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80058cc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80058ce:	4313      	orrs	r3, r2
 80058d0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80058d2:	7b7b      	ldrb	r3, [r7, #13]
 80058d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80058d8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80058da:	4313      	orrs	r3, r2
 80058dc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80058de:	7b7b      	ldrb	r3, [r7, #13]
 80058e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80058e4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80058e6:	4313      	orrs	r3, r2
 80058e8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80058ea:	7b7b      	ldrb	r3, [r7, #13]
 80058ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80058f0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80058f2:	4313      	orrs	r3, r2
 80058f4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 80058f6:	7b7b      	ldrb	r3, [r7, #13]
 80058f8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80058fc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80058fe:	4313      	orrs	r3, r2
 8005900:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005902:	2b01      	cmp	r3, #1
 8005904:	d163      	bne.n	80059ce <ism330dhcx_gy_data_rate_set+0x1ae>

      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8005906:	f107 030b 	add.w	r3, r7, #11
 800590a:	4619      	mov	r1, r3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 faeb 	bl	8005ee8 <ism330dhcx_fsm_data_rate_get>
 8005912:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d159      	bne.n	80059ce <ism330dhcx_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 800591a:	7afb      	ldrb	r3, [r7, #11]
 800591c:	2b03      	cmp	r3, #3
 800591e:	d853      	bhi.n	80059c8 <ism330dhcx_gy_data_rate_set+0x1a8>
 8005920:	a201      	add	r2, pc, #4	; (adr r2, 8005928 <ism330dhcx_gy_data_rate_set+0x108>)
 8005922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005926:	bf00      	nop
 8005928:	08005939 	.word	0x08005939
 800592c:	0800594b 	.word	0x0800594b
 8005930:	08005969 	.word	0x08005969
 8005934:	08005993 	.word	0x08005993
          case ISM330DHCX_ODR_FSM_12Hz5:

            if (val == ISM330DHCX_GY_ODR_OFF){
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d102      	bne.n	8005944 <ism330dhcx_gy_data_rate_set+0x124>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 800593e:	2301      	movs	r3, #1
 8005940:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 8005942:	e045      	b.n	80059d0 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	75fb      	strb	r3, [r7, #23]
            break;
 8005948:	e042      	b.n	80059d0 <ism330dhcx_gy_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_26Hz:

            if (val == ISM330DHCX_GY_ODR_OFF){
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <ism330dhcx_gy_data_rate_set+0x136>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005950:	2302      	movs	r3, #2
 8005952:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 8005954:	e03c      	b.n	80059d0 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5){
 8005956:	78fb      	ldrb	r3, [r7, #3]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d102      	bne.n	8005962 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 800595c:	2302      	movs	r3, #2
 800595e:	75fb      	strb	r3, [r7, #23]
            break;
 8005960:	e036      	b.n	80059d0 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	75fb      	strb	r3, [r7, #23]
            break;
 8005966:	e033      	b.n	80059d0 <ism330dhcx_gy_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_52Hz:

            if (val == ISM330DHCX_GY_ODR_OFF){
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d102      	bne.n	8005974 <ism330dhcx_gy_data_rate_set+0x154>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800596e:	2303      	movs	r3, #3
 8005970:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 8005972:	e02d      	b.n	80059d0 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5){
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d102      	bne.n	8005980 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800597a:	2303      	movs	r3, #3
 800597c:	75fb      	strb	r3, [r7, #23]
            break;
 800597e:	e027      	b.n	80059d0 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_26Hz){
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d102      	bne.n	800598c <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005986:	2303      	movs	r3, #3
 8005988:	75fb      	strb	r3, [r7, #23]
            break;
 800598a:	e021      	b.n	80059d0 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	75fb      	strb	r3, [r7, #23]
            break;
 8005990:	e01e      	b.n	80059d0 <ism330dhcx_gy_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_104Hz:

            if (val == ISM330DHCX_GY_ODR_OFF){
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <ism330dhcx_gy_data_rate_set+0x17e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005998:	2304      	movs	r3, #4
 800599a:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 800599c:	e018      	b.n	80059d0 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5){
 800599e:	78fb      	ldrb	r3, [r7, #3]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d102      	bne.n	80059aa <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80059a4:	2304      	movs	r3, #4
 80059a6:	75fb      	strb	r3, [r7, #23]
            break;
 80059a8:	e012      	b.n	80059d0 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_26Hz){
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d102      	bne.n	80059b6 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80059b0:	2304      	movs	r3, #4
 80059b2:	75fb      	strb	r3, [r7, #23]
            break;
 80059b4:	e00c      	b.n	80059d0 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_52Hz){
 80059b6:	78fb      	ldrb	r3, [r7, #3]
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d102      	bne.n	80059c2 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80059bc:	2304      	movs	r3, #4
 80059be:	75fb      	strb	r3, [r7, #23]
            break;
 80059c0:	e006      	b.n	80059d0 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	75fb      	strb	r3, [r7, #23]
            break;
 80059c6:	e003      	b.n	80059d0 <ism330dhcx_gy_data_rate_set+0x1b0>
          default:
            odr_gy = val;
 80059c8:	78fb      	ldrb	r3, [r7, #3]
 80059ca:	75fb      	strb	r3, [r7, #23]
            break;
 80059cc:	e000      	b.n	80059d0 <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 80059ce:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 80059d0:	2300      	movs	r3, #0
 80059d2:	72bb      	strb	r3, [r7, #10]
  if (ret == 0) {
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d16d      	bne.n	8005ab6 <ism330dhcx_gy_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 80059da:	f107 030a 	add.w	r3, r7, #10
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fac9 	bl	8005f78 <ism330dhcx_mlc_get>
 80059e6:	6138      	str	r0, [r7, #16]
    if ( mlc_enable == PROPERTY_ENABLE ){
 80059e8:	7abb      	ldrb	r3, [r7, #10]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d163      	bne.n	8005ab6 <ism330dhcx_gy_data_rate_set+0x296>

      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80059ee:	f107 0309 	add.w	r3, r7, #9
 80059f2:	4619      	mov	r1, r3
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fae9 	bl	8005fcc <ism330dhcx_mlc_data_rate_get>
 80059fa:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d159      	bne.n	8005ab6 <ism330dhcx_gy_data_rate_set+0x296>
        switch (mlc_odr) {
 8005a02:	7a7b      	ldrb	r3, [r7, #9]
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d853      	bhi.n	8005ab0 <ism330dhcx_gy_data_rate_set+0x290>
 8005a08:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <ism330dhcx_gy_data_rate_set+0x1f0>)
 8005a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0e:	bf00      	nop
 8005a10:	08005a21 	.word	0x08005a21
 8005a14:	08005a33 	.word	0x08005a33
 8005a18:	08005a51 	.word	0x08005a51
 8005a1c:	08005a7b 	.word	0x08005a7b
          case ISM330DHCX_ODR_PRGS_12Hz5:

            if (val == ISM330DHCX_GY_ODR_OFF){
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d102      	bne.n	8005a2c <ism330dhcx_gy_data_rate_set+0x20c>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8005a26:	2301      	movs	r3, #1
 8005a28:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 8005a2a:	e045      	b.n	8005ab8 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	75fb      	strb	r3, [r7, #23]
            break;
 8005a30:	e042      	b.n	8005ab8 <ism330dhcx_gy_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_26Hz:

            if (val == ISM330DHCX_GY_ODR_OFF){
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d102      	bne.n	8005a3e <ism330dhcx_gy_data_rate_set+0x21e>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 8005a3c:	e03c      	b.n	8005ab8 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5){
 8005a3e:	78fb      	ldrb	r3, [r7, #3]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d102      	bne.n	8005a4a <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005a44:	2302      	movs	r3, #2
 8005a46:	75fb      	strb	r3, [r7, #23]
            break;
 8005a48:	e036      	b.n	8005ab8 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	75fb      	strb	r3, [r7, #23]
            break;
 8005a4e:	e033      	b.n	8005ab8 <ism330dhcx_gy_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_52Hz:

            if (val == ISM330DHCX_GY_ODR_OFF){
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d102      	bne.n	8005a5c <ism330dhcx_gy_data_rate_set+0x23c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005a56:	2303      	movs	r3, #3
 8005a58:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 8005a5a:	e02d      	b.n	8005ab8 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5){
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d102      	bne.n	8005a68 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005a62:	2303      	movs	r3, #3
 8005a64:	75fb      	strb	r3, [r7, #23]
            break;
 8005a66:	e027      	b.n	8005ab8 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_26Hz){
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d102      	bne.n	8005a74 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	75fb      	strb	r3, [r7, #23]
            break;
 8005a72:	e021      	b.n	8005ab8 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	75fb      	strb	r3, [r7, #23]
            break;
 8005a78:	e01e      	b.n	8005ab8 <ism330dhcx_gy_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_104Hz:

            if (val == ISM330DHCX_GY_ODR_OFF){
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d102      	bne.n	8005a86 <ism330dhcx_gy_data_rate_set+0x266>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005a80:	2304      	movs	r3, #4
 8005a82:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 8005a84:	e018      	b.n	8005ab8 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5){
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d102      	bne.n	8005a92 <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005a8c:	2304      	movs	r3, #4
 8005a8e:	75fb      	strb	r3, [r7, #23]
            break;
 8005a90:	e012      	b.n	8005ab8 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_26Hz){
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d102      	bne.n	8005a9e <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005a98:	2304      	movs	r3, #4
 8005a9a:	75fb      	strb	r3, [r7, #23]
            break;
 8005a9c:	e00c      	b.n	8005ab8 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_52Hz){
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d102      	bne.n	8005aaa <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005aa4:	2304      	movs	r3, #4
 8005aa6:	75fb      	strb	r3, [r7, #23]
            break;
 8005aa8:	e006      	b.n	8005ab8 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	75fb      	strb	r3, [r7, #23]
            break;
 8005aae:	e003      	b.n	8005ab8 <ism330dhcx_gy_data_rate_set+0x298>
          default:
            odr_gy = val;
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	75fb      	strb	r3, [r7, #23]
            break;
 8005ab4:	e000      	b.n	8005ab8 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8005ab6:	bf00      	nop
    }
  }
  if (ret == 0) {
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d107      	bne.n	8005ace <ism330dhcx_gy_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005abe:	f107 0208 	add.w	r2, r7, #8
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	2111      	movs	r1, #17
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7ff fbcc 	bl	8005264 <ism330dhcx_read_reg>
 8005acc:	6138      	str	r0, [r7, #16]
  }
  if(ret == 0){
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10f      	bne.n	8005af4 <ism330dhcx_gy_data_rate_set+0x2d4>
   ctrl2_g.odr_g= (uint8_t)odr_gy;
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	7a3b      	ldrb	r3, [r7, #8]
 8005ade:	f362 1307 	bfi	r3, r2, #4, #4
 8005ae2:	723b      	strb	r3, [r7, #8]
   ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005ae4:	f107 0208 	add.w	r2, r7, #8
 8005ae8:	2301      	movs	r3, #1
 8005aea:	2111      	movs	r1, #17
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff fbd1 	bl	8005294 <ism330dhcx_write_reg>
 8005af2:	6138      	str	r0, [r7, #16]
  }
  return ret;
 8005af4:	693b      	ldr	r3, [r7, #16]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop

08005b00 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005b0a:	f107 0208 	add.w	r2, r7, #8
 8005b0e:	2301      	movs	r3, #1
 8005b10:	2111      	movs	r1, #17
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff fba6 	bl	8005264 <ism330dhcx_read_reg>
 8005b18:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g){
 8005b1a:	7a3b      	ldrb	r3, [r7, #8]
 8005b1c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b0a      	cmp	r3, #10
 8005b24:	d844      	bhi.n	8005bb0 <ism330dhcx_gy_data_rate_get+0xb0>
 8005b26:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <ism330dhcx_gy_data_rate_get+0x2c>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b59 	.word	0x08005b59
 8005b30:	08005b61 	.word	0x08005b61
 8005b34:	08005b69 	.word	0x08005b69
 8005b38:	08005b71 	.word	0x08005b71
 8005b3c:	08005b79 	.word	0x08005b79
 8005b40:	08005b81 	.word	0x08005b81
 8005b44:	08005b89 	.word	0x08005b89
 8005b48:	08005b91 	.word	0x08005b91
 8005b4c:	08005b99 	.word	0x08005b99
 8005b50:	08005ba1 	.word	0x08005ba1
 8005b54:	08005ba9 	.word	0x08005ba9
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	701a      	strb	r2, [r3, #0]
      break;
 8005b5e:	e02b      	b.n	8005bb8 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2201      	movs	r2, #1
 8005b64:	701a      	strb	r2, [r3, #0]
      break;
 8005b66:	e027      	b.n	8005bb8 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	701a      	strb	r2, [r3, #0]
      break;
 8005b6e:	e023      	b.n	8005bb8 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2203      	movs	r2, #3
 8005b74:	701a      	strb	r2, [r3, #0]
      break;
 8005b76:	e01f      	b.n	8005bb8 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	701a      	strb	r2, [r3, #0]
      break;
 8005b7e:	e01b      	b.n	8005bb8 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2205      	movs	r2, #5
 8005b84:	701a      	strb	r2, [r3, #0]
      break;
 8005b86:	e017      	b.n	8005bb8 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_417Hz:
      *val = ISM330DHCX_GY_ODR_417Hz;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2206      	movs	r2, #6
 8005b8c:	701a      	strb	r2, [r3, #0]
      break;
 8005b8e:	e013      	b.n	8005bb8 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2207      	movs	r2, #7
 8005b94:	701a      	strb	r2, [r3, #0]
      break;
 8005b96:	e00f      	b.n	8005bb8 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_1667Hz:
      *val = ISM330DHCX_GY_ODR_1667Hz;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2208      	movs	r2, #8
 8005b9c:	701a      	strb	r2, [r3, #0]
      break;
 8005b9e:	e00b      	b.n	8005bb8 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_3333Hz:
      *val = ISM330DHCX_GY_ODR_3333Hz;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2209      	movs	r2, #9
 8005ba4:	701a      	strb	r2, [r3, #0]
      break;
 8005ba6:	e007      	b.n	8005bb8 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	220a      	movs	r2, #10
 8005bac:	701a      	strb	r2, [r3, #0]
      break;
 8005bae:	e003      	b.n	8005bb8 <ism330dhcx_gy_data_rate_get+0xb8>
    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	701a      	strb	r2, [r3, #0]
      break;
 8005bb6:	bf00      	nop
  }
  return ret;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop

08005bc4 <ism330dhcx_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005bd0:	f107 0208 	add.w	r2, r7, #8
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	2112      	movs	r1, #18
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff fb43 	bl	8005264 <ism330dhcx_read_reg>
 8005bde:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10f      	bne.n	8005c06 <ism330dhcx_block_data_update_set+0x42>
    ctrl3_c.bdu= (uint8_t)val;
 8005be6:	78fb      	ldrb	r3, [r7, #3]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	7a3b      	ldrb	r3, [r7, #8]
 8005bf0:	f362 1386 	bfi	r3, r2, #6, #1
 8005bf4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005bf6:	f107 0208 	add.w	r2, r7, #8
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	2112      	movs	r1, #18
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff fb48 	bl	8005294 <ism330dhcx_write_reg>
 8005c04:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005c06:	68fb      	ldr	r3, [r7, #12]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <ism330dhcx_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8005c1a:	f107 020c 	add.w	r2, r7, #12
 8005c1e:	2306      	movs	r3, #6
 8005c20:	2122      	movs	r1, #34	; 0x22
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff fb1e 	bl	8005264 <ism330dhcx_read_reg>
 8005c28:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005c2a:	7b7b      	ldrb	r3, [r7, #13]
 8005c2c:	b21a      	sxth	r2, r3
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	021b      	lsls	r3, r3, #8
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	7b3b      	ldrb	r3, [r7, #12]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	4413      	add	r3, r2
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	b21a      	sxth	r2, r3
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005c4c:	7bfa      	ldrb	r2, [r7, #15]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	3302      	adds	r3, #2
 8005c52:	b212      	sxth	r2, r2
 8005c54:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	3302      	adds	r3, #2
 8005c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	021b      	lsls	r3, r3, #8
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	7bbb      	ldrb	r3, [r7, #14]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	4413      	add	r3, r2
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	3302      	adds	r3, #2
 8005c70:	b212      	sxth	r2, r2
 8005c72:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005c74:	7c7a      	ldrb	r2, [r7, #17]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	b212      	sxth	r2, r2
 8005c7c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	3304      	adds	r3, #4
 8005c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	021b      	lsls	r3, r3, #8
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	7c3b      	ldrb	r3, [r7, #16]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	4413      	add	r3, r2
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	3304      	adds	r3, #4
 8005c98:	b212      	sxth	r2, r2
 8005c9a:	801a      	strh	r2, [r3, #0]

  return ret;
 8005c9c:	697b      	ldr	r3, [r7, #20]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <ism330dhcx_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b086      	sub	sp, #24
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8005cb0:	f107 020c 	add.w	r2, r7, #12
 8005cb4:	2306      	movs	r3, #6
 8005cb6:	2128      	movs	r1, #40	; 0x28
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff fad3 	bl	8005264 <ism330dhcx_read_reg>
 8005cbe:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005cc0:	7b7b      	ldrb	r3, [r7, #13]
 8005cc2:	b21a      	sxth	r2, r3
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	7b3b      	ldrb	r3, [r7, #12]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	4413      	add	r3, r2
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	b21a      	sxth	r2, r3
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005ce2:	7bfa      	ldrb	r2, [r7, #15]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	3302      	adds	r3, #2
 8005ce8:	b212      	sxth	r2, r2
 8005cea:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	3302      	adds	r3, #2
 8005cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	021b      	lsls	r3, r3, #8
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	7bbb      	ldrb	r3, [r7, #14]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	4413      	add	r3, r2
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	3302      	adds	r3, #2
 8005d06:	b212      	sxth	r2, r2
 8005d08:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005d0a:	7c7a      	ldrb	r2, [r7, #17]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	b212      	sxth	r2, r2
 8005d12:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	3304      	adds	r3, #4
 8005d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	021b      	lsls	r3, r3, #8
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	7c3b      	ldrb	r3, [r7, #16]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	4413      	add	r3, r2
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	b212      	sxth	r2, r2
 8005d30:	801a      	strh	r2, [r3, #0]

  return ret;
 8005d32:	697b      	ldr	r3, [r7, #20]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8005d48:	f107 0208 	add.w	r2, r7, #8
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	2101      	movs	r1, #1
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff fa87 	bl	8005264 <ism330dhcx_read_reg>
 8005d56:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&func_cfg_access, 1);
  if(ret == 0){
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10f      	bne.n	8005d7e <ism330dhcx_mem_bank_set+0x42>
    func_cfg_access.reg_access= (uint8_t)val;
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	f003 0303 	and.w	r3, r3, #3
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	7a3b      	ldrb	r3, [r7, #8]
 8005d68:	f362 1387 	bfi	r3, r2, #6, #2
 8005d6c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8005d6e:	f107 0208 	add.w	r2, r7, #8
 8005d72:	2301      	movs	r3, #1
 8005d74:	2101      	movs	r1, #1
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff fa8c 	bl	8005294 <ism330dhcx_write_reg>
 8005d7c:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&func_cfg_access, 1);
  }
  return ret;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 8005d92:	2301      	movs	r3, #1
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	210f      	movs	r1, #15
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff fa63 	bl	8005264 <ism330dhcx_read_reg>
 8005d9e:	60f8      	str	r0, [r7, #12]
  return ret;
 8005da0:	68fb      	ldr	r3, [r7, #12]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	460b      	mov	r3, r1
 8005db4:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005db6:	f107 0208 	add.w	r2, r7, #8
 8005dba:	2301      	movs	r3, #1
 8005dbc:	2112      	movs	r1, #18
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7ff fa50 	bl	8005264 <ism330dhcx_read_reg>
 8005dc4:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10f      	bne.n	8005dec <ism330dhcx_reset_set+0x42>
    ctrl3_c.sw_reset= (uint8_t)val;
 8005dcc:	78fb      	ldrb	r3, [r7, #3]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	7a3b      	ldrb	r3, [r7, #8]
 8005dd6:	f362 0300 	bfi	r3, r2, #0, #1
 8005dda:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8005ddc:	f107 0208 	add.w	r2, r7, #8
 8005de0:	2301      	movs	r3, #1
 8005de2:	2112      	movs	r1, #18
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff fa55 	bl	8005294 <ism330dhcx_write_reg>
 8005dea:	60f8      	str	r0, [r7, #12]
                               (uint8_t*)&ctrl3_c, 1);
  }
  return ret;
 8005dec:	68fb      	ldr	r3, [r7, #12]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005e02:	f107 0208 	add.w	r2, r7, #8
 8005e06:	2301      	movs	r3, #1
 8005e08:	2112      	movs	r1, #18
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff fa2a 	bl	8005264 <ism330dhcx_read_reg>
 8005e10:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10f      	bne.n	8005e38 <ism330dhcx_auto_increment_set+0x42>
    ctrl3_c.if_inc= (uint8_t)val;
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	7a3b      	ldrb	r3, [r7, #8]
 8005e22:	f362 0382 	bfi	r3, r2, #2, #1
 8005e26:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005e28:	f107 0208 	add.w	r2, r7, #8
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	2112      	movs	r1, #18
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff fa2f 	bl	8005294 <ism330dhcx_write_reg>
 8005e36:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005e38:	68fb      	ldr	r3, [r7, #12]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                ism330dhcx_fifo_mode_t val)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8005e4e:	f107 0208 	add.w	r2, r7, #8
 8005e52:	2301      	movs	r3, #1
 8005e54:	210a      	movs	r1, #10
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff fa04 	bl	8005264 <ism330dhcx_read_reg>
 8005e5c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl4, 1);
  if(ret == 0){
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10f      	bne.n	8005e84 <ism330dhcx_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode= (uint8_t)val;
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	7a3b      	ldrb	r3, [r7, #8]
 8005e6e:	f362 0302 	bfi	r3, r2, #0, #3
 8005e72:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8005e74:	f107 0208 	add.w	r2, r7, #8
 8005e78:	2301      	movs	r3, #1
 8005e7a:	210a      	movs	r1, #10
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff fa09 	bl	8005294 <ism330dhcx_write_reg>
 8005e82:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl4, 1);
  }
  return ret;
 8005e84:	68fb      	ldr	r3, [r7, #12]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                 ism330dhcx_emb_fsm_enable_t *val)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005e98:	2102      	movs	r1, #2
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff ff4e 	bl	8005d3c <ism330dhcx_mem_bank_set>
 8005ea0:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <ism330dhcx_fsm_enable_get+0x28>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                             (uint8_t*)&val->fsm_enable_a, 1);
 8005ea8:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8005eaa:	2301      	movs	r3, #1
 8005eac:	2146      	movs	r1, #70	; 0x46
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff f9d8 	bl	8005264 <ism330dhcx_read_reg>
 8005eb4:	60f8      	str	r0, [r7, #12]
  }
  if(ret == 0){
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d107      	bne.n	8005ecc <ism330dhcx_fsm_enable_get+0x3e>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                             (uint8_t*)&val->fsm_enable_b, 1);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	2147      	movs	r1, #71	; 0x47
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff f9cd 	bl	8005264 <ism330dhcx_read_reg>
 8005eca:	60f8      	str	r0, [r7, #12]
  }
  if(ret == 0){
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d104      	bne.n	8005edc <ism330dhcx_fsm_enable_get+0x4e>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7ff ff31 	bl	8005d3c <ism330dhcx_mem_bank_set>
 8005eda:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005edc:	68fb      	ldr	r3, [r7, #12]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_fsm_odr_t *val)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005ef2:	2102      	movs	r1, #2
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff ff21 	bl	8005d3c <ism330dhcx_mem_bank_set>
 8005efa:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d107      	bne.n	8005f12 <ism330dhcx_fsm_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8005f02:	f107 0208 	add.w	r2, r7, #8
 8005f06:	2301      	movs	r3, #1
 8005f08:	215f      	movs	r1, #95	; 0x5f
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff f9aa 	bl	8005264 <ism330dhcx_read_reg>
 8005f10:	60f8      	str	r0, [r7, #12]
                             (uint8_t*)&emb_func_odr_cfg_b, 1);
  }
  if(ret == 0){
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d104      	bne.n	8005f22 <ism330dhcx_fsm_data_rate_get+0x3a>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005f18:	2100      	movs	r1, #0
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff ff0e 	bl	8005d3c <ism330dhcx_mem_bank_set>
 8005f20:	60f8      	str	r0, [r7, #12]
  }
  switch (emb_func_odr_cfg_b.fsm_odr){
 8005f22:	7a3b      	ldrb	r3, [r7, #8]
 8005f24:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d81a      	bhi.n	8005f64 <ism330dhcx_fsm_data_rate_get+0x7c>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <ism330dhcx_fsm_data_rate_get+0x4c>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005f4d 	.word	0x08005f4d
 8005f3c:	08005f55 	.word	0x08005f55
 8005f40:	08005f5d 	.word	0x08005f5d
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2200      	movs	r2, #0
 8005f48:	701a      	strb	r2, [r3, #0]
      break;
 8005f4a:	e00f      	b.n	8005f6c <ism330dhcx_fsm_data_rate_get+0x84>
    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	701a      	strb	r2, [r3, #0]
      break;
 8005f52:	e00b      	b.n	8005f6c <ism330dhcx_fsm_data_rate_get+0x84>
    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2202      	movs	r2, #2
 8005f58:	701a      	strb	r2, [r3, #0]
      break;
 8005f5a:	e007      	b.n	8005f6c <ism330dhcx_fsm_data_rate_get+0x84>
    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2203      	movs	r2, #3
 8005f60:	701a      	strb	r2, [r3, #0]
      break;
 8005f62:	e003      	b.n	8005f6c <ism330dhcx_fsm_data_rate_get+0x84>
    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]
      break;
 8005f6a:	bf00      	nop
  }
  return ret;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop

08005f78 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005f82:	2102      	movs	r1, #2
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff fed9 	bl	8005d3c <ism330dhcx_mem_bank_set>
 8005f8a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d107      	bne.n	8005fa2 <ism330dhcx_mlc_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 8005f92:	f107 0208 	add.w	r2, r7, #8
 8005f96:	2301      	movs	r3, #1
 8005f98:	2105      	movs	r1, #5
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7ff f962 	bl	8005264 <ism330dhcx_read_reg>
 8005fa0:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10b      	bne.n	8005fc0 <ism330dhcx_mlc_get+0x48>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005fa8:	2100      	movs	r1, #0
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff fec6 	bl	8005d3c <ism330dhcx_mem_bank_set>
 8005fb0:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 8005fb2:	7a3b      	ldrb	r3, [r7, #8]
 8005fb4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                   ism330dhcx_mlc_odr_t *val)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005fd6:	2102      	movs	r1, #2
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff feaf 	bl	8005d3c <ism330dhcx_mem_bank_set>
 8005fde:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d107      	bne.n	8005ff6 <ism330dhcx_mlc_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8005fe6:	f107 0208 	add.w	r2, r7, #8
 8005fea:	2301      	movs	r3, #1
 8005fec:	2160      	movs	r1, #96	; 0x60
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7ff f938 	bl	8005264 <ism330dhcx_read_reg>
 8005ff4:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d12a      	bne.n	8006052 <ism330dhcx_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 8005ffc:	7a3b      	ldrb	r3, [r7, #8]
 8005ffe:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b03      	cmp	r3, #3
 8006006:	d81b      	bhi.n	8006040 <ism330dhcx_mlc_data_rate_get+0x74>
 8006008:	a201      	add	r2, pc, #4	; (adr r2, 8006010 <ism330dhcx_mlc_data_rate_get+0x44>)
 800600a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600e:	bf00      	nop
 8006010:	08006021 	.word	0x08006021
 8006014:	08006029 	.word	0x08006029
 8006018:	08006031 	.word	0x08006031
 800601c:	08006039 	.word	0x08006039
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2200      	movs	r2, #0
 8006024:	701a      	strb	r2, [r3, #0]
        break;
 8006026:	e00f      	b.n	8006048 <ism330dhcx_mlc_data_rate_get+0x7c>
      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2201      	movs	r2, #1
 800602c:	701a      	strb	r2, [r3, #0]
        break;
 800602e:	e00b      	b.n	8006048 <ism330dhcx_mlc_data_rate_get+0x7c>
      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2202      	movs	r2, #2
 8006034:	701a      	strb	r2, [r3, #0]
        break;
 8006036:	e007      	b.n	8006048 <ism330dhcx_mlc_data_rate_get+0x7c>
      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2203      	movs	r2, #3
 800603c:	701a      	strb	r2, [r3, #0]
        break;
 800603e:	e003      	b.n	8006048 <ism330dhcx_mlc_data_rate_get+0x7c>
      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2200      	movs	r2, #0
 8006044:	701a      	strb	r2, [r3, #0]
        break;
 8006046:	bf00      	nop
    }
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8006048:	2100      	movs	r1, #0
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff fe76 	bl	8005d3c <ism330dhcx_mem_bank_set>
 8006050:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006052:	68fb      	ldr	r3, [r7, #12]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <BUILD_REPLY_HEADER>:
 * @brief  Build the reply header
 * @param  Msg the pointer to the message to be built
 * @retval None
 */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	795a      	ldrb	r2, [r3, #5]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2232      	movs	r2, #50	; 0x32
 8006070:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	799b      	ldrb	r3, [r3, #6]
 8006076:	3b80      	subs	r3, #128	; 0x80
 8006078:	b2da      	uxtb	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	719a      	strb	r2, [r3, #6]
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
	...

0800608c <INIT_STREAMING_HEADER>:
 * @brief  Initialize the streaming header
 * @param  Msg the pointer to the header to be initialized
 * @retval None
 */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 8006094:	4b09      	ldr	r3, [pc, #36]	; (80060bc <INIT_STREAMING_HEADER+0x30>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	b2da      	uxtb	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2232      	movs	r2, #50	; 0x32
 80060a2:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2208      	movs	r2, #8
 80060a8:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2203      	movs	r2, #3
 80060ae:	601a      	str	r2, [r3, #0]
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	200000a4 	.word	0x200000a4

080060c0 <HandleMSG>:
 */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SouceAddr | CMD | PAYLOAD
 *      1          1        1       N
 */
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b098      	sub	sp, #96	; 0x60
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  int ret = 1;
 80060c8:	2301      	movs	r3, #1
 80060ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i;
  char ps[64];
  uint32_t ps_len = 0;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]
  static uint32_t sensors_enabled_prev = 0;
  int32_t msg_offset;
  uint32_t msg_count;

  if (Msg->Len < 2U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d801      	bhi.n	80060dc <HandleMSG+0x1c>
  {
    return 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	e2e9      	b.n	80066b0 <HandleMSG+0x5f0>
  }

  if (Msg->Data[0] != DEV_ADDR)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	791b      	ldrb	r3, [r3, #4]
 80060e0:	2b32      	cmp	r3, #50	; 0x32
 80060e2:	d001      	beq.n	80060e8 <HandleMSG+0x28>
  {
    return 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	e2e3      	b.n	80066b0 <HandleMSG+0x5f0>
  }

  switch (Msg->Data[2])   /* CMD */
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	799b      	ldrb	r3, [r3, #6]
 80060ec:	2b7a      	cmp	r3, #122	; 0x7a
 80060ee:	f000 8098 	beq.w	8006222 <HandleMSG+0x162>
 80060f2:	2b7a      	cmp	r3, #122	; 0x7a
 80060f4:	f300 82d8 	bgt.w	80066a8 <HandleMSG+0x5e8>
 80060f8:	2b12      	cmp	r3, #18
 80060fa:	dc2d      	bgt.n	8006158 <HandleMSG+0x98>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f340 82d3 	ble.w	80066a8 <HandleMSG+0x5e8>
 8006102:	3b01      	subs	r3, #1
 8006104:	2b11      	cmp	r3, #17
 8006106:	f200 82cf 	bhi.w	80066a8 <HandleMSG+0x5e8>
 800610a:	a201      	add	r2, pc, #4	; (adr r2, 8006110 <HandleMSG+0x50>)
 800610c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006110:	0800615f 	.word	0x0800615f
 8006114:	08006199 	.word	0x08006199
 8006118:	080066a9 	.word	0x080066a9
 800611c:	080066a9 	.word	0x080066a9
 8006120:	080066a9 	.word	0x080066a9
 8006124:	080066a9 	.word	0x080066a9
 8006128:	0800666d 	.word	0x0800666d
 800612c:	08006251 	.word	0x08006251
 8006130:	080062c7 	.word	0x080062c7
 8006134:	080066a9 	.word	0x080066a9
 8006138:	080066a9 	.word	0x080066a9
 800613c:	08006305 	.word	0x08006305
 8006140:	080066a9 	.word	0x080066a9
 8006144:	0800617f 	.word	0x0800617f
 8006148:	080066a9 	.word	0x080066a9
 800614c:	0800634b 	.word	0x0800634b
 8006150:	080065bd 	.word	0x080065bd
 8006154:	0800660b 	.word	0x0800660b
 8006158:	2b76      	cmp	r3, #118	; 0x76
 800615a:	d04b      	beq.n	80061f4 <HandleMSG+0x134>
 800615c:	e2a4      	b.n	80066a8 <HandleMSG+0x5e8>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b03      	cmp	r3, #3
 8006164:	d001      	beq.n	800616a <HandleMSG+0xaa>
      {
        return 0;
 8006166:	2300      	movs	r3, #0
 8006168:	e2a2      	b.n	80066b0 <HandleMSG+0x5f0>
      }

      BUILD_REPLY_HEADER(Msg);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff ff76 	bl	800605c <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2203      	movs	r2, #3
 8006174:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fb fc24 	bl	80019c4 <UART_SendMsg>
      break;
 800617c:	e297      	b.n	80066ae <HandleMSG+0x5ee>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b03      	cmp	r3, #3
 8006184:	d001      	beq.n	800618a <HandleMSG+0xca>
      {
        return 0;
 8006186:	2300      	movs	r3, #0
 8006188:	e292      	b.n	80066b0 <HandleMSG+0x5f0>
      }

      BUILD_REPLY_HEADER(Msg);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff ff66 	bl	800605c <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2203      	movs	r2, #3
 8006194:	601a      	str	r2, [r3, #0]
      break;
 8006196:	e28a      	b.n	80066ae <HandleMSG+0x5ee>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b03      	cmp	r3, #3
 800619e:	d001      	beq.n	80061a4 <HandleMSG+0xe4>
      {
        return 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	e285      	b.n	80066b0 <HandleMSG+0x5f0>
      }

      BUILD_REPLY_HEADER(Msg);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff ff59 	bl	800605c <BUILD_REPLY_HEADER>

      Get_PresentationString(ps, &ps_len);
 80061aa:	f107 020c 	add.w	r2, r7, #12
 80061ae:	f107 0310 	add.w	r3, r7, #16
 80061b2:	4611      	mov	r1, r2
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fad7 	bl	8006768 <Get_PresentationString>

      i = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 80061be:	e00d      	b.n	80061dc <HandleMSG+0x11c>
      {
        Msg->Data[3U + i] = ps[i];
 80061c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061c2:	3303      	adds	r3, #3
 80061c4:	f107 0110 	add.w	r1, r7, #16
 80061c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061ca:	440a      	add	r2, r1
 80061cc:	7811      	ldrb	r1, [r2, #0]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	4413      	add	r3, r2
 80061d2:	460a      	mov	r2, r1
 80061d4:	711a      	strb	r2, [r3, #4]
        i++;
 80061d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061d8:	3301      	adds	r3, #1
 80061da:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d3ed      	bcc.n	80061c0 <HandleMSG+0x100>
      }

      Msg->Len = 3U + i;
 80061e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061e6:	1cda      	adds	r2, r3, #3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7fb fbe9 	bl	80019c4 <UART_SendMsg>
      break;
 80061f2:	e25c      	b.n	80066ae <HandleMSG+0x5ee>

    case CMD_ACCELERO_GYRO_Init:
      if (Msg->Len < 3U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d801      	bhi.n	8006200 <HandleMSG+0x140>
      {
        return 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	e257      	b.n	80066b0 <HandleMSG+0x5f0>
      }

      BUILD_REPLY_HEADER(Msg);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7ff ff2b 	bl	800605c <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	3307      	adds	r3, #7
 800620a:	2204      	movs	r2, #4
 800620c:	210f      	movs	r1, #15
 800620e:	4618      	mov	r0, r3
 8006210:	f7fc fa22 	bl	8002658 <Serialize_s32>
      Msg->Len = 3 + 4;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2207      	movs	r2, #7
 8006218:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fb fbd2 	bl	80019c4 <UART_SendMsg>
      break;
 8006220:	e245      	b.n	80066ae <HandleMSG+0x5ee>

    case CMD_MAGNETO_Init:
      if (Msg->Len < 3U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b02      	cmp	r3, #2
 8006228:	d801      	bhi.n	800622e <HandleMSG+0x16e>
      {
        return 0;
 800622a:	2300      	movs	r3, #0
 800622c:	e240      	b.n	80066b0 <HandleMSG+0x5f0>
      }

      BUILD_REPLY_HEADER(Msg);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7ff ff14 	bl	800605c <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3307      	adds	r3, #7
 8006238:	2204      	movs	r2, #4
 800623a:	2104      	movs	r1, #4
 800623c:	4618      	mov	r0, r3
 800623e:	f7fc fa0b 	bl	8002658 <Serialize_s32>
      Msg->Len = 3 + 4;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2207      	movs	r2, #7
 8006246:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7fb fbbb 	bl	80019c4 <UART_SendMsg>
      break;
 800624e:	e22e      	b.n	80066ae <HandleMSG+0x5ee>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b02      	cmp	r3, #2
 8006256:	d801      	bhi.n	800625c <HandleMSG+0x19c>
      {
        return 0;
 8006258:	2300      	movs	r3, #0
 800625a:	e229      	b.n	80066b0 <HandleMSG+0x5f0>
      }

      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3307      	adds	r3, #7
 8006260:	2104      	movs	r1, #4
 8006262:	4618      	mov	r0, r3
 8006264:	f7fc f9d2 	bl	800260c <Deserialize>
 8006268:	4603      	mov	r3, r0
 800626a:	4a3f      	ldr	r2, [pc, #252]	; (8006368 <HandleMSG+0x2a8>)
 800626c:	6013      	str	r3, [r2, #0]

      /* Start enabled sensors */
      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800626e:	4b3e      	ldr	r3, [pc, #248]	; (8006368 <HandleMSG+0x2a8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0310 	and.w	r3, r3, #16
 8006276:	2b10      	cmp	r3, #16
 8006278:	d101      	bne.n	800627e <HandleMSG+0x1be>
      {
        BSP_SENSOR_ACC_Enable();
 800627a:	f7fb fdcd 	bl	8001e18 <BSP_SENSOR_ACC_Enable>
      }

      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800627e:	4b3a      	ldr	r3, [pc, #232]	; (8006368 <HandleMSG+0x2a8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b20      	cmp	r3, #32
 8006288:	d101      	bne.n	800628e <HandleMSG+0x1ce>
      {
        BSP_SENSOR_GYR_Enable();
 800628a:	f7fb fdcd 	bl	8001e28 <BSP_SENSOR_GYR_Enable>
      }

      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800628e:	4b36      	ldr	r3, [pc, #216]	; (8006368 <HandleMSG+0x2a8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006296:	2b40      	cmp	r3, #64	; 0x40
 8006298:	d101      	bne.n	800629e <HandleMSG+0x1de>
      {
        BSP_SENSOR_MAG_Enable();
 800629a:	f7fb fdcd 	bl	8001e38 <BSP_SENSOR_MAG_Enable>
      }

      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 800629e:	4833      	ldr	r0, [pc, #204]	; (800636c <HandleMSG+0x2ac>)
 80062a0:	f006 fc20 	bl	800cae4 <HAL_TIM_Base_Start_IT>
      DataLoggerActive = 1;
 80062a4:	4b32      	ldr	r3, [pc, #200]	; (8006370 <HandleMSG+0x2b0>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]

      DataStreamingDest = Msg->Data[1];
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	795a      	ldrb	r2, [r3, #5]
 80062ae:	4b31      	ldr	r3, [pc, #196]	; (8006374 <HandleMSG+0x2b4>)
 80062b0:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fed2 	bl	800605c <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2203      	movs	r2, #3
 80062bc:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7fb fb80 	bl	80019c4 <UART_SendMsg>
      break;
 80062c4:	e1f3      	b.n	80066ae <HandleMSG+0x5ee>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d801      	bhi.n	80062d2 <HandleMSG+0x212>
      {
        return 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e1ee      	b.n	80066b0 <HandleMSG+0x5f0>
      }

      DataLoggerActive = 0;
 80062d2:	4b27      	ldr	r3, [pc, #156]	; (8006370 <HandleMSG+0x2b0>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	701a      	strb	r2, [r3, #0]
      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 80062d8:	4824      	ldr	r0, [pc, #144]	; (800636c <HandleMSG+0x2ac>)
 80062da:	f006 fca3 	bl	800cc24 <HAL_TIM_Base_Stop_IT>

      /* Disable all sensors */
      BSP_SENSOR_ACC_Disable();
 80062de:	f7fb fdb3 	bl	8001e48 <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 80062e2:	f7fb fdb9 	bl	8001e58 <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 80062e6:	f7fb fdbf 	bl	8001e68 <BSP_SENSOR_MAG_Disable>

      SensorsEnabled = 0;
 80062ea:	4b1f      	ldr	r3, [pc, #124]	; (8006368 <HandleMSG+0x2a8>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	601a      	str	r2, [r3, #0]
      UseOfflineData = 0;
 80062f0:	4b21      	ldr	r3, [pc, #132]	; (8006378 <HandleMSG+0x2b8>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	701a      	strb	r2, [r3, #0]

      BUILD_REPLY_HEADER(Msg);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff feb0 	bl	800605c <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7fb fb61 	bl	80019c4 <UART_SendMsg>
      break;
 8006302:	e1d4      	b.n	80066ae <HandleMSG+0x5ee>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b02      	cmp	r3, #2
 800630a:	d801      	bhi.n	8006310 <HandleMSG+0x250>
      {
        return 0;
 800630c:	2300      	movs	r3, #0
 800630e:	e1cf      	b.n	80066b0 <HandleMSG+0x5f0>
      }

      BUILD_REPLY_HEADER(Msg);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff fea3 	bl	800605c <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2203      	movs	r2, #3
 800631a:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	79d8      	ldrb	r0, [r3, #7]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	7a19      	ldrb	r1, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	7a5b      	ldrb	r3, [r3, #9]
 8006328:	461a      	mov	r2, r3
 800632a:	f000 f9f3 	bl	8006714 <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	7a98      	ldrb	r0, [r3, #10]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	7ad9      	ldrb	r1, [r3, #11]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	7b1a      	ldrb	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	7b5b      	ldrb	r3, [r3, #13]
 800633e:	f000 f9bf 	bl	80066c0 <RTC_DateRegulate>
      UART_SendMsg(Msg);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fb fb3e 	bl	80019c4 <UART_SendMsg>
      break;
 8006348:	e1b1      	b.n	80066ae <HandleMSG+0x5ee>

    case CMD_Offline_Data:
      if (Msg->Len < 55U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b36      	cmp	r3, #54	; 0x36
 8006350:	d801      	bhi.n	8006356 <HandleMSG+0x296>
      {
        return 0;
 8006352:	2300      	movs	r3, #0
 8006354:	e1ac      	b.n	80066b0 <HandleMSG+0x5f0>
      }

      msg_offset = 4;
 8006356:	2304      	movs	r3, #4
 8006358:	657b      	str	r3, [r7, #84]	; 0x54
      msg_count = (uint32_t)Msg->Data[3];
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	79db      	ldrb	r3, [r3, #7]
 800635e:	653b      	str	r3, [r7, #80]	; 0x50

      for (i = 0; i < msg_count; i++)
 8006360:	2300      	movs	r3, #0
 8006362:	65bb      	str	r3, [r7, #88]	; 0x58
 8006364:	e11b      	b.n	800659e <HandleMSG+0x4de>
 8006366:	bf00      	nop
 8006368:	20000584 	.word	0x20000584
 800636c:	200023b8 	.word	0x200023b8
 8006370:	20000581 	.word	0x20000581
 8006374:	200000a4 	.word	0x200000a4
 8006378:	20000589 	.word	0x20000589
      {
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 800637c:	4ba6      	ldr	r3, [pc, #664]	; (8006618 <HandleMSG+0x558>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2234      	movs	r2, #52	; 0x34
 8006382:	fb02 f303 	mul.w	r3, r2, r3
 8006386:	4aa5      	ldr	r2, [pc, #660]	; (800661c <HandleMSG+0x55c>)
 8006388:	4413      	add	r3, r2
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800638e:	440a      	add	r2, r1
 8006390:	3204      	adds	r2, #4
 8006392:	7812      	ldrb	r2, [r2, #0]
 8006394:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 8006396:	4ba0      	ldr	r3, [pc, #640]	; (8006618 <HandleMSG+0x558>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2234      	movs	r2, #52	; 0x34
 800639c:	fb02 f303 	mul.w	r3, r2, r3
 80063a0:	4a9e      	ldr	r2, [pc, #632]	; (800661c <HandleMSG+0x55c>)
 80063a2:	4413      	add	r3, r2
 80063a4:	3301      	adds	r3, #1
 80063a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063a8:	3201      	adds	r2, #1
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	440a      	add	r2, r1
 80063ae:	3204      	adds	r2, #4
 80063b0:	7812      	ldrb	r2, [r2, #0]
 80063b2:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 80063b4:	4b98      	ldr	r3, [pc, #608]	; (8006618 <HandleMSG+0x558>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2234      	movs	r2, #52	; 0x34
 80063ba:	fb02 f303 	mul.w	r3, r2, r3
 80063be:	4a97      	ldr	r2, [pc, #604]	; (800661c <HandleMSG+0x55c>)
 80063c0:	4413      	add	r3, r2
 80063c2:	3302      	adds	r3, #2
 80063c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063c6:	3202      	adds	r2, #2
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	440a      	add	r2, r1
 80063cc:	3204      	adds	r2, #4
 80063ce:	7812      	ldrb	r2, [r2, #0]
 80063d0:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 80063d2:	4b91      	ldr	r3, [pc, #580]	; (8006618 <HandleMSG+0x558>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2234      	movs	r2, #52	; 0x34
 80063d8:	fb02 f303 	mul.w	r3, r2, r3
 80063dc:	4a8f      	ldr	r2, [pc, #572]	; (800661c <HandleMSG+0x55c>)
 80063de:	4413      	add	r3, r2
 80063e0:	3303      	adds	r3, #3
 80063e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063e4:	3203      	adds	r2, #3
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	440a      	add	r2, r1
 80063ea:	3204      	adds	r2, #4
 80063ec:	7812      	ldrb	r2, [r2, #0]
 80063ee:	701a      	strb	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 80063f0:	4b89      	ldr	r3, [pc, #548]	; (8006618 <HandleMSG+0x558>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2234      	movs	r2, #52	; 0x34
 80063f6:	fb02 f303 	mul.w	r3, r2, r3
 80063fa:	4a88      	ldr	r2, [pc, #544]	; (800661c <HandleMSG+0x55c>)
 80063fc:	4413      	add	r3, r2
 80063fe:	3304      	adds	r3, #4
 8006400:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006402:	3204      	adds	r2, #4
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	440a      	add	r2, r1
 8006408:	3204      	adds	r2, #4
 800640a:	6812      	ldr	r2, [r2, #0]
 800640c:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 800640e:	4b82      	ldr	r3, [pc, #520]	; (8006618 <HandleMSG+0x558>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2234      	movs	r2, #52	; 0x34
 8006414:	fb02 f303 	mul.w	r3, r2, r3
 8006418:	3308      	adds	r3, #8
 800641a:	4a80      	ldr	r2, [pc, #512]	; (800661c <HandleMSG+0x55c>)
 800641c:	4413      	add	r3, r2
 800641e:	3304      	adds	r3, #4
 8006420:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006422:	3208      	adds	r2, #8
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	440a      	add	r2, r1
 8006428:	3204      	adds	r2, #4
 800642a:	6812      	ldr	r2, [r2, #0]
 800642c:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 800642e:	4b7a      	ldr	r3, [pc, #488]	; (8006618 <HandleMSG+0x558>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2234      	movs	r2, #52	; 0x34
 8006434:	fb02 f303 	mul.w	r3, r2, r3
 8006438:	3308      	adds	r3, #8
 800643a:	4a78      	ldr	r2, [pc, #480]	; (800661c <HandleMSG+0x55c>)
 800643c:	4413      	add	r3, r2
 800643e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006440:	320c      	adds	r2, #12
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	440a      	add	r2, r1
 8006446:	3204      	adds	r2, #4
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 800644c:	4b72      	ldr	r3, [pc, #456]	; (8006618 <HandleMSG+0x558>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2234      	movs	r2, #52	; 0x34
 8006452:	fb02 f303 	mul.w	r3, r2, r3
 8006456:	3310      	adds	r3, #16
 8006458:	4a70      	ldr	r2, [pc, #448]	; (800661c <HandleMSG+0x55c>)
 800645a:	4413      	add	r3, r2
 800645c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800645e:	3210      	adds	r2, #16
 8006460:	6879      	ldr	r1, [r7, #4]
 8006462:	440a      	add	r2, r1
 8006464:	3204      	adds	r2, #4
 8006466:	6812      	ldr	r2, [r2, #0]
 8006468:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 800646a:	4b6b      	ldr	r3, [pc, #428]	; (8006618 <HandleMSG+0x558>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2234      	movs	r2, #52	; 0x34
 8006470:	fb02 f303 	mul.w	r3, r2, r3
 8006474:	3310      	adds	r3, #16
 8006476:	4a69      	ldr	r2, [pc, #420]	; (800661c <HandleMSG+0x55c>)
 8006478:	4413      	add	r3, r2
 800647a:	3304      	adds	r3, #4
 800647c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800647e:	3214      	adds	r2, #20
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	440a      	add	r2, r1
 8006484:	3204      	adds	r2, #4
 8006486:	6812      	ldr	r2, [r2, #0]
 8006488:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 800648a:	4b63      	ldr	r3, [pc, #396]	; (8006618 <HandleMSG+0x558>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2234      	movs	r2, #52	; 0x34
 8006490:	fb02 f303 	mul.w	r3, r2, r3
 8006494:	3318      	adds	r3, #24
 8006496:	4a61      	ldr	r2, [pc, #388]	; (800661c <HandleMSG+0x55c>)
 8006498:	4413      	add	r3, r2
 800649a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800649c:	3218      	adds	r2, #24
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	440a      	add	r2, r1
 80064a2:	3204      	adds	r2, #4
 80064a4:	6812      	ldr	r2, [r2, #0]
 80064a6:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 80064a8:	4b5b      	ldr	r3, [pc, #364]	; (8006618 <HandleMSG+0x558>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2234      	movs	r2, #52	; 0x34
 80064ae:	fb02 f303 	mul.w	r3, r2, r3
 80064b2:	3318      	adds	r3, #24
 80064b4:	4a59      	ldr	r2, [pc, #356]	; (800661c <HandleMSG+0x55c>)
 80064b6:	4413      	add	r3, r2
 80064b8:	3304      	adds	r3, #4
 80064ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064bc:	321c      	adds	r2, #28
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	440a      	add	r2, r1
 80064c2:	3204      	adds	r2, #4
 80064c4:	6812      	ldr	r2, [r2, #0]
 80064c6:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 80064c8:	4b53      	ldr	r3, [pc, #332]	; (8006618 <HandleMSG+0x558>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2234      	movs	r2, #52	; 0x34
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	3320      	adds	r3, #32
 80064d4:	4a51      	ldr	r2, [pc, #324]	; (800661c <HandleMSG+0x55c>)
 80064d6:	4413      	add	r3, r2
 80064d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064da:	3220      	adds	r2, #32
 80064dc:	6879      	ldr	r1, [r7, #4]
 80064de:	440a      	add	r2, r1
 80064e0:	3204      	adds	r2, #4
 80064e2:	6812      	ldr	r2, [r2, #0]
 80064e4:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 80064e6:	4b4c      	ldr	r3, [pc, #304]	; (8006618 <HandleMSG+0x558>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2234      	movs	r2, #52	; 0x34
 80064ec:	fb02 f303 	mul.w	r3, r2, r3
 80064f0:	3320      	adds	r3, #32
 80064f2:	4a4a      	ldr	r2, [pc, #296]	; (800661c <HandleMSG+0x55c>)
 80064f4:	4413      	add	r3, r2
 80064f6:	3304      	adds	r3, #4
 80064f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064fa:	3224      	adds	r2, #36	; 0x24
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	440a      	add	r2, r1
 8006500:	3204      	adds	r2, #4
 8006502:	6812      	ldr	r2, [r2, #0]
 8006504:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 8006506:	4b44      	ldr	r3, [pc, #272]	; (8006618 <HandleMSG+0x558>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2234      	movs	r2, #52	; 0x34
 800650c:	fb02 f303 	mul.w	r3, r2, r3
 8006510:	3328      	adds	r3, #40	; 0x28
 8006512:	4a42      	ldr	r2, [pc, #264]	; (800661c <HandleMSG+0x55c>)
 8006514:	4413      	add	r3, r2
 8006516:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006518:	3228      	adds	r2, #40	; 0x28
 800651a:	6879      	ldr	r1, [r7, #4]
 800651c:	440a      	add	r2, r1
 800651e:	3204      	adds	r2, #4
 8006520:	6812      	ldr	r2, [r2, #0]
 8006522:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 8006524:	4b3c      	ldr	r3, [pc, #240]	; (8006618 <HandleMSG+0x558>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2234      	movs	r2, #52	; 0x34
 800652a:	fb02 f303 	mul.w	r3, r2, r3
 800652e:	3328      	adds	r3, #40	; 0x28
 8006530:	4a3a      	ldr	r2, [pc, #232]	; (800661c <HandleMSG+0x55c>)
 8006532:	4413      	add	r3, r2
 8006534:	3304      	adds	r3, #4
 8006536:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006538:	322c      	adds	r2, #44	; 0x2c
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	440a      	add	r2, r1
 800653e:	3204      	adds	r2, #4
 8006540:	6812      	ldr	r2, [r2, #0]
 8006542:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 8006544:	4b34      	ldr	r3, [pc, #208]	; (8006618 <HandleMSG+0x558>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2234      	movs	r2, #52	; 0x34
 800654a:	fb02 f303 	mul.w	r3, r2, r3
 800654e:	3330      	adds	r3, #48	; 0x30
 8006550:	4a32      	ldr	r2, [pc, #200]	; (800661c <HandleMSG+0x55c>)
 8006552:	4413      	add	r3, r2
 8006554:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006556:	3230      	adds	r2, #48	; 0x30
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	440a      	add	r2, r1
 800655c:	3204      	adds	r2, #4
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	601a      	str	r2, [r3, #0]

        msg_offset += 52;
 8006562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006564:	3334      	adds	r3, #52	; 0x34
 8006566:	657b      	str	r3, [r7, #84]	; 0x54

        OfflineDataCount++;
 8006568:	4b2d      	ldr	r3, [pc, #180]	; (8006620 <HandleMSG+0x560>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3301      	adds	r3, #1
 800656e:	4a2c      	ldr	r2, [pc, #176]	; (8006620 <HandleMSG+0x560>)
 8006570:	6013      	str	r3, [r2, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 8006572:	4b2b      	ldr	r3, [pc, #172]	; (8006620 <HandleMSG+0x560>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b08      	cmp	r3, #8
 8006578:	dd02      	ble.n	8006580 <HandleMSG+0x4c0>
        {
          OfflineDataCount = OFFLINE_DATA_SIZE;
 800657a:	4b29      	ldr	r3, [pc, #164]	; (8006620 <HandleMSG+0x560>)
 800657c:	2208      	movs	r2, #8
 800657e:	601a      	str	r2, [r3, #0]
        }

        OfflineDataWriteIndex++;
 8006580:	4b25      	ldr	r3, [pc, #148]	; (8006618 <HandleMSG+0x558>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3301      	adds	r3, #1
 8006586:	4a24      	ldr	r2, [pc, #144]	; (8006618 <HandleMSG+0x558>)
 8006588:	6013      	str	r3, [r2, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 800658a:	4b23      	ldr	r3, [pc, #140]	; (8006618 <HandleMSG+0x558>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b07      	cmp	r3, #7
 8006590:	dd02      	ble.n	8006598 <HandleMSG+0x4d8>
        {
          OfflineDataWriteIndex = 0;
 8006592:	4b21      	ldr	r3, [pc, #132]	; (8006618 <HandleMSG+0x558>)
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]
      for (i = 0; i < msg_count; i++)
 8006598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800659a:	3301      	adds	r3, #1
 800659c:	65bb      	str	r3, [r7, #88]	; 0x58
 800659e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065a2:	429a      	cmp	r2, r3
 80065a4:	f4ff aeea 	bcc.w	800637c <HandleMSG+0x2bc>
        }
      }

      SensorReadRequest = 1;
 80065a8:	4b1e      	ldr	r3, [pc, #120]	; (8006624 <HandleMSG+0x564>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	701a      	strb	r2, [r3, #0]

      /* Mark Msg as read */
      BUILD_REPLY_HEADER(Msg);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7ff fd54 	bl	800605c <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2203      	movs	r2, #3
 80065b8:	601a      	str	r2, [r3, #0]
      break;
 80065ba:	e078      	b.n	80066ae <HandleMSG+0x5ee>

    case CMD_Use_Offline_Data:
      if (Msg->Len < 4U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d801      	bhi.n	80065c8 <HandleMSG+0x508>
      {
        return 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	e073      	b.n	80066b0 <HandleMSG+0x5f0>
      }

      if (Msg->Data[3] == 1U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	79db      	ldrb	r3, [r3, #7]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d10e      	bne.n	80065ee <HandleMSG+0x52e>
      {
        UseOfflineData = 1U;
 80065d0:	4b15      	ldr	r3, [pc, #84]	; (8006628 <HandleMSG+0x568>)
 80065d2:	2201      	movs	r2, #1
 80065d4:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 80065d6:	4b15      	ldr	r3, [pc, #84]	; (800662c <HandleMSG+0x56c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a15      	ldr	r2, [pc, #84]	; (8006630 <HandleMSG+0x570>)
 80065dc:	6013      	str	r3, [r2, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 80065de:	4b13      	ldr	r3, [pc, #76]	; (800662c <HandleMSG+0x56c>)
 80065e0:	f04f 32ff 	mov.w	r2, #4294967295
 80065e4:	601a      	str	r2, [r3, #0]
        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 80065e6:	4813      	ldr	r0, [pc, #76]	; (8006634 <HandleMSG+0x574>)
 80065e8:	f006 fb1c 	bl	800cc24 <HAL_TIM_Base_Stop_IT>
 80065ec:	e006      	b.n	80065fc <HandleMSG+0x53c>
      }
      else
      {
        UseOfflineData = 0U;
 80065ee:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <HandleMSG+0x568>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 80065f4:	4b0e      	ldr	r3, [pc, #56]	; (8006630 <HandleMSG+0x570>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a0c      	ldr	r2, [pc, #48]	; (800662c <HandleMSG+0x56c>)
 80065fa:	6013      	str	r3, [r2, #0]
      }

      BUILD_REPLY_HEADER(Msg);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff fd2d 	bl	800605c <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7fb f9de 	bl	80019c4 <UART_SendMsg>
      break;
 8006608:	e051      	b.n	80066ae <HandleMSG+0x5ee>

    case CMD_Get_App_Info:
      if (Msg->Len < 3U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b02      	cmp	r3, #2
 8006610:	d812      	bhi.n	8006638 <HandleMSG+0x578>
      {
        return 0;
 8006612:	2300      	movs	r3, #0
 8006614:	e04c      	b.n	80066b0 <HandleMSG+0x5f0>
 8006616:	bf00      	nop
 8006618:	20000590 	.word	0x20000590
 800661c:	20001e40 	.word	0x20001e40
 8006620:	20000594 	.word	0x20000594
 8006624:	20000588 	.word	0x20000588
 8006628:	20000589 	.word	0x20000589
 800662c:	20000584 	.word	0x20000584
 8006630:	20001e34 	.word	0x20001e34
 8006634:	200023b8 	.word	0x200023b8
      }

      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3307      	adds	r3, #7
 800663c:	4a1e      	ldr	r2, [pc, #120]	; (80066b8 <HandleMSG+0x5f8>)
 800663e:	6812      	ldr	r2, [r2, #0]
 8006640:	4611      	mov	r1, r2
 8006642:	2204      	movs	r2, #4
 8006644:	4618      	mov	r0, r3
 8006646:	f7fc f807 	bl	8002658 <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	330b      	adds	r3, #11
 800664e:	2201      	movs	r2, #1
 8006650:	2130      	movs	r1, #48	; 0x30
 8006652:	4618      	mov	r0, r3
 8006654:	f7fc f800 	bl	8002658 <Serialize_s32>

      BUILD_REPLY_HEADER(Msg);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff fcff 	bl	800605c <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2208      	movs	r2, #8
 8006662:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7fb f9ad 	bl	80019c4 <UART_SendMsg>
      break;
 800666a:	e020      	b.n	80066ae <HandleMSG+0x5ee>

    case CMD_ChangeSF:
      if (Msg->Len < 3U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b02      	cmp	r3, #2
 8006672:	d801      	bhi.n	8006678 <HandleMSG+0x5b8>
      {
        return 0;
 8006674:	2300      	movs	r3, #0
 8006676:	e01b      	b.n	80066b0 <HandleMSG+0x5f0>
      }

      Enabled6X = Msg->Data[3];
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	79da      	ldrb	r2, [r3, #7]
 800667c:	4b0f      	ldr	r3, [pc, #60]	; (80066bc <HandleMSG+0x5fc>)
 800667e:	701a      	strb	r2, [r3, #0]

      if (Enabled6X == 1U)
 8006680:	4b0e      	ldr	r3, [pc, #56]	; (80066bc <HandleMSG+0x5fc>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d104      	bne.n	8006692 <HandleMSG+0x5d2>
      {
        MotionFX_manager_stop_9X();
 8006688:	f7fb fde8 	bl	800225c <MotionFX_manager_stop_9X>
        MotionFX_manager_start_6X();
 800668c:	f7fb fdc8 	bl	8002220 <MotionFX_manager_start_6X>
 8006690:	e003      	b.n	800669a <HandleMSG+0x5da>
      }
      else
      {
        MotionFX_manager_stop_6X();
 8006692:	f7fb fdcf 	bl	8002234 <MotionFX_manager_stop_6X>
        MotionFX_manager_start_9X();
 8006696:	f7fb fdd7 	bl	8002248 <MotionFX_manager_start_9X>
      }

      BUILD_REPLY_HEADER(Msg);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff fcde 	bl	800605c <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7fb f98f 	bl	80019c4 <UART_SendMsg>
      break;
 80066a6:	e002      	b.n	80066ae <HandleMSG+0x5ee>

    default:
      ret = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 80066ac:	bf00      	nop
  }

  return ret;
 80066ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3760      	adds	r7, #96	; 0x60
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	20000004 	.word	0x20000004
 80066bc:	20000598 	.word	0x20000598

080066c0 <RTC_DateRegulate>:
 * @param  d the day value to be set
 * @param  dw the day-week value to be set
 * @retval None
 */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 80066c0:	b590      	push	{r4, r7, lr}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4604      	mov	r4, r0
 80066c8:	4608      	mov	r0, r1
 80066ca:	4611      	mov	r1, r2
 80066cc:	461a      	mov	r2, r3
 80066ce:	4623      	mov	r3, r4
 80066d0:	71fb      	strb	r3, [r7, #7]
 80066d2:	4603      	mov	r3, r0
 80066d4:	71bb      	strb	r3, [r7, #6]
 80066d6:	460b      	mov	r3, r1
 80066d8:	717b      	strb	r3, [r7, #5]
 80066da:	4613      	mov	r3, r2
 80066dc:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	73fb      	strb	r3, [r7, #15]
  sdatestructure.Month   = m;
 80066e2:	79bb      	ldrb	r3, [r7, #6]
 80066e4:	737b      	strb	r3, [r7, #13]
  sdatestructure.Date    = d;
 80066e6:	797b      	ldrb	r3, [r7, #5]
 80066e8:	73bb      	strb	r3, [r7, #14]
  sdatestructure.WeekDay = dw;
 80066ea:	793b      	ldrb	r3, [r7, #4]
 80066ec:	733b      	strb	r3, [r7, #12]

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 80066ee:	f107 030c 	add.w	r3, r7, #12
 80066f2:	2200      	movs	r2, #0
 80066f4:	4619      	mov	r1, r3
 80066f6:	4806      	ldr	r0, [pc, #24]	; (8006710 <RTC_DateRegulate+0x50>)
 80066f8:	f005 ffc6 	bl	800c688 <HAL_RTC_SetDate>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <RTC_DateRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 8006702:	f7fb fd03 	bl	800210c <Error_Handler>
  }
}
 8006706:	bf00      	nop
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	bd90      	pop	{r4, r7, pc}
 800670e:	bf00      	nop
 8006710:	20002388 	.word	0x20002388

08006714 <RTC_TimeRegulate>:
 * @param  mm the minute value to be set
 * @param  ss the second value to be set
 * @retval None
 */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	71fb      	strb	r3, [r7, #7]
 800671e:	460b      	mov	r3, r1
 8006720:	71bb      	strb	r3, [r7, #6]
 8006722:	4613      	mov	r3, r2
 8006724:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	733b      	strb	r3, [r7, #12]
  stimestructure.Minutes        = mm;
 800672a:	79bb      	ldrb	r3, [r7, #6]
 800672c:	737b      	strb	r3, [r7, #13]
  stimestructure.Seconds        = ss;
 800672e:	797b      	ldrb	r3, [r7, #5]
 8006730:	73bb      	strb	r3, [r7, #14]
  stimestructure.SubSeconds     = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	613b      	str	r3, [r7, #16]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800673a:	2300      	movs	r3, #0
 800673c:	61bb      	str	r3, [r7, #24]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 8006742:	f107 030c 	add.w	r3, r7, #12
 8006746:	2200      	movs	r2, #0
 8006748:	4619      	mov	r1, r3
 800674a:	4806      	ldr	r0, [pc, #24]	; (8006764 <RTC_TimeRegulate+0x50>)
 800674c:	f005 fe9e 	bl	800c48c <HAL_RTC_SetTime>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <RTC_TimeRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 8006756:	f7fb fcd9 	bl	800210c <Error_Handler>
  }
}
 800675a:	bf00      	nop
 800675c:	3720      	adds	r7, #32
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20002388 	.word	0x20002388

08006768 <Get_PresentationString>:
 * @param  PresentationString the Presentation string
 * @param  Length the length of Presentation string
 * @retval None
 */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 8006768:	b5b0      	push	{r4, r5, r7, lr}
 800676a:	b09e      	sub	sp, #120	; 0x78
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  const uint8_t string_pointer_shift = strlen("ST MotionXX v"); /* Shift string pointer by this amount */
 8006772:	230d      	movs	r3, #13
 8006774:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 8006778:	2300      	movs	r3, #0
 800677a:	62fb      	str	r3, [r7, #44]	; 0x2c
  const char ps[] = {"MEMS shield demo,4,"FW_VERSION",%s,"BOARD_NAME};
 800677c:	4b19      	ldr	r3, [pc, #100]	; (80067e4 <Get_PresentationString+0x7c>)
 800677e:	f107 0408 	add.w	r4, r7, #8
 8006782:	461d      	mov	r5, r3
 8006784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800678a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	8022      	strh	r2, [r4, #0]
 8006792:	3402      	adds	r4, #2
 8006794:	0c1b      	lsrs	r3, r3, #16
 8006796:	7023      	strb	r3, [r4, #0]

  MotionFX_manager_get_version(lib_version_string, &lib_version_len);
 8006798:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800679c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80067a0:	4611      	mov	r1, r2
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fb fd64 	bl	8002270 <MotionFX_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0 resp. ST MotionXXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 80067a8:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80067ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ae:	429a      	cmp	r2, r3
 80067b0:	da06      	bge.n	80067c0 <Get_PresentationString+0x58>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
 80067b2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80067b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80067ba:	4413      	add	r3, r2
 80067bc:	677b      	str	r3, [r7, #116]	; 0x74
 80067be:	e002      	b.n	80067c6 <Get_PresentationString+0x5e>
  }
  else
  {
    lib_version_num = lib_version_string;
 80067c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80067c4:	677b      	str	r3, [r7, #116]	; 0x74
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 80067c6:	f107 0208 	add.w	r2, r7, #8
 80067ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067cc:	2140      	movs	r1, #64	; 0x40
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f014 f81c 	bl	801a80c <sniprintf>
 80067d4:	4603      	mov	r3, r0
 80067d6:	461a      	mov	r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	601a      	str	r2, [r3, #0]
}
 80067dc:	bf00      	nop
 80067de:	3778      	adds	r7, #120	; 0x78
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bdb0      	pop	{r4, r5, r7, pc}
 80067e4:	0801b0f8 	.word	0x0801b0f8

080067e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80067ec:	4b11      	ldr	r3, [pc, #68]	; (8006834 <HAL_Init+0x4c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a10      	ldr	r2, [pc, #64]	; (8006834 <HAL_Init+0x4c>)
 80067f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067f8:	2003      	movs	r0, #3
 80067fa:	f000 f96d 	bl	8006ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80067fe:	f003 f94d 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 8006802:	4602      	mov	r2, r0
 8006804:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <HAL_Init+0x50>)
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	490b      	ldr	r1, [pc, #44]	; (800683c <HAL_Init+0x54>)
 800680e:	5ccb      	ldrb	r3, [r1, r3]
 8006810:	fa22 f303 	lsr.w	r3, r2, r3
 8006814:	4a0a      	ldr	r2, [pc, #40]	; (8006840 <HAL_Init+0x58>)
 8006816:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006818:	200f      	movs	r0, #15
 800681a:	f000 f813 	bl	8006844 <HAL_InitTick>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e002      	b.n	800682e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006828:	f7fb ff3a 	bl	80026a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	40022000 	.word	0x40022000
 8006838:	46020c00 	.word	0x46020c00
 800683c:	0801b168 	.word	0x0801b168
 8006840:	20000010 	.word	0x20000010

08006844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800684c:	4b15      	ldr	r3, [pc, #84]	; (80068a4 <HAL_InitTick+0x60>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e021      	b.n	800689c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006858:	4b13      	ldr	r3, [pc, #76]	; (80068a8 <HAL_InitTick+0x64>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	4b11      	ldr	r3, [pc, #68]	; (80068a4 <HAL_InitTick+0x60>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	4619      	mov	r1, r3
 8006862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006866:	fbb3 f3f1 	udiv	r3, r3, r1
 800686a:	fbb2 f3f3 	udiv	r3, r2, r3
 800686e:	4618      	mov	r0, r3
 8006870:	f000 f965 	bl	8006b3e <HAL_SYSTICK_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e00e      	b.n	800689c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b0f      	cmp	r3, #15
 8006882:	d80a      	bhi.n	800689a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006884:	2200      	movs	r2, #0
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	f04f 30ff 	mov.w	r0, #4294967295
 800688c:	f000 f92f 	bl	8006aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006890:	4a06      	ldr	r2, [pc, #24]	; (80068ac <HAL_InitTick+0x68>)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	e000      	b.n	800689c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	200000ac 	.word	0x200000ac
 80068a8:	20000010 	.word	0x20000010
 80068ac:	200000a8 	.word	0x200000a8

080068b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80068b4:	4b06      	ldr	r3, [pc, #24]	; (80068d0 <HAL_IncTick+0x20>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	461a      	mov	r2, r3
 80068ba:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <HAL_IncTick+0x24>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4413      	add	r3, r2
 80068c0:	4a04      	ldr	r2, [pc, #16]	; (80068d4 <HAL_IncTick+0x24>)
 80068c2:	6013      	str	r3, [r2, #0]
}
 80068c4:	bf00      	nop
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	200000ac 	.word	0x200000ac
 80068d4:	20002538 	.word	0x20002538

080068d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
  return uwTick;
 80068dc:	4b03      	ldr	r3, [pc, #12]	; (80068ec <HAL_GetTick+0x14>)
 80068de:	681b      	ldr	r3, [r3, #0]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	20002538 	.word	0x20002538

080068f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80068f8:	f7ff ffee 	bl	80068d8 <HAL_GetTick>
 80068fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006908:	d005      	beq.n	8006916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800690a:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <HAL_Delay+0x44>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4413      	add	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006916:	bf00      	nop
 8006918:	f7ff ffde 	bl	80068d8 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	429a      	cmp	r2, r3
 8006926:	d8f7      	bhi.n	8006918 <HAL_Delay+0x28>
  {
  }
}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	200000ac 	.word	0x200000ac

08006938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006948:	4b0c      	ldr	r3, [pc, #48]	; (800697c <__NVIC_SetPriorityGrouping+0x44>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006954:	4013      	ands	r3, r2
 8006956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800696a:	4a04      	ldr	r2, [pc, #16]	; (800697c <__NVIC_SetPriorityGrouping+0x44>)
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	60d3      	str	r3, [r2, #12]
}
 8006970:	bf00      	nop
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	e000ed00 	.word	0xe000ed00

08006980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006984:	4b04      	ldr	r3, [pc, #16]	; (8006998 <__NVIC_GetPriorityGrouping+0x18>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	0a1b      	lsrs	r3, r3, #8
 800698a:	f003 0307 	and.w	r3, r3, #7
}
 800698e:	4618      	mov	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	e000ed00 	.word	0xe000ed00

0800699c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	db0b      	blt.n	80069c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069ae:	79fb      	ldrb	r3, [r7, #7]
 80069b0:	f003 021f 	and.w	r2, r3, #31
 80069b4:	4907      	ldr	r1, [pc, #28]	; (80069d4 <__NVIC_EnableIRQ+0x38>)
 80069b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	2001      	movs	r0, #1
 80069be:	fa00 f202 	lsl.w	r2, r0, r2
 80069c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	e000e100 	.word	0xe000e100

080069d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	6039      	str	r1, [r7, #0]
 80069e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	db0a      	blt.n	8006a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	490c      	ldr	r1, [pc, #48]	; (8006a24 <__NVIC_SetPriority+0x4c>)
 80069f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f6:	0112      	lsls	r2, r2, #4
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	440b      	add	r3, r1
 80069fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a00:	e00a      	b.n	8006a18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	4908      	ldr	r1, [pc, #32]	; (8006a28 <__NVIC_SetPriority+0x50>)
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	3b04      	subs	r3, #4
 8006a10:	0112      	lsls	r2, r2, #4
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	440b      	add	r3, r1
 8006a16:	761a      	strb	r2, [r3, #24]
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	e000e100 	.word	0xe000e100
 8006a28:	e000ed00 	.word	0xe000ed00

08006a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b089      	sub	sp, #36	; 0x24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f1c3 0307 	rsb	r3, r3, #7
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	bf28      	it	cs
 8006a4a:	2304      	movcs	r3, #4
 8006a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	3304      	adds	r3, #4
 8006a52:	2b06      	cmp	r3, #6
 8006a54:	d902      	bls.n	8006a5c <NVIC_EncodePriority+0x30>
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	3b03      	subs	r3, #3
 8006a5a:	e000      	b.n	8006a5e <NVIC_EncodePriority+0x32>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a60:	f04f 32ff 	mov.w	r2, #4294967295
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	43da      	mvns	r2, r3
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	401a      	ands	r2, r3
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a74:	f04f 31ff 	mov.w	r1, #4294967295
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7e:	43d9      	mvns	r1, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a84:	4313      	orrs	r3, r2
         );
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3724      	adds	r7, #36	; 0x24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
	...

08006a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006aa4:	d301      	bcc.n	8006aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e00f      	b.n	8006aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006aaa:	4a0a      	ldr	r2, [pc, #40]	; (8006ad4 <SysTick_Config+0x40>)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ab2:	210f      	movs	r1, #15
 8006ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab8:	f7ff ff8e 	bl	80069d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006abc:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <SysTick_Config+0x40>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ac2:	4b04      	ldr	r3, [pc, #16]	; (8006ad4 <SysTick_Config+0x40>)
 8006ac4:	2207      	movs	r2, #7
 8006ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	e000e010 	.word	0xe000e010

08006ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff ff29 	bl	8006938 <__NVIC_SetPriorityGrouping>
}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b086      	sub	sp, #24
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	4603      	mov	r3, r0
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
 8006afa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006afc:	f7ff ff40 	bl	8006980 <__NVIC_GetPriorityGrouping>
 8006b00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	6978      	ldr	r0, [r7, #20]
 8006b08:	f7ff ff90 	bl	8006a2c <NVIC_EncodePriority>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b12:	4611      	mov	r1, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff ff5f 	bl	80069d8 <__NVIC_SetPriority>
}
 8006b1a:	bf00      	nop
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	4603      	mov	r3, r0
 8006b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff ff33 	bl	800699c <__NVIC_EnableIRQ>
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff ffa4 	bl	8006a94 <SysTick_Config>
 8006b4c:	4603      	mov	r3, r0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e054      	b.n	8006c14 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	7f5b      	ldrb	r3, [r3, #29]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d105      	bne.n	8006b80 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fa ff98 	bl	8001ab0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	791b      	ldrb	r3, [r3, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10c      	bne.n	8006ba8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a22      	ldr	r2, [pc, #136]	; (8006c1c <HAL_CRC_Init+0xc4>)
 8006b94:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0218 	bic.w	r2, r2, #24
 8006ba4:	609a      	str	r2, [r3, #8]
 8006ba6:	e00c      	b.n	8006bc2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6899      	ldr	r1, [r3, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f834 	bl	8006c20 <HAL_CRCEx_Polynomial_Set>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e028      	b.n	8006c14 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	795b      	ldrb	r3, [r3, #5]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d105      	bne.n	8006bd6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd2:	611a      	str	r2, [r3, #16]
 8006bd4:	e004      	b.n	8006be0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	6912      	ldr	r2, [r2, #16]
 8006bde:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	695a      	ldr	r2, [r3, #20]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	699a      	ldr	r2, [r3, #24]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	04c11db7 	.word	0x04c11db7

08006c20 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006c30:	231f      	movs	r3, #31
 8006c32:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006c34:	bf00      	nop
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1e5a      	subs	r2, r3, #1
 8006c3a:	613a      	str	r2, [r7, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d009      	beq.n	8006c54 <HAL_CRCEx_Polynomial_Set+0x34>
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f003 031f 	and.w	r3, r3, #31
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	fa22 f303 	lsr.w	r3, r2, r3
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0f0      	beq.n	8006c36 <HAL_CRCEx_Polynomial_Set+0x16>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b18      	cmp	r3, #24
 8006c58:	d846      	bhi.n	8006ce8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006c5a:	a201      	add	r2, pc, #4	; (adr r2, 8006c60 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c60:	08006cef 	.word	0x08006cef
 8006c64:	08006ce9 	.word	0x08006ce9
 8006c68:	08006ce9 	.word	0x08006ce9
 8006c6c:	08006ce9 	.word	0x08006ce9
 8006c70:	08006ce9 	.word	0x08006ce9
 8006c74:	08006ce9 	.word	0x08006ce9
 8006c78:	08006ce9 	.word	0x08006ce9
 8006c7c:	08006ce9 	.word	0x08006ce9
 8006c80:	08006cdd 	.word	0x08006cdd
 8006c84:	08006ce9 	.word	0x08006ce9
 8006c88:	08006ce9 	.word	0x08006ce9
 8006c8c:	08006ce9 	.word	0x08006ce9
 8006c90:	08006ce9 	.word	0x08006ce9
 8006c94:	08006ce9 	.word	0x08006ce9
 8006c98:	08006ce9 	.word	0x08006ce9
 8006c9c:	08006ce9 	.word	0x08006ce9
 8006ca0:	08006cd1 	.word	0x08006cd1
 8006ca4:	08006ce9 	.word	0x08006ce9
 8006ca8:	08006ce9 	.word	0x08006ce9
 8006cac:	08006ce9 	.word	0x08006ce9
 8006cb0:	08006ce9 	.word	0x08006ce9
 8006cb4:	08006ce9 	.word	0x08006ce9
 8006cb8:	08006ce9 	.word	0x08006ce9
 8006cbc:	08006ce9 	.word	0x08006ce9
 8006cc0:	08006cc5 	.word	0x08006cc5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	2b06      	cmp	r3, #6
 8006cc8:	d913      	bls.n	8006cf2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006cce:	e010      	b.n	8006cf2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2b07      	cmp	r3, #7
 8006cd4:	d90f      	bls.n	8006cf6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006cda:	e00c      	b.n	8006cf6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	2b0f      	cmp	r3, #15
 8006ce0:	d90b      	bls.n	8006cfa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006ce6:	e008      	b.n	8006cfa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	75fb      	strb	r3, [r7, #23]
      break;
 8006cec:	e006      	b.n	8006cfc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006cee:	bf00      	nop
 8006cf0:	e004      	b.n	8006cfc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006cf2:	bf00      	nop
 8006cf4:	e002      	b.n	8006cfc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006cf6:	bf00      	nop
 8006cf8:	e000      	b.n	8006cfc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006cfa:	bf00      	nop
  }
  if (status == HAL_OK)
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10d      	bne.n	8006d1e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f023 0118 	bic.w	r1, r3, #24
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	371c      	adds	r7, #28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006d34:	f7ff fdd0 	bl	80068d8 <HAL_GetTick>
 8006d38:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e0e0      	b.n	8006f06 <HAL_DMA_Init+0x1da>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a6f      	ldr	r2, [pc, #444]	; (8006f10 <HAL_DMA_Init+0x1e4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	f000 809f 	beq.w	8006e96 <HAL_DMA_Init+0x16a>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a6d      	ldr	r2, [pc, #436]	; (8006f14 <HAL_DMA_Init+0x1e8>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	f000 8099 	beq.w	8006e96 <HAL_DMA_Init+0x16a>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a6b      	ldr	r2, [pc, #428]	; (8006f18 <HAL_DMA_Init+0x1ec>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	f000 8093 	beq.w	8006e96 <HAL_DMA_Init+0x16a>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a69      	ldr	r2, [pc, #420]	; (8006f1c <HAL_DMA_Init+0x1f0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	f000 808d 	beq.w	8006e96 <HAL_DMA_Init+0x16a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a67      	ldr	r2, [pc, #412]	; (8006f20 <HAL_DMA_Init+0x1f4>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	f000 8087 	beq.w	8006e96 <HAL_DMA_Init+0x16a>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a65      	ldr	r2, [pc, #404]	; (8006f24 <HAL_DMA_Init+0x1f8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	f000 8081 	beq.w	8006e96 <HAL_DMA_Init+0x16a>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a63      	ldr	r2, [pc, #396]	; (8006f28 <HAL_DMA_Init+0x1fc>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d07b      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a62      	ldr	r2, [pc, #392]	; (8006f2c <HAL_DMA_Init+0x200>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d076      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a60      	ldr	r2, [pc, #384]	; (8006f30 <HAL_DMA_Init+0x204>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d071      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a5f      	ldr	r2, [pc, #380]	; (8006f34 <HAL_DMA_Init+0x208>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d06c      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a5d      	ldr	r2, [pc, #372]	; (8006f38 <HAL_DMA_Init+0x20c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d067      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a5c      	ldr	r2, [pc, #368]	; (8006f3c <HAL_DMA_Init+0x210>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d062      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a5a      	ldr	r2, [pc, #360]	; (8006f40 <HAL_DMA_Init+0x214>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d05d      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a59      	ldr	r2, [pc, #356]	; (8006f44 <HAL_DMA_Init+0x218>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d058      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a57      	ldr	r2, [pc, #348]	; (8006f48 <HAL_DMA_Init+0x21c>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d053      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a56      	ldr	r2, [pc, #344]	; (8006f4c <HAL_DMA_Init+0x220>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d04e      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a54      	ldr	r2, [pc, #336]	; (8006f50 <HAL_DMA_Init+0x224>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d049      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a53      	ldr	r2, [pc, #332]	; (8006f54 <HAL_DMA_Init+0x228>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d044      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a51      	ldr	r2, [pc, #324]	; (8006f58 <HAL_DMA_Init+0x22c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d03f      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a50      	ldr	r2, [pc, #320]	; (8006f5c <HAL_DMA_Init+0x230>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d03a      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a4e      	ldr	r2, [pc, #312]	; (8006f60 <HAL_DMA_Init+0x234>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d035      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a4d      	ldr	r2, [pc, #308]	; (8006f64 <HAL_DMA_Init+0x238>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d030      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a4b      	ldr	r2, [pc, #300]	; (8006f68 <HAL_DMA_Init+0x23c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d02b      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a4a      	ldr	r2, [pc, #296]	; (8006f6c <HAL_DMA_Init+0x240>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d026      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a48      	ldr	r2, [pc, #288]	; (8006f70 <HAL_DMA_Init+0x244>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d021      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a47      	ldr	r2, [pc, #284]	; (8006f74 <HAL_DMA_Init+0x248>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d01c      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a45      	ldr	r2, [pc, #276]	; (8006f78 <HAL_DMA_Init+0x24c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d017      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a44      	ldr	r2, [pc, #272]	; (8006f7c <HAL_DMA_Init+0x250>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d012      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a42      	ldr	r2, [pc, #264]	; (8006f80 <HAL_DMA_Init+0x254>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00d      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a41      	ldr	r2, [pc, #260]	; (8006f84 <HAL_DMA_Init+0x258>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d008      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a3f      	ldr	r2, [pc, #252]	; (8006f88 <HAL_DMA_Init+0x25c>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d003      	beq.n	8006e96 <HAL_DMA_Init+0x16a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a3e      	ldr	r2, [pc, #248]	; (8006f8c <HAL_DMA_Init+0x260>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	bf00      	nop
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	695a      	ldr	r2, [r3, #20]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0206 	orr.w	r2, r2, #6
 8006eb6:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006eb8:	e00f      	b.n	8006eda <HAL_DMA_Init+0x1ae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006eba:	f7ff fd0d 	bl	80068d8 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b05      	cmp	r3, #5
 8006ec6:	d908      	bls.n	8006eda <HAL_DMA_Init+0x1ae>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2210      	movs	r2, #16
 8006ecc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e015      	b.n	8006f06 <HAL_DMA_Init+0x1da>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e8      	bne.n	8006eba <HAL_DMA_Init+0x18e>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f913 	bl	8007114 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	40020050 	.word	0x40020050
 8006f14:	50020050 	.word	0x50020050
 8006f18:	400200d0 	.word	0x400200d0
 8006f1c:	500200d0 	.word	0x500200d0
 8006f20:	40020150 	.word	0x40020150
 8006f24:	50020150 	.word	0x50020150
 8006f28:	400201d0 	.word	0x400201d0
 8006f2c:	500201d0 	.word	0x500201d0
 8006f30:	40020250 	.word	0x40020250
 8006f34:	50020250 	.word	0x50020250
 8006f38:	400202d0 	.word	0x400202d0
 8006f3c:	500202d0 	.word	0x500202d0
 8006f40:	40020350 	.word	0x40020350
 8006f44:	50020350 	.word	0x50020350
 8006f48:	400203d0 	.word	0x400203d0
 8006f4c:	500203d0 	.word	0x500203d0
 8006f50:	40020450 	.word	0x40020450
 8006f54:	50020450 	.word	0x50020450
 8006f58:	400204d0 	.word	0x400204d0
 8006f5c:	500204d0 	.word	0x500204d0
 8006f60:	40020550 	.word	0x40020550
 8006f64:	50020550 	.word	0x50020550
 8006f68:	400205d0 	.word	0x400205d0
 8006f6c:	500205d0 	.word	0x500205d0
 8006f70:	40020650 	.word	0x40020650
 8006f74:	50020650 	.word	0x50020650
 8006f78:	400206d0 	.word	0x400206d0
 8006f7c:	500206d0 	.word	0x500206d0
 8006f80:	40020750 	.word	0x40020750
 8006f84:	50020750 	.word	0x50020750
 8006f88:	400207d0 	.word	0x400207d0
 8006f8c:	500207d0 	.word	0x500207d0

08006f90 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e04f      	b.n	8007048 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d101      	bne.n	8006fb6 <HAL_DMA_Start_IT+0x26>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	e048      	b.n	8007048 <HAL_DMA_Start_IT+0xb8>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d136      	bne.n	8007038 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	68b9      	ldr	r1, [r7, #8]
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 f872 	bl	80070c8 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	695a      	ldr	r2, [r3, #20]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8006ff2:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d007      	beq.n	800700c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695a      	ldr	r2, [r3, #20]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800700a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007010:	2b00      	cmp	r3, #0
 8007012:	d007      	beq.n	8007024 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695a      	ldr	r2, [r3, #20]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007022:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695a      	ldr	r2, [r3, #20]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	e007      	b.n	8007048 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2240      	movs	r2, #64	; 0x40
 800703c:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e02b      	b.n	80070bc <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800706c:	f023 030f 	bic.w	r3, r3, #15
 8007070:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800707a:	3b50      	subs	r3, #80	; 0x50
 800707c:	09db      	lsrs	r3, r3, #7
 800707e:	f003 031f 	and.w	r3, r3, #31
 8007082:	2201      	movs	r2, #1
 8007084:	fa02 f303 	lsl.w	r3, r2, r3
 8007088:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	d012      	beq.n	80070ba <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	f003 0311 	and.w	r3, r3, #17
 800709a:	2b11      	cmp	r3, #17
 800709c:	d106      	bne.n	80070ac <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	431a      	orrs	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	605a      	str	r2, [r3, #4]
 80070aa:	e006      	b.n	80070ba <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	43db      	mvns	r3, r3
 80070b4:	401a      	ands	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070dc:	0c1b      	lsrs	r3, r3, #16
 80070de:	041b      	lsls	r3, r3, #16
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	b291      	uxth	r1, r2
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	6812      	ldr	r2, [r2, #0]
 80070e8:	430b      	orrs	r3, r1
 80070ea:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80070f4:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007106:	bf00      	nop
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	430a      	orrs	r2, r1
 8007134:	615a      	str	r2, [r3, #20]


  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	695a      	ldr	r2, [r3, #20]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	431a      	orrs	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	431a      	orrs	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a53      	ldr	r2, [pc, #332]	; (80072a0 <DMA_Init+0x18c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	f000 80a0 	beq.w	800729a <DMA_Init+0x186>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a51      	ldr	r2, [pc, #324]	; (80072a4 <DMA_Init+0x190>)
 8007160:	4293      	cmp	r3, r2
 8007162:	f000 809a 	beq.w	800729a <DMA_Init+0x186>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a4f      	ldr	r2, [pc, #316]	; (80072a8 <DMA_Init+0x194>)
 800716c:	4293      	cmp	r3, r2
 800716e:	f000 8094 	beq.w	800729a <DMA_Init+0x186>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a4d      	ldr	r2, [pc, #308]	; (80072ac <DMA_Init+0x198>)
 8007178:	4293      	cmp	r3, r2
 800717a:	f000 808e 	beq.w	800729a <DMA_Init+0x186>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a4b      	ldr	r2, [pc, #300]	; (80072b0 <DMA_Init+0x19c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	f000 8088 	beq.w	800729a <DMA_Init+0x186>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a49      	ldr	r2, [pc, #292]	; (80072b4 <DMA_Init+0x1a0>)
 8007190:	4293      	cmp	r3, r2
 8007192:	f000 8082 	beq.w	800729a <DMA_Init+0x186>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a47      	ldr	r2, [pc, #284]	; (80072b8 <DMA_Init+0x1a4>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d07c      	beq.n	800729a <DMA_Init+0x186>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a45      	ldr	r2, [pc, #276]	; (80072bc <DMA_Init+0x1a8>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d077      	beq.n	800729a <DMA_Init+0x186>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a44      	ldr	r2, [pc, #272]	; (80072c0 <DMA_Init+0x1ac>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d072      	beq.n	800729a <DMA_Init+0x186>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a42      	ldr	r2, [pc, #264]	; (80072c4 <DMA_Init+0x1b0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d06d      	beq.n	800729a <DMA_Init+0x186>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a41      	ldr	r2, [pc, #260]	; (80072c8 <DMA_Init+0x1b4>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d068      	beq.n	800729a <DMA_Init+0x186>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a3f      	ldr	r2, [pc, #252]	; (80072cc <DMA_Init+0x1b8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d063      	beq.n	800729a <DMA_Init+0x186>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a3e      	ldr	r2, [pc, #248]	; (80072d0 <DMA_Init+0x1bc>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d05e      	beq.n	800729a <DMA_Init+0x186>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a3c      	ldr	r2, [pc, #240]	; (80072d4 <DMA_Init+0x1c0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d059      	beq.n	800729a <DMA_Init+0x186>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a3b      	ldr	r2, [pc, #236]	; (80072d8 <DMA_Init+0x1c4>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d054      	beq.n	800729a <DMA_Init+0x186>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a39      	ldr	r2, [pc, #228]	; (80072dc <DMA_Init+0x1c8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d04f      	beq.n	800729a <DMA_Init+0x186>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a38      	ldr	r2, [pc, #224]	; (80072e0 <DMA_Init+0x1cc>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d04a      	beq.n	800729a <DMA_Init+0x186>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a36      	ldr	r2, [pc, #216]	; (80072e4 <DMA_Init+0x1d0>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d045      	beq.n	800729a <DMA_Init+0x186>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a35      	ldr	r2, [pc, #212]	; (80072e8 <DMA_Init+0x1d4>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d040      	beq.n	800729a <DMA_Init+0x186>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a33      	ldr	r2, [pc, #204]	; (80072ec <DMA_Init+0x1d8>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d03b      	beq.n	800729a <DMA_Init+0x186>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a32      	ldr	r2, [pc, #200]	; (80072f0 <DMA_Init+0x1dc>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d036      	beq.n	800729a <DMA_Init+0x186>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a30      	ldr	r2, [pc, #192]	; (80072f4 <DMA_Init+0x1e0>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d031      	beq.n	800729a <DMA_Init+0x186>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a2f      	ldr	r2, [pc, #188]	; (80072f8 <DMA_Init+0x1e4>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d02c      	beq.n	800729a <DMA_Init+0x186>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a2d      	ldr	r2, [pc, #180]	; (80072fc <DMA_Init+0x1e8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d027      	beq.n	800729a <DMA_Init+0x186>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a2c      	ldr	r2, [pc, #176]	; (8007300 <DMA_Init+0x1ec>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d022      	beq.n	800729a <DMA_Init+0x186>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a2a      	ldr	r2, [pc, #168]	; (8007304 <DMA_Init+0x1f0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d01d      	beq.n	800729a <DMA_Init+0x186>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a29      	ldr	r2, [pc, #164]	; (8007308 <DMA_Init+0x1f4>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d018      	beq.n	800729a <DMA_Init+0x186>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a27      	ldr	r2, [pc, #156]	; (800730c <DMA_Init+0x1f8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d013      	beq.n	800729a <DMA_Init+0x186>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a26      	ldr	r2, [pc, #152]	; (8007310 <DMA_Init+0x1fc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00e      	beq.n	800729a <DMA_Init+0x186>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a24      	ldr	r2, [pc, #144]	; (8007314 <DMA_Init+0x200>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d009      	beq.n	800729a <DMA_Init+0x186>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a23      	ldr	r2, [pc, #140]	; (8007318 <DMA_Init+0x204>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d004      	beq.n	800729a <DMA_Init+0x186>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a21      	ldr	r2, [pc, #132]	; (800731c <DMA_Init+0x208>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d142      	bne.n	8007320 <DMA_Init+0x20c>
 800729a:	2301      	movs	r3, #1
 800729c:	e041      	b.n	8007322 <DMA_Init+0x20e>
 800729e:	bf00      	nop
 80072a0:	40020050 	.word	0x40020050
 80072a4:	50020050 	.word	0x50020050
 80072a8:	400200d0 	.word	0x400200d0
 80072ac:	500200d0 	.word	0x500200d0
 80072b0:	40020150 	.word	0x40020150
 80072b4:	50020150 	.word	0x50020150
 80072b8:	400201d0 	.word	0x400201d0
 80072bc:	500201d0 	.word	0x500201d0
 80072c0:	40020250 	.word	0x40020250
 80072c4:	50020250 	.word	0x50020250
 80072c8:	400202d0 	.word	0x400202d0
 80072cc:	500202d0 	.word	0x500202d0
 80072d0:	40020350 	.word	0x40020350
 80072d4:	50020350 	.word	0x50020350
 80072d8:	400203d0 	.word	0x400203d0
 80072dc:	500203d0 	.word	0x500203d0
 80072e0:	40020450 	.word	0x40020450
 80072e4:	50020450 	.word	0x50020450
 80072e8:	400204d0 	.word	0x400204d0
 80072ec:	500204d0 	.word	0x500204d0
 80072f0:	40020550 	.word	0x40020550
 80072f4:	50020550 	.word	0x50020550
 80072f8:	400205d0 	.word	0x400205d0
 80072fc:	500205d0 	.word	0x500205d0
 8007300:	40020650 	.word	0x40020650
 8007304:	50020650 	.word	0x50020650
 8007308:	400206d0 	.word	0x400206d0
 800730c:	500206d0 	.word	0x500206d0
 8007310:	40020750 	.word	0x40020750
 8007314:	50020750 	.word	0x50020750
 8007318:	400207d0 	.word	0x400207d0
 800731c:	500207d0 	.word	0x500207d0
 8007320:	2300      	movs	r3, #0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d012      	beq.n	800734c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732e:	3b01      	subs	r3, #1
 8007330:	051b      	lsls	r3, r3, #20
 8007332:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8007336:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	3b01      	subs	r3, #1
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8007344:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	4313      	orrs	r3, r2
 800734a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	430a      	orrs	r2, r1
 800735e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800736c:	431a      	orrs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800737e:	f040 80b0 	bne.w	80074e2 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a82      	ldr	r2, [pc, #520]	; (8007590 <DMA_Init+0x47c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	f000 80a0 	beq.w	80074ce <DMA_Init+0x3ba>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a80      	ldr	r2, [pc, #512]	; (8007594 <DMA_Init+0x480>)
 8007394:	4293      	cmp	r3, r2
 8007396:	f000 809a 	beq.w	80074ce <DMA_Init+0x3ba>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a7e      	ldr	r2, [pc, #504]	; (8007598 <DMA_Init+0x484>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	f000 8094 	beq.w	80074ce <DMA_Init+0x3ba>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a7c      	ldr	r2, [pc, #496]	; (800759c <DMA_Init+0x488>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	f000 808e 	beq.w	80074ce <DMA_Init+0x3ba>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a7a      	ldr	r2, [pc, #488]	; (80075a0 <DMA_Init+0x48c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	f000 8088 	beq.w	80074ce <DMA_Init+0x3ba>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a78      	ldr	r2, [pc, #480]	; (80075a4 <DMA_Init+0x490>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	f000 8082 	beq.w	80074ce <DMA_Init+0x3ba>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a76      	ldr	r2, [pc, #472]	; (80075a8 <DMA_Init+0x494>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d07c      	beq.n	80074ce <DMA_Init+0x3ba>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a74      	ldr	r2, [pc, #464]	; (80075ac <DMA_Init+0x498>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d077      	beq.n	80074ce <DMA_Init+0x3ba>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a73      	ldr	r2, [pc, #460]	; (80075b0 <DMA_Init+0x49c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d072      	beq.n	80074ce <DMA_Init+0x3ba>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a71      	ldr	r2, [pc, #452]	; (80075b4 <DMA_Init+0x4a0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d06d      	beq.n	80074ce <DMA_Init+0x3ba>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a70      	ldr	r2, [pc, #448]	; (80075b8 <DMA_Init+0x4a4>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d068      	beq.n	80074ce <DMA_Init+0x3ba>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a6e      	ldr	r2, [pc, #440]	; (80075bc <DMA_Init+0x4a8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d063      	beq.n	80074ce <DMA_Init+0x3ba>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a6d      	ldr	r2, [pc, #436]	; (80075c0 <DMA_Init+0x4ac>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d05e      	beq.n	80074ce <DMA_Init+0x3ba>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a6b      	ldr	r2, [pc, #428]	; (80075c4 <DMA_Init+0x4b0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d059      	beq.n	80074ce <DMA_Init+0x3ba>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a6a      	ldr	r2, [pc, #424]	; (80075c8 <DMA_Init+0x4b4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d054      	beq.n	80074ce <DMA_Init+0x3ba>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a68      	ldr	r2, [pc, #416]	; (80075cc <DMA_Init+0x4b8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d04f      	beq.n	80074ce <DMA_Init+0x3ba>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a67      	ldr	r2, [pc, #412]	; (80075d0 <DMA_Init+0x4bc>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d04a      	beq.n	80074ce <DMA_Init+0x3ba>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a65      	ldr	r2, [pc, #404]	; (80075d4 <DMA_Init+0x4c0>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d045      	beq.n	80074ce <DMA_Init+0x3ba>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a64      	ldr	r2, [pc, #400]	; (80075d8 <DMA_Init+0x4c4>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d040      	beq.n	80074ce <DMA_Init+0x3ba>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a62      	ldr	r2, [pc, #392]	; (80075dc <DMA_Init+0x4c8>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d03b      	beq.n	80074ce <DMA_Init+0x3ba>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a61      	ldr	r2, [pc, #388]	; (80075e0 <DMA_Init+0x4cc>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d036      	beq.n	80074ce <DMA_Init+0x3ba>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a5f      	ldr	r2, [pc, #380]	; (80075e4 <DMA_Init+0x4d0>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d031      	beq.n	80074ce <DMA_Init+0x3ba>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a5e      	ldr	r2, [pc, #376]	; (80075e8 <DMA_Init+0x4d4>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d02c      	beq.n	80074ce <DMA_Init+0x3ba>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a5c      	ldr	r2, [pc, #368]	; (80075ec <DMA_Init+0x4d8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d027      	beq.n	80074ce <DMA_Init+0x3ba>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a5b      	ldr	r2, [pc, #364]	; (80075f0 <DMA_Init+0x4dc>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d022      	beq.n	80074ce <DMA_Init+0x3ba>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a59      	ldr	r2, [pc, #356]	; (80075f4 <DMA_Init+0x4e0>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d01d      	beq.n	80074ce <DMA_Init+0x3ba>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a58      	ldr	r2, [pc, #352]	; (80075f8 <DMA_Init+0x4e4>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d018      	beq.n	80074ce <DMA_Init+0x3ba>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a56      	ldr	r2, [pc, #344]	; (80075fc <DMA_Init+0x4e8>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d013      	beq.n	80074ce <DMA_Init+0x3ba>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a55      	ldr	r2, [pc, #340]	; (8007600 <DMA_Init+0x4ec>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d00e      	beq.n	80074ce <DMA_Init+0x3ba>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a53      	ldr	r2, [pc, #332]	; (8007604 <DMA_Init+0x4f0>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d009      	beq.n	80074ce <DMA_Init+0x3ba>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a52      	ldr	r2, [pc, #328]	; (8007608 <DMA_Init+0x4f4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d004      	beq.n	80074ce <DMA_Init+0x3ba>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a50      	ldr	r2, [pc, #320]	; (800760c <DMA_Init+0x4f8>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d101      	bne.n	80074d2 <DMA_Init+0x3be>
 80074ce:	2301      	movs	r3, #1
 80074d0:	e000      	b.n	80074d4 <DMA_Init+0x3c0>
 80074d2:	2300      	movs	r3, #0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00d      	beq.n	80074f4 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	e008      	b.n	80074f4 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ea:	d103      	bne.n	80074f4 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074f2:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074fa:	4b45      	ldr	r3, [pc, #276]	; (8007610 <DMA_Init+0x4fc>)
 80074fc:	4013      	ands	r3, r2
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6812      	ldr	r2, [r2, #0]
 8007502:	68f9      	ldr	r1, [r7, #12]
 8007504:	430b      	orrs	r3, r1
 8007506:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2200      	movs	r2, #0
 800750e:	649a      	str	r2, [r3, #72]	; 0x48


  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a36      	ldr	r2, [pc, #216]	; (80075f0 <DMA_Init+0x4dc>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d022      	beq.n	8007560 <DMA_Init+0x44c>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a35      	ldr	r2, [pc, #212]	; (80075f4 <DMA_Init+0x4e0>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d01d      	beq.n	8007560 <DMA_Init+0x44c>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a33      	ldr	r2, [pc, #204]	; (80075f8 <DMA_Init+0x4e4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d018      	beq.n	8007560 <DMA_Init+0x44c>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a32      	ldr	r2, [pc, #200]	; (80075fc <DMA_Init+0x4e8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d013      	beq.n	8007560 <DMA_Init+0x44c>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a30      	ldr	r2, [pc, #192]	; (8007600 <DMA_Init+0x4ec>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00e      	beq.n	8007560 <DMA_Init+0x44c>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a2f      	ldr	r2, [pc, #188]	; (8007604 <DMA_Init+0x4f0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d009      	beq.n	8007560 <DMA_Init+0x44c>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a2d      	ldr	r2, [pc, #180]	; (8007608 <DMA_Init+0x4f4>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d004      	beq.n	8007560 <DMA_Init+0x44c>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a2c      	ldr	r2, [pc, #176]	; (800760c <DMA_Init+0x4f8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d101      	bne.n	8007564 <DMA_Init+0x450>
 8007560:	2301      	movs	r3, #1
 8007562:	e000      	b.n	8007566 <DMA_Init+0x452>
 8007564:	2300      	movs	r3, #0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d007      	beq.n	800757a <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2200      	movs	r2, #0
 8007570:	655a      	str	r2, [r3, #84]	; 0x54


    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2200      	movs	r2, #0
 8007578:	659a      	str	r2, [r3, #88]	; 0x58
  }


  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2200      	movs	r2, #0
 8007580:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007582:	bf00      	nop
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	40020050 	.word	0x40020050
 8007594:	50020050 	.word	0x50020050
 8007598:	400200d0 	.word	0x400200d0
 800759c:	500200d0 	.word	0x500200d0
 80075a0:	40020150 	.word	0x40020150
 80075a4:	50020150 	.word	0x50020150
 80075a8:	400201d0 	.word	0x400201d0
 80075ac:	500201d0 	.word	0x500201d0
 80075b0:	40020250 	.word	0x40020250
 80075b4:	50020250 	.word	0x50020250
 80075b8:	400202d0 	.word	0x400202d0
 80075bc:	500202d0 	.word	0x500202d0
 80075c0:	40020350 	.word	0x40020350
 80075c4:	50020350 	.word	0x50020350
 80075c8:	400203d0 	.word	0x400203d0
 80075cc:	500203d0 	.word	0x500203d0
 80075d0:	40020450 	.word	0x40020450
 80075d4:	50020450 	.word	0x50020450
 80075d8:	400204d0 	.word	0x400204d0
 80075dc:	500204d0 	.word	0x500204d0
 80075e0:	40020550 	.word	0x40020550
 80075e4:	50020550 	.word	0x50020550
 80075e8:	400205d0 	.word	0x400205d0
 80075ec:	500205d0 	.word	0x500205d0
 80075f0:	40020650 	.word	0x40020650
 80075f4:	50020650 	.word	0x50020650
 80075f8:	400206d0 	.word	0x400206d0
 80075fc:	500206d0 	.word	0x500206d0
 8007600:	40020750 	.word	0x40020750
 8007604:	50020750 	.word	0x50020750
 8007608:	400207d0 	.word	0x400207d0
 800760c:	500207d0 	.word	0x500207d0
 8007610:	3cc03180 	.word	0x3cc03180

08007614 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <HAL_DMAEx_List_Start_IT+0x16>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e082      	b.n	8007734 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007634:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007640:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d005      	beq.n	8007654 <HAL_DMAEx_List_Start_IT+0x40>
 8007648:	7dfb      	ldrb	r3, [r7, #23]
 800764a:	2b02      	cmp	r3, #2
 800764c:	d16a      	bne.n	8007724 <HAL_DMAEx_List_Start_IT+0x110>
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d067      	beq.n	8007724 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b01      	cmp	r3, #1
 800765e:	d157      	bne.n	8007710 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <HAL_DMAEx_List_Start_IT+0x5a>
 800766a:	2302      	movs	r3, #2
 800766c:	e062      	b.n	8007734 <HAL_DMAEx_List_Start_IT+0x120>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2202      	movs	r2, #2
 800767a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007682:	2202      	movs	r2, #2
 8007684:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007690:	2200      	movs	r2, #0
 8007692:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	695a      	ldr	r2, [r3, #20]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 80076a2:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d007      	beq.n	80076bc <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	695a      	ldr	r2, [r3, #20]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ba:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d007      	beq.n	80076d4 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	695a      	ldr	r2, [r3, #20]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076d2:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f107 010c 	add.w	r1, r7, #12
 80076de:	2200      	movs	r2, #0
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 f82b 	bl	800773c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4619      	mov	r1, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	0c0b      	lsrs	r3, r1, #16
 80076f4:	041b      	lsls	r3, r3, #16
 80076f6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007704:	4013      	ands	r3, r2
 8007706:	68f9      	ldr	r1, [r7, #12]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	6812      	ldr	r2, [r2, #0]
 800770c:	430b      	orrs	r3, r1
 800770e:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	695a      	ldr	r2, [r3, #20]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0201 	orr.w	r2, r2, #1
 800771e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	e007      	b.n	8007734 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2240      	movs	r2, #64	; 0x40
 8007728:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
}
 8007734:	4618      	mov	r0, r3
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	f003 0302 	and.w	r3, r3, #2
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00c      	beq.n	800776e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d002      	beq.n	8007760 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	4a0d      	ldr	r2, [pc, #52]	; (8007794 <DMA_List_GetCLLRNodeInfo+0x58>)
 800775e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00f      	beq.n	8007786 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2207      	movs	r2, #7
 800776a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800776c:	e00b      	b.n	8007786 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	4a08      	ldr	r2, [pc, #32]	; (8007798 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007778:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2205      	movs	r2, #5
 8007784:	601a      	str	r2, [r3, #0]
}
 8007786:	bf00      	nop
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	fe010000 	.word	0xfe010000
 8007798:	f8010000 	.word	0xf8010000

0800779c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800779c:	b480      	push	{r7}
 800779e:	b089      	sub	sp, #36	; 0x24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80077ae:	e1ba      	b.n	8007b26 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	2101      	movs	r1, #1
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	fa01 f303 	lsl.w	r3, r1, r3
 80077bc:	4013      	ands	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f000 81aa 	beq.w	8007b20 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a55      	ldr	r2, [pc, #340]	; (8007924 <HAL_GPIO_Init+0x188>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d15d      	bne.n	8007890 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80077da:	2201      	movs	r2, #1
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	fa02 f303 	lsl.w	r3, r2, r3
 80077e2:	43db      	mvns	r3, r3
 80077e4:	69fa      	ldr	r2, [r7, #28]
 80077e6:	4013      	ands	r3, r2
 80077e8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f003 0201 	and.w	r2, r3, #1
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	fa02 f303 	lsl.w	r3, r2, r3
 80077f8:	69fa      	ldr	r2, [r7, #28]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	69fa      	ldr	r2, [r7, #28]
 8007802:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007804:	4a48      	ldr	r2, [pc, #288]	; (8007928 <HAL_GPIO_Init+0x18c>)
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800780c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800780e:	4a46      	ldr	r2, [pc, #280]	; (8007928 <HAL_GPIO_Init+0x18c>)
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	4413      	add	r3, r2
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	08da      	lsrs	r2, r3, #3
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	3208      	adds	r2, #8
 8007822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007826:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	220f      	movs	r2, #15
 8007832:	fa02 f303 	lsl.w	r3, r2, r3
 8007836:	43db      	mvns	r3, r3
 8007838:	69fa      	ldr	r2, [r7, #28]
 800783a:	4013      	ands	r3, r2
 800783c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	f003 0307 	and.w	r3, r3, #7
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	220b      	movs	r2, #11
 8007848:	fa02 f303 	lsl.w	r3, r2, r3
 800784c:	69fa      	ldr	r2, [r7, #28]
 800784e:	4313      	orrs	r3, r2
 8007850:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	08da      	lsrs	r2, r3, #3
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	3208      	adds	r2, #8
 800785a:	69f9      	ldr	r1, [r7, #28]
 800785c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	2203      	movs	r2, #3
 800786c:	fa02 f303 	lsl.w	r3, r2, r3
 8007870:	43db      	mvns	r3, r3
 8007872:	69fa      	ldr	r2, [r7, #28]
 8007874:	4013      	ands	r3, r2
 8007876:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	005b      	lsls	r3, r3, #1
 800787c:	2202      	movs	r2, #2
 800787e:	fa02 f303 	lsl.w	r3, r2, r3
 8007882:	69fa      	ldr	r2, [r7, #28]
 8007884:	4313      	orrs	r3, r2
 8007886:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	69fa      	ldr	r2, [r7, #28]
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	e067      	b.n	8007960 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	2b02      	cmp	r3, #2
 8007896:	d003      	beq.n	80078a0 <HAL_GPIO_Init+0x104>
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	2b12      	cmp	r3, #18
 800789e:	d145      	bne.n	800792c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	08da      	lsrs	r2, r3, #3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3208      	adds	r2, #8
 80078a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	220f      	movs	r2, #15
 80078b8:	fa02 f303 	lsl.w	r3, r2, r3
 80078bc:	43db      	mvns	r3, r3
 80078be:	69fa      	ldr	r2, [r7, #28]
 80078c0:	4013      	ands	r3, r2
 80078c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	f003 020f 	and.w	r2, r3, #15
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f003 0307 	and.w	r3, r3, #7
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	fa02 f303 	lsl.w	r3, r2, r3
 80078d8:	69fa      	ldr	r2, [r7, #28]
 80078da:	4313      	orrs	r3, r2
 80078dc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	08da      	lsrs	r2, r3, #3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	3208      	adds	r2, #8
 80078e6:	69f9      	ldr	r1, [r7, #28]
 80078e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	2203      	movs	r2, #3
 80078f8:	fa02 f303 	lsl.w	r3, r2, r3
 80078fc:	43db      	mvns	r3, r3
 80078fe:	69fa      	ldr	r2, [r7, #28]
 8007900:	4013      	ands	r3, r2
 8007902:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f003 0203 	and.w	r2, r3, #3
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	fa02 f303 	lsl.w	r3, r2, r3
 8007914:	69fa      	ldr	r2, [r7, #28]
 8007916:	4313      	orrs	r3, r2
 8007918:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	69fa      	ldr	r2, [r7, #28]
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	e01e      	b.n	8007960 <HAL_GPIO_Init+0x1c4>
 8007922:	bf00      	nop
 8007924:	46020000 	.word	0x46020000
 8007928:	0801b244 	.word	0x0801b244
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	2203      	movs	r2, #3
 8007938:	fa02 f303 	lsl.w	r3, r2, r3
 800793c:	43db      	mvns	r3, r3
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	4013      	ands	r3, r2
 8007942:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f003 0203 	and.w	r2, r3, #3
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	005b      	lsls	r3, r3, #1
 8007950:	fa02 f303 	lsl.w	r3, r2, r3
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	4313      	orrs	r3, r2
 8007958:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	69fa      	ldr	r2, [r7, #28]
 800795e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d00b      	beq.n	8007980 <HAL_GPIO_Init+0x1e4>
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	2b02      	cmp	r3, #2
 800796e:	d007      	beq.n	8007980 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007974:	2b11      	cmp	r3, #17
 8007976:	d003      	beq.n	8007980 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	2b12      	cmp	r3, #18
 800797e:	d130      	bne.n	80079e2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	2203      	movs	r2, #3
 800798c:	fa02 f303 	lsl.w	r3, r2, r3
 8007990:	43db      	mvns	r3, r3
 8007992:	69fa      	ldr	r2, [r7, #28]
 8007994:	4013      	ands	r3, r2
 8007996:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	68da      	ldr	r2, [r3, #12]
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	fa02 f303 	lsl.w	r3, r2, r3
 80079a4:	69fa      	ldr	r2, [r7, #28]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	69fa      	ldr	r2, [r7, #28]
 80079ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80079b6:	2201      	movs	r2, #1
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	fa02 f303 	lsl.w	r3, r2, r3
 80079be:	43db      	mvns	r3, r3
 80079c0:	69fa      	ldr	r2, [r7, #28]
 80079c2:	4013      	ands	r3, r2
 80079c4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	091b      	lsrs	r3, r3, #4
 80079cc:	f003 0201 	and.w	r2, r3, #1
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	fa02 f303 	lsl.w	r3, r2, r3
 80079d6:	69fa      	ldr	r2, [r7, #28]
 80079d8:	4313      	orrs	r3, r2
 80079da:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d017      	beq.n	8007a1a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	2203      	movs	r2, #3
 80079f6:	fa02 f303 	lsl.w	r3, r2, r3
 80079fa:	43db      	mvns	r3, r3
 80079fc:	69fa      	ldr	r2, [r7, #28]
 80079fe:	4013      	ands	r3, r2
 8007a00:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	69fa      	ldr	r2, [r7, #28]
 8007a18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d07c      	beq.n	8007b20 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007a26:	4a47      	ldr	r2, [pc, #284]	; (8007b44 <HAL_GPIO_Init+0x3a8>)
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	089b      	lsrs	r3, r3, #2
 8007a2c:	3318      	adds	r3, #24
 8007a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a32:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f003 0303 	and.w	r3, r3, #3
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	220f      	movs	r2, #15
 8007a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a42:	43db      	mvns	r3, r3
 8007a44:	69fa      	ldr	r2, [r7, #28]
 8007a46:	4013      	ands	r3, r2
 8007a48:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	0a9a      	lsrs	r2, r3, #10
 8007a4e:	4b3e      	ldr	r3, [pc, #248]	; (8007b48 <HAL_GPIO_Init+0x3ac>)
 8007a50:	4013      	ands	r3, r2
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	f002 0203 	and.w	r2, r2, #3
 8007a58:	00d2      	lsls	r2, r2, #3
 8007a5a:	4093      	lsls	r3, r2
 8007a5c:	69fa      	ldr	r2, [r7, #28]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007a62:	4938      	ldr	r1, [pc, #224]	; (8007b44 <HAL_GPIO_Init+0x3a8>)
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	089b      	lsrs	r3, r3, #2
 8007a68:	3318      	adds	r3, #24
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8007a70:	4b34      	ldr	r3, [pc, #208]	; (8007b44 <HAL_GPIO_Init+0x3a8>)
 8007a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a76:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	69fa      	ldr	r2, [r7, #28]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_GPIO_Init+0x2fa>
        {
          tmp |= iocurrent;
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007a96:	4a2b      	ldr	r2, [pc, #172]	; (8007b44 <HAL_GPIO_Init+0x3a8>)
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        tmp = EXTI->EMR1;
 8007a9e:	4b29      	ldr	r3, [pc, #164]	; (8007b44 <HAL_GPIO_Init+0x3a8>)
 8007aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aa4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	43db      	mvns	r3, r3
 8007aaa:	69fa      	ldr	r2, [r7, #28]
 8007aac:	4013      	ands	r3, r2
 8007aae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <HAL_GPIO_Init+0x328>
        {
          tmp |= iocurrent;
 8007abc:	69fa      	ldr	r2, [r7, #28]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007ac4:	4a1f      	ldr	r2, [pc, #124]	; (8007b44 <HAL_GPIO_Init+0x3a8>)
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007acc:	4b1d      	ldr	r3, [pc, #116]	; (8007b44 <HAL_GPIO_Init+0x3a8>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	43db      	mvns	r3, r3
 8007ad6:	69fa      	ldr	r2, [r7, #28]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <HAL_GPIO_Init+0x354>
        {
          tmp |= iocurrent;
 8007ae8:	69fa      	ldr	r2, [r7, #28]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007af0:	4a14      	ldr	r2, [pc, #80]	; (8007b44 <HAL_GPIO_Init+0x3a8>)
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007af6:	4b13      	ldr	r3, [pc, #76]	; (8007b44 <HAL_GPIO_Init+0x3a8>)
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	43db      	mvns	r3, r3
 8007b00:	69fa      	ldr	r2, [r7, #28]
 8007b02:	4013      	ands	r3, r2
 8007b04:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <HAL_GPIO_Init+0x37e>
        {
          tmp |= iocurrent;
 8007b12:	69fa      	ldr	r2, [r7, #28]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007b1a:	4a0a      	ldr	r2, [pc, #40]	; (8007b44 <HAL_GPIO_Init+0x3a8>)
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	6053      	str	r3, [r2, #4]
      }
    }
    position++;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	3301      	adds	r3, #1
 8007b24:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f47f ae3d 	bne.w	80077b0 <HAL_GPIO_Init+0x14>
  }
}
 8007b36:	bf00      	nop
 8007b38:	bf00      	nop
 8007b3a:	3724      	adds	r7, #36	; 0x24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	46022000 	.word	0x46022000
 8007b48:	002f7f7f 	.word	0x002f7f7f

08007b4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b089      	sub	sp, #36	; 0x24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8007b5e:	e0bc      	b.n	8007cda <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8007b60:	2201      	movs	r2, #1
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	fa02 f303 	lsl.w	r3, r2, r3
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 80ad 	beq.w	8007cd4 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a5e      	ldr	r2, [pc, #376]	; (8007cf8 <HAL_GPIO_DeInit+0x1ac>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d115      	bne.n	8007bae <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8007b82:	4a5e      	ldr	r2, [pc, #376]	; (8007cfc <HAL_GPIO_DeInit+0x1b0>)
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b8a:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007b8c:	4a5b      	ldr	r2, [pc, #364]	; (8007cfc <HAL_GPIO_DeInit+0x1b0>)
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	00db      	lsls	r3, r3, #3
 8007b92:	4413      	add	r3, r2
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8007b98:	4b57      	ldr	r3, [pc, #348]	; (8007cf8 <HAL_GPIO_DeInit+0x1ac>)
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	2101      	movs	r1, #1
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba4:	43db      	mvns	r3, r3
 8007ba6:	4954      	ldr	r1, [pc, #336]	; (8007cf8 <HAL_GPIO_DeInit+0x1ac>)
 8007ba8:	4013      	ands	r3, r2
 8007baa:	600b      	str	r3, [r1, #0]
 8007bac:	e053      	b.n	8007c56 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8007bae:	4a54      	ldr	r2, [pc, #336]	; (8007d00 <HAL_GPIO_DeInit+0x1b4>)
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	089b      	lsrs	r3, r3, #2
 8007bb4:	3318      	adds	r3, #24
 8007bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bba:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	f003 0303 	and.w	r3, r3, #3
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	220f      	movs	r2, #15
 8007bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	4013      	ands	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	0a9a      	lsrs	r2, r3, #10
 8007bd4:	4b4b      	ldr	r3, [pc, #300]	; (8007d04 <HAL_GPIO_DeInit+0x1b8>)
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	f002 0203 	and.w	r2, r2, #3
 8007bde:	00d2      	lsls	r2, r2, #3
 8007be0:	4093      	lsls	r3, r2
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d136      	bne.n	8007c56 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8007be8:	4b45      	ldr	r3, [pc, #276]	; (8007d00 <HAL_GPIO_DeInit+0x1b4>)
 8007bea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	43db      	mvns	r3, r3
 8007bf2:	4943      	ldr	r1, [pc, #268]	; (8007d00 <HAL_GPIO_DeInit+0x1b4>)
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8007bfa:	4b41      	ldr	r3, [pc, #260]	; (8007d00 <HAL_GPIO_DeInit+0x1b4>)
 8007bfc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	43db      	mvns	r3, r3
 8007c04:	493e      	ldr	r1, [pc, #248]	; (8007d00 <HAL_GPIO_DeInit+0x1b4>)
 8007c06:	4013      	ands	r3, r2
 8007c08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8007c0c:	4b3c      	ldr	r3, [pc, #240]	; (8007d00 <HAL_GPIO_DeInit+0x1b4>)
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	43db      	mvns	r3, r3
 8007c14:	493a      	ldr	r1, [pc, #232]	; (8007d00 <HAL_GPIO_DeInit+0x1b4>)
 8007c16:	4013      	ands	r3, r2
 8007c18:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8007c1a:	4b39      	ldr	r3, [pc, #228]	; (8007d00 <HAL_GPIO_DeInit+0x1b4>)
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	43db      	mvns	r3, r3
 8007c22:	4937      	ldr	r1, [pc, #220]	; (8007d00 <HAL_GPIO_DeInit+0x1b4>)
 8007c24:	4013      	ands	r3, r2
 8007c26:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	f003 0303 	and.w	r3, r3, #3
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	220f      	movs	r2, #15
 8007c32:	fa02 f303 	lsl.w	r3, r2, r3
 8007c36:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8007c38:	4a31      	ldr	r2, [pc, #196]	; (8007d00 <HAL_GPIO_DeInit+0x1b4>)
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	089b      	lsrs	r3, r3, #2
 8007c3e:	3318      	adds	r3, #24
 8007c40:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	43da      	mvns	r2, r3
 8007c48:	482d      	ldr	r0, [pc, #180]	; (8007d00 <HAL_GPIO_DeInit+0x1b4>)
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	089b      	lsrs	r3, r3, #2
 8007c4e:	400a      	ands	r2, r1
 8007c50:	3318      	adds	r3, #24
 8007c52:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	2103      	movs	r1, #3
 8007c60:	fa01 f303 	lsl.w	r3, r1, r3
 8007c64:	431a      	orrs	r2, r3
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	08da      	lsrs	r2, r3, #3
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	3208      	adds	r2, #8
 8007c72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	220f      	movs	r2, #15
 8007c80:	fa02 f303 	lsl.w	r3, r2, r3
 8007c84:	43db      	mvns	r3, r3
 8007c86:	69fa      	ldr	r2, [r7, #28]
 8007c88:	08d2      	lsrs	r2, r2, #3
 8007c8a:	4019      	ands	r1, r3
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	3208      	adds	r2, #8
 8007c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	689a      	ldr	r2, [r3, #8]
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	2103      	movs	r1, #3
 8007c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca2:	43db      	mvns	r3, r3
 8007ca4:	401a      	ands	r2, r3
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	2101      	movs	r1, #1
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb6:	43db      	mvns	r3, r3
 8007cb8:	401a      	ands	r2, r3
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	68da      	ldr	r2, [r3, #12]
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	2103      	movs	r1, #3
 8007cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ccc:	43db      	mvns	r3, r3
 8007cce:	401a      	ands	r2, r3
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f47f af3c 	bne.w	8007b60 <HAL_GPIO_DeInit+0x14>
  }
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	3724      	adds	r7, #36	; 0x24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	46020000 	.word	0x46020000
 8007cfc:	0801b244 	.word	0x0801b244
 8007d00:	46022000 	.word	0x46022000
 8007d04:	002f7f7f 	.word	0x002f7f7f

08007d08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	691a      	ldr	r2, [r3, #16]
 8007d18:	887b      	ldrh	r3, [r7, #2]
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d20:	2301      	movs	r3, #1
 8007d22:	73fb      	strb	r3, [r7, #15]
 8007d24:	e001      	b.n	8007d2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	807b      	strh	r3, [r7, #2]
 8007d44:	4613      	mov	r3, r2
 8007d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d48:	787b      	ldrb	r3, [r7, #1]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007d4e:	887a      	ldrh	r2, [r7, #2]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007d54:	e002      	b.n	8007d5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8007d56:	887a      	ldrh	r2, [r7, #2]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8007d72:	4b0f      	ldr	r3, [pc, #60]	; (8007db0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007d74:	68da      	ldr	r2, [r3, #12]
 8007d76:	88fb      	ldrh	r3, [r7, #6]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d006      	beq.n	8007d8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007d7e:	4a0c      	ldr	r2, [pc, #48]	; (8007db0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007d80:	88fb      	ldrh	r3, [r7, #6]
 8007d82:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007d84:	88fb      	ldrh	r3, [r7, #6]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fa f97e 	bl	8002088 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8007d8c:	4b08      	ldr	r3, [pc, #32]	; (8007db0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007d8e:	691a      	ldr	r2, [r3, #16]
 8007d90:	88fb      	ldrh	r3, [r7, #6]
 8007d92:	4013      	ands	r3, r2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d006      	beq.n	8007da6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007d98:	4a05      	ldr	r2, [pc, #20]	; (8007db0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007d9a:	88fb      	ldrh	r3, [r7, #6]
 8007d9c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007d9e:	88fb      	ldrh	r3, [r7, #6]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 f807 	bl	8007db4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007da6:	bf00      	nop
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	46022000 	.word	0x46022000

08007db4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b082      	sub	sp, #8
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e081      	b.n	8007ee0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d106      	bne.n	8007df6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7f9 ff71 	bl	8001cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2224      	movs	r2, #36	; 0x24
 8007dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0201 	bic.w	r2, r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685a      	ldr	r2, [r3, #4]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e1a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689a      	ldr	r2, [r3, #8]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e2a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d107      	bne.n	8007e44 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	689a      	ldr	r2, [r3, #8]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e40:	609a      	str	r2, [r3, #8]
 8007e42:	e006      	b.n	8007e52 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007e50:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d104      	bne.n	8007e64 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e62:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6812      	ldr	r2, [r2, #0]
 8007e6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e76:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e86:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	691a      	ldr	r2, [r3, #16]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	ea42 0103 	orr.w	r1, r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	021a      	lsls	r2, r3, #8
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	69d9      	ldr	r1, [r3, #28]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1a      	ldr	r2, [r3, #32]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f042 0201 	orr.w	r2, r2, #1
 8007ec0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2220      	movs	r2, #32
 8007ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e021      	b.n	8007f3e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2224      	movs	r2, #36	; 0x24
 8007efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 0201 	bic.w	r2, r2, #1
 8007f10:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7f9 ff44 	bl	8001da0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
	...

08007f48 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af02      	add	r7, sp, #8
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	4608      	mov	r0, r1
 8007f52:	4611      	mov	r1, r2
 8007f54:	461a      	mov	r2, r3
 8007f56:	4603      	mov	r3, r0
 8007f58:	817b      	strh	r3, [r7, #10]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	813b      	strh	r3, [r7, #8]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b20      	cmp	r3, #32
 8007f6c:	f040 80f9 	bne.w	8008162 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <HAL_I2C_Mem_Write+0x34>
 8007f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d105      	bne.n	8007f88 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e0ed      	b.n	8008164 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d101      	bne.n	8007f96 <HAL_I2C_Mem_Write+0x4e>
 8007f92:	2302      	movs	r3, #2
 8007f94:	e0e6      	b.n	8008164 <HAL_I2C_Mem_Write+0x21c>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f9e:	f7fe fc9b 	bl	80068d8 <HAL_GetTick>
 8007fa2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	2319      	movs	r3, #25
 8007faa:	2201      	movs	r2, #1
 8007fac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 fadd 	bl	8008570 <I2C_WaitOnFlagUntilTimeout>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e0d1      	b.n	8008164 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2221      	movs	r2, #33	; 0x21
 8007fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2240      	movs	r2, #64	; 0x40
 8007fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6a3a      	ldr	r2, [r7, #32]
 8007fda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fe8:	88f8      	ldrh	r0, [r7, #6]
 8007fea:	893a      	ldrh	r2, [r7, #8]
 8007fec:	8979      	ldrh	r1, [r7, #10]
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	9301      	str	r3, [sp, #4]
 8007ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 f9ed 	bl	80083d8 <I2C_RequestMemoryWrite>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d005      	beq.n	8008010 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e0a9      	b.n	8008164 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008014:	b29b      	uxth	r3, r3
 8008016:	2bff      	cmp	r3, #255	; 0xff
 8008018:	d90e      	bls.n	8008038 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	22ff      	movs	r2, #255	; 0xff
 800801e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008024:	b2da      	uxtb	r2, r3
 8008026:	8979      	ldrh	r1, [r7, #10]
 8008028:	2300      	movs	r3, #0
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 fc09 	bl	8008848 <I2C_TransferConfig>
 8008036:	e00f      	b.n	8008058 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800803c:	b29a      	uxth	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008046:	b2da      	uxtb	r2, r3
 8008048:	8979      	ldrh	r1, [r7, #10]
 800804a:	2300      	movs	r3, #0
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f000 fbf8 	bl	8008848 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008058:	697a      	ldr	r2, [r7, #20]
 800805a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 fac7 	bl	80085f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e07b      	b.n	8008164 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	781a      	ldrb	r2, [r3, #0]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	1c5a      	adds	r2, r3, #1
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008086:	b29b      	uxth	r3, r3
 8008088:	3b01      	subs	r3, #1
 800808a:	b29a      	uxth	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008094:	3b01      	subs	r3, #1
 8008096:	b29a      	uxth	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d034      	beq.n	8008110 <HAL_I2C_Mem_Write+0x1c8>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d130      	bne.n	8008110 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b4:	2200      	movs	r2, #0
 80080b6:	2180      	movs	r1, #128	; 0x80
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 fa59 	bl	8008570 <I2C_WaitOnFlagUntilTimeout>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e04d      	b.n	8008164 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	2bff      	cmp	r3, #255	; 0xff
 80080d0:	d90e      	bls.n	80080f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	22ff      	movs	r2, #255	; 0xff
 80080d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	8979      	ldrh	r1, [r7, #10]
 80080e0:	2300      	movs	r3, #0
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 fbad 	bl	8008848 <I2C_TransferConfig>
 80080ee:	e00f      	b.n	8008110 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	8979      	ldrh	r1, [r7, #10]
 8008102:	2300      	movs	r3, #0
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 fb9c 	bl	8008848 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008114:	b29b      	uxth	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d19e      	bne.n	8008058 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 faa6 	bl	8008670 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e01a      	b.n	8008164 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2220      	movs	r2, #32
 8008134:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6859      	ldr	r1, [r3, #4]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	4b0a      	ldr	r3, [pc, #40]	; (800816c <HAL_I2C_Mem_Write+0x224>)
 8008142:	400b      	ands	r3, r1
 8008144:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2220      	movs	r2, #32
 800814a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	e000      	b.n	8008164 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008162:	2302      	movs	r3, #2
  }
}
 8008164:	4618      	mov	r0, r3
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	fe00e800 	.word	0xfe00e800

08008170 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af02      	add	r7, sp, #8
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	4608      	mov	r0, r1
 800817a:	4611      	mov	r1, r2
 800817c:	461a      	mov	r2, r3
 800817e:	4603      	mov	r3, r0
 8008180:	817b      	strh	r3, [r7, #10]
 8008182:	460b      	mov	r3, r1
 8008184:	813b      	strh	r3, [r7, #8]
 8008186:	4613      	mov	r3, r2
 8008188:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b20      	cmp	r3, #32
 8008194:	f040 80fd 	bne.w	8008392 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d002      	beq.n	80081a4 <HAL_I2C_Mem_Read+0x34>
 800819e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d105      	bne.n	80081b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e0f1      	b.n	8008394 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d101      	bne.n	80081be <HAL_I2C_Mem_Read+0x4e>
 80081ba:	2302      	movs	r3, #2
 80081bc:	e0ea      	b.n	8008394 <HAL_I2C_Mem_Read+0x224>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80081c6:	f7fe fb87 	bl	80068d8 <HAL_GetTick>
 80081ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	2319      	movs	r3, #25
 80081d2:	2201      	movs	r2, #1
 80081d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 f9c9 	bl	8008570 <I2C_WaitOnFlagUntilTimeout>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e0d5      	b.n	8008394 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2222      	movs	r2, #34	; 0x22
 80081ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2240      	movs	r2, #64	; 0x40
 80081f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6a3a      	ldr	r2, [r7, #32]
 8008202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008210:	88f8      	ldrh	r0, [r7, #6]
 8008212:	893a      	ldrh	r2, [r7, #8]
 8008214:	8979      	ldrh	r1, [r7, #10]
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	4603      	mov	r3, r0
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 f92d 	bl	8008480 <I2C_RequestMemoryRead>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d005      	beq.n	8008238 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e0ad      	b.n	8008394 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800823c:	b29b      	uxth	r3, r3
 800823e:	2bff      	cmp	r3, #255	; 0xff
 8008240:	d90e      	bls.n	8008260 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	22ff      	movs	r2, #255	; 0xff
 8008246:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800824c:	b2da      	uxtb	r2, r3
 800824e:	8979      	ldrh	r1, [r7, #10]
 8008250:	4b52      	ldr	r3, [pc, #328]	; (800839c <HAL_I2C_Mem_Read+0x22c>)
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 faf5 	bl	8008848 <I2C_TransferConfig>
 800825e:	e00f      	b.n	8008280 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008264:	b29a      	uxth	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800826e:	b2da      	uxtb	r2, r3
 8008270:	8979      	ldrh	r1, [r7, #10]
 8008272:	4b4a      	ldr	r3, [pc, #296]	; (800839c <HAL_I2C_Mem_Read+0x22c>)
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 fae4 	bl	8008848 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	2200      	movs	r2, #0
 8008288:	2104      	movs	r1, #4
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 f970 	bl	8008570 <I2C_WaitOnFlagUntilTimeout>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e07c      	b.n	8008394 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	b2d2      	uxtb	r2, r2
 80082a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082b6:	3b01      	subs	r3, #1
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	3b01      	subs	r3, #1
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d034      	beq.n	8008340 <HAL_I2C_Mem_Read+0x1d0>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d130      	bne.n	8008340 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e4:	2200      	movs	r2, #0
 80082e6:	2180      	movs	r1, #128	; 0x80
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 f941 	bl	8008570 <I2C_WaitOnFlagUntilTimeout>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e04d      	b.n	8008394 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	2bff      	cmp	r3, #255	; 0xff
 8008300:	d90e      	bls.n	8008320 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	22ff      	movs	r2, #255	; 0xff
 8008306:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800830c:	b2da      	uxtb	r2, r3
 800830e:	8979      	ldrh	r1, [r7, #10]
 8008310:	2300      	movs	r3, #0
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 fa95 	bl	8008848 <I2C_TransferConfig>
 800831e:	e00f      	b.n	8008340 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008324:	b29a      	uxth	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800832e:	b2da      	uxtb	r2, r3
 8008330:	8979      	ldrh	r1, [r7, #10]
 8008332:	2300      	movs	r3, #0
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f000 fa84 	bl	8008848 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008344:	b29b      	uxth	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	d19a      	bne.n	8008280 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 f98e 	bl	8008670 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e01a      	b.n	8008394 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2220      	movs	r2, #32
 8008364:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6859      	ldr	r1, [r3, #4]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	4b0b      	ldr	r3, [pc, #44]	; (80083a0 <HAL_I2C_Mem_Read+0x230>)
 8008372:	400b      	ands	r3, r1
 8008374:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2220      	movs	r2, #32
 800837a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	e000      	b.n	8008394 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008392:	2302      	movs	r3, #2
  }
}
 8008394:	4618      	mov	r0, r3
 8008396:	3718      	adds	r7, #24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	80002400 	.word	0x80002400
 80083a0:	fe00e800 	.word	0xfe00e800

080083a4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083b2:	b2db      	uxtb	r3, r3
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af02      	add	r7, sp, #8
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	4608      	mov	r0, r1
 80083e2:	4611      	mov	r1, r2
 80083e4:	461a      	mov	r2, r3
 80083e6:	4603      	mov	r3, r0
 80083e8:	817b      	strh	r3, [r7, #10]
 80083ea:	460b      	mov	r3, r1
 80083ec:	813b      	strh	r3, [r7, #8]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	8979      	ldrh	r1, [r7, #10]
 80083f8:	4b20      	ldr	r3, [pc, #128]	; (800847c <I2C_RequestMemoryWrite+0xa4>)
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 fa21 	bl	8008848 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008406:	69fa      	ldr	r2, [r7, #28]
 8008408:	69b9      	ldr	r1, [r7, #24]
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f000 f8f0 	bl	80085f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e02c      	b.n	8008474 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800841a:	88fb      	ldrh	r3, [r7, #6]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d105      	bne.n	800842c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008420:	893b      	ldrh	r3, [r7, #8]
 8008422:	b2da      	uxtb	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	629a      	str	r2, [r3, #40]	; 0x28
 800842a:	e015      	b.n	8008458 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800842c:	893b      	ldrh	r3, [r7, #8]
 800842e:	0a1b      	lsrs	r3, r3, #8
 8008430:	b29b      	uxth	r3, r3
 8008432:	b2da      	uxtb	r2, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	69b9      	ldr	r1, [r7, #24]
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 f8d6 	bl	80085f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e012      	b.n	8008474 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800844e:	893b      	ldrh	r3, [r7, #8]
 8008450:	b2da      	uxtb	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	2200      	movs	r2, #0
 8008460:	2180      	movs	r1, #128	; 0x80
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 f884 	bl	8008570 <I2C_WaitOnFlagUntilTimeout>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e000      	b.n	8008474 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	80002000 	.word	0x80002000

08008480 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af02      	add	r7, sp, #8
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	4608      	mov	r0, r1
 800848a:	4611      	mov	r1, r2
 800848c:	461a      	mov	r2, r3
 800848e:	4603      	mov	r3, r0
 8008490:	817b      	strh	r3, [r7, #10]
 8008492:	460b      	mov	r3, r1
 8008494:	813b      	strh	r3, [r7, #8]
 8008496:	4613      	mov	r3, r2
 8008498:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800849a:	88fb      	ldrh	r3, [r7, #6]
 800849c:	b2da      	uxtb	r2, r3
 800849e:	8979      	ldrh	r1, [r7, #10]
 80084a0:	4b20      	ldr	r3, [pc, #128]	; (8008524 <I2C_RequestMemoryRead+0xa4>)
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	2300      	movs	r3, #0
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 f9ce 	bl	8008848 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084ac:	69fa      	ldr	r2, [r7, #28]
 80084ae:	69b9      	ldr	r1, [r7, #24]
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f000 f89d 	bl	80085f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e02c      	b.n	800851a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084c0:	88fb      	ldrh	r3, [r7, #6]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d105      	bne.n	80084d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084c6:	893b      	ldrh	r3, [r7, #8]
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	629a      	str	r2, [r3, #40]	; 0x28
 80084d0:	e015      	b.n	80084fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80084d2:	893b      	ldrh	r3, [r7, #8]
 80084d4:	0a1b      	lsrs	r3, r3, #8
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084e0:	69fa      	ldr	r2, [r7, #28]
 80084e2:	69b9      	ldr	r1, [r7, #24]
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 f883 	bl	80085f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e012      	b.n	800851a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084f4:	893b      	ldrh	r3, [r7, #8]
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	2200      	movs	r2, #0
 8008506:	2140      	movs	r1, #64	; 0x40
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 f831 	bl	8008570 <I2C_WaitOnFlagUntilTimeout>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d001      	beq.n	8008518 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e000      	b.n	800851a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	80002000 	.word	0x80002000

08008528 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b02      	cmp	r3, #2
 800853c:	d103      	bne.n	8008546 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2200      	movs	r2, #0
 8008544:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	2b01      	cmp	r3, #1
 8008552:	d007      	beq.n	8008564 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699a      	ldr	r2, [r3, #24]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	619a      	str	r2, [r3, #24]
  }
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	4613      	mov	r3, r2
 800857e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008580:	e022      	b.n	80085c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008588:	d01e      	beq.n	80085c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800858a:	f7fe f9a5 	bl	80068d8 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	429a      	cmp	r2, r3
 8008598:	d302      	bcc.n	80085a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d113      	bne.n	80085c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a4:	f043 0220 	orr.w	r2, r3, #32
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e00f      	b.n	80085e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699a      	ldr	r2, [r3, #24]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	4013      	ands	r3, r2
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	bf0c      	ite	eq
 80085d8:	2301      	moveq	r3, #1
 80085da:	2300      	movne	r3, #0
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	461a      	mov	r2, r3
 80085e0:	79fb      	ldrb	r3, [r7, #7]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d0cd      	beq.n	8008582 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80085fc:	e02c      	b.n	8008658 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	68b9      	ldr	r1, [r7, #8]
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 f870 	bl	80086e8 <I2C_IsErrorOccurred>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e02a      	b.n	8008668 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008618:	d01e      	beq.n	8008658 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800861a:	f7fe f95d 	bl	80068d8 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	429a      	cmp	r2, r3
 8008628:	d302      	bcc.n	8008630 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d113      	bne.n	8008658 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008634:	f043 0220 	orr.w	r2, r3, #32
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2220      	movs	r2, #32
 8008640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e007      	b.n	8008668 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b02      	cmp	r3, #2
 8008664:	d1cb      	bne.n	80085fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800867c:	e028      	b.n	80086d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	68b9      	ldr	r1, [r7, #8]
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f000 f830 	bl	80086e8 <I2C_IsErrorOccurred>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e026      	b.n	80086e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008692:	f7fe f921 	bl	80068d8 <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d302      	bcc.n	80086a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d113      	bne.n	80086d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ac:	f043 0220 	orr.w	r2, r3, #32
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2220      	movs	r2, #32
 80086b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e007      	b.n	80086e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b20      	cmp	r3, #32
 80086dc:	d1cf      	bne.n	800867e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b088      	sub	sp, #32
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hi2c->Instance->ISR;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 8008700:	2300      	movs	r3, #0
 8008702:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f003 0310 	and.w	r3, r3, #16
 800870a:	2b00      	cmp	r3, #0
 800870c:	d040      	beq.n	8008790 <I2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008718:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800871c:	d01d      	beq.n	800875a <I2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800872c:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800872e:	e014      	b.n	800875a <I2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d010      	beq.n	800875a <I2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008738:	f7fe f8ce 	bl	80068d8 <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	429a      	cmp	r2, r3
 8008746:	d302      	bcc.n	800874e <I2C_IsErrorOccurred+0x66>
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d105      	bne.n	800875a <I2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_I2C_ERROR_TIMEOUT;
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	f043 0320 	orr.w	r3, r3, #32
 8008754:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	f003 0320 	and.w	r3, r3, #32
 8008764:	2b20      	cmp	r3, #32
 8008766:	d002      	beq.n	800876e <I2C_IsErrorOccurred+0x86>
 8008768:	7ffb      	ldrb	r3, [r7, #31]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0e0      	beq.n	8008730 <I2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800876e:	7ffb      	ldrb	r3, [r7, #31]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d103      	bne.n	800877c <I2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2220      	movs	r2, #32
 800877a:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2210      	movs	r2, #16
 8008782:	61da      	str	r2, [r3, #28]

    error_code |= HAL_I2C_ERROR_AF;
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	f043 0304 	orr.w	r3, r3, #4
 800878a:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	617b      	str	r3, [r7, #20]

  /* Then verify if an additionnal errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <I2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	f043 0301 	orr.w	r3, r3, #1
 80087a8:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00a      	beq.n	80087d8 <I2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	f043 0308 	orr.w	r3, r3, #8
 80087c8:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00a      	beq.n	80087f8 <I2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	f043 0302 	orr.w	r3, r3, #2
 80087e8:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 80087f8:	7ffb      	ldrb	r3, [r7, #31]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d01c      	beq.n	8008838 <I2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f7ff fe92 	bl	8008528 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6859      	ldr	r1, [r3, #4]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <I2C_IsErrorOccurred+0x15c>)
 8008810:	400b      	ands	r3, r1
 8008812:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	431a      	orrs	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2220      	movs	r2, #32
 8008824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008838:	7ffb      	ldrb	r3, [r7, #31]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3720      	adds	r7, #32
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	fe00e800 	.word	0xfe00e800

08008848 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	607b      	str	r3, [r7, #4]
 8008852:	460b      	mov	r3, r1
 8008854:	817b      	strh	r3, [r7, #10]
 8008856:	4613      	mov	r3, r2
 8008858:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	0d5b      	lsrs	r3, r3, #21
 8008864:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008868:	4b0d      	ldr	r3, [pc, #52]	; (80088a0 <I2C_TransferConfig+0x58>)
 800886a:	430b      	orrs	r3, r1
 800886c:	43db      	mvns	r3, r3
 800886e:	ea02 0103 	and.w	r1, r2, r3
 8008872:	897b      	ldrh	r3, [r7, #10]
 8008874:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008878:	7a7b      	ldrb	r3, [r7, #9]
 800887a:	041b      	lsls	r3, r3, #16
 800887c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008880:	431a      	orrs	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	431a      	orrs	r2, r3
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	431a      	orrs	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	430a      	orrs	r2, r1
 8008890:	605a      	str	r2, [r3, #4]
                                    (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                                    I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8008892:	bf00      	nop
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	03ff63ff 	.word	0x03ff63ff

080088a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b20      	cmp	r3, #32
 80088b8:	d138      	bne.n	800892c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d101      	bne.n	80088c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80088c4:	2302      	movs	r3, #2
 80088c6:	e032      	b.n	800892e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2224      	movs	r2, #36	; 0x24
 80088d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0201 	bic.w	r2, r2, #1
 80088e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80088f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6819      	ldr	r1, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f042 0201 	orr.w	r2, r2, #1
 8008916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2220      	movs	r2, #32
 800891c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	e000      	b.n	800892e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800892c:	2302      	movs	r3, #2
  }
}
 800892e:	4618      	mov	r0, r3
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800893a:	b480      	push	{r7}
 800893c:	b085      	sub	sp, #20
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b20      	cmp	r3, #32
 800894e:	d139      	bne.n	80089c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008956:	2b01      	cmp	r3, #1
 8008958:	d101      	bne.n	800895e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800895a:	2302      	movs	r3, #2
 800895c:	e033      	b.n	80089c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2224      	movs	r2, #36	; 0x24
 800896a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 0201 	bic.w	r2, r2, #1
 800897c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800898c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	021b      	lsls	r3, r3, #8
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	4313      	orrs	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f042 0201 	orr.w	r2, r2, #1
 80089ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2220      	movs	r2, #32
 80089b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	e000      	b.n	80089c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80089c4:	2302      	movs	r3, #2
  }
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
	...

080089d4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80089dc:	4b34      	ldr	r3, [pc, #208]	; (8008ab0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80089de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80089e4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d101      	bne.n	80089f2 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	e057      	b.n	8008aa2 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089f8:	d90a      	bls.n	8008a10 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80089fa:	4b2d      	ldr	r3, [pc, #180]	; (8008ab0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	4a2a      	ldr	r2, [pc, #168]	; (8008ab0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a0c:	60d3      	str	r3, [r2, #12]
 8008a0e:	e007      	b.n	8008a20 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8008a10:	4b27      	ldr	r3, [pc, #156]	; (8008ab0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008a18:	4925      	ldr	r1, [pc, #148]	; (8008ab0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is rised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008a20:	4b24      	ldr	r3, [pc, #144]	; (8008ab4 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a24      	ldr	r2, [pc, #144]	; (8008ab8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8008a26:	fba2 2303 	umull	r2, r3, r2, r3
 8008a2a:	099b      	lsrs	r3, r3, #6
 8008a2c:	2232      	movs	r2, #50	; 0x32
 8008a2e:	fb02 f303 	mul.w	r3, r2, r3
 8008a32:	4a21      	ldr	r2, [pc, #132]	; (8008ab8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8008a34:	fba2 2303 	umull	r2, r3, r2, r3
 8008a38:	099b      	lsrs	r3, r3, #6
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8008a3e:	e002      	b.n	8008a46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8008a46:	4b1a      	ldr	r3, [pc, #104]	; (8008ab0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d102      	bne.n	8008a58 <HAL_PWREx_ControlVoltageScaling+0x84>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1f3      	bne.n	8008a40 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d01b      	beq.n	8008a96 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is rised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008a5e:	4b15      	ldr	r3, [pc, #84]	; (8008ab4 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a15      	ldr	r2, [pc, #84]	; (8008ab8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8008a64:	fba2 2303 	umull	r2, r3, r2, r3
 8008a68:	099b      	lsrs	r3, r3, #6
 8008a6a:	2232      	movs	r2, #50	; 0x32
 8008a6c:	fb02 f303 	mul.w	r3, r2, r3
 8008a70:	4a11      	ldr	r2, [pc, #68]	; (8008ab8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8008a72:	fba2 2303 	umull	r2, r3, r2, r3
 8008a76:	099b      	lsrs	r3, r3, #6
 8008a78:	3301      	adds	r3, #1
 8008a7a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008a7c:	e002      	b.n	8008a84 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3b01      	subs	r3, #1
 8008a82:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008a84:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d102      	bne.n	8008a96 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1f3      	bne.n	8008a7e <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d101      	bne.n	8008aa0 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e000      	b.n	8008aa2 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	46020800 	.word	0x46020800
 8008ab4:	20000010 	.word	0x20000010
 8008ab8:	10624dd3 	.word	0x10624dd3

08008abc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008abc:	b480      	push	{r7}
 8008abe:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8008ac0:	4b04      	ldr	r3, [pc, #16]	; (8008ad4 <HAL_PWREx_GetVoltageRange+0x18>)
 8008ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	46020800 	.word	0x46020800

08008ad8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8008adc:	4b05      	ldr	r3, [pc, #20]	; (8008af4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae0:	4a04      	ldr	r2, [pc, #16]	; (8008af4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008ae2:	f043 0301 	orr.w	r3, r3, #1
 8008ae6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8008ae8:	bf00      	nop
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	46020800 	.word	0x46020800

08008af8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b08c      	sub	sp, #48	; 0x30
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8008b00:	2300      	movs	r3, #0
 8008b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d102      	bne.n	8008b12 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	f000 be58 	b.w	80097c2 <HAL_RCC_OscConfig+0xcca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b12:	4ba2      	ldr	r3, [pc, #648]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	f003 030c 	and.w	r3, r3, #12
 8008b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b1c:	4b9f      	ldr	r3, [pc, #636]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b20:	f003 0303 	and.w	r3, r3, #3
 8008b24:	627b      	str	r3, [r7, #36]	; 0x24

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0310 	and.w	r3, r3, #16
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f000 816f 	beq.w	8008e12 <HAL_RCC_OscConfig+0x31a>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d007      	beq.n	8008b4a <HAL_RCC_OscConfig+0x52>
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	2b0c      	cmp	r3, #12
 8008b3e:	f040 80e1 	bne.w	8008d04 <HAL_RCC_OscConfig+0x20c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	f040 80dd 	bne.w	8008d04 <HAL_RCC_OscConfig+0x20c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008b4a:	4b94      	ldr	r3, [pc, #592]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0304 	and.w	r3, r3, #4
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d006      	beq.n	8008b64 <HAL_RCC_OscConfig+0x6c>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d102      	bne.n	8008b64 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	f000 be2f 	b.w	80097c2 <HAL_RCC_OscConfig+0xcca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b68:	4b8c      	ldr	r3, [pc, #560]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d004      	beq.n	8008b7e <HAL_RCC_OscConfig+0x86>
 8008b74:	4b89      	ldr	r3, [pc, #548]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b7c:	e005      	b.n	8008b8a <HAL_RCC_OscConfig+0x92>
 8008b7e:	4b87      	ldr	r3, [pc, #540]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b84:	041b      	lsls	r3, r3, #16
 8008b86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d255      	bcs.n	8008c3a <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10a      	bne.n	8008baa <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f001 f8dd 	bl	8009d58 <RCC_SetFlashLatencyFromMSIRange>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	f000 be0c 	b.w	80097c2 <HAL_RCC_OscConfig+0xcca>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008baa:	4b7c      	ldr	r3, [pc, #496]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	4a7b      	ldr	r2, [pc, #492]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008bb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008bb4:	6093      	str	r3, [r2, #8]
 8008bb6:	4b79      	ldr	r3, [pc, #484]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc2:	4976      	ldr	r1, [pc, #472]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bcc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008bd0:	d309      	bcc.n	8008be6 <HAL_RCC_OscConfig+0xee>
 8008bd2:	4b72      	ldr	r3, [pc, #456]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	f023 021f 	bic.w	r2, r3, #31
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	496f      	ldr	r1, [pc, #444]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008be0:	4313      	orrs	r3, r2
 8008be2:	60cb      	str	r3, [r1, #12]
 8008be4:	e07e      	b.n	8008ce4 <HAL_RCC_OscConfig+0x1ec>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	da0a      	bge.n	8008c04 <HAL_RCC_OscConfig+0x10c>
 8008bee:	4b6b      	ldr	r3, [pc, #428]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	015b      	lsls	r3, r3, #5
 8008bfc:	4967      	ldr	r1, [pc, #412]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	60cb      	str	r3, [r1, #12]
 8008c02:	e06f      	b.n	8008ce4 <HAL_RCC_OscConfig+0x1ec>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c0c:	d30a      	bcc.n	8008c24 <HAL_RCC_OscConfig+0x12c>
 8008c0e:	4b63      	ldr	r3, [pc, #396]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	029b      	lsls	r3, r3, #10
 8008c1c:	495f      	ldr	r1, [pc, #380]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	60cb      	str	r3, [r1, #12]
 8008c22:	e05f      	b.n	8008ce4 <HAL_RCC_OscConfig+0x1ec>
 8008c24:	4b5d      	ldr	r3, [pc, #372]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
 8008c30:	03db      	lsls	r3, r3, #15
 8008c32:	495a      	ldr	r1, [pc, #360]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008c34:	4313      	orrs	r3, r2
 8008c36:	60cb      	str	r3, [r1, #12]
 8008c38:	e054      	b.n	8008ce4 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008c3a:	4b58      	ldr	r3, [pc, #352]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	4a57      	ldr	r2, [pc, #348]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008c40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c44:	6093      	str	r3, [r2, #8]
 8008c46:	4b55      	ldr	r3, [pc, #340]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c52:	4952      	ldr	r1, [pc, #328]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008c54:	4313      	orrs	r3, r2
 8008c56:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008c60:	d309      	bcc.n	8008c76 <HAL_RCC_OscConfig+0x17e>
 8008c62:	4b4e      	ldr	r3, [pc, #312]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	f023 021f 	bic.w	r2, r3, #31
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	494b      	ldr	r1, [pc, #300]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60cb      	str	r3, [r1, #12]
 8008c74:	e028      	b.n	8008cc8 <HAL_RCC_OscConfig+0x1d0>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	da0a      	bge.n	8008c94 <HAL_RCC_OscConfig+0x19c>
 8008c7e:	4b47      	ldr	r3, [pc, #284]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	015b      	lsls	r3, r3, #5
 8008c8c:	4943      	ldr	r1, [pc, #268]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60cb      	str	r3, [r1, #12]
 8008c92:	e019      	b.n	8008cc8 <HAL_RCC_OscConfig+0x1d0>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c9c:	d30a      	bcc.n	8008cb4 <HAL_RCC_OscConfig+0x1bc>
 8008c9e:	4b3f      	ldr	r3, [pc, #252]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	029b      	lsls	r3, r3, #10
 8008cac:	493b      	ldr	r1, [pc, #236]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	60cb      	str	r3, [r1, #12]
 8008cb2:	e009      	b.n	8008cc8 <HAL_RCC_OscConfig+0x1d0>
 8008cb4:	4b39      	ldr	r3, [pc, #228]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a1b      	ldr	r3, [r3, #32]
 8008cc0:	03db      	lsls	r3, r3, #15
 8008cc2:	4936      	ldr	r1, [pc, #216]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10a      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f001 f840 	bl	8009d58 <RCC_SetFlashLatencyFromMSIRange>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d002      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	f000 bd6f 	b.w	80097c2 <HAL_RCC_OscConfig+0xcca>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8008ce4:	f000 ffe2 	bl	8009cac <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008ce8:	4b2d      	ldr	r3, [pc, #180]	; (8008da0 <HAL_RCC_OscConfig+0x2a8>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fd fda9 	bl	8006844 <HAL_InitTick>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK)
 8008cf6:	7ffb      	ldrb	r3, [r7, #31]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 8089 	beq.w	8008e10 <HAL_RCC_OscConfig+0x318>
        {
          return status;
 8008cfe:	7ffb      	ldrb	r3, [r7, #31]
 8008d00:	f000 bd5f 	b.w	80097c2 <HAL_RCC_OscConfig+0xcca>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d066      	beq.n	8008dda <HAL_RCC_OscConfig+0x2e2>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8008d0c:	4b23      	ldr	r3, [pc, #140]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a22      	ldr	r2, [pc, #136]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008d12:	f043 0301 	orr.w	r3, r3, #1
 8008d16:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008d18:	f7fd fdde 	bl	80068d8 <HAL_GetTick>
 8008d1c:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008d1e:	e009      	b.n	8008d34 <HAL_RCC_OscConfig+0x23c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008d20:	f7fd fdda 	bl	80068d8 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d902      	bls.n	8008d34 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	f000 bd47 	b.w	80097c2 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008d34:	4b19      	ldr	r3, [pc, #100]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0304 	and.w	r3, r3, #4
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0ef      	beq.n	8008d20 <HAL_RCC_OscConfig+0x228>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008d40:	4b16      	ldr	r3, [pc, #88]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	4a15      	ldr	r2, [pc, #84]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008d46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d4a:	6093      	str	r3, [r2, #8]
 8008d4c:	4b13      	ldr	r3, [pc, #76]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	4910      	ldr	r1, [pc, #64]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d62:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008d66:	d309      	bcc.n	8008d7c <HAL_RCC_OscConfig+0x284>
 8008d68:	4b0c      	ldr	r3, [pc, #48]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f023 021f 	bic.w	r2, r3, #31
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a1b      	ldr	r3, [r3, #32]
 8008d74:	4909      	ldr	r1, [pc, #36]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60cb      	str	r3, [r1, #12]
 8008d7a:	e04a      	b.n	8008e12 <HAL_RCC_OscConfig+0x31a>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	da0f      	bge.n	8008da4 <HAL_RCC_OscConfig+0x2ac>
 8008d84:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	015b      	lsls	r3, r3, #5
 8008d92:	4902      	ldr	r1, [pc, #8]	; (8008d9c <HAL_RCC_OscConfig+0x2a4>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	60cb      	str	r3, [r1, #12]
 8008d98:	e03b      	b.n	8008e12 <HAL_RCC_OscConfig+0x31a>
 8008d9a:	bf00      	nop
 8008d9c:	46020c00 	.word	0x46020c00
 8008da0:	200000a8 	.word	0x200000a8
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dac:	d30a      	bcc.n	8008dc4 <HAL_RCC_OscConfig+0x2cc>
 8008dae:	4b94      	ldr	r3, [pc, #592]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	029b      	lsls	r3, r3, #10
 8008dbc:	4990      	ldr	r1, [pc, #576]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60cb      	str	r3, [r1, #12]
 8008dc2:	e026      	b.n	8008e12 <HAL_RCC_OscConfig+0x31a>
 8008dc4:	4b8e      	ldr	r3, [pc, #568]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a1b      	ldr	r3, [r3, #32]
 8008dd0:	03db      	lsls	r3, r3, #15
 8008dd2:	498b      	ldr	r1, [pc, #556]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	60cb      	str	r3, [r1, #12]
 8008dd8:	e01b      	b.n	8008e12 <HAL_RCC_OscConfig+0x31a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8008dda:	4b89      	ldr	r3, [pc, #548]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a88      	ldr	r2, [pc, #544]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008de0:	f023 0301 	bic.w	r3, r3, #1
 8008de4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008de6:	f7fd fd77 	bl	80068d8 <HAL_GetTick>
 8008dea:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008dec:	e009      	b.n	8008e02 <HAL_RCC_OscConfig+0x30a>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008dee:	f7fd fd73 	bl	80068d8 <HAL_GetTick>
 8008df2:	4602      	mov	r2, r0
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d902      	bls.n	8008e02 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	f000 bce0 	b.w	80097c2 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008e02:	4b7f      	ldr	r3, [pc, #508]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0304 	and.w	r3, r3, #4
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1ef      	bne.n	8008dee <HAL_RCC_OscConfig+0x2f6>
 8008e0e:	e000      	b.n	8008e12 <HAL_RCC_OscConfig+0x31a>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008e10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 808d 	beq.w	8008f3a <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e22:	2b08      	cmp	r3, #8
 8008e24:	d005      	beq.n	8008e32 <HAL_RCC_OscConfig+0x33a>
 8008e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e28:	2b0c      	cmp	r3, #12
 8008e2a:	d10f      	bne.n	8008e4c <HAL_RCC_OscConfig+0x354>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	d10c      	bne.n	8008e4c <HAL_RCC_OscConfig+0x354>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e32:	4b73      	ldr	r3, [pc, #460]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d07c      	beq.n	8008f38 <HAL_RCC_OscConfig+0x440>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d178      	bne.n	8008f38 <HAL_RCC_OscConfig+0x440>
      {
        return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	f000 bcbb 	b.w	80097c2 <HAL_RCC_OscConfig+0xcca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e54:	d106      	bne.n	8008e64 <HAL_RCC_OscConfig+0x36c>
 8008e56:	4b6a      	ldr	r3, [pc, #424]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a69      	ldr	r2, [pc, #420]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e60:	6013      	str	r3, [r2, #0]
 8008e62:	e03b      	b.n	8008edc <HAL_RCC_OscConfig+0x3e4>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e6c:	d112      	bne.n	8008e94 <HAL_RCC_OscConfig+0x39c>
 8008e6e:	4b64      	ldr	r3, [pc, #400]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a63      	ldr	r2, [pc, #396]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e78:	6013      	str	r3, [r2, #0]
 8008e7a:	4b61      	ldr	r3, [pc, #388]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a60      	ldr	r2, [pc, #384]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008e80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008e84:	6013      	str	r3, [r2, #0]
 8008e86:	4b5e      	ldr	r3, [pc, #376]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a5d      	ldr	r2, [pc, #372]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e90:	6013      	str	r3, [r2, #0]
 8008e92:	e023      	b.n	8008edc <HAL_RCC_OscConfig+0x3e4>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8008e9c:	d112      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x3cc>
 8008e9e:	4b58      	ldr	r3, [pc, #352]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a57      	ldr	r2, [pc, #348]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ea8:	6013      	str	r3, [r2, #0]
 8008eaa:	4b55      	ldr	r3, [pc, #340]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a54      	ldr	r2, [pc, #336]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008eb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008eb4:	6013      	str	r3, [r2, #0]
 8008eb6:	4b52      	ldr	r3, [pc, #328]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a51      	ldr	r2, [pc, #324]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ec0:	6013      	str	r3, [r2, #0]
 8008ec2:	e00b      	b.n	8008edc <HAL_RCC_OscConfig+0x3e4>
 8008ec4:	4b4e      	ldr	r3, [pc, #312]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a4d      	ldr	r2, [pc, #308]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	4b4b      	ldr	r3, [pc, #300]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a4a      	ldr	r2, [pc, #296]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d014      	beq.n	8008f0e <HAL_RCC_OscConfig+0x416>
      {
        tickstart = HAL_GetTick();
 8008ee4:	f7fd fcf8 	bl	80068d8 <HAL_GetTick>
 8008ee8:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008eea:	e009      	b.n	8008f00 <HAL_RCC_OscConfig+0x408>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008eec:	f7fd fcf4 	bl	80068d8 <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	2b64      	cmp	r3, #100	; 0x64
 8008ef8:	d902      	bls.n	8008f00 <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	f000 bc61 	b.w	80097c2 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f00:	4b3f      	ldr	r3, [pc, #252]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d0ef      	beq.n	8008eec <HAL_RCC_OscConfig+0x3f4>
 8008f0c:	e015      	b.n	8008f3a <HAL_RCC_OscConfig+0x442>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8008f0e:	f7fd fce3 	bl	80068d8 <HAL_GetTick>
 8008f12:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f14:	e009      	b.n	8008f2a <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f16:	f7fd fcdf 	bl	80068d8 <HAL_GetTick>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	6a3b      	ldr	r3, [r7, #32]
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	2b64      	cmp	r3, #100	; 0x64
 8008f22:	d902      	bls.n	8008f2a <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 8008f24:	2303      	movs	r3, #3
 8008f26:	f000 bc4c 	b.w	80097c2 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f2a:	4b35      	ldr	r3, [pc, #212]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1ef      	bne.n	8008f16 <HAL_RCC_OscConfig+0x41e>
 8008f36:	e000      	b.n	8008f3a <HAL_RCC_OscConfig+0x442>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d064      	beq.n	8009010 <HAL_RCC_OscConfig+0x518>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d005      	beq.n	8008f58 <HAL_RCC_OscConfig+0x460>
 8008f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4e:	2b0c      	cmp	r3, #12
 8008f50:	d11a      	bne.n	8008f88 <HAL_RCC_OscConfig+0x490>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d117      	bne.n	8008f88 <HAL_RCC_OscConfig+0x490>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f58:	4b29      	ldr	r3, [pc, #164]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d006      	beq.n	8008f72 <HAL_RCC_OscConfig+0x47a>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d102      	bne.n	8008f72 <HAL_RCC_OscConfig+0x47a>
      {
        return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	f000 bc28 	b.w	80097c2 <HAL_RCC_OscConfig+0xcca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8008f72:	4b23      	ldr	r3, [pc, #140]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	041b      	lsls	r3, r3, #16
 8008f80:	491f      	ldr	r1, [pc, #124]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f86:	e043      	b.n	8009010 <HAL_RCC_OscConfig+0x518>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d024      	beq.n	8008fda <HAL_RCC_OscConfig+0x4e2>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8008f90:	4b1b      	ldr	r3, [pc, #108]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a1a      	ldr	r2, [pc, #104]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f9a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008f9c:	f7fd fc9c 	bl	80068d8 <HAL_GetTick>
 8008fa0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008fa2:	e009      	b.n	8008fb8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fa4:	f7fd fc98 	bl	80068d8 <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	6a3b      	ldr	r3, [r7, #32]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d902      	bls.n	8008fb8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	f000 bc05 	b.w	80097c2 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008fb8:	4b11      	ldr	r3, [pc, #68]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d0ef      	beq.n	8008fa4 <HAL_RCC_OscConfig+0x4ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8008fc4:	4b0e      	ldr	r3, [pc, #56]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	041b      	lsls	r3, r3, #16
 8008fd2:	490b      	ldr	r1, [pc, #44]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	610b      	str	r3, [r1, #16]
 8008fd8:	e01a      	b.n	8009010 <HAL_RCC_OscConfig+0x518>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8008fda:	4b09      	ldr	r3, [pc, #36]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a08      	ldr	r2, [pc, #32]	; (8009000 <HAL_RCC_OscConfig+0x508>)
 8008fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fe4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008fe6:	f7fd fc77 	bl	80068d8 <HAL_GetTick>
 8008fea:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008fec:	e00a      	b.n	8009004 <HAL_RCC_OscConfig+0x50c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fee:	f7fd fc73 	bl	80068d8 <HAL_GetTick>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	6a3b      	ldr	r3, [r7, #32]
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d903      	bls.n	8009004 <HAL_RCC_OscConfig+0x50c>
          {
            return HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e3e0      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
 8009000:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009004:	4baf      	ldr	r3, [pc, #700]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1ee      	bne.n	8008fee <HAL_RCC_OscConfig+0x4f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0308 	and.w	r3, r3, #8
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 80c7 	beq.w	80091ac <HAL_RCC_OscConfig+0x6b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800901e:	2300      	movs	r3, #0
 8009020:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009024:	4ba7      	ldr	r3, [pc, #668]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 8009026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800902a:	f003 0304 	and.w	r3, r3, #4
 800902e:	2b00      	cmp	r3, #0
 8009030:	d111      	bne.n	8009056 <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009032:	4ba4      	ldr	r3, [pc, #656]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 8009034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009038:	4aa2      	ldr	r2, [pc, #648]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 800903a:	f043 0304 	orr.w	r3, r3, #4
 800903e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009042:	4ba0      	ldr	r3, [pc, #640]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 8009044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009048:	f003 0304 	and.w	r3, r3, #4
 800904c:	617b      	str	r3, [r7, #20]
 800904e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009050:	2301      	movs	r3, #1
 8009052:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009056:	4b9c      	ldr	r3, [pc, #624]	; (80092c8 <HAL_RCC_OscConfig+0x7d0>)
 8009058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	d118      	bne.n	8009094 <HAL_RCC_OscConfig+0x59c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009062:	4b99      	ldr	r3, [pc, #612]	; (80092c8 <HAL_RCC_OscConfig+0x7d0>)
 8009064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009066:	4a98      	ldr	r2, [pc, #608]	; (80092c8 <HAL_RCC_OscConfig+0x7d0>)
 8009068:	f043 0301 	orr.w	r3, r3, #1
 800906c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800906e:	f7fd fc33 	bl	80068d8 <HAL_GetTick>
 8009072:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009074:	e008      	b.n	8009088 <HAL_RCC_OscConfig+0x590>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009076:	f7fd fc2f 	bl	80068d8 <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	2b02      	cmp	r3, #2
 8009082:	d901      	bls.n	8009088 <HAL_RCC_OscConfig+0x590>
        {
          return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e39c      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009088:	4b8f      	ldr	r3, [pc, #572]	; (80092c8 <HAL_RCC_OscConfig+0x7d0>)
 800908a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	2b00      	cmp	r3, #0
 8009092:	d0f0      	beq.n	8009076 <HAL_RCC_OscConfig+0x57e>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	695b      	ldr	r3, [r3, #20]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d05f      	beq.n	800915c <HAL_RCC_OscConfig+0x664>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800909c:	4b89      	ldr	r3, [pc, #548]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 800909e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090a2:	61bb      	str	r3, [r7, #24]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	699a      	ldr	r2, [r3, #24]
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d037      	beq.n	8009122 <HAL_RCC_OscConfig+0x62a>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d006      	beq.n	80090ca <HAL_RCC_OscConfig+0x5d2>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d101      	bne.n	80090ca <HAL_RCC_OscConfig+0x5d2>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e37b      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d01b      	beq.n	800910c <HAL_RCC_OscConfig+0x614>
        {
          __HAL_RCC_LSI_DISABLE();
 80090d4:	4b7b      	ldr	r3, [pc, #492]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 80090d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090da:	4a7a      	ldr	r2, [pc, #488]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 80090dc:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80090e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80090e4:	f7fd fbf8 	bl	80068d8 <HAL_GetTick>
 80090e8:	6238      	str	r0, [r7, #32]

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80090ea:	e008      	b.n	80090fe <HAL_RCC_OscConfig+0x606>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090ec:	f7fd fbf4 	bl	80068d8 <HAL_GetTick>
 80090f0:	4602      	mov	r2, r0
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d901      	bls.n	80090fe <HAL_RCC_OscConfig+0x606>
            {
              return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e361      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80090fe:	4b71      	ldr	r3, [pc, #452]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 8009100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1ef      	bne.n	80090ec <HAL_RCC_OscConfig+0x5f4>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800910c:	4b6d      	ldr	r3, [pc, #436]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 800910e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009112:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	496a      	ldr	r1, [pc, #424]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 800911c:	4313      	orrs	r3, r2
 800911e:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009122:	4b68      	ldr	r3, [pc, #416]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 8009124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009128:	4a66      	ldr	r2, [pc, #408]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 800912a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800912e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8009132:	f7fd fbd1 	bl	80068d8 <HAL_GetTick>
 8009136:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009138:	e008      	b.n	800914c <HAL_RCC_OscConfig+0x654>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800913a:	f7fd fbcd 	bl	80068d8 <HAL_GetTick>
 800913e:	4602      	mov	r2, r0
 8009140:	6a3b      	ldr	r3, [r7, #32]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	2b02      	cmp	r3, #2
 8009146:	d901      	bls.n	800914c <HAL_RCC_OscConfig+0x654>
        {
          return HAL_TIMEOUT;
 8009148:	2303      	movs	r3, #3
 800914a:	e33a      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800914c:	4b5d      	ldr	r3, [pc, #372]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 800914e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009152:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0ef      	beq.n	800913a <HAL_RCC_OscConfig+0x642>
 800915a:	e01b      	b.n	8009194 <HAL_RCC_OscConfig+0x69c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800915c:	4b59      	ldr	r3, [pc, #356]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 800915e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009162:	4a58      	ldr	r2, [pc, #352]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 8009164:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8009168:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800916c:	f7fd fbb4 	bl	80068d8 <HAL_GetTick>
 8009170:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009172:	e008      	b.n	8009186 <HAL_RCC_OscConfig+0x68e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009174:	f7fd fbb0 	bl	80068d8 <HAL_GetTick>
 8009178:	4602      	mov	r2, r0
 800917a:	6a3b      	ldr	r3, [r7, #32]
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	2b02      	cmp	r3, #2
 8009180:	d901      	bls.n	8009186 <HAL_RCC_OscConfig+0x68e>
        {
          return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e31d      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009186:	4b4f      	ldr	r3, [pc, #316]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 8009188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800918c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1ef      	bne.n	8009174 <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009194:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009198:	2b01      	cmp	r3, #1
 800919a:	d107      	bne.n	80091ac <HAL_RCC_OscConfig+0x6b4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800919c:	4b49      	ldr	r3, [pc, #292]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 800919e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091a2:	4a48      	ldr	r2, [pc, #288]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 80091a4:	f023 0304 	bic.w	r3, r3, #4
 80091a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 0304 	and.w	r3, r3, #4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 8112 	beq.w	80093de <HAL_RCC_OscConfig+0x8e6>
  {
    FlagStatus pwrclkchanged = RESET;
 80091ba:	2300      	movs	r3, #0
 80091bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091c0:	4b40      	ldr	r3, [pc, #256]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 80091c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091c6:	f003 0304 	and.w	r3, r3, #4
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d111      	bne.n	80091f2 <HAL_RCC_OscConfig+0x6fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091ce:	4b3d      	ldr	r3, [pc, #244]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 80091d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091d4:	4a3b      	ldr	r2, [pc, #236]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 80091d6:	f043 0304 	orr.w	r3, r3, #4
 80091da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80091de:	4b39      	ldr	r3, [pc, #228]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 80091e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091e4:	f003 0304 	and.w	r3, r3, #4
 80091e8:	613b      	str	r3, [r7, #16]
 80091ea:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80091ec:	2301      	movs	r3, #1
 80091ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80091f2:	4b35      	ldr	r3, [pc, #212]	; (80092c8 <HAL_RCC_OscConfig+0x7d0>)
 80091f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d118      	bne.n	8009230 <HAL_RCC_OscConfig+0x738>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80091fe:	4b32      	ldr	r3, [pc, #200]	; (80092c8 <HAL_RCC_OscConfig+0x7d0>)
 8009200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009202:	4a31      	ldr	r2, [pc, #196]	; (80092c8 <HAL_RCC_OscConfig+0x7d0>)
 8009204:	f043 0301 	orr.w	r3, r3, #1
 8009208:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800920a:	f7fd fb65 	bl	80068d8 <HAL_GetTick>
 800920e:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009210:	e008      	b.n	8009224 <HAL_RCC_OscConfig+0x72c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009212:	f7fd fb61 	bl	80068d8 <HAL_GetTick>
 8009216:	4602      	mov	r2, r0
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	2b02      	cmp	r3, #2
 800921e:	d901      	bls.n	8009224 <HAL_RCC_OscConfig+0x72c>
        {
          return HAL_TIMEOUT;
 8009220:	2303      	movs	r3, #3
 8009222:	e2ce      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009224:	4b28      	ldr	r3, [pc, #160]	; (80092c8 <HAL_RCC_OscConfig+0x7d0>)
 8009226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d0f0      	beq.n	8009212 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	2b00      	cmp	r3, #0
 800923a:	d01f      	beq.n	800927c <HAL_RCC_OscConfig+0x784>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f003 0304 	and.w	r3, r3, #4
 8009244:	2b00      	cmp	r3, #0
 8009246:	d010      	beq.n	800926a <HAL_RCC_OscConfig+0x772>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009248:	4b1e      	ldr	r3, [pc, #120]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 800924a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800924e:	4a1d      	ldr	r2, [pc, #116]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 8009250:	f043 0304 	orr.w	r3, r3, #4
 8009254:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009258:	4b1a      	ldr	r3, [pc, #104]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 800925a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800925e:	4a19      	ldr	r2, [pc, #100]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 8009260:	f043 0301 	orr.w	r3, r3, #1
 8009264:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009268:	e018      	b.n	800929c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800926a:	4b16      	ldr	r3, [pc, #88]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 800926c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009270:	4a14      	ldr	r2, [pc, #80]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 8009272:	f043 0301 	orr.w	r3, r3, #1
 8009276:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800927a:	e00f      	b.n	800929c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800927c:	4b11      	ldr	r3, [pc, #68]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 800927e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009282:	4a10      	ldr	r2, [pc, #64]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 8009284:	f023 0301 	bic.w	r3, r3, #1
 8009288:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800928c:	4b0d      	ldr	r3, [pc, #52]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 800928e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009292:	4a0c      	ldr	r2, [pc, #48]	; (80092c4 <HAL_RCC_OscConfig+0x7cc>)
 8009294:	f023 0304 	bic.w	r3, r3, #4
 8009298:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d058      	beq.n	8009356 <HAL_RCC_OscConfig+0x85e>
    {
      tickstart = HAL_GetTick();
 80092a4:	f7fd fb18 	bl	80068d8 <HAL_GetTick>
 80092a8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092aa:	e00f      	b.n	80092cc <HAL_RCC_OscConfig+0x7d4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092ac:	f7fd fb14 	bl	80068d8 <HAL_GetTick>
 80092b0:	4602      	mov	r2, r0
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d906      	bls.n	80092cc <HAL_RCC_OscConfig+0x7d4>
        {
          return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e27f      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
 80092c2:	bf00      	nop
 80092c4:	46020c00 	.word	0x46020c00
 80092c8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092cc:	4ba4      	ldr	r3, [pc, #656]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 80092ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0e8      	beq.n	80092ac <HAL_RCC_OscConfig+0x7b4>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d01b      	beq.n	800931e <HAL_RCC_OscConfig+0x826>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80092e6:	4b9e      	ldr	r3, [pc, #632]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 80092e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092ec:	4a9c      	ldr	r2, [pc, #624]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 80092ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80092f6:	e00a      	b.n	800930e <HAL_RCC_OscConfig+0x816>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092f8:	f7fd faee 	bl	80068d8 <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	f241 3288 	movw	r2, #5000	; 0x1388
 8009306:	4293      	cmp	r3, r2
 8009308:	d901      	bls.n	800930e <HAL_RCC_OscConfig+0x816>
          {
            return HAL_TIMEOUT;
 800930a:	2303      	movs	r3, #3
 800930c:	e259      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800930e:	4b94      	ldr	r3, [pc, #592]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 8009310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009318:	2b00      	cmp	r3, #0
 800931a:	d0ed      	beq.n	80092f8 <HAL_RCC_OscConfig+0x800>
 800931c:	e053      	b.n	80093c6 <HAL_RCC_OscConfig+0x8ce>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800931e:	4b90      	ldr	r3, [pc, #576]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 8009320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009324:	4a8e      	ldr	r2, [pc, #568]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 8009326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800932a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800932e:	e00a      	b.n	8009346 <HAL_RCC_OscConfig+0x84e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009330:	f7fd fad2 	bl	80068d8 <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	f241 3288 	movw	r2, #5000	; 0x1388
 800933e:	4293      	cmp	r3, r2
 8009340:	d901      	bls.n	8009346 <HAL_RCC_OscConfig+0x84e>
          {
            return HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	e23d      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009346:	4b86      	ldr	r3, [pc, #536]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 8009348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800934c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1ed      	bne.n	8009330 <HAL_RCC_OscConfig+0x838>
 8009354:	e037      	b.n	80093c6 <HAL_RCC_OscConfig+0x8ce>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8009356:	f7fd fabf 	bl	80068d8 <HAL_GetTick>
 800935a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800935c:	e00a      	b.n	8009374 <HAL_RCC_OscConfig+0x87c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800935e:	f7fd fabb 	bl	80068d8 <HAL_GetTick>
 8009362:	4602      	mov	r2, r0
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	f241 3288 	movw	r2, #5000	; 0x1388
 800936c:	4293      	cmp	r3, r2
 800936e:	d901      	bls.n	8009374 <HAL_RCC_OscConfig+0x87c>
        {
          return HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	e226      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009374:	4b7a      	ldr	r3, [pc, #488]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 8009376:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800937a:	f003 0302 	and.w	r3, r3, #2
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1ed      	bne.n	800935e <HAL_RCC_OscConfig+0x866>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8009382:	4b77      	ldr	r3, [pc, #476]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 8009384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800938c:	2b00      	cmp	r3, #0
 800938e:	d01a      	beq.n	80093c6 <HAL_RCC_OscConfig+0x8ce>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009390:	4b73      	ldr	r3, [pc, #460]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 8009392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009396:	4a72      	ldr	r2, [pc, #456]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 8009398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800939c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80093a0:	e00a      	b.n	80093b8 <HAL_RCC_OscConfig+0x8c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093a2:	f7fd fa99 	bl	80068d8 <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d901      	bls.n	80093b8 <HAL_RCC_OscConfig+0x8c0>
          {
            return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e204      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80093b8:	4b69      	ldr	r3, [pc, #420]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 80093ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80093be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1ed      	bne.n	80093a2 <HAL_RCC_OscConfig+0x8aa>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80093c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d107      	bne.n	80093de <HAL_RCC_OscConfig+0x8e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093ce:	4b64      	ldr	r3, [pc, #400]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 80093d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093d4:	4a62      	ldr	r2, [pc, #392]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 80093d6:	f023 0304 	bic.w	r3, r3, #4
 80093da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 0320 	and.w	r3, r3, #32
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d036      	beq.n	8009458 <HAL_RCC_OscConfig+0x960>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d019      	beq.n	8009426 <HAL_RCC_OscConfig+0x92e>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80093f2:	4b5b      	ldr	r3, [pc, #364]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a5a      	ldr	r2, [pc, #360]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 80093f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80093fc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80093fe:	f7fd fa6b 	bl	80068d8 <HAL_GetTick>
 8009402:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009404:	e008      	b.n	8009418 <HAL_RCC_OscConfig+0x920>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009406:	f7fd fa67 	bl	80068d8 <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	2b02      	cmp	r3, #2
 8009412:	d901      	bls.n	8009418 <HAL_RCC_OscConfig+0x920>
        {
          return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e1d4      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009418:	4b51      	ldr	r3, [pc, #324]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d0f0      	beq.n	8009406 <HAL_RCC_OscConfig+0x90e>
 8009424:	e018      	b.n	8009458 <HAL_RCC_OscConfig+0x960>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8009426:	4b4e      	ldr	r3, [pc, #312]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a4d      	ldr	r2, [pc, #308]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 800942c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009430:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009432:	f7fd fa51 	bl	80068d8 <HAL_GetTick>
 8009436:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009438:	e008      	b.n	800944c <HAL_RCC_OscConfig+0x954>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800943a:	f7fd fa4d 	bl	80068d8 <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	6a3b      	ldr	r3, [r7, #32]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	2b02      	cmp	r3, #2
 8009446:	d901      	bls.n	800944c <HAL_RCC_OscConfig+0x954>
        {
          return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e1ba      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800944c:	4b44      	ldr	r3, [pc, #272]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1f0      	bne.n	800943a <HAL_RCC_OscConfig+0x942>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009460:	2b00      	cmp	r3, #0
 8009462:	d036      	beq.n	80094d2 <HAL_RCC_OscConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009468:	2b00      	cmp	r3, #0
 800946a:	d019      	beq.n	80094a0 <HAL_RCC_OscConfig+0x9a8>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800946c:	4b3c      	ldr	r3, [pc, #240]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a3b      	ldr	r2, [pc, #236]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 8009472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009476:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009478:	f7fd fa2e 	bl	80068d8 <HAL_GetTick>
 800947c:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800947e:	e008      	b.n	8009492 <HAL_RCC_OscConfig+0x99a>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009480:	f7fd fa2a 	bl	80068d8 <HAL_GetTick>
 8009484:	4602      	mov	r2, r0
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	1ad3      	subs	r3, r2, r3
 800948a:	2b02      	cmp	r3, #2
 800948c:	d901      	bls.n	8009492 <HAL_RCC_OscConfig+0x99a>
        {
          return HAL_TIMEOUT;
 800948e:	2303      	movs	r3, #3
 8009490:	e197      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009492:	4b33      	ldr	r3, [pc, #204]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0f0      	beq.n	8009480 <HAL_RCC_OscConfig+0x988>
 800949e:	e018      	b.n	80094d2 <HAL_RCC_OscConfig+0x9da>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80094a0:	4b2f      	ldr	r3, [pc, #188]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a2e      	ldr	r2, [pc, #184]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 80094a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094aa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80094ac:	f7fd fa14 	bl	80068d8 <HAL_GetTick>
 80094b0:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80094b2:	e008      	b.n	80094c6 <HAL_RCC_OscConfig+0x9ce>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80094b4:	f7fd fa10 	bl	80068d8 <HAL_GetTick>
 80094b8:	4602      	mov	r2, r0
 80094ba:	6a3b      	ldr	r3, [r7, #32]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d901      	bls.n	80094c6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e17d      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80094c6:	4b26      	ldr	r3, [pc, #152]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1f0      	bne.n	80094b4 <HAL_RCC_OscConfig+0x9bc>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d07f      	beq.n	80095de <HAL_RCC_OscConfig+0xae6>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d062      	beq.n	80095ac <HAL_RCC_OscConfig+0xab4>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80094e6:	4b1e      	ldr	r3, [pc, #120]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	4a1d      	ldr	r2, [pc, #116]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 80094ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80094f0:	6093      	str	r3, [r2, #8]
 80094f2:	4b1b      	ldr	r3, [pc, #108]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fe:	4918      	ldr	r1, [pc, #96]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 8009500:	4313      	orrs	r3, r2
 8009502:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009508:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800950c:	d309      	bcc.n	8009522 <HAL_RCC_OscConfig+0xa2a>
 800950e:	4b14      	ldr	r3, [pc, #80]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f023 021f 	bic.w	r2, r3, #31
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	4911      	ldr	r1, [pc, #68]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 800951c:	4313      	orrs	r3, r2
 800951e:	60cb      	str	r3, [r1, #12]
 8009520:	e02a      	b.n	8009578 <HAL_RCC_OscConfig+0xa80>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	2b00      	cmp	r3, #0
 8009528:	da0a      	bge.n	8009540 <HAL_RCC_OscConfig+0xa48>
 800952a:	4b0d      	ldr	r3, [pc, #52]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	015b      	lsls	r3, r3, #5
 8009538:	4909      	ldr	r1, [pc, #36]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 800953a:	4313      	orrs	r3, r2
 800953c:	60cb      	str	r3, [r1, #12]
 800953e:	e01b      	b.n	8009578 <HAL_RCC_OscConfig+0xa80>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009548:	d30c      	bcc.n	8009564 <HAL_RCC_OscConfig+0xa6c>
 800954a:	4b05      	ldr	r3, [pc, #20]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	029b      	lsls	r3, r3, #10
 8009558:	4901      	ldr	r1, [pc, #4]	; (8009560 <HAL_RCC_OscConfig+0xa68>)
 800955a:	4313      	orrs	r3, r2
 800955c:	60cb      	str	r3, [r1, #12]
 800955e:	e00b      	b.n	8009578 <HAL_RCC_OscConfig+0xa80>
 8009560:	46020c00 	.word	0x46020c00
 8009564:	4b99      	ldr	r3, [pc, #612]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a1b      	ldr	r3, [r3, #32]
 8009570:	03db      	lsls	r3, r3, #15
 8009572:	4996      	ldr	r1, [pc, #600]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009574:	4313      	orrs	r3, r2
 8009576:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8009578:	4b94      	ldr	r3, [pc, #592]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a93      	ldr	r2, [pc, #588]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 800957e:	f043 0310 	orr.w	r3, r3, #16
 8009582:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009584:	f7fd f9a8 	bl	80068d8 <HAL_GetTick>
 8009588:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800958a:	e008      	b.n	800959e <HAL_RCC_OscConfig+0xaa6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800958c:	f7fd f9a4 	bl	80068d8 <HAL_GetTick>
 8009590:	4602      	mov	r2, r0
 8009592:	6a3b      	ldr	r3, [r7, #32]
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	2b02      	cmp	r3, #2
 8009598:	d901      	bls.n	800959e <HAL_RCC_OscConfig+0xaa6>
        {
          return HAL_TIMEOUT;
 800959a:	2303      	movs	r3, #3
 800959c:	e111      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800959e:	4b8b      	ldr	r3, [pc, #556]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 0320 	and.w	r3, r3, #32
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d0f0      	beq.n	800958c <HAL_RCC_OscConfig+0xa94>
 80095aa:	e018      	b.n	80095de <HAL_RCC_OscConfig+0xae6>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80095ac:	4b87      	ldr	r3, [pc, #540]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a86      	ldr	r2, [pc, #536]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 80095b2:	f023 0310 	bic.w	r3, r3, #16
 80095b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80095b8:	f7fd f98e 	bl	80068d8 <HAL_GetTick>
 80095bc:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80095be:	e008      	b.n	80095d2 <HAL_RCC_OscConfig+0xada>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80095c0:	f7fd f98a 	bl	80068d8 <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d901      	bls.n	80095d2 <HAL_RCC_OscConfig+0xada>
        {
          return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e0f7      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80095d2:	4b7e      	ldr	r3, [pc, #504]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0320 	and.w	r3, r3, #32
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1f0      	bne.n	80095c0 <HAL_RCC_OscConfig+0xac8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 80ec 	beq.w	80097c0 <HAL_RCC_OscConfig+0xcc8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80095e8:	4b78      	ldr	r3, [pc, #480]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 80095ea:	69db      	ldr	r3, [r3, #28]
 80095ec:	f003 030c 	and.w	r3, r3, #12
 80095f0:	2b0c      	cmp	r3, #12
 80095f2:	f000 80e3 	beq.w	80097bc <HAL_RCC_OscConfig+0xcc4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	f040 80be 	bne.w	800977c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009600:	4b72      	ldr	r3, [pc, #456]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a71      	ldr	r2, [pc, #452]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800960a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800960c:	f7fd f964 	bl	80068d8 <HAL_GetTick>
 8009610:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009612:	e008      	b.n	8009626 <HAL_RCC_OscConfig+0xb2e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009614:	f7fd f960 	bl	80068d8 <HAL_GetTick>
 8009618:	4602      	mov	r2, r0
 800961a:	6a3b      	ldr	r3, [r7, #32]
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	2b02      	cmp	r3, #2
 8009620:	d901      	bls.n	8009626 <HAL_RCC_OscConfig+0xb2e>
          {
            return HAL_TIMEOUT;
 8009622:	2303      	movs	r3, #3
 8009624:	e0cd      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009626:	4b69      	ldr	r3, [pc, #420]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1f0      	bne.n	8009614 <HAL_RCC_OscConfig+0xb1c>
          }
        }

        /* Enable PWR CLK */
        __HAL_RCC_PWR_CLK_ENABLE();
 8009632:	4b66      	ldr	r3, [pc, #408]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009638:	4a64      	ldr	r2, [pc, #400]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 800963a:	f043 0304 	orr.w	r3, r3, #4
 800963e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009642:	4b62      	ldr	r3, [pc, #392]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009648:	f003 0304 	and.w	r3, r3, #4
 800964c:	60fb      	str	r3, [r7, #12]
 800964e:	68fb      	ldr	r3, [r7, #12]

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8009650:	4b5f      	ldr	r3, [pc, #380]	; (80097d0 <HAL_RCC_OscConfig+0xcd8>)
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009658:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800965c:	d102      	bne.n	8009664 <HAL_RCC_OscConfig+0xb6c>
        {
          pwrboosten = SET;
 800965e:	2301      	movs	r3, #1
 8009660:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009664:	4b5a      	ldr	r3, [pc, #360]	; (80097d0 <HAL_RCC_OscConfig+0xcd8>)
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	4a59      	ldr	r2, [pc, #356]	; (80097d0 <HAL_RCC_OscConfig+0xcd8>)
 800966a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800966e:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8009670:	4b56      	ldr	r3, [pc, #344]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009674:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009678:	f023 0303 	bic.w	r3, r3, #3
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009684:	3a01      	subs	r2, #1
 8009686:	0212      	lsls	r2, r2, #8
 8009688:	4311      	orrs	r1, r2
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800968e:	430a      	orrs	r2, r1
 8009690:	494e      	ldr	r1, [pc, #312]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009692:	4313      	orrs	r3, r2
 8009694:	628b      	str	r3, [r1, #40]	; 0x28
 8009696:	4b4d      	ldr	r3, [pc, #308]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800969a:	4b4e      	ldr	r3, [pc, #312]	; (80097d4 <HAL_RCC_OscConfig+0xcdc>)
 800969c:	4013      	ands	r3, r2
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80096a2:	3a01      	subs	r2, #1
 80096a4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80096ac:	3a01      	subs	r2, #1
 80096ae:	0252      	lsls	r2, r2, #9
 80096b0:	b292      	uxth	r2, r2
 80096b2:	4311      	orrs	r1, r2
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80096b8:	3a01      	subs	r2, #1
 80096ba:	0412      	lsls	r2, r2, #16
 80096bc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80096c0:	4311      	orrs	r1, r2
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80096c6:	3a01      	subs	r2, #1
 80096c8:	0612      	lsls	r2, r2, #24
 80096ca:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80096ce:	430a      	orrs	r2, r1
 80096d0:	493e      	ldr	r1, [pc, #248]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80096d6:	4b3d      	ldr	r3, [pc, #244]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 80096d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096da:	4a3c      	ldr	r2, [pc, #240]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 80096dc:	f023 0310 	bic.w	r3, r3, #16
 80096e0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80096e2:	4b3a      	ldr	r3, [pc, #232]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 80096e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80096f2:	00d2      	lsls	r2, r2, #3
 80096f4:	4935      	ldr	r1, [pc, #212]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 80096f6:	4313      	orrs	r3, r2
 80096f8:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80096fa:	4b34      	ldr	r3, [pc, #208]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 80096fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fe:	4a33      	ldr	r2, [pc, #204]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009700:	f043 0310 	orr.w	r3, r3, #16
 8009704:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8009706:	4b31      	ldr	r3, [pc, #196]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970a:	f023 020c 	bic.w	r2, r3, #12
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009712:	492e      	ldr	r1, [pc, #184]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009714:	4313      	orrs	r3, r2
 8009716:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8009718:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800971c:	2b01      	cmp	r3, #1
 800971e:	d105      	bne.n	800972c <HAL_RCC_OscConfig+0xc34>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009720:	4b2b      	ldr	r3, [pc, #172]	; (80097d0 <HAL_RCC_OscConfig+0xcd8>)
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	4a2a      	ldr	r2, [pc, #168]	; (80097d0 <HAL_RCC_OscConfig+0xcd8>)
 8009726:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800972a:	60d3      	str	r3, [r2, #12]
        }

        /*Disable PWR clk */
        __HAL_RCC_PWR_CLK_DISABLE();
 800972c:	4b27      	ldr	r3, [pc, #156]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 800972e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009732:	4a26      	ldr	r2, [pc, #152]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009734:	f023 0304 	bic.w	r3, r3, #4
 8009738:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800973c:	4b23      	ldr	r3, [pc, #140]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 800973e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009740:	4a22      	ldr	r2, [pc, #136]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009742:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009746:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8009748:	4b20      	ldr	r3, [pc, #128]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a1f      	ldr	r2, [pc, #124]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 800974e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009752:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009754:	f7fd f8c0 	bl	80068d8 <HAL_GetTick>
 8009758:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800975a:	e008      	b.n	800976e <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800975c:	f7fd f8bc 	bl	80068d8 <HAL_GetTick>
 8009760:	4602      	mov	r2, r0
 8009762:	6a3b      	ldr	r3, [r7, #32]
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	2b02      	cmp	r3, #2
 8009768:	d901      	bls.n	800976e <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800976a:	2303      	movs	r3, #3
 800976c:	e029      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800976e:	4b17      	ldr	r3, [pc, #92]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d0f0      	beq.n	800975c <HAL_RCC_OscConfig+0xc64>
 800977a:	e021      	b.n	80097c0 <HAL_RCC_OscConfig+0xcc8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800977c:	4b13      	ldr	r3, [pc, #76]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a12      	ldr	r2, [pc, #72]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 8009782:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009786:	6013      	str	r3, [r2, #0]

        /* Disable main PLL outputs to save power if no PLLs on */
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
 8009788:	4b10      	ldr	r3, [pc, #64]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 800978a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978c:	4a0f      	ldr	r2, [pc, #60]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 800978e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8009792:	6293      	str	r3, [r2, #40]	; 0x28

        tickstart = HAL_GetTick();
 8009794:	f7fd f8a0 	bl	80068d8 <HAL_GetTick>
 8009798:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800979a:	e008      	b.n	80097ae <HAL_RCC_OscConfig+0xcb6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800979c:	f7fd f89c 	bl	80068d8 <HAL_GetTick>
 80097a0:	4602      	mov	r2, r0
 80097a2:	6a3b      	ldr	r3, [r7, #32]
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d901      	bls.n	80097ae <HAL_RCC_OscConfig+0xcb6>
          {
            return HAL_TIMEOUT;
 80097aa:	2303      	movs	r3, #3
 80097ac:	e009      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80097ae:	4b07      	ldr	r3, [pc, #28]	; (80097cc <HAL_RCC_OscConfig+0xcd4>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1f0      	bne.n	800979c <HAL_RCC_OscConfig+0xca4>
 80097ba:	e001      	b.n	80097c0 <HAL_RCC_OscConfig+0xcc8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e000      	b.n	80097c2 <HAL_RCC_OscConfig+0xcca>
    }
  }
  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3730      	adds	r7, #48	; 0x30
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	46020c00 	.word	0x46020c00
 80097d0:	46020800 	.word	0x46020800
 80097d4:	80800000 	.word	0x80800000

080097d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d101      	bne.n	80097ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e146      	b.n	8009a7a <HAL_RCC_ClockConfig+0x2a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80097ec:	4ba5      	ldr	r3, [pc, #660]	; (8009a84 <HAL_RCC_ClockConfig+0x2ac>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 030f 	and.w	r3, r3, #15
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d910      	bls.n	800981c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097fa:	4ba2      	ldr	r3, [pc, #648]	; (8009a84 <HAL_RCC_ClockConfig+0x2ac>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f023 020f 	bic.w	r2, r3, #15
 8009802:	49a0      	ldr	r1, [pc, #640]	; (8009a84 <HAL_RCC_ClockConfig+0x2ac>)
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	4313      	orrs	r3, r2
 8009808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800980a:	4b9e      	ldr	r3, [pc, #632]	; (8009a84 <HAL_RCC_ClockConfig+0x2ac>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f003 030f 	and.w	r3, r3, #15
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	429a      	cmp	r2, r3
 8009816:	d001      	beq.n	800981c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e12e      	b.n	8009a7a <HAL_RCC_ClockConfig+0x2a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0301 	and.w	r3, r3, #1
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 80be 	beq.w	80099a6 <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	2b03      	cmp	r3, #3
 8009830:	d137      	bne.n	80098a2 <HAL_RCC_ClockConfig+0xca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009832:	4b95      	ldr	r3, [pc, #596]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 8009834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009838:	4a93      	ldr	r2, [pc, #588]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 800983a:	f043 0304 	orr.w	r3, r3, #4
 800983e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009842:	4b91      	ldr	r3, [pc, #580]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 8009844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	60fb      	str	r3, [r7, #12]
 800984e:	68fb      	ldr	r3, [r7, #12]
      tickstart = HAL_GetTick();
 8009850:	f7fd f842 	bl	80068d8 <HAL_GetTick>
 8009854:	6178      	str	r0, [r7, #20]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8009856:	4b8d      	ldr	r3, [pc, #564]	; (8009a8c <HAL_RCC_ClockConfig+0x2b4>)
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00f      	beq.n	8009882 <HAL_RCC_ClockConfig+0xaa>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009862:	e008      	b.n	8009876 <HAL_RCC_ClockConfig+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8009864:	f7fd f838 	bl	80068d8 <HAL_GetTick>
 8009868:	4602      	mov	r2, r0
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	2b02      	cmp	r3, #2
 8009870:	d901      	bls.n	8009876 <HAL_RCC_ClockConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8009872:	2303      	movs	r3, #3
 8009874:	e101      	b.n	8009a7a <HAL_RCC_ClockConfig+0x2a2>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009876:	4b85      	ldr	r3, [pc, #532]	; (8009a8c <HAL_RCC_ClockConfig+0x2b4>)
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800987e:	2b00      	cmp	r3, #0
 8009880:	d0f0      	beq.n	8009864 <HAL_RCC_ClockConfig+0x8c>
          }
        }
      }

      __HAL_RCC_PWR_CLK_DISABLE();
 8009882:	4b81      	ldr	r3, [pc, #516]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 8009884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009888:	4a7f      	ldr	r2, [pc, #508]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 800988a:	f023 0304 	bic.w	r3, r3, #4
 800988e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009892:	4b7d      	ldr	r3, [pc, #500]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d121      	bne.n	80098e2 <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e0eb      	b.n	8009a7a <HAL_RCC_ClockConfig+0x2a2>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d107      	bne.n	80098ba <HAL_RCC_ClockConfig+0xe2>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098aa:	4b77      	ldr	r3, [pc, #476]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d115      	bne.n	80098e2 <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e0df      	b.n	8009a7a <HAL_RCC_ClockConfig+0x2a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d107      	bne.n	80098d2 <HAL_RCC_ClockConfig+0xfa>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80098c2:	4b71      	ldr	r3, [pc, #452]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 0304 	and.w	r3, r3, #4
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d109      	bne.n	80098e2 <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e0d3      	b.n	8009a7a <HAL_RCC_ClockConfig+0x2a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80098d2:	4b6d      	ldr	r3, [pc, #436]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e0cb      	b.n	8009a7a <HAL_RCC_ClockConfig+0x2a2>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80098e2:	4b69      	ldr	r3, [pc, #420]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 80098e4:	69db      	ldr	r3, [r3, #28]
 80098e6:	f023 0203 	bic.w	r2, r3, #3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	4966      	ldr	r1, [pc, #408]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 80098f0:	4313      	orrs	r3, r2
 80098f2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80098f4:	f7fc fff0 	bl	80068d8 <HAL_GetTick>
 80098f8:	6178      	str	r0, [r7, #20]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d112      	bne.n	8009928 <HAL_RCC_ClockConfig+0x150>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009902:	e00a      	b.n	800991a <HAL_RCC_ClockConfig+0x142>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009904:	f7fc ffe8 	bl	80068d8 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009912:	4293      	cmp	r3, r2
 8009914:	d901      	bls.n	800991a <HAL_RCC_ClockConfig+0x142>
        {
          return HAL_TIMEOUT;
 8009916:	2303      	movs	r3, #3
 8009918:	e0af      	b.n	8009a7a <HAL_RCC_ClockConfig+0x2a2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800991a:	4b5b      	ldr	r3, [pc, #364]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	f003 030c 	and.w	r3, r3, #12
 8009922:	2b0c      	cmp	r3, #12
 8009924:	d1ee      	bne.n	8009904 <HAL_RCC_ClockConfig+0x12c>
 8009926:	e03e      	b.n	80099a6 <HAL_RCC_ClockConfig+0x1ce>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	2b02      	cmp	r3, #2
 800992e:	d112      	bne.n	8009956 <HAL_RCC_ClockConfig+0x17e>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009930:	e00a      	b.n	8009948 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009932:	f7fc ffd1 	bl	80068d8 <HAL_GetTick>
 8009936:	4602      	mov	r2, r0
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009940:	4293      	cmp	r3, r2
 8009942:	d901      	bls.n	8009948 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	e098      	b.n	8009a7a <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009948:	4b4f      	ldr	r3, [pc, #316]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	f003 030c 	and.w	r3, r3, #12
 8009950:	2b08      	cmp	r3, #8
 8009952:	d1ee      	bne.n	8009932 <HAL_RCC_ClockConfig+0x15a>
 8009954:	e027      	b.n	80099a6 <HAL_RCC_ClockConfig+0x1ce>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d11d      	bne.n	800999a <HAL_RCC_ClockConfig+0x1c2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800995e:	e00a      	b.n	8009976 <HAL_RCC_ClockConfig+0x19e>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009960:	f7fc ffba 	bl	80068d8 <HAL_GetTick>
 8009964:	4602      	mov	r2, r0
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	f241 3288 	movw	r2, #5000	; 0x1388
 800996e:	4293      	cmp	r3, r2
 8009970:	d901      	bls.n	8009976 <HAL_RCC_ClockConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e081      	b.n	8009a7a <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009976:	4b44      	ldr	r3, [pc, #272]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	f003 030c 	and.w	r3, r3, #12
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1ee      	bne.n	8009960 <HAL_RCC_ClockConfig+0x188>
 8009982:	e010      	b.n	80099a6 <HAL_RCC_ClockConfig+0x1ce>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009984:	f7fc ffa8 	bl	80068d8 <HAL_GetTick>
 8009988:	4602      	mov	r2, r0
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	1ad3      	subs	r3, r2, r3
 800998e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009992:	4293      	cmp	r3, r2
 8009994:	d901      	bls.n	800999a <HAL_RCC_ClockConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	e06f      	b.n	8009a7a <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800999a:	4b3b      	ldr	r3, [pc, #236]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 800999c:	69db      	ldr	r3, [r3, #28]
 800999e:	f003 030c 	and.w	r3, r3, #12
 80099a2:	2b04      	cmp	r3, #4
 80099a4:	d1ee      	bne.n	8009984 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f003 0302 	and.w	r3, r3, #2
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d008      	beq.n	80099c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80099b2:	4b35      	ldr	r3, [pc, #212]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	f023 020f 	bic.w	r2, r3, #15
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	4932      	ldr	r1, [pc, #200]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 80099c0:	4313      	orrs	r3, r2
 80099c2:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 0304 	and.w	r3, r3, #4
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d008      	beq.n	80099e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80099d0:	4b2d      	ldr	r3, [pc, #180]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 80099d2:	6a1b      	ldr	r3, [r3, #32]
 80099d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	492a      	ldr	r1, [pc, #168]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 80099de:	4313      	orrs	r3, r2
 80099e0:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 0308 	and.w	r3, r3, #8
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d009      	beq.n	8009a02 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80099ee:	4b26      	ldr	r3, [pc, #152]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	011b      	lsls	r3, r3, #4
 80099fc:	4922      	ldr	r1, [pc, #136]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0310 	and.w	r3, r3, #16
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d008      	beq.n	8009a20 <HAL_RCC_ClockConfig+0x248>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
    MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8009a0e:	4b1e      	ldr	r3, [pc, #120]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 8009a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	491b      	ldr	r1, [pc, #108]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	624b      	str	r3, [r1, #36]	; 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a20:	4b18      	ldr	r3, [pc, #96]	; (8009a84 <HAL_RCC_ClockConfig+0x2ac>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 030f 	and.w	r3, r3, #15
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d210      	bcs.n	8009a50 <HAL_RCC_ClockConfig+0x278>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a2e:	4b15      	ldr	r3, [pc, #84]	; (8009a84 <HAL_RCC_ClockConfig+0x2ac>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f023 020f 	bic.w	r2, r3, #15
 8009a36:	4913      	ldr	r1, [pc, #76]	; (8009a84 <HAL_RCC_ClockConfig+0x2ac>)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a3e:	4b11      	ldr	r3, [pc, #68]	; (8009a84 <HAL_RCC_ClockConfig+0x2ac>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 030f 	and.w	r3, r3, #15
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d001      	beq.n	8009a50 <HAL_RCC_ClockConfig+0x278>
    {
      return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e014      	b.n	8009a7a <HAL_RCC_ClockConfig+0x2a2>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009a50:	f000 f824 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 8009a54:	4602      	mov	r2, r0
 8009a56:	4b0c      	ldr	r3, [pc, #48]	; (8009a88 <HAL_RCC_ClockConfig+0x2b0>)
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	f003 030f 	and.w	r3, r3, #15
 8009a5e:	490c      	ldr	r1, [pc, #48]	; (8009a90 <HAL_RCC_ClockConfig+0x2b8>)
 8009a60:	5ccb      	ldrb	r3, [r1, r3]
 8009a62:	fa22 f303 	lsr.w	r3, r2, r3
 8009a66:	4a0b      	ldr	r2, [pc, #44]	; (8009a94 <HAL_RCC_ClockConfig+0x2bc>)
 8009a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009a6a:	4b0b      	ldr	r3, [pc, #44]	; (8009a98 <HAL_RCC_ClockConfig+0x2c0>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fc fee8 	bl	8006844 <HAL_InitTick>
 8009a74:	4603      	mov	r3, r0
 8009a76:	74fb      	strb	r3, [r7, #19]

  return status;
 8009a78:	7cfb      	ldrb	r3, [r7, #19]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	40022000 	.word	0x40022000
 8009a88:	46020c00 	.word	0x46020c00
 8009a8c:	46020800 	.word	0x46020800
 8009a90:	0801b168 	.word	0x0801b168
 8009a94:	20000010 	.word	0x20000010
 8009a98:	200000a8 	.word	0x200000a8

08009a9c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b08b      	sub	sp, #44	; 0x2c
 8009aa0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009aaa:	4b7b      	ldr	r3, [pc, #492]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	f003 030c 	and.w	r3, r3, #12
 8009ab2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ab4:	4b78      	ldr	r3, [pc, #480]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab8:	f003 0303 	and.w	r3, r3, #3
 8009abc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d005      	beq.n	8009ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	2b0c      	cmp	r3, #12
 8009ac8:	d121      	bne.n	8009b0e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d11e      	bne.n	8009b0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8009ad0:	4b71      	ldr	r3, [pc, #452]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d107      	bne.n	8009aec <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8009adc:	4b6e      	ldr	r3, [pc, #440]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009ade:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ae2:	0b1b      	lsrs	r3, r3, #12
 8009ae4:	f003 030f 	and.w	r3, r3, #15
 8009ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8009aea:	e005      	b.n	8009af8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8009aec:	4b6a      	ldr	r3, [pc, #424]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	0f1b      	lsrs	r3, r3, #28
 8009af2:	f003 030f 	and.w	r3, r3, #15
 8009af6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009af8:	4a68      	ldr	r2, [pc, #416]	; (8009c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8009afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b00:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d110      	bne.n	8009b2a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009b0c:	e00d      	b.n	8009b2a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009b0e:	4b62      	ldr	r3, [pc, #392]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009b10:	69db      	ldr	r3, [r3, #28]
 8009b12:	f003 030c 	and.w	r3, r3, #12
 8009b16:	2b04      	cmp	r3, #4
 8009b18:	d102      	bne.n	8009b20 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009b1a:	4b61      	ldr	r3, [pc, #388]	; (8009ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8009b1c:	623b      	str	r3, [r7, #32]
 8009b1e:	e004      	b.n	8009b2a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	2b08      	cmp	r3, #8
 8009b24:	d101      	bne.n	8009b2a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009b26:	4b5e      	ldr	r3, [pc, #376]	; (8009ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8009b28:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	2b0c      	cmp	r3, #12
 8009b2e:	f040 80ac 	bne.w	8009c8a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009b32:	4b59      	ldr	r3, [pc, #356]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b36:	f003 0303 	and.w	r3, r3, #3
 8009b3a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009b3c:	4b56      	ldr	r3, [pc, #344]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b40:	0a1b      	lsrs	r3, r3, #8
 8009b42:	f003 030f 	and.w	r3, r3, #15
 8009b46:	3301      	adds	r3, #1
 8009b48:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009b4a:	4b53      	ldr	r3, [pc, #332]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4e:	091b      	lsrs	r3, r3, #4
 8009b50:	f003 0301 	and.w	r3, r3, #1
 8009b54:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009b56:	4b50      	ldr	r3, [pc, #320]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5a:	08db      	lsrs	r3, r3, #3
 8009b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	fb02 f303 	mul.w	r3, r2, r3
 8009b66:	ee07 3a90 	vmov	s15, r3
 8009b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 8086 	beq.w	8009c86 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d003      	beq.n	8009b88 <HAL_RCC_GetSysClockFreq+0xec>
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	d022      	beq.n	8009bcc <HAL_RCC_GetSysClockFreq+0x130>
 8009b86:	e043      	b.n	8009c10 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	ee07 3a90 	vmov	s15, r3
 8009b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b92:	eddf 6a44 	vldr	s13, [pc, #272]	; 8009ca4 <HAL_RCC_GetSysClockFreq+0x208>
 8009b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b9a:	4b3f      	ldr	r3, [pc, #252]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009baa:	ed97 6a01 	vldr	s12, [r7, #4]
 8009bae:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009ca8 <HAL_RCC_GetSysClockFreq+0x20c>
 8009bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8009bca:	e046      	b.n	8009c5a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	ee07 3a90 	vmov	s15, r3
 8009bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd6:	eddf 6a33 	vldr	s13, [pc, #204]	; 8009ca4 <HAL_RCC_GetSysClockFreq+0x208>
 8009bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bde:	4b2e      	ldr	r3, [pc, #184]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009bee:	ed97 6a01 	vldr	s12, [r7, #4]
 8009bf2:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8009ca8 <HAL_RCC_GetSysClockFreq+0x20c>
 8009bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c0a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8009c0e:	e024      	b.n	8009c5a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	ee07 3a90 	vmov	s15, r3
 8009c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	ee07 3a90 	vmov	s15, r3
 8009c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c28:	4b1b      	ldr	r3, [pc, #108]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c30:	ee07 3a90 	vmov	s15, r3
 8009c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009c38:	ed97 6a01 	vldr	s12, [r7, #4]
 8009c3c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8009ca8 <HAL_RCC_GetSysClockFreq+0x20c>
 8009c40:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c44:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009c48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c54:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8009c58:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8009c5a:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5e:	0e1b      	lsrs	r3, r3, #24
 8009c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c64:	3301      	adds	r3, #1
 8009c66:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	ee07 3a90 	vmov	s15, r3
 8009c6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c72:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c7e:	ee17 3a90 	vmov	r3, s15
 8009c82:	623b      	str	r3, [r7, #32]
 8009c84:	e001      	b.n	8009c8a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8009c8a:	6a3b      	ldr	r3, [r7, #32]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	372c      	adds	r7, #44	; 0x2c
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	46020c00 	.word	0x46020c00
 8009c9c:	0801b180 	.word	0x0801b180
 8009ca0:	00f42400 	.word	0x00f42400
 8009ca4:	4b742400 	.word	0x4b742400
 8009ca8:	46000000 	.word	0x46000000

08009cac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009cb0:	f7ff fef4 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	4b07      	ldr	r3, [pc, #28]	; (8009cd4 <HAL_RCC_GetHCLKFreq+0x28>)
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	f003 030f 	and.w	r3, r3, #15
 8009cbe:	4906      	ldr	r1, [pc, #24]	; (8009cd8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8009cc0:	5ccb      	ldrb	r3, [r1, r3]
 8009cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cc6:	4a05      	ldr	r2, [pc, #20]	; (8009cdc <HAL_RCC_GetHCLKFreq+0x30>)
 8009cc8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8009cca:	4b04      	ldr	r3, [pc, #16]	; (8009cdc <HAL_RCC_GetHCLKFreq+0x30>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	46020c00 	.word	0x46020c00
 8009cd8:	0801b168 	.word	0x0801b168
 8009cdc:	20000010 	.word	0x20000010

08009ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8009ce4:	f7ff ffe2 	bl	8009cac <HAL_RCC_GetHCLKFreq>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	4b05      	ldr	r3, [pc, #20]	; (8009d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	091b      	lsrs	r3, r3, #4
 8009cf0:	f003 0307 	and.w	r3, r3, #7
 8009cf4:	4903      	ldr	r1, [pc, #12]	; (8009d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009cf6:	5ccb      	ldrb	r3, [r1, r3]
 8009cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	46020c00 	.word	0x46020c00
 8009d04:	0801b178 	.word	0x0801b178

08009d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8009d0c:	f7ff ffce 	bl	8009cac <HAL_RCC_GetHCLKFreq>
 8009d10:	4602      	mov	r2, r0
 8009d12:	4b05      	ldr	r3, [pc, #20]	; (8009d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	0a1b      	lsrs	r3, r3, #8
 8009d18:	f003 0307 	and.w	r3, r3, #7
 8009d1c:	4903      	ldr	r1, [pc, #12]	; (8009d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d1e:	5ccb      	ldrb	r3, [r1, r3]
 8009d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	46020c00 	.word	0x46020c00
 8009d2c:	0801b178 	.word	0x0801b178

08009d30 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8009d34:	f7ff ffba 	bl	8009cac <HAL_RCC_GetHCLKFreq>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	4b05      	ldr	r3, [pc, #20]	; (8009d50 <HAL_RCC_GetPCLK3Freq+0x20>)
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3e:	091b      	lsrs	r3, r3, #4
 8009d40:	f003 0307 	and.w	r3, r3, #7
 8009d44:	4903      	ldr	r1, [pc, #12]	; (8009d54 <HAL_RCC_GetPCLK3Freq+0x24>)
 8009d46:	5ccb      	ldrb	r3, [r1, r3]
 8009d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	46020c00 	.word	0x46020c00
 8009d54:	0801b178 	.word	0x0801b178

08009d58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009d60:	4b3e      	ldr	r3, [pc, #248]	; (8009e5c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d66:	f003 0304 	and.w	r3, r3, #4
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009d6e:	f7fe fea5 	bl	8008abc <HAL_PWREx_GetVoltageRange>
 8009d72:	6178      	str	r0, [r7, #20]
 8009d74:	e019      	b.n	8009daa <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009d76:	4b39      	ldr	r3, [pc, #228]	; (8009e5c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d7c:	4a37      	ldr	r2, [pc, #220]	; (8009e5c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009d7e:	f043 0304 	orr.w	r3, r3, #4
 8009d82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009d86:	4b35      	ldr	r3, [pc, #212]	; (8009e5c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d8c:	f003 0304 	and.w	r3, r3, #4
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009d94:	f7fe fe92 	bl	8008abc <HAL_PWREx_GetVoltageRange>
 8009d98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009d9a:	4b30      	ldr	r3, [pc, #192]	; (8009e5c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009da0:	4a2e      	ldr	r2, [pc, #184]	; (8009e5c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009da2:	f023 0304 	bic.w	r3, r3, #4
 8009da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009db0:	d003      	beq.n	8009dba <RCC_SetFlashLatencyFromMSIRange+0x62>
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009db8:	d109      	bne.n	8009dce <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dc0:	d202      	bcs.n	8009dc8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009dc6:	e033      	b.n	8009e30 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8009dc8:	2300      	movs	r3, #0
 8009dca:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009dcc:	e030      	b.n	8009e30 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dd4:	d208      	bcs.n	8009de8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ddc:	d102      	bne.n	8009de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8009dde:	2303      	movs	r3, #3
 8009de0:	613b      	str	r3, [r7, #16]
 8009de2:	e025      	b.n	8009e30 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e035      	b.n	8009e54 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dee:	d90f      	bls.n	8009e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>

      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d109      	bne.n	8009e0a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009dfc:	d902      	bls.n	8009e04 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8009dfe:	2300      	movs	r3, #0
 8009e00:	613b      	str	r3, [r7, #16]
 8009e02:	e015      	b.n	8009e30 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8009e04:	2301      	movs	r3, #1
 8009e06:	613b      	str	r3, [r7, #16]
 8009e08:	e012      	b.n	8009e30 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	613b      	str	r3, [r7, #16]
 8009e0e:	e00f      	b.n	8009e30 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e16:	d109      	bne.n	8009e2c <RCC_SetFlashLatencyFromMSIRange+0xd4>

        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e1e:	d102      	bne.n	8009e26 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8009e20:	2301      	movs	r3, #1
 8009e22:	613b      	str	r3, [r7, #16]
 8009e24:	e004      	b.n	8009e30 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8009e26:	2302      	movs	r3, #2
 8009e28:	613b      	str	r3, [r7, #16]
 8009e2a:	e001      	b.n	8009e30 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009e30:	4b0b      	ldr	r3, [pc, #44]	; (8009e60 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f023 020f 	bic.w	r2, r3, #15
 8009e38:	4909      	ldr	r1, [pc, #36]	; (8009e60 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8009e40:	4b07      	ldr	r3, [pc, #28]	; (8009e60 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 030f 	and.w	r3, r3, #15
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d001      	beq.n	8009e52 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e000      	b.n	8009e54 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3718      	adds	r7, #24
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	46020c00 	.word	0x46020c00
 8009e60:	40022000 	.word	0x40022000

08009e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e70:	2300      	movs	r3, #0
 8009e72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00a      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8009e80:	4bae      	ldr	r3, [pc, #696]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e86:	f023 0203 	bic.w	r2, r3, #3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e8e:	49ab      	ldr	r1, [pc, #684]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e90:	4313      	orrs	r3, r2
 8009e92:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 0302 	and.w	r3, r3, #2
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00a      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8009ea2:	4ba6      	ldr	r3, [pc, #664]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ea8:	f023 020c 	bic.w	r2, r3, #12
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb0:	49a2      	ldr	r1, [pc, #648]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 0304 	and.w	r3, r3, #4
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00a      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8009ec4:	4b9d      	ldr	r3, [pc, #628]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009eca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed2:	499a      	ldr	r1, [pc, #616]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 0308 	and.w	r3, r3, #8
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00a      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8009ee6:	4b95      	ldr	r3, [pc, #596]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009eec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ef4:	4991      	ldr	r1, [pc, #580]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 0310 	and.w	r3, r3, #16
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00a      	beq.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8009f08:	4b8c      	ldr	r3, [pc, #560]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f16:	4989      	ldr	r1, [pc, #548]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0320 	and.w	r3, r3, #32
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00a      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8009f2a:	4b84      	ldr	r3, [pc, #528]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009f30:	f023 0207 	bic.w	r2, r3, #7
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f38:	4980      	ldr	r1, [pc, #512]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00a      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8009f4c:	4b7b      	ldr	r3, [pc, #492]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f5a:	4978      	ldr	r1, [pc, #480]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00a      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8009f6e:	4b73      	ldr	r3, [pc, #460]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f7c:	496f      	ldr	r1, [pc, #444]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00a      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8009f90:	4b6a      	ldr	r3, [pc, #424]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009f96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f9e:	4967      	ldr	r1, [pc, #412]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00a      	beq.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009fb2:	4b62      	ldr	r3, [pc, #392]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc0:	495e      	ldr	r1, [pc, #376]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00a      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8009fd4:	4b59      	ldr	r3, [pc, #356]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009fd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009fda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fe2:	4956      	ldr	r1, [pc, #344]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00a      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009ff6:	4b51      	ldr	r3, [pc, #324]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ffc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a004:	494d      	ldr	r1, [pc, #308]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a006:	4313      	orrs	r3, r2
 800a008:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00a      	beq.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800a018:	4b48      	ldr	r3, [pc, #288]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a01a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a01e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a026:	4945      	ldr	r1, [pc, #276]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a028:	4313      	orrs	r3, r2
 800a02a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a036:	2b00      	cmp	r3, #0
 800a038:	d042      	beq.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a040:	2b80      	cmp	r3, #128	; 0x80
 800a042:	d028      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x232>
 800a044:	2b80      	cmp	r3, #128	; 0x80
 800a046:	d823      	bhi.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800a048:	2b60      	cmp	r3, #96	; 0x60
 800a04a:	d026      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x236>
 800a04c:	2b60      	cmp	r3, #96	; 0x60
 800a04e:	d81f      	bhi.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800a050:	2b40      	cmp	r3, #64	; 0x40
 800a052:	d006      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a054:	2b40      	cmp	r3, #64	; 0x40
 800a056:	d81b      	bhi.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d009      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800a05c:	2b20      	cmp	r3, #32
 800a05e:	d00f      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800a060:	e016      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a062:	4b36      	ldr	r3, [pc, #216]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a066:	4a35      	ldr	r2, [pc, #212]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a06c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a06e:	e015      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x238>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3304      	adds	r3, #4
 800a074:	4618      	mov	r0, r3
 800a076:	f002 f85f 	bl	800c138 <RCCEx_PLL2_Config>
 800a07a:	4603      	mov	r3, r0
 800a07c:	74fb      	strb	r3, [r7, #19]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a07e:	e00d      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x238>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3328      	adds	r3, #40	; 0x28
 800a084:	4618      	mov	r0, r3
 800a086:	f002 f8ef 	bl	800c268 <RCCEx_PLL3_Config>
 800a08a:	4603      	mov	r3, r0
 800a08c:	74fb      	strb	r3, [r7, #19]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a08e:	e005      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x238>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	74fb      	strb	r3, [r7, #19]
        break;
 800a094:	e002      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x238>
        break;
 800a096:	bf00      	nop
 800a098:	e000      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x238>
        break;
 800a09a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a09c:	7cfb      	ldrb	r3, [r7, #19]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d10c      	bne.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800a0a2:	4b26      	ldr	r3, [pc, #152]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a0a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a0a8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0b2:	4922      	ldr	r1, [pc, #136]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a0ba:	e001      	b.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0bc:	7cfb      	ldrb	r3, [r7, #19]
 800a0be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d04c      	beq.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0d6:	d02e      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a0d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0dc:	d828      	bhi.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a0de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0e2:	d02d      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800a0e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0e8:	d822      	bhi.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a0ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0ee:	d008      	beq.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 800a0f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0f4:	d81c      	bhi.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00a      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800a0fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0fe:	d00f      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a100:	e016      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a102:	4b0e      	ldr	r3, [pc, #56]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a106:	4a0d      	ldr	r2, [pc, #52]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a10c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a10e:	e018      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x2de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3304      	adds	r3, #4
 800a114:	4618      	mov	r0, r3
 800a116:	f002 f80f 	bl	800c138 <RCCEx_PLL2_Config>
 800a11a:	4603      	mov	r3, r0
 800a11c:	74fb      	strb	r3, [r7, #19]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a11e:	e010      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x2de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	3328      	adds	r3, #40	; 0x28
 800a124:	4618      	mov	r0, r3
 800a126:	f002 f89f 	bl	800c268 <RCCEx_PLL3_Config>
 800a12a:	4603      	mov	r3, r0
 800a12c:	74fb      	strb	r3, [r7, #19]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a12e:	e008      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	74fb      	strb	r3, [r7, #19]
        break;
 800a134:	e005      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x2de>
        break;
 800a136:	bf00      	nop
 800a138:	e003      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a13a:	bf00      	nop
 800a13c:	46020c00 	.word	0x46020c00
        break;
 800a140:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a142:	7cfb      	ldrb	r3, [r7, #19]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10c      	bne.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800a148:	4bb7      	ldr	r3, [pc, #732]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a14a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a14e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a158:	49b3      	ldr	r1, [pc, #716]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a15a:	4313      	orrs	r3, r2
 800a15c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a160:	e001      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x302>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a162:	7cfb      	ldrb	r3, [r7, #19]
 800a164:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d03e      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a178:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a17c:	d025      	beq.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x366>
 800a17e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a182:	d81f      	bhi.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a188:	d01f      	beq.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x366>
 800a18a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a18e:	d819      	bhi.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a190:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a194:	d019      	beq.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x366>
 800a196:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a19a:	d813      	bhi.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a19c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1a0:	d008      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800a1a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1a6:	d80d      	bhi.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00e      	beq.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x366>
 800a1ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1b0:	d00b      	beq.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x366>
 800a1b2:	e007      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f001 ffbd 	bl	800c138 <RCCEx_PLL2_Config>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	74fb      	strb	r3, [r7, #19]
        break;
 800a1c2:	e003      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x368>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	74fb      	strb	r3, [r7, #19]
        break;
 800a1c8:	e000      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x368>
        break;
 800a1ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1cc:	7cfb      	ldrb	r3, [r7, #19]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10c      	bne.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x388>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800a1d2:	4b95      	ldr	r3, [pc, #596]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a1d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a1d8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a1e2:	4991      	ldr	r1, [pc, #580]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800a1ea:	e001      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ec:	7cfb      	ldrb	r3, [r7, #19]
 800a1ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d036      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a202:	2b04      	cmp	r3, #4
 800a204:	d81b      	bhi.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x3da>
 800a206:	a201      	add	r2, pc, #4	; (adr r2, 800a20c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800a208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20c:	0800a245 	.word	0x0800a245
 800a210:	0800a221 	.word	0x0800a221
 800a214:	0800a22f 	.word	0x0800a22f
 800a218:	0800a245 	.word	0x0800a245
 800a21c:	0800a245 	.word	0x0800a245
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a220:	4b81      	ldr	r3, [pc, #516]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a224:	4a80      	ldr	r2, [pc, #512]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a22a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a22c:	e00b      	b.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	3328      	adds	r3, #40	; 0x28
 800a232:	4618      	mov	r0, r3
 800a234:	f002 f818 	bl	800c268 <RCCEx_PLL3_Config>
 800a238:	4603      	mov	r3, r0
 800a23a:	74fb      	strb	r3, [r7, #19]
        break;
 800a23c:	e003      	b.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	74fb      	strb	r3, [r7, #19]
        break;
 800a242:	e000      	b.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        break;
 800a244:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a246:	7cfb      	ldrb	r3, [r7, #19]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d10c      	bne.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x402>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800a24c:	4b76      	ldr	r3, [pc, #472]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a24e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a252:	f023 0207 	bic.w	r2, r3, #7
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a25c:	4972      	ldr	r1, [pc, #456]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a264:	e001      	b.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x406>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a266:	7cfb      	ldrb	r3, [r7, #19]
 800a268:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a272:	2b00      	cmp	r3, #0
 800a274:	d042      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x498>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));

    switch (pPeriphClkInit->Adf1ClockSelection)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a27c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a280:	d025      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800a282:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a286:	d81f      	bhi.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800a288:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a28c:	d021      	beq.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
 800a28e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a292:	d819      	bhi.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800a294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a298:	d00e      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
 800a29a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a29e:	d813      	bhi.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d018      	beq.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x472>
 800a2a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2a8:	d10e      	bne.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x464>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a2aa:	4b5f      	ldr	r3, [pc, #380]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ae:	4a5e      	ldr	r2, [pc, #376]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a2b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2b4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a2b6:	e00f      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	3328      	adds	r3, #40	; 0x28
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f001 ffd3 	bl	800c268 <RCCEx_PLL3_Config>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	74fb      	strb	r3, [r7, #19]
        break;
 800a2c6:	e007      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	74fb      	strb	r3, [r7, #19]
        break;
 800a2cc:	e004      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 800a2ce:	bf00      	nop
 800a2d0:	e002      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 800a2d2:	bf00      	nop
 800a2d4:	e000      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 800a2d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2d8:	7cfb      	ldrb	r3, [r7, #19]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10c      	bne.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800a2de:	4b52      	ldr	r3, [pc, #328]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a2e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a2e4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ee:	494e      	ldr	r1, [pc, #312]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800a2f6:	e001      	b.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x498>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2f8:	7cfb      	ldrb	r3, [r7, #19]
 800a2fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a304:	2b00      	cmp	r3, #0
 800a306:	f000 80a0 	beq.w	800a44a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a30a:	2300      	movs	r3, #0
 800a30c:	747b      	strb	r3, [r7, #17]
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a30e:	4b46      	ldr	r3, [pc, #280]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a314:	f003 0304 	and.w	r3, r3, #4
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d110      	bne.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x4da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a31c:	4b42      	ldr	r3, [pc, #264]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a31e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a322:	4a41      	ldr	r2, [pc, #260]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a324:	f043 0304 	orr.w	r3, r3, #4
 800a328:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a32c:	4b3e      	ldr	r3, [pc, #248]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a32e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a332:	f003 0304 	and.w	r3, r3, #4
 800a336:	60bb      	str	r3, [r7, #8]
 800a338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a33a:	2301      	movs	r3, #1
 800a33c:	747b      	strb	r3, [r7, #17]
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a33e:	4b3b      	ldr	r3, [pc, #236]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a342:	4a3a      	ldr	r2, [pc, #232]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a344:	f043 0301 	orr.w	r3, r3, #1
 800a348:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a34a:	f7fc fac5 	bl	80068d8 <HAL_GetTick>
 800a34e:	60f8      	str	r0, [r7, #12]

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a350:	e009      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a352:	f7fc fac1 	bl	80068d8 <HAL_GetTick>
 800a356:	4602      	mov	r2, r0
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d902      	bls.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        ret = HAL_TIMEOUT;
 800a360:	2303      	movs	r3, #3
 800a362:	74fb      	strb	r3, [r7, #19]
        break;
 800a364:	e005      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a366:	4b31      	ldr	r3, [pc, #196]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36a:	f003 0301 	and.w	r3, r3, #1
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d0ef      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
      }
    }

    if (ret == HAL_OK)
 800a372:	7cfb      	ldrb	r3, [r7, #19]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d15b      	bne.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a378:	4b2b      	ldr	r3, [pc, #172]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a37a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a37e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a382:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d01f      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x566>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a390:	697a      	ldr	r2, [r7, #20]
 800a392:	429a      	cmp	r2, r3
 800a394:	d019      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x566>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a396:	4b24      	ldr	r3, [pc, #144]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a398:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a39c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3a2:	4b21      	ldr	r3, [pc, #132]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a3a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a3a8:	4a1f      	ldr	r2, [pc, #124]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a3aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a3b2:	4b1d      	ldr	r3, [pc, #116]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a3b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a3b8:	4a1b      	ldr	r2, [pc, #108]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a3ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a3c2:	4a19      	ldr	r2, [pc, #100]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	f003 0301 	and.w	r3, r3, #1
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d016      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3d4:	f7fc fa80 	bl	80068d8 <HAL_GetTick>
 800a3d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a3da:	e00b      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3dc:	f7fc fa7c 	bl	80068d8 <HAL_GetTick>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d902      	bls.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x590>
          {
            ret = HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	74fb      	strb	r3, [r7, #19]
            break;
 800a3f2:	e006      	b.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x59e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a3f4:	4b0c      	ldr	r3, [pc, #48]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a3f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a3fa:	f003 0302 	and.w	r3, r3, #2
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d0ec      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x578>
          }
        }
      }

      if (ret == HAL_OK)
 800a402:	7cfb      	ldrb	r3, [r7, #19]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10c      	bne.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x5be>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800a408:	4b07      	ldr	r3, [pc, #28]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a40a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a40e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a418:	4903      	ldr	r1, [pc, #12]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a41a:	4313      	orrs	r3, r2
 800a41c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
 800a420:	e008      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a422:	7cfb      	ldrb	r3, [r7, #19]
 800a424:	74bb      	strb	r3, [r7, #18]
 800a426:	e005      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a428:	46020c00 	.word	0x46020c00
 800a42c:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a430:	7cfb      	ldrb	r3, [r7, #19]
 800a432:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a434:	7c7b      	ldrb	r3, [r7, #17]
 800a436:	2b01      	cmp	r3, #1
 800a438:	d107      	bne.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a43a:	4bab      	ldr	r3, [pc, #684]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a43c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a440:	4aa9      	ldr	r2, [pc, #676]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a442:	f023 0304 	bic.w	r3, r3, #4
 800a446:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a452:	2b00      	cmp	r3, #0
 800a454:	d03a      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x668>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(pPeriphClkInit->Clk48ClockSelection));

    switch (pPeriphClkInit->Clk48ClockSelection)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a45c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a460:	d01f      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
 800a462:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a466:	d819      	bhi.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x638>
 800a468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a46c:	d00f      	beq.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800a46e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a472:	d813      	bhi.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x638>
 800a474:	2b00      	cmp	r3, #0
 800a476:	d016      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a478:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a47c:	d10e      	bne.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      case RCC_CLK48CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3304      	adds	r3, #4
 800a482:	4618      	mov	r0, r3
 800a484:	f001 fe58 	bl	800c138 <RCCEx_PLL2_Config>
 800a488:	4603      	mov	r3, r0
 800a48a:	74fb      	strb	r3, [r7, #19]
        break;
 800a48c:	e00c      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x644>
      case RCC_CLK48CLKSOURCE_PLL1:
        /* Enable CLK48 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a48e:	4b96      	ldr	r3, [pc, #600]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a492:	4a95      	ldr	r2, [pc, #596]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a498:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a49a:	e005      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x644>
      case RCC_CLK48CLKSOURCE_HSI48:
        break;
      case RCC_CLK48CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	74fb      	strb	r3, [r7, #19]
        break;
 800a4a0:	e002      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x644>
        break;
 800a4a2:	bf00      	nop
 800a4a4:	e000      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x644>
        break;
 800a4a6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a4a8:	7cfb      	ldrb	r3, [r7, #19]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10c      	bne.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->Clk48ClockSelection);
 800a4ae:	4b8e      	ldr	r3, [pc, #568]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a4b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a4be:	498a      	ldr	r1, [pc, #552]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800a4c6:	e001      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x668>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c8:	7cfb      	ldrb	r3, [r7, #19]
 800a4ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d027      	beq.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4e2:	d00a      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x696>
 800a4e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4e8:	d804      	bhi.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d007      	beq.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x69a>
 800a4ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f2:	d006      	beq.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	74fb      	strb	r3, [r7, #19]
        break;
 800a4f8:	e004      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 800a4fa:	bf00      	nop
 800a4fc:	e002      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 800a4fe:	bf00      	nop
 800a500:	e000      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 800a502:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a504:	7cfb      	ldrb	r3, [r7, #19]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10c      	bne.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800a50a:	4b77      	ldr	r3, [pc, #476]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a50c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a510:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a51a:	4973      	ldr	r1, [pc, #460]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a51c:	4313      	orrs	r3, r2
 800a51e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a522:	e001      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a524:	7cfb      	ldrb	r3, [r7, #19]
 800a526:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00b      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800a534:	4b6c      	ldr	r3, [pc, #432]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a536:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a53a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a544:	4968      	ldr	r1, [pc, #416]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a546:	4313      	orrs	r3, r2
 800a548:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d017      	beq.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a55e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a562:	d105      	bne.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a564:	4b60      	ldr	r3, [pc, #384]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a568:	4a5f      	ldr	r2, [pc, #380]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a56a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a56e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800a570:	4b5d      	ldr	r3, [pc, #372]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a572:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a576:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a580:	4959      	ldr	r1, [pc, #356]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a582:	4313      	orrs	r3, r2
 800a584:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00b      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800a594:	4b54      	ldr	r3, [pc, #336]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a59a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a5a4:	4950      	ldr	r1, [pc, #320]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00b      	beq.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x76c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800a5b8:	4b4b      	ldr	r3, [pc, #300]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a5ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a5c8:	4947      	ldr	r1, [pc, #284]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00b      	beq.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a5dc:	4b42      	ldr	r3, [pc, #264]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a5de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a5e2:	f023 0218 	bic.w	r2, r3, #24
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a5ec:	493e      	ldr	r1, [pc, #248]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d023      	beq.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a60a:	d105      	bne.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a60c:	4b36      	ldr	r3, [pc, #216]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a610:	4a35      	ldr	r2, [pc, #212]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a616:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a61e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a622:	d105      	bne.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    {
      /* Enable PLL2 Q CLK output */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a624:	4b30      	ldr	r3, [pc, #192]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a628:	4a2f      	ldr	r2, [pc, #188]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a62a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a62e:	62d3      	str	r3, [r2, #44]	; 0x2c
    }
    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a630:	4b2d      	ldr	r3, [pc, #180]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a632:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a636:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a640:	4929      	ldr	r1, [pc, #164]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a642:	4313      	orrs	r3, r2
 800a644:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a650:	2b00      	cmp	r3, #0
 800a652:	d032      	beq.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a65a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a65e:	d00e      	beq.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800a660:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a664:	d813      	bhi.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x82a>
 800a666:	2b00      	cmp	r3, #0
 800a668:	d014      	beq.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800a66a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a66e:	d10e      	bne.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x82a>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a670:	4b1d      	ldr	r3, [pc, #116]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a674:	4a1c      	ldr	r2, [pc, #112]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a67a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a67c:	e00b      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x832>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	3304      	adds	r3, #4
 800a682:	4618      	mov	r0, r3
 800a684:	f001 fd58 	bl	800c138 <RCCEx_PLL2_Config>
 800a688:	4603      	mov	r3, r0
 800a68a:	74fb      	strb	r3, [r7, #19]
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a68c:	e003      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x832>
      default:
        ret = HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	74fb      	strb	r3, [r7, #19]
        break;
 800a692:	e000      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x832>
        break;
 800a694:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a696:	7cfb      	ldrb	r3, [r7, #19]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d10c      	bne.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800a69c:	4b12      	ldr	r3, [pc, #72]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a69e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6ac:	490e      	ldr	r1, [pc, #56]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800a6b4:	e001      	b.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b6:	7cfb      	ldrb	r3, [r7, #19]
 800a6b8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00b      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800a6c6:	4b08      	ldr	r3, [pc, #32]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a6c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a6cc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a6d6:	4904      	ldr	r1, [pc, #16]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  return status;
 800a6de:	7cbb      	ldrb	r3, [r7, #18]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	46020c00 	.word	0x46020c00

0800a6ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b089      	sub	sp, #36	; 0x24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a6f4:	4bac      	ldr	r3, [pc, #688]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6fc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a6fe:	4baa      	ldr	r3, [pc, #680]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a702:	f003 0303 	and.w	r3, r3, #3
 800a706:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a708:	4ba7      	ldr	r3, [pc, #668]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a70c:	0a1b      	lsrs	r3, r3, #8
 800a70e:	f003 030f 	and.w	r3, r3, #15
 800a712:	3301      	adds	r3, #1
 800a714:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800a716:	4ba4      	ldr	r3, [pc, #656]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71a:	f003 0310 	and.w	r3, r3, #16
 800a71e:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a720:	4ba1      	ldr	r3, [pc, #644]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a724:	08db      	lsrs	r3, r3, #3
 800a726:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	fb02 f303 	mul.w	r3, r2, r3
 800a730:	ee07 3a90 	vmov	s15, r3
 800a734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a738:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f000 8123 	beq.w	800a98a <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	2b03      	cmp	r3, #3
 800a748:	d062      	beq.n	800a810 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	2b03      	cmp	r3, #3
 800a74e:	f200 8081 	bhi.w	800a854 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d024      	beq.n	800a7a2 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d17a      	bne.n	800a854 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	ee07 3a90 	vmov	s15, r3
 800a764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a768:	eddf 6a90 	vldr	s13, [pc, #576]	; 800a9ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800a76c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a770:	4b8d      	ldr	r3, [pc, #564]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a778:	ee07 3a90 	vmov	s15, r3
 800a77c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800a780:	ed97 6a02 	vldr	s12, [r7, #8]
 800a784:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800a9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800a788:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a78c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800a790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a794:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a79c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7a0:	e08f      	b.n	800a8c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a7a2:	4b81      	ldr	r3, [pc, #516]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d005      	beq.n	800a7ba <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800a7ae:	4b7e      	ldr	r3, [pc, #504]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	0f1b      	lsrs	r3, r3, #28
 800a7b4:	f003 030f 	and.w	r3, r3, #15
 800a7b8:	e006      	b.n	800a7c8 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800a7ba:	4b7b      	ldr	r3, [pc, #492]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a7bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a7c0:	041b      	lsls	r3, r3, #16
 800a7c2:	0f1b      	lsrs	r3, r3, #28
 800a7c4:	f003 030f 	and.w	r3, r3, #15
 800a7c8:	4a7a      	ldr	r2, [pc, #488]	; (800a9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800a7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7ce:	ee07 3a90 	vmov	s15, r3
 800a7d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	ee07 3a90 	vmov	s15, r3
 800a7dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	ee07 3a90 	vmov	s15, r3
 800a7ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7f2:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800a9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800a7f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a802:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a80a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a80e:	e058      	b.n	800a8c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	ee07 3a90 	vmov	s15, r3
 800a816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a81a:	eddf 6a64 	vldr	s13, [pc, #400]	; 800a9ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800a81e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a822:	4b61      	ldr	r3, [pc, #388]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a82a:	ee07 3a90 	vmov	s15, r3
 800a82e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800a832:	ed97 6a02 	vldr	s12, [r7, #8]
 800a836:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800a9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800a83a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a83e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800a842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a846:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a84a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a84e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a852:	e036      	b.n	800a8c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a854:	4b54      	ldr	r3, [pc, #336]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d005      	beq.n	800a86c <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 800a860:	4b51      	ldr	r3, [pc, #324]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	0f1b      	lsrs	r3, r3, #28
 800a866:	f003 030f 	and.w	r3, r3, #15
 800a86a:	e006      	b.n	800a87a <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 800a86c:	4b4e      	ldr	r3, [pc, #312]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a86e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a872:	041b      	lsls	r3, r3, #16
 800a874:	0f1b      	lsrs	r3, r3, #28
 800a876:	f003 030f 	and.w	r3, r3, #15
 800a87a:	4a4e      	ldr	r2, [pc, #312]	; (800a9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800a87c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a880:	ee07 3a90 	vmov	s15, r3
 800a884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	ee07 3a90 	vmov	s15, r3
 800a88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	ee07 3a90 	vmov	s15, r3
 800a89c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8a0:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8a4:	eddf 5a42 	vldr	s11, [pc, #264]	; 800a9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800a8a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a8b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8c0:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a8c2:	4b39      	ldr	r3, [pc, #228]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a8c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d017      	beq.n	800a8fe <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a8ce:	4b36      	ldr	r3, [pc, #216]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d2:	0a5b      	lsrs	r3, r3, #9
 800a8d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8d8:	ee07 3a90 	vmov	s15, r3
 800a8dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800a8e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8e4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a8e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8f4:	ee17 2a90 	vmov	r2, s15
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	601a      	str	r2, [r3, #0]
 800a8fc:	e002      	b.n	800a904 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a904:	4b28      	ldr	r3, [pc, #160]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d017      	beq.n	800a940 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a910:	4b25      	ldr	r3, [pc, #148]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a914:	0c1b      	lsrs	r3, r3, #16
 800a916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a91a:	ee07 3a90 	vmov	s15, r3
 800a91e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a922:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a926:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a92a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a92e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a936:	ee17 2a90 	vmov	r2, s15
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	605a      	str	r2, [r3, #4]
 800a93e:	e002      	b.n	800a946 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a946:	4b18      	ldr	r3, [pc, #96]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a94a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d017      	beq.n	800a982 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a952:	4b15      	ldr	r3, [pc, #84]	; (800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800a954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a956:	0e1b      	lsrs	r3, r3, #24
 800a958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a95c:	ee07 3a90 	vmov	s15, r3
 800a960:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800a964:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a968:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a96c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a978:	ee17 2a90 	vmov	r2, s15
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	609a      	str	r2, [r3, #8]
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }
}
 800a980:	e00c      	b.n	800a99c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	609a      	str	r2, [r3, #8]
}
 800a988:	e008      	b.n	800a99c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	609a      	str	r2, [r3, #8]
}
 800a99c:	bf00      	nop
 800a99e:	3724      	adds	r7, #36	; 0x24
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr
 800a9a8:	46020c00 	.word	0x46020c00
 800a9ac:	4b742400 	.word	0x4b742400
 800a9b0:	46000000 	.word	0x46000000
 800a9b4:	0801b180 	.word	0x0801b180

0800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b089      	sub	sp, #36	; 0x24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a9c0:	4bac      	ldr	r3, [pc, #688]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800a9c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9c8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a9ca:	4baa      	ldr	r3, [pc, #680]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800a9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ce:	f003 0303 	and.w	r3, r3, #3
 800a9d2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800a9d4:	4ba7      	ldr	r3, [pc, #668]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800a9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d8:	0a1b      	lsrs	r3, r3, #8
 800a9da:	f003 030f 	and.w	r3, r3, #15
 800a9de:	3301      	adds	r3, #1
 800a9e0:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800a9e2:	4ba4      	ldr	r3, [pc, #656]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800a9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e6:	f003 0310 	and.w	r3, r3, #16
 800a9ea:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a9ec:	4ba1      	ldr	r3, [pc, #644]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800a9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f0:	08db      	lsrs	r3, r3, #3
 800a9f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	fb02 f303 	mul.w	r3, r2, r3
 800a9fc:	ee07 3a90 	vmov	s15, r3
 800aa00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa04:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f000 8123 	beq.w	800ac56 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	d062      	beq.n	800aadc <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b03      	cmp	r3, #3
 800aa1a:	f200 8081 	bhi.w	800ab20 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d024      	beq.n	800aa6e <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d17a      	bne.n	800ab20 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	ee07 3a90 	vmov	s15, r3
 800aa30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa34:	eddf 6a90 	vldr	s13, [pc, #576]	; 800ac78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800aa38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa3c:	4b8d      	ldr	r3, [pc, #564]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800aa3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa44:	ee07 3a90 	vmov	s15, r3
 800aa48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa4c:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa50:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800ac7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800aa54:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aa58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa60:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aa64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa6c:	e08f      	b.n	800ab8e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800aa6e:	4b81      	ldr	r3, [pc, #516]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d005      	beq.n	800aa86 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800aa7a:	4b7e      	ldr	r3, [pc, #504]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	0f1b      	lsrs	r3, r3, #28
 800aa80:	f003 030f 	and.w	r3, r3, #15
 800aa84:	e006      	b.n	800aa94 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800aa86:	4b7b      	ldr	r3, [pc, #492]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800aa88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aa8c:	041b      	lsls	r3, r3, #16
 800aa8e:	0f1b      	lsrs	r3, r3, #28
 800aa90:	f003 030f 	and.w	r3, r3, #15
 800aa94:	4a7a      	ldr	r2, [pc, #488]	; (800ac80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800aa96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa9a:	ee07 3a90 	vmov	s15, r3
 800aa9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	ee07 3a90 	vmov	s15, r3
 800aaa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	ee07 3a90 	vmov	s15, r3
 800aab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaba:	ed97 6a02 	vldr	s12, [r7, #8]
 800aabe:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800ac7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800aac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aace:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800aad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aada:	e058      	b.n	800ab8e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	ee07 3a90 	vmov	s15, r3
 800aae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae6:	eddf 6a64 	vldr	s13, [pc, #400]	; 800ac78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800aaea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaee:	4b61      	ldr	r3, [pc, #388]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800aaf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf6:	ee07 3a90 	vmov	s15, r3
 800aafa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800aafe:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab02:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800ac7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800ab06:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ab0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab12:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ab16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab1e:	e036      	b.n	800ab8e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ab20:	4b54      	ldr	r3, [pc, #336]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d005      	beq.n	800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 800ab2c:	4b51      	ldr	r3, [pc, #324]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	0f1b      	lsrs	r3, r3, #28
 800ab32:	f003 030f 	and.w	r3, r3, #15
 800ab36:	e006      	b.n	800ab46 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800ab38:	4b4e      	ldr	r3, [pc, #312]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ab3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab3e:	041b      	lsls	r3, r3, #16
 800ab40:	0f1b      	lsrs	r3, r3, #28
 800ab42:	f003 030f 	and.w	r3, r3, #15
 800ab46:	4a4e      	ldr	r2, [pc, #312]	; (800ac80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800ab48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab4c:	ee07 3a90 	vmov	s15, r3
 800ab50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	ee07 3a90 	vmov	s15, r3
 800ab5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	ee07 3a90 	vmov	s15, r3
 800ab68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab6c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab70:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ac7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800ab74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab80:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ab84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab8c:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ab8e:	4b39      	ldr	r3, [pc, #228]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ab90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d017      	beq.n	800abca <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab9a:	4b36      	ldr	r3, [pc, #216]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ab9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab9e:	0a5b      	lsrs	r3, r3, #9
 800aba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aba4:	ee07 3a90 	vmov	s15, r3
 800aba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800abac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abb0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800abb4:	edd7 6a07 	vldr	s13, [r7, #28]
 800abb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abc0:	ee17 2a90 	vmov	r2, s15
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	601a      	str	r2, [r3, #0]
 800abc8:	e002      	b.n	800abd0 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800abd0:	4b28      	ldr	r3, [pc, #160]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800abd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d017      	beq.n	800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800abdc:	4b25      	ldr	r3, [pc, #148]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800abde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe0:	0c1b      	lsrs	r3, r3, #16
 800abe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abe6:	ee07 3a90 	vmov	s15, r3
 800abea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800abee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abf2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800abf6:	edd7 6a07 	vldr	s13, [r7, #28]
 800abfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac02:	ee17 2a90 	vmov	r2, s15
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	605a      	str	r2, [r3, #4]
 800ac0a:	e002      	b.n	800ac12 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800ac12:	4b18      	ldr	r3, [pc, #96]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ac14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d017      	beq.n	800ac4e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ac1e:	4b15      	ldr	r3, [pc, #84]	; (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ac20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac22:	0e1b      	lsrs	r3, r3, #24
 800ac24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac28:	ee07 3a90 	vmov	s15, r3
 800ac2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800ac30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac34:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ac38:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac44:	ee17 2a90 	vmov	r2, s15
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac4c:	e00c      	b.n	800ac68 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	609a      	str	r2, [r3, #8]
}
 800ac54:	e008      	b.n	800ac68 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	609a      	str	r2, [r3, #8]
}
 800ac68:	bf00      	nop
 800ac6a:	3724      	adds	r7, #36	; 0x24
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr
 800ac74:	46020c00 	.word	0x46020c00
 800ac78:	4b742400 	.word	0x4b742400
 800ac7c:	46000000 	.word	0x46000000
 800ac80:	0801b180 	.word	0x0801b180

0800ac84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b089      	sub	sp, #36	; 0x24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800ac8c:	4bac      	ldr	r3, [pc, #688]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ac8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac94:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800ac96:	4baa      	ldr	r3, [pc, #680]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ac98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac9a:	f003 0303 	and.w	r3, r3, #3
 800ac9e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800aca0:	4ba7      	ldr	r3, [pc, #668]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800aca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca4:	0a1b      	lsrs	r3, r3, #8
 800aca6:	f003 030f 	and.w	r3, r3, #15
 800acaa:	3301      	adds	r3, #1
 800acac:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800acae:	4ba4      	ldr	r3, [pc, #656]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800acb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb2:	f003 0310 	and.w	r3, r3, #16
 800acb6:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800acb8:	4ba1      	ldr	r3, [pc, #644]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800acba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acbc:	08db      	lsrs	r3, r3, #3
 800acbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	fb02 f303 	mul.w	r3, r2, r3
 800acc8:	ee07 3a90 	vmov	s15, r3
 800accc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 8123 	beq.w	800af22 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	2b03      	cmp	r3, #3
 800ace0:	d062      	beq.n	800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2b03      	cmp	r3, #3
 800ace6:	f200 8081 	bhi.w	800adec <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	2b01      	cmp	r3, #1
 800acee:	d024      	beq.n	800ad3a <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d17a      	bne.n	800adec <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	ee07 3a90 	vmov	s15, r3
 800acfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad00:	eddf 6a90 	vldr	s13, [pc, #576]	; 800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800ad04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad08:	4b8d      	ldr	r3, [pc, #564]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ad0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad10:	ee07 3a90 	vmov	s15, r3
 800ad14:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad18:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad1c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800ad20:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad24:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad34:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800ad38:	e08f      	b.n	800ae5a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ad3a:	4b81      	ldr	r3, [pc, #516]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d005      	beq.n	800ad52 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800ad46:	4b7e      	ldr	r3, [pc, #504]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	0f1b      	lsrs	r3, r3, #28
 800ad4c:	f003 030f 	and.w	r3, r3, #15
 800ad50:	e006      	b.n	800ad60 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800ad52:	4b7b      	ldr	r3, [pc, #492]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ad54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ad58:	041b      	lsls	r3, r3, #16
 800ad5a:	0f1b      	lsrs	r3, r3, #28
 800ad5c:	f003 030f 	and.w	r3, r3, #15
 800ad60:	4a7a      	ldr	r2, [pc, #488]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800ad62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad66:	ee07 3a90 	vmov	s15, r3
 800ad6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	ee07 3a90 	vmov	s15, r3
 800ad74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad86:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad8a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800ad8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ad9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ada2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ada6:	e058      	b.n	800ae5a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	ee07 3a90 	vmov	s15, r3
 800adae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb2:	eddf 6a64 	vldr	s13, [pc, #400]	; 800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800adb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adba:	4b61      	ldr	r3, [pc, #388]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800adbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adc2:	ee07 3a90 	vmov	s15, r3
 800adc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800adca:	ed97 6a02 	vldr	s12, [r7, #8]
 800adce:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800add2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800add6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800adda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adde:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ade2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ade6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adea:	e036      	b.n	800ae5a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800adec:	4b54      	ldr	r3, [pc, #336]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d005      	beq.n	800ae04 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800adf8:	4b51      	ldr	r3, [pc, #324]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	0f1b      	lsrs	r3, r3, #28
 800adfe:	f003 030f 	and.w	r3, r3, #15
 800ae02:	e006      	b.n	800ae12 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800ae04:	4b4e      	ldr	r3, [pc, #312]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ae06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ae0a:	041b      	lsls	r3, r3, #16
 800ae0c:	0f1b      	lsrs	r3, r3, #28
 800ae0e:	f003 030f 	and.w	r3, r3, #15
 800ae12:	4a4e      	ldr	r2, [pc, #312]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800ae14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae18:	ee07 3a90 	vmov	s15, r3
 800ae1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	ee07 3a90 	vmov	s15, r3
 800ae26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	ee07 3a90 	vmov	s15, r3
 800ae34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae38:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae3c:	eddf 5a42 	vldr	s11, [pc, #264]	; 800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800ae40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ae50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae58:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800ae5a:	4b39      	ldr	r3, [pc, #228]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ae5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d017      	beq.n	800ae96 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae66:	4b36      	ldr	r3, [pc, #216]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ae68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae6a:	0a5b      	lsrs	r3, r3, #9
 800ae6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae70:	ee07 3a90 	vmov	s15, r3
 800ae74:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800ae78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae7c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae80:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae8c:	ee17 2a90 	vmov	r2, s15
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	e002      	b.n	800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800ae9c:	4b28      	ldr	r3, [pc, #160]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ae9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d017      	beq.n	800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800aea8:	4b25      	ldr	r3, [pc, #148]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800aeaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeac:	0c1b      	lsrs	r3, r3, #16
 800aeae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeb2:	ee07 3a90 	vmov	s15, r3
 800aeb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800aeba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aebe:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800aec2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aece:	ee17 2a90 	vmov	r2, s15
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	605a      	str	r2, [r3, #4]
 800aed6:	e002      	b.n	800aede <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800aede:	4b18      	ldr	r3, [pc, #96]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800aee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d017      	beq.n	800af1a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800aeea:	4b15      	ldr	r3, [pc, #84]	; (800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800aeec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeee:	0e1b      	lsrs	r3, r3, #24
 800aef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aef4:	ee07 3a90 	vmov	s15, r3
 800aef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800aefc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af00:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800af04:	edd7 6a07 	vldr	s13, [r7, #28]
 800af08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af10:	ee17 2a90 	vmov	r2, s15
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800af18:	e00c      	b.n	800af34 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	609a      	str	r2, [r3, #8]
}
 800af20:	e008      	b.n	800af34 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	609a      	str	r2, [r3, #8]
}
 800af34:	bf00      	nop
 800af36:	3724      	adds	r7, #36	; 0x24
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr
 800af40:	46020c00 	.word	0x46020c00
 800af44:	4b742400 	.word	0x4b742400
 800af48:	46000000 	.word	0x46000000
 800af4c:	0801b180 	.word	0x0801b180

0800af50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b08e      	sub	sp, #56	; 0x38
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af5e:	d145      	bne.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800af60:	4bcc      	ldr	r3, [pc, #816]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800af62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af6a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800af6c:	4bc9      	ldr	r3, [pc, #804]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800af6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af72:	f003 0302 	and.w	r3, r3, #2
 800af76:	2b02      	cmp	r3, #2
 800af78:	d108      	bne.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af80:	d104      	bne.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
    {
      frequency = LSE_VALUE;
 800af82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af86:	637b      	str	r3, [r7, #52]	; 0x34
 800af88:	f001 b8cd 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800af8c:	4bc1      	ldr	r3, [pc, #772]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800af8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af9a:	d114      	bne.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 800af9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afa2:	d110      	bne.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800afa4:	4bbb      	ldr	r3, [pc, #748]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800afa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800afaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afb2:	d103      	bne.n	800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
      {
        frequency = LSI_VALUE / 128U;
 800afb4:	23fa      	movs	r3, #250	; 0xfa
 800afb6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800afb8:	f001 b8b5 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      }
      else
      {
        frequency = LSI_VALUE;
 800afbc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800afc0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800afc2:	f001 b8b0 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800afc6:	4bb3      	ldr	r3, [pc, #716]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afd2:	d107      	bne.n	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 800afd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afda:	d103      	bne.n	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
    {
      frequency = HSE_VALUE / 32U;
 800afdc:	4bae      	ldr	r3, [pc, #696]	; (800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 800afde:	637b      	str	r3, [r7, #52]	; 0x34
 800afe0:	f001 b8a1 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800afe4:	2300      	movs	r3, #0
 800afe6:	637b      	str	r3, [r7, #52]	; 0x34
 800afe8:	f001 b89d 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aff2:	f001 806d 	beq.w	800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1180>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800affc:	f201 8090 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b006:	f000 86d3 	beq.w	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe60>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b010:	f201 8086 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b01a:	f001 8004 	beq.w	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x10d6>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b024:	f201 807c 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b02e:	f000 878b 	beq.w	800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b038:	f201 8072 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b042:	f000 8732 	beq.w	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b04c:	f201 8068 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b056:	f000 86d9 	beq.w	800be0c <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b060:	f201 805e 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b06a:	f000 8592 	beq.w	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b074:	f201 8054 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b07e:	f000 81f6 	beq.w	800b46e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b088:	f201 804a 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b092:	f000 8194 	beq.w	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b09c:	f201 8040 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0a6:	f000 847f 	beq.w	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0b0:	f201 8036 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0ba:	f000 842a 	beq.w	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0c4:	f201 802c 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0ce:	f000 83bd 	beq.w	800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0d8:	f201 8022 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0e2:	f000 80f1 	beq.w	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0ec:	f201 8018 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0f6:	f000 8095 	beq.w	800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b100:	f201 800e 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b10a:	f000 8131 	beq.w	800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b114:	f201 8004 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b11e:	f000 855e 	beq.w	800bbde <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b128:	f200 87fa 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b132:	f000 85f8 	beq.w	800bd26 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b13c:	f200 87f0 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b146:	f000 859c 	beq.w	800bc82 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b150:	f200 87e6 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b15a:	f000 84d0 	beq.w	800bafe <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b164:	f200 87dc 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2b80      	cmp	r3, #128	; 0x80
 800b16c:	f000 849b 	beq.w	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b80      	cmp	r3, #128	; 0x80
 800b174:	f200 87d4 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b20      	cmp	r3, #32
 800b17c:	d84c      	bhi.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	f000 87cd 	beq.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	3b01      	subs	r3, #1
 800b18a:	2b1f      	cmp	r3, #31
 800b18c:	f200 87c8 	bhi.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b190:	a201      	add	r2, pc, #4	; (adr r2, 800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x248>)
 800b192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b196:	bf00      	nop
 800b198:	0800b569 	.word	0x0800b569
 800b19c:	0800b5d7 	.word	0x0800b5d7
 800b1a0:	0800c121 	.word	0x0800c121
 800b1a4:	0800b645 	.word	0x0800b645
 800b1a8:	0800c121 	.word	0x0800c121
 800b1ac:	0800c121 	.word	0x0800c121
 800b1b0:	0800c121 	.word	0x0800c121
 800b1b4:	0800b6b3 	.word	0x0800b6b3
 800b1b8:	0800c121 	.word	0x0800c121
 800b1bc:	0800c121 	.word	0x0800c121
 800b1c0:	0800c121 	.word	0x0800c121
 800b1c4:	0800c121 	.word	0x0800c121
 800b1c8:	0800c121 	.word	0x0800c121
 800b1cc:	0800c121 	.word	0x0800c121
 800b1d0:	0800c121 	.word	0x0800c121
 800b1d4:	0800b721 	.word	0x0800b721
 800b1d8:	0800c121 	.word	0x0800c121
 800b1dc:	0800c121 	.word	0x0800c121
 800b1e0:	0800c121 	.word	0x0800c121
 800b1e4:	0800c121 	.word	0x0800c121
 800b1e8:	0800c121 	.word	0x0800c121
 800b1ec:	0800c121 	.word	0x0800c121
 800b1f0:	0800c121 	.word	0x0800c121
 800b1f4:	0800c121 	.word	0x0800c121
 800b1f8:	0800c121 	.word	0x0800c121
 800b1fc:	0800c121 	.word	0x0800c121
 800b200:	0800c121 	.word	0x0800c121
 800b204:	0800c121 	.word	0x0800c121
 800b208:	0800c121 	.word	0x0800c121
 800b20c:	0800c121 	.word	0x0800c121
 800b210:	0800c121 	.word	0x0800c121
 800b214:	0800b795 	.word	0x0800b795
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b40      	cmp	r3, #64	; 0x40
 800b21c:	f000 841d 	beq.w	800ba5a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 800b220:	f000 bf7e 	b.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
    {
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b224:	4b1b      	ldr	r3, [pc, #108]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800b226:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b22a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800b22e:	633b      	str	r3, [r7, #48]	; 0x30
 800b230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b232:	2b80      	cmp	r3, #128	; 0x80
 800b234:	d036      	beq.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800b236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b238:	2b80      	cmp	r3, #128	; 0x80
 800b23a:	d840      	bhi.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 800b23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23e:	2b60      	cmp	r3, #96	; 0x60
 800b240:	d02c      	beq.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b244:	2b60      	cmp	r3, #96	; 0x60
 800b246:	d83a      	bhi.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 800b248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24a:	2b40      	cmp	r3, #64	; 0x40
 800b24c:	d009      	beq.n	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	2b40      	cmp	r3, #64	; 0x40
 800b252:	d834      	bhi.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 800b254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00b      	beq.n	800b272 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 800b25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25c:	2b20      	cmp	r3, #32
 800b25e:	d010      	beq.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800b260:	e02d      	b.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x36e>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b266:	4618      	mov	r0, r3
 800b268:	f7ff fa40 	bl	800a6ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 800b26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b270:	e028      	b.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b272:	f107 0318 	add.w	r3, r7, #24
 800b276:	4618      	mov	r0, r3
 800b278:	f7ff fb9e 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b280:	e020      	b.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b282:	f107 030c 	add.w	r3, r7, #12
 800b286:	4618      	mov	r0, r3
 800b288:	f7ff fcfc 	bl	800ac84 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b290:	e018      	b.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
 800b292:	bf00      	nop
 800b294:	46020c00 	.word	0x46020c00
 800b298:	0007a120 	.word	0x0007a120

          case RCC_SAI1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b29c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b2a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b2a2:	e00f      	b.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b2a4:	4bab      	ldr	r3, [pc, #684]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2b0:	d102      	bne.n	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            {
              frequency = HSI_VALUE;
 800b2b2:	4ba9      	ldr	r3, [pc, #676]	; (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800b2b4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800b2b6:	e005      	b.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
              frequency = 0U;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b2bc:	e002      	b.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          default :
          {
            frequency = 0U;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b2c2:	bf00      	nop
          }
        }
        break;
 800b2c4:	f000 bf2f 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b2c8:	4ba2      	ldr	r3, [pc, #648]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b2ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b2ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2d2:	633b      	str	r3, [r7, #48]	; 0x30
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2da:	d037      	beq.n	800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2e2:	d840      	bhi.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 800b2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2ea:	d02b      	beq.n	800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2f2:	d838      	bhi.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2fa:	d00b      	beq.n	800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b302:	d830      	bhi.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 800b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00c      	beq.n	800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 800b30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b310:	d010      	beq.n	800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 800b312:	e028      	b.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0x416>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b318:	4618      	mov	r0, r3
 800b31a:	f7ff f9e7 	bl	800a6ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 800b31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b320:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b322:	e023      	b.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b324:	f107 0318 	add.w	r3, r7, #24
 800b328:	4618      	mov	r0, r3
 800b32a:	f7ff fb45 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b332:	e01b      	b.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b334:	f107 030c 	add.w	r3, r7, #12
 800b338:	4618      	mov	r0, r3
 800b33a:	f7ff fca3 	bl	800ac84 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b342:	e013      	b.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b344:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b348:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b34a:	e00f      	b.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b34c:	4b81      	ldr	r3, [pc, #516]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b358:	d102      	bne.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
            {
              frequency = HSI_VALUE;
 800b35a:	4b7f      	ldr	r3, [pc, #508]	; (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800b35c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800b35e:	e005      	b.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              frequency = 0U;
 800b360:	2300      	movs	r3, #0
 800b362:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b364:	e002      	b.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          default :

            frequency = 0U;
 800b366:	2300      	movs	r3, #0
 800b368:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b36a:	bf00      	nop

        }
        break;
 800b36c:	f000 bedb 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      case RCC_PERIPHCLK_SAES:
        /* Get the current SAES source */
        srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800b370:	4b78      	ldr	r3, [pc, #480]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b372:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b37a:	633b      	str	r3, [r7, #48]	; 0x30

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800b37c:	4b75      	ldr	r3, [pc, #468]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b388:	d105      	bne.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d102      	bne.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
        {
          frequency = HSI_VALUE;
 800b390:	4b71      	ldr	r3, [pc, #452]	; (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800b392:	637b      	str	r3, [r7, #52]	; 0x34
 800b394:	e011      	b.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
        }
        else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800b396:	4b6f      	ldr	r3, [pc, #444]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b39e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3a2:	d106      	bne.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3aa:	d102      	bne.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
        {
          frequency = HSI_VALUE >> 1U;
 800b3ac:	4b6b      	ldr	r3, [pc, #428]	; (800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800b3ae:	637b      	str	r3, [r7, #52]	; 0x34
 800b3b0:	e003      	b.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
        }
        /* Clock not enabled for SAES */
        else
        {
          frequency = 0U;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800b3b6:	f000 beb6 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800b3ba:	f000 beb4 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_CLK48:

        srcclk = __HAL_RCC_GET_CLK48_SOURCE();
 800b3be:	4b65      	ldr	r3, [pc, #404]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b3c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3c4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b3c8:	633b      	str	r3, [r7, #48]	; 0x30
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3cc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b3d0:	d030      	beq.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b3d8:	d844      	bhi.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 800b3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3e0:	d00b      	beq.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 800b3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3e8:	d83c      	bhi.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d014      	beq.n	800b41a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 800b3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3f6:	d008      	beq.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b3f8:	e034      	b.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x514>

        switch (srcclk)
        {
          case RCC_CLK48CLKSOURCE_PLL1: /* PLL1Q  */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7ff f974 	bl	800a6ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b406:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b408:	e02f      	b.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_PLL2: /* PLL2Q */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b40a:	f107 0318 	add.w	r3, r7, #24
 800b40e:	4618      	mov	r0, r3
 800b410:	f7ff fad2 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_Q_Frequency;
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b418:	e027      	b.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_HSI48: /* HSI48 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b41a:	4b4e      	ldr	r3, [pc, #312]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b426:	d102      	bne.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
            {
              frequency = HSI48_VALUE;
 800b428:	4b4d      	ldr	r3, [pc, #308]	; (800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800b42a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800b42c:	e01d      	b.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
              frequency = 0U;
 800b42e:	2300      	movs	r3, #0
 800b430:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b432:	e01a      	b.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b434:	4b47      	ldr	r3, [pc, #284]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d005      	beq.n	800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 800b440:	4b44      	ldr	r3, [pc, #272]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	0e1b      	lsrs	r3, r3, #24
 800b446:	f003 030f 	and.w	r3, r3, #15
 800b44a:	e006      	b.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800b44c:	4b41      	ldr	r3, [pc, #260]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b44e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b452:	041b      	lsls	r3, r3, #16
 800b454:	0e1b      	lsrs	r3, r3, #24
 800b456:	f003 030f 	and.w	r3, r3, #15
 800b45a:	4a42      	ldr	r2, [pc, #264]	; (800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 800b45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b460:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b462:	e002      	b.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          default :

            frequency = 0U;
 800b464:	2300      	movs	r3, #0
 800b466:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b468:	bf00      	nop

        }
        break;
 800b46a:	f000 be5c 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SDMMC:
        srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b46e:	4b39      	ldr	r3, [pc, #228]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b470:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b478:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d157      	bne.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          srcclk = __HAL_RCC_GET_CLK48_SOURCE();
 800b480:	4b34      	ldr	r3, [pc, #208]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b486:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b48a:	633b      	str	r3, [r7, #48]	; 0x30
 800b48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b492:	d030      	beq.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b496:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b49a:	d844      	bhi.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 800b49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4a2:	d00b      	beq.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4aa:	d83c      	bhi.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 800b4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d014      	beq.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4b8:	d008      	beq.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 800b4ba:	e034      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>

          switch (srcclk)
          {
            case RCC_CLK48CLKSOURCE_PLL1: /* PLL1Q  */
            {
              HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7ff f913 	bl	800a6ec <HAL_RCCEx_GetPLL1ClockFreq>
              frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c8:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b4ca:	e02f      	b.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_PLL2: /* PLL2Q */
            {
              HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4cc:	f107 0318 	add.w	r3, r7, #24
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff fa71 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
              frequency = pll2_clocks.PLL2_Q_Frequency;
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b4da:	e027      	b.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_HSI48: /* HSI48 */
            {
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b4dc:	4b1d      	ldr	r3, [pc, #116]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b4e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4e8:	d102      	bne.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
              {
                frequency = HSI48_VALUE;
 800b4ea:	4b1d      	ldr	r3, [pc, #116]	; (800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800b4ec:	637b      	str	r3, [r7, #52]	; 0x34
              }
              else
              {
                frequency = 0U;
              }
              break;
 800b4ee:	e01d      	b.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
                frequency = 0U;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b4f4:	e01a      	b.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
            {
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b4f6:	4b17      	ldr	r3, [pc, #92]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d005      	beq.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800b502:	4b14      	ldr	r3, [pc, #80]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	0e1b      	lsrs	r3, r3, #24
 800b508:	f003 030f 	and.w	r3, r3, #15
 800b50c:	e006      	b.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b50e:	4b11      	ldr	r3, [pc, #68]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b514:	041b      	lsls	r3, r3, #16
 800b516:	0e1b      	lsrs	r3, r3, #24
 800b518:	f003 030f 	and.w	r3, r3, #15
 800b51c:	4a11      	ldr	r2, [pc, #68]	; (800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 800b51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b522:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b524:	e002      	b.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            default :
            {
              frequency = 0U;
 800b526:	2300      	movs	r3, #0
 800b528:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b52a:	bf00      	nop
            }
          }
          break;
 800b52c:	f000 bdfb 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        }
        else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800b530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b536:	d108      	bne.n	800b54a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7ff f8d5 	bl	800a6ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_P_Frequency;
 800b542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b544:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b546:	f000 bdee 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 800b54a:	2300      	movs	r3, #0
 800b54c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b54e:	f000 bdea 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800b552:	bf00      	nop
 800b554:	46020c00 	.word	0x46020c00
 800b558:	00f42400 	.word	0x00f42400
 800b55c:	007a1200 	.word	0x007a1200
 800b560:	02dc6c00 	.word	0x02dc6c00
 800b564:	0801b180 	.word	0x0801b180

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b568:	4bad      	ldr	r3, [pc, #692]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b56a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b56e:	f003 0303 	and.w	r3, r3, #3
 800b572:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b576:	2b00      	cmp	r3, #0
 800b578:	d104      	bne.n	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b57a:	f7fe fbc5 	bl	8009d08 <HAL_RCC_GetPCLK2Freq>
 800b57e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b580:	f000 bdd1 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800b584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b586:	2b01      	cmp	r3, #1
 800b588:	d104      	bne.n	800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
          frequency = HAL_RCC_GetSysClockFreq();
 800b58a:	f7fe fa87 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 800b58e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b590:	f000 bdc9 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b594:	4ba2      	ldr	r3, [pc, #648]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b59c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5a0:	d105      	bne.n	800b5ae <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	d102      	bne.n	800b5ae <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          frequency = HSI_VALUE;
 800b5a8:	4b9e      	ldr	r3, [pc, #632]	; (800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800b5aa:	637b      	str	r3, [r7, #52]	; 0x34
 800b5ac:	e011      	b.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b5ae:	4b9c      	ldr	r3, [pc, #624]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b5b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b5b4:	f003 0302 	and.w	r3, r3, #2
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d106      	bne.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 800b5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5be:	2b03      	cmp	r3, #3
 800b5c0:	d103      	bne.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
          frequency = LSE_VALUE;
 800b5c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b5c8:	e003      	b.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          frequency = 0U;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5ce:	f000 bdaa 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800b5d2:	f000 bda8 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b5d6:	4b92      	ldr	r3, [pc, #584]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b5d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5dc:	f003 030c 	and.w	r3, r3, #12
 800b5e0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d104      	bne.n	800b5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b5e8:	f7fe fb7a 	bl	8009ce0 <HAL_RCC_GetPCLK1Freq>
 800b5ec:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800b5ee:	f000 bd9a 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f4:	2b04      	cmp	r3, #4
 800b5f6:	d104      	bne.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
          frequency = HAL_RCC_GetSysClockFreq();
 800b5f8:	f7fe fa50 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 800b5fc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b5fe:	f000 bd92 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b602:	4b87      	ldr	r3, [pc, #540]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b60a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b60e:	d105      	bne.n	800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800b610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b612:	2b08      	cmp	r3, #8
 800b614:	d102      	bne.n	800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
          frequency = HSI_VALUE;
 800b616:	4b83      	ldr	r3, [pc, #524]	; (800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800b618:	637b      	str	r3, [r7, #52]	; 0x34
 800b61a:	e011      	b.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b61c:	4b80      	ldr	r3, [pc, #512]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b61e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b622:	f003 0302 	and.w	r3, r3, #2
 800b626:	2b02      	cmp	r3, #2
 800b628:	d106      	bne.n	800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 800b62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62c:	2b0c      	cmp	r3, #12
 800b62e:	d103      	bne.n	800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          frequency = LSE_VALUE;
 800b630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b634:	637b      	str	r3, [r7, #52]	; 0x34
 800b636:	e003      	b.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = 0U;
 800b638:	2300      	movs	r3, #0
 800b63a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b63c:	f000 bd73 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800b640:	f000 bd71 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b644:	4b76      	ldr	r3, [pc, #472]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b64a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b64e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b652:	2b00      	cmp	r3, #0
 800b654:	d104      	bne.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b656:	f7fe fb43 	bl	8009ce0 <HAL_RCC_GetPCLK1Freq>
 800b65a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800b65c:	f000 bd63 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800b660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b662:	2b10      	cmp	r3, #16
 800b664:	d104      	bne.n	800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = HAL_RCC_GetSysClockFreq();
 800b666:	f7fe fa19 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 800b66a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b66c:	f000 bd5b 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b670:	4b6b      	ldr	r3, [pc, #428]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b67c:	d105      	bne.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800b67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b680:	2b20      	cmp	r3, #32
 800b682:	d102      	bne.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
          frequency = HSI_VALUE;
 800b684:	4b67      	ldr	r3, [pc, #412]	; (800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800b686:	637b      	str	r3, [r7, #52]	; 0x34
 800b688:	e011      	b.n	800b6ae <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b68a:	4b65      	ldr	r3, [pc, #404]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b68c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b690:	f003 0302 	and.w	r3, r3, #2
 800b694:	2b02      	cmp	r3, #2
 800b696:	d106      	bne.n	800b6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 800b698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69a:	2b30      	cmp	r3, #48	; 0x30
 800b69c:	d103      	bne.n	800b6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = LSE_VALUE;
 800b69e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6a2:	637b      	str	r3, [r7, #52]	; 0x34
 800b6a4:	e003      	b.n	800b6ae <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = 0U;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6aa:	f000 bd3c 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800b6ae:	f000 bd3a 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b6b2:	4b5b      	ldr	r3, [pc, #364]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b6b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b6b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b6bc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d104      	bne.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b6c4:	f7fe fb0c 	bl	8009ce0 <HAL_RCC_GetPCLK1Freq>
 800b6c8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800b6ca:	f000 bd2c 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d0:	2b40      	cmp	r3, #64	; 0x40
 800b6d2:	d104      	bne.n	800b6de <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
          frequency = HAL_RCC_GetSysClockFreq();
 800b6d4:	f7fe f9e2 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 800b6d8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b6da:	f000 bd24 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b6de:	4b50      	ldr	r3, [pc, #320]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6ea:	d105      	bne.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ee:	2b80      	cmp	r3, #128	; 0x80
 800b6f0:	d102      	bne.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HSI_VALUE;
 800b6f2:	4b4c      	ldr	r3, [pc, #304]	; (800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800b6f4:	637b      	str	r3, [r7, #52]	; 0x34
 800b6f6:	e011      	b.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b6f8:	4b49      	ldr	r3, [pc, #292]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b6fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b6fe:	f003 0302 	and.w	r3, r3, #2
 800b702:	2b02      	cmp	r3, #2
 800b704:	d106      	bne.n	800b714 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800b706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b708:	2bc0      	cmp	r3, #192	; 0xc0
 800b70a:	d103      	bne.n	800b714 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          frequency = LSE_VALUE;
 800b70c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b710:	637b      	str	r3, [r7, #52]	; 0x34
 800b712:	e003      	b.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
          frequency = 0U;
 800b714:	2300      	movs	r3, #0
 800b716:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b718:	f000 bd05 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800b71c:	f000 bd03 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b720:	4b3f      	ldr	r3, [pc, #252]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b72a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d104      	bne.n	800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b732:	f7fe fad5 	bl	8009ce0 <HAL_RCC_GetPCLK1Freq>
 800b736:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800b738:	f000 bcf5 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800b73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b742:	d104      	bne.n	800b74e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
          frequency = HAL_RCC_GetSysClockFreq();
 800b744:	f7fe f9aa 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 800b748:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b74a:	f000 bcec 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b74e:	4b34      	ldr	r3, [pc, #208]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b75a:	d106      	bne.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 800b75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b762:	d102      	bne.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
          frequency = HSI_VALUE;
 800b764:	4b2f      	ldr	r3, [pc, #188]	; (800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800b766:	637b      	str	r3, [r7, #52]	; 0x34
 800b768:	e012      	b.n	800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b76a:	4b2d      	ldr	r3, [pc, #180]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b76c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b770:	f003 0302 	and.w	r3, r3, #2
 800b774:	2b02      	cmp	r3, #2
 800b776:	d107      	bne.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b77e:	d103      	bne.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
          frequency = LSE_VALUE;
 800b780:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b784:	637b      	str	r3, [r7, #52]	; 0x34
 800b786:	e003      	b.n	800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
          frequency = 0U;
 800b788:	2300      	movs	r3, #0
 800b78a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b78c:	f000 bccb 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800b790:	f000 bcc9 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b794:	4b22      	ldr	r3, [pc, #136]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b796:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b79a:	f003 0307 	and.w	r3, r3, #7
 800b79e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d104      	bne.n	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b7a6:	f7fe fac3 	bl	8009d30 <HAL_RCC_GetPCLK3Freq>
 800b7aa:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b7ac:	f000 bcbb 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800b7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d104      	bne.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 800b7b6:	f7fe f971 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 800b7ba:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b7bc:	f000 bcb3 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800b7c0:	4b17      	ldr	r3, [pc, #92]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7cc:	d105      	bne.n	800b7da <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800b7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d102      	bne.n	800b7da <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HSI_VALUE;
 800b7d4:	4b13      	ldr	r3, [pc, #76]	; (800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800b7d6:	637b      	str	r3, [r7, #52]	; 0x34
 800b7d8:	e036      	b.n	800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800b7da:	4b11      	ldr	r3, [pc, #68]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b7dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b7e0:	f003 0302 	and.w	r3, r3, #2
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d106      	bne.n	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ea:	2b03      	cmp	r3, #3
 800b7ec:	d103      	bne.n	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
          frequency = LSE_VALUE;
 800b7ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7f2:	637b      	str	r3, [r7, #52]	; 0x34
 800b7f4:	e028      	b.n	800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800b7f6:	4b0a      	ldr	r3, [pc, #40]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f003 0320 	and.w	r3, r3, #32
 800b7fe:	2b20      	cmp	r3, #32
 800b800:	d11e      	bne.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 800b802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b804:	2b04      	cmp	r3, #4
 800b806:	d11b      	bne.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b808:	4b05      	ldr	r3, [pc, #20]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b810:	2b00      	cmp	r3, #0
 800b812:	d009      	beq.n	800b828 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 800b814:	4b02      	ldr	r3, [pc, #8]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	0e1b      	lsrs	r3, r3, #24
 800b81a:	f003 030f 	and.w	r3, r3, #15
 800b81e:	e00a      	b.n	800b836 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b820:	46020c00 	.word	0x46020c00
 800b824:	00f42400 	.word	0x00f42400
 800b828:	4bb0      	ldr	r3, [pc, #704]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800b82a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b82e:	041b      	lsls	r3, r3, #16
 800b830:	0e1b      	lsrs	r3, r3, #24
 800b832:	f003 030f 	and.w	r3, r3, #15
 800b836:	4aae      	ldr	r2, [pc, #696]	; (800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 800b838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b83c:	637b      	str	r3, [r7, #52]	; 0x34
 800b83e:	e003      	b.n	800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = 0U;
 800b840:	2300      	movs	r3, #0
 800b842:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b844:	f000 bc6f 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800b848:	f000 bc6d 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_ADCDAC:

        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800b84c:	4ba7      	ldr	r3, [pc, #668]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800b84e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b852:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b856:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800b858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b85e:	d104      	bne.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        {
          frequency = HAL_RCC_GetSysClockFreq();
 800b860:	f7fe f91c 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 800b864:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADC */
        else
        {
          frequency = 0U;
        }
        break;
 800b866:	f000 bc5e 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800b86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b870:	d108      	bne.n	800b884 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b872:	f107 0318 	add.w	r3, r7, #24
 800b876:	4618      	mov	r0, r3
 800b878:	f7ff f89e 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b87c:	6a3b      	ldr	r3, [r7, #32]
 800b87e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b880:	f000 bc51 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800b884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b886:	2b00      	cmp	r3, #0
 800b888:	d104      	bne.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetHCLKFreq();
 800b88a:	f7fe fa0f 	bl	8009cac <HAL_RCC_GetHCLKFreq>
 800b88e:	6378      	str	r0, [r7, #52]	; 0x34
          break;
 800b890:	f000 bc49 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800b894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b896:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b89a:	d118      	bne.n	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800b89c:	4b93      	ldr	r3, [pc, #588]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d005      	beq.n	800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800b8a8:	4b90      	ldr	r3, [pc, #576]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	0f1b      	lsrs	r3, r3, #28
 800b8ae:	f003 030f 	and.w	r3, r3, #15
 800b8b2:	e006      	b.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 800b8b4:	4b8d      	ldr	r3, [pc, #564]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800b8b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b8ba:	041b      	lsls	r3, r3, #16
 800b8bc:	0f1b      	lsrs	r3, r3, #28
 800b8be:	f003 030f 	and.w	r3, r3, #15
 800b8c2:	4a8b      	ldr	r2, [pc, #556]	; (800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 800b8c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8c8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b8ca:	f000 bc2c 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b8ce:	4b87      	ldr	r3, [pc, #540]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8da:	d106      	bne.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 800b8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b8e2:	d102      	bne.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
          frequency = HSE_VALUE;
 800b8e4:	4b83      	ldr	r3, [pc, #524]	; (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 800b8e6:	637b      	str	r3, [r7, #52]	; 0x34
 800b8e8:	e011      	b.n	800b90e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b8ea:	4b80      	ldr	r3, [pc, #512]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8f6:	d106      	bne.n	800b906 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
 800b8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8fe:	d102      	bne.n	800b906 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
          frequency = HSI_VALUE;
 800b900:	4b7c      	ldr	r3, [pc, #496]	; (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 800b902:	637b      	str	r3, [r7, #52]	; 0x34
 800b904:	e003      	b.n	800b90e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
          frequency = 0U;
 800b906:	2300      	movs	r3, #0
 800b908:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b90a:	f000 bc0c 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800b90e:	f000 bc0a 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_MDF1:
        /* Get the current MDF1 source */
        srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800b912:	4b76      	ldr	r3, [pc, #472]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800b914:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b918:	f003 0307 	and.w	r3, r3, #7
 800b91c:	633b      	str	r3, [r7, #48]	; 0x30
 800b91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b920:	2b04      	cmp	r3, #4
 800b922:	d83d      	bhi.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800b924:	a201      	add	r2, pc, #4	; (adr r2, 800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>)
 800b926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b92a:	bf00      	nop
 800b92c:	0800b961 	.word	0x0800b961
 800b930:	0800b941 	.word	0x0800b941
 800b934:	0800b951 	.word	0x0800b951
 800b938:	0800b969 	.word	0x0800b969
 800b93c:	0800b971 	.word	0x0800b971

        switch (srcclk)
        {
          case RCC_MDF1CLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b944:	4618      	mov	r0, r3
 800b946:	f7fe fed1 	bl	800a6ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 800b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b94e:	e02a      	b.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_PLL3:

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b950:	f107 030c 	add.w	r3, r7, #12
 800b954:	4618      	mov	r0, r3
 800b956:	f7ff f995 	bl	800ac84 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_Q_Frequency;
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b95e:	e022      	b.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_HCLK:

            frequency = HAL_RCC_GetHCLKFreq();
 800b960:	f7fe f9a4 	bl	8009cac <HAL_RCC_GetHCLKFreq>
 800b964:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800b966:	e01e      	b.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b968:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b96c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b96e:	e01a      	b.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b970:	4b5e      	ldr	r3, [pc, #376]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d005      	beq.n	800b988 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800b97c:	4b5b      	ldr	r3, [pc, #364]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	0e1b      	lsrs	r3, r3, #24
 800b982:	f003 030f 	and.w	r3, r3, #15
 800b986:	e006      	b.n	800b996 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800b988:	4b58      	ldr	r3, [pc, #352]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800b98a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b98e:	041b      	lsls	r3, r3, #16
 800b990:	0e1b      	lsrs	r3, r3, #24
 800b992:	f003 030f 	and.w	r3, r3, #15
 800b996:	4a56      	ldr	r2, [pc, #344]	; (800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 800b998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b99c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b99e:	e002      	b.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          default:

            frequency = 0U;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b9a4:	bf00      	nop

        }
        break;
 800b9a6:	e3be      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_ADF1:
        /* Get the current ADF1 source */
        srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800b9a8:	4b50      	ldr	r3, [pc, #320]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800b9aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b9ae:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b9b2:	633b      	str	r3, [r7, #48]	; 0x30
 800b9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b9ba:	d032      	beq.n	800ba22 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
 800b9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b9c2:	d846      	bhi.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b9ca:	d026      	beq.n	800ba1a <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 800b9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b9d2:	d83e      	bhi.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 800b9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9da:	d012      	beq.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 800b9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9e2:	d836      	bhi.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d013      	beq.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9f0:	d12f      	bne.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>

        switch (srcclk)
        {
          case RCC_ADF1CLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b9f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7fe fe78 	bl	800a6ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ba00:	e02a      	b.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_PLL3:

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba02:	f107 030c 	add.w	r3, r7, #12
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7ff f93c 	bl	800ac84 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ba10:	e022      	b.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_HCLK:

            frequency = HAL_RCC_GetHCLKFreq();
 800ba12:	f7fe f94b 	bl	8009cac <HAL_RCC_GetHCLKFreq>
 800ba16:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800ba18:	e01e      	b.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ba1a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ba1e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ba20:	e01a      	b.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ba22:	4b32      	ldr	r3, [pc, #200]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d005      	beq.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 800ba2e:	4b2f      	ldr	r3, [pc, #188]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	0e1b      	lsrs	r3, r3, #24
 800ba34:	f003 030f 	and.w	r3, r3, #15
 800ba38:	e006      	b.n	800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800ba3a:	4b2c      	ldr	r3, [pc, #176]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800ba3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ba40:	041b      	lsls	r3, r3, #16
 800ba42:	0e1b      	lsrs	r3, r3, #24
 800ba44:	f003 030f 	and.w	r3, r3, #15
 800ba48:	4a29      	ldr	r2, [pc, #164]	; (800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 800ba4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba4e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ba50:	e002      	b.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          default:

            frequency = 0U;
 800ba52:	2300      	movs	r3, #0
 800ba54:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ba56:	bf00      	nop
        }
        break;
 800ba58:	e365      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800ba5a:	4b24      	ldr	r3, [pc, #144]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800ba5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ba64:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800ba66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d103      	bne.n	800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ba6c:	f7fe f938 	bl	8009ce0 <HAL_RCC_GetPCLK1Freq>
 800ba70:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800ba72:	e358      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800ba74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba7a:	d103      	bne.n	800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          frequency = HAL_RCC_GetSysClockFreq();
 800ba7c:	f7fe f80e 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 800ba80:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ba82:	e350      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800ba84:	4b19      	ldr	r3, [pc, #100]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba90:	d106      	bne.n	800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800ba92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba98:	d102      	bne.n	800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
          frequency = HSI_VALUE;
 800ba9a:	4b16      	ldr	r3, [pc, #88]	; (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 800ba9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba9e:	e342      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 800baa0:	2300      	movs	r3, #0
 800baa2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800baa4:	e33f      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800baa6:	4b11      	ldr	r3, [pc, #68]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800baa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800baac:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bab0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800bab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d103      	bne.n	800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bab8:	f7fe f912 	bl	8009ce0 <HAL_RCC_GetPCLK1Freq>
 800babc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800babe:	e332      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800bac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bac6:	d103      	bne.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          frequency = HAL_RCC_GetSysClockFreq();
 800bac8:	f7fd ffe8 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 800bacc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bace:	e32a      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800bad0:	4b06      	ldr	r3, [pc, #24]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800badc:	d10c      	bne.n	800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800bade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bae4:	d108      	bne.n	800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
          frequency = HSI_VALUE;
 800bae6:	4b03      	ldr	r3, [pc, #12]	; (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 800bae8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800baea:	e31c      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800baec:	46020c00 	.word	0x46020c00
 800baf0:	0801b180 	.word	0x0801b180
 800baf4:	00f42400 	.word	0x00f42400
          frequency = 0U;
 800baf8:	2300      	movs	r3, #0
 800bafa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bafc:	e313      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800bafe:	4ba9      	ldr	r3, [pc, #676]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bb00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bb04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bb08:	633b      	str	r3, [r7, #48]	; 0x30
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0c:	2bc0      	cmp	r3, #192	; 0xc0
 800bb0e:	d024      	beq.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 800bb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb12:	2bc0      	cmp	r3, #192	; 0xc0
 800bb14:	d839      	bhi.n	800bb8a <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 800bb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb18:	2b80      	cmp	r3, #128	; 0x80
 800bb1a:	d00d      	beq.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 800bb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1e:	2b80      	cmp	r3, #128	; 0x80
 800bb20:	d833      	bhi.n	800bb8a <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 800bb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d003      	beq.n	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800bb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2a:	2b40      	cmp	r3, #64	; 0x40
 800bb2c:	d011      	beq.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
 800bb2e:	e02c      	b.n	800bb8a <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>

        switch (srcclk)
        {
          case RCC_I2C3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800bb30:	f7fe f8fe 	bl	8009d30 <HAL_RCC_GetPCLK3Freq>
 800bb34:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800bb36:	e02b      	b.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_HSI:
          {
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bb38:	4b9a      	ldr	r3, [pc, #616]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb44:	d102      	bne.n	800bb4c <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
            {
              frequency = HSI_VALUE;
 800bb46:	4b98      	ldr	r3, [pc, #608]	; (800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 800bb48:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800bb4a:	e021      	b.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
              frequency = 0U;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bb50:	e01e      	b.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_SYSCLK:
          {
            frequency = HAL_RCC_GetSysClockFreq();
 800bb52:	f7fd ffa3 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 800bb56:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800bb58:	e01a      	b.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_MSIK:
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800bb5a:	4b92      	ldr	r3, [pc, #584]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d005      	beq.n	800bb72 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800bb66:	4b8f      	ldr	r3, [pc, #572]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	0f1b      	lsrs	r3, r3, #28
 800bb6c:	f003 030f 	and.w	r3, r3, #15
 800bb70:	e006      	b.n	800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xc30>
 800bb72:	4b8c      	ldr	r3, [pc, #560]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bb74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bb78:	041b      	lsls	r3, r3, #16
 800bb7a:	0f1b      	lsrs	r3, r3, #28
 800bb7c:	f003 030f 	and.w	r3, r3, #15
 800bb80:	4a8a      	ldr	r2, [pc, #552]	; (800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 800bb82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb86:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bb88:	e002      	b.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          default:
          {
            frequency = 0U;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bb8e:	bf00      	nop
          }
        }
        break;
 800bb90:	e2c9      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800bb92:	4b84      	ldr	r3, [pc, #528]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bb94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bb9c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d103      	bne.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bba4:	f7fe f89c 	bl	8009ce0 <HAL_RCC_GetPCLK1Freq>
 800bba8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800bbaa:	e2bc      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800bbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbb2:	d103      	bne.n	800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
          frequency = HAL_RCC_GetSysClockFreq();
 800bbb4:	f7fd ff72 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 800bbb8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bbba:	e2b4      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800bbbc:	4b79      	ldr	r3, [pc, #484]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbc8:	d106      	bne.n	800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc88>
 800bbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbd0:	d102      	bne.n	800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc88>
          frequency = HSI_VALUE;
 800bbd2:	4b75      	ldr	r3, [pc, #468]	; (800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 800bbd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbd6:	e2a6      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbdc:	e2a3      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM34:
        /* Get the current LPTIM34 source */
        srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800bbde:	4b71      	ldr	r3, [pc, #452]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bbe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bbe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbe8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800bbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d117      	bne.n	800bc20 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bbf0:	4b6c      	ldr	r3, [pc, #432]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d005      	beq.n	800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
 800bbfc:	4b69      	ldr	r3, [pc, #420]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	0e1b      	lsrs	r3, r3, #24
 800bc02:	f003 030f 	and.w	r3, r3, #15
 800bc06:	e006      	b.n	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
 800bc08:	4b66      	ldr	r3, [pc, #408]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bc0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bc0e:	041b      	lsls	r3, r3, #16
 800bc10:	0e1b      	lsrs	r3, r3, #24
 800bc12:	f003 030f 	and.w	r3, r3, #15
 800bc16:	4a65      	ldr	r2, [pc, #404]	; (800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 800bc18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc1c:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM34 */
        else
        {
          frequency = 0U;
        }
        break;
 800bc1e:	e282      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800bc20:	4b60      	ldr	r3, [pc, #384]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bc22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bc26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc2e:	d107      	bne.n	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
 800bc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc36:	d103      	bne.n	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
          frequency = LSI_VALUE;
 800bc38:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bc3c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc3e:	e01f      	b.n	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800bc40:	4b58      	ldr	r3, [pc, #352]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc4c:	d106      	bne.n	800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc54:	d102      	bne.n	800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
          frequency = HSI_VALUE;
 800bc56:	4b54      	ldr	r3, [pc, #336]	; (800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 800bc58:	637b      	str	r3, [r7, #52]	; 0x34
 800bc5a:	e011      	b.n	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800bc5c:	4b51      	ldr	r3, [pc, #324]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bc5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bc62:	f003 0302 	and.w	r3, r3, #2
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d107      	bne.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc70:	d103      	bne.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = LSE_VALUE;
 800bc72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc76:	637b      	str	r3, [r7, #52]	; 0x34
 800bc78:	e002      	b.n	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
          frequency = 0U;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc7e:	e252      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800bc80:	e251      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800bc82:	4b48      	ldr	r3, [pc, #288]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bc84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bc88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bc8c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800bc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d117      	bne.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bc94:	4b43      	ldr	r3, [pc, #268]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d005      	beq.n	800bcac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>
 800bca0:	4b40      	ldr	r3, [pc, #256]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	0e1b      	lsrs	r3, r3, #24
 800bca6:	f003 030f 	and.w	r3, r3, #15
 800bcaa:	e006      	b.n	800bcba <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
 800bcac:	4b3d      	ldr	r3, [pc, #244]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bcae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bcb2:	041b      	lsls	r3, r3, #16
 800bcb4:	0e1b      	lsrs	r3, r3, #24
 800bcb6:	f003 030f 	and.w	r3, r3, #15
 800bcba:	4a3c      	ldr	r2, [pc, #240]	; (800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 800bcbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcc0:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM1 */
        else
        {
          frequency = 0U;
        }
        break;
 800bcc2:	e230      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800bcc4:	4b37      	ldr	r3, [pc, #220]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bcc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bcca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcd2:	d107      	bne.n	800bce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800bcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcda:	d103      	bne.n	800bce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
          frequency = LSI_VALUE;
 800bcdc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bce0:	637b      	str	r3, [r7, #52]	; 0x34
 800bce2:	e01f      	b.n	800bd24 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800bce4:	4b2f      	ldr	r3, [pc, #188]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcf0:	d106      	bne.n	800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800bcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcf8:	d102      	bne.n	800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
          frequency = HSI_VALUE;
 800bcfa:	4b2b      	ldr	r3, [pc, #172]	; (800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 800bcfc:	637b      	str	r3, [r7, #52]	; 0x34
 800bcfe:	e011      	b.n	800bd24 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800bd00:	4b28      	ldr	r3, [pc, #160]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bd02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bd06:	f003 0302 	and.w	r3, r3, #2
 800bd0a:	2b02      	cmp	r3, #2
 800bd0c:	d107      	bne.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd14:	d103      	bne.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
          frequency = LSE_VALUE;
 800bd16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd1a:	637b      	str	r3, [r7, #52]	; 0x34
 800bd1c:	e002      	b.n	800bd24 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
          frequency = 0U;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd22:	e200      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800bd24:	e1ff      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800bd26:	4b1f      	ldr	r3, [pc, #124]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bd28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd2c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800bd30:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800bd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d103      	bne.n	800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bd38:	f7fd ffd2 	bl	8009ce0 <HAL_RCC_GetPCLK1Freq>
 800bd3c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM2 */
        else
        {
          frequency = 0U;
        }
        break;
 800bd3e:	e1f2      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800bd40:	4b18      	ldr	r3, [pc, #96]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bd42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bd46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd4e:	d107      	bne.n	800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
 800bd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd56:	d103      	bne.n	800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
          frequency = LSI_VALUE;
 800bd58:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bd5c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd5e:	e01f      	b.n	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800bd60:	4b10      	ldr	r3, [pc, #64]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd6c:	d106      	bne.n	800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bd74:	d102      	bne.n	800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HSI_VALUE;
 800bd76:	4b0c      	ldr	r3, [pc, #48]	; (800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 800bd78:	637b      	str	r3, [r7, #52]	; 0x34
 800bd7a:	e011      	b.n	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800bd7c:	4b09      	ldr	r3, [pc, #36]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bd7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bd82:	f003 0302 	and.w	r3, r3, #2
 800bd86:	2b02      	cmp	r3, #2
 800bd88:	d107      	bne.n	800bd9a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
 800bd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bd90:	d103      	bne.n	800bd9a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = LSE_VALUE;
 800bd92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd96:	637b      	str	r3, [r7, #52]	; 0x34
 800bd98:	e002      	b.n	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
          frequency = 0U;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd9e:	e1c2      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800bda0:	e1c1      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800bda2:	bf00      	nop
 800bda4:	46020c00 	.word	0x46020c00
 800bda8:	00f42400 	.word	0x00f42400
 800bdac:	0801b180 	.word	0x0801b180

      case RCC_PERIPHCLK_FDCAN1:
        /* Get the current FDCAN1 kernel source */
        srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800bdb0:	4bb0      	ldr	r3, [pc, #704]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800bdb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bdb6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800bdba:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800bdbc:	4bad      	ldr	r3, [pc, #692]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdc8:	d105      	bne.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 800bdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d102      	bne.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
        {
          frequency = HSE_VALUE;
 800bdd0:	4ba9      	ldr	r3, [pc, #676]	; (800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800bdd2:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN1 */
        else
        {
          frequency = 0U;
        }
        break;
 800bdd4:	e1a7      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bddc:	d107      	bne.n	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bdde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fe fc82 	bl	800a6ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bdec:	e19b      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800bdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bdf4:	d107      	bne.n	800be06 <HAL_RCCEx_GetPeriphCLKFreq+0xeb6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdf6:	f107 0318 	add.w	r3, r7, #24
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7fe fddc 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be04:	e18f      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 800be06:	2300      	movs	r3, #0
 800be08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be0a:	e18c      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800be0c:	4b99      	ldr	r3, [pc, #612]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800be0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be12:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800be16:	633b      	str	r3, [r7, #48]	; 0x30
 800be18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be1e:	d028      	beq.n	800be72 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
 800be20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be26:	d83c      	bhi.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 800be28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be2e:	d013      	beq.n	800be58 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 800be30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be36:	d834      	bhi.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 800be38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d004      	beq.n	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800be3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be44:	d004      	beq.n	800be50 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 800be46:	e02c      	b.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PCLK2:

            frequency = HAL_RCC_GetPCLK2Freq();
 800be48:	f7fd ff5e 	bl	8009d08 <HAL_RCC_GetPCLK2Freq>
 800be4c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800be4e:	e02b      	b.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 800be50:	f7fd fe24 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 800be54:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800be56:	e027      	b.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800be58:	4b86      	ldr	r3, [pc, #536]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be64:	d102      	bne.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
            {
              frequency = HSI_VALUE;
 800be66:	4b84      	ldr	r3, [pc, #528]	; (800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800be68:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800be6a:	e01d      	b.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>
              frequency = 0U;
 800be6c:	2300      	movs	r3, #0
 800be6e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800be70:	e01a      	b.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800be72:	4b80      	ldr	r3, [pc, #512]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d005      	beq.n	800be8a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800be7e:	4b7d      	ldr	r3, [pc, #500]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	0e1b      	lsrs	r3, r3, #24
 800be84:	f003 030f 	and.w	r3, r3, #15
 800be88:	e006      	b.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800be8a:	4b7a      	ldr	r3, [pc, #488]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800be8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800be90:	041b      	lsls	r3, r3, #16
 800be92:	0e1b      	lsrs	r3, r3, #24
 800be94:	f003 030f 	and.w	r3, r3, #15
 800be98:	4a78      	ldr	r2, [pc, #480]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 800be9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be9e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bea0:	e002      	b.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          default:

            frequency = 0U;
 800bea2:	2300      	movs	r3, #0
 800bea4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bea6:	bf00      	nop

        }
        break;
 800bea8:	e13d      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800beaa:	4b72      	ldr	r3, [pc, #456]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800beac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800beb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800beb4:	633b      	str	r3, [r7, #48]	; 0x30
 800beb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bebc:	d028      	beq.n	800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0xfc0>
 800bebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bec4:	d83c      	bhi.n	800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
 800bec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800becc:	d013      	beq.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa6>
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bed4:	d834      	bhi.n	800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
 800bed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d004      	beq.n	800bee6 <HAL_RCCEx_GetPeriphCLKFreq+0xf96>
 800bedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bee2:	d004      	beq.n	800beee <HAL_RCCEx_GetPeriphCLKFreq+0xf9e>
 800bee4:	e02c      	b.n	800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PCLK1:

            frequency = HAL_RCC_GetPCLK1Freq();
 800bee6:	f7fd fefb 	bl	8009ce0 <HAL_RCC_GetPCLK1Freq>
 800beea:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800beec:	e02b      	b.n	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 800beee:	f7fd fdd5 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 800bef2:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800bef4:	e027      	b.n	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bef6:	4b5f      	ldr	r3, [pc, #380]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800befe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf02:	d102      	bne.n	800bf0a <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
            {
              frequency = HSI_VALUE;
 800bf04:	4b5c      	ldr	r3, [pc, #368]	; (800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800bf06:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800bf08:	e01d      	b.n	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0xff6>
              frequency = 0U;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bf0e:	e01a      	b.n	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bf10:	4b58      	ldr	r3, [pc, #352]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d005      	beq.n	800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800bf1c:	4b55      	ldr	r3, [pc, #340]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	0e1b      	lsrs	r3, r3, #24
 800bf22:	f003 030f 	and.w	r3, r3, #15
 800bf26:	e006      	b.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0xfe6>
 800bf28:	4b52      	ldr	r3, [pc, #328]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800bf2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bf2e:	041b      	lsls	r3, r3, #16
 800bf30:	0e1b      	lsrs	r3, r3, #24
 800bf32:	f003 030f 	and.w	r3, r3, #15
 800bf36:	4a51      	ldr	r2, [pc, #324]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 800bf38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf3c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bf3e:	e002      	b.n	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          default:

            frequency = 0U;
 800bf40:	2300      	movs	r3, #0
 800bf42:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bf44:	bf00      	nop

        }
        break;
 800bf46:	e0ee      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800bf48:	4b4a      	ldr	r3, [pc, #296]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800bf4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bf4e:	f003 0318 	and.w	r3, r3, #24
 800bf52:	633b      	str	r3, [r7, #48]	; 0x30
 800bf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf56:	2b18      	cmp	r3, #24
 800bf58:	d861      	bhi.n	800c01e <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
 800bf5a:	a201      	add	r2, pc, #4	; (adr r2, 800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800bf5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf60:	0800bfc5 	.word	0x0800bfc5
 800bf64:	0800c01f 	.word	0x0800c01f
 800bf68:	0800c01f 	.word	0x0800c01f
 800bf6c:	0800c01f 	.word	0x0800c01f
 800bf70:	0800c01f 	.word	0x0800c01f
 800bf74:	0800c01f 	.word	0x0800c01f
 800bf78:	0800c01f 	.word	0x0800c01f
 800bf7c:	0800c01f 	.word	0x0800c01f
 800bf80:	0800bfcd 	.word	0x0800bfcd
 800bf84:	0800c01f 	.word	0x0800c01f
 800bf88:	0800c01f 	.word	0x0800c01f
 800bf8c:	0800c01f 	.word	0x0800c01f
 800bf90:	0800c01f 	.word	0x0800c01f
 800bf94:	0800c01f 	.word	0x0800c01f
 800bf98:	0800c01f 	.word	0x0800c01f
 800bf9c:	0800c01f 	.word	0x0800c01f
 800bfa0:	0800bfd5 	.word	0x0800bfd5
 800bfa4:	0800c01f 	.word	0x0800c01f
 800bfa8:	0800c01f 	.word	0x0800c01f
 800bfac:	0800c01f 	.word	0x0800c01f
 800bfb0:	0800c01f 	.word	0x0800c01f
 800bfb4:	0800c01f 	.word	0x0800c01f
 800bfb8:	0800c01f 	.word	0x0800c01f
 800bfbc:	0800c01f 	.word	0x0800c01f
 800bfc0:	0800bfef 	.word	0x0800bfef
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PCLK3:

            frequency = HAL_RCC_GetPCLK3Freq();
 800bfc4:	f7fd feb4 	bl	8009d30 <HAL_RCC_GetPCLK3Freq>
 800bfc8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800bfca:	e02b      	b.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 800bfcc:	f7fd fd66 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 800bfd0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800bfd2:	e027      	b.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bfd4:	4b27      	ldr	r3, [pc, #156]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfe0:	d102      	bne.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
            {
              frequency = HSI_VALUE;
 800bfe2:	4b25      	ldr	r3, [pc, #148]	; (800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800bfe4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800bfe6:	e01d      	b.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
              frequency = 0U;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bfec:	e01a      	b.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bfee:	4b21      	ldr	r3, [pc, #132]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d005      	beq.n	800c006 <HAL_RCCEx_GetPeriphCLKFreq+0x10b6>
 800bffa:	4b1e      	ldr	r3, [pc, #120]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	0e1b      	lsrs	r3, r3, #24
 800c000:	f003 030f 	and.w	r3, r3, #15
 800c004:	e006      	b.n	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 800c006:	4b1b      	ldr	r3, [pc, #108]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c008:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c00c:	041b      	lsls	r3, r3, #16
 800c00e:	0e1b      	lsrs	r3, r3, #24
 800c010:	f003 030f 	and.w	r3, r3, #15
 800c014:	4a19      	ldr	r2, [pc, #100]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 800c016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c01a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c01c:	e002      	b.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          default:

            frequency = 0U;
 800c01e:	2300      	movs	r3, #0
 800c020:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c022:	bf00      	nop
        }
        break;
 800c024:	e07f      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c026:	4b13      	ldr	r3, [pc, #76]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c028:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c02c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c030:	633b      	str	r3, [r7, #48]	; 0x30
 800c032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c034:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c038:	d013      	beq.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 800c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c040:	d842      	bhi.n	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800c042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c044:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c048:	d01a      	beq.n	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x1130>
 800c04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c050:	d83a      	bhi.n	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800c052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c054:	2b00      	cmp	r3, #0
 800c056:	d01b      	beq.n	800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x1140>
 800c058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c05e:	d01b      	beq.n	800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x1148>
 800c060:	e032      	b.n	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_PLL2:

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c062:	f107 0318 	add.w	r3, r7, #24
 800c066:	4618      	mov	r0, r3
 800c068:	f7fe fca6 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_Q_Frequency;
 800c06c:	69fb      	ldr	r3, [r7, #28]
 800c06e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c070:	e02d      	b.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800c072:	bf00      	nop
 800c074:	46020c00 	.word	0x46020c00
 800c078:	00f42400 	.word	0x00f42400
 800c07c:	0801b180 	.word	0x0801b180

          case RCC_OSPICLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c084:	4618      	mov	r0, r3
 800c086:	f7fe fb31 	bl	800a6ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c08e:	e01e      	b.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          case RCC_OSPICLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 800c090:	f7fd fd04 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 800c094:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c096:	e01a      	b.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          case RCC_OSPICLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c098:	4b25      	ldr	r3, [pc, #148]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d005      	beq.n	800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1160>
 800c0a4:	4b22      	ldr	r3, [pc, #136]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	0e1b      	lsrs	r3, r3, #24
 800c0aa:	f003 030f 	and.w	r3, r3, #15
 800c0ae:	e006      	b.n	800c0be <HAL_RCCEx_GetPeriphCLKFreq+0x116e>
 800c0b0:	4b1f      	ldr	r3, [pc, #124]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800c0b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c0b6:	041b      	lsls	r3, r3, #16
 800c0b8:	0e1b      	lsrs	r3, r3, #24
 800c0ba:	f003 030f 	and.w	r3, r3, #15
 800c0be:	4a1d      	ldr	r2, [pc, #116]	; (800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 800c0c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0c4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c0c6:	e002      	b.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          default:

            frequency = 0U;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c0cc:	bf00      	nop
        }
        break;
 800c0ce:	e02a      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_DAC1:
        /* Get the current DAC1 kernel source */
        srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800c0d0:	4b17      	ldr	r3, [pc, #92]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800c0d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c0d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0da:	633b      	str	r3, [r7, #48]	; 0x30
        /* Check if LSE is ready and if DAC1 clock selection is LSE */
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800c0dc:	4b14      	ldr	r3, [pc, #80]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800c0de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0e2:	f003 0302 	and.w	r3, r3, #2
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	d106      	bne.n	800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 800c0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d103      	bne.n	800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
        {
          frequency = LSE_VALUE;
 800c0f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0f4:	637b      	str	r3, [r7, #52]	; 0x34
 800c0f6:	e012      	b.n	800c11e <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
        }
        /* Check if LSI is ready and if DAC1 clock selection is LSI */
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800c0f8:	4b0d      	ldr	r3, [pc, #52]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800c0fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c102:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c106:	d107      	bne.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800c108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c10e:	d103      	bne.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
        {
          frequency = LSI_VALUE;
 800c110:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c114:	637b      	str	r3, [r7, #52]	; 0x34
 800c116:	e002      	b.n	800c11e <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
        }
        /* Clock not enabled for DAC1*/
        else
        {
          frequency = 0U;
 800c118:	2300      	movs	r3, #0
 800c11a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800c11c:	e003      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800c11e:	e002      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      default:
         frequency = 0U;
 800c120:	2300      	movs	r3, #0
 800c122:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c124:	bf00      	nop
    }
  }
  return (frequency);
 800c126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3738      	adds	r7, #56	; 0x38
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	46020c00 	.word	0x46020c00
 800c134:	0801b180 	.word	0x0801b180

0800c138 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c140:	4b47      	ldr	r3, [pc, #284]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a46      	ldr	r2, [pc, #280]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c146:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c14a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c14c:	f7fa fbc4 	bl	80068d8 <HAL_GetTick>
 800c150:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c152:	e008      	b.n	800c166 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c154:	f7fa fbc0 	bl	80068d8 <HAL_GetTick>
 800c158:	4602      	mov	r2, r0
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	1ad3      	subs	r3, r2, r3
 800c15e:	2b02      	cmp	r3, #2
 800c160:	d901      	bls.n	800c166 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c162:	2303      	movs	r3, #3
 800c164:	e077      	b.n	800c256 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c166:	4b3e      	ldr	r3, [pc, #248]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1f0      	bne.n	800c154 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c172:	4b3b      	ldr	r3, [pc, #236]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c176:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c17a:	f023 0303 	bic.w	r3, r3, #3
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	6811      	ldr	r1, [r2, #0]
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	6852      	ldr	r2, [r2, #4]
 800c186:	3a01      	subs	r2, #1
 800c188:	0212      	lsls	r2, r2, #8
 800c18a:	430a      	orrs	r2, r1
 800c18c:	4934      	ldr	r1, [pc, #208]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c18e:	4313      	orrs	r3, r2
 800c190:	62cb      	str	r3, [r1, #44]	; 0x2c
 800c192:	4b33      	ldr	r3, [pc, #204]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c194:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c196:	4b33      	ldr	r3, [pc, #204]	; (800c264 <RCCEx_PLL2_Config+0x12c>)
 800c198:	4013      	ands	r3, r2
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	6892      	ldr	r2, [r2, #8]
 800c19e:	3a01      	subs	r2, #1
 800c1a0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	68d2      	ldr	r2, [r2, #12]
 800c1a8:	3a01      	subs	r2, #1
 800c1aa:	0252      	lsls	r2, r2, #9
 800c1ac:	b292      	uxth	r2, r2
 800c1ae:	4311      	orrs	r1, r2
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	6912      	ldr	r2, [r2, #16]
 800c1b4:	3a01      	subs	r2, #1
 800c1b6:	0412      	lsls	r2, r2, #16
 800c1b8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c1bc:	4311      	orrs	r1, r2
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	6952      	ldr	r2, [r2, #20]
 800c1c2:	3a01      	subs	r2, #1
 800c1c4:	0612      	lsls	r2, r2, #24
 800c1c6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c1ca:	430a      	orrs	r2, r1
 800c1cc:	4924      	ldr	r1, [pc, #144]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c1d2:	4b23      	ldr	r3, [pc, #140]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d6:	f023 020c 	bic.w	r2, r3, #12
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	699b      	ldr	r3, [r3, #24]
 800c1de:	4920      	ldr	r1, [pc, #128]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c1e4:	4b1e      	ldr	r3, [pc, #120]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a1b      	ldr	r3, [r3, #32]
 800c1ec:	491c      	ldr	r1, [pc, #112]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c1f2:	4b1b      	ldr	r3, [pc, #108]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f6:	4a1a      	ldr	r2, [pc, #104]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c1f8:	f023 0310 	bic.w	r3, r3, #16
 800c1fc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c1fe:	4b18      	ldr	r3, [pc, #96]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c206:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	69d2      	ldr	r2, [r2, #28]
 800c20e:	00d2      	lsls	r2, r2, #3
 800c210:	4913      	ldr	r1, [pc, #76]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c212:	4313      	orrs	r3, r2
 800c214:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c216:	4b12      	ldr	r3, [pc, #72]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c21a:	4a11      	ldr	r2, [pc, #68]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c21c:	f043 0310 	orr.w	r3, r3, #16
 800c220:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c222:	4b0f      	ldr	r3, [pc, #60]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a0e      	ldr	r2, [pc, #56]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c228:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c22c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c22e:	f7fa fb53 	bl	80068d8 <HAL_GetTick>
 800c232:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c234:	e008      	b.n	800c248 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c236:	f7fa fb4f 	bl	80068d8 <HAL_GetTick>
 800c23a:	4602      	mov	r2, r0
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	1ad3      	subs	r3, r2, r3
 800c240:	2b02      	cmp	r3, #2
 800c242:	d901      	bls.n	800c248 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c244:	2303      	movs	r3, #3
 800c246:	e006      	b.n	800c256 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c248:	4b05      	ldr	r3, [pc, #20]	; (800c260 <RCCEx_PLL2_Config+0x128>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c250:	2b00      	cmp	r3, #0
 800c252:	d0f0      	beq.n	800c236 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800c254:	2300      	movs	r3, #0

}
 800c256:	4618      	mov	r0, r3
 800c258:	3710      	adds	r7, #16
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	46020c00 	.word	0x46020c00
 800c264:	80800000 	.word	0x80800000

0800c268 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters N & P & optionally M as well as PLL3 output clock(s)
  * @note   PLL3 is temporary disable to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800c270:	4b47      	ldr	r3, [pc, #284]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a46      	ldr	r2, [pc, #280]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c27a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c27c:	f7fa fb2c 	bl	80068d8 <HAL_GetTick>
 800c280:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c282:	e008      	b.n	800c296 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c284:	f7fa fb28 	bl	80068d8 <HAL_GetTick>
 800c288:	4602      	mov	r2, r0
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	1ad3      	subs	r3, r2, r3
 800c28e:	2b02      	cmp	r3, #2
 800c290:	d901      	bls.n	800c296 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c292:	2303      	movs	r3, #3
 800c294:	e077      	b.n	800c386 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c296:	4b3e      	ldr	r3, [pc, #248]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1f0      	bne.n	800c284 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c2a2:	4b3b      	ldr	r3, [pc, #236]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c2aa:	f023 0303 	bic.w	r3, r3, #3
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	6811      	ldr	r1, [r2, #0]
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	6852      	ldr	r2, [r2, #4]
 800c2b6:	3a01      	subs	r2, #1
 800c2b8:	0212      	lsls	r2, r2, #8
 800c2ba:	430a      	orrs	r2, r1
 800c2bc:	4934      	ldr	r1, [pc, #208]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	630b      	str	r3, [r1, #48]	; 0x30
 800c2c2:	4b33      	ldr	r3, [pc, #204]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c2c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2c6:	4b33      	ldr	r3, [pc, #204]	; (800c394 <RCCEx_PLL3_Config+0x12c>)
 800c2c8:	4013      	ands	r3, r2
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	6892      	ldr	r2, [r2, #8]
 800c2ce:	3a01      	subs	r2, #1
 800c2d0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	68d2      	ldr	r2, [r2, #12]
 800c2d8:	3a01      	subs	r2, #1
 800c2da:	0252      	lsls	r2, r2, #9
 800c2dc:	b292      	uxth	r2, r2
 800c2de:	4311      	orrs	r1, r2
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	6912      	ldr	r2, [r2, #16]
 800c2e4:	3a01      	subs	r2, #1
 800c2e6:	0412      	lsls	r2, r2, #16
 800c2e8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c2ec:	4311      	orrs	r1, r2
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	6952      	ldr	r2, [r2, #20]
 800c2f2:	3a01      	subs	r2, #1
 800c2f4:	0612      	lsls	r2, r2, #24
 800c2f6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c2fa:	430a      	orrs	r2, r1
 800c2fc:	4924      	ldr	r1, [pc, #144]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c2fe:	4313      	orrs	r3, r2
 800c300:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c302:	4b23      	ldr	r3, [pc, #140]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c306:	f023 020c 	bic.w	r2, r3, #12
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	699b      	ldr	r3, [r3, #24]
 800c30e:	4920      	ldr	r1, [pc, #128]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c310:	4313      	orrs	r3, r2
 800c312:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c314:	4b1e      	ldr	r3, [pc, #120]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6a1b      	ldr	r3, [r3, #32]
 800c31c:	491c      	ldr	r1, [pc, #112]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c31e:	4313      	orrs	r3, r2
 800c320:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c322:	4b1b      	ldr	r3, [pc, #108]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c326:	4a1a      	ldr	r2, [pc, #104]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c328:	f023 0310 	bic.w	r3, r3, #16
 800c32c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c32e:	4b18      	ldr	r3, [pc, #96]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c336:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	69d2      	ldr	r2, [r2, #28]
 800c33e:	00d2      	lsls	r2, r2, #3
 800c340:	4913      	ldr	r1, [pc, #76]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c342:	4313      	orrs	r3, r2
 800c344:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c346:	4b12      	ldr	r3, [pc, #72]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c34a:	4a11      	ldr	r2, [pc, #68]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c34c:	f043 0310 	orr.w	r3, r3, #16
 800c350:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c352:	4b0f      	ldr	r3, [pc, #60]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a0e      	ldr	r2, [pc, #56]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c35c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c35e:	f7fa fabb 	bl	80068d8 <HAL_GetTick>
 800c362:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c364:	e008      	b.n	800c378 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c366:	f7fa fab7 	bl	80068d8 <HAL_GetTick>
 800c36a:	4602      	mov	r2, r0
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	1ad3      	subs	r3, r2, r3
 800c370:	2b02      	cmp	r3, #2
 800c372:	d901      	bls.n	800c378 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c374:	2303      	movs	r3, #3
 800c376:	e006      	b.n	800c386 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c378:	4b05      	ldr	r3, [pc, #20]	; (800c390 <RCCEx_PLL3_Config+0x128>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c380:	2b00      	cmp	r3, #0
 800c382:	d0f0      	beq.n	800c366 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	46020c00 	.word	0x46020c00
 800c394:	80800000 	.word	0x80800000

0800c398 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d068      	beq.n	800c47c <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d106      	bne.n	800c3c4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f7f6 f810 	bl	80023e4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2202      	movs	r2, #2
 800c3c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3cc:	4b2e      	ldr	r3, [pc, #184]	; (800c488 <HAL_RTC_Init+0xf0>)
 800c3ce:	22ca      	movs	r2, #202	; 0xca
 800c3d0:	625a      	str	r2, [r3, #36]	; 0x24
 800c3d2:	4b2d      	ldr	r3, [pc, #180]	; (800c488 <HAL_RTC_Init+0xf0>)
 800c3d4:	2253      	movs	r2, #83	; 0x53
 800c3d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 fa4f 	bl	800c87c <RTC_EnterInitMode>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800c3e2:	7bfb      	ldrb	r3, [r7, #15]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d13f      	bne.n	800c468 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c3e8:	4b27      	ldr	r3, [pc, #156]	; (800c488 <HAL_RTC_Init+0xf0>)
 800c3ea:	699b      	ldr	r3, [r3, #24]
 800c3ec:	4a26      	ldr	r2, [pc, #152]	; (800c488 <HAL_RTC_Init+0xf0>)
 800c3ee:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800c3f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3f6:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c3f8:	4b23      	ldr	r3, [pc, #140]	; (800c488 <HAL_RTC_Init+0xf0>)
 800c3fa:	699a      	ldr	r2, [r3, #24]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6859      	ldr	r1, [r3, #4]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	4319      	orrs	r1, r3
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	699b      	ldr	r3, [r3, #24]
 800c40a:	430b      	orrs	r3, r1
 800c40c:	491e      	ldr	r1, [pc, #120]	; (800c488 <HAL_RTC_Init+0xf0>)
 800c40e:	4313      	orrs	r3, r2
 800c410:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	68da      	ldr	r2, [r3, #12]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	041b      	lsls	r3, r3, #16
 800c41c:	491a      	ldr	r1, [pc, #104]	; (800c488 <HAL_RTC_Init+0xf0>)
 800c41e:	4313      	orrs	r3, r2
 800c420:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c422:	4b19      	ldr	r3, [pc, #100]	; (800c488 <HAL_RTC_Init+0xf0>)
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c432:	430b      	orrs	r3, r1
 800c434:	4914      	ldr	r1, [pc, #80]	; (800c488 <HAL_RTC_Init+0xf0>)
 800c436:	4313      	orrs	r3, r2
 800c438:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fa52 	bl	800c8e4 <RTC_ExitInitMode>
 800c440:	4603      	mov	r3, r0
 800c442:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c444:	7bfb      	ldrb	r3, [r7, #15]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d10e      	bne.n	800c468 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800c44a:	4b0f      	ldr	r3, [pc, #60]	; (800c488 <HAL_RTC_Init+0xf0>)
 800c44c:	699b      	ldr	r3, [r3, #24]
 800c44e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6a19      	ldr	r1, [r3, #32]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	69db      	ldr	r3, [r3, #28]
 800c45a:	4319      	orrs	r1, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	695b      	ldr	r3, [r3, #20]
 800c460:	430b      	orrs	r3, r1
 800c462:	4909      	ldr	r1, [pc, #36]	; (800c488 <HAL_RTC_Init+0xf0>)
 800c464:	4313      	orrs	r3, r2
 800c466:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c468:	4b07      	ldr	r3, [pc, #28]	; (800c488 <HAL_RTC_Init+0xf0>)
 800c46a:	22ff      	movs	r2, #255	; 0xff
 800c46c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800c46e:	7bfb      	ldrb	r3, [r7, #15]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d103      	bne.n	800c47c <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800c47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	46007800 	.word	0x46007800

0800c48c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c48c:	b590      	push	{r4, r7, lr}
 800c48e:	b087      	sub	sp, #28
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d101      	bne.n	800c4a6 <HAL_RTC_SetTime+0x1a>
 800c4a2:	2302      	movs	r3, #2
 800c4a4:	e088      	b.n	800c5b8 <HAL_RTC_SetTime+0x12c>
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2202      	movs	r2, #2
 800c4b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4b6:	4b42      	ldr	r3, [pc, #264]	; (800c5c0 <HAL_RTC_SetTime+0x134>)
 800c4b8:	22ca      	movs	r2, #202	; 0xca
 800c4ba:	625a      	str	r2, [r3, #36]	; 0x24
 800c4bc:	4b40      	ldr	r3, [pc, #256]	; (800c5c0 <HAL_RTC_SetTime+0x134>)
 800c4be:	2253      	movs	r2, #83	; 0x53
 800c4c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c4c2:	68f8      	ldr	r0, [r7, #12]
 800c4c4:	f000 f9da 	bl	800c87c <RTC_EnterInitMode>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c4cc:	7cfb      	ldrb	r3, [r7, #19]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d163      	bne.n	800c59a <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800c4d2:	4b3b      	ldr	r3, [pc, #236]	; (800c5c0 <HAL_RTC_SetTime+0x134>)
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4de:	d057      	beq.n	800c590 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d125      	bne.n	800c532 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c4e6:	4b36      	ldr	r3, [pc, #216]	; (800c5c0 <HAL_RTC_SetTime+0x134>)
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d102      	bne.n	800c4f8 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f000 fa2f 	bl	800c960 <RTC_ByteToBcd2>
 800c502:	4603      	mov	r3, r0
 800c504:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	785b      	ldrb	r3, [r3, #1]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f000 fa28 	bl	800c960 <RTC_ByteToBcd2>
 800c510:	4603      	mov	r3, r0
 800c512:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c514:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	789b      	ldrb	r3, [r3, #2]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f000 fa20 	bl	800c960 <RTC_ByteToBcd2>
 800c520:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c522:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	78db      	ldrb	r3, [r3, #3]
 800c52a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c52c:	4313      	orrs	r3, r2
 800c52e:	617b      	str	r3, [r7, #20]
 800c530:	e017      	b.n	800c562 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c532:	4b23      	ldr	r3, [pc, #140]	; (800c5c0 <HAL_RTC_SetTime+0x134>)
 800c534:	699b      	ldr	r3, [r3, #24]
 800c536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d102      	bne.n	800c544 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	2200      	movs	r2, #0
 800c542:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	785b      	ldrb	r3, [r3, #1]
 800c54e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c550:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c552:	68ba      	ldr	r2, [r7, #8]
 800c554:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c556:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	78db      	ldrb	r3, [r3, #3]
 800c55c:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c55e:	4313      	orrs	r3, r2
 800c560:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800c562:	4a17      	ldr	r2, [pc, #92]	; (800c5c0 <HAL_RTC_SetTime+0x134>)
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c56a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c56e:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800c570:	4b13      	ldr	r3, [pc, #76]	; (800c5c0 <HAL_RTC_SetTime+0x134>)
 800c572:	699b      	ldr	r3, [r3, #24]
 800c574:	4a12      	ldr	r2, [pc, #72]	; (800c5c0 <HAL_RTC_SetTime+0x134>)
 800c576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c57a:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800c57c:	4b10      	ldr	r3, [pc, #64]	; (800c5c0 <HAL_RTC_SetTime+0x134>)
 800c57e:	699a      	ldr	r2, [r3, #24]
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	68d9      	ldr	r1, [r3, #12]
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	430b      	orrs	r3, r1
 800c58a:	490d      	ldr	r1, [pc, #52]	; (800c5c0 <HAL_RTC_SetTime+0x134>)
 800c58c:	4313      	orrs	r3, r2
 800c58e:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c590:	68f8      	ldr	r0, [r7, #12]
 800c592:	f000 f9a7 	bl	800c8e4 <RTC_ExitInitMode>
 800c596:	4603      	mov	r3, r0
 800c598:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c59a:	4b09      	ldr	r3, [pc, #36]	; (800c5c0 <HAL_RTC_SetTime+0x134>)
 800c59c:	22ff      	movs	r2, #255	; 0xff
 800c59e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c5a0:	7cfb      	ldrb	r3, [r7, #19]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d103      	bne.n	800c5ae <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800c5b6:	7cfb      	ldrb	r3, [r7, #19]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	371c      	adds	r7, #28
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd90      	pop	{r4, r7, pc}
 800c5c0:	46007800 	.word	0x46007800

0800c5c4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b086      	sub	sp, #24
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800c5d0:	4b2c      	ldr	r3, [pc, #176]	; (800c684 <HAL_RTC_GetTime+0xc0>)
 800c5d2:	689a      	ldr	r2, [r3, #8]
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800c5d8:	4b2a      	ldr	r3, [pc, #168]	; (800c684 <HAL_RTC_GetTime+0xc0>)
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5e4:	d049      	beq.n	800c67a <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800c5e6:	4b27      	ldr	r3, [pc, #156]	; (800c684 <HAL_RTC_GetTime+0xc0>)
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800c5f2:	4b24      	ldr	r3, [pc, #144]	; (800c684 <HAL_RTC_GetTime+0xc0>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c5fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c5fe:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	0c1b      	lsrs	r3, r3, #16
 800c604:	b2db      	uxtb	r3, r3
 800c606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c60a:	b2da      	uxtb	r2, r3
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	0a1b      	lsrs	r3, r3, #8
 800c614:	b2db      	uxtb	r3, r3
 800c616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c61a:	b2da      	uxtb	r2, r3
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	b2db      	uxtb	r3, r3
 800c624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c628:	b2da      	uxtb	r2, r3
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	0d9b      	lsrs	r3, r3, #22
 800c632:	b2db      	uxtb	r3, r3
 800c634:	f003 0301 	and.w	r3, r3, #1
 800c638:	b2da      	uxtb	r2, r3
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d11a      	bne.n	800c67a <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	4618      	mov	r0, r3
 800c64a:	f000 f9a9 	bl	800c9a0 <RTC_Bcd2ToByte>
 800c64e:	4603      	mov	r3, r0
 800c650:	461a      	mov	r2, r3
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	785b      	ldrb	r3, [r3, #1]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f000 f9a0 	bl	800c9a0 <RTC_Bcd2ToByte>
 800c660:	4603      	mov	r3, r0
 800c662:	461a      	mov	r2, r3
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	789b      	ldrb	r3, [r3, #2]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f000 f997 	bl	800c9a0 <RTC_Bcd2ToByte>
 800c672:	4603      	mov	r3, r0
 800c674:	461a      	mov	r2, r3
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800c67a:	2300      	movs	r3, #0
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3718      	adds	r7, #24
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	46007800 	.word	0x46007800

0800c688 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c688:	b590      	push	{r4, r7, lr}
 800c68a:	b087      	sub	sp, #28
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d101      	bne.n	800c6a2 <HAL_RTC_SetDate+0x1a>
 800c69e:	2302      	movs	r3, #2
 800c6a0:	e071      	b.n	800c786 <HAL_RTC_SetDate+0xfe>
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2202      	movs	r2, #2
 800c6ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d10e      	bne.n	800c6d6 <HAL_RTC_SetDate+0x4e>
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	785b      	ldrb	r3, [r3, #1]
 800c6bc:	f003 0310 	and.w	r3, r3, #16
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d008      	beq.n	800c6d6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	785b      	ldrb	r3, [r3, #1]
 800c6c8:	f023 0310 	bic.w	r3, r3, #16
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	330a      	adds	r3, #10
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d11c      	bne.n	800c716 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	78db      	ldrb	r3, [r3, #3]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f000 f93d 	bl	800c960 <RTC_ByteToBcd2>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	785b      	ldrb	r3, [r3, #1]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f000 f936 	bl	800c960 <RTC_ByteToBcd2>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c6f8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	789b      	ldrb	r3, [r3, #2]
 800c6fe:	4618      	mov	r0, r3
 800c700:	f000 f92e 	bl	800c960 <RTC_ByteToBcd2>
 800c704:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c706:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c710:	4313      	orrs	r3, r2
 800c712:	617b      	str	r3, [r7, #20]
 800c714:	e00e      	b.n	800c734 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	78db      	ldrb	r3, [r3, #3]
 800c71a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	785b      	ldrb	r3, [r3, #1]
 800c720:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c722:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800c724:	68ba      	ldr	r2, [r7, #8]
 800c726:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c728:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c730:	4313      	orrs	r3, r2
 800c732:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c734:	4b16      	ldr	r3, [pc, #88]	; (800c790 <HAL_RTC_SetDate+0x108>)
 800c736:	22ca      	movs	r2, #202	; 0xca
 800c738:	625a      	str	r2, [r3, #36]	; 0x24
 800c73a:	4b15      	ldr	r3, [pc, #84]	; (800c790 <HAL_RTC_SetDate+0x108>)
 800c73c:	2253      	movs	r2, #83	; 0x53
 800c73e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c740:	68f8      	ldr	r0, [r7, #12]
 800c742:	f000 f89b 	bl	800c87c <RTC_EnterInitMode>
 800c746:	4603      	mov	r3, r0
 800c748:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c74a:	7cfb      	ldrb	r3, [r7, #19]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d10b      	bne.n	800c768 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800c750:	4a0f      	ldr	r2, [pc, #60]	; (800c790 <HAL_RTC_SetDate+0x108>)
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c758:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c75c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c75e:	68f8      	ldr	r0, [r7, #12]
 800c760:	f000 f8c0 	bl	800c8e4 <RTC_ExitInitMode>
 800c764:	4603      	mov	r3, r0
 800c766:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c768:	4b09      	ldr	r3, [pc, #36]	; (800c790 <HAL_RTC_SetDate+0x108>)
 800c76a:	22ff      	movs	r2, #255	; 0xff
 800c76c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c76e:	7cfb      	ldrb	r3, [r7, #19]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d103      	bne.n	800c77c <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2201      	movs	r2, #1
 800c778:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2200      	movs	r2, #0
 800c780:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800c784:	7cfb      	ldrb	r3, [r7, #19]
}
 800c786:	4618      	mov	r0, r3
 800c788:	371c      	adds	r7, #28
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd90      	pop	{r4, r7, pc}
 800c78e:	bf00      	nop
 800c790:	46007800 	.word	0x46007800

0800c794 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800c7a0:	4b22      	ldr	r3, [pc, #136]	; (800c82c <HAL_RTC_GetDate+0x98>)
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c7a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c7ac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	0c1b      	lsrs	r3, r3, #16
 800c7b2:	b2da      	uxtb	r2, r3
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	0a1b      	lsrs	r3, r3, #8
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	f003 031f 	and.w	r3, r3, #31
 800c7c2:	b2da      	uxtb	r2, r3
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7d0:	b2da      	uxtb	r2, r3
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	0b5b      	lsrs	r3, r3, #13
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	f003 0307 	and.w	r3, r3, #7
 800c7e0:	b2da      	uxtb	r2, r3
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d11a      	bne.n	800c822 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	78db      	ldrb	r3, [r3, #3]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f000 f8d5 	bl	800c9a0 <RTC_Bcd2ToByte>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	785b      	ldrb	r3, [r3, #1]
 800c802:	4618      	mov	r0, r3
 800c804:	f000 f8cc 	bl	800c9a0 <RTC_Bcd2ToByte>
 800c808:	4603      	mov	r3, r0
 800c80a:	461a      	mov	r2, r3
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	789b      	ldrb	r3, [r3, #2]
 800c814:	4618      	mov	r0, r3
 800c816:	f000 f8c3 	bl	800c9a0 <RTC_Bcd2ToByte>
 800c81a:	4603      	mov	r3, r0
 800c81c:	461a      	mov	r2, r3
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3718      	adds	r7, #24
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	46007800 	.word	0x46007800

0800c830 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800c838:	4b0f      	ldr	r3, [pc, #60]	; (800c878 <HAL_RTC_WaitForSynchro+0x48>)
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	4a0e      	ldr	r2, [pc, #56]	; (800c878 <HAL_RTC_WaitForSynchro+0x48>)
 800c83e:	f023 0320 	bic.w	r3, r3, #32
 800c842:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800c844:	f7fa f848 	bl	80068d8 <HAL_GetTick>
 800c848:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c84a:	e009      	b.n	800c860 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c84c:	f7fa f844 	bl	80068d8 <HAL_GetTick>
 800c850:	4602      	mov	r2, r0
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	1ad3      	subs	r3, r2, r3
 800c856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c85a:	d901      	bls.n	800c860 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800c85c:	2303      	movs	r3, #3
 800c85e:	e006      	b.n	800c86e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c860:	4b05      	ldr	r3, [pc, #20]	; (800c878 <HAL_RTC_WaitForSynchro+0x48>)
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	f003 0320 	and.w	r3, r3, #32
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d0ef      	beq.n	800c84c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	46007800 	.word	0x46007800

0800c87c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c884:	2300      	movs	r3, #0
 800c886:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c888:	4b15      	ldr	r3, [pc, #84]	; (800c8e0 <RTC_EnterInitMode+0x64>)
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c890:	2b00      	cmp	r3, #0
 800c892:	d120      	bne.n	800c8d6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c894:	4b12      	ldr	r3, [pc, #72]	; (800c8e0 <RTC_EnterInitMode+0x64>)
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	4a11      	ldr	r2, [pc, #68]	; (800c8e0 <RTC_EnterInitMode+0x64>)
 800c89a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c89e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800c8a0:	f7fa f81a 	bl	80068d8 <HAL_GetTick>
 800c8a4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c8a6:	e00d      	b.n	800c8c4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c8a8:	f7fa f816 	bl	80068d8 <HAL_GetTick>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8b6:	d905      	bls.n	800c8c4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c8b8:	2303      	movs	r3, #3
 800c8ba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2203      	movs	r2, #3
 800c8c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c8c4:	4b06      	ldr	r3, [pc, #24]	; (800c8e0 <RTC_EnterInitMode+0x64>)
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d102      	bne.n	800c8d6 <RTC_EnterInitMode+0x5a>
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
 800c8d2:	2b03      	cmp	r3, #3
 800c8d4:	d1e8      	bne.n	800c8a8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800c8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3710      	adds	r7, #16
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	46007800 	.word	0x46007800

0800c8e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c8f0:	4b1a      	ldr	r3, [pc, #104]	; (800c95c <RTC_ExitInitMode+0x78>)
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	4a19      	ldr	r2, [pc, #100]	; (800c95c <RTC_ExitInitMode+0x78>)
 800c8f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8fa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c8fc:	4b17      	ldr	r3, [pc, #92]	; (800c95c <RTC_ExitInitMode+0x78>)
 800c8fe:	699b      	ldr	r3, [r3, #24]
 800c900:	f003 0320 	and.w	r3, r3, #32
 800c904:	2b00      	cmp	r3, #0
 800c906:	d10c      	bne.n	800c922 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f7ff ff91 	bl	800c830 <HAL_RTC_WaitForSynchro>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d01e      	beq.n	800c952 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2203      	movs	r2, #3
 800c918:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800c91c:	2303      	movs	r3, #3
 800c91e:	73fb      	strb	r3, [r7, #15]
 800c920:	e017      	b.n	800c952 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c922:	4b0e      	ldr	r3, [pc, #56]	; (800c95c <RTC_ExitInitMode+0x78>)
 800c924:	699b      	ldr	r3, [r3, #24]
 800c926:	4a0d      	ldr	r2, [pc, #52]	; (800c95c <RTC_ExitInitMode+0x78>)
 800c928:	f023 0320 	bic.w	r3, r3, #32
 800c92c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f7ff ff7e 	bl	800c830 <HAL_RTC_WaitForSynchro>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d005      	beq.n	800c946 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2203      	movs	r2, #3
 800c93e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800c942:	2303      	movs	r3, #3
 800c944:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c946:	4b05      	ldr	r3, [pc, #20]	; (800c95c <RTC_ExitInitMode+0x78>)
 800c948:	699b      	ldr	r3, [r3, #24]
 800c94a:	4a04      	ldr	r2, [pc, #16]	; (800c95c <RTC_ExitInitMode+0x78>)
 800c94c:	f043 0320 	orr.w	r3, r3, #32
 800c950:	6193      	str	r3, [r2, #24]
  }
  return status;
 800c952:	7bfb      	ldrb	r3, [r7, #15]
}
 800c954:	4618      	mov	r0, r3
 800c956:	3710      	adds	r7, #16
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	46007800 	.word	0x46007800

0800c960 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	4603      	mov	r3, r0
 800c968:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c96a:	2300      	movs	r3, #0
 800c96c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800c96e:	79fb      	ldrb	r3, [r7, #7]
 800c970:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800c972:	e005      	b.n	800c980 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	3301      	adds	r3, #1
 800c978:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800c97a:	7afb      	ldrb	r3, [r7, #11]
 800c97c:	3b0a      	subs	r3, #10
 800c97e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800c980:	7afb      	ldrb	r3, [r7, #11]
 800c982:	2b09      	cmp	r3, #9
 800c984:	d8f6      	bhi.n	800c974 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	011b      	lsls	r3, r3, #4
 800c98c:	b2da      	uxtb	r2, r3
 800c98e:	7afb      	ldrb	r3, [r7, #11]
 800c990:	4313      	orrs	r3, r2
 800c992:	b2db      	uxtb	r3, r3
}
 800c994:	4618      	mov	r0, r3
 800c996:	3714      	adds	r7, #20
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr

0800c9a0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800c9aa:	79fb      	ldrb	r3, [r7, #7]
 800c9ac:	091b      	lsrs	r3, r3, #4
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	4413      	add	r3, r2
 800c9b8:	005b      	lsls	r3, r3, #1
 800c9ba:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	b2da      	uxtb	r2, r3
 800c9c0:	79fb      	ldrb	r3, [r7, #7]
 800c9c2:	f003 030f 	and.w	r3, r3, #15
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	4413      	add	r3, r2
 800c9ca:	b2db      	uxtb	r3, r3
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3714      	adds	r7, #20
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	4910      	ldr	r1, [pc, #64]	; (800ca2c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	689a      	ldr	r2, [r3, #8]
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	431a      	orrs	r2, r3
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	699b      	ldr	r3, [r3, #24]
 800c9fe:	490c      	ldr	r1, [pc, #48]	; (800ca30 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ca00:	4313      	orrs	r3, r2
 800ca02:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800ca04:	4b0a      	ldr	r3, [pc, #40]	; (800ca30 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ca06:	6a1b      	ldr	r3, [r3, #32]
 800ca08:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	6919      	ldr	r1, [r3, #16]
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	695b      	ldr	r3, [r3, #20]
 800ca14:	041b      	lsls	r3, r3, #16
 800ca16:	430b      	orrs	r3, r1
 800ca18:	4905      	ldr	r1, [pc, #20]	; (800ca30 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800ca1e:	2300      	movs	r3, #0
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	370c      	adds	r7, #12
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr
 800ca2c:	46007800 	.word	0x46007800
 800ca30:	46007c00 	.word	0x46007c00

0800ca34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d101      	bne.n	800ca46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ca42:	2301      	movs	r3, #1
 800ca44:	e049      	b.n	800cada <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d106      	bne.n	800ca60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7f5 ff36 	bl	80028cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2202      	movs	r2, #2
 800ca64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	3304      	adds	r3, #4
 800ca70:	4619      	mov	r1, r3
 800ca72:	4610      	mov	r0, r2
 800ca74:	f000 fbae 	bl	800d1d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2201      	movs	r2, #1
 800caac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2201      	movs	r2, #1
 800cab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2201      	movs	r2, #1
 800cabc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2201      	movs	r2, #1
 800cacc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2201      	movs	r2, #1
 800cad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cad8:	2300      	movs	r3, #0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3708      	adds	r7, #8
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
	...

0800cae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d001      	beq.n	800cafc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800caf8:	2301      	movs	r3, #1
 800cafa:	e072      	b.n	800cbe2 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2202      	movs	r2, #2
 800cb00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68da      	ldr	r2, [r3, #12]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f042 0201 	orr.w	r2, r2, #1
 800cb12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a35      	ldr	r2, [pc, #212]	; (800cbf0 <HAL_TIM_Base_Start_IT+0x10c>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d040      	beq.n	800cba0 <HAL_TIM_Base_Start_IT+0xbc>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	4a34      	ldr	r2, [pc, #208]	; (800cbf4 <HAL_TIM_Base_Start_IT+0x110>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d03b      	beq.n	800cba0 <HAL_TIM_Base_Start_IT+0xbc>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb30:	d036      	beq.n	800cba0 <HAL_TIM_Base_Start_IT+0xbc>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb3a:	d031      	beq.n	800cba0 <HAL_TIM_Base_Start_IT+0xbc>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a2d      	ldr	r2, [pc, #180]	; (800cbf8 <HAL_TIM_Base_Start_IT+0x114>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d02c      	beq.n	800cba0 <HAL_TIM_Base_Start_IT+0xbc>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4a2c      	ldr	r2, [pc, #176]	; (800cbfc <HAL_TIM_Base_Start_IT+0x118>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d027      	beq.n	800cba0 <HAL_TIM_Base_Start_IT+0xbc>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a2a      	ldr	r2, [pc, #168]	; (800cc00 <HAL_TIM_Base_Start_IT+0x11c>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d022      	beq.n	800cba0 <HAL_TIM_Base_Start_IT+0xbc>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4a29      	ldr	r2, [pc, #164]	; (800cc04 <HAL_TIM_Base_Start_IT+0x120>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d01d      	beq.n	800cba0 <HAL_TIM_Base_Start_IT+0xbc>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a27      	ldr	r2, [pc, #156]	; (800cc08 <HAL_TIM_Base_Start_IT+0x124>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d018      	beq.n	800cba0 <HAL_TIM_Base_Start_IT+0xbc>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4a26      	ldr	r2, [pc, #152]	; (800cc0c <HAL_TIM_Base_Start_IT+0x128>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d013      	beq.n	800cba0 <HAL_TIM_Base_Start_IT+0xbc>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a24      	ldr	r2, [pc, #144]	; (800cc10 <HAL_TIM_Base_Start_IT+0x12c>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d00e      	beq.n	800cba0 <HAL_TIM_Base_Start_IT+0xbc>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a23      	ldr	r2, [pc, #140]	; (800cc14 <HAL_TIM_Base_Start_IT+0x130>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d009      	beq.n	800cba0 <HAL_TIM_Base_Start_IT+0xbc>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a21      	ldr	r2, [pc, #132]	; (800cc18 <HAL_TIM_Base_Start_IT+0x134>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d004      	beq.n	800cba0 <HAL_TIM_Base_Start_IT+0xbc>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4a20      	ldr	r2, [pc, #128]	; (800cc1c <HAL_TIM_Base_Start_IT+0x138>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d115      	bne.n	800cbcc <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	689a      	ldr	r2, [r3, #8]
 800cba6:	4b1e      	ldr	r3, [pc, #120]	; (800cc20 <HAL_TIM_Base_Start_IT+0x13c>)
 800cba8:	4013      	ands	r3, r2
 800cbaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2b06      	cmp	r3, #6
 800cbb0:	d015      	beq.n	800cbde <HAL_TIM_Base_Start_IT+0xfa>
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbb8:	d011      	beq.n	800cbde <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f042 0201 	orr.w	r2, r2, #1
 800cbc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbca:	e008      	b.n	800cbde <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f042 0201 	orr.w	r2, r2, #1
 800cbda:	601a      	str	r2, [r3, #0]
 800cbdc:	e000      	b.n	800cbe0 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3714      	adds	r7, #20
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr
 800cbee:	bf00      	nop
 800cbf0:	40012c00 	.word	0x40012c00
 800cbf4:	50012c00 	.word	0x50012c00
 800cbf8:	40000400 	.word	0x40000400
 800cbfc:	50000400 	.word	0x50000400
 800cc00:	40000800 	.word	0x40000800
 800cc04:	50000800 	.word	0x50000800
 800cc08:	40000c00 	.word	0x40000c00
 800cc0c:	50000c00 	.word	0x50000c00
 800cc10:	40013400 	.word	0x40013400
 800cc14:	50013400 	.word	0x50013400
 800cc18:	40014000 	.word	0x40014000
 800cc1c:	50014000 	.word	0x50014000
 800cc20:	00010007 	.word	0x00010007

0800cc24 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	68da      	ldr	r2, [r3, #12]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f022 0201 	bic.w	r2, r2, #1
 800cc3a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	6a1a      	ldr	r2, [r3, #32]
 800cc42:	f241 1311 	movw	r3, #4369	; 0x1111
 800cc46:	4013      	ands	r3, r2
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10f      	bne.n	800cc6c <HAL_TIM_Base_Stop_IT+0x48>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	6a1a      	ldr	r2, [r3, #32]
 800cc52:	f244 4344 	movw	r3, #17476	; 0x4444
 800cc56:	4013      	ands	r3, r2
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d107      	bne.n	800cc6c <HAL_TIM_Base_Stop_IT+0x48>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f022 0201 	bic.w	r2, r2, #1
 800cc6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	370c      	adds	r7, #12
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr

0800cc82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b082      	sub	sp, #8
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	691b      	ldr	r3, [r3, #16]
 800cc90:	f003 0302 	and.w	r3, r3, #2
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d122      	bne.n	800ccde <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	f003 0302 	and.w	r3, r3, #2
 800cca2:	2b02      	cmp	r3, #2
 800cca4:	d11b      	bne.n	800ccde <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f06f 0202 	mvn.w	r2, #2
 800ccae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	699b      	ldr	r3, [r3, #24]
 800ccbc:	f003 0303 	and.w	r3, r3, #3
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d003      	beq.n	800cccc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 fa67 	bl	800d198 <HAL_TIM_IC_CaptureCallback>
 800ccca:	e005      	b.n	800ccd8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 fa59 	bl	800d184 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 fa6a 	bl	800d1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	691b      	ldr	r3, [r3, #16]
 800cce4:	f003 0304 	and.w	r3, r3, #4
 800cce8:	2b04      	cmp	r3, #4
 800ccea:	d122      	bne.n	800cd32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	f003 0304 	and.w	r3, r3, #4
 800ccf6:	2b04      	cmp	r3, #4
 800ccf8:	d11b      	bne.n	800cd32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f06f 0204 	mvn.w	r2, #4
 800cd02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2202      	movs	r2, #2
 800cd08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	699b      	ldr	r3, [r3, #24]
 800cd10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d003      	beq.n	800cd20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 fa3d 	bl	800d198 <HAL_TIM_IC_CaptureCallback>
 800cd1e:	e005      	b.n	800cd2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 fa2f 	bl	800d184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 fa40 	bl	800d1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	691b      	ldr	r3, [r3, #16]
 800cd38:	f003 0308 	and.w	r3, r3, #8
 800cd3c:	2b08      	cmp	r3, #8
 800cd3e:	d122      	bne.n	800cd86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	68db      	ldr	r3, [r3, #12]
 800cd46:	f003 0308 	and.w	r3, r3, #8
 800cd4a:	2b08      	cmp	r3, #8
 800cd4c:	d11b      	bne.n	800cd86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f06f 0208 	mvn.w	r2, #8
 800cd56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2204      	movs	r2, #4
 800cd5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	69db      	ldr	r3, [r3, #28]
 800cd64:	f003 0303 	and.w	r3, r3, #3
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d003      	beq.n	800cd74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f000 fa13 	bl	800d198 <HAL_TIM_IC_CaptureCallback>
 800cd72:	e005      	b.n	800cd80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 fa05 	bl	800d184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 fa16 	bl	800d1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	691b      	ldr	r3, [r3, #16]
 800cd8c:	f003 0310 	and.w	r3, r3, #16
 800cd90:	2b10      	cmp	r3, #16
 800cd92:	d122      	bne.n	800cdda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	f003 0310 	and.w	r3, r3, #16
 800cd9e:	2b10      	cmp	r3, #16
 800cda0:	d11b      	bne.n	800cdda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f06f 0210 	mvn.w	r2, #16
 800cdaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2208      	movs	r2, #8
 800cdb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	69db      	ldr	r3, [r3, #28]
 800cdb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d003      	beq.n	800cdc8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 f9e9 	bl	800d198 <HAL_TIM_IC_CaptureCallback>
 800cdc6:	e005      	b.n	800cdd4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 f9db 	bl	800d184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 f9ec 	bl	800d1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	f003 0301 	and.w	r3, r3, #1
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d10e      	bne.n	800ce06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	f003 0301 	and.w	r3, r3, #1
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d107      	bne.n	800ce06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f06f 0201 	mvn.w	r2, #1
 800cdfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7f4 f897 	bl	8000f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	691b      	ldr	r3, [r3, #16]
 800ce0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce10:	2b80      	cmp	r3, #128	; 0x80
 800ce12:	d10e      	bne.n	800ce32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce1e:	2b80      	cmp	r3, #128	; 0x80
 800ce20:	d107      	bne.n	800ce32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ce2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 fc33 	bl	800d698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	691b      	ldr	r3, [r3, #16]
 800ce38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce40:	d10e      	bne.n	800ce60 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce4c:	2b80      	cmp	r3, #128	; 0x80
 800ce4e:	d107      	bne.n	800ce60 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ce58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 fc26 	bl	800d6ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	691b      	ldr	r3, [r3, #16]
 800ce66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce6a:	2b40      	cmp	r3, #64	; 0x40
 800ce6c:	d10e      	bne.n	800ce8c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce78:	2b40      	cmp	r3, #64	; 0x40
 800ce7a:	d107      	bne.n	800ce8c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ce84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 f99a 	bl	800d1c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	691b      	ldr	r3, [r3, #16]
 800ce92:	f003 0320 	and.w	r3, r3, #32
 800ce96:	2b20      	cmp	r3, #32
 800ce98:	d10e      	bne.n	800ceb8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	f003 0320 	and.w	r3, r3, #32
 800cea4:	2b20      	cmp	r3, #32
 800cea6:	d107      	bne.n	800ceb8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f06f 0220 	mvn.w	r2, #32
 800ceb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 fbe6 	bl	800d684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cec6:	d10f      	bne.n	800cee8 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ced2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ced6:	d107      	bne.n	800cee8 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800cee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 fbec 	bl	800d6c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	691b      	ldr	r3, [r3, #16]
 800ceee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cef2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cef6:	d10f      	bne.n	800cf18 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cf02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cf06:	d107      	bne.n	800cf18 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800cf10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 fbde 	bl	800d6d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf26:	d10f      	bne.n	800cf48 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf36:	d107      	bne.n	800cf48 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800cf40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 fbd0 	bl	800d6e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cf56:	d10f      	bne.n	800cf78 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cf66:	d107      	bne.n	800cf78 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800cf70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 fbc2 	bl	800d6fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cf78:	bf00      	nop
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d101      	bne.n	800cf9c <HAL_TIM_ConfigClockSource+0x1c>
 800cf98:	2302      	movs	r3, #2
 800cf9a:	e0e6      	b.n	800d16a <HAL_TIM_ConfigClockSource+0x1ea>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2202      	movs	r2, #2
 800cfa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800cfba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cfbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cfc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	68ba      	ldr	r2, [r7, #8]
 800cfce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a67      	ldr	r2, [pc, #412]	; (800d174 <HAL_TIM_ConfigClockSource+0x1f4>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	f000 80b1 	beq.w	800d13e <HAL_TIM_ConfigClockSource+0x1be>
 800cfdc:	4a65      	ldr	r2, [pc, #404]	; (800d174 <HAL_TIM_ConfigClockSource+0x1f4>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	f200 80b6 	bhi.w	800d150 <HAL_TIM_ConfigClockSource+0x1d0>
 800cfe4:	4a64      	ldr	r2, [pc, #400]	; (800d178 <HAL_TIM_ConfigClockSource+0x1f8>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	f000 80a9 	beq.w	800d13e <HAL_TIM_ConfigClockSource+0x1be>
 800cfec:	4a62      	ldr	r2, [pc, #392]	; (800d178 <HAL_TIM_ConfigClockSource+0x1f8>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	f200 80ae 	bhi.w	800d150 <HAL_TIM_ConfigClockSource+0x1d0>
 800cff4:	4a61      	ldr	r2, [pc, #388]	; (800d17c <HAL_TIM_ConfigClockSource+0x1fc>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	f000 80a1 	beq.w	800d13e <HAL_TIM_ConfigClockSource+0x1be>
 800cffc:	4a5f      	ldr	r2, [pc, #380]	; (800d17c <HAL_TIM_ConfigClockSource+0x1fc>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	f200 80a6 	bhi.w	800d150 <HAL_TIM_ConfigClockSource+0x1d0>
 800d004:	4a5e      	ldr	r2, [pc, #376]	; (800d180 <HAL_TIM_ConfigClockSource+0x200>)
 800d006:	4293      	cmp	r3, r2
 800d008:	f000 8099 	beq.w	800d13e <HAL_TIM_ConfigClockSource+0x1be>
 800d00c:	4a5c      	ldr	r2, [pc, #368]	; (800d180 <HAL_TIM_ConfigClockSource+0x200>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	f200 809e 	bhi.w	800d150 <HAL_TIM_ConfigClockSource+0x1d0>
 800d014:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d018:	f000 8091 	beq.w	800d13e <HAL_TIM_ConfigClockSource+0x1be>
 800d01c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d020:	f200 8096 	bhi.w	800d150 <HAL_TIM_ConfigClockSource+0x1d0>
 800d024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d028:	f000 8089 	beq.w	800d13e <HAL_TIM_ConfigClockSource+0x1be>
 800d02c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d030:	f200 808e 	bhi.w	800d150 <HAL_TIM_ConfigClockSource+0x1d0>
 800d034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d038:	d03e      	beq.n	800d0b8 <HAL_TIM_ConfigClockSource+0x138>
 800d03a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d03e:	f200 8087 	bhi.w	800d150 <HAL_TIM_ConfigClockSource+0x1d0>
 800d042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d046:	f000 8086 	beq.w	800d156 <HAL_TIM_ConfigClockSource+0x1d6>
 800d04a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d04e:	d87f      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x1d0>
 800d050:	2b70      	cmp	r3, #112	; 0x70
 800d052:	d01a      	beq.n	800d08a <HAL_TIM_ConfigClockSource+0x10a>
 800d054:	2b70      	cmp	r3, #112	; 0x70
 800d056:	d87b      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x1d0>
 800d058:	2b60      	cmp	r3, #96	; 0x60
 800d05a:	d050      	beq.n	800d0fe <HAL_TIM_ConfigClockSource+0x17e>
 800d05c:	2b60      	cmp	r3, #96	; 0x60
 800d05e:	d877      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x1d0>
 800d060:	2b50      	cmp	r3, #80	; 0x50
 800d062:	d03c      	beq.n	800d0de <HAL_TIM_ConfigClockSource+0x15e>
 800d064:	2b50      	cmp	r3, #80	; 0x50
 800d066:	d873      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x1d0>
 800d068:	2b40      	cmp	r3, #64	; 0x40
 800d06a:	d058      	beq.n	800d11e <HAL_TIM_ConfigClockSource+0x19e>
 800d06c:	2b40      	cmp	r3, #64	; 0x40
 800d06e:	d86f      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x1d0>
 800d070:	2b30      	cmp	r3, #48	; 0x30
 800d072:	d064      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x1be>
 800d074:	2b30      	cmp	r3, #48	; 0x30
 800d076:	d86b      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x1d0>
 800d078:	2b20      	cmp	r3, #32
 800d07a:	d060      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x1be>
 800d07c:	2b20      	cmp	r3, #32
 800d07e:	d867      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x1d0>
 800d080:	2b00      	cmp	r3, #0
 800d082:	d05c      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x1be>
 800d084:	2b10      	cmp	r3, #16
 800d086:	d05a      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x1be>
 800d088:	e062      	b.n	800d150 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6818      	ldr	r0, [r3, #0]
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	6899      	ldr	r1, [r3, #8]
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	685a      	ldr	r2, [r3, #4]
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	f000 fa11 	bl	800d4c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	689b      	ldr	r3, [r3, #8]
 800d0a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d0ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	68ba      	ldr	r2, [r7, #8]
 800d0b4:	609a      	str	r2, [r3, #8]
      break;
 800d0b6:	e04f      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6818      	ldr	r0, [r3, #0]
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	6899      	ldr	r1, [r3, #8]
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	685a      	ldr	r2, [r3, #4]
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	f000 f9fa 	bl	800d4c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	689a      	ldr	r2, [r3, #8]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d0da:	609a      	str	r2, [r3, #8]
      break;
 800d0dc:	e03c      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6818      	ldr	r0, [r3, #0]
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	6859      	ldr	r1, [r3, #4]
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	f000 f96c 	bl	800d3c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2150      	movs	r1, #80	; 0x50
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f000 f9c5 	bl	800d486 <TIM_ITRx_SetConfig>
      break;
 800d0fc:	e02c      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6818      	ldr	r0, [r3, #0]
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	6859      	ldr	r1, [r3, #4]
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	461a      	mov	r2, r3
 800d10c:	f000 f98b 	bl	800d426 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2160      	movs	r1, #96	; 0x60
 800d116:	4618      	mov	r0, r3
 800d118:	f000 f9b5 	bl	800d486 <TIM_ITRx_SetConfig>
      break;
 800d11c:	e01c      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6818      	ldr	r0, [r3, #0]
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	6859      	ldr	r1, [r3, #4]
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	461a      	mov	r2, r3
 800d12c:	f000 f94c 	bl	800d3c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2140      	movs	r1, #64	; 0x40
 800d136:	4618      	mov	r0, r3
 800d138:	f000 f9a5 	bl	800d486 <TIM_ITRx_SetConfig>
      break;
 800d13c:	e00c      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4619      	mov	r1, r3
 800d148:	4610      	mov	r0, r2
 800d14a:	f000 f99c 	bl	800d486 <TIM_ITRx_SetConfig>
      break;
 800d14e:	e003      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	73fb      	strb	r3, [r7, #15]
      break;
 800d154:	e000      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800d156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d168:	7bfb      	ldrb	r3, [r7, #15]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	00100070 	.word	0x00100070
 800d178:	00100040 	.word	0x00100040
 800d17c:	00100030 	.word	0x00100030
 800d180:	00100020 	.word	0x00100020

0800d184 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d18c:	bf00      	nop
 800d18e:	370c      	adds	r7, #12
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d1a0:	bf00      	nop
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d1b4:	bf00      	nop
 800d1b6:	370c      	adds	r7, #12
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr

0800d1c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d1c8:	bf00      	nop
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b085      	sub	sp, #20
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	4a68      	ldr	r2, [pc, #416]	; (800d388 <TIM_Base_SetConfig+0x1b4>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d02b      	beq.n	800d244 <TIM_Base_SetConfig+0x70>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	4a67      	ldr	r2, [pc, #412]	; (800d38c <TIM_Base_SetConfig+0x1b8>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d027      	beq.n	800d244 <TIM_Base_SetConfig+0x70>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1fa:	d023      	beq.n	800d244 <TIM_Base_SetConfig+0x70>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d202:	d01f      	beq.n	800d244 <TIM_Base_SetConfig+0x70>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4a62      	ldr	r2, [pc, #392]	; (800d390 <TIM_Base_SetConfig+0x1bc>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d01b      	beq.n	800d244 <TIM_Base_SetConfig+0x70>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4a61      	ldr	r2, [pc, #388]	; (800d394 <TIM_Base_SetConfig+0x1c0>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d017      	beq.n	800d244 <TIM_Base_SetConfig+0x70>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	4a60      	ldr	r2, [pc, #384]	; (800d398 <TIM_Base_SetConfig+0x1c4>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d013      	beq.n	800d244 <TIM_Base_SetConfig+0x70>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a5f      	ldr	r2, [pc, #380]	; (800d39c <TIM_Base_SetConfig+0x1c8>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d00f      	beq.n	800d244 <TIM_Base_SetConfig+0x70>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4a5e      	ldr	r2, [pc, #376]	; (800d3a0 <TIM_Base_SetConfig+0x1cc>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d00b      	beq.n	800d244 <TIM_Base_SetConfig+0x70>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4a5d      	ldr	r2, [pc, #372]	; (800d3a4 <TIM_Base_SetConfig+0x1d0>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d007      	beq.n	800d244 <TIM_Base_SetConfig+0x70>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	4a5c      	ldr	r2, [pc, #368]	; (800d3a8 <TIM_Base_SetConfig+0x1d4>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d003      	beq.n	800d244 <TIM_Base_SetConfig+0x70>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	4a5b      	ldr	r2, [pc, #364]	; (800d3ac <TIM_Base_SetConfig+0x1d8>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d108      	bne.n	800d256 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d24a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	4313      	orrs	r3, r2
 800d254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	4a4b      	ldr	r2, [pc, #300]	; (800d388 <TIM_Base_SetConfig+0x1b4>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d043      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	4a4a      	ldr	r2, [pc, #296]	; (800d38c <TIM_Base_SetConfig+0x1b8>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d03f      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d26c:	d03b      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d274:	d037      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	4a45      	ldr	r2, [pc, #276]	; (800d390 <TIM_Base_SetConfig+0x1bc>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d033      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	4a44      	ldr	r2, [pc, #272]	; (800d394 <TIM_Base_SetConfig+0x1c0>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d02f      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	4a43      	ldr	r2, [pc, #268]	; (800d398 <TIM_Base_SetConfig+0x1c4>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d02b      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	4a42      	ldr	r2, [pc, #264]	; (800d39c <TIM_Base_SetConfig+0x1c8>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d027      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4a41      	ldr	r2, [pc, #260]	; (800d3a0 <TIM_Base_SetConfig+0x1cc>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d023      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4a40      	ldr	r2, [pc, #256]	; (800d3a4 <TIM_Base_SetConfig+0x1d0>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d01f      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4a3f      	ldr	r2, [pc, #252]	; (800d3a8 <TIM_Base_SetConfig+0x1d4>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d01b      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	4a3e      	ldr	r2, [pc, #248]	; (800d3ac <TIM_Base_SetConfig+0x1d8>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d017      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	4a3d      	ldr	r2, [pc, #244]	; (800d3b0 <TIM_Base_SetConfig+0x1dc>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d013      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4a3c      	ldr	r2, [pc, #240]	; (800d3b4 <TIM_Base_SetConfig+0x1e0>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d00f      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4a3b      	ldr	r2, [pc, #236]	; (800d3b8 <TIM_Base_SetConfig+0x1e4>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d00b      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4a3a      	ldr	r2, [pc, #232]	; (800d3bc <TIM_Base_SetConfig+0x1e8>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d007      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	4a39      	ldr	r2, [pc, #228]	; (800d3c0 <TIM_Base_SetConfig+0x1ec>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d003      	beq.n	800d2e6 <TIM_Base_SetConfig+0x112>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4a38      	ldr	r2, [pc, #224]	; (800d3c4 <TIM_Base_SetConfig+0x1f0>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d108      	bne.n	800d2f8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	68fa      	ldr	r2, [r7, #12]
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	695b      	ldr	r3, [r3, #20]
 800d302:	4313      	orrs	r3, r2
 800d304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	689a      	ldr	r2, [r3, #8]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	4a1a      	ldr	r2, [pc, #104]	; (800d388 <TIM_Base_SetConfig+0x1b4>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d023      	beq.n	800d36c <TIM_Base_SetConfig+0x198>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	4a19      	ldr	r2, [pc, #100]	; (800d38c <TIM_Base_SetConfig+0x1b8>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d01f      	beq.n	800d36c <TIM_Base_SetConfig+0x198>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	4a1e      	ldr	r2, [pc, #120]	; (800d3a8 <TIM_Base_SetConfig+0x1d4>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d01b      	beq.n	800d36c <TIM_Base_SetConfig+0x198>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4a1d      	ldr	r2, [pc, #116]	; (800d3ac <TIM_Base_SetConfig+0x1d8>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d017      	beq.n	800d36c <TIM_Base_SetConfig+0x198>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	4a1c      	ldr	r2, [pc, #112]	; (800d3b0 <TIM_Base_SetConfig+0x1dc>)
 800d340:	4293      	cmp	r3, r2
 800d342:	d013      	beq.n	800d36c <TIM_Base_SetConfig+0x198>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	4a1b      	ldr	r2, [pc, #108]	; (800d3b4 <TIM_Base_SetConfig+0x1e0>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d00f      	beq.n	800d36c <TIM_Base_SetConfig+0x198>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	4a1a      	ldr	r2, [pc, #104]	; (800d3b8 <TIM_Base_SetConfig+0x1e4>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d00b      	beq.n	800d36c <TIM_Base_SetConfig+0x198>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	4a19      	ldr	r2, [pc, #100]	; (800d3bc <TIM_Base_SetConfig+0x1e8>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d007      	beq.n	800d36c <TIM_Base_SetConfig+0x198>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4a18      	ldr	r2, [pc, #96]	; (800d3c0 <TIM_Base_SetConfig+0x1ec>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d003      	beq.n	800d36c <TIM_Base_SetConfig+0x198>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	4a17      	ldr	r2, [pc, #92]	; (800d3c4 <TIM_Base_SetConfig+0x1f0>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d103      	bne.n	800d374 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	691a      	ldr	r2, [r3, #16]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	615a      	str	r2, [r3, #20]
}
 800d37a:	bf00      	nop
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop
 800d388:	40012c00 	.word	0x40012c00
 800d38c:	50012c00 	.word	0x50012c00
 800d390:	40000400 	.word	0x40000400
 800d394:	50000400 	.word	0x50000400
 800d398:	40000800 	.word	0x40000800
 800d39c:	50000800 	.word	0x50000800
 800d3a0:	40000c00 	.word	0x40000c00
 800d3a4:	50000c00 	.word	0x50000c00
 800d3a8:	40013400 	.word	0x40013400
 800d3ac:	50013400 	.word	0x50013400
 800d3b0:	40014000 	.word	0x40014000
 800d3b4:	50014000 	.word	0x50014000
 800d3b8:	40014400 	.word	0x40014400
 800d3bc:	50014400 	.word	0x50014400
 800d3c0:	40014800 	.word	0x40014800
 800d3c4:	50014800 	.word	0x50014800

0800d3c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b087      	sub	sp, #28
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6a1b      	ldr	r3, [r3, #32]
 800d3d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	6a1b      	ldr	r3, [r3, #32]
 800d3de:	f023 0201 	bic.w	r2, r3, #1
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	699b      	ldr	r3, [r3, #24]
 800d3ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d3f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	011b      	lsls	r3, r3, #4
 800d3f8:	693a      	ldr	r2, [r7, #16]
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	f023 030a 	bic.w	r3, r3, #10
 800d404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d406:	697a      	ldr	r2, [r7, #20]
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	4313      	orrs	r3, r2
 800d40c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	693a      	ldr	r2, [r7, #16]
 800d412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	697a      	ldr	r2, [r7, #20]
 800d418:	621a      	str	r2, [r3, #32]
}
 800d41a:	bf00      	nop
 800d41c:	371c      	adds	r7, #28
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr

0800d426 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d426:	b480      	push	{r7}
 800d428:	b087      	sub	sp, #28
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	60f8      	str	r0, [r7, #12]
 800d42e:	60b9      	str	r1, [r7, #8]
 800d430:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	6a1b      	ldr	r3, [r3, #32]
 800d436:	f023 0210 	bic.w	r2, r3, #16
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	699b      	ldr	r3, [r3, #24]
 800d442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	6a1b      	ldr	r3, [r3, #32]
 800d448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	031b      	lsls	r3, r3, #12
 800d456:	697a      	ldr	r2, [r7, #20]
 800d458:	4313      	orrs	r3, r2
 800d45a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	011b      	lsls	r3, r3, #4
 800d468:	693a      	ldr	r2, [r7, #16]
 800d46a:	4313      	orrs	r3, r2
 800d46c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	697a      	ldr	r2, [r7, #20]
 800d472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	693a      	ldr	r2, [r7, #16]
 800d478:	621a      	str	r2, [r3, #32]
}
 800d47a:	bf00      	nop
 800d47c:	371c      	adds	r7, #28
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  *            @arg TIM_TS_ITR11: Internal Trigger 11
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d486:	b480      	push	{r7}
 800d488:	b085      	sub	sp, #20
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
 800d48e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d49c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d4a2:	683a      	ldr	r2, [r7, #0]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	f043 0307 	orr.w	r3, r3, #7
 800d4ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	68fa      	ldr	r2, [r7, #12]
 800d4b2:	609a      	str	r2, [r3, #8]
}
 800d4b4:	bf00      	nop
 800d4b6:	3714      	adds	r7, #20
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b087      	sub	sp, #28
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	607a      	str	r2, [r7, #4]
 800d4cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	689b      	ldr	r3, [r3, #8]
 800d4d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d4da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	021a      	lsls	r2, r3, #8
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	431a      	orrs	r2, r3
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	697a      	ldr	r2, [r7, #20]
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	697a      	ldr	r2, [r7, #20]
 800d4f2:	609a      	str	r2, [r3, #8]
}
 800d4f4:	bf00      	nop
 800d4f6:	371c      	adds	r7, #28
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d500:	b480      	push	{r7}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d510:	2b01      	cmp	r3, #1
 800d512:	d101      	bne.n	800d518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d514:	2302      	movs	r3, #2
 800d516:	e097      	b.n	800d648 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2201      	movs	r2, #1
 800d51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2202      	movs	r2, #2
 800d524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a45      	ldr	r2, [pc, #276]	; (800d654 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d00e      	beq.n	800d560 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4a44      	ldr	r2, [pc, #272]	; (800d658 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800d548:	4293      	cmp	r3, r2
 800d54a:	d009      	beq.n	800d560 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a42      	ldr	r2, [pc, #264]	; (800d65c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d004      	beq.n	800d560 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4a41      	ldr	r2, [pc, #260]	; (800d660 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d108      	bne.n	800d572 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d566:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	68fa      	ldr	r2, [r7, #12]
 800d56e:	4313      	orrs	r3, r2
 800d570:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d57c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	68fa      	ldr	r2, [r7, #12]
 800d584:	4313      	orrs	r3, r2
 800d586:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a2f      	ldr	r2, [pc, #188]	; (800d654 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d040      	beq.n	800d61c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4a2e      	ldr	r2, [pc, #184]	; (800d658 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d03b      	beq.n	800d61c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5ac:	d036      	beq.n	800d61c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d5b6:	d031      	beq.n	800d61c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4a29      	ldr	r2, [pc, #164]	; (800d664 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d02c      	beq.n	800d61c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a28      	ldr	r2, [pc, #160]	; (800d668 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d027      	beq.n	800d61c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a26      	ldr	r2, [pc, #152]	; (800d66c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d022      	beq.n	800d61c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a25      	ldr	r2, [pc, #148]	; (800d670 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d01d      	beq.n	800d61c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a23      	ldr	r2, [pc, #140]	; (800d674 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d018      	beq.n	800d61c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4a22      	ldr	r2, [pc, #136]	; (800d678 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d013      	beq.n	800d61c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4a18      	ldr	r2, [pc, #96]	; (800d65c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d00e      	beq.n	800d61c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	4a17      	ldr	r2, [pc, #92]	; (800d660 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800d604:	4293      	cmp	r3, r2
 800d606:	d009      	beq.n	800d61c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4a1b      	ldr	r2, [pc, #108]	; (800d67c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d004      	beq.n	800d61c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a1a      	ldr	r2, [pc, #104]	; (800d680 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d10c      	bne.n	800d636 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d622:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	68ba      	ldr	r2, [r7, #8]
 800d62a:	4313      	orrs	r3, r2
 800d62c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68ba      	ldr	r2, [r7, #8]
 800d634:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2201      	movs	r2, #1
 800d63a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3714      	adds	r7, #20
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr
 800d654:	40012c00 	.word	0x40012c00
 800d658:	50012c00 	.word	0x50012c00
 800d65c:	40013400 	.word	0x40013400
 800d660:	50013400 	.word	0x50013400
 800d664:	40000400 	.word	0x40000400
 800d668:	50000400 	.word	0x50000400
 800d66c:	40000800 	.word	0x40000800
 800d670:	50000800 	.word	0x50000800
 800d674:	40000c00 	.word	0x40000c00
 800d678:	50000c00 	.word	0x50000c00
 800d67c:	40014000 	.word	0x40014000
 800d680:	50014000 	.word	0x50014000

0800d684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d68c:	bf00      	nop
 800d68e:	370c      	adds	r7, #12
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d698:	b480      	push	{r7}
 800d69a:	b083      	sub	sp, #12
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d6a0:	bf00      	nop
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d6b4:	bf00      	nop
 800d6b6:	370c      	adds	r7, #12
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr

0800d6c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d6c8:	bf00      	nop
 800d6ca:	370c      	adds	r7, #12
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr

0800d6d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d6dc:	bf00      	nop
 800d6de:	370c      	adds	r7, #12
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b083      	sub	sp, #12
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d6f0:	bf00      	nop
 800d6f2:	370c      	adds	r7, #12
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr

0800d6fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b083      	sub	sp, #12
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d704:	bf00      	nop
 800d706:	370c      	adds	r7, #12
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr

0800d710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d101      	bne.n	800d722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d71e:	2301      	movs	r3, #1
 800d720:	e042      	b.n	800d7a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d106      	bne.n	800d73a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7f5 f93d 	bl	80029b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2224      	movs	r2, #36	; 0x24
 800d73e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f022 0201 	bic.w	r2, r2, #1
 800d750:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 f94a 	bl	800d9ec <UART_SetConfig>
 800d758:	4603      	mov	r3, r0
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d101      	bne.n	800d762 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d75e:	2301      	movs	r3, #1
 800d760:	e022      	b.n	800d7a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d766:	2b00      	cmp	r3, #0
 800d768:	d002      	beq.n	800d770 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 fac0 	bl	800dcf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	685a      	ldr	r2, [r3, #4]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d77e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	689a      	ldr	r2, [r3, #8]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d78e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f042 0201 	orr.w	r2, r2, #1
 800d79e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 fb47 	bl	800de34 <UART_CheckIdleState>
 800d7a6:	4603      	mov	r3, r0
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b08a      	sub	sp, #40	; 0x28
 800d7b4:	af02      	add	r7, sp, #8
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	603b      	str	r3, [r7, #0]
 800d7bc:	4613      	mov	r3, r2
 800d7be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7c6:	2b20      	cmp	r3, #32
 800d7c8:	f040 8083 	bne.w	800d8d2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d002      	beq.n	800d7d8 <HAL_UART_Transmit+0x28>
 800d7d2:	88fb      	ldrh	r3, [r7, #6]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d101      	bne.n	800d7dc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e07b      	b.n	800d8d4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d101      	bne.n	800d7ea <HAL_UART_Transmit+0x3a>
 800d7e6:	2302      	movs	r3, #2
 800d7e8:	e074      	b.n	800d8d4 <HAL_UART_Transmit+0x124>
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2221      	movs	r2, #33	; 0x21
 800d7fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d802:	f7f9 f869 	bl	80068d8 <HAL_GetTick>
 800d806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	88fa      	ldrh	r2, [r7, #6]
 800d80c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	88fa      	ldrh	r2, [r7, #6]
 800d814:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	689b      	ldr	r3, [r3, #8]
 800d81c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d820:	d108      	bne.n	800d834 <HAL_UART_Transmit+0x84>
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	691b      	ldr	r3, [r3, #16]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d104      	bne.n	800d834 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d82a:	2300      	movs	r3, #0
 800d82c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	61bb      	str	r3, [r7, #24]
 800d832:	e003      	b.n	800d83c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d838:	2300      	movs	r3, #0
 800d83a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2200      	movs	r2, #0
 800d840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d844:	e02c      	b.n	800d8a0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	9300      	str	r3, [sp, #0]
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	2200      	movs	r2, #0
 800d84e:	2180      	movs	r1, #128	; 0x80
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f000 fb3a 	bl	800deca <UART_WaitOnFlagUntilTimeout>
 800d856:	4603      	mov	r3, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d001      	beq.n	800d860 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d85c:	2303      	movs	r3, #3
 800d85e:	e039      	b.n	800d8d4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d10b      	bne.n	800d87e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	881b      	ldrh	r3, [r3, #0]
 800d86a:	461a      	mov	r2, r3
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d874:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d876:	69bb      	ldr	r3, [r7, #24]
 800d878:	3302      	adds	r3, #2
 800d87a:	61bb      	str	r3, [r7, #24]
 800d87c:	e007      	b.n	800d88e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	781a      	ldrb	r2, [r3, #0]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	3301      	adds	r3, #1
 800d88c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d894:	b29b      	uxth	r3, r3
 800d896:	3b01      	subs	r3, #1
 800d898:	b29a      	uxth	r2, r3
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d1cc      	bne.n	800d846 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	2140      	movs	r1, #64	; 0x40
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	f000 fb07 	bl	800deca <UART_WaitOnFlagUntilTimeout>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d001      	beq.n	800d8c6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d8c2:	2303      	movs	r3, #3
 800d8c4:	e006      	b.n	800d8d4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2220      	movs	r2, #32
 800d8ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	e000      	b.n	800d8d4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d8d2:	2302      	movs	r3, #2
  }
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3720      	adds	r7, #32
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b08a      	sub	sp, #40	; 0x28
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	60f8      	str	r0, [r7, #12]
 800d8e4:	60b9      	str	r1, [r7, #8]
 800d8e6:	4613      	mov	r3, r2
 800d8e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8f0:	2b20      	cmp	r3, #32
 800d8f2:	d147      	bne.n	800d984 <HAL_UART_Receive_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d002      	beq.n	800d900 <HAL_UART_Receive_DMA+0x24>
 800d8fa:	88fb      	ldrh	r3, [r7, #6]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d101      	bne.n	800d904 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d900:	2301      	movs	r3, #1
 800d902:	e040      	b.n	800d986 <HAL_UART_Receive_DMA+0xaa>
    }

    __HAL_LOCK(huart);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d101      	bne.n	800d912 <HAL_UART_Receive_DMA+0x36>
 800d90e:	2302      	movs	r3, #2
 800d910:	e039      	b.n	800d986 <HAL_UART_Receive_DMA+0xaa>
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2201      	movs	r2, #1
 800d916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2200      	movs	r2, #0
 800d91e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a1a      	ldr	r2, [pc, #104]	; (800d990 <HAL_UART_Receive_DMA+0xb4>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d024      	beq.n	800d974 <HAL_UART_Receive_DMA+0x98>
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4a19      	ldr	r2, [pc, #100]	; (800d994 <HAL_UART_Receive_DMA+0xb8>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d01f      	beq.n	800d974 <HAL_UART_Receive_DMA+0x98>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d018      	beq.n	800d974 <HAL_UART_Receive_DMA+0x98>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	e853 3f00 	ldrex	r3, [r3]
 800d94e:	613b      	str	r3, [r7, #16]
   return(result);
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d956:	627b      	str	r3, [r7, #36]	; 0x24
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	461a      	mov	r2, r3
 800d95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d960:	623b      	str	r3, [r7, #32]
 800d962:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d964:	69f9      	ldr	r1, [r7, #28]
 800d966:	6a3a      	ldr	r2, [r7, #32]
 800d968:	e841 2300 	strex	r3, r2, [r1]
 800d96c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d96e:	69bb      	ldr	r3, [r7, #24]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d1e6      	bne.n	800d942 <HAL_UART_Receive_DMA+0x66>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d974:	88fb      	ldrh	r3, [r7, #6]
 800d976:	461a      	mov	r2, r3
 800d978:	68b9      	ldr	r1, [r7, #8]
 800d97a:	68f8      	ldr	r0, [r7, #12]
 800d97c:	f000 fb6e 	bl	800e05c <UART_Start_Receive_DMA>
 800d980:	4603      	mov	r3, r0
 800d982:	e000      	b.n	800d986 <HAL_UART_Receive_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800d984:	2302      	movs	r3, #2
  }
}
 800d986:	4618      	mov	r0, r3
 800d988:	3728      	adds	r7, #40	; 0x28
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	46002400 	.word	0x46002400
 800d994:	56002400 	.word	0x56002400

0800d998 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d998:	b480      	push	{r7}
 800d99a:	b083      	sub	sp, #12
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d9a0:	bf00      	nop
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d9b4:	bf00      	nop
 800d9b6:	370c      	adds	r7, #12
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b083      	sub	sp, #12
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d9c8:	bf00      	nop
 800d9ca:	370c      	adds	r7, #12
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	460b      	mov	r3, r1
 800d9de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d9e0:	bf00      	nop
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d9ec:	b5b0      	push	{r4, r5, r7, lr}
 800d9ee:	b08a      	sub	sp, #40	; 0x28
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	77fb      	strb	r3, [r7, #31]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4a94      	ldr	r2, [pc, #592]	; (800dc50 <UART_SetConfig+0x264>)
 800d9fe:	4293      	cmp	r3, r2
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	689a      	ldr	r2, [r3, #8]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	691b      	ldr	r3, [r3, #16]
 800da08:	431a      	orrs	r2, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	695b      	ldr	r3, [r3, #20]
 800da0e:	431a      	orrs	r2, r3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	69db      	ldr	r3, [r3, #28]
 800da14:	4313      	orrs	r3, r2
 800da16:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	4b8d      	ldr	r3, [pc, #564]	; (800dc54 <UART_SetConfig+0x268>)
 800da20:	4013      	ands	r3, r2
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	6812      	ldr	r2, [r2, #0]
 800da26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da28:	430b      	orrs	r3, r1
 800da2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	68da      	ldr	r2, [r3, #12]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	430a      	orrs	r2, r1
 800da40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	699b      	ldr	r3, [r3, #24]
 800da46:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4a80      	ldr	r2, [pc, #512]	; (800dc50 <UART_SetConfig+0x264>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d009      	beq.n	800da66 <UART_SetConfig+0x7a>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a80      	ldr	r2, [pc, #512]	; (800dc58 <UART_SetConfig+0x26c>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d004      	beq.n	800da66 <UART_SetConfig+0x7a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6a1b      	ldr	r3, [r3, #32]
 800da60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da62:	4313      	orrs	r3, r2
 800da64:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	689b      	ldr	r3, [r3, #8]
 800da6c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800da70:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	6812      	ldr	r2, [r2, #0]
 800da78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da7a:	430b      	orrs	r3, r1
 800da7c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da84:	f023 010f 	bic.w	r1, r3, #15
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	430a      	orrs	r2, r1
 800da92:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4a70      	ldr	r2, [pc, #448]	; (800dc5c <UART_SetConfig+0x270>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d102      	bne.n	800daa4 <UART_SetConfig+0xb8>
 800da9e:	2301      	movs	r3, #1
 800daa0:	623b      	str	r3, [r7, #32]
 800daa2:	e029      	b.n	800daf8 <UART_SetConfig+0x10c>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a6d      	ldr	r2, [pc, #436]	; (800dc60 <UART_SetConfig+0x274>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d102      	bne.n	800dab4 <UART_SetConfig+0xc8>
 800daae:	2302      	movs	r3, #2
 800dab0:	623b      	str	r3, [r7, #32]
 800dab2:	e021      	b.n	800daf8 <UART_SetConfig+0x10c>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a6a      	ldr	r2, [pc, #424]	; (800dc64 <UART_SetConfig+0x278>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d102      	bne.n	800dac4 <UART_SetConfig+0xd8>
 800dabe:	2304      	movs	r3, #4
 800dac0:	623b      	str	r3, [r7, #32]
 800dac2:	e019      	b.n	800daf8 <UART_SetConfig+0x10c>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a67      	ldr	r2, [pc, #412]	; (800dc68 <UART_SetConfig+0x27c>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d102      	bne.n	800dad4 <UART_SetConfig+0xe8>
 800dace:	2308      	movs	r3, #8
 800dad0:	623b      	str	r3, [r7, #32]
 800dad2:	e011      	b.n	800daf8 <UART_SetConfig+0x10c>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4a64      	ldr	r2, [pc, #400]	; (800dc6c <UART_SetConfig+0x280>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d102      	bne.n	800dae4 <UART_SetConfig+0xf8>
 800dade:	2310      	movs	r3, #16
 800dae0:	623b      	str	r3, [r7, #32]
 800dae2:	e009      	b.n	800daf8 <UART_SetConfig+0x10c>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a59      	ldr	r2, [pc, #356]	; (800dc50 <UART_SetConfig+0x264>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d102      	bne.n	800daf4 <UART_SetConfig+0x108>
 800daee:	2320      	movs	r3, #32
 800daf0:	623b      	str	r3, [r7, #32]
 800daf2:	e001      	b.n	800daf8 <UART_SetConfig+0x10c>
 800daf4:	2300      	movs	r3, #0
 800daf6:	623b      	str	r3, [r7, #32]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a54      	ldr	r2, [pc, #336]	; (800dc50 <UART_SetConfig+0x264>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d004      	beq.n	800db0c <UART_SetConfig+0x120>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a54      	ldr	r2, [pc, #336]	; (800dc58 <UART_SetConfig+0x26c>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d163      	bne.n	800dbd4 <UART_SetConfig+0x1e8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800db0c:	6a38      	ldr	r0, [r7, #32]
 800db0e:	f7fd fa1f 	bl	800af50 <HAL_RCCEx_GetPeriphCLKFreq>
 800db12:	61b8      	str	r0, [r7, #24]

    /* If proper clock source reported */
    if (pclk != 0U)
 800db14:	69bb      	ldr	r3, [r7, #24]
 800db16:	2b00      	cmp	r3, #0
 800db18:	f000 80d4 	beq.w	800dcc4 <UART_SetConfig+0x2d8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db20:	4a53      	ldr	r2, [pc, #332]	; (800dc70 <UART_SetConfig+0x284>)
 800db22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db26:	461a      	mov	r2, r3
 800db28:	69bb      	ldr	r3, [r7, #24]
 800db2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800db2e:	60fb      	str	r3, [r7, #12]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	685a      	ldr	r2, [r3, #4]
 800db34:	4613      	mov	r3, r2
 800db36:	005b      	lsls	r3, r3, #1
 800db38:	4413      	add	r3, r2
 800db3a:	68fa      	ldr	r2, [r7, #12]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d305      	bcc.n	800db4c <UART_SetConfig+0x160>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800db46:	68fa      	ldr	r2, [r7, #12]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d902      	bls.n	800db52 <UART_SetConfig+0x166>
      {
        ret = HAL_ERROR;
 800db4c:	2301      	movs	r3, #1
 800db4e:	77fb      	strb	r3, [r7, #31]
 800db50:	e03f      	b.n	800dbd2 <UART_SetConfig+0x1e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	4618      	mov	r0, r3
 800db56:	f04f 0100 	mov.w	r1, #0
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db5e:	4a44      	ldr	r2, [pc, #272]	; (800dc70 <UART_SetConfig+0x284>)
 800db60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db64:	b29a      	uxth	r2, r3
 800db66:	f04f 0300 	mov.w	r3, #0
 800db6a:	f7f3 f849 	bl	8000c00 <__aeabi_uldivmod>
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	4610      	mov	r0, r2
 800db74:	4619      	mov	r1, r3
 800db76:	f04f 0200 	mov.w	r2, #0
 800db7a:	f04f 0300 	mov.w	r3, #0
 800db7e:	020b      	lsls	r3, r1, #8
 800db80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800db84:	0202      	lsls	r2, r0, #8
 800db86:	6879      	ldr	r1, [r7, #4]
 800db88:	6849      	ldr	r1, [r1, #4]
 800db8a:	0849      	lsrs	r1, r1, #1
 800db8c:	4608      	mov	r0, r1
 800db8e:	f04f 0100 	mov.w	r1, #0
 800db92:	1814      	adds	r4, r2, r0
 800db94:	eb43 0501 	adc.w	r5, r3, r1
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	461a      	mov	r2, r3
 800db9e:	f04f 0300 	mov.w	r3, #0
 800dba2:	4620      	mov	r0, r4
 800dba4:	4629      	mov	r1, r5
 800dba6:	f7f3 f82b 	bl	8000c00 <__aeabi_uldivmod>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	460b      	mov	r3, r1
 800dbae:	4613      	mov	r3, r2
 800dbb0:	617b      	str	r3, [r7, #20]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dbb8:	d308      	bcc.n	800dbcc <UART_SetConfig+0x1e0>
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbc0:	d204      	bcs.n	800dbcc <UART_SetConfig+0x1e0>
        {
          huart->Instance->BRR = usartdiv;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	697a      	ldr	r2, [r7, #20]
 800dbc8:	60da      	str	r2, [r3, #12]
 800dbca:	e002      	b.n	800dbd2 <UART_SetConfig+0x1e6>
        }
        else
        {
          ret = HAL_ERROR;
 800dbcc:	2301      	movs	r3, #1
 800dbce:	77fb      	strb	r3, [r7, #31]
    if (pclk != 0U)
 800dbd0:	e078      	b.n	800dcc4 <UART_SetConfig+0x2d8>
 800dbd2:	e077      	b.n	800dcc4 <UART_SetConfig+0x2d8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	69db      	ldr	r3, [r3, #28]
 800dbd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dbdc:	d14a      	bne.n	800dc74 <UART_SetConfig+0x288>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800dbde:	6a38      	ldr	r0, [r7, #32]
 800dbe0:	f7fd f9b6 	bl	800af50 <HAL_RCCEx_GetPeriphCLKFreq>
 800dbe4:	61b8      	str	r0, [r7, #24]

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dbe6:	69bb      	ldr	r3, [r7, #24]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d06b      	beq.n	800dcc4 <UART_SetConfig+0x2d8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf0:	4a1f      	ldr	r2, [pc, #124]	; (800dc70 <UART_SetConfig+0x284>)
 800dbf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbfe:	005a      	lsls	r2, r3, #1
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	085b      	lsrs	r3, r3, #1
 800dc06:	441a      	add	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	685b      	ldr	r3, [r3, #4]
 800dc0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	617b      	str	r3, [r7, #20]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	2b0f      	cmp	r3, #15
 800dc18:	d916      	bls.n	800dc48 <UART_SetConfig+0x25c>
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc20:	d212      	bcs.n	800dc48 <UART_SetConfig+0x25c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	f023 030f 	bic.w	r3, r3, #15
 800dc2a:	827b      	strh	r3, [r7, #18]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	085b      	lsrs	r3, r3, #1
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	f003 0307 	and.w	r3, r3, #7
 800dc36:	b29a      	uxth	r2, r3
 800dc38:	8a7b      	ldrh	r3, [r7, #18]
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	827b      	strh	r3, [r7, #18]
        huart->Instance->BRR = brrtemp;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	8a7a      	ldrh	r2, [r7, #18]
 800dc44:	60da      	str	r2, [r3, #12]
 800dc46:	e03d      	b.n	800dcc4 <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 800dc48:	2301      	movs	r3, #1
 800dc4a:	77fb      	strb	r3, [r7, #31]
 800dc4c:	e03a      	b.n	800dcc4 <UART_SetConfig+0x2d8>
 800dc4e:	bf00      	nop
 800dc50:	46002400 	.word	0x46002400
 800dc54:	cfff69f3 	.word	0xcfff69f3
 800dc58:	56002400 	.word	0x56002400
 800dc5c:	40013800 	.word	0x40013800
 800dc60:	40004400 	.word	0x40004400
 800dc64:	40004800 	.word	0x40004800
 800dc68:	40004c00 	.word	0x40004c00
 800dc6c:	40005000 	.word	0x40005000
 800dc70:	0801b2c4 	.word	0x0801b2c4
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800dc74:	6a38      	ldr	r0, [r7, #32]
 800dc76:	f7fd f96b 	bl	800af50 <HAL_RCCEx_GetPeriphCLKFreq>
 800dc7a:	61b8      	str	r0, [r7, #24]

    if (pclk != 0U)
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d020      	beq.n	800dcc4 <UART_SetConfig+0x2d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc86:	4a19      	ldr	r2, [pc, #100]	; (800dcec <UART_SetConfig+0x300>)
 800dc88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	fbb3 f2f2 	udiv	r2, r3, r2
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	085b      	lsrs	r3, r3, #1
 800dc9a:	441a      	add	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	617b      	str	r3, [r7, #20]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	2b0f      	cmp	r3, #15
 800dcac:	d908      	bls.n	800dcc0 <UART_SetConfig+0x2d4>
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcb4:	d204      	bcs.n	800dcc0 <UART_SetConfig+0x2d4>
      {
        huart->Instance->BRR = usartdiv;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	697a      	ldr	r2, [r7, #20]
 800dcbc:	60da      	str	r2, [r3, #12]
 800dcbe:	e001      	b.n	800dcc4 <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	77fb      	strb	r3, [r7, #31]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dce0:	7ffb      	ldrb	r3, [r7, #31]
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3728      	adds	r7, #40	; 0x28
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bdb0      	pop	{r4, r5, r7, pc}
 800dcea:	bf00      	nop
 800dcec:	0801b2c4 	.word	0x0801b2c4

0800dcf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcfc:	f003 0301 	and.w	r3, r3, #1
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d00a      	beq.n	800dd1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	430a      	orrs	r2, r1
 800dd18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd1e:	f003 0302 	and.w	r3, r3, #2
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d00a      	beq.n	800dd3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	430a      	orrs	r2, r1
 800dd3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd40:	f003 0304 	and.w	r3, r3, #4
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d00a      	beq.n	800dd5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	430a      	orrs	r2, r1
 800dd5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd62:	f003 0308 	and.w	r3, r3, #8
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d00a      	beq.n	800dd80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	430a      	orrs	r2, r1
 800dd7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd84:	f003 0310 	and.w	r3, r3, #16
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00a      	beq.n	800dda2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	689b      	ldr	r3, [r3, #8]
 800dd92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	430a      	orrs	r2, r1
 800dda0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dda6:	f003 0320 	and.w	r3, r3, #32
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00a      	beq.n	800ddc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	689b      	ldr	r3, [r3, #8]
 800ddb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	430a      	orrs	r2, r1
 800ddc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d01a      	beq.n	800de06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	430a      	orrs	r2, r1
 800dde4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ddee:	d10a      	bne.n	800de06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	430a      	orrs	r2, r1
 800de04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d00a      	beq.n	800de28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	430a      	orrs	r2, r1
 800de26:	605a      	str	r2, [r3, #4]
  }
}
 800de28:	bf00      	nop
 800de2a:	370c      	adds	r7, #12
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr

0800de34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b086      	sub	sp, #24
 800de38:	af02      	add	r7, sp, #8
 800de3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2200      	movs	r2, #0
 800de40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800de44:	f7f8 fd48 	bl	80068d8 <HAL_GetTick>
 800de48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f003 0308 	and.w	r3, r3, #8
 800de54:	2b08      	cmp	r3, #8
 800de56:	d10e      	bne.n	800de76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2200      	movs	r2, #0
 800de62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 f82f 	bl	800deca <UART_WaitOnFlagUntilTimeout>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d001      	beq.n	800de76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de72:	2303      	movs	r3, #3
 800de74:	e025      	b.n	800dec2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f003 0304 	and.w	r3, r3, #4
 800de80:	2b04      	cmp	r3, #4
 800de82:	d10e      	bne.n	800dea2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de88:	9300      	str	r3, [sp, #0]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2200      	movs	r2, #0
 800de8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 f819 	bl	800deca <UART_WaitOnFlagUntilTimeout>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d001      	beq.n	800dea2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de9e:	2303      	movs	r3, #3
 800dea0:	e00f      	b.n	800dec2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2220      	movs	r2, #32
 800dea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2220      	movs	r2, #32
 800deae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2200      	movs	r2, #0
 800deb6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2200      	movs	r2, #0
 800debc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dec0:	2300      	movs	r3, #0
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3710      	adds	r7, #16
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}

0800deca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800deca:	b580      	push	{r7, lr}
 800decc:	b09c      	sub	sp, #112	; 0x70
 800dece:	af00      	add	r7, sp, #0
 800ded0:	60f8      	str	r0, [r7, #12]
 800ded2:	60b9      	str	r1, [r7, #8]
 800ded4:	603b      	str	r3, [r7, #0]
 800ded6:	4613      	mov	r3, r2
 800ded8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800deda:	e0a9      	b.n	800e030 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dedc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dee2:	f000 80a5 	beq.w	800e030 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dee6:	f7f8 fcf7 	bl	80068d8 <HAL_GetTick>
 800deea:	4602      	mov	r2, r0
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	1ad3      	subs	r3, r2, r3
 800def0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800def2:	429a      	cmp	r2, r3
 800def4:	d302      	bcc.n	800defc <UART_WaitOnFlagUntilTimeout+0x32>
 800def6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800def8:	2b00      	cmp	r3, #0
 800defa:	d140      	bne.n	800df7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df04:	e853 3f00 	ldrex	r3, [r3]
 800df08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800df0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800df10:	667b      	str	r3, [r7, #100]	; 0x64
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	461a      	mov	r2, r3
 800df18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df1c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800df22:	e841 2300 	strex	r3, r2, [r1]
 800df26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800df28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d1e6      	bne.n	800defc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	3308      	adds	r3, #8
 800df34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df38:	e853 3f00 	ldrex	r3, [r3]
 800df3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df40:	f023 0301 	bic.w	r3, r3, #1
 800df44:	663b      	str	r3, [r7, #96]	; 0x60
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	3308      	adds	r3, #8
 800df4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df4e:	64ba      	str	r2, [r7, #72]	; 0x48
 800df50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df56:	e841 2300 	strex	r3, r2, [r1]
 800df5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800df5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d1e5      	bne.n	800df2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2220      	movs	r2, #32
 800df66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2220      	movs	r2, #32
 800df6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2200      	movs	r2, #0
 800df76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800df7a:	2303      	movs	r3, #3
 800df7c:	e069      	b.n	800e052 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f003 0304 	and.w	r3, r3, #4
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d051      	beq.n	800e030 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	69db      	ldr	r3, [r3, #28]
 800df92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df9a:	d149      	bne.n	800e030 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dfa4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfae:	e853 3f00 	ldrex	r3, [r3]
 800dfb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dfba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfc4:	637b      	str	r3, [r7, #52]	; 0x34
 800dfc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dfca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfcc:	e841 2300 	strex	r3, r2, [r1]
 800dfd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d1e6      	bne.n	800dfa6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	3308      	adds	r3, #8
 800dfde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	e853 3f00 	ldrex	r3, [r3]
 800dfe6:	613b      	str	r3, [r7, #16]
   return(result);
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	f023 0301 	bic.w	r3, r3, #1
 800dfee:	66bb      	str	r3, [r7, #104]	; 0x68
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	3308      	adds	r3, #8
 800dff6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dff8:	623a      	str	r2, [r7, #32]
 800dffa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dffc:	69f9      	ldr	r1, [r7, #28]
 800dffe:	6a3a      	ldr	r2, [r7, #32]
 800e000:	e841 2300 	strex	r3, r2, [r1]
 800e004:	61bb      	str	r3, [r7, #24]
   return(result);
 800e006:	69bb      	ldr	r3, [r7, #24]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1e5      	bne.n	800dfd8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2220      	movs	r2, #32
 800e010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	2220      	movs	r2, #32
 800e018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	2220      	movs	r2, #32
 800e020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	2200      	movs	r2, #0
 800e028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e02c:	2303      	movs	r3, #3
 800e02e:	e010      	b.n	800e052 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	69da      	ldr	r2, [r3, #28]
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	4013      	ands	r3, r2
 800e03a:	68ba      	ldr	r2, [r7, #8]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	bf0c      	ite	eq
 800e040:	2301      	moveq	r3, #1
 800e042:	2300      	movne	r3, #0
 800e044:	b2db      	uxtb	r3, r3
 800e046:	461a      	mov	r2, r3
 800e048:	79fb      	ldrb	r3, [r7, #7]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	f43f af46 	beq.w	800dedc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e050:	2300      	movs	r3, #0
}
 800e052:	4618      	mov	r0, r3
 800e054:	3770      	adds	r7, #112	; 0x70
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
	...

0800e05c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b098      	sub	sp, #96	; 0x60
 800e060:	af00      	add	r7, sp, #0
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	60b9      	str	r1, [r7, #8]
 800e066:	4613      	mov	r3, r2
 800e068:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800e06a:	88fb      	ldrh	r3, [r7, #6]
 800e06c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

  huart->pRxBuffPtr = pData;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	68ba      	ldr	r2, [r7, #8]
 800e074:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	88fa      	ldrh	r2, [r7, #6]
 800e07a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2200      	movs	r2, #0
 800e082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2222      	movs	r2, #34	; 0x22
 800e08a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e092:	2b00      	cmp	r3, #0
 800e094:	d074      	beq.n	800e180 <UART_Start_Receive_DMA+0x124>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e09a:	4a64      	ldr	r2, [pc, #400]	; (800e22c <UART_Start_Receive_DMA+0x1d0>)
 800e09c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0a2:	4a63      	ldr	r2, [pc, #396]	; (800e230 <UART_Start_Receive_DMA+0x1d4>)
 800e0a4:	665a      	str	r2, [r3, #100]	; 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0aa:	4a62      	ldr	r2, [pc, #392]	; (800e234 <UART_Start_Receive_DMA+0x1d8>)
 800e0ac:	669a      	str	r2, [r3, #104]	; 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	689b      	ldr	r3, [r3, #8]
 800e0ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0be:	d107      	bne.n	800e0d0 <UART_Start_Receive_DMA+0x74>
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	691b      	ldr	r3, [r3, #16]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d103      	bne.n	800e0d0 <UART_Start_Receive_DMA+0x74>
    {
      nbByte = Size * 2U;
 800e0c8:	88fb      	ldrh	r3, [r7, #6]
 800e0ca:	005b      	lsls	r3, r3, #1
 800e0cc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d02e      	beq.n	800e13c <UART_Start_Receive_DMA+0xe0>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d025      	beq.n	800e134 <UART_Start_Receive_DMA+0xd8>
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d01f      	beq.n	800e134 <UART_Start_Receive_DMA+0xd8>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800e100:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f103 0224 	add.w	r2, r3, #36	; 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e10e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e11c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e126:	4618      	mov	r0, r3
 800e128:	f7f9 fa74 	bl	8007614 <HAL_DMAEx_List_Start_IT>
 800e12c:	4603      	mov	r3, r0
 800e12e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e132:	e013      	b.n	800e15c <UART_Start_Receive_DMA+0x100>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800e134:	2301      	movs	r3, #1
 800e136:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e13a:	e00f      	b.n	800e15c <UART_Start_Receive_DMA+0x100>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	3324      	adds	r3, #36	; 0x24
 800e146:	4619      	mov	r1, r3
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e14c:	461a      	mov	r2, r3
 800e14e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e152:	f7f8 ff1d 	bl	8006f90 <HAL_DMA_Start_IT>
 800e156:	4603      	mov	r3, r0
 800e158:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }

    if (status != HAL_OK)
 800e15c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e160:	2b00      	cmp	r3, #0
 800e162:	d00d      	beq.n	800e180 <UART_Start_Receive_DMA+0x124>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2210      	movs	r2, #16
 800e168:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2220      	movs	r2, #32
 800e178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	e051      	b.n	800e224 <UART_Start_Receive_DMA+0x1c8>
    }
  }
  __HAL_UNLOCK(huart);
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2200      	movs	r2, #0
 800e184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e190:	e853 3f00 	ldrex	r3, [r3]
 800e194:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e19c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1a8:	64ba      	str	r2, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e1ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e1ae:	e841 2300 	strex	r3, r2, [r1]
 800e1b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e1b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1e6      	bne.n	800e188 <UART_Start_Receive_DMA+0x12c>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	3308      	adds	r3, #8
 800e1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c4:	e853 3f00 	ldrex	r3, [r3]
 800e1c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1cc:	f043 0301 	orr.w	r3, r3, #1
 800e1d0:	657b      	str	r3, [r7, #84]	; 0x54
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	3308      	adds	r3, #8
 800e1d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e1da:	63ba      	str	r2, [r7, #56]	; 0x38
 800e1dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e1e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1e2:	e841 2300 	strex	r3, r2, [r1]
 800e1e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d1e5      	bne.n	800e1ba <UART_Start_Receive_DMA+0x15e>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	3308      	adds	r3, #8
 800e1f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	e853 3f00 	ldrex	r3, [r3]
 800e1fc:	617b      	str	r3, [r7, #20]
   return(result);
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e204:	653b      	str	r3, [r7, #80]	; 0x50
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	3308      	adds	r3, #8
 800e20c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e20e:	627a      	str	r2, [r7, #36]	; 0x24
 800e210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e212:	6a39      	ldr	r1, [r7, #32]
 800e214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e216:	e841 2300 	strex	r3, r2, [r1]
 800e21a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d1e5      	bne.n	800e1ee <UART_Start_Receive_DMA+0x192>

  return HAL_OK;
 800e222:	2300      	movs	r3, #0
}
 800e224:	4618      	mov	r0, r3
 800e226:	3760      	adds	r7, #96	; 0x60
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}
 800e22c:	0800e387 	.word	0x0800e387
 800e230:	0800e4a7 	.word	0x0800e4a7
 800e234:	0800e4df 	.word	0x0800e4df

0800e238 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e238:	b480      	push	{r7}
 800e23a:	b08f      	sub	sp, #60	; 0x3c
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e246:	6a3b      	ldr	r3, [r7, #32]
 800e248:	e853 3f00 	ldrex	r3, [r3]
 800e24c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e24e:	69fb      	ldr	r3, [r7, #28]
 800e250:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e254:	637b      	str	r3, [r7, #52]	; 0x34
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	461a      	mov	r2, r3
 800e25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e25e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e260:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e262:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e266:	e841 2300 	strex	r3, r2, [r1]
 800e26a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d1e6      	bne.n	800e240 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	3308      	adds	r3, #8
 800e278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	e853 3f00 	ldrex	r3, [r3]
 800e280:	60bb      	str	r3, [r7, #8]
   return(result);
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e288:	633b      	str	r3, [r7, #48]	; 0x30
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	3308      	adds	r3, #8
 800e290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e292:	61ba      	str	r2, [r7, #24]
 800e294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e296:	6979      	ldr	r1, [r7, #20]
 800e298:	69ba      	ldr	r2, [r7, #24]
 800e29a:	e841 2300 	strex	r3, r2, [r1]
 800e29e:	613b      	str	r3, [r7, #16]
   return(result);
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d1e5      	bne.n	800e272 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2220      	movs	r2, #32
 800e2aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e2ae:	bf00      	nop
 800e2b0:	373c      	adds	r7, #60	; 0x3c
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b8:	4770      	bx	lr

0800e2ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e2ba:	b480      	push	{r7}
 800e2bc:	b095      	sub	sp, #84	; 0x54
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ca:	e853 3f00 	ldrex	r3, [r3]
 800e2ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e2d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	461a      	mov	r2, r3
 800e2de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2e0:	643b      	str	r3, [r7, #64]	; 0x40
 800e2e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e2e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e2e8:	e841 2300 	strex	r3, r2, [r1]
 800e2ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1e6      	bne.n	800e2c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	3308      	adds	r3, #8
 800e2fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2fc:	6a3b      	ldr	r3, [r7, #32]
 800e2fe:	e853 3f00 	ldrex	r3, [r3]
 800e302:	61fb      	str	r3, [r7, #28]
   return(result);
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e30a:	f023 0301 	bic.w	r3, r3, #1
 800e30e:	64bb      	str	r3, [r7, #72]	; 0x48
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	3308      	adds	r3, #8
 800e316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e318:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e31a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e31c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e31e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e320:	e841 2300 	strex	r3, r2, [r1]
 800e324:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d1e3      	bne.n	800e2f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e330:	2b01      	cmp	r3, #1
 800e332:	d118      	bne.n	800e366 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	e853 3f00 	ldrex	r3, [r3]
 800e340:	60bb      	str	r3, [r7, #8]
   return(result);
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	f023 0310 	bic.w	r3, r3, #16
 800e348:	647b      	str	r3, [r7, #68]	; 0x44
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	461a      	mov	r2, r3
 800e350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e352:	61bb      	str	r3, [r7, #24]
 800e354:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e356:	6979      	ldr	r1, [r7, #20]
 800e358:	69ba      	ldr	r2, [r7, #24]
 800e35a:	e841 2300 	strex	r3, r2, [r1]
 800e35e:	613b      	str	r3, [r7, #16]
   return(result);
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d1e6      	bne.n	800e334 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2220      	movs	r2, #32
 800e36a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2200      	movs	r2, #0
 800e372:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2200      	movs	r2, #0
 800e378:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e37a:	bf00      	nop
 800e37c:	3754      	adds	r7, #84	; 0x54
 800e37e:	46bd      	mov	sp, r7
 800e380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e384:	4770      	bx	lr

0800e386 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e386:	b580      	push	{r7, lr}
 800e388:	b09c      	sub	sp, #112	; 0x70
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e392:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e398:	2b81      	cmp	r3, #129	; 0x81
 800e39a:	d071      	beq.n	800e480 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800e39c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e39e:	2200      	movs	r2, #0
 800e3a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3ac:	e853 3f00 	ldrex	r3, [r3]
 800e3b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e3b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e3b8:	66bb      	str	r3, [r7, #104]	; 0x68
 800e3ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	461a      	mov	r2, r3
 800e3c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e3c2:	65bb      	str	r3, [r7, #88]	; 0x58
 800e3c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e3c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e3ca:	e841 2300 	strex	r3, r2, [r1]
 800e3ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e3d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d1e6      	bne.n	800e3a4 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	3308      	adds	r3, #8
 800e3dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e0:	e853 3f00 	ldrex	r3, [r3]
 800e3e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3e8:	f023 0301 	bic.w	r3, r3, #1
 800e3ec:	667b      	str	r3, [r7, #100]	; 0x64
 800e3ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	3308      	adds	r3, #8
 800e3f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e3f6:	647a      	str	r2, [r7, #68]	; 0x44
 800e3f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e3fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3fe:	e841 2300 	strex	r3, r2, [r1]
 800e402:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e406:	2b00      	cmp	r3, #0
 800e408:	d1e5      	bne.n	800e3d6 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e40a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	3308      	adds	r3, #8
 800e410:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e414:	e853 3f00 	ldrex	r3, [r3]
 800e418:	623b      	str	r3, [r7, #32]
   return(result);
 800e41a:	6a3b      	ldr	r3, [r7, #32]
 800e41c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e420:	663b      	str	r3, [r7, #96]	; 0x60
 800e422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	3308      	adds	r3, #8
 800e428:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e42a:	633a      	str	r2, [r7, #48]	; 0x30
 800e42c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e42e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e432:	e841 2300 	strex	r3, r2, [r1]
 800e436:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d1e5      	bne.n	800e40a <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e43e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e440:	2220      	movs	r2, #32
 800e442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d118      	bne.n	800e480 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e44e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	e853 3f00 	ldrex	r3, [r3]
 800e45a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f023 0310 	bic.w	r3, r3, #16
 800e462:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	461a      	mov	r2, r3
 800e46a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e46c:	61fb      	str	r3, [r7, #28]
 800e46e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e470:	69b9      	ldr	r1, [r7, #24]
 800e472:	69fa      	ldr	r2, [r7, #28]
 800e474:	e841 2300 	strex	r3, r2, [r1]
 800e478:	617b      	str	r3, [r7, #20]
   return(result);
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1e6      	bne.n	800e44e <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e484:	2b01      	cmp	r3, #1
 800e486:	d107      	bne.n	800e498 <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e48a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e48e:	4619      	mov	r1, r3
 800e490:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e492:	f7ff fa9f 	bl	800d9d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e496:	e002      	b.n	800e49e <UART_DMAReceiveCplt+0x118>
    HAL_UART_RxCpltCallback(huart);
 800e498:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e49a:	f7ff fa7d 	bl	800d998 <HAL_UART_RxCpltCallback>
}
 800e49e:	bf00      	nop
 800e4a0:	3770      	adds	r7, #112	; 0x70
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}

0800e4a6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e4a6:	b580      	push	{r7, lr}
 800e4a8:	b084      	sub	sp, #16
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4b2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d109      	bne.n	800e4d0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e4c2:	085b      	lsrs	r3, r3, #1
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	68f8      	ldr	r0, [r7, #12]
 800e4ca:	f7ff fa83 	bl	800d9d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e4ce:	e002      	b.n	800e4d6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e4d0:	68f8      	ldr	r0, [r7, #12]
 800e4d2:	f7ff fa6b 	bl	800d9ac <HAL_UART_RxHalfCpltCallback>
}
 800e4d6:	bf00      	nop
 800e4d8:	3710      	adds	r7, #16
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}

0800e4de <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e4de:	b580      	push	{r7, lr}
 800e4e0:	b086      	sub	sp, #24
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4ea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	689b      	ldr	r3, [r3, #8]
 800e502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e506:	2b80      	cmp	r3, #128	; 0x80
 800e508:	d109      	bne.n	800e51e <UART_DMAError+0x40>
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	2b21      	cmp	r3, #33	; 0x21
 800e50e:	d106      	bne.n	800e51e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	2200      	movs	r2, #0
 800e514:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e518:	6978      	ldr	r0, [r7, #20]
 800e51a:	f7ff fe8d 	bl	800e238 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	689b      	ldr	r3, [r3, #8]
 800e524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e528:	2b40      	cmp	r3, #64	; 0x40
 800e52a:	d109      	bne.n	800e540 <UART_DMAError+0x62>
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	2b22      	cmp	r3, #34	; 0x22
 800e530:	d106      	bne.n	800e540 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	2200      	movs	r2, #0
 800e536:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e53a:	6978      	ldr	r0, [r7, #20]
 800e53c:	f7ff febd 	bl	800e2ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e546:	f043 0210 	orr.w	r2, r3, #16
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e550:	6978      	ldr	r0, [r7, #20]
 800e552:	f7ff fa35 	bl	800d9c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e556:	bf00      	nop
 800e558:	3718      	adds	r7, #24
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e55e:	b480      	push	{r7}
 800e560:	b085      	sub	sp, #20
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d101      	bne.n	800e574 <HAL_UARTEx_DisableFifoMode+0x16>
 800e570:	2302      	movs	r3, #2
 800e572:	e027      	b.n	800e5c4 <HAL_UARTEx_DisableFifoMode+0x66>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2201      	movs	r2, #1
 800e578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2224      	movs	r2, #36	; 0x24
 800e580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f022 0201 	bic.w	r2, r2, #1
 800e59a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e5a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	68fa      	ldr	r2, [r7, #12]
 800e5b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2220      	movs	r2, #32
 800e5b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e5c2:	2300      	movs	r3, #0
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3714      	adds	r7, #20
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr

0800e5d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b084      	sub	sp, #16
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d101      	bne.n	800e5e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e5e4:	2302      	movs	r3, #2
 800e5e6:	e02d      	b.n	800e644 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2224      	movs	r2, #36	; 0x24
 800e5f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	681a      	ldr	r2, [r3, #0]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f022 0201 	bic.w	r2, r2, #1
 800e60e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	689b      	ldr	r3, [r3, #8]
 800e616:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	683a      	ldr	r2, [r7, #0]
 800e620:	430a      	orrs	r2, r1
 800e622:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f000 f84f 	bl	800e6c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	68fa      	ldr	r2, [r7, #12]
 800e630:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2220      	movs	r2, #32
 800e636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2200      	movs	r2, #0
 800e63e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e642:	2300      	movs	r3, #0
}
 800e644:	4618      	mov	r0, r3
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d101      	bne.n	800e664 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e660:	2302      	movs	r3, #2
 800e662:	e02d      	b.n	800e6c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2201      	movs	r2, #1
 800e668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2224      	movs	r2, #36	; 0x24
 800e670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	681a      	ldr	r2, [r3, #0]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f022 0201 	bic.w	r2, r2, #1
 800e68a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	689b      	ldr	r3, [r3, #8]
 800e692:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	683a      	ldr	r2, [r7, #0]
 800e69c:	430a      	orrs	r2, r1
 800e69e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f000 f811 	bl	800e6c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	68fa      	ldr	r2, [r7, #12]
 800e6ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2220      	movs	r2, #32
 800e6b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e6be:	2300      	movs	r3, #0
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3710      	adds	r7, #16
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b085      	sub	sp, #20
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d108      	bne.n	800e6ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2201      	movs	r2, #1
 800e6dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2201      	movs	r2, #1
 800e6e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e6e8:	e031      	b.n	800e74e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e6ea:	2308      	movs	r3, #8
 800e6ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e6ee:	2308      	movs	r3, #8
 800e6f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	689b      	ldr	r3, [r3, #8]
 800e6f8:	0e5b      	lsrs	r3, r3, #25
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	f003 0307 	and.w	r3, r3, #7
 800e700:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	689b      	ldr	r3, [r3, #8]
 800e708:	0f5b      	lsrs	r3, r3, #29
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	f003 0307 	and.w	r3, r3, #7
 800e710:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e712:	7bbb      	ldrb	r3, [r7, #14]
 800e714:	7b3a      	ldrb	r2, [r7, #12]
 800e716:	4911      	ldr	r1, [pc, #68]	; (800e75c <UARTEx_SetNbDataToProcess+0x94>)
 800e718:	5c8a      	ldrb	r2, [r1, r2]
 800e71a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e71e:	7b3a      	ldrb	r2, [r7, #12]
 800e720:	490f      	ldr	r1, [pc, #60]	; (800e760 <UARTEx_SetNbDataToProcess+0x98>)
 800e722:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e724:	fb93 f3f2 	sdiv	r3, r3, r2
 800e728:	b29a      	uxth	r2, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e730:	7bfb      	ldrb	r3, [r7, #15]
 800e732:	7b7a      	ldrb	r2, [r7, #13]
 800e734:	4909      	ldr	r1, [pc, #36]	; (800e75c <UARTEx_SetNbDataToProcess+0x94>)
 800e736:	5c8a      	ldrb	r2, [r1, r2]
 800e738:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e73c:	7b7a      	ldrb	r2, [r7, #13]
 800e73e:	4908      	ldr	r1, [pc, #32]	; (800e760 <UARTEx_SetNbDataToProcess+0x98>)
 800e740:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e742:	fb93 f3f2 	sdiv	r3, r3, r2
 800e746:	b29a      	uxth	r2, r3
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e74e:	bf00      	nop
 800e750:	3714      	adds	r7, #20
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr
 800e75a:	bf00      	nop
 800e75c:	0801b2dc 	.word	0x0801b2dc
 800e760:	0801b2e4 	.word	0x0801b2e4

0800e764 <DataHist_parameters>:
 800e764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e768:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e76a:	f04f 0e00 	mov.w	lr, #0
 800e76e:	e9dd c607 	ldrd	ip, r6, [sp, #28]
 800e772:	7020      	strb	r0, [r4, #0]
 800e774:	6808      	ldr	r0, [r1, #0]
 800e776:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e778:	6060      	str	r0, [r4, #4]
 800e77a:	6848      	ldr	r0, [r1, #4]
 800e77c:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800e780:	60a0      	str	r0, [r4, #8]
 800e782:	6888      	ldr	r0, [r1, #8]
 800e784:	f102 0780 	add.w	r7, r2, #128	; 0x80
 800e788:	60e0      	str	r0, [r4, #12]
 800e78a:	68c8      	ldr	r0, [r1, #12]
 800e78c:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800e790:	6120      	str	r0, [r4, #16]
 800e792:	6908      	ldr	r0, [r1, #16]
 800e794:	6160      	str	r0, [r4, #20]
 800e796:	6948      	ldr	r0, [r1, #20]
 800e798:	61a0      	str	r0, [r4, #24]
 800e79a:	6988      	ldr	r0, [r1, #24]
 800e79c:	61e0      	str	r0, [r4, #28]
 800e79e:	69c8      	ldr	r0, [r1, #28]
 800e7a0:	6220      	str	r0, [r4, #32]
 800e7a2:	6a09      	ldr	r1, [r1, #32]
 800e7a4:	6261      	str	r1, [r4, #36]	; 0x24
 800e7a6:	8811      	ldrh	r1, [r2, #0]
 800e7a8:	8521      	strh	r1, [r4, #40]	; 0x28
 800e7aa:	4641      	mov	r1, r8
 800e7ac:	f1a7 0278 	sub.w	r2, r7, #120	; 0x78
 800e7b0:	f852 0b04 	ldr.w	r0, [r2], #4
 800e7b4:	42ba      	cmp	r2, r7
 800e7b6:	f841 0b04 	str.w	r0, [r1], #4
 800e7ba:	d1f9      	bne.n	800e7b0 <DataHist_parameters+0x4c>
 800e7bc:	f10e 0e1e 	add.w	lr, lr, #30
 800e7c0:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800e7c4:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800e7c8:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800e7cc:	d1ed      	bne.n	800e7aa <DataHist_parameters+0x46>
 800e7ce:	2000      	movs	r0, #0
 800e7d0:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800e7d4:	881a      	ldrh	r2, [r3, #0]
 800e7d6:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800e7da:	f103 0780 	add.w	r7, r3, #128	; 0x80
 800e7de:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800e7e2:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 800e7e6:	4672      	mov	r2, lr
 800e7e8:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800e7ec:	f853 1b04 	ldr.w	r1, [r3], #4
 800e7f0:	42bb      	cmp	r3, r7
 800e7f2:	f842 1b04 	str.w	r1, [r2], #4
 800e7f6:	d1f9      	bne.n	800e7ec <DataHist_parameters+0x88>
 800e7f8:	301e      	adds	r0, #30
 800e7fa:	285a      	cmp	r0, #90	; 0x5a
 800e7fc:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800e800:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800e804:	d1ef      	bne.n	800e7e6 <DataHist_parameters+0x82>
 800e806:	2700      	movs	r7, #0
 800e808:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800e80c:	f8bc 3000 	ldrh.w	r3, [ip]
 800e810:	f8dc e004 	ldr.w	lr, [ip, #4]
 800e814:	f10c 0080 	add.w	r0, ip, #128	; 0x80
 800e818:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800e81c:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800e820:	4662      	mov	r2, ip
 800e822:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800e826:	f853 1b04 	ldr.w	r1, [r3], #4
 800e82a:	4283      	cmp	r3, r0
 800e82c:	f842 1b04 	str.w	r1, [r2], #4
 800e830:	d1f9      	bne.n	800e826 <DataHist_parameters+0xc2>
 800e832:	371e      	adds	r7, #30
 800e834:	2f5a      	cmp	r7, #90	; 0x5a
 800e836:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800e83a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800e83e:	d1ef      	bne.n	800e820 <DataHist_parameters+0xbc>
 800e840:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800e844:	8833      	ldrh	r3, [r6, #0]
 800e846:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800e84a:	f106 0080 	add.w	r0, r6, #128	; 0x80
 800e84e:	2600      	movs	r6, #0
 800e850:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800e854:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 800e858:	463a      	mov	r2, r7
 800e85a:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800e85e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e862:	4298      	cmp	r0, r3
 800e864:	f842 1b04 	str.w	r1, [r2], #4
 800e868:	d1f9      	bne.n	800e85e <DataHist_parameters+0xfa>
 800e86a:	361e      	adds	r6, #30
 800e86c:	2e5a      	cmp	r6, #90	; 0x5a
 800e86e:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800e872:	f100 0078 	add.w	r0, r0, #120	; 0x78
 800e876:	d1ef      	bne.n	800e858 <DataHist_parameters+0xf4>
 800e878:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800e87c:	f8c3 c004 	str.w	ip, [r3, #4]
 800e880:	69aa      	ldr	r2, [r5, #24]
 800e882:	7829      	ldrb	r1, [r5, #0]
 800e884:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800e888:	f884 15e8 	strb.w	r1, [r4, #1512]	; 0x5e8
 800e88c:	619a      	str	r2, [r3, #24]
 800e88e:	686a      	ldr	r2, [r5, #4]
 800e890:	605a      	str	r2, [r3, #4]
 800e892:	68a9      	ldr	r1, [r5, #8]
 800e894:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800e898:	6011      	str	r1, [r2, #0]
 800e89a:	68e9      	ldr	r1, [r5, #12]
 800e89c:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800e8a0:	6011      	str	r1, [r2, #0]
 800e8a2:	6929      	ldr	r1, [r5, #16]
 800e8a4:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800e8a8:	6011      	str	r1, [r2, #0]
 800e8aa:	6969      	ldr	r1, [r5, #20]
 800e8ac:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800e8b0:	6011      	str	r1, [r2, #0]
 800e8b2:	69ea      	ldr	r2, [r5, #28]
 800e8b4:	61da      	str	r2, [r3, #28]
 800e8b6:	6a2a      	ldr	r2, [r5, #32]
 800e8b8:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 800e8bc:	601a      	str	r2, [r3, #0]
 800e8be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e8c0:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800e8c4:	601a      	str	r2, [r3, #0]
 800e8c6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e8c8:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800e8cc:	601a      	str	r2, [r3, #0]
 800e8ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e8d0:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800e8d4:	6023      	str	r3, [r4, #0]
 800e8d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8da:	bf00      	nop

0800e8dc <rotVect>:
 800e8dc:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800e8e0:	ed92 7a01 	vldr	s14, [r2, #4]
 800e8e4:	ee07 3a90 	vmov	s15, r3
 800e8e8:	f991 3000 	ldrsb.w	r3, [r1]
 800e8ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e8f0:	ee06 3a90 	vmov	s13, r3
 800e8f4:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800e8f8:	ed92 6a00 	vldr	s12, [r2]
 800e8fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e900:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e904:	ee07 3a10 	vmov	s14, r3
 800e908:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e90c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e910:	edd2 6a02 	vldr	s13, [r2, #8]
 800e914:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e918:	edc0 7a00 	vstr	s15, [r0]
 800e91c:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800e920:	ed92 7a01 	vldr	s14, [r2, #4]
 800e924:	ee07 3a90 	vmov	s15, r3
 800e928:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800e92c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e930:	ee06 3a90 	vmov	s13, r3
 800e934:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800e938:	ed92 6a00 	vldr	s12, [r2]
 800e93c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e940:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e944:	ee07 3a10 	vmov	s14, r3
 800e948:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e94c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e950:	edd2 6a02 	vldr	s13, [r2, #8]
 800e954:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e958:	edc0 7a01 	vstr	s15, [r0, #4]
 800e95c:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800e960:	ed92 7a01 	vldr	s14, [r2, #4]
 800e964:	ee07 3a90 	vmov	s15, r3
 800e968:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800e96c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e970:	ee06 3a90 	vmov	s13, r3
 800e974:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800e978:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e97c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e980:	ed92 6a00 	vldr	s12, [r2]
 800e984:	ee07 3a10 	vmov	s14, r3
 800e988:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e98c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e990:	edd2 6a02 	vldr	s13, [r2, #8]
 800e994:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e998:	edc0 7a02 	vstr	s15, [r0, #8]
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop

0800e9a0 <findAxis>:
 800e9a0:	f990 3000 	ldrsb.w	r3, [r0]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d027      	beq.n	800e9f8 <findAxis+0x58>
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	d00e      	beq.n	800e9ca <findAxis+0x2a>
 800e9ac:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d053      	beq.n	800ea5c <findAxis+0xbc>
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	d048      	beq.n	800ea4a <findAxis+0xaa>
 800e9b8:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	d053      	beq.n	800ea68 <findAxis+0xc8>
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	d104      	bne.n	800e9ce <findAxis+0x2e>
 800e9c4:	2364      	movs	r3, #100	; 0x64
 800e9c6:	700b      	strb	r3, [r1, #0]
 800e9c8:	e001      	b.n	800e9ce <findAxis+0x2e>
 800e9ca:	2377      	movs	r3, #119	; 0x77
 800e9cc:	700b      	strb	r3, [r1, #0]
 800e9ce:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e9d2:	2b01      	cmp	r3, #1
 800e9d4:	d016      	beq.n	800ea04 <findAxis+0x64>
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	d02e      	beq.n	800ea38 <findAxis+0x98>
 800e9da:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800e9de:	2b01      	cmp	r3, #1
 800e9e0:	d039      	beq.n	800ea56 <findAxis+0xb6>
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	d034      	beq.n	800ea50 <findAxis+0xb0>
 800e9e6:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d03f      	beq.n	800ea6e <findAxis+0xce>
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	d10a      	bne.n	800ea08 <findAxis+0x68>
 800e9f2:	2364      	movs	r3, #100	; 0x64
 800e9f4:	704b      	strb	r3, [r1, #1]
 800e9f6:	e007      	b.n	800ea08 <findAxis+0x68>
 800e9f8:	2365      	movs	r3, #101	; 0x65
 800e9fa:	700b      	strb	r3, [r1, #0]
 800e9fc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d1e8      	bne.n	800e9d6 <findAxis+0x36>
 800ea04:	2365      	movs	r3, #101	; 0x65
 800ea06:	704b      	strb	r3, [r1, #1]
 800ea08:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d010      	beq.n	800ea32 <findAxis+0x92>
 800ea10:	3301      	adds	r3, #1
 800ea12:	d014      	beq.n	800ea3e <findAxis+0x9e>
 800ea14:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d022      	beq.n	800ea62 <findAxis+0xc2>
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	d011      	beq.n	800ea44 <findAxis+0xa4>
 800ea20:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ea24:	2b01      	cmp	r3, #1
 800ea26:	d025      	beq.n	800ea74 <findAxis+0xd4>
 800ea28:	3301      	adds	r3, #1
 800ea2a:	bf04      	itt	eq
 800ea2c:	2364      	moveq	r3, #100	; 0x64
 800ea2e:	708b      	strbeq	r3, [r1, #2]
 800ea30:	4770      	bx	lr
 800ea32:	2365      	movs	r3, #101	; 0x65
 800ea34:	708b      	strb	r3, [r1, #2]
 800ea36:	4770      	bx	lr
 800ea38:	2377      	movs	r3, #119	; 0x77
 800ea3a:	704b      	strb	r3, [r1, #1]
 800ea3c:	e7e4      	b.n	800ea08 <findAxis+0x68>
 800ea3e:	2377      	movs	r3, #119	; 0x77
 800ea40:	708b      	strb	r3, [r1, #2]
 800ea42:	4770      	bx	lr
 800ea44:	2373      	movs	r3, #115	; 0x73
 800ea46:	708b      	strb	r3, [r1, #2]
 800ea48:	4770      	bx	lr
 800ea4a:	2373      	movs	r3, #115	; 0x73
 800ea4c:	700b      	strb	r3, [r1, #0]
 800ea4e:	e7be      	b.n	800e9ce <findAxis+0x2e>
 800ea50:	2373      	movs	r3, #115	; 0x73
 800ea52:	704b      	strb	r3, [r1, #1]
 800ea54:	e7d8      	b.n	800ea08 <findAxis+0x68>
 800ea56:	236e      	movs	r3, #110	; 0x6e
 800ea58:	704b      	strb	r3, [r1, #1]
 800ea5a:	e7d5      	b.n	800ea08 <findAxis+0x68>
 800ea5c:	236e      	movs	r3, #110	; 0x6e
 800ea5e:	700b      	strb	r3, [r1, #0]
 800ea60:	e7b5      	b.n	800e9ce <findAxis+0x2e>
 800ea62:	236e      	movs	r3, #110	; 0x6e
 800ea64:	708b      	strb	r3, [r1, #2]
 800ea66:	4770      	bx	lr
 800ea68:	2375      	movs	r3, #117	; 0x75
 800ea6a:	700b      	strb	r3, [r1, #0]
 800ea6c:	e7af      	b.n	800e9ce <findAxis+0x2e>
 800ea6e:	2375      	movs	r3, #117	; 0x75
 800ea70:	704b      	strb	r3, [r1, #1]
 800ea72:	e7c9      	b.n	800ea08 <findAxis+0x68>
 800ea74:	2375      	movs	r3, #117	; 0x75
 800ea76:	708b      	strb	r3, [r1, #2]
 800ea78:	4770      	bx	lr
 800ea7a:	bf00      	nop
 800ea7c:	0000      	movs	r0, r0
	...

0800ea80 <findDirection>:
 800ea80:	b5d0      	push	{r4, r6, r7, lr}
 800ea82:	ed2d 8b04 	vpush	{d8-d9}
 800ea86:	eef0 8ac0 	vabs.f32	s17, s0
 800ea8a:	eeb0 8ae0 	vabs.f32	s16, s1
 800ea8e:	eef4 8ac8 	vcmpe.f32	s17, s16
 800ea92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea96:	4604      	mov	r4, r0
 800ea98:	eeb0 9ac1 	vabs.f32	s18, s2
 800ea9c:	dd36      	ble.n	800eb0c <findDirection+0x8c>
 800ea9e:	eef4 8ac9 	vcmpe.f32	s17, s18
 800eaa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaa6:	dd31      	ble.n	800eb0c <findDirection+0x8c>
 800eaa8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eaac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eab0:	ee18 0a90 	vmov	r0, s17
 800eab4:	f340 8094 	ble.w	800ebe0 <findDirection+0x160>
 800eab8:	f7f1 fd4a 	bl	8000550 <__aeabi_f2d>
 800eabc:	4606      	mov	r6, r0
 800eabe:	ee18 0a10 	vmov	r0, s16
 800eac2:	460f      	mov	r7, r1
 800eac4:	f7f1 fd44 	bl	8000550 <__aeabi_f2d>
 800eac8:	a387      	add	r3, pc, #540	; (adr r3, 800ece8 <findDirection+0x268>)
 800eaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eace:	f7f1 fd97 	bl	8000600 <__aeabi_dmul>
 800ead2:	4602      	mov	r2, r0
 800ead4:	460b      	mov	r3, r1
 800ead6:	4630      	mov	r0, r6
 800ead8:	4639      	mov	r1, r7
 800eada:	f7f2 f821 	bl	8000b20 <__aeabi_dcmpgt>
 800eade:	b188      	cbz	r0, 800eb04 <findDirection+0x84>
 800eae0:	ee19 0a10 	vmov	r0, s18
 800eae4:	f7f1 fd34 	bl	8000550 <__aeabi_f2d>
 800eae8:	a37f      	add	r3, pc, #508	; (adr r3, 800ece8 <findDirection+0x268>)
 800eaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaee:	f7f1 fd87 	bl	8000600 <__aeabi_dmul>
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	4639      	mov	r1, r7
 800eafa:	f7f2 f811 	bl	8000b20 <__aeabi_dcmpgt>
 800eafe:	2800      	cmp	r0, #0
 800eb00:	bf18      	it	ne
 800eb02:	2404      	movne	r4, #4
 800eb04:	ecbd 8b04 	vpop	{d8-d9}
 800eb08:	4620      	mov	r0, r4
 800eb0a:	bdd0      	pop	{r4, r6, r7, pc}
 800eb0c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800eb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb14:	dd32      	ble.n	800eb7c <findDirection+0xfc>
 800eb16:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800eb1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb1e:	ee18 0a10 	vmov	r0, s16
 800eb22:	f340 8086 	ble.w	800ec32 <findDirection+0x1b2>
 800eb26:	f7f1 fd13 	bl	8000550 <__aeabi_f2d>
 800eb2a:	4606      	mov	r6, r0
 800eb2c:	ee18 0a90 	vmov	r0, s17
 800eb30:	460f      	mov	r7, r1
 800eb32:	f7f1 fd0d 	bl	8000550 <__aeabi_f2d>
 800eb36:	a36c      	add	r3, pc, #432	; (adr r3, 800ece8 <findDirection+0x268>)
 800eb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3c:	f7f1 fd60 	bl	8000600 <__aeabi_dmul>
 800eb40:	4602      	mov	r2, r0
 800eb42:	460b      	mov	r3, r1
 800eb44:	4630      	mov	r0, r6
 800eb46:	4639      	mov	r1, r7
 800eb48:	f7f1 ffea 	bl	8000b20 <__aeabi_dcmpgt>
 800eb4c:	2800      	cmp	r0, #0
 800eb4e:	d0d9      	beq.n	800eb04 <findDirection+0x84>
 800eb50:	ee19 0a10 	vmov	r0, s18
 800eb54:	f7f1 fcfc 	bl	8000550 <__aeabi_f2d>
 800eb58:	a363      	add	r3, pc, #396	; (adr r3, 800ece8 <findDirection+0x268>)
 800eb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5e:	f7f1 fd4f 	bl	8000600 <__aeabi_dmul>
 800eb62:	4602      	mov	r2, r0
 800eb64:	460b      	mov	r3, r1
 800eb66:	4630      	mov	r0, r6
 800eb68:	4639      	mov	r1, r7
 800eb6a:	f7f1 ffd9 	bl	8000b20 <__aeabi_dcmpgt>
 800eb6e:	ecbd 8b04 	vpop	{d8-d9}
 800eb72:	2800      	cmp	r0, #0
 800eb74:	bf18      	it	ne
 800eb76:	2401      	movne	r4, #1
 800eb78:	4620      	mov	r0, r4
 800eb7a:	bdd0      	pop	{r4, r6, r7, pc}
 800eb7c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800eb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb84:	ee19 0a10 	vmov	r0, s18
 800eb88:	dd7f      	ble.n	800ec8a <findDirection+0x20a>
 800eb8a:	f7f1 fce1 	bl	8000550 <__aeabi_f2d>
 800eb8e:	4606      	mov	r6, r0
 800eb90:	ee18 0a10 	vmov	r0, s16
 800eb94:	460f      	mov	r7, r1
 800eb96:	f7f1 fcdb 	bl	8000550 <__aeabi_f2d>
 800eb9a:	a353      	add	r3, pc, #332	; (adr r3, 800ece8 <findDirection+0x268>)
 800eb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba0:	f7f1 fd2e 	bl	8000600 <__aeabi_dmul>
 800eba4:	4602      	mov	r2, r0
 800eba6:	460b      	mov	r3, r1
 800eba8:	4630      	mov	r0, r6
 800ebaa:	4639      	mov	r1, r7
 800ebac:	f7f1 ffb8 	bl	8000b20 <__aeabi_dcmpgt>
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	d0a7      	beq.n	800eb04 <findDirection+0x84>
 800ebb4:	ee18 0a90 	vmov	r0, s17
 800ebb8:	f7f1 fcca 	bl	8000550 <__aeabi_f2d>
 800ebbc:	a34a      	add	r3, pc, #296	; (adr r3, 800ece8 <findDirection+0x268>)
 800ebbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc2:	f7f1 fd1d 	bl	8000600 <__aeabi_dmul>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	460b      	mov	r3, r1
 800ebca:	4630      	mov	r0, r6
 800ebcc:	4639      	mov	r1, r7
 800ebce:	f7f1 ffa7 	bl	8000b20 <__aeabi_dcmpgt>
 800ebd2:	ecbd 8b04 	vpop	{d8-d9}
 800ebd6:	2800      	cmp	r0, #0
 800ebd8:	bf18      	it	ne
 800ebda:	2400      	movne	r4, #0
 800ebdc:	4620      	mov	r0, r4
 800ebde:	bdd0      	pop	{r4, r6, r7, pc}
 800ebe0:	f7f1 fcb6 	bl	8000550 <__aeabi_f2d>
 800ebe4:	4606      	mov	r6, r0
 800ebe6:	ee18 0a10 	vmov	r0, s16
 800ebea:	460f      	mov	r7, r1
 800ebec:	f7f1 fcb0 	bl	8000550 <__aeabi_f2d>
 800ebf0:	a33d      	add	r3, pc, #244	; (adr r3, 800ece8 <findDirection+0x268>)
 800ebf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf6:	f7f1 fd03 	bl	8000600 <__aeabi_dmul>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	4630      	mov	r0, r6
 800ec00:	4639      	mov	r1, r7
 800ec02:	f7f1 ff8d 	bl	8000b20 <__aeabi_dcmpgt>
 800ec06:	2800      	cmp	r0, #0
 800ec08:	f43f af7c 	beq.w	800eb04 <findDirection+0x84>
 800ec0c:	ee19 0a10 	vmov	r0, s18
 800ec10:	f7f1 fc9e 	bl	8000550 <__aeabi_f2d>
 800ec14:	a334      	add	r3, pc, #208	; (adr r3, 800ece8 <findDirection+0x268>)
 800ec16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1a:	f7f1 fcf1 	bl	8000600 <__aeabi_dmul>
 800ec1e:	4602      	mov	r2, r0
 800ec20:	460b      	mov	r3, r1
 800ec22:	4630      	mov	r0, r6
 800ec24:	4639      	mov	r1, r7
 800ec26:	f7f1 ff7b 	bl	8000b20 <__aeabi_dcmpgt>
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	bf18      	it	ne
 800ec2e:	2405      	movne	r4, #5
 800ec30:	e768      	b.n	800eb04 <findDirection+0x84>
 800ec32:	f7f1 fc8d 	bl	8000550 <__aeabi_f2d>
 800ec36:	4606      	mov	r6, r0
 800ec38:	ee18 0a90 	vmov	r0, s17
 800ec3c:	460f      	mov	r7, r1
 800ec3e:	f7f1 fc87 	bl	8000550 <__aeabi_f2d>
 800ec42:	a329      	add	r3, pc, #164	; (adr r3, 800ece8 <findDirection+0x268>)
 800ec44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec48:	f7f1 fcda 	bl	8000600 <__aeabi_dmul>
 800ec4c:	4602      	mov	r2, r0
 800ec4e:	460b      	mov	r3, r1
 800ec50:	4630      	mov	r0, r6
 800ec52:	4639      	mov	r1, r7
 800ec54:	f7f1 ff64 	bl	8000b20 <__aeabi_dcmpgt>
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	f43f af53 	beq.w	800eb04 <findDirection+0x84>
 800ec5e:	ee19 0a10 	vmov	r0, s18
 800ec62:	f7f1 fc75 	bl	8000550 <__aeabi_f2d>
 800ec66:	a320      	add	r3, pc, #128	; (adr r3, 800ece8 <findDirection+0x268>)
 800ec68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6c:	f7f1 fcc8 	bl	8000600 <__aeabi_dmul>
 800ec70:	4602      	mov	r2, r0
 800ec72:	460b      	mov	r3, r1
 800ec74:	4630      	mov	r0, r6
 800ec76:	4639      	mov	r1, r7
 800ec78:	f7f1 ff52 	bl	8000b20 <__aeabi_dcmpgt>
 800ec7c:	ecbd 8b04 	vpop	{d8-d9}
 800ec80:	2800      	cmp	r0, #0
 800ec82:	bf18      	it	ne
 800ec84:	2403      	movne	r4, #3
 800ec86:	4620      	mov	r0, r4
 800ec88:	bdd0      	pop	{r4, r6, r7, pc}
 800ec8a:	f7f1 fc61 	bl	8000550 <__aeabi_f2d>
 800ec8e:	4606      	mov	r6, r0
 800ec90:	ee18 0a10 	vmov	r0, s16
 800ec94:	460f      	mov	r7, r1
 800ec96:	f7f1 fc5b 	bl	8000550 <__aeabi_f2d>
 800ec9a:	a313      	add	r3, pc, #76	; (adr r3, 800ece8 <findDirection+0x268>)
 800ec9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca0:	f7f1 fcae 	bl	8000600 <__aeabi_dmul>
 800eca4:	4602      	mov	r2, r0
 800eca6:	460b      	mov	r3, r1
 800eca8:	4630      	mov	r0, r6
 800ecaa:	4639      	mov	r1, r7
 800ecac:	f7f1 ff38 	bl	8000b20 <__aeabi_dcmpgt>
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	f43f af27 	beq.w	800eb04 <findDirection+0x84>
 800ecb6:	ee18 0a90 	vmov	r0, s17
 800ecba:	f7f1 fc49 	bl	8000550 <__aeabi_f2d>
 800ecbe:	a30a      	add	r3, pc, #40	; (adr r3, 800ece8 <findDirection+0x268>)
 800ecc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc4:	f7f1 fc9c 	bl	8000600 <__aeabi_dmul>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	460b      	mov	r3, r1
 800eccc:	4630      	mov	r0, r6
 800ecce:	4639      	mov	r1, r7
 800ecd0:	f7f1 ff26 	bl	8000b20 <__aeabi_dcmpgt>
 800ecd4:	ecbd 8b04 	vpop	{d8-d9}
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	bf18      	it	ne
 800ecdc:	2402      	movne	r4, #2
 800ecde:	4620      	mov	r0, r4
 800ece0:	bdd0      	pop	{r4, r6, r7, pc}
 800ece2:	bf00      	nop
 800ece4:	f3af 8000 	nop.w
 800ece8:	e0000000 	.word	0xe0000000
 800ecec:	3ff6b851 	.word	0x3ff6b851

0800ecf0 <updateOrientation>:
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	b410      	push	{r4}
 800ecf4:	6003      	str	r3, [r0, #0]
 800ecf6:	6043      	str	r3, [r0, #4]
 800ecf8:	7203      	strb	r3, [r0, #8]
 800ecfa:	780c      	ldrb	r4, [r1, #0]
 800ecfc:	784a      	ldrb	r2, [r1, #1]
 800ecfe:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800ed02:	2b17      	cmp	r3, #23
 800ed04:	bf98      	it	ls
 800ed06:	3420      	addls	r4, #32
 800ed08:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800ed0c:	bf98      	it	ls
 800ed0e:	b2e4      	uxtbls	r4, r4
 800ed10:	2b17      	cmp	r3, #23
 800ed12:	788b      	ldrb	r3, [r1, #2]
 800ed14:	bf98      	it	ls
 800ed16:	3220      	addls	r2, #32
 800ed18:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800ed1c:	bf98      	it	ls
 800ed1e:	b2d2      	uxtbls	r2, r2
 800ed20:	2917      	cmp	r1, #23
 800ed22:	bf98      	it	ls
 800ed24:	3320      	addls	r3, #32
 800ed26:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800ed2a:	bf98      	it	ls
 800ed2c:	b2db      	uxtbls	r3, r3
 800ed2e:	2c13      	cmp	r4, #19
 800ed30:	d80d      	bhi.n	800ed4e <updateOrientation+0x5e>
 800ed32:	e8df f004 	tbb	[pc, r4]
 800ed36:	0a36      	.short	0x0a36
 800ed38:	0c0c0c0c 	.word	0x0c0c0c0c
 800ed3c:	0c0c0c0c 	.word	0x0c0c0c0c
 800ed40:	0c0c0c39 	.word	0x0c0c0c39
 800ed44:	3f0c3c0c 	.word	0x3f0c3c0c
 800ed48:	420c      	.short	0x420c
 800ed4a:	2101      	movs	r1, #1
 800ed4c:	7001      	strb	r1, [r0, #0]
 800ed4e:	3a64      	subs	r2, #100	; 0x64
 800ed50:	2a13      	cmp	r2, #19
 800ed52:	d80d      	bhi.n	800ed70 <updateOrientation+0x80>
 800ed54:	e8df f002 	tbb	[pc, r2]
 800ed58:	0c0c0a34 	.word	0x0c0c0a34
 800ed5c:	0c0c0c0c 	.word	0x0c0c0c0c
 800ed60:	0c370c0c 	.word	0x0c370c0c
 800ed64:	3a0c0c0c 	.word	0x3a0c0c0c
 800ed68:	400c3d0c 	.word	0x400c3d0c
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	7042      	strb	r2, [r0, #1]
 800ed70:	3b64      	subs	r3, #100	; 0x64
 800ed72:	2b13      	cmp	r3, #19
 800ed74:	d80d      	bhi.n	800ed92 <updateOrientation+0xa2>
 800ed76:	e8df f003 	tbb	[pc, r3]
 800ed7a:	320a      	.short	0x320a
 800ed7c:	0c0c0c0c 	.word	0x0c0c0c0c
 800ed80:	0c0c0c0c 	.word	0x0c0c0c0c
 800ed84:	0c0c0c37 	.word	0x0c0c0c37
 800ed88:	410c3c0c 	.word	0x410c3c0c
 800ed8c:	0f0c      	.short	0x0f0c
 800ed8e:	23ff      	movs	r3, #255	; 0xff
 800ed90:	7203      	strb	r3, [r0, #8]
 800ed92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed96:	4770      	bx	lr
 800ed98:	23ff      	movs	r3, #255	; 0xff
 800ed9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed9e:	7083      	strb	r3, [r0, #2]
 800eda0:	4770      	bx	lr
 800eda2:	21ff      	movs	r1, #255	; 0xff
 800eda4:	7181      	strb	r1, [r0, #6]
 800eda6:	e7d2      	b.n	800ed4e <updateOrientation+0x5e>
 800eda8:	2101      	movs	r1, #1
 800edaa:	70c1      	strb	r1, [r0, #3]
 800edac:	e7cf      	b.n	800ed4e <updateOrientation+0x5e>
 800edae:	21ff      	movs	r1, #255	; 0xff
 800edb0:	70c1      	strb	r1, [r0, #3]
 800edb2:	e7cc      	b.n	800ed4e <updateOrientation+0x5e>
 800edb4:	2101      	movs	r1, #1
 800edb6:	7181      	strb	r1, [r0, #6]
 800edb8:	e7c9      	b.n	800ed4e <updateOrientation+0x5e>
 800edba:	21ff      	movs	r1, #255	; 0xff
 800edbc:	7001      	strb	r1, [r0, #0]
 800edbe:	e7c6      	b.n	800ed4e <updateOrientation+0x5e>
 800edc0:	22ff      	movs	r2, #255	; 0xff
 800edc2:	71c2      	strb	r2, [r0, #7]
 800edc4:	e7d4      	b.n	800ed70 <updateOrientation+0x80>
 800edc6:	2201      	movs	r2, #1
 800edc8:	7102      	strb	r2, [r0, #4]
 800edca:	e7d1      	b.n	800ed70 <updateOrientation+0x80>
 800edcc:	22ff      	movs	r2, #255	; 0xff
 800edce:	7102      	strb	r2, [r0, #4]
 800edd0:	e7ce      	b.n	800ed70 <updateOrientation+0x80>
 800edd2:	2201      	movs	r2, #1
 800edd4:	71c2      	strb	r2, [r0, #7]
 800edd6:	e7cb      	b.n	800ed70 <updateOrientation+0x80>
 800edd8:	22ff      	movs	r2, #255	; 0xff
 800edda:	7042      	strb	r2, [r0, #1]
 800eddc:	e7c8      	b.n	800ed70 <updateOrientation+0x80>
 800edde:	2301      	movs	r3, #1
 800ede0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ede4:	7083      	strb	r3, [r0, #2]
 800ede6:	4770      	bx	lr
 800ede8:	2301      	movs	r3, #1
 800edea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edee:	7143      	strb	r3, [r0, #5]
 800edf0:	4770      	bx	lr
 800edf2:	23ff      	movs	r3, #255	; 0xff
 800edf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edf8:	7143      	strb	r3, [r0, #5]
 800edfa:	4770      	bx	lr
 800edfc:	2301      	movs	r3, #1
 800edfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee02:	7203      	strb	r3, [r0, #8]
 800ee04:	4770      	bx	lr
 800ee06:	bf00      	nop

0800ee08 <qmult>:
 800ee08:	ed90 3a01 	vldr	s6, [r0, #4]
 800ee0c:	ed91 2a03 	vldr	s4, [r1, #12]
 800ee10:	edd0 5a02 	vldr	s11, [r0, #8]
 800ee14:	edd1 4a01 	vldr	s9, [r1, #4]
 800ee18:	ed90 4a00 	vldr	s8, [r0]
 800ee1c:	edd1 3a00 	vldr	s7, [r1]
 800ee20:	ed91 5a02 	vldr	s10, [r1, #8]
 800ee24:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800ee28:	ee62 6a03 	vmul.f32	s13, s4, s6
 800ee2c:	ee22 7a25 	vmul.f32	s14, s4, s11
 800ee30:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800ee34:	edd0 2a03 	vldr	s5, [r0, #12]
 800ee38:	eea4 6a02 	vfma.f32	s12, s8, s4
 800ee3c:	eee4 6a05 	vfma.f32	s13, s8, s10
 800ee40:	eea3 7a23 	vfma.f32	s14, s6, s7
 800ee44:	eee4 7a63 	vfms.f32	s15, s8, s7
 800ee48:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800ee4c:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800ee50:	eea5 7a22 	vfma.f32	s14, s10, s5
 800ee54:	eee2 7a22 	vfma.f32	s15, s4, s5
 800ee58:	eea3 6a45 	vfms.f32	s12, s6, s10
 800ee5c:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800ee60:	eea4 7a64 	vfms.f32	s14, s8, s9
 800ee64:	eee5 7a65 	vfms.f32	s15, s10, s11
 800ee68:	ed82 6a00 	vstr	s12, [r2]
 800ee6c:	edc2 6a01 	vstr	s13, [r2, #4]
 800ee70:	ed82 7a02 	vstr	s14, [r2, #8]
 800ee74:	edc2 7a03 	vstr	s15, [r2, #12]
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop

0800ee7c <MEMS_setMagIndexToOne>:
 800ee7c:	291f      	cmp	r1, #31
 800ee7e:	b430      	push	{r4, r5}
 800ee80:	f04f 0401 	mov.w	r4, #1
 800ee84:	d921      	bls.n	800eeca <MEMS_setMagIndexToOne+0x4e>
 800ee86:	6885      	ldr	r5, [r0, #8]
 800ee88:	3920      	subs	r1, #32
 800ee8a:	fa04 f101 	lsl.w	r1, r4, r1
 800ee8e:	ea21 0105 	bic.w	r1, r1, r5
 800ee92:	4069      	eors	r1, r5
 800ee94:	2a1f      	cmp	r2, #31
 800ee96:	6081      	str	r1, [r0, #8]
 800ee98:	f04f 0101 	mov.w	r1, #1
 800ee9c:	d920      	bls.n	800eee0 <MEMS_setMagIndexToOne+0x64>
 800ee9e:	6904      	ldr	r4, [r0, #16]
 800eea0:	3a20      	subs	r2, #32
 800eea2:	fa01 f202 	lsl.w	r2, r1, r2
 800eea6:	ea22 0204 	bic.w	r2, r2, r4
 800eeaa:	4062      	eors	r2, r4
 800eeac:	2b1f      	cmp	r3, #31
 800eeae:	6102      	str	r2, [r0, #16]
 800eeb0:	f04f 0201 	mov.w	r2, #1
 800eeb4:	d91f      	bls.n	800eef6 <MEMS_setMagIndexToOne+0x7a>
 800eeb6:	bc30      	pop	{r4, r5}
 800eeb8:	69c1      	ldr	r1, [r0, #28]
 800eeba:	3b20      	subs	r3, #32
 800eebc:	fa02 f303 	lsl.w	r3, r2, r3
 800eec0:	ea23 0301 	bic.w	r3, r3, r1
 800eec4:	404b      	eors	r3, r1
 800eec6:	61c3      	str	r3, [r0, #28]
 800eec8:	4770      	bx	lr
 800eeca:	68c5      	ldr	r5, [r0, #12]
 800eecc:	fa04 f101 	lsl.w	r1, r4, r1
 800eed0:	ea21 0105 	bic.w	r1, r1, r5
 800eed4:	4069      	eors	r1, r5
 800eed6:	2a1f      	cmp	r2, #31
 800eed8:	60c1      	str	r1, [r0, #12]
 800eeda:	f04f 0101 	mov.w	r1, #1
 800eede:	d8de      	bhi.n	800ee9e <MEMS_setMagIndexToOne+0x22>
 800eee0:	6944      	ldr	r4, [r0, #20]
 800eee2:	fa01 f202 	lsl.w	r2, r1, r2
 800eee6:	ea22 0204 	bic.w	r2, r2, r4
 800eeea:	4062      	eors	r2, r4
 800eeec:	2b1f      	cmp	r3, #31
 800eeee:	6142      	str	r2, [r0, #20]
 800eef0:	f04f 0201 	mov.w	r2, #1
 800eef4:	d8df      	bhi.n	800eeb6 <MEMS_setMagIndexToOne+0x3a>
 800eef6:	bc30      	pop	{r4, r5}
 800eef8:	6981      	ldr	r1, [r0, #24]
 800eefa:	fa02 f303 	lsl.w	r3, r2, r3
 800eefe:	ea23 0301 	bic.w	r3, r3, r1
 800ef02:	404b      	eors	r3, r1
 800ef04:	6183      	str	r3, [r0, #24]
 800ef06:	4770      	bx	lr

0800ef08 <getRotationMatrix>:
 800ef08:	b538      	push	{r3, r4, r5, lr}
 800ef0a:	4605      	mov	r5, r0
 800ef0c:	460c      	mov	r4, r1
 800ef0e:	4610      	mov	r0, r2
 800ef10:	2100      	movs	r1, #0
 800ef12:	2224      	movs	r2, #36	; 0x24
 800ef14:	f00b fc71 	bl	801a7fa <memset>
 800ef18:	ed95 5a00 	vldr	s10, [r5]
 800ef1c:	ed80 5a02 	vstr	s10, [r0, #8]
 800ef20:	edd5 5a01 	vldr	s11, [r5, #4]
 800ef24:	edc0 5a05 	vstr	s11, [r0, #20]
 800ef28:	edd5 6a02 	vldr	s13, [r5, #8]
 800ef2c:	edc0 6a08 	vstr	s13, [r0, #32]
 800ef30:	ed94 4a02 	vldr	s8, [r4, #8]
 800ef34:	ed94 7a01 	vldr	s14, [r4, #4]
 800ef38:	edd4 4a00 	vldr	s9, [r4]
 800ef3c:	ee65 7ac4 	vnmul.f32	s15, s11, s8
 800ef40:	ee26 6ae4 	vnmul.f32	s12, s13, s9
 800ef44:	eee7 7a26 	vfma.f32	s15, s14, s13
 800ef48:	ee65 6a47 	vnmul.f32	s13, s10, s14
 800ef4c:	eee4 6aa5 	vfma.f32	s13, s9, s11
 800ef50:	eeb0 7ae7 	vabs.f32	s14, s15
 800ef54:	edc0 6a06 	vstr	s13, [r0, #24]
 800ef58:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800f044 <getRotationMatrix+0x13c>
 800ef5c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ef60:	eea4 6a05 	vfma.f32	s12, s8, s10
 800ef64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef68:	eeb0 5ac6 	vabs.f32	s10, s12
 800ef6c:	bfdc      	itt	le
 800ef6e:	eeb0 7a66 	vmovle.f32	s14, s13
 800ef72:	eec7 5aa6 	vdivle.f32	s11, s15, s13
 800ef76:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800ef7a:	bfd4      	ite	le
 800ef7c:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 800ef80:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 800ef84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef88:	4603      	mov	r3, r0
 800ef8a:	ed80 6a03 	vstr	s12, [r0, #12]
 800ef8e:	edc0 7a00 	vstr	s15, [r0]
 800ef92:	d447      	bmi.n	800f024 <getRotationMatrix+0x11c>
 800ef94:	eec6 5a07 	vdiv.f32	s11, s12, s14
 800ef98:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800ef9c:	eef0 5a66 	vmov.f32	s11, s13
 800efa0:	edd3 6a06 	vldr	s13, [r3, #24]
 800efa4:	eeb0 5ae6 	vabs.f32	s10, s13
 800efa8:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800efac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efb0:	d543      	bpl.n	800f03a <getRotationMatrix+0x132>
 800efb2:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800efb6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800efba:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800efbe:	eea5 4aa4 	vfma.f32	s8, s11, s9
 800efc2:	eeb0 7a45 	vmov.f32	s14, s10
 800efc6:	eef0 5a44 	vmov.f32	s11, s8
 800efca:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800efce:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800efd2:	ee65 5a07 	vmul.f32	s11, s10, s14
 800efd6:	ee84 7aa5 	vdiv.f32	s14, s9, s11
 800efda:	edd3 3a08 	vldr	s7, [r3, #32]
 800efde:	ee67 7a87 	vmul.f32	s15, s15, s14
 800efe2:	ee26 6a07 	vmul.f32	s12, s12, s14
 800efe6:	edd3 4a02 	vldr	s9, [r3, #8]
 800efea:	ee26 7a87 	vmul.f32	s14, s13, s14
 800efee:	ed93 4a05 	vldr	s8, [r3, #20]
 800eff2:	ee66 5a63 	vnmul.f32	s11, s12, s7
 800eff6:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 800effa:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 800effe:	eea3 5aa7 	vfma.f32	s10, s7, s15
 800f002:	eee4 5a07 	vfma.f32	s11, s8, s14
 800f006:	eee6 6a24 	vfma.f32	s13, s12, s9
 800f00a:	edc3 7a00 	vstr	s15, [r3]
 800f00e:	ed83 6a03 	vstr	s12, [r3, #12]
 800f012:	ed83 7a06 	vstr	s14, [r3, #24]
 800f016:	ed83 5a04 	vstr	s10, [r3, #16]
 800f01a:	edc3 5a01 	vstr	s11, [r3, #4]
 800f01e:	edc3 6a07 	vstr	s13, [r3, #28]
 800f022:	bd38      	pop	{r3, r4, r5, pc}
 800f024:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800f028:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f02c:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800f030:	eeb0 7a45 	vmov.f32	s14, s10
 800f034:	eee6 5aa4 	vfma.f32	s11, s13, s9
 800f038:	e7b2      	b.n	800efa0 <getRotationMatrix+0x98>
 800f03a:	ee86 5a87 	vdiv.f32	s10, s13, s14
 800f03e:	eee5 5a05 	vfma.f32	s11, s10, s10
 800f042:	e7c2      	b.n	800efca <getRotationMatrix+0xc2>
 800f044:	00000000 	.word	0x00000000

0800f048 <b_dcm2q>:
 800f048:	ed90 5a08 	vldr	s10, [r0, #32]
 800f04c:	edd0 7a00 	vldr	s15, [r0]
 800f050:	edd0 6a04 	vldr	s13, [r0, #16]
 800f054:	ee37 7a85 	vadd.f32	s14, s15, s10
 800f058:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800f05c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f060:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800f064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f068:	bfc2      	ittt	gt
 800f06a:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800f06e:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800f072:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800f076:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800f07a:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800f07e:	ee35 6a47 	vsub.f32	s12, s10, s14
 800f082:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800f086:	bfd8      	it	le
 800f088:	eddf 5a40 	vldrle	s11, [pc, #256]	; 800f18c <b_dcm2q+0x144>
 800f08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f090:	bfc4      	itt	gt
 800f092:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800f096:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800f09a:	ee35 7a07 	vadd.f32	s14, s10, s14
 800f09e:	bfc8      	it	gt
 800f0a0:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800f0a4:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800f0a8:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800f0ac:	bfd8      	it	le
 800f0ae:	ed9f 6a37 	vldrle	s12, [pc, #220]	; 800f18c <b_dcm2q+0x144>
 800f0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0b6:	dd5d      	ble.n	800f174 <b_dcm2q+0x12c>
 800f0b8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800f0bc:	ee37 7a24 	vadd.f32	s14, s14, s9
 800f0c0:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800f0c4:	eef1 4ac7 	vsqrt.f32	s9, s14
 800f0c8:	ee64 4a84 	vmul.f32	s9, s9, s8
 800f0cc:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f0d0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f0d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f0d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0e0:	bf84      	itt	hi
 800f0e2:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800f0e6:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800f0ea:	edd0 6a07 	vldr	s13, [r0, #28]
 800f0ee:	bf88      	it	hi
 800f0f0:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800f0f4:	edd0 7a05 	vldr	s15, [r0, #20]
 800f0f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f0fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f100:	bf98      	it	ls
 800f102:	ed9f 7a22 	vldrls	s14, [pc, #136]	; 800f18c <b_dcm2q+0x144>
 800f106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f10a:	d43c      	bmi.n	800f186 <b_dcm2q+0x13e>
 800f10c:	bfd8      	it	le
 800f10e:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800f112:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f116:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f11a:	ed81 7a00 	vstr	s14, [r1]
 800f11e:	edd0 7a06 	vldr	s15, [r0, #24]
 800f122:	ed90 7a02 	vldr	s14, [r0, #8]
 800f126:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f12a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f132:	d425      	bmi.n	800f180 <b_dcm2q+0x138>
 800f134:	bfd8      	it	le
 800f136:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800f13a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f13e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800f142:	edc1 5a01 	vstr	s11, [r1, #4]
 800f146:	edd0 7a01 	vldr	s15, [r0, #4]
 800f14a:	ed90 7a03 	vldr	s14, [r0, #12]
 800f14e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f152:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f15a:	d40e      	bmi.n	800f17a <b_dcm2q+0x132>
 800f15c:	bfd8      	it	le
 800f15e:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800f162:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f166:	ee26 6a27 	vmul.f32	s12, s12, s15
 800f16a:	edc1 4a03 	vstr	s9, [r1, #12]
 800f16e:	ed81 6a02 	vstr	s12, [r1, #8]
 800f172:	4770      	bx	lr
 800f174:	eddf 4a05 	vldr	s9, [pc, #20]	; 800f18c <b_dcm2q+0x144>
 800f178:	e7a8      	b.n	800f0cc <b_dcm2q+0x84>
 800f17a:	eeb1 6a46 	vneg.f32	s12, s12
 800f17e:	e7f0      	b.n	800f162 <b_dcm2q+0x11a>
 800f180:	eef1 5a65 	vneg.f32	s11, s11
 800f184:	e7d9      	b.n	800f13a <b_dcm2q+0xf2>
 800f186:	eeb1 7a47 	vneg.f32	s14, s14
 800f18a:	e7c2      	b.n	800f112 <b_dcm2q+0xca>
 800f18c:	00000000 	.word	0x00000000

0800f190 <q2hpr>:
 800f190:	ed90 7a00 	vldr	s14, [r0]
 800f194:	edd0 6a01 	vldr	s13, [r0, #4]
 800f198:	edd0 7a02 	vldr	s15, [r0, #8]
 800f19c:	ed90 5a03 	vldr	s10, [r0, #12]
 800f1a0:	b510      	push	{r4, lr}
 800f1a2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800f1a6:	ed2d 8b0a 	vpush	{d8-d12}
 800f1aa:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800f1ae:	ee27 8a26 	vmul.f32	s16, s14, s13
 800f1b2:	ee67 0a07 	vmul.f32	s1, s14, s14
 800f1b6:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800f1ba:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f1be:	ee27 7a05 	vmul.f32	s14, s14, s10
 800f1c2:	ee66 6a85 	vmul.f32	s13, s13, s10
 800f1c6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f1ca:	ee78 aa08 	vadd.f32	s21, s16, s16
 800f1ce:	460c      	mov	r4, r1
 800f1d0:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800f1d4:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800f1d8:	ee30 ca00 	vadd.f32	s24, s0, s0
 800f1dc:	ee36 ba06 	vadd.f32	s22, s12, s12
 800f1e0:	ee77 8a07 	vadd.f32	s17, s14, s14
 800f1e4:	ee75 baa5 	vadd.f32	s23, s11, s11
 800f1e8:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800f1ec:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800f1f0:	bb8a      	cbnz	r2, 800f256 <q2hpr+0xc6>
 800f1f2:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800f1f6:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800f1fa:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800f1fe:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800f202:	f009 fe69 	bl	8018ed8 <atan2f>
 800f206:	eeb0 8a40 	vmov.f32	s16, s0
 800f20a:	ee38 0aab 	vadd.f32	s0, s17, s23
 800f20e:	ed84 8a00 	vstr	s16, [r4]
 800f212:	f009 fe2f 	bl	8018e74 <asinf>
 800f216:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800f21a:	eef0 8a40 	vmov.f32	s17, s0
 800f21e:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800f222:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800f226:	f009 fe57 	bl	8018ed8 <atan2f>
 800f22a:	eef1 8a68 	vneg.f32	s17, s17
 800f22e:	eeb0 9a40 	vmov.f32	s18, s0
 800f232:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f23a:	ed84 9a02 	vstr	s18, [r4, #8]
 800f23e:	edc4 8a01 	vstr	s17, [r4, #4]
 800f242:	d505      	bpl.n	800f250 <q2hpr+0xc0>
 800f244:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800f29c <q2hpr+0x10c>
 800f248:	ee38 8a00 	vadd.f32	s16, s16, s0
 800f24c:	ed84 8a00 	vstr	s16, [r4]
 800f250:	ecbd 8b0a 	vpop	{d8-d12}
 800f254:	bd10      	pop	{r4, pc}
 800f256:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800f25a:	f009 fe0b 	bl	8018e74 <asinf>
 800f25e:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800f262:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800f266:	eeb0 9a40 	vmov.f32	s18, s0
 800f26a:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800f26e:	ee38 0aab 	vadd.f32	s0, s17, s23
 800f272:	f009 fe31 	bl	8018ed8 <atan2f>
 800f276:	ee3a 8a88 	vadd.f32	s16, s21, s16
 800f27a:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800f27e:	eef0 8a40 	vmov.f32	s17, s0
 800f282:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800f286:	eeb1 0a48 	vneg.f32	s0, s16
 800f28a:	f009 fe25 	bl	8018ed8 <atan2f>
 800f28e:	eef1 8a68 	vneg.f32	s17, s17
 800f292:	eeb0 8a40 	vmov.f32	s16, s0
 800f296:	ed84 0a00 	vstr	s0, [r4]
 800f29a:	e7ca      	b.n	800f232 <q2hpr+0xa2>
 800f29c:	40c90fdb 	.word	0x40c90fdb

0800f2a0 <llEvaluate.constprop.0>:
 800f2a0:	edd0 7a00 	vldr	s15, [r0]
 800f2a4:	ed92 6a00 	vldr	s12, [r2]
 800f2a8:	ed90 7a04 	vldr	s14, [r0, #16]
 800f2ac:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800f2b0:	edd2 7a01 	vldr	s15, [r2, #4]
 800f2b4:	ed90 5a05 	vldr	s10, [r0, #20]
 800f2b8:	eee7 7a66 	vfms.f32	s15, s14, s13
 800f2bc:	edd0 5a08 	vldr	s11, [r0, #32]
 800f2c0:	ed92 7a02 	vldr	s14, [r2, #8]
 800f2c4:	ee87 6a85 	vdiv.f32	s12, s15, s10
 800f2c8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800f2cc:	ed90 5a09 	vldr	s10, [r0, #36]	; 0x24
 800f2d0:	edd0 5a0c 	vldr	s11, [r0, #48]	; 0x30
 800f2d4:	edd2 7a03 	vldr	s15, [r2, #12]
 800f2d8:	eea6 7a45 	vfms.f32	s14, s12, s10
 800f2dc:	edd0 4a0a 	vldr	s9, [r0, #40]	; 0x28
 800f2e0:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
 800f2e4:	eee6 7ae5 	vfms.f32	s15, s13, s11
 800f2e8:	eec7 5a24 	vdiv.f32	s11, s14, s9
 800f2ec:	eee6 7a45 	vfms.f32	s15, s12, s10
 800f2f0:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 800f2f4:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 800f2f8:	eee5 7ac7 	vfms.f32	s15, s11, s14
 800f2fc:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800f300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f304:	b084      	sub	sp, #16
 800f306:	edcd 6a00 	vstr	s13, [sp]
 800f30a:	ed8d 6a01 	vstr	s12, [sp, #4]
 800f30e:	edcd 5a02 	vstr	s11, [sp, #8]
 800f312:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f316:	2704      	movs	r7, #4
 800f318:	f10d 0810 	add.w	r8, sp, #16
 800f31c:	ed78 7a01 	vldmdb	r8!, {s15}
 800f320:	f101 0510 	add.w	r5, r1, #16
 800f324:	2f04      	cmp	r7, #4
 800f326:	4686      	mov	lr, r0
 800f328:	f04f 0c03 	mov.w	ip, #3
 800f32c:	ed65 7a01 	vstmdb	r5!, {s15}
 800f330:	b27b      	sxtb	r3, r7
 800f332:	d029      	beq.n	800f388 <llEvaluate.constprop.0+0xe8>
 800f334:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800f338:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800f33c:	4432      	add	r2, r6
 800f33e:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800f342:	edd2 6a00 	vldr	s13, [r2]
 800f346:	ed94 7a00 	vldr	s14, [r4]
 800f34a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f34e:	3301      	adds	r3, #1
 800f350:	b2da      	uxtb	r2, r3
 800f352:	2a04      	cmp	r2, #4
 800f354:	edc5 7a00 	vstr	s15, [r5]
 800f358:	b25b      	sxtb	r3, r3
 800f35a:	d1ed      	bne.n	800f338 <llEvaluate.constprop.0+0x98>
 800f35c:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800f360:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f364:	f01c 0fff 	tst.w	ip, #255	; 0xff
 800f368:	ed85 7a00 	vstr	s14, [r5]
 800f36c:	d013      	beq.n	800f396 <llEvaluate.constprop.0+0xf6>
 800f36e:	ed78 7a01 	vldmdb	r8!, {s15}
 800f372:	3f01      	subs	r7, #1
 800f374:	b2ff      	uxtb	r7, r7
 800f376:	2f04      	cmp	r7, #4
 800f378:	ed65 7a01 	vstmdb	r5!, {s15}
 800f37c:	f1ae 0e14 	sub.w	lr, lr, #20
 800f380:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f384:	b27b      	sxtb	r3, r7
 800f386:	d1d5      	bne.n	800f334 <llEvaluate.constprop.0+0x94>
 800f388:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800f38c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f390:	ed85 7a00 	vstr	s14, [r5]
 800f394:	e7eb      	b.n	800f36e <llEvaluate.constprop.0+0xce>
 800f396:	b004      	add	sp, #16
 800f398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f39c <MEMS_updateMagBufferIndex>:
 800f39c:	2300      	movs	r3, #0
 800f39e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3a0:	7802      	ldrb	r2, [r0, #0]
 800f3a2:	7847      	ldrb	r7, [r0, #1]
 800f3a4:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800f3a8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3ac:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800f3b0:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800f3b4:	42ba      	cmp	r2, r7
 800f3b6:	460c      	mov	r4, r1
 800f3b8:	b083      	sub	sp, #12
 800f3ba:	f103 0301 	add.w	r3, r3, #1
 800f3be:	d073      	beq.n	800f4a8 <MEMS_updateMagBufferIndex+0x10c>
 800f3c0:	1a9b      	subs	r3, r3, r2
 800f3c2:	fb93 f6f7 	sdiv	r6, r3, r7
 800f3c6:	fb07 3316 	mls	r3, r7, r6, r3
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	bfb6      	itet	lt
 800f3ce:	18fe      	addlt	r6, r7, r3
 800f3d0:	b21e      	sxthge	r6, r3
 800f3d2:	b236      	sxthlt	r6, r6
 800f3d4:	b91a      	cbnz	r2, 800f3de <MEMS_updateMagBufferIndex+0x42>
 800f3d6:	23ff      	movs	r3, #255	; 0xff
 800f3d8:	7083      	strb	r3, [r0, #2]
 800f3da:	b003      	add	sp, #12
 800f3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f3e2:	2500      	movs	r5, #0
 800f3e4:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800f3e8:	462b      	mov	r3, r5
 800f3ea:	e000      	b.n	800f3ee <MEMS_updateMagBufferIndex+0x52>
 800f3ec:	7847      	ldrb	r7, [r0, #1]
 800f3ee:	4433      	add	r3, r6
 800f3f0:	fb93 f2f7 	sdiv	r2, r3, r7
 800f3f4:	fb07 3212 	mls	r2, r7, r2, r3
 800f3f8:	b2d2      	uxtb	r2, r2
 800f3fa:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800f3fe:	f9b2 1022 	ldrsh.w	r1, [r2, #34]	; 0x22
 800f402:	3501      	adds	r5, #1
 800f404:	fb91 f3f4 	sdiv	r3, r1, r4
 800f408:	fb04 1313 	mls	r3, r4, r3, r1
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	bfb8      	it	lt
 800f410:	191b      	addlt	r3, r3, r4
 800f412:	b21b      	sxth	r3, r3
 800f414:	ee07 3a90 	vmov	s15, r3
 800f418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f41c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f420:	fef8 7a67 	vrinta.f32	s15, s15
 800f424:	f9b2 1024 	ldrsh.w	r1, [r2, #36]	; 0x24
 800f428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f42c:	fb91 f3f4 	sdiv	r3, r1, r4
 800f430:	fb04 1313 	mls	r3, r4, r3, r1
 800f434:	2b00      	cmp	r3, #0
 800f436:	bfb8      	it	lt
 800f438:	191b      	addlt	r3, r3, r4
 800f43a:	b21b      	sxth	r3, r3
 800f43c:	edcd 7a01 	vstr	s15, [sp, #4]
 800f440:	ee07 3a90 	vmov	s15, r3
 800f444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f44c:	fef8 7a67 	vrinta.f32	s15, s15
 800f450:	f9b2 2026 	ldrsh.w	r2, [r2, #38]	; 0x26
 800f454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f458:	fb92 f3f4 	sdiv	r3, r2, r4
 800f45c:	fb04 2313 	mls	r3, r4, r3, r2
 800f460:	18e2      	adds	r2, r4, r3
 800f462:	2b00      	cmp	r3, #0
 800f464:	fa0f fc83 	sxth.w	ip, r3
 800f468:	b217      	sxth	r7, r2
 800f46a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f46e:	edcd 7a01 	vstr	s15, [sp, #4]
 800f472:	bfac      	ite	ge
 800f474:	ee07 ca90 	vmovge	s15, ip
 800f478:	ee07 7a90 	vmovlt	s15, r7
 800f47c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f480:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f484:	fef8 7a67 	vrinta.f32	s15, s15
 800f488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f48c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f490:	edcd 7a01 	vstr	s15, [sp, #4]
 800f494:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f498:	f7ff fcf0 	bl	800ee7c <MEMS_setMagIndexToOne>
 800f49c:	7802      	ldrb	r2, [r0, #0]
 800f49e:	b2eb      	uxtb	r3, r5
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d8a3      	bhi.n	800f3ec <MEMS_updateMagBufferIndex+0x50>
 800f4a4:	b003      	add	sp, #12
 800f4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4a8:	fb93 f6f2 	sdiv	r6, r3, r2
 800f4ac:	fb02 3316 	mls	r3, r2, r6, r3
 800f4b0:	b21e      	sxth	r6, r3
 800f4b2:	e78f      	b.n	800f3d4 <MEMS_updateMagBufferIndex+0x38>

0800f4b4 <getMagStats.constprop.0>:
 800f4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4b8:	2400      	movs	r4, #0
 800f4ba:	4607      	mov	r7, r0
 800f4bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f4c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f4c2:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800f4c6:	6034      	str	r4, [r6, #0]
 800f4c8:	601c      	str	r4, [r3, #0]
 800f4ca:	7800      	ldrb	r0, [r0, #0]
 800f4cc:	787d      	ldrb	r5, [r7, #1]
 800f4ce:	f997 4002 	ldrsb.w	r4, [r7, #2]
 800f4d2:	42a8      	cmp	r0, r5
 800f4d4:	f000 80ba 	beq.w	800f64c <getMagStats.constprop.0+0x198>
 800f4d8:	3401      	adds	r4, #1
 800f4da:	eba4 0c00 	sub.w	ip, r4, r0
 800f4de:	fb9c f4f5 	sdiv	r4, ip, r5
 800f4e2:	ee04 0a90 	vmov	s9, r0
 800f4e6:	fb05 c414 	mls	r4, r5, r4, ip
 800f4ea:	2c00      	cmp	r4, #0
 800f4ec:	bfb8      	it	lt
 800f4ee:	1964      	addlt	r4, r4, r5
 800f4f0:	b224      	sxth	r4, r4
 800f4f2:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800f668 <getMagStats.constprop.0+0x1b4>
 800f4f6:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800f4fa:	ee25 5a85 	vmul.f32	s10, s11, s10
 800f4fe:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800f502:	2800      	cmp	r0, #0
 800f504:	f000 80ac 	beq.w	800f660 <getMagStats.constprop.0+0x1ac>
 800f508:	f100 3cff 	add.w	ip, r0, #4294967295
 800f50c:	ed9f 3a57 	vldr	s6, [pc, #348]	; 800f66c <getMagStats.constprop.0+0x1b8>
 800f510:	2000      	movs	r0, #0
 800f512:	f8b1 9000 	ldrh.w	r9, [r1]
 800f516:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800f51a:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800f51e:	fa54 fc8c 	uxtab	ip, r4, ip
 800f522:	e002      	b.n	800f52a <getMagStats.constprop.0+0x76>
 800f524:	ed93 3a00 	vldr	s6, [r3]
 800f528:	3401      	adds	r4, #1
 800f52a:	fb94 faf5 	sdiv	sl, r4, r5
 800f52e:	fb05 4a1a 	mls	sl, r5, sl, r4
 800f532:	fa5f fa8a 	uxtb.w	sl, sl
 800f536:	eb07 0aca 	add.w	sl, r7, sl, lsl #3
 800f53a:	f8ba b024 	ldrh.w	fp, [sl, #36]	; 0x24
 800f53e:	f8ba 1022 	ldrh.w	r1, [sl, #34]	; 0x22
 800f542:	ebab 0b08 	sub.w	fp, fp, r8
 800f546:	fa0f fb8b 	sxth.w	fp, fp
 800f54a:	ee06 ba90 	vmov	s13, fp
 800f54e:	eba1 0109 	sub.w	r1, r1, r9
 800f552:	b209      	sxth	r1, r1
 800f554:	ee07 1a10 	vmov	s14, r1
 800f558:	edd2 3a04 	vldr	s7, [r2, #16]
 800f55c:	f8ba 1026 	ldrh.w	r1, [sl, #38]	; 0x26
 800f560:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f564:	eba1 010e 	sub.w	r1, r1, lr
 800f568:	ed92 4a00 	vldr	s8, [r2]
 800f56c:	b209      	sxth	r1, r1
 800f56e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f572:	ee07 1a90 	vmov	s15, r1
 800f576:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800f57a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f57e:	ed92 6a08 	vldr	s12, [r2, #32]
 800f582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f586:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800f58a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800f58e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f592:	ee16 aa90 	vmov	sl, s13
 800f596:	ee17 1a10 	vmov	r1, s14
 800f59a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f59e:	fb1a fa0a 	smulbb	sl, sl, sl
 800f5a2:	b209      	sxth	r1, r1
 800f5a4:	fb01 aa01 	mla	sl, r1, r1, sl
 800f5a8:	ee17 1a90 	vmov	r1, s15
 800f5ac:	b209      	sxth	r1, r1
 800f5ae:	fb01 a101 	mla	r1, r1, r1, sl
 800f5b2:	ee07 1a90 	vmov	s15, r1
 800f5b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f5ba:	eef1 6ae7 	vsqrt.f32	s13, s15
 800f5be:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800f5c2:	ee17 1a90 	vmov	r1, s15
 800f5c6:	b209      	sxth	r1, r1
 800f5c8:	ee07 1a10 	vmov	s14, r1
 800f5cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f5d0:	ee77 7a45 	vsub.f32	s15, s14, s10
 800f5d4:	eef0 7ae7 	vabs.f32	s15, s15
 800f5d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f5dc:	ee17 1a90 	vmov	r1, s15
 800f5e0:	b209      	sxth	r1, r1
 800f5e2:	ee07 1a90 	vmov	s15, r1
 800f5e6:	ee37 7a03 	vadd.f32	s14, s14, s6
 800f5ea:	fb01 f101 	mul.w	r1, r1, r1
 800f5ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f5f2:	ed83 7a00 	vstr	s14, [r3]
 800f5f6:	ee07 1a90 	vmov	s15, r1
 800f5fa:	eef4 5ae6 	vcmpe.f32	s11, s13
 800f5fe:	ed96 7a00 	vldr	s14, [r6]
 800f602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f60a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f60e:	bf44      	itt	mi
 800f610:	3001      	addmi	r0, #1
 800f612:	b2c0      	uxtbmi	r0, r0
 800f614:	45a4      	cmp	ip, r4
 800f616:	edc6 7a00 	vstr	s15, [r6]
 800f61a:	d183      	bne.n	800f524 <getMagStats.constprop.0+0x70>
 800f61c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800f620:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800f624:	eef1 7ac7 	vsqrt.f32	s15, s14
 800f628:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800f670 <getMagStats.constprop.0+0x1bc>
 800f62c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f630:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800f634:	edc6 7a00 	vstr	s15, [r6]
 800f638:	edd3 7a00 	vldr	s15, [r3]
 800f63c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f640:	eec0 7a24 	vdiv.f32	s15, s0, s9
 800f644:	edc3 7a00 	vstr	s15, [r3]
 800f648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f64c:	1c65      	adds	r5, r4, #1
 800f64e:	fb95 f4f0 	sdiv	r4, r5, r0
 800f652:	fb00 5414 	mls	r4, r0, r4, r5
 800f656:	ee04 0a90 	vmov	s9, r0
 800f65a:	4605      	mov	r5, r0
 800f65c:	b224      	sxth	r4, r4
 800f65e:	e748      	b.n	800f4f2 <getMagStats.constprop.0+0x3e>
 800f660:	edd6 7a00 	vldr	s15, [r6]
 800f664:	e7da      	b.n	800f61c <getMagStats.constprop.0+0x168>
 800f666:	bf00      	nop
 800f668:	423c0000 	.word	0x423c0000
 800f66c:	00000000 	.word	0x00000000
 800f670:	3f59999a 	.word	0x3f59999a

0800f674 <MFX_emptyAttitude>:
 800f674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f678:	ed2d 8b10 	vpush	{d8-d15}
 800f67c:	f04f 0b00 	mov.w	fp, #0
 800f680:	2600      	movs	r6, #0
 800f682:	2700      	movs	r7, #0
 800f684:	f8df 8480 	ldr.w	r8, [pc, #1152]	; 800fb08 <MFX_emptyAttitude+0x494>
 800f688:	f6ad 6d54 	subw	sp, sp, #3668	; 0xe54
 800f68c:	f838 3b04 	ldrh.w	r3, [r8], #4
 800f690:	f88d b6ca 	strb.w	fp, [sp, #1738]	; 0x6ca
 800f694:	f8ad 36c8 	strh.w	r3, [sp, #1736]	; 0x6c8
 800f698:	f60d 0438 	addw	r4, sp, #2104	; 0x838
 800f69c:	f8dd 36c8 	ldr.w	r3, [sp, #1736]	; 0x6c8
 800f6a0:	e9c4 bb00 	strd	fp, fp, [r4]
 800f6a4:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
 800f6a8:	0c1b      	lsrs	r3, r3, #16
 800f6aa:	f88d 30ba 	strb.w	r3, [sp, #186]	; 0xba
 800f6ae:	f8c4 b008 	str.w	fp, [r4, #8]
 800f6b2:	f10d 0abc 	add.w	sl, sp, #188	; 0xbc
 800f6b6:	ab32      	add	r3, sp, #200	; 0xc8
 800f6b8:	4681      	mov	r9, r0
 800f6ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800f6be:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 800f6c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f6c6:	ab35      	add	r3, sp, #212	; 0xd4
 800f6c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f6cc:	ab38      	add	r3, sp, #224	; 0xe0
 800f6ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f6d2:	ab3b      	add	r3, sp, #236	; 0xec
 800f6d4:	f50d 65d9 	add.w	r5, sp, #1736	; 0x6c8
 800f6d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f6dc:	ab3e      	add	r3, sp, #248	; 0xf8
 800f6de:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
 800f6e2:	e9cd 672c 	strd	r6, r7, [sp, #176]	; 0xb0
 800f6e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f6ea:	4628      	mov	r0, r5
 800f6ec:	2224      	movs	r2, #36	; 0x24
 800f6ee:	f00b f884 	bl	801a7fa <memset>
 800f6f2:	4659      	mov	r1, fp
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f6fa:	f00b f87e 	bl	801a7fa <memset>
 800f6fe:	edd5 7a00 	vldr	s15, [r5]
 800f702:	ed9f 9af2 	vldr	s18, [pc, #968]	; 800facc <MFX_emptyAttitude+0x458>
 800f706:	ed95 7a01 	vldr	s14, [r5, #4]
 800f70a:	edd5 6a02 	vldr	s13, [r5, #8]
 800f70e:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 800f712:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800f716:	eddf 7aee 	vldr	s15, [pc, #952]	; 800fad0 <MFX_emptyAttitude+0x45c>
 800f71a:	ed8d 7a09 	vstr	s14, [sp, #36]	; 0x24
 800f71e:	ed8d 7a45 	vstr	s14, [sp, #276]	; 0x114
 800f722:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 800f726:	edcd 6a46 	vstr	s13, [sp, #280]	; 0x118
 800f72a:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 800f72e:	edcd 7a4f 	vstr	s15, [sp, #316]	; 0x13c
 800f732:	edcd 7a50 	vstr	s15, [sp, #320]	; 0x140
 800f736:	edcd 7a51 	vstr	s15, [sp, #324]	; 0x144
 800f73a:	edcd 7a52 	vstr	s15, [sp, #328]	; 0x148
 800f73e:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 800f742:	edcd 7a54 	vstr	s15, [sp, #336]	; 0x150
 800f746:	edcd 7a55 	vstr	s15, [sp, #340]	; 0x154
 800f74a:	edcd 7a56 	vstr	s15, [sp, #344]	; 0x158
 800f74e:	edcd 7a58 	vstr	s15, [sp, #352]	; 0x160
 800f752:	edcd 7a59 	vstr	s15, [sp, #356]	; 0x164
 800f756:	edcd 7a5a 	vstr	s15, [sp, #360]	; 0x168
 800f75a:	edcd 7a5b 	vstr	s15, [sp, #364]	; 0x16c
 800f75e:	edcd 7a5c 	vstr	s15, [sp, #368]	; 0x170
 800f762:	edcd 7a5d 	vstr	s15, [sp, #372]	; 0x174
 800f766:	edcd 7a5e 	vstr	s15, [sp, #376]	; 0x178
 800f76a:	edcd 7a5f 	vstr	s15, [sp, #380]	; 0x17c
 800f76e:	edcd 7a60 	vstr	s15, [sp, #384]	; 0x180
 800f772:	edcd 7a62 	vstr	s15, [sp, #392]	; 0x188
 800f776:	edcd 7a63 	vstr	s15, [sp, #396]	; 0x18c
 800f77a:	ed8d 9a4d 	vstr	s18, [sp, #308]	; 0x134
 800f77e:	ed8d 9a57 	vstr	s18, [sp, #348]	; 0x15c
 800f782:	ed8d 9a61 	vstr	s18, [sp, #388]	; 0x184
 800f786:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 800f78a:	edd5 4a05 	vldr	s9, [r5, #20]
 800f78e:	edd5 5a03 	vldr	s11, [r5, #12]
 800f792:	ed95 5a04 	vldr	s10, [r5, #16]
 800f796:	edcd 4a05 	vstr	s9, [sp, #20]
 800f79a:	edcd 4a49 	vstr	s9, [sp, #292]	; 0x124
 800f79e:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
 800f7a2:	edcd 5a47 	vstr	s11, [sp, #284]	; 0x11c
 800f7a6:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 800f7aa:	ed8d 5a48 	vstr	s10, [sp, #288]	; 0x120
 800f7ae:	edcd 7a65 	vstr	s15, [sp, #404]	; 0x194
 800f7b2:	edcd 7a66 	vstr	s15, [sp, #408]	; 0x198
 800f7b6:	edcd 7a67 	vstr	s15, [sp, #412]	; 0x19c
 800f7ba:	edcd 7a68 	vstr	s15, [sp, #416]	; 0x1a0
 800f7be:	edcd 7a69 	vstr	s15, [sp, #420]	; 0x1a4
 800f7c2:	edcd 7a6a 	vstr	s15, [sp, #424]	; 0x1a8
 800f7c6:	edcd 7a6c 	vstr	s15, [sp, #432]	; 0x1b0
 800f7ca:	edcd 7a6d 	vstr	s15, [sp, #436]	; 0x1b4
 800f7ce:	edcd 7a6e 	vstr	s15, [sp, #440]	; 0x1b8
 800f7d2:	edcd 7a6f 	vstr	s15, [sp, #444]	; 0x1bc
 800f7d6:	edcd 7a70 	vstr	s15, [sp, #448]	; 0x1c0
 800f7da:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 800f7de:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 800f7e2:	edcd 7a73 	vstr	s15, [sp, #460]	; 0x1cc
 800f7e6:	edcd 7a74 	vstr	s15, [sp, #464]	; 0x1d0
 800f7ea:	edcd 7a76 	vstr	s15, [sp, #472]	; 0x1d8
 800f7ee:	edcd 7a77 	vstr	s15, [sp, #476]	; 0x1dc
 800f7f2:	edcd 7a78 	vstr	s15, [sp, #480]	; 0x1e0
 800f7f6:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 800f7fa:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 800f7fe:	ed8d 9a6b 	vstr	s18, [sp, #428]	; 0x1ac
 800f802:	ed8d 9a75 	vstr	s18, [sp, #468]	; 0x1d4
 800f806:	ed8d 9a7f 	vstr	s18, [sp, #508]	; 0x1fc
 800f80a:	edcd 7a7b 	vstr	s15, [sp, #492]	; 0x1ec
 800f80e:	ed95 4a06 	vldr	s8, [r5, #24]
 800f812:	edd5 3a07 	vldr	s7, [r5, #28]
 800f816:	ed95 3a08 	vldr	s6, [r5, #32]
 800f81a:	f44f 76b4 	mov.w	r6, #360	; 0x168
 800f81e:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800f822:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f826:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800f82a:	ed8d 4a08 	vstr	s8, [sp, #32]
 800f82e:	ed8d 4a4a 	vstr	s8, [sp, #296]	; 0x128
 800f832:	edcd 3a07 	vstr	s7, [sp, #28]
 800f836:	edcd 3a4b 	vstr	s7, [sp, #300]	; 0x12c
 800f83a:	ed8d 3a06 	vstr	s6, [sp, #24]
 800f83e:	ed8d 3a4c 	vstr	s6, [sp, #304]	; 0x130
 800f842:	edcd 7a7c 	vstr	s15, [sp, #496]	; 0x1f0
 800f846:	edcd 7a7d 	vstr	s15, [sp, #500]	; 0x1f4
 800f84a:	edcd 7a7e 	vstr	s15, [sp, #504]	; 0x1f8
 800f84e:	edcd 7a80 	vstr	s15, [sp, #512]	; 0x200
 800f852:	edcd 7a81 	vstr	s15, [sp, #516]	; 0x204
 800f856:	edcd 7a82 	vstr	s15, [sp, #520]	; 0x208
 800f85a:	edcd 7a83 	vstr	s15, [sp, #524]	; 0x20c
 800f85e:	edcd 7a84 	vstr	s15, [sp, #528]	; 0x210
 800f862:	edcd 7a85 	vstr	s15, [sp, #532]	; 0x214
 800f866:	edcd 7a86 	vstr	s15, [sp, #536]	; 0x218
 800f86a:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 800f86e:	edcd 7a88 	vstr	s15, [sp, #544]	; 0x220
 800f872:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
 800f876:	edcd 7a8b 	vstr	s15, [sp, #556]	; 0x22c
 800f87a:	edcd 7a8c 	vstr	s15, [sp, #560]	; 0x230
 800f87e:	edcd 7a8d 	vstr	s15, [sp, #564]	; 0x234
 800f882:	edcd 7a8e 	vstr	s15, [sp, #568]	; 0x238
 800f886:	edcd 7a8f 	vstr	s15, [sp, #572]	; 0x23c
 800f88a:	edcd 7a90 	vstr	s15, [sp, #576]	; 0x240
 800f88e:	edcd 7a91 	vstr	s15, [sp, #580]	; 0x244
 800f892:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 800f896:	ed8d 9a89 	vstr	s18, [sp, #548]	; 0x224
 800f89a:	ed8d 9a93 	vstr	s18, [sp, #588]	; 0x24c
 800f89e:	edcd 7a94 	vstr	s15, [sp, #592]	; 0x250
 800f8a2:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800f8a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8aa:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800f8ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8b2:	f8d8 3000 	ldr.w	r3, [r8]
 800f8b6:	4659      	mov	r1, fp
 800f8b8:	4632      	mov	r2, r6
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	eef0 fa67 	vmov.f32	s31, s15
 800f8c0:	f8cc 3000 	str.w	r3, [ip]
 800f8c4:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 800f8c8:	edcd 7a95 	vstr	s15, [sp, #596]	; 0x254
 800f8cc:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
 800f8d0:	edcd 7a96 	vstr	s15, [sp, #600]	; 0x258
 800f8d4:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 800f8d8:	edcd 7a97 	vstr	s15, [sp, #604]	; 0x25c
 800f8dc:	edcd 7a98 	vstr	s15, [sp, #608]	; 0x260
 800f8e0:	edcd 7a99 	vstr	s15, [sp, #612]	; 0x264
 800f8e4:	edcd 7a9a 	vstr	s15, [sp, #616]	; 0x268
 800f8e8:	f00a ff87 	bl	801a7fa <memset>
 800f8ec:	4632      	mov	r2, r6
 800f8ee:	4621      	mov	r1, r4
 800f8f0:	a8a0      	add	r0, sp, #640	; 0x280
 800f8f2:	f8ad 7278 	strh.w	r7, [sp, #632]	; 0x278
 800f8f6:	f00a ff73 	bl	801a7e0 <memcpy>
 800f8fa:	4632      	mov	r2, r6
 800f8fc:	4659      	mov	r1, fp
 800f8fe:	4620      	mov	r0, r4
 800f900:	ed8d 8a9f 	vstr	s16, [sp, #636]	; 0x27c
 800f904:	f00a ff79 	bl	801a7fa <memset>
 800f908:	4632      	mov	r2, r6
 800f90a:	4621      	mov	r1, r4
 800f90c:	a8fc      	add	r0, sp, #1008	; 0x3f0
 800f90e:	f50d 68ab 	add.w	r8, sp, #1368	; 0x558
 800f912:	f8ad 73e8 	strh.w	r7, [sp, #1000]	; 0x3e8
 800f916:	f00a ff63 	bl	801a7e0 <memcpy>
 800f91a:	4632      	mov	r2, r6
 800f91c:	4659      	mov	r1, fp
 800f91e:	4620      	mov	r0, r4
 800f920:	ed8d 8afb 	vstr	s16, [sp, #1004]	; 0x3ec
 800f924:	f00a ff69 	bl	801a7fa <memset>
 800f928:	4632      	mov	r2, r6
 800f92a:	4621      	mov	r1, r4
 800f92c:	f8a8 7000 	strh.w	r7, [r8]
 800f930:	f50d 60ac 	add.w	r0, sp, #1376	; 0x560
 800f934:	f00a ff54 	bl	801a7e0 <memcpy>
 800f938:	4632      	mov	r2, r6
 800f93a:	4659      	mov	r1, fp
 800f93c:	4620      	mov	r0, r4
 800f93e:	ed88 8a01 	vstr	s16, [r8, #4]
 800f942:	f00a ff5a 	bl	801a7fa <memset>
 800f946:	4632      	mov	r2, r6
 800f948:	4621      	mov	r1, r4
 800f94a:	802f      	strh	r7, [r5, #0]
 800f94c:	ae1e      	add	r6, sp, #120	; 0x78
 800f94e:	f50d 60da 	add.w	r0, sp, #1744	; 0x6d0
 800f952:	f00a ff45 	bl	801a7e0 <memcpy>
 800f956:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800f95a:	f8cd 8000 	str.w	r8, [sp]
 800f95e:	9403      	str	r4, [sp, #12]
 800f960:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 800f964:	eddf 5a5b 	vldr	s11, [pc, #364]	; 800fad4 <MFX_emptyAttitude+0x460>
 800f968:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 800fad8 <MFX_emptyAttitude+0x464>
 800f96c:	ed85 8a01 	vstr	s16, [r5, #4]
 800f970:	f04f 0501 	mov.w	r5, #1
 800f974:	4f59      	ldr	r7, [pc, #356]	; (800fadc <MFX_emptyAttitude+0x468>)
 800f976:	f8df e194 	ldr.w	lr, [pc, #404]	; 800fb0c <MFX_emptyAttitude+0x498>
 800f97a:	f8df c194 	ldr.w	ip, [pc, #404]	; 800fb10 <MFX_emptyAttitude+0x49c>
 800f97e:	abfa      	add	r3, sp, #1000	; 0x3e8
 800f980:	aa9e      	add	r2, sp, #632	; 0x278
 800f982:	a915      	add	r1, sp, #84	; 0x54
 800f984:	9723      	str	r7, [sp, #140]	; 0x8c
 800f986:	2001      	movs	r0, #1
 800f988:	af35      	add	r7, sp, #212	; 0xd4
 800f98a:	2600      	movs	r6, #0
 800f98c:	ed8d 5a24 	vstr	s10, [sp, #144]	; 0x90
 800f990:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 800f994:	ed8d 6a20 	vstr	s12, [sp, #128]	; 0x80
 800f998:	f88d 5078 	strb.w	r5, [sp, #120]	; 0x78
 800f99c:	f8cd e084 	str.w	lr, [sp, #132]	; 0x84
 800f9a0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 800f9a4:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 800f9a8:	edcd fa26 	vstr	s31, [sp, #152]	; 0x98
 800f9ac:	edcd fa27 	vstr	s31, [sp, #156]	; 0x9c
 800f9b0:	edcd fa28 	vstr	s31, [sp, #160]	; 0xa0
 800f9b4:	edcd fa29 	vstr	s31, [sp, #164]	; 0xa4
 800f9b8:	f7fe fed4 	bl	800e764 <DataHist_parameters>
 800f9bc:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 800f9c0:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 800f9c4:	ed9f 2a46 	vldr	s4, [pc, #280]	; 800fae0 <MFX_emptyAttitude+0x46c>
 800f9c8:	eddf 2a46 	vldr	s5, [pc, #280]	; 800fae4 <MFX_emptyAttitude+0x470>
 800f9cc:	eddf 6a46 	vldr	s13, [pc, #280]	; 800fae8 <MFX_emptyAttitude+0x474>
 800f9d0:	970e      	str	r7, [sp, #56]	; 0x38
 800f9d2:	ed9f 3a46 	vldr	s6, [pc, #280]	; 800faec <MFX_emptyAttitude+0x478>
 800f9d6:	2700      	movs	r7, #0
 800f9d8:	eddf 3a45 	vldr	s7, [pc, #276]	; 800faf0 <MFX_emptyAttitude+0x47c>
 800f9dc:	ed9f 4a45 	vldr	s8, [pc, #276]	; 800faf4 <MFX_emptyAttitude+0x480>
 800f9e0:	eddf 4a45 	vldr	s9, [pc, #276]	; 800faf8 <MFX_emptyAttitude+0x484>
 800f9e4:	f8c9 207c 	str.w	r2, [r9, #124]	; 0x7c
 800f9e8:	f8df e128 	ldr.w	lr, [pc, #296]	; 800fb14 <MFX_emptyAttitude+0x4a0>
 800f9ec:	4a43      	ldr	r2, [pc, #268]	; (800fafc <MFX_emptyAttitude+0x488>)
 800f9ee:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800f9f2:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
 800f9f6:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
 800f9fa:	ab38      	add	r3, sp, #224	; 0xe0
 800f9fc:	f8c9 200c 	str.w	r2, [r9, #12]
 800fa00:	f8c9 e030 	str.w	lr, [r9, #48]	; 0x30
 800fa04:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 800fa08:	f8bd e0b8 	ldrh.w	lr, [sp, #184]	; 0xb8
 800fa0c:	f89d c0ba 	ldrb.w	ip, [sp, #186]	; 0xba
 800fa10:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa12:	ab3b      	add	r3, sp, #236	; 0xec
 800fa14:	e9c9 6716 	strd	r6, r7, [r9, #88]	; 0x58
 800fa18:	e9c9 6718 	strd	r6, r7, [r9, #96]	; 0x60
 800fa1c:	e9c9 671a 	strd	r6, r7, [r9, #104]	; 0x68
 800fa20:	edc9 1a05 	vstr	s3, [r9, #20]
 800fa24:	ed89 2a06 	vstr	s4, [r9, #24]
 800fa28:	edc9 2a07 	vstr	s5, [r9, #28]
 800fa2c:	ed89 3a08 	vstr	s6, [r9, #32]
 800fa30:	edc9 3a09 	vstr	s7, [r9, #36]	; 0x24
 800fa34:	ed89 4a0a 	vstr	s8, [r9, #40]	; 0x28
 800fa38:	edc9 4a0b 	vstr	s9, [r9, #44]	; 0x2c
 800fa3c:	edc9 6a0d 	vstr	s13, [r9, #52]	; 0x34
 800fa40:	9310      	str	r3, [sp, #64]	; 0x40
 800fa42:	f8a9 e070 	strh.w	lr, [r9, #112]	; 0x70
 800fa46:	f889 c072 	strb.w	ip, [r9, #114]	; 0x72
 800fa4a:	f8c9 0080 	str.w	r0, [r9, #128]	; 0x80
 800fa4e:	ed89 8a02 	vstr	s16, [r9, #8]
 800fa52:	ed89 8a04 	vstr	s16, [r9, #16]
 800fa56:	f8c9 1084 	str.w	r1, [r9, #132]	; 0x84
 800fa5a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fa5c:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
 800fa60:	460f      	mov	r7, r1
 800fa62:	cf07      	ldmia	r7!, {r0, r1, r2}
 800fa64:	f8c9 2094 	str.w	r2, [r9, #148]	; 0x94
 800fa68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa6a:	ab3e      	add	r3, sp, #248	; 0xf8
 800fa6c:	4617      	mov	r7, r2
 800fa6e:	f240 1801 	movw	r8, #257	; 0x101
 800fa72:	461d      	mov	r5, r3
 800fa74:	ed9f 5a22 	vldr	s10, [pc, #136]	; 800fb00 <MFX_emptyAttitude+0x48c>
 800fa78:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800fa7c:	ed9f 6a21 	vldr	s12, [pc, #132]	; 800fb04 <MFX_emptyAttitude+0x490>
 800fa80:	f509 7346 	add.w	r3, r9, #792	; 0x318
 800fa84:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
 800fa88:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
 800fa8c:	461e      	mov	r6, r3
 800fa8e:	cf07      	ldmia	r7!, {r0, r1, r2}
 800fa90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fa92:	f8c9 0098 	str.w	r0, [r9, #152]	; 0x98
 800fa96:	f8c9 109c 	str.w	r1, [r9, #156]	; 0x9c
 800fa9a:	f8c9 20a0 	str.w	r2, [r9, #160]	; 0xa0
 800fa9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800faa0:	f8c9 00a4 	str.w	r0, [r9, #164]	; 0xa4
 800faa4:	f8c9 10a8 	str.w	r1, [r9, #168]	; 0xa8
 800faa8:	f8c9 20ac 	str.w	r2, [r9, #172]	; 0xac
 800faac:	ed89 5a65 	vstr	s10, [r9, #404]	; 0x194
 800fab0:	edc9 5a66 	vstr	s11, [r9, #408]	; 0x198
 800fab4:	ed89 6a67 	vstr	s12, [r9, #412]	; 0x19c
 800fab8:	f8c9 8000 	str.w	r8, [r9]
 800fabc:	f8a9 8004 	strh.w	r8, [r9, #4]
 800fac0:	edc9 fa64 	vstr	s31, [r9, #400]	; 0x190
 800fac4:	edc9 fa30 	vstr	s31, [r9, #192]	; 0xc0
 800fac8:	e026      	b.n	800fb18 <MFX_emptyAttitude+0x4a4>
 800faca:	bf00      	nop
 800facc:	447a0000 	.word	0x447a0000
 800fad0:	00000000 	.word	0x00000000
 800fad4:	3ea25c13 	.word	0x3ea25c13
 800fad8:	3e93ffa3 	.word	0x3e93ffa3
 800fadc:	3d57bb3d 	.word	0x3d57bb3d
 800fae0:	3a9d4952 	.word	0x3a9d4952
 800fae4:	3ac49ba6 	.word	0x3ac49ba6
 800fae8:	3f2ac083 	.word	0x3f2ac083
 800faec:	3b03126f 	.word	0x3b03126f
 800faf0:	3a83126f 	.word	0x3a83126f
 800faf4:	3f639581 	.word	0x3f639581
 800faf8:	402ab021 	.word	0x402ab021
 800fafc:	01010100 	.word	0x01010100
 800fb00:	3f4ccccd 	.word	0x3f4ccccd
 800fb04:	3f333333 	.word	0x3f333333
 800fb08:	0801b11c 	.word	0x0801b11c
 800fb0c:	3e5cec8f 	.word	0x3e5cec8f
 800fb10:	3e006d36 	.word	0x3e006d36
 800fb14:	3f13f7cf 	.word	0x3f13f7cf
 800fb18:	edc9 fa4a 	vstr	s31, [r9, #296]	; 0x128
 800fb1c:	edc9 fa31 	vstr	s31, [r9, #196]	; 0xc4
 800fb20:	edc9 fa4b 	vstr	s31, [r9, #300]	; 0x12c
 800fb24:	cd07      	ldmia	r5!, {r0, r1, r2}
 800fb26:	edc9 fa32 	vstr	s31, [r9, #200]	; 0xc8
 800fb2a:	f8c9 00b0 	str.w	r0, [r9, #176]	; 0xb0
 800fb2e:	f8c9 10b4 	str.w	r1, [r9, #180]	; 0xb4
 800fb32:	f8c9 20b8 	str.w	r2, [r9, #184]	; 0xb8
 800fb36:	edc9 fa4c 	vstr	s31, [r9, #304]	; 0x130
 800fb3a:	edc9 fa33 	vstr	s31, [r9, #204]	; 0xcc
 800fb3e:	edc9 fa4d 	vstr	s31, [r9, #308]	; 0x134
 800fb42:	edc9 fa34 	vstr	s31, [r9, #208]	; 0xd0
 800fb46:	edc9 fa4e 	vstr	s31, [r9, #312]	; 0x138
 800fb4a:	edc9 fa35 	vstr	s31, [r9, #212]	; 0xd4
 800fb4e:	edc9 fa4f 	vstr	s31, [r9, #316]	; 0x13c
 800fb52:	edc9 fa36 	vstr	s31, [r9, #216]	; 0xd8
 800fb56:	edc9 fa50 	vstr	s31, [r9, #320]	; 0x140
 800fb5a:	edc9 fa37 	vstr	s31, [r9, #220]	; 0xdc
 800fb5e:	edc9 fa51 	vstr	s31, [r9, #324]	; 0x144
 800fb62:	edc9 fa38 	vstr	s31, [r9, #224]	; 0xe0
 800fb66:	edc9 fa52 	vstr	s31, [r9, #328]	; 0x148
 800fb6a:	edc9 fa39 	vstr	s31, [r9, #228]	; 0xe4
 800fb6e:	edc9 fa53 	vstr	s31, [r9, #332]	; 0x14c
 800fb72:	edc9 fa3a 	vstr	s31, [r9, #232]	; 0xe8
 800fb76:	edc9 fa54 	vstr	s31, [r9, #336]	; 0x150
 800fb7a:	edc9 fa3b 	vstr	s31, [r9, #236]	; 0xec
 800fb7e:	edc9 fa55 	vstr	s31, [r9, #340]	; 0x154
 800fb82:	edc9 fa3c 	vstr	s31, [r9, #240]	; 0xf0
 800fb86:	edc9 fa56 	vstr	s31, [r9, #344]	; 0x158
 800fb8a:	edc9 fa3d 	vstr	s31, [r9, #244]	; 0xf4
 800fb8e:	edc9 fa57 	vstr	s31, [r9, #348]	; 0x15c
 800fb92:	edc9 fa3e 	vstr	s31, [r9, #248]	; 0xf8
 800fb96:	edc9 fa58 	vstr	s31, [r9, #352]	; 0x160
 800fb9a:	edc9 fa3f 	vstr	s31, [r9, #252]	; 0xfc
 800fb9e:	ed9d 6a0d 	vldr	s12, [sp, #52]	; 0x34
 800fba2:	edc9 fa59 	vstr	s31, [r9, #356]	; 0x164
 800fba6:	ed89 6a6c 	vstr	s12, [r9, #432]	; 0x1b0
 800fbaa:	edc9 fa40 	vstr	s31, [r9, #256]	; 0x100
 800fbae:	edc9 fa5a 	vstr	s31, [r9, #360]	; 0x168
 800fbb2:	edc9 fa41 	vstr	s31, [r9, #260]	; 0x104
 800fbb6:	edc9 fa5b 	vstr	s31, [r9, #364]	; 0x16c
 800fbba:	edc9 fa42 	vstr	s31, [r9, #264]	; 0x108
 800fbbe:	edc9 fa5c 	vstr	s31, [r9, #368]	; 0x170
 800fbc2:	edc9 fa43 	vstr	s31, [r9, #268]	; 0x10c
 800fbc6:	edc9 fa5d 	vstr	s31, [r9, #372]	; 0x174
 800fbca:	edc9 fa44 	vstr	s31, [r9, #272]	; 0x110
 800fbce:	edc9 fa5e 	vstr	s31, [r9, #376]	; 0x178
 800fbd2:	edc9 fa45 	vstr	s31, [r9, #276]	; 0x114
 800fbd6:	edc9 fa5f 	vstr	s31, [r9, #380]	; 0x17c
 800fbda:	edc9 fa46 	vstr	s31, [r9, #280]	; 0x118
 800fbde:	edc9 fa60 	vstr	s31, [r9, #384]	; 0x180
 800fbe2:	edc9 fa47 	vstr	s31, [r9, #284]	; 0x11c
 800fbe6:	edc9 fa61 	vstr	s31, [r9, #388]	; 0x184
 800fbea:	edc9 fa48 	vstr	s31, [r9, #288]	; 0x120
 800fbee:	edc9 fa62 	vstr	s31, [r9, #392]	; 0x188
 800fbf2:	edc9 fa49 	vstr	s31, [r9, #292]	; 0x124
 800fbf6:	edc9 fa63 	vstr	s31, [r9, #396]	; 0x18c
 800fbfa:	ed89 9a75 	vstr	s18, [r9, #468]	; 0x1d4
 800fbfe:	edc9 fa76 	vstr	s31, [r9, #472]	; 0x1d8
 800fc02:	edc9 fa77 	vstr	s31, [r9, #476]	; 0x1dc
 800fc06:	edc9 fa78 	vstr	s31, [r9, #480]	; 0x1e0
 800fc0a:	edc9 fa79 	vstr	s31, [r9, #484]	; 0x1e4
 800fc0e:	edc9 fa7a 	vstr	s31, [r9, #488]	; 0x1e8
 800fc12:	edc9 fa7b 	vstr	s31, [r9, #492]	; 0x1ec
 800fc16:	f889 b1a4 	strb.w	fp, [r9, #420]	; 0x1a4
 800fc1a:	f8c9 b1a6 	str.w	fp, [r9, #422]	; 0x1a6
 800fc1e:	edc9 fa7c 	vstr	s31, [r9, #496]	; 0x1f0
 800fc22:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 800fc26:	eddd 5a0c 	vldr	s11, [sp, #48]	; 0x30
 800fc2a:	ed89 6a6d 	vstr	s12, [r9, #436]	; 0x1b4
 800fc2e:	f44f 1a48 	mov.w	sl, #3276800	; 0x320000
 800fc32:	ed9d 6a0b 	vldr	s12, [sp, #44]	; 0x2c
 800fc36:	edc9 5a6f 	vstr	s11, [r9, #444]	; 0x1bc
 800fc3a:	ed89 6a6e 	vstr	s12, [r9, #440]	; 0x1b8
 800fc3e:	f8c9 a1a0 	str.w	sl, [r9, #416]	; 0x1a0
 800fc42:	edc9 fa7d 	vstr	s31, [r9, #500]	; 0x1f4
 800fc46:	edc9 fa7e 	vstr	s31, [r9, #504]	; 0x1f8
 800fc4a:	ed89 9a7f 	vstr	s18, [r9, #508]	; 0x1fc
 800fc4e:	edc9 fa80 	vstr	s31, [r9, #512]	; 0x200
 800fc52:	edc9 fa81 	vstr	s31, [r9, #516]	; 0x204
 800fc56:	edc9 fa82 	vstr	s31, [r9, #520]	; 0x208
 800fc5a:	edc9 fa83 	vstr	s31, [r9, #524]	; 0x20c
 800fc5e:	edc9 fa84 	vstr	s31, [r9, #528]	; 0x210
 800fc62:	edc9 fa85 	vstr	s31, [r9, #532]	; 0x214
 800fc66:	edc9 fa86 	vstr	s31, [r9, #536]	; 0x218
 800fc6a:	edc9 fa87 	vstr	s31, [r9, #540]	; 0x21c
 800fc6e:	edc9 fa88 	vstr	s31, [r9, #544]	; 0x220
 800fc72:	ed89 9a89 	vstr	s18, [r9, #548]	; 0x224
 800fc76:	edc9 fa8a 	vstr	s31, [r9, #552]	; 0x228
 800fc7a:	edc9 fa8b 	vstr	s31, [r9, #556]	; 0x22c
 800fc7e:	edc9 fa8c 	vstr	s31, [r9, #560]	; 0x230
 800fc82:	edc9 fa8d 	vstr	s31, [r9, #564]	; 0x234
 800fc86:	edc9 fa8e 	vstr	s31, [r9, #568]	; 0x238
 800fc8a:	edc9 fa8f 	vstr	s31, [r9, #572]	; 0x23c
 800fc8e:	edc9 fa90 	vstr	s31, [r9, #576]	; 0x240
 800fc92:	edc9 fa91 	vstr	s31, [r9, #580]	; 0x244
 800fc96:	edc9 fa92 	vstr	s31, [r9, #584]	; 0x248
 800fc9a:	ed89 9a93 	vstr	s18, [r9, #588]	; 0x24c
 800fc9e:	edc9 fa94 	vstr	s31, [r9, #592]	; 0x250
 800fca2:	edc9 fa95 	vstr	s31, [r9, #596]	; 0x254
 800fca6:	edc9 fa96 	vstr	s31, [r9, #600]	; 0x258
 800fcaa:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 800fcae:	eddd 4a05 	vldr	s9, [sp, #20]
 800fcb2:	ed9d 4a08 	vldr	s8, [sp, #32]
 800fcb6:	ed89 5a70 	vstr	s10, [r9, #448]	; 0x1c0
 800fcba:	edc9 4a71 	vstr	s9, [r9, #452]	; 0x1c4
 800fcbe:	ed89 4a72 	vstr	s8, [r9, #456]	; 0x1c8
 800fcc2:	edc9 fa97 	vstr	s31, [r9, #604]	; 0x25c
 800fcc6:	edc9 fa98 	vstr	s31, [r9, #608]	; 0x260
 800fcca:	edc9 fa99 	vstr	s31, [r9, #612]	; 0x264
 800fcce:	edc9 fa9a 	vstr	s31, [r9, #616]	; 0x268
 800fcd2:	edc9 fa9b 	vstr	s31, [r9, #620]	; 0x26c
 800fcd6:	edc9 fa9c 	vstr	s31, [r9, #624]	; 0x270
 800fcda:	ed89 9a9d 	vstr	s18, [r9, #628]	; 0x274
 800fcde:	edc9 fa9e 	vstr	s31, [r9, #632]	; 0x278
 800fce2:	edc9 fa9f 	vstr	s31, [r9, #636]	; 0x27c
 800fce6:	edc9 faa0 	vstr	s31, [r9, #640]	; 0x280
 800fcea:	edc9 faa1 	vstr	s31, [r9, #644]	; 0x284
 800fcee:	edc9 faa2 	vstr	s31, [r9, #648]	; 0x288
 800fcf2:	edc9 faa3 	vstr	s31, [r9, #652]	; 0x28c
 800fcf6:	edc9 faa4 	vstr	s31, [r9, #656]	; 0x290
 800fcfa:	edc9 faa5 	vstr	s31, [r9, #660]	; 0x294
 800fcfe:	edc9 faa6 	vstr	s31, [r9, #664]	; 0x298
 800fd02:	ed89 9aa7 	vstr	s18, [r9, #668]	; 0x29c
 800fd06:	edc9 faa8 	vstr	s31, [r9, #672]	; 0x2a0
 800fd0a:	edc9 faa9 	vstr	s31, [r9, #676]	; 0x2a4
 800fd0e:	edc9 faaa 	vstr	s31, [r9, #680]	; 0x2a8
 800fd12:	edc9 faab 	vstr	s31, [r9, #684]	; 0x2ac
 800fd16:	edc9 faac 	vstr	s31, [r9, #688]	; 0x2b0
 800fd1a:	edc9 faad 	vstr	s31, [r9, #692]	; 0x2b4
 800fd1e:	edc9 faae 	vstr	s31, [r9, #696]	; 0x2b8
 800fd22:	edc9 faaf 	vstr	s31, [r9, #700]	; 0x2bc
 800fd26:	edc9 fab0 	vstr	s31, [r9, #704]	; 0x2c0
 800fd2a:	f04f 0501 	mov.w	r5, #1
 800fd2e:	ed89 9ab1 	vstr	s18, [r9, #708]	; 0x2c4
 800fd32:	eddd 3a07 	vldr	s7, [sp, #28]
 800fd36:	ed9d 1a13 	vldr	s2, [sp, #76]	; 0x4c
 800fd3a:	ed9d 3a06 	vldr	s6, [sp, #24]
 800fd3e:	eddd 0a12 	vldr	s1, [sp, #72]	; 0x48
 800fd42:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
 800fd46:	7820      	ldrb	r0, [r4, #0]
 800fd48:	f50d 6e4b 	add.w	lr, sp, #3248	; 0xcb0
 800fd4c:	f50d 6c34 	add.w	ip, sp, #2880	; 0xb40
 800fd50:	f50d 631d 	add.w	r3, sp, #2512	; 0x9d0
 800fd54:	f60d 013c 	addw	r1, sp, #2108	; 0x83c
 800fd58:	f50d 6206 	add.w	r2, sp, #2144	; 0x860
 800fd5c:	f50d 6462 	add.w	r4, sp, #3616	; 0xe20
 800fd60:	edc9 3a73 	vstr	s7, [r9, #460]	; 0x1cc
 800fd64:	ed89 1abc 	vstr	s2, [r9, #752]	; 0x2f0
 800fd68:	ed89 3a74 	vstr	s6, [r9, #464]	; 0x1d0
 800fd6c:	edc9 0abd 	vstr	s1, [r9, #756]	; 0x2f4
 800fd70:	ed89 0abe 	vstr	s0, [r9, #760]	; 0x2f8
 800fd74:	f889 51ac 	strb.w	r5, [r9, #428]	; 0x1ac
 800fd78:	edc9 fab2 	vstr	s31, [r9, #712]	; 0x2c8
 800fd7c:	edc9 fab3 	vstr	s31, [r9, #716]	; 0x2cc
 800fd80:	edc9 fab4 	vstr	s31, [r9, #720]	; 0x2d0
 800fd84:	edc9 fab5 	vstr	s31, [r9, #724]	; 0x2d4
 800fd88:	edc9 fab6 	vstr	s31, [r9, #728]	; 0x2d8
 800fd8c:	edc9 fab7 	vstr	s31, [r9, #732]	; 0x2dc
 800fd90:	edc9 fab8 	vstr	s31, [r9, #736]	; 0x2e0
 800fd94:	edc9 fab9 	vstr	s31, [r9, #740]	; 0x2e4
 800fd98:	edc9 faba 	vstr	s31, [r9, #744]	; 0x2e8
 800fd9c:	ed89 9abb 	vstr	s18, [r9, #748]	; 0x2ec
 800fda0:	edc9 fabf 	vstr	s31, [r9, #764]	; 0x2fc
 800fda4:	edc9 fac0 	vstr	s31, [r9, #768]	; 0x300
 800fda8:	edc9 fac1 	vstr	s31, [r9, #772]	; 0x304
 800fdac:	edc9 fac2 	vstr	s31, [r9, #776]	; 0x308
 800fdb0:	ed89 9ac5 	vstr	s18, [r9, #788]	; 0x314
 800fdb4:	edc9 fac3 	vstr	s31, [r9, #780]	; 0x30c
 800fdb8:	edc9 fac4 	vstr	s31, [r9, #784]	; 0x310
 800fdbc:	e9cd e401 	strd	lr, r4, [sp, #4]
 800fdc0:	9603      	str	r6, [sp, #12]
 800fdc2:	f8cd c000 	str.w	ip, [sp]
 800fdc6:	f7fe fccd 	bl	800e764 <DataHist_parameters>
 800fdca:	f609 1238 	addw	r2, r9, #2360	; 0x938
 800fdce:	f509 6313 	add.w	r3, r9, #2352	; 0x930
 800fdd2:	9205      	str	r2, [sp, #20]
 800fdd4:	edc3 fa00 	vstr	s31, [r3]
 800fdd8:	f609 1164 	addw	r1, r9, #2404	; 0x964
 800fddc:	9b05      	ldr	r3, [sp, #20]
 800fdde:	9106      	str	r1, [sp, #24]
 800fde0:	f609 1a34 	addw	sl, r9, #2356	; 0x934
 800fde4:	edca fa00 	vstr	s31, [sl]
 800fde8:	f509 6217 	add.w	r2, r9, #2416	; 0x970
 800fdec:	edc3 fa00 	vstr	s31, [r3]
 800fdf0:	9b06      	ldr	r3, [sp, #24]
 800fdf2:	9207      	str	r2, [sp, #28]
 800fdf4:	f609 183c 	addw	r8, r9, #2364	; 0x93c
 800fdf8:	f509 6e14 	add.w	lr, r9, #2368	; 0x940
 800fdfc:	f609 1c5c 	addw	ip, r9, #2396	; 0x95c
 800fe00:	f609 1744 	addw	r7, r9, #2372	; 0x944
 800fe04:	f509 6616 	add.w	r6, r9, #2400	; 0x960
 800fe08:	f609 1548 	addw	r5, r9, #2376	; 0x948
 800fe0c:	ed88 8a00 	vstr	s16, [r8]
 800fe10:	edce fa00 	vstr	s31, [lr]
 800fe14:	edcc fa00 	vstr	s31, [ip]
 800fe18:	edc7 fa00 	vstr	s31, [r7]
 800fe1c:	edc6 fa00 	vstr	s31, [r6]
 800fe20:	edc5 fa00 	vstr	s31, [r5]
 800fe24:	edc3 fa00 	vstr	s31, [r3]
 800fe28:	9b07      	ldr	r3, [sp, #28]
 800fe2a:	f609 1454 	addw	r4, r9, #2388	; 0x954
 800fe2e:	f609 1058 	addw	r0, r9, #2392	; 0x958
 800fe32:	f609 1168 	addw	r1, r9, #2408	; 0x968
 800fe36:	f8c9 b94c 	str.w	fp, [r9, #2380]	; 0x94c
 800fe3a:	f8a9 b950 	strh.w	fp, [r9, #2384]	; 0x950
 800fe3e:	edc4 fa00 	vstr	s31, [r4]
 800fe42:	ed80 8a00 	vstr	s16, [r0]
 800fe46:	edc1 fa00 	vstr	s31, [r1]
 800fe4a:	edc3 fa00 	vstr	s31, [r3]
 800fe4e:	230a      	movs	r3, #10
 800fe50:	f609 126c 	addw	r2, r9, #2412	; 0x96c
 800fe54:	edc2 fa00 	vstr	s31, [r2]
 800fe58:	f889 b978 	strb.w	fp, [r9, #2424]	; 0x978
 800fe5c:	f8c9 3974 	str.w	r3, [r9, #2420]	; 0x974
 800fe60:	f60d 6d54 	addw	sp, sp, #3668	; 0xe54
 800fe64:	ecbd 8b10 	vpop	{d8-d15}
 800fe68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe6c <output_update>:
 800fe6c:	ed90 7a00 	vldr	s14, [r0]
 800fe70:	edd0 7a01 	vldr	s15, [r0, #4]
 800fe74:	edd0 5a02 	vldr	s11, [r0, #8]
 800fe78:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800fe7c:	ee27 6a07 	vmul.f32	s12, s14, s14
 800fe80:	ed90 5a03 	vldr	s10, [r0, #12]
 800fe84:	ee27 4aa5 	vmul.f32	s8, s15, s11
 800fe88:	ee36 6a26 	vadd.f32	s12, s12, s13
 800fe8c:	ee67 6a05 	vmul.f32	s13, s14, s10
 800fe90:	ee36 6a06 	vadd.f32	s12, s12, s12
 800fe94:	ee27 7a25 	vmul.f32	s14, s14, s11
 800fe98:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800fe9c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800fea0:	ee76 6a84 	vadd.f32	s13, s13, s8
 800fea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fea8:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800feac:	460f      	mov	r7, r1
 800feae:	4615      	mov	r5, r2
 800feb0:	461e      	mov	r6, r3
 800feb2:	ee74 5ac6 	vsub.f32	s11, s9, s12
 800feb6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800feba:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800febe:	ee37 7a07 	vadd.f32	s14, s14, s14
 800fec2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800fec6:	f1bc 0f00 	cmp.w	ip, #0
 800feca:	d146      	bne.n	800ff5a <output_update+0xee>
 800fecc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fed0:	eef1 6a66 	vneg.f32	s13, s13
 800fed4:	edc3 7a01 	vstr	s15, [r3, #4]
 800fed8:	edc3 6a00 	vstr	s13, [r3]
 800fedc:	edc3 5a02 	vstr	s11, [r3, #8]
 800fee0:	4662      	mov	r2, ip
 800fee2:	4629      	mov	r1, r5
 800fee4:	4604      	mov	r4, r0
 800fee6:	f7ff f953 	bl	800f190 <q2hpr>
 800feea:	edd5 6a01 	vldr	s13, [r5, #4]
 800feee:	ed95 7a00 	vldr	s14, [r5]
 800fef2:	edd5 7a02 	vldr	s15, [r5, #8]
 800fef6:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8010008 <output_update+0x19c>
 800fefa:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fefe:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800ff02:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800ff06:	ed85 7a00 	vstr	s14, [r5]
 800ff0a:	edc5 6a01 	vstr	s13, [r5, #4]
 800ff0e:	edc5 7a02 	vstr	s15, [r5, #8]
 800ff12:	ed97 7a01 	vldr	s14, [r7, #4]
 800ff16:	edd6 7a00 	vldr	s15, [r6]
 800ff1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff1e:	6822      	ldr	r2, [r4, #0]
 800ff20:	edc8 7a00 	vstr	s15, [r8]
 800ff24:	ed97 7a00 	vldr	s14, [r7]
 800ff28:	edd6 7a01 	vldr	s15, [r6, #4]
 800ff2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff30:	edc8 7a01 	vstr	s15, [r8, #4]
 800ff34:	ed97 7a02 	vldr	s14, [r7, #8]
 800ff38:	edd6 7a02 	vldr	s15, [r6, #8]
 800ff3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff40:	edc8 7a02 	vstr	s15, [r8, #8]
 800ff44:	edd4 7a02 	vldr	s15, [r4, #8]
 800ff48:	eef1 7a67 	vneg.f32	s15, s15
 800ff4c:	6863      	ldr	r3, [r4, #4]
 800ff4e:	edc4 7a02 	vstr	s15, [r4, #8]
 800ff52:	6062      	str	r2, [r4, #4]
 800ff54:	6023      	str	r3, [r4, #0]
 800ff56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff5a:	f1bc 0f01 	cmp.w	ip, #1
 800ff5e:	d015      	beq.n	800ff8c <output_update+0x120>
 800ff60:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8010008 <output_update+0x19c>
 800ff64:	edd2 6a00 	vldr	s13, [r2]
 800ff68:	ed92 7a01 	vldr	s14, [r2, #4]
 800ff6c:	edd2 7a02 	vldr	s15, [r2, #8]
 800ff70:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ff74:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ff78:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ff7c:	edc2 6a00 	vstr	s13, [r2]
 800ff80:	ed82 7a01 	vstr	s14, [r2, #4]
 800ff84:	edc2 7a02 	vstr	s15, [r2, #8]
 800ff88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff90:	eef1 6a66 	vneg.f32	s13, s13
 800ff94:	ee36 6a64 	vsub.f32	s12, s12, s9
 800ff98:	edc3 7a00 	vstr	s15, [r3]
 800ff9c:	edc3 6a01 	vstr	s13, [r3, #4]
 800ffa0:	ed83 6a02 	vstr	s12, [r3, #8]
 800ffa4:	4662      	mov	r2, ip
 800ffa6:	4629      	mov	r1, r5
 800ffa8:	f7ff f8f2 	bl	800f190 <q2hpr>
 800ffac:	edd5 6a00 	vldr	s13, [r5]
 800ffb0:	ed95 7a01 	vldr	s14, [r5, #4]
 800ffb4:	edd5 7a02 	vldr	s15, [r5, #8]
 800ffb8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8010008 <output_update+0x19c>
 800ffbc:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ffc0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ffc4:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ffc8:	ed85 7a01 	vstr	s14, [r5, #4]
 800ffcc:	edc5 6a00 	vstr	s13, [r5]
 800ffd0:	edc5 7a02 	vstr	s15, [r5, #8]
 800ffd4:	ed97 7a00 	vldr	s14, [r7]
 800ffd8:	edd6 7a00 	vldr	s15, [r6]
 800ffdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ffe0:	edc8 7a00 	vstr	s15, [r8]
 800ffe4:	ed97 7a01 	vldr	s14, [r7, #4]
 800ffe8:	edd6 7a01 	vldr	s15, [r6, #4]
 800ffec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fff0:	edc8 7a01 	vstr	s15, [r8, #4]
 800fff4:	ed97 7a02 	vldr	s14, [r7, #8]
 800fff8:	edd6 7a02 	vldr	s15, [r6, #8]
 800fffc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010000:	edc8 7a02 	vstr	s15, [r8, #8]
 8010004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010008:	42652ee1 	.word	0x42652ee1

0801000c <kalman_3gyro.constprop.0>:
 801000c:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 8010010:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010018:	ed2d 8b10 	vpush	{d8-d15}
 801001c:	edd2 6a04 	vldr	s13, [r2, #16]
 8010020:	ed92 aa02 	vldr	s20, [r2, #8]
 8010024:	edd2 8a03 	vldr	s17, [r2, #12]
 8010028:	ed92 6a05 	vldr	s12, [r2, #20]
 801002c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010030:	edd2 7a00 	vldr	s15, [r2]
 8010034:	f2ad 7dc4 	subw	sp, sp, #1988	; 0x7c4
 8010038:	6854      	ldr	r4, [r2, #4]
 801003a:	4de3      	ldr	r5, [pc, #908]	; (80103c8 <kalman_3gyro.constprop.0+0x3bc>)
 801003c:	4683      	mov	fp, r0
 801003e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8010042:	9108      	str	r1, [sp, #32]
 8010044:	460e      	mov	r6, r1
 8010046:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
 801004a:	2100      	movs	r1, #0
 801004c:	9321      	str	r3, [sp, #132]	; 0x84
 801004e:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8010052:	edcd 7a22 	vstr	s15, [sp, #136]	; 0x88
 8010056:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 801005a:	ed8d 6a1b 	vstr	s12, [sp, #108]	; 0x6c
 801005e:	ed8d 7a78 	vstr	s14, [sp, #480]	; 0x1e0
 8010062:	edcd 7a40 	vstr	s15, [sp, #256]	; 0x100
 8010066:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 801006a:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 801006e:	edcd 6a76 	vstr	s13, [sp, #472]	; 0x1d8
 8010072:	ed8d 6a77 	vstr	s12, [sp, #476]	; 0x1dc
 8010076:	ed8d 0a43 	vstr	s0, [sp, #268]	; 0x10c
 801007a:	ed8d aa70 	vstr	s20, [sp, #448]	; 0x1c0
 801007e:	ed8d aa71 	vstr	s20, [sp, #452]	; 0x1c4
 8010082:	ed8d aa72 	vstr	s20, [sp, #456]	; 0x1c8
 8010086:	edcd 8a73 	vstr	s17, [sp, #460]	; 0x1cc
 801008a:	edcd 8a74 	vstr	s17, [sp, #464]	; 0x1d0
 801008e:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 8010092:	eeb0 8a60 	vmov.f32	s16, s1
 8010096:	9548      	str	r5, [sp, #288]	; 0x120
 8010098:	946d      	str	r4, [sp, #436]	; 0x1b4
 801009a:	946e      	str	r4, [sp, #440]	; 0x1b8
 801009c:	946f      	str	r4, [sp, #444]	; 0x1bc
 801009e:	ed8d 0a44 	vstr	s0, [sp, #272]	; 0x110
 80100a2:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 80100a6:	ed8d 1a04 	vstr	s2, [sp, #16]
 80100aa:	f00a fba6 	bl	801a7fa <memset>
 80100ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80100b2:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
 80100b6:	600b      	str	r3, [r1, #0]
 80100b8:	f20d 61ec 	addw	r1, sp, #1772	; 0x6ec
 80100bc:	600b      	str	r3, [r1, #0]
 80100be:	f50d 61e4 	add.w	r1, sp, #1824	; 0x720
 80100c2:	600b      	str	r3, [r1, #0]
 80100c4:	f20d 7154 	addw	r1, sp, #1876	; 0x754
 80100c8:	600b      	str	r3, [r1, #0]
 80100ca:	f89b 200d 	ldrb.w	r2, [fp, #13]
 80100ce:	f50d 61f1 	add.w	r1, sp, #1928	; 0x788
 80100d2:	600b      	str	r3, [r1, #0]
 80100d4:	f20d 71bc 	addw	r1, sp, #1980	; 0x7bc
 80100d8:	600b      	str	r3, [r1, #0]
 80100da:	2a00      	cmp	r2, #0
 80100dc:	f001 82aa 	beq.w	8011634 <kalman_3gyro.constprop.0+0x1628>
 80100e0:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 80100e4:	ed96 5a02 	vldr	s10, [r6, #8]
 80100e8:	edd6 5a01 	vldr	s11, [r6, #4]
 80100ec:	ed96 3a00 	vldr	s6, [r6]
 80100f0:	ee25 9a86 	vmul.f32	s18, s11, s12
 80100f4:	ee75 9a05 	vadd.f32	s19, s10, s10
 80100f8:	ee75 5aa5 	vadd.f32	s11, s11, s11
 80100fc:	ee25 5a06 	vmul.f32	s10, s10, s12
 8010100:	ee23 6a06 	vmul.f32	s12, s6, s12
 8010104:	ee33 3a03 	vadd.f32	s6, s6, s6
 8010108:	9b08      	ldr	r3, [sp, #32]
 801010a:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 801010e:	ed93 7a04 	vldr	s14, [r3, #16]
 8010112:	edd3 7a03 	vldr	s15, [r3, #12]
 8010116:	edd3 6a05 	vldr	s13, [r3, #20]
 801011a:	eeb1 4a47 	vneg.f32	s8, s14
 801011e:	eef1 4a67 	vneg.f32	s9, s15
 8010122:	eef1 3a66 	vneg.f32	s7, s13
 8010126:	ee34 1a04 	vadd.f32	s2, s8, s8
 801012a:	ee77 1a07 	vadd.f32	s3, s14, s14
 801012e:	ee34 2aa4 	vadd.f32	s4, s9, s9
 8010132:	ee77 2aa7 	vadd.f32	s5, s15, s15
 8010136:	2300      	movs	r3, #0
 8010138:	ee33 0aa3 	vadd.f32	s0, s7, s7
 801013c:	ee76 0aa6 	vadd.f32	s1, s13, s13
 8010140:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 8010144:	ed81 1a00 	vstr	s2, [r1]
 8010148:	f20d 617c 	addw	r1, sp, #1660	; 0x67c
 801014c:	edc1 1a00 	vstr	s3, [r1]
 8010150:	f20d 6214 	addw	r2, sp, #1556	; 0x614
 8010154:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 8010158:	ed81 2a00 	vstr	s4, [r1]
 801015c:	edc2 9a00 	vstr	s19, [r2]
 8010160:	f20d 6154 	addw	r1, sp, #1620	; 0x654
 8010164:	f50d 62c3 	add.w	r2, sp, #1560	; 0x618
 8010168:	edc1 2a00 	vstr	s5, [r1]
 801016c:	ed82 9a00 	vstr	s18, [r2]
 8010170:	f50d 61c2 	add.w	r1, sp, #1552	; 0x610
 8010174:	f50d 62c8 	add.w	r2, sp, #1600	; 0x640
 8010178:	600b      	str	r3, [r1, #0]
 801017a:	ed82 5a00 	vstr	s10, [r2]
 801017e:	f20d 6144 	addw	r1, sp, #1604	; 0x644
 8010182:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 8010186:	600b      	str	r3, [r1, #0]
 8010188:	ed82 3a00 	vstr	s6, [r2]
 801018c:	f50d 61cf 	add.w	r1, sp, #1656	; 0x678
 8010190:	f50d 62ce 	add.w	r2, sp, #1648	; 0x670
 8010194:	600b      	str	r3, [r1, #0]
 8010196:	edc2 5a00 	vstr	s11, [r2]
 801019a:	f20d 611c 	addw	r1, sp, #1564	; 0x61c
 801019e:	f20d 6274 	addw	r2, sp, #1652	; 0x674
 80101a2:	600b      	str	r3, [r1, #0]
 80101a4:	ed82 6a00 	vstr	s12, [r2]
 80101a8:	f50d 61ca 	add.w	r1, sp, #1616	; 0x650
 80101ac:	f20d 624c 	addw	r2, sp, #1612	; 0x64c
 80101b0:	600b      	str	r3, [r1, #0]
 80101b2:	ed82 0a00 	vstr	s0, [r2]
 80101b6:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 80101ba:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 80101be:	600b      	str	r3, [r1, #0]
 80101c0:	edc2 0a00 	vstr	s1, [r2]
 80101c4:	2100      	movs	r1, #0
 80101c6:	2230      	movs	r2, #48	; 0x30
 80101c8:	a879      	add	r0, sp, #484	; 0x1e4
 80101ca:	edcd 6a4a 	vstr	s13, [sp, #296]	; 0x128
 80101ce:	ed8d 7a4f 	vstr	s14, [sp, #316]	; 0x13c
 80101d2:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 80101d6:	9349      	str	r3, [sp, #292]	; 0x124
 80101d8:	934d      	str	r3, [sp, #308]	; 0x134
 80101da:	9351      	str	r3, [sp, #324]	; 0x144
 80101dc:	edcd 3a4c 	vstr	s7, [sp, #304]	; 0x130
 80101e0:	ed8d 4a4b 	vstr	s8, [sp, #300]	; 0x12c
 80101e4:	edcd 4a50 	vstr	s9, [sp, #320]	; 0x140
 80101e8:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
 80101ec:	942a      	str	r4, [sp, #168]	; 0xa8
 80101ee:	f00a fb04 	bl	801a7fa <memset>
 80101f2:	eddb 6a06 	vldr	s13, [fp, #24]
 80101f6:	ed9b 7a07 	vldr	s14, [fp, #28]
 80101fa:	eddb 7a08 	vldr	s15, [fp, #32]
 80101fe:	ee68 6a26 	vmul.f32	s13, s16, s13
 8010202:	ee28 7a07 	vmul.f32	s14, s16, s14
 8010206:	ee68 7a27 	vmul.f32	s15, s16, s15
 801020a:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 801020e:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8010212:	ed8d 7a14 	vstr	s14, [sp, #80]	; 0x50
 8010216:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 801021a:	2b00      	cmp	r3, #0
 801021c:	f043 83d2 	bne.w	80139c4 <kalman_3gyro.constprop.0+0x39b8>
 8010220:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 8010224:	2b00      	cmp	r3, #0
 8010226:	f043 80fb 	bne.w	8013420 <kalman_3gyro.constprop.0+0x3414>
 801022a:	f20b 43b4 	addw	r3, fp, #1204	; 0x4b4
 801022e:	9313      	str	r3, [sp, #76]	; 0x4c
 8010230:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 8010234:	9303      	str	r3, [sp, #12]
 8010236:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 801023a:	9310      	str	r3, [sp, #64]	; 0x40
 801023c:	f50b 6a97 	add.w	sl, fp, #1208	; 0x4b8
 8010240:	f50b 66c5 	add.w	r6, fp, #1576	; 0x628
 8010244:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 8010248:	930f      	str	r3, [sp, #60]	; 0x3c
 801024a:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 801024e:	edd0 7a00 	vldr	s15, [r0]
 8010252:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010256:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 801025a:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 801025e:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 8010262:	ed93 6a00 	vldr	s12, [r3]
 8010266:	ed91 7a00 	vldr	s14, [r1]
 801026a:	2300      	movs	r3, #0
 801026c:	edd2 6a00 	vldr	s13, [r2]
 8010270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010274:	edcd 7a34 	vstr	s15, [sp, #208]	; 0xd0
 8010278:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 801027c:	edcd 6a36 	vstr	s13, [sp, #216]	; 0xd8
 8010280:	ed8d 6a37 	vstr	s12, [sp, #220]	; 0xdc
 8010284:	9338      	str	r3, [sp, #224]	; 0xe0
 8010286:	9339      	str	r3, [sp, #228]	; 0xe4
 8010288:	933a      	str	r3, [sp, #232]	; 0xe8
 801028a:	933b      	str	r3, [sp, #236]	; 0xec
 801028c:	d14e      	bne.n	801032c <kalman_3gyro.constprop.0+0x320>
 801028e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010296:	d149      	bne.n	801032c <kalman_3gyro.constprop.0+0x320>
 8010298:	eef5 6a40 	vcmp.f32	s13, #0.0
 801029c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a0:	d144      	bne.n	801032c <kalman_3gyro.constprop.0+0x320>
 80102a2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80102a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102aa:	d13f      	bne.n	801032c <kalman_3gyro.constprop.0+0x320>
 80102ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80102b0:	2200      	movs	r2, #0
 80102b2:	9821      	ldr	r0, [sp, #132]	; 0x84
 80102b4:	9334      	str	r3, [sp, #208]	; 0xd0
 80102b6:	9335      	str	r3, [sp, #212]	; 0xd4
 80102b8:	9336      	str	r3, [sp, #216]	; 0xd8
 80102ba:	7803      	ldrb	r3, [r0, #0]
 80102bc:	ed90 7a03 	vldr	s14, [r0, #12]
 80102c0:	edd0 6a01 	vldr	s13, [r0, #4]
 80102c4:	edd0 7a02 	vldr	s15, [r0, #8]
 80102c8:	9137      	str	r1, [sp, #220]	; 0xdc
 80102ca:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	f003 849e 	beq.w	8013c10 <kalman_3gyro.constprop.0+0x3c04>
 80102d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80102d8:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80102dc:	eee7 7a07 	vfma.f32	s15, s14, s14
 80102e0:	eef1 6ae7 	vsqrt.f32	s13, s15
 80102e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80102e8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80102ec:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 80102f0:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 80102f4:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 80102f8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80102fc:	2100      	movs	r1, #0
 80102fe:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8010302:	f00a fa7a 	bl	801a7fa <memset>
 8010306:	4b31      	ldr	r3, [pc, #196]	; (80103cc <kalman_3gyro.constprop.0+0x3c0>)
 8010308:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 801030c:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8010310:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8010314:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8010318:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 801031c:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8010320:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8010324:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8010328:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 801032c:	9b08      	ldr	r3, [sp, #32]
 801032e:	ed9f 6a28 	vldr	s12, [pc, #160]	; 80103d0 <kalman_3gyro.constprop.0+0x3c4>
 8010332:	edd3 7a01 	vldr	s15, [r3, #4]
 8010336:	ed93 7a00 	vldr	s14, [r3]
 801033a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801033e:	edd3 5a02 	vldr	s11, [r3, #8]
 8010342:	eee7 6a07 	vfma.f32	s13, s14, s14
 8010346:	eee5 6aa5 	vfma.f32	s13, s11, s11
 801034a:	eef4 6ac6 	vcmpe.f32	s13, s12
 801034e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010352:	f101 810f 	bmi.w	8011574 <kalman_3gyro.constprop.0+0x1568>
 8010356:	eef1 9ae6 	vsqrt.f32	s19, s13
 801035a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801035e:	ee79 6ae6 	vsub.f32	s13, s19, s13
 8010362:	eef6 ca00 	vmov.f32	s25, #96	; 0x3f000000  0.5
 8010366:	eef0 6ae6 	vabs.f32	s13, s13
 801036a:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801036e:	ee76 caec 	vsub.f32	s25, s13, s25
 8010372:	edd3 4a04 	vldr	s9, [r3, #16]
 8010376:	edd3 aa03 	vldr	s21, [r3, #12]
 801037a:	ee64 6aa4 	vmul.f32	s13, s9, s9
 801037e:	ed93 8a05 	vldr	s16, [r3, #20]
 8010382:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010386:	eeea 6aaa 	vfma.f32	s13, s21, s21
 801038a:	ee86 0a29 	vdiv.f32	s0, s12, s19
 801038e:	eee8 6a08 	vfma.f32	s13, s16, s16
 8010392:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 80103d0 <kalman_3gyro.constprop.0+0x3c4>
 8010396:	eef4 6ac6 	vcmpe.f32	s13, s12
 801039a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801039e:	eeb7 da00 	vmov.f32	s26, #112	; 0x3f800000  1.0
 80103a2:	bf54      	ite	pl
 80103a4:	eeb1 eae6 	vsqrtpl.f32	s28, s13
 80103a8:	ed9f ea0a 	vldrmi	s28, [pc, #40]	; 80103d4 <kalman_3gyro.constprop.0+0x3c8>
 80103ac:	f20b 40bc 	addw	r0, fp, #1212	; 0x4bc
 80103b0:	eecd 6a0e 	vdiv.f32	s13, s26, s28
 80103b4:	ed90 5a00 	vldr	s10, [r0]
 80103b8:	f50b 639d 	add.w	r3, fp, #1256	; 0x4e8
 80103bc:	9306      	str	r3, [sp, #24]
 80103be:	f20b 43e4 	addw	r3, fp, #1252	; 0x4e4
 80103c2:	930a      	str	r3, [sp, #40]	; 0x28
 80103c4:	9b06      	ldr	r3, [sp, #24]
 80103c6:	e009      	b.n	80103dc <kalman_3gyro.constprop.0+0x3d0>
 80103c8:	3a9d4952 	.word	0x3a9d4952
 80103cc:	40a00000 	.word	0x40a00000
 80103d0:	3c23d70a 	.word	0x3c23d70a
 80103d4:	3dcccccd 	.word	0x3dcccccd
 80103d8:	4b000000 	.word	0x4b000000
 80103dc:	f20b 42dc 	addw	r2, fp, #1244	; 0x4dc
 80103e0:	f20b 4eec 	addw	lr, fp, #1260	; 0x4ec
 80103e4:	ee27 ba00 	vmul.f32	s22, s14, s0
 80103e8:	ee6a aaa6 	vmul.f32	s21, s21, s13
 80103ec:	ee64 4aa6 	vmul.f32	s9, s9, s13
 80103f0:	ee28 8a26 	vmul.f32	s16, s16, s13
 80103f4:	ed93 6a00 	vldr	s12, [r3]
 80103f8:	edd2 6a00 	vldr	s13, [r2]
 80103fc:	ee27 9a80 	vmul.f32	s18, s15, s0
 8010400:	eeb0 da45 	vmov.f32	s26, s10
 8010404:	ee25 0a80 	vmul.f32	s0, s11, s0
 8010408:	ed9e 5a00 	vldr	s10, [lr]
 801040c:	9020      	str	r0, [sp, #128]	; 0x80
 801040e:	f20b 70a4 	addw	r0, fp, #1956	; 0x7a4
 8010412:	9017      	str	r0, [sp, #92]	; 0x5c
 8010414:	f20b 70bc 	addw	r0, fp, #1980	; 0x7bc
 8010418:	f20b 642c 	addw	r4, fp, #1580	; 0x62c
 801041c:	9019      	str	r0, [sp, #100]	; 0x64
 801041e:	f20b 709c 	addw	r0, fp, #1948	; 0x79c
 8010422:	9402      	str	r4, [sp, #8]
 8010424:	9011      	str	r0, [sp, #68]	; 0x44
 8010426:	f50b 60f5 	add.w	r0, fp, #1960	; 0x7a8
 801042a:	9018      	str	r0, [sp, #96]	; 0x60
 801042c:	9802      	ldr	r0, [sp, #8]
 801042e:	f20b 41c4 	addw	r1, fp, #1220	; 0x4c4
 8010432:	f50b 6999 	add.w	r9, fp, #1224	; 0x4c8
 8010436:	f50b 689c 	add.w	r8, fp, #1248	; 0x4e0
 801043a:	f50b 6cc7 	add.w	ip, fp, #1592	; 0x638
 801043e:	f50b 67ca 	add.w	r7, fp, #1616	; 0x650
 8010442:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 8010446:	edd8 1a00 	vldr	s3, [r8]
 801044a:	edd0 0a00 	vldr	s1, [r0]
 801044e:	ed91 2a00 	vldr	s4, [r1]
 8010452:	ed8d ba2b 	vstr	s22, [sp, #172]	; 0xac
 8010456:	ed8d 9a2c 	vstr	s18, [sp, #176]	; 0xb0
 801045a:	edcd aa2e 	vstr	s21, [sp, #184]	; 0xb8
 801045e:	edcd 4a2f 	vstr	s9, [sp, #188]	; 0xbc
 8010462:	ed8d 8a30 	vstr	s16, [sp, #192]	; 0xc0
 8010466:	edcd 6a05 	vstr	s13, [sp, #20]
 801046a:	ed8d 6a06 	vstr	s12, [sp, #24]
 801046e:	eddc 6a00 	vldr	s13, [ip]
 8010472:	ed99 6a00 	vldr	s12, [r9]
 8010476:	ed8d 5a07 	vstr	s10, [sp, #28]
 801047a:	9501      	str	r5, [sp, #4]
 801047c:	ed8d 0a2d 	vstr	s0, [sp, #180]	; 0xb4
 8010480:	edd7 2a00 	vldr	s5, [r7]
 8010484:	9801      	ldr	r0, [sp, #4]
 8010486:	f50b 62cb 	add.w	r2, fp, #1624	; 0x658
 801048a:	ed90 4a00 	vldr	s8, [r0]
 801048e:	ed92 ca00 	vldr	s24, [r2]
 8010492:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010494:	f20b 634c 	addw	r3, fp, #1612	; 0x64c
 8010498:	edd0 ba00 	vldr	s23, [r0]
 801049c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801049e:	ed93 fa00 	vldr	s30, [r3]
 80104a2:	ed90 5a00 	vldr	s10, [r0]
 80104a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80104a8:	ed8d ca0c 	vstr	s24, [sp, #48]	; 0x30
 80104ac:	ed93 ca00 	vldr	s24, [r3]
 80104b0:	9b03      	ldr	r3, [sp, #12]
 80104b2:	edcd ba0a 	vstr	s23, [sp, #40]	; 0x28
 80104b6:	edd3 ba00 	vldr	s23, [r3]
 80104ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104bc:	ed8d 5a1c 	vstr	s10, [sp, #112]	; 0x70
 80104c0:	ed93 5a00 	vldr	s10, [r3]
 80104c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104c6:	f50b 649e 	add.w	r4, fp, #1264	; 0x4f0
 80104ca:	ed94 3a00 	vldr	s6, [r4]
 80104ce:	ed8d 5a13 	vstr	s10, [sp, #76]	; 0x4c
 80104d2:	ed93 5a00 	vldr	s10, [r3]
 80104d6:	eeb8 1a00 	vmov.f32	s2, #128	; 0xc0000000 -2.0
 80104da:	9819      	ldr	r0, [sp, #100]	; 0x64
 80104dc:	f20b 6134 	addw	r1, fp, #1588	; 0x634
 80104e0:	f20b 45cc 	addw	r5, fp, #1228	; 0x4cc
 80104e4:	f20b 683c 	addw	r8, fp, #1596	; 0x63c
 80104e8:	f50b 6ecc 	add.w	lr, fp, #1632	; 0x660
 80104ec:	f20b 6c54 	addw	ip, fp, #1620	; 0x654
 80104f0:	f20b 675c 	addw	r7, fp, #1628	; 0x65c
 80104f4:	edd7 fa00 	vldr	s31, [r7]
 80104f8:	edde da00 	vldr	s27, [lr]
 80104fc:	eddc ea00 	vldr	s29, [ip]
 8010500:	ed8d 4a09 	vstr	s8, [sp, #36]	; 0x24
 8010504:	edd5 3a00 	vldr	s7, [r5]
 8010508:	ed8d 3a0b 	vstr	s6, [sp, #44]	; 0x2c
 801050c:	ed98 4a00 	vldr	s8, [r8]
 8010510:	ed91 3a00 	vldr	s6, [r1]
 8010514:	ed8d 5a1d 	vstr	s10, [sp, #116]	; 0x74
 8010518:	ed90 5a00 	vldr	s10, [r0]
 801051c:	eed0 6a81 	vfnms.f32	s13, s1, s2
 8010520:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010522:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 8010526:	ed90 5a00 	vldr	s10, [r0]
 801052a:	ee9d 6a01 	vfnms.f32	s12, s26, s2
 801052e:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8010532:	edd6 2a00 	vldr	s5, [r6]
 8010536:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010538:	ed8d 5a16 	vstr	s10, [sp, #88]	; 0x58
 801053c:	eddd 0a16 	vldr	s1, [sp, #88]	; 0x58
 8010540:	ed90 5a00 	vldr	s10, [r0]
 8010544:	ee92 3a81 	vfnms.f32	s6, s5, s2
 8010548:	ee36 6a21 	vadd.f32	s12, s12, s3
 801054c:	eddd 2a1c 	vldr	s5, [sp, #112]	; 0x70
 8010550:	eddd 1a1d 	vldr	s3, [sp, #116]	; 0x74
 8010554:	f50b 63f8 	add.w	r3, fp, #1984	; 0x7c0
 8010558:	ee90 5a81 	vfnms.f32	s10, s1, s2
 801055c:	edd3 0a00 	vldr	s1, [r3]
 8010560:	eed1 2a81 	vfnms.f32	s5, s3, s2
 8010564:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8010568:	9324      	str	r3, [sp, #144]	; 0x90
 801056a:	f20b 73cc 	addw	r3, fp, #1996	; 0x7cc
 801056e:	ee35 5a20 	vadd.f32	s10, s10, s1
 8010572:	edd3 0a00 	vldr	s1, [r3]
 8010576:	ed9a da00 	vldr	s26, [sl]
 801057a:	eeef 6aa1 	vfma.f32	s13, s31, s3
 801057e:	eddd fa09 	vldr	s31, [sp, #36]	; 0x24
 8010582:	f50b 62f4 	add.w	r2, fp, #1952	; 0x7a0
 8010586:	edcd 0a1c 	vstr	s1, [sp, #112]	; 0x70
 801058a:	edd2 0a00 	vldr	s1, [r2]
 801058e:	ee9d 2a01 	vfnms.f32	s4, s26, s2
 8010592:	eedf 3a81 	vfnms.f32	s7, s31, s2
 8010596:	ed9d da05 	vldr	s26, [sp, #20]
 801059a:	eddd fa1e 	vldr	s31, [sp, #120]	; 0x78
 801059e:	f20b 71ac 	addw	r1, fp, #1964	; 0x7ac
 80105a2:	edcd 0a1f 	vstr	s1, [sp, #124]	; 0x7c
 80105a6:	edd1 0a00 	vldr	s1, [r1]
 80105aa:	ee32 2a0d 	vadd.f32	s4, s4, s26
 80105ae:	ee72 2aaf 	vadd.f32	s5, s5, s31
 80105b2:	ed9d da07 	vldr	s26, [sp, #28]
 80105b6:	eddd fa1c 	vldr	s31, [sp, #112]	; 0x70
 80105ba:	edcd 0a1d 	vstr	s1, [sp, #116]	; 0x74
 80105be:	9327      	str	r3, [sp, #156]	; 0x9c
 80105c0:	9216      	str	r2, [sp, #88]	; 0x58
 80105c2:	f50b 63f9 	add.w	r3, fp, #1992	; 0x7c8
 80105c6:	f20b 72c4 	addw	r2, fp, #1988	; 0x7c4
 80105ca:	f50b 69c6 	add.w	r9, fp, #1584	; 0x630
 80105ce:	eead 6a21 	vfma.f32	s12, s26, s3
 80105d2:	ee33 3a0f 	vadd.f32	s6, s6, s30
 80105d6:	ed99 da00 	vldr	s26, [r9]
 80105da:	eeaf 5aa1 	vfma.f32	s10, s31, s3
 80105de:	ed9d fa1d 	vldr	s30, [sp, #116]	; 0x74
 80105e2:	9326      	str	r3, [sp, #152]	; 0x98
 80105e4:	9123      	str	r1, [sp, #140]	; 0x8c
 80105e6:	9225      	str	r2, [sp, #148]	; 0x94
 80105e8:	eddd fa1f 	vldr	s31, [sp, #124]	; 0x7c
 80105ec:	ee9f fa81 	vfnms.f32	s30, s31, s2
 80105f0:	ee9d 4a01 	vfnms.f32	s8, s26, s2
 80105f4:	ed9d da06 	vldr	s26, [sp, #24]
 80105f8:	ed5f 0a8a 	vldr	s1, [pc, #-552]	; 80103d4 <kalman_3gyro.constprop.0+0x3c8>
 80105fc:	eeb0 1a4f 	vmov.f32	s2, s30
 8010600:	ed9d fa13 	vldr	s30, [sp, #76]	; 0x4c
 8010604:	eead 2a21 	vfma.f32	s4, s26, s3
 8010608:	ed9d da0a 	vldr	s26, [sp, #40]	; 0x28
 801060c:	ee6f fa20 	vmul.f32	s31, s30, s1
 8010610:	ed93 fa00 	vldr	s30, [r3]
 8010614:	ee73 3a8d 	vadd.f32	s7, s7, s26
 8010618:	ee34 4a2e 	vadd.f32	s8, s8, s29
 801061c:	ed9d da0b 	vldr	s26, [sp, #44]	; 0x2c
 8010620:	eddd ea0c 	vldr	s29, [sp, #48]	; 0x30
 8010624:	ed8d fa05 	vstr	s30, [sp, #20]
 8010628:	ed92 fa00 	vldr	s30, [r2]
 801062c:	eeae 3aa1 	vfma.f32	s6, s29, s3
 8010630:	eeed 3a21 	vfma.f32	s7, s26, s3
 8010634:	eddd ea05 	vldr	s29, [sp, #20]
 8010638:	eeb7 da00 	vmov.f32	s26, #112	; 0x3f800000  1.0
 801063c:	ed8d fa07 	vstr	s30, [sp, #28]
 8010640:	eeee 2aa1 	vfma.f32	s5, s29, s3
 8010644:	ee2c fa20 	vmul.f32	s30, s24, s1
 8010648:	eddd ea07 	vldr	s29, [sp, #28]
 801064c:	ee6b 0aa0 	vmul.f32	s1, s23, s1
 8010650:	eead 4aa1 	vfma.f32	s8, s27, s3
 8010654:	eecd da0c 	vdiv.f32	s27, s26, s24
 8010658:	f50b 63fa 	add.w	r3, fp, #2000	; 0x7d0
 801065c:	ee27 ca2d 	vmul.f32	s24, s14, s27
 8010660:	ee31 1a2e 	vadd.f32	s2, s2, s29
 8010664:	ee26 6a0f 	vmul.f32	s12, s12, s30
 8010668:	ee25 5a2f 	vmul.f32	s10, s10, s31
 801066c:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8010670:	edd3 ea00 	vldr	s29, [r3]
 8010674:	ee22 2a0f 	vmul.f32	s4, s4, s30
 8010678:	ee24 9a89 	vmul.f32	s18, s9, s18
 801067c:	eeae 1aa1 	vfma.f32	s2, s29, s3
 8010680:	ee26 6a06 	vmul.f32	s12, s12, s12
 8010684:	ee25 5a05 	vmul.f32	s10, s10, s10
 8010688:	ee62 2aaf 	vmul.f32	s5, s5, s31
 801068c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8010690:	ee20 3a83 	vmul.f32	s6, s1, s6
 8010694:	eef0 4acc 	vabs.f32	s9, s24
 8010698:	ed1f 7ab1 	vldr	s14, [pc, #-708]	; 80103d8 <kalman_3gyro.constprop.0+0x3cc>
 801069c:	ee63 3a8f 	vmul.f32	s7, s7, s30
 80106a0:	eea2 6a02 	vfma.f32	s12, s4, s4
 80106a4:	eea2 5aa2 	vfma.f32	s10, s5, s5
 80106a8:	ee21 1a2f 	vmul.f32	s2, s2, s31
 80106ac:	eee3 6a03 	vfma.f32	s13, s6, s6
 80106b0:	ee20 4a84 	vmul.f32	s8, s1, s8
 80106b4:	eef4 4ac7 	vcmpe.f32	s9, s14
 80106b8:	eeaa 9a8b 	vfma.f32	s18, s21, s22
 80106bc:	eea3 6aa3 	vfma.f32	s12, s7, s7
 80106c0:	eea1 5a01 	vfma.f32	s10, s2, s2
 80106c4:	eee4 6a04 	vfma.f32	s13, s8, s8
 80106c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106cc:	eea8 9a00 	vfma.f32	s18, s16, s0
 80106d0:	eeb1 fac6 	vsqrt.f32	s30, s12
 80106d4:	ee27 8aad 	vmul.f32	s16, s15, s27
 80106d8:	eeb1 bac5 	vsqrt.f32	s22, s10
 80106dc:	ee65 daad 	vmul.f32	s27, s11, s27
 80106e0:	eef1 aae6 	vsqrt.f32	s21, s13
 80106e4:	931f      	str	r3, [sp, #124]	; 0x7c
 80106e6:	d517      	bpl.n	8010718 <kalman_3gyro.constprop.0+0x70c>
 80106e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80106ec:	eeb4 cae7 	vcmpe.f32	s24, s15
 80106f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f4:	f2c1 8054 	blt.w	80117a0 <kalman_3gyro.constprop.0+0x1794>
 80106f8:	ee7c 7a27 	vadd.f32	s15, s24, s15
 80106fc:	ee17 0a90 	vmov	r0, s15
 8010700:	f7ef ff26 	bl	8000550 <__aeabi_f2d>
 8010704:	ec41 0b10 	vmov	d0, r0, r1
 8010708:	f008 fa1e 	bl	8018b48 <floor>
 801070c:	ec51 0b10 	vmov	r0, r1, d0
 8010710:	f7f0 fa26 	bl	8000b60 <__aeabi_d2f>
 8010714:	ee0c 0a10 	vmov	s24, r0
 8010718:	eeb0 7ac8 	vabs.f32	s14, s16
 801071c:	ed5f 7ad2 	vldr	s15, [pc, #-840]	; 80103d8 <kalman_3gyro.constprop.0+0x3cc>
 8010720:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010728:	ed8d ca31 	vstr	s24, [sp, #196]	; 0xc4
 801072c:	d517      	bpl.n	801075e <kalman_3gyro.constprop.0+0x752>
 801072e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010732:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801073a:	f2c1 8025 	blt.w	8011788 <kalman_3gyro.constprop.0+0x177c>
 801073e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8010742:	ee17 0a90 	vmov	r0, s15
 8010746:	f7ef ff03 	bl	8000550 <__aeabi_f2d>
 801074a:	ec41 0b10 	vmov	d0, r0, r1
 801074e:	f008 f9fb 	bl	8018b48 <floor>
 8010752:	ec51 0b10 	vmov	r0, r1, d0
 8010756:	f7f0 fa03 	bl	8000b60 <__aeabi_d2f>
 801075a:	ee08 0a10 	vmov	s16, r0
 801075e:	eeb0 7aed 	vabs.f32	s14, s27
 8010762:	ed5f 7ae3 	vldr	s15, [pc, #-908]	; 80103d8 <kalman_3gyro.constprop.0+0x3cc>
 8010766:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801076a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801076e:	ed8d 8a32 	vstr	s16, [sp, #200]	; 0xc8
 8010772:	d517      	bpl.n	80107a4 <kalman_3gyro.constprop.0+0x798>
 8010774:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010778:	eef4 dae7 	vcmpe.f32	s27, s15
 801077c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010780:	f2c0 87f6 	blt.w	8011770 <kalman_3gyro.constprop.0+0x1764>
 8010784:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8010788:	ee17 0a90 	vmov	r0, s15
 801078c:	f7ef fee0 	bl	8000550 <__aeabi_f2d>
 8010790:	ec41 0b10 	vmov	d0, r0, r1
 8010794:	f008 f9d8 	bl	8018b48 <floor>
 8010798:	ec51 0b10 	vmov	r0, r1, d0
 801079c:	f7f0 f9e0 	bl	8000b60 <__aeabi_d2f>
 80107a0:	ee0d 0a90 	vmov	s27, r0
 80107a4:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 80107a8:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 80107ac:	1e61      	subs	r1, r4, #1
 80107ae:	b249      	sxtb	r1, r1
 80107b0:	2900      	cmp	r1, #0
 80107b2:	dd1a      	ble.n	80107ea <kalman_3gyro.constprop.0+0x7de>
 80107b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80107b8:	1ea0      	subs	r0, r4, #2
 80107ba:	0089      	lsls	r1, r1, #2
 80107bc:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 80107c0:	b2c0      	uxtb	r0, r0
 80107c2:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 80107c6:	440a      	add	r2, r1
 80107c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80107cc:	445b      	add	r3, fp
 80107ce:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 80107d2:	681d      	ldr	r5, [r3, #0]
 80107d4:	6858      	ldr	r0, [r3, #4]
 80107d6:	6899      	ldr	r1, [r3, #8]
 80107d8:	60dd      	str	r5, [r3, #12]
 80107da:	6118      	str	r0, [r3, #16]
 80107dc:	6159      	str	r1, [r3, #20]
 80107de:	3b0c      	subs	r3, #12
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d1f6      	bne.n	80107d2 <kalman_3gyro.constprop.0+0x7c6>
 80107e4:	9b03      	ldr	r3, [sp, #12]
 80107e6:	edd3 ba00 	vldr	s23, [r3]
 80107ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80107ec:	ed8a ca00 	vstr	s24, [sl]
 80107f0:	ed83 8a00 	vstr	s16, [r3]
 80107f4:	9b01      	ldr	r3, [sp, #4]
 80107f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80107fa:	edc3 da00 	vstr	s27, [r3]
 80107fe:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 8010802:	eec7 7a2b 	vdiv.f32	s15, s14, s23
 8010806:	3301      	adds	r3, #1
 8010808:	b2db      	uxtb	r3, r3
 801080a:	429c      	cmp	r4, r3
 801080c:	bf28      	it	cs
 801080e:	461c      	movcs	r4, r3
 8010810:	9b08      	ldr	r3, [sp, #32]
 8010812:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 8010816:	ed93 ca03 	vldr	s24, [r3, #12]
 801081a:	ee27 ca8c 	vmul.f32	s24, s15, s24
 801081e:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8010a98 <kalman_3gyro.constprop.0+0xa8c>
 8010822:	eef0 6acc 	vabs.f32	s13, s24
 8010826:	eef4 6ac7 	vcmpe.f32	s13, s14
 801082a:	edd3 ba04 	vldr	s23, [r3, #16]
 801082e:	ed93 8a05 	vldr	s16, [r3, #20]
 8010832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010836:	ee67 baab 	vmul.f32	s23, s15, s23
 801083a:	ee27 8a88 	vmul.f32	s16, s15, s16
 801083e:	d517      	bpl.n	8010870 <kalman_3gyro.constprop.0+0x864>
 8010840:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010844:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801084c:	f2c0 8784 	blt.w	8011758 <kalman_3gyro.constprop.0+0x174c>
 8010850:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8010854:	ee17 0a90 	vmov	r0, s15
 8010858:	f7ef fe7a 	bl	8000550 <__aeabi_f2d>
 801085c:	ec41 0b10 	vmov	d0, r0, r1
 8010860:	f008 f972 	bl	8018b48 <floor>
 8010864:	ec51 0b10 	vmov	r0, r1, d0
 8010868:	f7f0 f97a 	bl	8000b60 <__aeabi_d2f>
 801086c:	ee0c 0a10 	vmov	s24, r0
 8010870:	eef0 7aeb 	vabs.f32	s15, s23
 8010874:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8010a98 <kalman_3gyro.constprop.0+0xa8c>
 8010878:	eef4 7ac7 	vcmpe.f32	s15, s14
 801087c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010880:	ed8d ca31 	vstr	s24, [sp, #196]	; 0xc4
 8010884:	d517      	bpl.n	80108b6 <kalman_3gyro.constprop.0+0x8aa>
 8010886:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801088a:	eef4 bae7 	vcmpe.f32	s23, s15
 801088e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010892:	f2c0 8755 	blt.w	8011740 <kalman_3gyro.constprop.0+0x1734>
 8010896:	ee7b 7aa7 	vadd.f32	s15, s23, s15
 801089a:	ee17 0a90 	vmov	r0, s15
 801089e:	f7ef fe57 	bl	8000550 <__aeabi_f2d>
 80108a2:	ec41 0b10 	vmov	d0, r0, r1
 80108a6:	f008 f94f 	bl	8018b48 <floor>
 80108aa:	ec51 0b10 	vmov	r0, r1, d0
 80108ae:	f7f0 f957 	bl	8000b60 <__aeabi_d2f>
 80108b2:	ee0b 0a90 	vmov	s23, r0
 80108b6:	eef0 7ac8 	vabs.f32	s15, s16
 80108ba:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8010a98 <kalman_3gyro.constprop.0+0xa8c>
 80108be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80108c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108c6:	edcd ba32 	vstr	s23, [sp, #200]	; 0xc8
 80108ca:	d517      	bpl.n	80108fc <kalman_3gyro.constprop.0+0x8f0>
 80108cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80108d0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80108d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d8:	f2c0 8726 	blt.w	8011728 <kalman_3gyro.constprop.0+0x171c>
 80108dc:	ee78 7a27 	vadd.f32	s15, s16, s15
 80108e0:	ee17 0a90 	vmov	r0, s15
 80108e4:	f7ef fe34 	bl	8000550 <__aeabi_f2d>
 80108e8:	ec41 0b10 	vmov	d0, r0, r1
 80108ec:	f008 f92c 	bl	8018b48 <floor>
 80108f0:	ec51 0b10 	vmov	r0, r1, d0
 80108f4:	f7f0 f934 	bl	8000b60 <__aeabi_d2f>
 80108f8:	ee08 0a10 	vmov	s16, r0
 80108fc:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 8010900:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 8010904:	1e61      	subs	r1, r4, #1
 8010906:	b249      	sxtb	r1, r1
 8010908:	2900      	cmp	r1, #0
 801090a:	dd17      	ble.n	801093c <kalman_3gyro.constprop.0+0x930>
 801090c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010910:	1ea2      	subs	r2, r4, #2
 8010912:	0089      	lsls	r1, r1, #2
 8010914:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 8010918:	b2d2      	uxtb	r2, r2
 801091a:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 801091e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010922:	4401      	add	r1, r0
 8010924:	445b      	add	r3, fp
 8010926:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 801092a:	681d      	ldr	r5, [r3, #0]
 801092c:	6858      	ldr	r0, [r3, #4]
 801092e:	689a      	ldr	r2, [r3, #8]
 8010930:	60dd      	str	r5, [r3, #12]
 8010932:	6118      	str	r0, [r3, #16]
 8010934:	615a      	str	r2, [r3, #20]
 8010936:	3b0c      	subs	r3, #12
 8010938:	4299      	cmp	r1, r3
 801093a:	d1f6      	bne.n	801092a <kalman_3gyro.constprop.0+0x91e>
 801093c:	9b02      	ldr	r3, [sp, #8]
 801093e:	ed86 ca00 	vstr	s24, [r6]
 8010942:	edc3 ba00 	vstr	s23, [r3]
 8010946:	ed89 8a00 	vstr	s16, [r9]
 801094a:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 801094e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010952:	3301      	adds	r3, #1
 8010954:	b2db      	uxtb	r3, r3
 8010956:	429c      	cmp	r4, r3
 8010958:	bf28      	it	cs
 801095a:	461c      	movcs	r4, r3
 801095c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801095e:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 8010962:	ed93 7a00 	vldr	s14, [r3]
 8010966:	9b08      	ldr	r3, [sp, #32]
 8010968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801096c:	ed93 ca06 	vldr	s24, [r3, #24]
 8010970:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8010974:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8010a98 <kalman_3gyro.constprop.0+0xa8c>
 8010978:	eef0 6acc 	vabs.f32	s13, s24
 801097c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010980:	edd3 ba07 	vldr	s23, [r3, #28]
 8010984:	ed93 8a08 	vldr	s16, [r3, #32]
 8010988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801098c:	ee67 baab 	vmul.f32	s23, s15, s23
 8010990:	ee27 8a88 	vmul.f32	s16, s15, s16
 8010994:	d517      	bpl.n	80109c6 <kalman_3gyro.constprop.0+0x9ba>
 8010996:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801099a:	eeb4 cae7 	vcmpe.f32	s24, s15
 801099e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a2:	f2c0 86b5 	blt.w	8011710 <kalman_3gyro.constprop.0+0x1704>
 80109a6:	ee7c 7a27 	vadd.f32	s15, s24, s15
 80109aa:	ee17 0a90 	vmov	r0, s15
 80109ae:	f7ef fdcf 	bl	8000550 <__aeabi_f2d>
 80109b2:	ec41 0b10 	vmov	d0, r0, r1
 80109b6:	f008 f8c7 	bl	8018b48 <floor>
 80109ba:	ec51 0b10 	vmov	r0, r1, d0
 80109be:	f7f0 f8cf 	bl	8000b60 <__aeabi_d2f>
 80109c2:	ee0c 0a10 	vmov	s24, r0
 80109c6:	eef0 7aeb 	vabs.f32	s15, s23
 80109ca:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8010a98 <kalman_3gyro.constprop.0+0xa8c>
 80109ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80109d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d6:	ed8d ca31 	vstr	s24, [sp, #196]	; 0xc4
 80109da:	d517      	bpl.n	8010a0c <kalman_3gyro.constprop.0+0xa00>
 80109dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80109e0:	eef4 bae7 	vcmpe.f32	s23, s15
 80109e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109e8:	f2c0 8686 	blt.w	80116f8 <kalman_3gyro.constprop.0+0x16ec>
 80109ec:	ee7b 7aa7 	vadd.f32	s15, s23, s15
 80109f0:	ee17 0a90 	vmov	r0, s15
 80109f4:	f7ef fdac 	bl	8000550 <__aeabi_f2d>
 80109f8:	ec41 0b10 	vmov	d0, r0, r1
 80109fc:	f008 f8a4 	bl	8018b48 <floor>
 8010a00:	ec51 0b10 	vmov	r0, r1, d0
 8010a04:	f7f0 f8ac 	bl	8000b60 <__aeabi_d2f>
 8010a08:	ee0b 0a90 	vmov	s23, r0
 8010a0c:	eef0 7ac8 	vabs.f32	s15, s16
 8010a10:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8010a98 <kalman_3gyro.constprop.0+0xa8c>
 8010a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a1c:	edcd ba32 	vstr	s23, [sp, #200]	; 0xc8
 8010a20:	d517      	bpl.n	8010a52 <kalman_3gyro.constprop.0+0xa46>
 8010a22:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010a26:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a2e:	f2c0 8657 	blt.w	80116e0 <kalman_3gyro.constprop.0+0x16d4>
 8010a32:	ee78 7a27 	vadd.f32	s15, s16, s15
 8010a36:	ee17 0a90 	vmov	r0, s15
 8010a3a:	f7ef fd89 	bl	8000550 <__aeabi_f2d>
 8010a3e:	ec41 0b10 	vmov	d0, r0, r1
 8010a42:	f008 f881 	bl	8018b48 <floor>
 8010a46:	ec51 0b10 	vmov	r0, r1, d0
 8010a4a:	f7f0 f889 	bl	8000b60 <__aeabi_d2f>
 8010a4e:	ee08 0a10 	vmov	s16, r0
 8010a52:	f89b 5791 	ldrb.w	r5, [fp, #1937]	; 0x791
 8010a56:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 8010a5a:	1e6b      	subs	r3, r5, #1
 8010a5c:	b25b      	sxtb	r3, r3
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	dd1e      	ble.n	8010aa0 <kalman_3gyro.constprop.0+0xa94>
 8010a62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010a66:	1eaa      	subs	r2, r5, #2
 8010a68:	009b      	lsls	r3, r3, #2
 8010a6a:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 8010a6e:	b2d2      	uxtb	r2, r2
 8010a70:	4418      	add	r0, r3
 8010a72:	f203 718c 	addw	r1, r3, #1932	; 0x78c
 8010a76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010a7a:	eb0b 0301 	add.w	r3, fp, r1
 8010a7e:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 8010a82:	681c      	ldr	r4, [r3, #0]
 8010a84:	6859      	ldr	r1, [r3, #4]
 8010a86:	689a      	ldr	r2, [r3, #8]
 8010a88:	60dc      	str	r4, [r3, #12]
 8010a8a:	6119      	str	r1, [r3, #16]
 8010a8c:	615a      	str	r2, [r3, #20]
 8010a8e:	3b0c      	subs	r3, #12
 8010a90:	4283      	cmp	r3, r0
 8010a92:	d1f6      	bne.n	8010a82 <kalman_3gyro.constprop.0+0xa76>
 8010a94:	e004      	b.n	8010aa0 <kalman_3gyro.constprop.0+0xa94>
 8010a96:	bf00      	nop
 8010a98:	4b000000 	.word	0x4b000000
 8010a9c:	00000000 	.word	0x00000000
 8010aa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010aa2:	aa52      	add	r2, sp, #328	; 0x148
 8010aa4:	ed83 ca00 	vstr	s24, [r3]
 8010aa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010aaa:	a92b      	add	r1, sp, #172	; 0xac
 8010aac:	edc3 ba00 	vstr	s23, [r3]
 8010ab0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010ab2:	a82e      	add	r0, sp, #184	; 0xb8
 8010ab4:	ed83 8a00 	vstr	s16, [r3]
 8010ab8:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 8010abc:	f20d 46cc 	addw	r6, sp, #1228	; 0x4cc
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	b2db      	uxtb	r3, r3
 8010ac4:	429d      	cmp	r5, r3
 8010ac6:	bf28      	it	cs
 8010ac8:	461d      	movcs	r5, r3
 8010aca:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 8010ace:	f88b 5790 	strb.w	r5, [fp, #1936]	; 0x790
 8010ad2:	461c      	mov	r4, r3
 8010ad4:	9313      	str	r3, [sp, #76]	; 0x4c
 8010ad6:	f7fe fa17 	bl	800ef08 <getRotationMatrix>
 8010ada:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 8010ade:	4635      	mov	r5, r6
 8010ae0:	6820      	ldr	r0, [r4, #0]
 8010ae2:	6861      	ldr	r1, [r4, #4]
 8010ae4:	68a2      	ldr	r2, [r4, #8]
 8010ae6:	68e3      	ldr	r3, [r4, #12]
 8010ae8:	3410      	adds	r4, #16
 8010aea:	42bc      	cmp	r4, r7
 8010aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010aee:	f106 0610 	add.w	r6, r6, #16
 8010af2:	d1f4      	bne.n	8010ade <kalman_3gyro.constprop.0+0xad2>
 8010af4:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 8010af8:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 8010afc:	eef0 7ae7 	vabs.f32	s15, s15
 8010b00:	eeb0 7ac7 	vabs.f32	s14, s14
 8010b04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b0c:	6820      	ldr	r0, [r4, #0]
 8010b0e:	6030      	str	r0, [r6, #0]
 8010b10:	f140 8582 	bpl.w	8011618 <kalman_3gyro.constprop.0+0x160c>
 8010b14:	f04f 0c04 	mov.w	ip, #4
 8010b18:	2600      	movs	r6, #0
 8010b1a:	eef0 7a47 	vmov.f32	s15, s14
 8010b1e:	4665      	mov	r5, ip
 8010b20:	4633      	mov	r3, r6
 8010b22:	f04f 0a07 	mov.w	sl, #7
 8010b26:	f04f 0906 	mov.w	r9, #6
 8010b2a:	f04f 0803 	mov.w	r8, #3
 8010b2e:	2101      	movs	r1, #1
 8010b30:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 8010b34:	eeb0 7ac7 	vabs.f32	s14, s14
 8010b38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b40:	f340 858e 	ble.w	8011660 <kalman_3gyro.constprop.0+0x1654>
 8010b44:	f04f 0a08 	mov.w	sl, #8
 8010b48:	f04f 0804 	mov.w	r8, #4
 8010b4c:	4655      	mov	r5, sl
 8010b4e:	4646      	mov	r6, r8
 8010b50:	f04f 0e06 	mov.w	lr, #6
 8010b54:	f04f 0907 	mov.w	r9, #7
 8010b58:	2403      	movs	r4, #3
 8010b5a:	f04f 0c05 	mov.w	ip, #5
 8010b5e:	2200      	movs	r2, #0
 8010b60:	2301      	movs	r3, #1
 8010b62:	2102      	movs	r1, #2
 8010b64:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8010b66:	f20d 40cc 	addw	r0, sp, #1228	; 0x4cc
 8010b6a:	443e      	add	r6, r7
 8010b6c:	443d      	add	r5, r7
 8010b6e:	edd6 6a00 	vldr	s13, [r6]
 8010b72:	ed95 7a00 	vldr	s14, [r5]
 8010b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010b7a:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8010b7e:	edc6 7a00 	vstr	s15, [r6]
 8010b82:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 8010b86:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8010b8a:	ed97 7a00 	vldr	s14, [r7]
 8010b8e:	edd5 7a00 	vldr	s15, [r5]
 8010b92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010b96:	edc7 6a00 	vstr	s13, [r7]
 8010b9a:	eb00 0588 	add.w	r5, r0, r8, lsl #2
 8010b9e:	eb00 078c 	add.w	r7, r0, ip, lsl #2
 8010ba2:	ed96 6a00 	vldr	s12, [r6]
 8010ba6:	ed97 7a00 	vldr	s14, [r7]
 8010baa:	edd5 7a00 	vldr	s15, [r5]
 8010bae:	eee6 7a47 	vfms.f32	s15, s12, s14
 8010bb2:	edc5 7a00 	vstr	s15, [r5]
 8010bb6:	eb00 0684 	add.w	r6, r0, r4, lsl #2
 8010bba:	ed97 7a00 	vldr	s14, [r7]
 8010bbe:	edd6 7a00 	vldr	s15, [r6]
 8010bc2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010bc6:	edc6 7a00 	vstr	s15, [r6]
 8010bca:	eb00 078a 	add.w	r7, r0, sl, lsl #2
 8010bce:	eb00 0689 	add.w	r6, r0, r9, lsl #2
 8010bd2:	edd7 5a00 	vldr	s11, [r7]
 8010bd6:	ed96 7a00 	vldr	s14, [r6]
 8010bda:	eea6 7a65 	vfms.f32	s14, s12, s11
 8010bde:	ed86 7a00 	vstr	s14, [r6]
 8010be2:	eb00 068e 	add.w	r6, r0, lr, lsl #2
 8010be6:	ed97 6a00 	vldr	s12, [r7]
 8010bea:	ed96 7a00 	vldr	s14, [r6]
 8010bee:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8010bf2:	ed86 7a00 	vstr	s14, [r6]
 8010bf6:	ed95 7a00 	vldr	s14, [r5]
 8010bfa:	eef0 7ae7 	vabs.f32	s15, s15
 8010bfe:	eeb0 7ac7 	vabs.f32	s14, s14
 8010c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c0a:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8010c0e:	9001      	str	r0, [sp, #4]
 8010c10:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8010c14:	ea4f 008e 	mov.w	r0, lr, lsl #2
 8010c18:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8010c1c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8010c20:	ea4f 0782 	mov.w	r7, r2, lsl #2
 8010c24:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 8010c28:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8010c2c:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8010c30:	dd0b      	ble.n	8010c4a <kalman_3gyro.constprop.0+0xc3e>
 8010c32:	461d      	mov	r5, r3
 8010c34:	4613      	mov	r3, r2
 8010c36:	4606      	mov	r6, r0
 8010c38:	462a      	mov	r2, r5
 8010c3a:	4667      	mov	r7, ip
 8010c3c:	4625      	mov	r5, r4
 8010c3e:	ea4f 0089 	mov.w	r0, r9, lsl #2
 8010c42:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8010c46:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8010c4a:	f20d 48cc 	addw	r8, sp, #1228	; 0x4cc
 8010c4e:	4444      	add	r4, r8
 8010c50:	4445      	add	r5, r8
 8010c52:	ed94 7a00 	vldr	s14, [r4]
 8010c56:	edd5 7a00 	vldr	s15, [r5]
 8010c5a:	ee87 1a27 	vdiv.f32	s2, s14, s15
 8010c5e:	ed84 1a00 	vstr	s2, [r4]
 8010c62:	4440      	add	r0, r8
 8010c64:	4446      	add	r6, r8
 8010c66:	edd6 7a00 	vldr	s15, [r6]
 8010c6a:	ed90 2a00 	vldr	s4, [r0]
 8010c6e:	eea1 2a67 	vfms.f32	s4, s2, s15
 8010c72:	ed80 2a00 	vstr	s4, [r0]
 8010c76:	f50d 60f8 	add.w	r0, sp, #1984	; 0x7c0
 8010c7a:	f20d 49cc 	addw	r9, sp, #1228	; 0x4cc
 8010c7e:	eb00 080c 	add.w	r8, r0, ip
 8010c82:	eb00 040e 	add.w	r4, r0, lr
 8010c86:	4438      	add	r0, r7
 8010c88:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 8010c8c:	444f      	add	r7, r9
 8010c8e:	f5a0 60cf 	sub.w	r0, r0, #1656	; 0x678
 8010c92:	edd7 1a00 	vldr	s3, [r7]
 8010c96:	edd4 5a00 	vldr	s11, [r4]
 8010c9a:	edd0 3a00 	vldr	s7, [r0]
 8010c9e:	f50d 64f8 	add.w	r4, sp, #1984	; 0x7c0
 8010ca2:	f50d 60f8 	add.w	r0, sp, #1984	; 0x7c0
 8010ca6:	f50d 67f8 	add.w	r7, sp, #1984	; 0x7c0
 8010caa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010cae:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8010cb2:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 8010cb6:	4601      	mov	r1, r0
 8010cb8:	4623      	mov	r3, r4
 8010cba:	463a      	mov	r2, r7
 8010cbc:	44cc      	add	ip, r9
 8010cbe:	f5a8 68cf 	sub.w	r8, r8, #1656	; 0x678
 8010cc2:	eddc 0a00 	vldr	s1, [ip]
 8010cc6:	ed98 5a00 	vldr	s10, [r8]
 8010cca:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8010cce:	f2a0 606c 	subw	r0, r0, #1644	; 0x66c
 8010cd2:	f5a1 61cc 	sub.w	r1, r1, #1632	; 0x660
 8010cd6:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 8010cda:	f2a7 676c 	subw	r7, r7, #1644	; 0x66c
 8010cde:	f5a2 62cc 	sub.w	r2, r2, #1632	; 0x660
 8010ce2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8010ce6:	eea0 5ae5 	vfms.f32	s10, s1, s11
 8010cea:	eee1 3ae5 	vfms.f32	s7, s3, s11
 8010cee:	ed90 4a00 	vldr	s8, [r0]
 8010cf2:	ed91 7a00 	vldr	s14, [r1]
 8010cf6:	ed93 6a00 	vldr	s12, [r3]
 8010cfa:	edd4 4a00 	vldr	s9, [r4]
 8010cfe:	edd7 6a00 	vldr	s13, [r7]
 8010d02:	edd2 7a00 	vldr	s15, [r2]
 8010d06:	ee82 3a82 	vdiv.f32	s6, s5, s4
 8010d0a:	eee0 4ac4 	vfms.f32	s9, s1, s8
 8010d0e:	eea7 6a60 	vfms.f32	s12, s14, s1
 8010d12:	eee5 3a41 	vfms.f32	s7, s10, s2
 8010d16:	eee1 6ac4 	vfms.f32	s13, s3, s8
 8010d1a:	eee7 7a61 	vfms.f32	s15, s14, s3
 8010d1e:	ee63 3a23 	vmul.f32	s7, s6, s7
 8010d22:	ed96 2a00 	vldr	s4, [r6]
 8010d26:	eee1 6a64 	vfms.f32	s13, s2, s9
 8010d2a:	eee1 7a46 	vfms.f32	s15, s2, s12
 8010d2e:	edd5 1a00 	vldr	s3, [r5]
 8010d32:	44ca      	add	sl, r9
 8010d34:	ee82 1aa1 	vdiv.f32	s2, s5, s3
 8010d38:	ee63 6a26 	vmul.f32	s13, s6, s13
 8010d3c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8010d40:	edda 1a00 	vldr	s3, [sl]
 8010d44:	eea2 5a63 	vfms.f32	s10, s4, s7
 8010d48:	9b01      	ldr	r3, [sp, #4]
 8010d4a:	44ce      	add	lr, r9
 8010d4c:	444b      	add	r3, r9
 8010d4e:	ed93 3a00 	vldr	s6, [r3]
 8010d52:	ee21 5a05 	vmul.f32	s10, s2, s10
 8010d56:	eee2 4a66 	vfms.f32	s9, s4, s13
 8010d5a:	eea7 6ac2 	vfms.f32	s12, s15, s4
 8010d5e:	eee1 5ae3 	vfms.f32	s11, s3, s7
 8010d62:	edde 0a00 	vldr	s1, [lr]
 8010d66:	ee61 4a24 	vmul.f32	s9, s2, s9
 8010d6a:	ee82 2aa0 	vdiv.f32	s4, s5, s1
 8010d6e:	ee26 6a01 	vmul.f32	s12, s12, s2
 8010d72:	eee3 5a45 	vfms.f32	s11, s6, s10
 8010d76:	eea1 4ae6 	vfms.f32	s8, s3, s13
 8010d7a:	eea7 7ae1 	vfms.f32	s14, s15, s3
 8010d7e:	ee62 5a25 	vmul.f32	s11, s4, s11
 8010d82:	eea6 7a43 	vfms.f32	s14, s12, s6
 8010d86:	eea3 4a64 	vfms.f32	s8, s6, s9
 8010d8a:	ee37 3aa4 	vadd.f32	s6, s15, s9
 8010d8e:	ee22 4a04 	vmul.f32	s8, s4, s8
 8010d92:	ee35 3ac3 	vsub.f32	s6, s11, s6
 8010d96:	ee27 7a02 	vmul.f32	s14, s14, s4
 8010d9a:	eebf 2a00 	vmov.f32	s4, #240	; 0xbf800000 -1.0
 8010d9e:	eeb4 3ac2 	vcmpe.f32	s6, s4
 8010da2:	ed8d 6a50 	vstr	s12, [sp, #320]	; 0x140
 8010da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010daa:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8010dae:	bfc8      	it	gt
 8010db0:	ee33 3a22 	vaddgt.f32	s6, s6, s5
 8010db4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8010db8:	bfcc      	ite	gt
 8010dba:	eef1 2ac3 	vsqrtgt.f32	s5, s6
 8010dbe:	ed5f 2ac9 	vldrle	s5, [pc, #-804]	; 8010a9c <kalman_3gyro.constprop.0+0xa90>
 8010dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc6:	edcd 3a4b 	vstr	s7, [sp, #300]	; 0x12c
 8010dca:	ed8d 5a4a 	vstr	s10, [sp, #296]	; 0x128
 8010dce:	edcd 5a49 	vstr	s11, [sp, #292]	; 0x124
 8010dd2:	ed8d 4a4c 	vstr	s8, [sp, #304]	; 0x130
 8010dd6:	edcd 4a4d 	vstr	s9, [sp, #308]	; 0x134
 8010dda:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 8010dde:	ed8d 7a4f 	vstr	s14, [sp, #316]	; 0x13c
 8010de2:	edcd 7a51 	vstr	s15, [sp, #324]	; 0x144
 8010de6:	f100 84eb 	bmi.w	80117c0 <kalman_3gyro.constprop.0+0x17b4>
 8010dea:	bfd8      	it	le
 8010dec:	ee62 2a86 	vmulle.f32	s5, s5, s12
 8010df0:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8010df4:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 8010df8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8010dfc:	eeb4 6ac3 	vcmpe.f32	s12, s6
 8010e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e04:	ee37 7a63 	vsub.f32	s14, s14, s7
 8010e08:	bf88      	it	hi
 8010e0a:	eeb7 3a00 	vmovhi.f32	s6, #112	; 0x3f800000  1.0
 8010e0e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010e12:	bf88      	it	hi
 8010e14:	ee36 6a03 	vaddhi.f32	s12, s12, s6
 8010e18:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010e1c:	bf8c      	ite	hi
 8010e1e:	eeb1 3ac6 	vsqrthi.f32	s6, s12
 8010e22:	ed1f 3ae2 	vldrls	s6, [pc, #-904]	; 8010a9c <kalman_3gyro.constprop.0+0xa90>
 8010e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e2a:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8010e2e:	f100 84c3 	bmi.w	80117b8 <kalman_3gyro.constprop.0+0x17ac>
 8010e32:	bfd8      	it	le
 8010e34:	ee23 3a07 	vmulle.f32	s6, s6, s14
 8010e38:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8010e3c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010e40:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e4c:	ee35 5a44 	vsub.f32	s10, s10, s8
 8010e50:	bf88      	it	hi
 8010e52:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 8010e56:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8010e5a:	bf88      	it	hi
 8010e5c:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 8010e60:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010e64:	bf8c      	ite	hi
 8010e66:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 8010e6a:	ed1f 7af4 	vldrls	s14, [pc, #-976]	; 8010a9c <kalman_3gyro.constprop.0+0xa90>
 8010e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e72:	ee23 3a06 	vmul.f32	s6, s6, s12
 8010e76:	f102 82c7 	bmi.w	8013408 <kalman_3gyro.constprop.0+0x33fc>
 8010e7a:	bfd8      	it	le
 8010e7c:	ee27 7a05 	vmulle.f32	s14, s14, s10
 8010e80:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010e84:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 8010e88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010e8c:	1e53      	subs	r3, r2, #1
 8010e8e:	b25b      	sxtb	r3, r3
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	dd1c      	ble.n	8010ece <kalman_3gyro.constprop.0+0xec2>
 8010e94:	3a02      	subs	r2, #2
 8010e96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010e9a:	b2d2      	uxtb	r2, r2
 8010e9c:	f1ab 040c 	sub.w	r4, fp, #12
 8010ea0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8010ea4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010ea8:	eba4 0482 	sub.w	r4, r4, r2, lsl #2
 8010eac:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8010eb0:	f8d3 033c 	ldr.w	r0, [r3, #828]	; 0x33c
 8010eb4:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 8010eb8:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 8010ebc:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
 8010ec0:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 8010ec4:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 8010ec8:	3b0c      	subs	r3, #12
 8010eca:	42a3      	cmp	r3, r4
 8010ecc:	d1f0      	bne.n	8010eb0 <kalman_3gyro.constprop.0+0xea4>
 8010ece:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8010ed2:	ed9d 6a04 	vldr	s12, [sp, #16]
 8010ed6:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8010eda:	ee85 6a86 	vdiv.f32	s12, s11, s12
 8010ede:	ee73 7a03 	vadd.f32	s15, s6, s6
 8010ee2:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010ee6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010eea:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010eee:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010ef2:	4bd9      	ldr	r3, [pc, #868]	; (8011258 <kalman_3gyro.constprop.0+0x124c>)
 8010ef4:	4ad9      	ldr	r2, [pc, #868]	; (801125c <kalman_3gyro.constprop.0+0x1250>)
 8010ef6:	edd3 ba00 	vldr	s23, [r3]
 8010efa:	f20d 2343 	addw	r3, sp, #579	; 0x243
 8010efe:	f1c3 0301 	rsb	r3, r3, #1
 8010f02:	930c      	str	r3, [sp, #48]	; 0x30
 8010f04:	ab2b      	add	r3, sp, #172	; 0xac
 8010f06:	e9cd b30a 	strd	fp, r3, [sp, #40]	; 0x28
 8010f0a:	9320      	str	r3, [sp, #128]	; 0x80
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	edcb 6ad2 	vstr	s13, [fp, #840]	; 0x348
 8010f12:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 8010f16:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 8010f1a:	ed92 8a00 	vldr	s16, [r2]
 8010f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8010f20:	f50d 7911 	add.w	r9, sp, #580	; 0x244
 8010f24:	f50d 7a62 	add.w	sl, sp, #904	; 0x388
 8010f28:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 8010f2c:	e9dd 0209 	ldrd	r0, r2, [sp, #36]	; 0x24
 8010f30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010f32:	3001      	adds	r0, #1
 8010f34:	f20d 41cc 	addw	r1, sp, #1228	; 0x4cc
 8010f38:	f20d 2343 	addw	r3, sp, #579	; 0x243
 8010f3c:	9009      	str	r0, [sp, #36]	; 0x24
 8010f3e:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 8010f42:	18ec      	adds	r4, r5, r3
 8010f44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f48:	f841 0b04 	str.w	r0, [r1], #4
 8010f4c:	f20d 2061 	addw	r0, sp, #609	; 0x261
 8010f50:	4298      	cmp	r0, r3
 8010f52:	f102 020c 	add.w	r2, r2, #12
 8010f56:	d1f2      	bne.n	8010f3e <kalman_3gyro.constprop.0+0xf32>
 8010f58:	f20d 43cc 	addw	r3, sp, #1228	; 0x4cc
 8010f5c:	ed93 7a00 	vldr	s14, [r3]
 8010f60:	f50d 639a 	add.w	r3, sp, #1232	; 0x4d0
 8010f64:	edd3 7a00 	vldr	s15, [r3]
 8010f68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f70:	bf84      	itt	hi
 8010f72:	f44f 7381 	movhi.w	r3, #258	; 0x102
 8010f76:	f8a9 3000 	strhhi.w	r3, [r9]
 8010f7a:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8010f7e:	ed93 7a00 	vldr	s14, [r3]
 8010f82:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 8010f86:	edd3 7a00 	vldr	s15, [r3]
 8010f8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f92:	bf84      	itt	hi
 8010f94:	f44f 7341 	movhi.w	r3, #772	; 0x304
 8010f98:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 8010f9c:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 8010fa0:	ed93 7a00 	vldr	s14, [r3]
 8010fa4:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 8010fa8:	edd3 7a00 	vldr	s15, [r3]
 8010fac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb4:	bf84      	itt	hi
 8010fb6:	f240 5306 	movwhi	r3, #1286	; 0x506
 8010fba:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 8010fbe:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 8010fc2:	ed93 7a00 	vldr	s14, [r3]
 8010fc6:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 8010fca:	edd3 7a00 	vldr	s15, [r3]
 8010fce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd6:	bf84      	itt	hi
 8010fd8:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 8010fdc:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 8010fe0:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 8010fe4:	ed93 7a00 	vldr	s14, [r3]
 8010fe8:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 8010fec:	edd3 7a00 	vldr	s15, [r3]
 8010ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ff8:	bf84      	itt	hi
 8010ffa:	f640 130a 	movwhi	r3, #2314	; 0x90a
 8010ffe:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 8011002:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 8011006:	ed93 7a00 	vldr	s14, [r3]
 801100a:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 801100e:	edd3 7a00 	vldr	s15, [r3]
 8011012:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801101a:	bf84      	itt	hi
 801101c:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 8011020:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 8011024:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 8011028:	ed93 7a00 	vldr	s14, [r3]
 801102c:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 8011030:	edd3 7a00 	vldr	s15, [r3]
 8011034:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801103c:	bf84      	itt	hi
 801103e:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 8011042:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 8011046:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 801104a:	ed93 7a00 	vldr	s14, [r3]
 801104e:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 8011052:	edd3 7a00 	vldr	s15, [r3]
 8011056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801105e:	bf84      	itt	hi
 8011060:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 8011064:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 8011068:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 801106c:	ed93 7a00 	vldr	s14, [r3]
 8011070:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 8011074:	edd3 7a00 	vldr	s15, [r3]
 8011078:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801107c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011080:	bf84      	itt	hi
 8011082:	f241 1312 	movwhi	r3, #4370	; 0x1112
 8011086:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 801108a:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 801108e:	ed93 7a00 	vldr	s14, [r3]
 8011092:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 8011096:	edd3 7a00 	vldr	s15, [r3]
 801109a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a2:	bf84      	itt	hi
 80110a4:	f241 3314 	movwhi	r3, #4884	; 0x1314
 80110a8:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 80110ac:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 80110b0:	ed93 7a00 	vldr	s14, [r3]
 80110b4:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 80110b8:	edd3 7a00 	vldr	s15, [r3]
 80110bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80110c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c4:	bf84      	itt	hi
 80110c6:	f241 5316 	movwhi	r3, #5398	; 0x1516
 80110ca:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 80110ce:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 80110d2:	ed93 7a00 	vldr	s14, [r3]
 80110d6:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 80110da:	edd3 7a00 	vldr	s15, [r3]
 80110de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80110e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110e6:	bf84      	itt	hi
 80110e8:	f241 7318 	movwhi	r3, #5912	; 0x1718
 80110ec:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 80110f0:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 80110f4:	ed93 7a00 	vldr	s14, [r3]
 80110f8:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 80110fc:	edd3 7a00 	vldr	s15, [r3]
 8011100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011108:	bf84      	itt	hi
 801110a:	f641 131a 	movwhi	r3, #6426	; 0x191a
 801110e:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 8011112:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 8011116:	ed93 7a00 	vldr	s14, [r3]
 801111a:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 801111e:	edd3 7a00 	vldr	s15, [r3]
 8011122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801112a:	bf84      	itt	hi
 801112c:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 8011130:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 8011134:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 8011138:	ed93 7a00 	vldr	s14, [r3]
 801113c:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 8011140:	edd3 7a00 	vldr	s15, [r3]
 8011144:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801114c:	bf88      	it	hi
 801114e:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 8011152:	f04f 021e 	mov.w	r2, #30
 8011156:	bf88      	it	hi
 8011158:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 801115c:	2101      	movs	r1, #1
 801115e:	4650      	mov	r0, sl
 8011160:	f009 fb4b 	bl	801a7fa <memset>
 8011164:	2304      	movs	r3, #4
 8011166:	9307      	str	r3, [sp, #28]
 8011168:	2302      	movs	r3, #2
 801116a:	9305      	str	r3, [sp, #20]
 801116c:	9a05      	ldr	r2, [sp, #20]
 801116e:	2701      	movs	r7, #1
 8011170:	4613      	mov	r3, r2
 8011172:	9206      	str	r2, [sp, #24]
 8011174:	40ba      	lsls	r2, r7
 8011176:	9205      	str	r2, [sp, #20]
 8011178:	eb03 0b07 	add.w	fp, r3, r7
 801117c:	9b05      	ldr	r3, [sp, #20]
 801117e:	463a      	mov	r2, r7
 8011180:	443b      	add	r3, r7
 8011182:	2b1f      	cmp	r3, #31
 8011184:	bfa8      	it	ge
 8011186:	231f      	movge	r3, #31
 8011188:	eba3 0802 	sub.w	r8, r3, r2
 801118c:	f1b8 0f00 	cmp.w	r8, #0
 8011190:	9701      	str	r7, [sp, #4]
 8011192:	f10b 35ff 	add.w	r5, fp, #4294967295
 8011196:	461f      	mov	r7, r3
 8011198:	dd33      	ble.n	8011202 <kalman_3gyro.constprop.0+0x11f6>
 801119a:	1e7b      	subs	r3, r7, #1
 801119c:	9302      	str	r3, [sp, #8]
 801119e:	1ebb      	subs	r3, r7, #2
 80111a0:	e9cd 8303 	strd	r8, r3, [sp, #12]
 80111a4:	4616      	mov	r6, r2
 80111a6:	2400      	movs	r4, #0
 80111a8:	46b8      	mov	r8, r7
 80111aa:	1e71      	subs	r1, r6, #1
 80111ac:	f919 2001 	ldrsb.w	r2, [r9, r1]
 80111b0:	f919 0005 	ldrsb.w	r0, [r9, r5]
 80111b4:	f20d 43cc 	addw	r3, sp, #1228	; 0x4cc
 80111b8:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 80111bc:	eb03 0780 	add.w	r7, r3, r0, lsl #2
 80111c0:	ed1c 7a01 	vldr	s14, [ip, #-4]
 80111c4:	ed57 7a01 	vldr	s15, [r7, #-4]
 80111c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80111cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d0:	f105 0c02 	add.w	ip, r5, #2
 80111d4:	f105 0701 	add.w	r7, r5, #1
 80111d8:	f240 81e5 	bls.w	80115a6 <kalman_3gyro.constprop.0+0x159a>
 80111dc:	45e0      	cmp	r8, ip
 80111de:	f80a 0004 	strb.w	r0, [sl, r4]
 80111e2:	f000 81d1 	beq.w	8011588 <kalman_3gyro.constprop.0+0x157c>
 80111e6:	463d      	mov	r5, r7
 80111e8:	9b03      	ldr	r3, [sp, #12]
 80111ea:	3401      	adds	r4, #1
 80111ec:	42a3      	cmp	r3, r4
 80111ee:	dcdc      	bgt.n	80111aa <kalman_3gyro.constprop.0+0x119e>
 80111f0:	4647      	mov	r7, r8
 80111f2:	4698      	mov	r8, r3
 80111f4:	9b01      	ldr	r3, [sp, #4]
 80111f6:	4642      	mov	r2, r8
 80111f8:	1e58      	subs	r0, r3, #1
 80111fa:	4651      	mov	r1, sl
 80111fc:	4448      	add	r0, r9
 80111fe:	f009 faef 	bl	801a7e0 <memcpy>
 8011202:	9b06      	ldr	r3, [sp, #24]
 8011204:	eb07 0b03 	add.w	fp, r7, r3
 8011208:	f1bb 0f1e 	cmp.w	fp, #30
 801120c:	ddb6      	ble.n	801117c <kalman_3gyro.constprop.0+0x1170>
 801120e:	9b07      	ldr	r3, [sp, #28]
 8011210:	3b01      	subs	r3, #1
 8011212:	9307      	str	r3, [sp, #28]
 8011214:	d1aa      	bne.n	801116c <kalman_3gyro.constprop.0+0x1160>
 8011216:	f999 200e 	ldrsb.w	r2, [r9, #14]
 801121a:	f20d 41cc 	addw	r1, sp, #1228	; 0x4cc
 801121e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011222:	ed52 7a01 	vldr	s15, [r2, #-4]
 8011226:	f999 300f 	ldrsb.w	r3, [r9, #15]
 801122a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801122e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011232:	ed13 7a01 	vldr	s14, [r3, #-4]
 8011236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801123a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801123e:	460a      	mov	r2, r1
 8011240:	bf4c      	ite	mi
 8011242:	2201      	movmi	r2, #1
 8011244:	2200      	movpl	r2, #0
 8011246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801124a:	bf4c      	ite	mi
 801124c:	2301      	movmi	r3, #1
 801124e:	2300      	movpl	r3, #0
 8011250:	429a      	cmp	r2, r3
 8011252:	f000 81c2 	beq.w	80115da <kalman_3gyro.constprop.0+0x15ce>
 8011256:	e013      	b.n	8011280 <kalman_3gyro.constprop.0+0x1274>
 8011258:	20002960 	.word	0x20002960
 801125c:	20002950 	.word	0x20002950
 8011260:	3f333333 	.word	0x3f333333
 8011264:	3f4ccccd 	.word	0x3f4ccccd
 8011268:	3f666666 	.word	0x3f666666
 801126c:	3ecccccc 	.word	0x3ecccccc
 8011270:	3dcccccd 	.word	0x3dcccccd
 8011274:	00000000 	.word	0x00000000
 8011278:	3fb33333 	.word	0x3fb33333
 801127c:	bfb33333 	.word	0xbfb33333
 8011280:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011284:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011288:	ee67 7a87 	vmul.f32	s15, s15, s14
 801128c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801128e:	ece3 7a01 	vstmia	r3!, {s15}
 8011292:	930b      	str	r3, [sp, #44]	; 0x2c
 8011294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011296:	3304      	adds	r3, #4
 8011298:	930a      	str	r3, [sp, #40]	; 0x28
 801129a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801129c:	2b03      	cmp	r3, #3
 801129e:	f47f ae45 	bne.w	8010f2c <kalman_3gyro.constprop.0+0xf20>
 80112a2:	eddd 7a2c 	vldr	s15, [sp, #176]	; 0xb0
 80112a6:	eddd 6a2b 	vldr	s13, [sp, #172]	; 0xac
 80112aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80112ae:	ed9d 7a2d 	vldr	s14, [sp, #180]	; 0xb4
 80112b2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80112b6:	ed5f 6a16 	vldr	s13, [pc, #-88]	; 8011260 <kalman_3gyro.constprop.0+0x1254>
 80112ba:	eee7 7a07 	vfma.f32	s15, s14, s14
 80112be:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80112c2:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80112c6:	ee6b 6a26 	vmul.f32	s13, s22, s13
 80112ca:	ee2f 4a07 	vmul.f32	s8, s30, s14
 80112ce:	eeea 6a86 	vfma.f32	s13, s21, s12
 80112d2:	ee6a 4a87 	vmul.f32	s9, s21, s14
 80112d6:	ee2b 5a07 	vmul.f32	s10, s22, s14
 80112da:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 80112de:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 80112e2:	eef1 7ae7 	vsqrt.f32	s15, s15
 80112e6:	eef0 3a66 	vmov.f32	s7, s13
 80112ea:	ee67 7a86 	vmul.f32	s15, s15, s12
 80112ee:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80112f2:	ed9d 6a15 	vldr	s12, [sp, #84]	; 0x54
 80112f6:	eec4 6a07 	vdiv.f32	s13, s8, s14
 80112fa:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 80112fe:	ed5f 5a27 	vldr	s11, [pc, #-156]	; 8011264 <kalman_3gyro.constprop.0+0x1258>
 8011302:	ee84 7a87 	vdiv.f32	s14, s9, s14
 8011306:	ee85 6a06 	vdiv.f32	s12, s10, s12
 801130a:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
 801130e:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 8011312:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 8011316:	ee63 5aa5 	vmul.f32	s11, s7, s11
 801131a:	edcd 6a3c 	vstr	s13, [sp, #240]	; 0xf0
 801131e:	ed8d 7a3d 	vstr	s14, [sp, #244]	; 0xf4
 8011322:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 8011326:	2b00      	cmp	r3, #0
 8011328:	f040 81a0 	bne.w	801166c <kalman_3gyro.constprop.0+0x1660>
 801132c:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 8011330:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8011334:	edc8 5a07 	vstr	s11, [r8, #28]
 8011338:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 801133c:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 8011340:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8011344:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
 8011348:	f8c8 1028 	str.w	r1, [r8, #40]	; 0x28
 801134c:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 8011350:	f8c8 3020 	str.w	r3, [r8, #32]
 8011354:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 8011358:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 801135c:	edd3 5a00 	vldr	s11, [r3]
 8011360:	ed92 8a00 	vldr	s16, [r2]
 8011364:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 8011368:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 801136c:	ed92 5a00 	vldr	s10, [r2]
 8011370:	ee28 8a25 	vmul.f32	s16, s16, s11
 8011374:	edd3 5a00 	vldr	s11, [r3]
 8011378:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 801137c:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 8011380:	eea5 8a25 	vfma.f32	s16, s10, s11
 8011384:	eddb ea02 	vldr	s29, [fp, #8]
 8011388:	ed92 5a00 	vldr	s10, [r2]
 801138c:	edd3 5a00 	vldr	s11, [r3]
 8011390:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 8011394:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 8011398:	eea5 8a25 	vfma.f32	s16, s10, s11
 801139c:	eef5 eac0 	vcmpe.f32	s29, #0.0
 80113a0:	ed92 5a00 	vldr	s10, [r2]
 80113a4:	edd3 5a00 	vldr	s11, [r3]
 80113a8:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 80113ac:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 80113b0:	eea5 8a25 	vfma.f32	s16, s10, s11
 80113b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b8:	ed92 5a00 	vldr	s10, [r2]
 80113bc:	edd3 5a00 	vldr	s11, [r3]
 80113c0:	eea5 8a25 	vfma.f32	s16, s10, s11
 80113c4:	f340 8228 	ble.w	8011818 <kalman_3gyro.constprop.0+0x180c>
 80113c8:	eddb 5a30 	vldr	s11, [fp, #192]	; 0xc0
 80113cc:	eef4 5ac8 	vcmpe.f32	s11, s16
 80113d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d4:	f100 815a 	bmi.w	801168c <kalman_3gyro.constprop.0+0x1680>
 80113d8:	eddb 5a31 	vldr	s11, [fp, #196]	; 0xc4
 80113dc:	edcd 5a01 	vstr	s11, [sp, #4]
 80113e0:	eddb 5a4a 	vldr	s11, [fp, #296]	; 0x128
 80113e4:	eef4 5ac8 	vcmpe.f32	s11, s16
 80113e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ec:	f142 8402 	bpl.w	8013bf4 <kalman_3gyro.constprop.0+0x3be8>
 80113f0:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 80113f4:	eeb4 5ac8 	vcmpe.f32	s10, s16
 80113f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113fc:	f342 8453 	ble.w	8013ca6 <kalman_3gyro.constprop.0+0x3c9a>
 8011400:	eddb 4a4c 	vldr	s9, [fp, #304]	; 0x130
 8011404:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801140c:	f342 85e7 	ble.w	8013fde <kalman_3gyro.constprop.0+0x3fd2>
 8011410:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 8011414:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 8011418:	ee38 3a65 	vsub.f32	s6, s16, s11
 801141c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011420:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8011424:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 8011428:	ee24 4a03 	vmul.f32	s8, s8, s6
 801142c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011430:	ee84 ca25 	vdiv.f32	s24, s8, s11
 8011434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011438:	ee3c ca23 	vadd.f32	s24, s24, s7
 801143c:	f202 85e7 	bhi.w	801400e <kalman_3gyro.constprop.0+0x4002>
 8011440:	eddb 5a50 	vldr	s11, [fp, #320]	; 0x140
 8011444:	eef4 5ac8 	vcmpe.f32	s11, s16
 8011448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801144c:	f342 85e7 	ble.w	801401e <kalman_3gyro.constprop.0+0x4012>
 8011450:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 8011454:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 8011458:	ee38 3a64 	vsub.f32	s6, s16, s9
 801145c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011460:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8011464:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011468:	ee84 caa5 	vdiv.f32	s24, s9, s11
 801146c:	ee3c ca23 	vadd.f32	s24, s24, s7
 8011470:	eddb 5a52 	vldr	s11, [fp, #328]	; 0x148
 8011474:	eef4 5ac8 	vcmpe.f32	s11, s16
 8011478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801147c:	f202 85e7 	bhi.w	801404e <kalman_3gyro.constprop.0+0x4042>
 8011480:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 8011484:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801148c:	f343 8274 	ble.w	8014978 <kalman_3gyro.constprop.0+0x496c>
 8011490:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 8011494:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 8011498:	ee38 3a65 	vsub.f32	s6, s16, s11
 801149c:	ee34 4a63 	vsub.f32	s8, s8, s7
 80114a0:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80114a4:	ee24 4a03 	vmul.f32	s8, s8, s6
 80114a8:	ee84 ca25 	vdiv.f32	s24, s8, s11
 80114ac:	ee3c ca23 	vadd.f32	s24, s24, s7
 80114b0:	eddb 5a56 	vldr	s11, [fp, #344]	; 0x158
 80114b4:	eef4 5ac8 	vcmpe.f32	s11, s16
 80114b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114bc:	f202 85e7 	bhi.w	801408e <kalman_3gyro.constprop.0+0x4082>
 80114c0:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 80114c4:	eef4 4ac8 	vcmpe.f32	s9, s16
 80114c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114cc:	f343 825c 	ble.w	8014988 <kalman_3gyro.constprop.0+0x497c>
 80114d0:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 80114d4:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 80114d8:	ee38 3a65 	vsub.f32	s6, s16, s11
 80114dc:	ee34 4a63 	vsub.f32	s8, s8, s7
 80114e0:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80114e4:	ee24 4a03 	vmul.f32	s8, s8, s6
 80114e8:	ee84 ca25 	vdiv.f32	s24, s8, s11
 80114ec:	ee3c ca23 	vadd.f32	s24, s24, s7
 80114f0:	eddb 5a5a 	vldr	s11, [fp, #360]	; 0x168
 80114f4:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80114f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114fc:	f2c2 85e7 	blt.w	80140ce <kalman_3gyro.constprop.0+0x40c2>
 8011500:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 8011504:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801150c:	f143 8230 	bpl.w	8014970 <kalman_3gyro.constprop.0+0x4964>
 8011510:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 8011514:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 8011518:	ee38 3a65 	vsub.f32	s6, s16, s11
 801151c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011520:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8011524:	ee24 4a03 	vmul.f32	s8, s8, s6
 8011528:	ee84 ca25 	vdiv.f32	s24, s8, s11
 801152c:	ee3c ca23 	vadd.f32	s24, s24, s7
 8011530:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 8011534:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801153c:	f2c2 85e7 	blt.w	801410e <kalman_3gyro.constprop.0+0x4102>
 8011540:	eddb 5a60 	vldr	s11, [fp, #384]	; 0x180
 8011544:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8011548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801154c:	f142 85e7 	bpl.w	801411e <kalman_3gyro.constprop.0+0x4112>
 8011550:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 8011554:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 8011558:	ee78 3a64 	vsub.f32	s7, s16, s9
 801155c:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011560:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8011564:	ee25 5a23 	vmul.f32	s10, s10, s7
 8011568:	ee85 ca25 	vdiv.f32	s24, s10, s11
 801156c:	ee3c ca04 	vadd.f32	s24, s24, s8
 8011570:	f002 bb42 	b.w	8013bf8 <kalman_3gyro.constprop.0+0x3bec>
 8011574:	ed5f 6ac4 	vldr	s13, [pc, #-784]	; 8011268 <kalman_3gyro.constprop.0+0x125c>
 8011578:	ed5f cac4 	vldr	s25, [pc, #-784]	; 801126c <kalman_3gyro.constprop.0+0x1260>
 801157c:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8011580:	ed5f 9ac5 	vldr	s19, [pc, #-788]	; 8011270 <kalman_3gyro.constprop.0+0x1264>
 8011584:	f7fe bef5 	b.w	8010372 <kalman_3gyro.constprop.0+0x366>
 8011588:	1c60      	adds	r0, r4, #1
 801158a:	455e      	cmp	r6, fp
 801158c:	ebab 0206 	sub.w	r2, fp, r6
 8011590:	4449      	add	r1, r9
 8011592:	4450      	add	r0, sl
 8011594:	f6bf ae27 	bge.w	80111e6 <kalman_3gyro.constprop.0+0x11da>
 8011598:	445c      	add	r4, fp
 801159a:	1ba4      	subs	r4, r4, r6
 801159c:	f009 f920 	bl	801a7e0 <memcpy>
 80115a0:	463d      	mov	r5, r7
 80115a2:	465e      	mov	r6, fp
 80115a4:	e620      	b.n	80111e8 <kalman_3gyro.constprop.0+0x11dc>
 80115a6:	3601      	adds	r6, #1
 80115a8:	455e      	cmp	r6, fp
 80115aa:	f80a 2004 	strb.w	r2, [sl, r4]
 80115ae:	f47f ae1b 	bne.w	80111e8 <kalman_3gyro.constprop.0+0x11dc>
 80115b2:	9b02      	ldr	r3, [sp, #8]
 80115b4:	1c6f      	adds	r7, r5, #1
 80115b6:	1c60      	adds	r0, r4, #1
 80115b8:	45b8      	cmp	r8, r7
 80115ba:	eba3 0205 	sub.w	r2, r3, r5
 80115be:	eb09 0105 	add.w	r1, r9, r5
 80115c2:	4450      	add	r0, sl
 80115c4:	f77f ae10 	ble.w	80111e8 <kalman_3gyro.constprop.0+0x11dc>
 80115c8:	f009 f90a 	bl	801a7e0 <memcpy>
 80115cc:	9b02      	ldr	r3, [sp, #8]
 80115ce:	441c      	add	r4, r3
 80115d0:	9b04      	ldr	r3, [sp, #16]
 80115d2:	1b64      	subs	r4, r4, r5
 80115d4:	1b5a      	subs	r2, r3, r5
 80115d6:	19d5      	adds	r5, r2, r7
 80115d8:	e606      	b.n	80111e8 <kalman_3gyro.constprop.0+0x11dc>
 80115da:	eef4 7a48 	vcmp.f32	s15, s16
 80115de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115e2:	f43f ae4d 	beq.w	8011280 <kalman_3gyro.constprop.0+0x1274>
 80115e6:	eef4 7a6b 	vcmp.f32	s15, s23
 80115ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ee:	f43f ae47 	beq.w	8011280 <kalman_3gyro.constprop.0+0x1274>
 80115f2:	eeb4 7a48 	vcmp.f32	s14, s16
 80115f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115fa:	f43f ae41 	beq.w	8011280 <kalman_3gyro.constprop.0+0x1274>
 80115fe:	eeb4 7a6b 	vcmp.f32	s14, s23
 8011602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011606:	f43f ae3b 	beq.w	8011280 <kalman_3gyro.constprop.0+0x1274>
 801160a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801160e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011612:	eee7 7a26 	vfma.f32	s15, s14, s13
 8011616:	e639      	b.n	801128c <kalman_3gyro.constprop.0+0x1280>
 8011618:	f04f 0804 	mov.w	r8, #4
 801161c:	2500      	movs	r5, #0
 801161e:	4646      	mov	r6, r8
 8011620:	4629      	mov	r1, r5
 8011622:	f04f 0a06 	mov.w	sl, #6
 8011626:	f04f 0907 	mov.w	r9, #7
 801162a:	f04f 0c03 	mov.w	ip, #3
 801162e:	2301      	movs	r3, #1
 8011630:	f7ff ba7e 	b.w	8010b30 <kalman_3gyro.constprop.0+0xb24>
 8011634:	ed5f 7af1 	vldr	s15, [pc, #-964]	; 8011274 <kalman_3gyro.constprop.0+0x1268>
 8011638:	ed5f 5af1 	vldr	s11, [pc, #-964]	; 8011278 <kalman_3gyro.constprop.0+0x126c>
 801163c:	ed1f 5af1 	vldr	s10, [pc, #-964]	; 801127c <kalman_3gyro.constprop.0+0x1270>
 8011640:	9a08      	ldr	r2, [sp, #32]
 8011642:	4b61      	ldr	r3, [pc, #388]	; (80117c8 <kalman_3gyro.constprop.0+0x17bc>)
 8011644:	eeb0 6a67 	vmov.f32	s12, s15
 8011648:	edc2 7a00 	vstr	s15, [r2]
 801164c:	eeb0 3a67 	vmov.f32	s6, s15
 8011650:	eef0 9a65 	vmov.f32	s19, s11
 8011654:	eeb0 9a45 	vmov.f32	s18, s10
 8011658:	6053      	str	r3, [r2, #4]
 801165a:	6093      	str	r3, [r2, #8]
 801165c:	f7fe bd54 	b.w	8010108 <kalman_3gyro.constprop.0+0xfc>
 8011660:	f04f 0e08 	mov.w	lr, #8
 8011664:	2405      	movs	r4, #5
 8011666:	2202      	movs	r2, #2
 8011668:	f7ff ba7c 	b.w	8010b64 <kalman_3gyro.constprop.0+0xb58>
 801166c:	2300      	movs	r3, #0
 801166e:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 8011672:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 8011676:	edc8 5a07 	vstr	s11, [r8, #28]
 801167a:	edc8 5a08 	vstr	s11, [r8, #32]
 801167e:	edc8 5a09 	vstr	s11, [r8, #36]	; 0x24
 8011682:	edc8 5a0a 	vstr	s11, [r8, #40]	; 0x28
 8011686:	edc8 5a0b 	vstr	s11, [r8, #44]	; 0x2c
 801168a:	e663      	b.n	8011354 <kalman_3gyro.constprop.0+0x1348>
 801168c:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 8011690:	eeb4 5ac8 	vcmpe.f32	s10, s16
 8011694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011698:	f342 82ff 	ble.w	8013c9a <kalman_3gyro.constprop.0+0x3c8e>
 801169c:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80116a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116a4:	f2c2 8610 	blt.w	80142c8 <kalman_3gyro.constprop.0+0x42bc>
 80116a8:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 80116ac:	eef4 4ac8 	vcmpe.f32	s9, s16
 80116b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116b4:	f342 863c 	ble.w	8014330 <kalman_3gyro.constprop.0+0x4324>
 80116b8:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 80116bc:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 80116c0:	ee38 3a65 	vsub.f32	s6, s16, s11
 80116c4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80116c8:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80116cc:	ee64 4a03 	vmul.f32	s9, s8, s6
 80116d0:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 80116d4:	ee74 5a23 	vadd.f32	s11, s8, s7
 80116d8:	edcd 5a01 	vstr	s11, [sp, #4]
 80116dc:	f002 bdff 	b.w	80142de <kalman_3gyro.constprop.0+0x42d2>
 80116e0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80116e4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80116e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ec:	f342 83e0 	ble.w	8013eb0 <kalman_3gyro.constprop.0+0x3ea4>
 80116f0:	ed9f 8a36 	vldr	s16, [pc, #216]	; 80117cc <kalman_3gyro.constprop.0+0x17c0>
 80116f4:	f7ff b9ad 	b.w	8010a52 <kalman_3gyro.constprop.0+0xa46>
 80116f8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80116fc:	eef4 bac7 	vcmpe.f32	s23, s14
 8011700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011704:	f342 839b 	ble.w	8013e3e <kalman_3gyro.constprop.0+0x3e32>
 8011708:	eddf ba30 	vldr	s23, [pc, #192]	; 80117cc <kalman_3gyro.constprop.0+0x17c0>
 801170c:	f7ff b97e 	b.w	8010a0c <kalman_3gyro.constprop.0+0xa00>
 8011710:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011714:	eeb4 cac7 	vcmpe.f32	s24, s14
 8011718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801171c:	f342 83da 	ble.w	8013ed4 <kalman_3gyro.constprop.0+0x3ec8>
 8011720:	ed9f ca2a 	vldr	s24, [pc, #168]	; 80117cc <kalman_3gyro.constprop.0+0x17c0>
 8011724:	f7ff b94f 	b.w	80109c6 <kalman_3gyro.constprop.0+0x9ba>
 8011728:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801172c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011734:	f342 8371 	ble.w	8013e1a <kalman_3gyro.constprop.0+0x3e0e>
 8011738:	ed9f 8a24 	vldr	s16, [pc, #144]	; 80117cc <kalman_3gyro.constprop.0+0x17c0>
 801173c:	f7ff b8de 	b.w	80108fc <kalman_3gyro.constprop.0+0x8f0>
 8011740:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011744:	eef4 bac7 	vcmpe.f32	s23, s14
 8011748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801174c:	f342 82e4 	ble.w	8013d18 <kalman_3gyro.constprop.0+0x3d0c>
 8011750:	eddf ba1e 	vldr	s23, [pc, #120]	; 80117cc <kalman_3gyro.constprop.0+0x17c0>
 8011754:	f7ff b8af 	b.w	80108b6 <kalman_3gyro.constprop.0+0x8aa>
 8011758:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801175c:	eeb4 cac7 	vcmpe.f32	s24, s14
 8011760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011764:	f342 82c6 	ble.w	8013cf4 <kalman_3gyro.constprop.0+0x3ce8>
 8011768:	ed9f ca18 	vldr	s24, [pc, #96]	; 80117cc <kalman_3gyro.constprop.0+0x17c0>
 801176c:	f7ff b880 	b.w	8010870 <kalman_3gyro.constprop.0+0x864>
 8011770:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011774:	eef4 dac7 	vcmpe.f32	s27, s14
 8011778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801177c:	f342 82a8 	ble.w	8013cd0 <kalman_3gyro.constprop.0+0x3cc4>
 8011780:	eddf da12 	vldr	s27, [pc, #72]	; 80117cc <kalman_3gyro.constprop.0+0x17c0>
 8011784:	f7ff b80e 	b.w	80107a4 <kalman_3gyro.constprop.0+0x798>
 8011788:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801178c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011794:	f342 828a 	ble.w	8013cac <kalman_3gyro.constprop.0+0x3ca0>
 8011798:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80117cc <kalman_3gyro.constprop.0+0x17c0>
 801179c:	f7fe bfdf 	b.w	801075e <kalman_3gyro.constprop.0+0x752>
 80117a0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80117a4:	eeb4 cac7 	vcmpe.f32	s24, s14
 80117a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ac:	f342 82e2 	ble.w	8013d74 <kalman_3gyro.constprop.0+0x3d68>
 80117b0:	ed9f ca06 	vldr	s24, [pc, #24]	; 80117cc <kalman_3gyro.constprop.0+0x17c0>
 80117b4:	f7fe bfb0 	b.w	8010718 <kalman_3gyro.constprop.0+0x70c>
 80117b8:	eeb1 3a43 	vneg.f32	s6, s6
 80117bc:	f7ff bb3c 	b.w	8010e38 <kalman_3gyro.constprop.0+0xe2c>
 80117c0:	eef1 2a62 	vneg.f32	s5, s5
 80117c4:	f7ff bb14 	b.w	8010df0 <kalman_3gyro.constprop.0+0xde4>
 80117c8:	3f333333 	.word	0x3f333333
 80117cc:	80000000 	.word	0x80000000
 80117d0:	3fb77778 	.word	0x3fb77778
 80117d4:	3f99999a 	.word	0x3f99999a
 80117d8:	3f4ccccd 	.word	0x3f4ccccd
 80117dc:	4247ffff 	.word	0x4247ffff
 80117e0:	3e4ccccd 	.word	0x3e4ccccd
 80117e4:	3dcccccd 	.word	0x3dcccccd
 80117e8:	42d40000 	.word	0x42d40000
 80117ec:	46979000 	.word	0x46979000
 80117f0:	4415c000 	.word	0x4415c000
 80117f4:	3ba3d70a 	.word	0x3ba3d70a
 80117f8:	3b449ba6 	.word	0x3b449ba6
 80117fc:	3c75c28f 	.word	0x3c75c28f
 8011800:	3c23d70a 	.word	0x3c23d70a
 8011804:	3d4cccc0 	.word	0x3d4cccc0
 8011808:	43480000 	.word	0x43480000
 801180c:	3d4ccccd 	.word	0x3d4ccccd
 8011810:	3cf5c28f 	.word	0x3cf5c28f
 8011814:	3eb33334 	.word	0x3eb33334
 8011818:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 801181c:	ed8d ca01 	vstr	s24, [sp, #4]
 8011820:	eddb ba74 	vldr	s23, [fp, #464]	; 0x1d0
 8011824:	eddb 3a72 	vldr	s7, [fp, #456]	; 0x1c8
 8011828:	ee79 baeb 	vsub.f32	s23, s19, s23
 801182c:	ee79 5a63 	vsub.f32	s11, s18, s7
 8011830:	eef0 baeb 	vabs.f32	s23, s23
 8011834:	eef0 5ae5 	vabs.f32	s11, s11
 8011838:	ed1f 5a16 	vldr	s10, [pc, #-88]	; 80117e4 <kalman_3gyro.constprop.0+0x17d8>
 801183c:	ee75 5aab 	vadd.f32	s11, s11, s23
 8011840:	eef4 5ac5 	vcmpe.f32	s11, s10
 8011844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011848:	f340 8238 	ble.w	8011cbc <kalman_3gyro.constprop.0+0x1cb0>
 801184c:	ed5f 4a20 	vldr	s9, [pc, #-128]	; 80117d0 <kalman_3gyro.constprop.0+0x17c4>
 8011850:	eef4 5ae4 	vcmpe.f32	s11, s9
 8011854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011858:	f302 81de 	bgt.w	8013c18 <kalman_3gyro.constprop.0+0x3c0c>
 801185c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8011860:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8011864:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8011868:	eea5 5aa4 	vfma.f32	s10, s11, s9
 801186c:	eef0 5a45 	vmov.f32	s11, s10
 8011870:	fec5 5aac 	vmaxnm.f32	s11, s11, s25
 8011874:	f89b 3000 	ldrb.w	r3, [fp]
 8011878:	edcd 5a05 	vstr	s11, [sp, #20]
 801187c:	2b00      	cmp	r3, #0
 801187e:	f000 8218 	beq.w	8011cb2 <kalman_3gyro.constprop.0+0x1ca6>
 8011882:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8011886:	2b00      	cmp	r3, #0
 8011888:	f000 81fd 	beq.w	8011c86 <kalman_3gyro.constprop.0+0x1c7a>
 801188c:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 8011890:	2300      	movs	r3, #0
 8011892:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
 8011896:	ed9d 4a35 	vldr	s8, [sp, #212]	; 0xd4
 801189a:	ee64 6a04 	vmul.f32	s13, s8, s8
 801189e:	eddd 0a34 	vldr	s1, [sp, #208]	; 0xd0
 80118a2:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 80118a6:	ee76 1aa6 	vadd.f32	s3, s13, s13
 80118aa:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80118ae:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 80118b2:	ee20 1aa0 	vmul.f32	s2, s1, s1
 80118b6:	ee65 6aa5 	vmul.f32	s13, s11, s11
 80118ba:	eeb0 3a61 	vmov.f32	s6, s3
 80118be:	ed9d 7a37 	vldr	s14, [sp, #220]	; 0xdc
 80118c2:	eea1 3a06 	vfma.f32	s6, s2, s12
 80118c6:	ee64 4a25 	vmul.f32	s9, s8, s11
 80118ca:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80118ce:	eeb0 0a42 	vmov.f32	s0, s4
 80118d2:	ee60 2a87 	vmul.f32	s5, s1, s14
 80118d6:	ee24 5a07 	vmul.f32	s10, s8, s14
 80118da:	ee72 fa43 	vsub.f32	s31, s4, s6
 80118de:	ee74 4aa4 	vadd.f32	s9, s9, s9
 80118e2:	eea3 0ae3 	vfms.f32	s0, s7, s7
 80118e6:	eef0 7a66 	vmov.f32	s15, s13
 80118ea:	ee20 4a84 	vmul.f32	s8, s1, s8
 80118ee:	ee35 5a05 	vadd.f32	s10, s10, s10
 80118f2:	eee1 7a06 	vfma.f32	s15, s2, s12
 80118f6:	ee25 7a87 	vmul.f32	s14, s11, s14
 80118fa:	eef0 ca64 	vmov.f32	s25, s9
 80118fe:	ee60 5aa5 	vmul.f32	s11, s1, s11
 8011902:	eee2 4ac6 	vfms.f32	s9, s5, s12
 8011906:	eef1 0ac0 	vsqrt.f32	s1, s0
 801190a:	ee6f daa3 	vmul.f32	s27, s31, s7
 801190e:	2200      	movs	r2, #0
 8011910:	eeb0 1a67 	vmov.f32	s2, s15
 8011914:	eee0 daa4 	vfma.f32	s27, s1, s9
 8011918:	eef0 7a45 	vmov.f32	s15, s10
 801191c:	9908      	ldr	r1, [sp, #32]
 801191e:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 8011922:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 8011926:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 801192a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801192e:	edcd da0a 	vstr	s27, [sp, #40]	; 0x28
 8011932:	edd1 da03 	vldr	s27, [r1, #12]
 8011936:	ee71 6aa6 	vadd.f32	s13, s3, s13
 801193a:	edd1 1a01 	vldr	s3, [r1, #4]
 801193e:	eee2 ca86 	vfma.f32	s25, s5, s12
 8011942:	edcd da02 	vstr	s27, [sp, #8]
 8011946:	ee37 7a07 	vadd.f32	s14, s14, s14
 801194a:	eddd da0a 	vldr	s27, [sp, #40]	; 0x28
 801194e:	edcd 7a06 	vstr	s15, [sp, #24]
 8011952:	ee67 2aa3 	vmul.f32	s5, s15, s7
 8011956:	edd1 7a02 	vldr	s15, [r1, #8]
 801195a:	edcd 1a0c 	vstr	s3, [sp, #48]	; 0x30
 801195e:	edd1 1a00 	vldr	s3, [r1]
 8011962:	ee77 7aed 	vsub.f32	s15, s15, s27
 8011966:	ee32 1a41 	vsub.f32	s2, s4, s2
 801196a:	eeb0 0a47 	vmov.f32	s0, s14
 801196e:	ee2c daa3 	vmul.f32	s26, s25, s7
 8011972:	edcd 1a0b 	vstr	s3, [sp, #44]	; 0x2c
 8011976:	edd1 1a05 	vldr	s3, [r1, #20]
 801197a:	eea4 0a06 	vfma.f32	s0, s8, s12
 801197e:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
 8011982:	eea0 da81 	vfma.f32	s26, s1, s2
 8011986:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 801198a:	edcd 1a04 	vstr	s3, [sp, #16]
 801198e:	edd1 1a04 	vldr	s3, [r1, #16]
 8011992:	ee37 dacd 	vsub.f32	s26, s15, s26
 8011996:	eee0 2a80 	vfma.f32	s5, s1, s0
 801199a:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801199e:	edcd 1a03 	vstr	s3, [sp, #12]
 80119a2:	ee77 2ae2 	vsub.f32	s5, s15, s5
 80119a6:	eef0 1a45 	vmov.f32	s3, s10
 80119aa:	eddd 7a03 	vldr	s15, [sp, #12]
 80119ae:	eee5 1ac6 	vfms.f32	s3, s11, s12
 80119b2:	ee94 7a06 	vfnms.f32	s14, s8, s12
 80119b6:	eea5 5a86 	vfma.f32	s10, s11, s12
 80119ba:	ed9d 4a04 	vldr	s8, [sp, #16]
 80119be:	ee37 6aec 	vsub.f32	s12, s15, s25
 80119c2:	eddd da02 	vldr	s27, [sp, #8]
 80119c6:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 80119ca:	edcd fa51 	vstr	s31, [sp, #324]	; 0x144
 80119ce:	edcd 0a32 	vstr	s1, [sp, #200]	; 0xc8
 80119d2:	edcd ca4e 	vstr	s25, [sp, #312]	; 0x138
 80119d6:	edcd 4a50 	vstr	s9, [sp, #320]	; 0x140
 80119da:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80119de:	edcd 7a7b 	vstr	s15, [sp, #492]	; 0x1ec
 80119e2:	eddd 7a06 	vldr	s15, [sp, #24]
 80119e6:	ed5f 5a85 	vldr	s11, [pc, #-532]	; 80117d4 <kalman_3gyro.constprop.0+0x17c8>
 80119ea:	edcd 7a4b 	vstr	s15, [sp, #300]	; 0x12c
 80119ee:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 80119f2:	ee33 3a42 	vsub.f32	s6, s6, s4
 80119f6:	eef4 7ae5 	vcmpe.f32	s15, s11
 80119fa:	ee33 3a04 	vadd.f32	s6, s6, s8
 80119fe:	ee71 1aad 	vadd.f32	s3, s3, s27
 8011a02:	ee72 6a66 	vsub.f32	s13, s4, s13
 8011a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a0a:	ed8d 1a4d 	vstr	s2, [sp, #308]	; 0x134
 8011a0e:	edcd 6a49 	vstr	s13, [sp, #292]	; 0x124
 8011a12:	ed8d da7a 	vstr	s26, [sp, #488]	; 0x1e8
 8011a16:	ed8d 0a4a 	vstr	s0, [sp, #296]	; 0x128
 8011a1a:	ed8d 7a4c 	vstr	s14, [sp, #304]	; 0x130
 8011a1e:	edcd 2a79 	vstr	s5, [sp, #484]	; 0x1e4
 8011a22:	ed8d 6a2c 	vstr	s12, [sp, #176]	; 0xb0
 8011a26:	ed8d 6a7d 	vstr	s12, [sp, #500]	; 0x1f4
 8011a2a:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 8011a2e:	edcd 1a2b 	vstr	s3, [sp, #172]	; 0xac
 8011a32:	edcd 1a7c 	vstr	s3, [sp, #496]	; 0x1f0
 8011a36:	ed8d 3a2d 	vstr	s6, [sp, #180]	; 0xb4
 8011a3a:	ed8d 3a7e 	vstr	s6, [sp, #504]	; 0x1f8
 8011a3e:	ed8d 9a82 	vstr	s18, [sp, #520]	; 0x208
 8011a42:	ed8d ea83 	vstr	s28, [sp, #524]	; 0x20c
 8011a46:	edcd 9a84 	vstr	s19, [sp, #528]	; 0x210
 8011a4a:	9231      	str	r2, [sp, #196]	; 0xc4
 8011a4c:	d506      	bpl.n	8011a5c <kalman_3gyro.constprop.0+0x1a50>
 8011a4e:	ed1f 7a9e 	vldr	s14, [pc, #-632]	; 80117d8 <kalman_3gyro.constprop.0+0x17cc>
 8011a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a5a:	dc01      	bgt.n	8011a60 <kalman_3gyro.constprop.0+0x1a54>
 8011a5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011a60:	ee7e 7a67 	vsub.f32	s15, s28, s15
 8011a64:	eef0 7ae7 	vabs.f32	s15, s15
 8011a68:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8011a6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a74:	f340 8146 	ble.w	8011d04 <kalman_3gyro.constprop.0+0x1cf8>
 8011a78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a84:	f142 80cc 	bpl.w	8013c20 <kalman_3gyro.constprop.0+0x3c14>
 8011a88:	ed1f 7aa6 	vldr	s14, [pc, #-664]	; 80117f4 <kalman_3gyro.constprop.0+0x17e8>
 8011a8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011a90:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 8011800 <kalman_3gyro.constprop.0+0x17f4>
 8011a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011a9c:	f102 814e 	bmi.w	8013d3c <kalman_3gyro.constprop.0+0x3d30>
 8011aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aa4:	f142 814e 	bpl.w	8013d44 <kalman_3gyro.constprop.0+0x3d38>
 8011aa8:	ed1f 7aac 	vldr	s14, [pc, #-688]	; 80117fc <kalman_3gyro.constprop.0+0x17f0>
 8011aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ab4:	f282 834a 	bge.w	801414c <kalman_3gyro.constprop.0+0x4140>
 8011ab8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011abc:	ed5f 6aac 	vldr	s13, [pc, #-688]	; 8011810 <kalman_3gyro.constprop.0+0x1804>
 8011ac0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ac8:	f2c2 8356 	blt.w	8014178 <kalman_3gyro.constprop.0+0x416c>
 8011acc:	ed1f 7ab1 	vldr	s14, [pc, #-708]	; 801180c <kalman_3gyro.constprop.0+0x1800>
 8011ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad8:	f142 8356 	bpl.w	8014188 <kalman_3gyro.constprop.0+0x417c>
 8011adc:	ed5f 6ab4 	vldr	s13, [pc, #-720]	; 8011810 <kalman_3gyro.constprop.0+0x1804>
 8011ae0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011ae4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011ae8:	ed1f 6ac4 	vldr	s12, [pc, #-784]	; 80117dc <kalman_3gyro.constprop.0+0x17d0>
 8011aec:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011af0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011af4:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011af8:	ed5f 6ac6 	vldr	s13, [pc, #-792]	; 80117e4 <kalman_3gyro.constprop.0+0x17d8>
 8011afc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b04:	f2c2 8356 	blt.w	80141b4 <kalman_3gyro.constprop.0+0x41a8>
 8011b08:	ed1f 7acb 	vldr	s14, [pc, #-812]	; 80117e0 <kalman_3gyro.constprop.0+0x17d4>
 8011b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b14:	f142 8356 	bpl.w	80141c4 <kalman_3gyro.constprop.0+0x41b8>
 8011b18:	ed5f 6ace 	vldr	s13, [pc, #-824]	; 80117e4 <kalman_3gyro.constprop.0+0x17d8>
 8011b1c:	ed1f 7ace 	vldr	s14, [pc, #-824]	; 80117e8 <kalman_3gyro.constprop.0+0x17dc>
 8011b20:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011b24:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8011b28:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011b2c:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8011b30:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011b34:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011b38:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b40:	db0d      	blt.n	8011b5e <kalman_3gyro.constprop.0+0x1b52>
 8011b42:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011b46:	ed1f 7ad7 	vldr	s14, [pc, #-860]	; 80117ec <kalman_3gyro.constprop.0+0x17e0>
 8011b4a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011b4e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011b52:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011b56:	ed1f 7ada 	vldr	s14, [pc, #-872]	; 80117f0 <kalman_3gyro.constprop.0+0x17e4>
 8011b5a:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011b62:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8011b66:	ee77 6a26 	vadd.f32	s13, s14, s13
 8011b6a:	ed5f 4ade 	vldr	s9, [pc, #-888]	; 80117f4 <kalman_3gyro.constprop.0+0x17e8>
 8011b6e:	eec5 5a26 	vdiv.f32	s11, s10, s13
 8011b72:	ed1f 6ade 	vldr	s12, [pc, #-888]	; 80117fc <kalman_3gyro.constprop.0+0x17f0>
 8011b76:	eef4 7ae4 	vcmpe.f32	s15, s9
 8011b7a:	fec5 5a86 	vmaxnm.f32	s11, s11, s12
 8011b7e:	ed5f 6ae0 	vldr	s13, [pc, #-896]	; 8011800 <kalman_3gyro.constprop.0+0x17f4>
 8011b82:	ed1f 5ae3 	vldr	s10, [pc, #-908]	; 80117f8 <kalman_3gyro.constprop.0+0x17ec>
 8011b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b8a:	ee25 5a85 	vmul.f32	s10, s11, s10
 8011b8e:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8011b92:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011b96:	f142 8386 	bpl.w	80142a6 <kalman_3gyro.constprop.0+0x429a>
 8011b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b9e:	f2c2 8386 	blt.w	80142ae <kalman_3gyro.constprop.0+0x42a2>
 8011ba2:	ed5f 6aea 	vldr	s13, [pc, #-936]	; 80117fc <kalman_3gyro.constprop.0+0x17f0>
 8011ba6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bae:	f142 8321 	bpl.w	80141f4 <kalman_3gyro.constprop.0+0x41e8>
 8011bb2:	ed5f 4aed 	vldr	s9, [pc, #-948]	; 8011800 <kalman_3gyro.constprop.0+0x17f4>
 8011bb6:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 8011804 <kalman_3gyro.constprop.0+0x17f8>
 8011bba:	ee77 4ae4 	vsub.f32	s9, s15, s9
 8011bbe:	ed1f 4aee 	vldr	s8, [pc, #-952]	; 8011808 <kalman_3gyro.constprop.0+0x17fc>
 8011bc2:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8011bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011bca:	eee4 6a84 	vfma.f32	s13, s9, s8
 8011bce:	eeb0 9a66 	vmov.f32	s18, s13
 8011bd2:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 8011810 <kalman_3gyro.constprop.0+0x1804>
 8011bd6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bde:	f2c2 8321 	blt.w	8014224 <kalman_3gyro.constprop.0+0x4218>
 8011be2:	ed5f 6af6 	vldr	s13, [pc, #-984]	; 801180c <kalman_3gyro.constprop.0+0x1800>
 8011be6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bee:	f142 8321 	bpl.w	8014234 <kalman_3gyro.constprop.0+0x4228>
 8011bf2:	ed5f 4af9 	vldr	s9, [pc, #-996]	; 8011810 <kalman_3gyro.constprop.0+0x1804>
 8011bf6:	ed5f 6af9 	vldr	s13, [pc, #-996]	; 8011814 <kalman_3gyro.constprop.0+0x1808>
 8011bfa:	ee77 4ae4 	vsub.f32	s9, s15, s9
 8011bfe:	ed9f 4a31 	vldr	s8, [pc, #196]	; 8011cc4 <kalman_3gyro.constprop.0+0x1cb8>
 8011c02:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8011c06:	eddf 6a30 	vldr	s13, [pc, #192]	; 8011cc8 <kalman_3gyro.constprop.0+0x1cbc>
 8011c0a:	eee4 6a84 	vfma.f32	s13, s9, s8
 8011c0e:	eeb0 9a66 	vmov.f32	s18, s13
 8011c12:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8011cfc <kalman_3gyro.constprop.0+0x1cf0>
 8011c16:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c1e:	f2c2 8321 	blt.w	8014264 <kalman_3gyro.constprop.0+0x4258>
 8011c22:	eddf 6a33 	vldr	s13, [pc, #204]	; 8011cf0 <kalman_3gyro.constprop.0+0x1ce4>
 8011c26:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c2e:	f142 8321 	bpl.w	8014274 <kalman_3gyro.constprop.0+0x4268>
 8011c32:	eddf 4a32 	vldr	s9, [pc, #200]	; 8011cfc <kalman_3gyro.constprop.0+0x1cf0>
 8011c36:	eddf 6a25 	vldr	s13, [pc, #148]	; 8011ccc <kalman_3gyro.constprop.0+0x1cc0>
 8011c3a:	ee77 4ae4 	vsub.f32	s9, s15, s9
 8011c3e:	eeb2 4a04 	vmov.f32	s8, #36	; 0x41200000  10.0
 8011c42:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8011c46:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 8011c4a:	eee4 6a84 	vfma.f32	s13, s9, s8
 8011c4e:	eeb0 9a66 	vmov.f32	s18, s13
 8011c52:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011c56:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c5e:	f2c1 87e9 	blt.w	8013c34 <kalman_3gyro.constprop.0+0x3c28>
 8011c62:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8011c66:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8011cd0 <kalman_3gyro.constprop.0+0x1cc4>
 8011c6a:	ee77 4ae4 	vsub.f32	s9, s15, s9
 8011c6e:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
 8011c72:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8011c76:	eddf 6a17 	vldr	s13, [pc, #92]	; 8011cd4 <kalman_3gyro.constprop.0+0x1cc8>
 8011c7a:	eee4 6a84 	vfma.f32	s13, s9, s8
 8011c7e:	eeb0 9a66 	vmov.f32	s18, s13
 8011c82:	f001 bfd7 	b.w	8013c34 <kalman_3gyro.constprop.0+0x3c28>
 8011c86:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011c8a:	ee36 6a07 	vadd.f32	s12, s12, s14
 8011c8e:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
 8011c92:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011c96:	ed9b 7a05 	vldr	s14, [fp, #20]
 8011c9a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011c9e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011ca2:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011ca6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cae:	f102 8158 	bmi.w	8013f62 <kalman_3gyro.constprop.0+0x3f56>
 8011cb2:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 8011cb6:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
 8011cba:	e5ec      	b.n	8011896 <kalman_3gyro.constprop.0+0x188a>
 8011cbc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011cc0:	e5d6      	b.n	8011870 <kalman_3gyro.constprop.0+0x1864>
 8011cc2:	bf00      	nop
 8011cc4:	4247ffff 	.word	0x4247ffff
 8011cc8:	3f933333 	.word	0x3f933333
 8011ccc:	410c0000 	.word	0x410c0000
 8011cd0:	42c80000 	.word	0x42c80000
 8011cd4:	424a0000 	.word	0x424a0000
 8011cd8:	3c23d70a 	.word	0x3c23d70a
 8011cdc:	3b449ba6 	.word	0x3b449ba6
 8011ce0:	3fb33333 	.word	0x3fb33333
 8011ce4:	3ecccccd 	.word	0x3ecccccd
 8011ce8:	3f8f5c29 	.word	0x3f8f5c29
 8011cec:	3f59999a 	.word	0x3f59999a
 8011cf0:	3e4ccccd 	.word	0x3e4ccccd
 8011cf4:	3f99999a 	.word	0x3f99999a
 8011cf8:	3be56041 	.word	0x3be56041
 8011cfc:	3dcccccd 	.word	0x3dcccccd
 8011d00:	3e333333 	.word	0x3e333333
 8011d04:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8011d08:	ed1f 6a0d 	vldr	s12, [pc, #-52]	; 8011cd8 <kalman_3gyro.constprop.0+0x1ccc>
 8011d0c:	eeb0 7a49 	vmov.f32	s14, s18
 8011d10:	eef0 5a49 	vmov.f32	s11, s18
 8011d14:	ed1f 5a0f 	vldr	s10, [pc, #-60]	; 8011cdc <kalman_3gyro.constprop.0+0x1cd0>
 8011d18:	eddd 6a05 	vldr	s13, [sp, #20]
 8011d1c:	eddd 4a01 	vldr	s9, [sp, #4]
 8011d20:	ee66 caa4 	vmul.f32	s25, s13, s9
 8011d24:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 8011d28:	ee76 4aa6 	vadd.f32	s9, s13, s13
 8011d2c:	eddd 6a1b 	vldr	s13, [sp, #108]	; 0x6c
 8011d30:	ed9d 4a6d 	vldr	s8, [sp, #436]	; 0x1b4
 8011d34:	eddd 3a6e 	vldr	s7, [sp, #440]	; 0x1b8
 8011d38:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 8011d3c:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 8011d40:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011d44:	ee2c 4a84 	vmul.f32	s8, s25, s8
 8011d48:	ee63 3aac 	vmul.f32	s7, s7, s25
 8011d4c:	ee64 4a87 	vmul.f32	s9, s9, s14
 8011d50:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011d54:	ee63 ca2c 	vmul.f32	s25, s6, s25
 8011d58:	ee2c ca22 	vmul.f32	s24, s24, s5
 8011d5c:	ed8d 5a46 	vstr	s10, [sp, #280]	; 0x118
 8011d60:	ed9d 5a0d 	vldr	s10, [sp, #52]	; 0x34
 8011d64:	f89b 200c 	ldrb.w	r2, [fp, #12]
 8011d68:	edcd 4a76 	vstr	s9, [sp, #472]	; 0x1d8
 8011d6c:	edcd 6a77 	vstr	s13, [sp, #476]	; 0x1dc
 8011d70:	ed8d aa71 	vstr	s20, [sp, #452]	; 0x1c4
 8011d74:	ed8d aa72 	vstr	s20, [sp, #456]	; 0x1c8
 8011d78:	ed8d 6a47 	vstr	s12, [sp, #284]	; 0x11c
 8011d7c:	ed8d 5a78 	vstr	s10, [sp, #480]	; 0x1e0
 8011d80:	ed8d 4a6d 	vstr	s8, [sp, #436]	; 0x1b4
 8011d84:	edcd 3a6e 	vstr	s7, [sp, #440]	; 0x1b8
 8011d88:	edcd ca6f 	vstr	s25, [sp, #444]	; 0x1bc
 8011d8c:	ed8d ca70 	vstr	s24, [sp, #448]	; 0x1c0
 8011d90:	2a00      	cmp	r2, #0
 8011d92:	f001 831c 	beq.w	80133ce <kalman_3gyro.constprop.0+0x33c2>
 8011d96:	ee77 3a07 	vadd.f32	s7, s14, s14
 8011d9a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8011d9e:	ee27 ca0c 	vmul.f32	s24, s14, s24
 8011da2:	ee25 5a25 	vmul.f32	s10, s10, s11
 8011da6:	ee2a 7a07 	vmul.f32	s14, s20, s14
 8011daa:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8011dae:	ee26 6a25 	vmul.f32	s12, s12, s11
 8011db2:	f89b 200d 	ldrb.w	r2, [fp, #13]
 8011db6:	f89b 100e 	ldrb.w	r1, [fp, #14]
 8011dba:	ed8d ca70 	vstr	s24, [sp, #448]	; 0x1c0
 8011dbe:	ed8d 5a40 	vstr	s10, [sp, #256]	; 0x100
 8011dc2:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 8011dc6:	ed8d 5a42 	vstr	s10, [sp, #264]	; 0x108
 8011dca:	edcd 6a77 	vstr	s13, [sp, #476]	; 0x1dc
 8011dce:	ed8d 7a71 	vstr	s14, [sp, #452]	; 0x1c4
 8011dd2:	ed8d 7a72 	vstr	s14, [sp, #456]	; 0x1c8
 8011dd6:	ed8d 6a47 	vstr	s12, [sp, #284]	; 0x11c
 8011dda:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
 8011dde:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
 8011de2:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
 8011de6:	f88d 10a3 	strb.w	r1, [sp, #163]	; 0xa3
 8011dea:	f88d 10a4 	strb.w	r1, [sp, #164]	; 0xa4
 8011dee:	f88d 10a5 	strb.w	r1, [sp, #165]	; 0xa5
 8011df2:	b159      	cbz	r1, 8011e0c <kalman_3gyro.constprop.0+0x1e00>
 8011df4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e00:	dd04      	ble.n	8011e0c <kalman_3gyro.constprop.0+0x1e00>
 8011e02:	2000      	movs	r0, #0
 8011e04:	f88d 00a3 	strb.w	r0, [sp, #163]	; 0xa3
 8011e08:	f8ad 00a4 	strh.w	r0, [sp, #164]	; 0xa4
 8011e0c:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8011e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e14:	dd09      	ble.n	8011e2a <kalman_3gyro.constprop.0+0x1e1e>
 8011e16:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 8011e1a:	eef4 7ac8 	vcmpe.f32	s15, s16
 8011e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e22:	db02      	blt.n	8011e2a <kalman_3gyro.constprop.0+0x1e1e>
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	f001 872e 	beq.w	8013c86 <kalman_3gyro.constprop.0+0x3c7a>
 8011e2a:	b132      	cbz	r2, 8011e3a <kalman_3gyro.constprop.0+0x1e2e>
 8011e2c:	f240 1001 	movw	r0, #257	; 0x101
 8011e30:	2301      	movs	r3, #1
 8011e32:	f8ad 00a0 	strh.w	r0, [sp, #160]	; 0xa0
 8011e36:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
 8011e3a:	2001      	movs	r0, #1
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	f88d 00a9 	strb.w	r0, [sp, #169]	; 0xa9
 8011e42:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 8011e46:	ed5f 7a5a 	vldr	s15, [pc, #-360]	; 8011ce0 <kalman_3gyro.constprop.0+0x1cd4>
 8011e4a:	eef4 9ae7 	vcmpe.f32	s19, s15
 8011e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e52:	dc09      	bgt.n	8011e68 <kalman_3gyro.constprop.0+0x1e5c>
 8011e54:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 8011ce4 <kalman_3gyro.constprop.0+0x1cd8>
 8011e58:	eef4 9ae7 	vcmpe.f32	s19, s15
 8011e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e60:	d402      	bmi.n	8011e68 <kalman_3gyro.constprop.0+0x1e5c>
 8011e62:	2a00      	cmp	r2, #0
 8011e64:	f041 87c6 	bne.w	8013df4 <kalman_3gyro.constprop.0+0x3de8>
 8011e68:	2300      	movs	r3, #0
 8011e6a:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
 8011e6e:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
 8011e72:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
 8011e76:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 8011e7a:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 8011ce8 <kalman_3gyro.constprop.0+0x1cdc>
 8011e7e:	eeb4 eae7 	vcmpe.f32	s28, s15
 8011e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e86:	dc09      	bgt.n	8011e9c <kalman_3gyro.constprop.0+0x1e90>
 8011e88:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8011cec <kalman_3gyro.constprop.0+0x1ce0>
 8011e8c:	eeb4 eae7 	vcmpe.f32	s28, s15
 8011e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e94:	d402      	bmi.n	8011e9c <kalman_3gyro.constprop.0+0x1e90>
 8011e96:	2900      	cmp	r1, #0
 8011e98:	f041 877e 	bne.w	8013d98 <kalman_3gyro.constprop.0+0x3d8c>
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	f88d 30a3 	strb.w	r3, [sp, #163]	; 0xa3
 8011ea2:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
 8011ea6:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
 8011eaa:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8011eae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011eb2:	eef4 bae7 	vcmpe.f32	s23, s15
 8011eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eba:	f341 8275 	ble.w	80133a8 <kalman_3gyro.constprop.0+0x339c>
 8011ebe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011ec2:	ee7b 7aa7 	vadd.f32	s15, s23, s15
 8011ec6:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8011eca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011ece:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8011ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ed6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011eda:	eef4 bac7 	vcmpe.f32	s23, s14
 8011ede:	2300      	movs	r3, #0
 8011ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee4:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
 8011ee8:	bfc4      	itt	gt
 8011eea:	f88d 30a9 	strbgt.w	r3, [sp, #169]	; 0xa9
 8011eee:	f88d 30ab 	strbgt.w	r3, [sp, #171]	; 0xab
 8011ef2:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
 8011ef6:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8011efa:	edcd 4a76 	vstr	s9, [sp, #472]	; 0x1d8
 8011efe:	2b0e      	cmp	r3, #14
 8011f00:	edcd 7a78 	vstr	s15, [sp, #480]	; 0x1e0
 8011f04:	dc02      	bgt.n	8011f0c <kalman_3gyro.constprop.0+0x1f00>
 8011f06:	3305      	adds	r3, #5
 8011f08:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 8011f0c:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8011f10:	eef4 7acf 	vcmpe.f32	s15, s30
 8011f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f18:	f340 81d4 	ble.w	80122c4 <kalman_3gyro.constprop.0+0x22b8>
 8011f1c:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 8011f20:	eef4 7aea 	vcmpe.f32	s15, s21
 8011f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f28:	f340 81cc 	ble.w	80122c4 <kalman_3gyro.constprop.0+0x22b8>
 8011f2c:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8011f30:	eef4 7acb 	vcmpe.f32	s15, s22
 8011f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f38:	f340 81c4 	ble.w	80122c4 <kalman_3gyro.constprop.0+0x22b8>
 8011f3c:	9b08      	ldr	r3, [sp, #32]
 8011f3e:	ed5f 7a94 	vldr	s15, [pc, #-592]	; 8011cf0 <kalman_3gyro.constprop.0+0x1ce4>
 8011f42:	ed93 7a06 	vldr	s14, [r3, #24]
 8011f46:	eef0 6ac7 	vabs.f32	s13, s14
 8011f4a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f52:	f140 81b7 	bpl.w	80122c4 <kalman_3gyro.constprop.0+0x22b8>
 8011f56:	edd3 6a07 	vldr	s13, [r3, #28]
 8011f5a:	eeb0 6ae6 	vabs.f32	s12, s13
 8011f5e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f66:	f140 81ad 	bpl.w	80122c4 <kalman_3gyro.constprop.0+0x22b8>
 8011f6a:	ed93 6a08 	vldr	s12, [r3, #32]
 8011f6e:	eef0 5ac6 	vabs.f32	s11, s12
 8011f72:	eef4 5ae7 	vcmpe.f32	s11, s15
 8011f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f7a:	f140 81a3 	bpl.w	80122c4 <kalman_3gyro.constprop.0+0x22b8>
 8011f7e:	eddd 7a02 	vldr	s15, [sp, #8]
 8011f82:	eeb0 eae7 	vabs.f32	s28, s15
 8011f86:	ed5f 7aa5 	vldr	s15, [pc, #-660]	; 8011cf4 <kalman_3gyro.constprop.0+0x1ce8>
 8011f8a:	eeb4 eae7 	vcmpe.f32	s28, s15
 8011f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f92:	f140 8197 	bpl.w	80122c4 <kalman_3gyro.constprop.0+0x22b8>
 8011f96:	eddd 5a03 	vldr	s11, [sp, #12]
 8011f9a:	eef0 5ae5 	vabs.f32	s11, s11
 8011f9e:	eef4 5ae7 	vcmpe.f32	s11, s15
 8011fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fa6:	f140 818d 	bpl.w	80122c4 <kalman_3gyro.constprop.0+0x22b8>
 8011faa:	eddd 5a04 	vldr	s11, [sp, #16]
 8011fae:	eef0 5ae5 	vabs.f32	s11, s11
 8011fb2:	eef4 5ae7 	vcmpe.f32	s11, s15
 8011fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fba:	f140 8183 	bpl.w	80122c4 <kalman_3gyro.constprop.0+0x22b8>
 8011fbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011fc0:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 8011fc4:	edd3 7a00 	vldr	s15, [r3]
 8011fc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011fca:	edd4 5a00 	vldr	s11, [r4]
 8011fce:	ed93 4a00 	vldr	s8, [r3]
 8011fd2:	fe87 5a84 	vmaxnm.f32	s10, s15, s8
 8011fd6:	fec7 4ac4 	vminnm.f32	s9, s15, s8
 8011fda:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011fde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011fe0:	fe85 5a25 	vmaxnm.f32	s10, s10, s11
 8011fe4:	ed93 4a00 	vldr	s8, [r3]
 8011fe8:	fec4 4ae5 	vminnm.f32	s9, s9, s11
 8011fec:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8011ff0:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 8011ff4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011ff6:	2a09      	cmp	r2, #9
 8011ff8:	edd3 5a00 	vldr	s11, [r3]
 8011ffc:	bf8c      	ite	hi
 8011ffe:	230a      	movhi	r3, #10
 8012000:	2305      	movls	r3, #5
 8012002:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 8012006:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 801200a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801200e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012010:	2b05      	cmp	r3, #5
 8012012:	fe85 5a25 	vmaxnm.f32	s10, s10, s11
 8012016:	fec4 4ae5 	vminnm.f32	s9, s9, s11
 801201a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801201e:	edd1 5a00 	vldr	s11, [r1]
 8012022:	d033      	beq.n	801208c <kalman_3gyro.constprop.0+0x2080>
 8012024:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 8012028:	ed91 4a00 	vldr	s8, [r1]
 801202c:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 8012030:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 8012034:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 8012038:	ee77 7a84 	vadd.f32	s15, s15, s8
 801203c:	ed91 4a00 	vldr	s8, [r1]
 8012040:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 8012044:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 8012048:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 801204c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012050:	ed91 4a00 	vldr	s8, [r1]
 8012054:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 8012058:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 801205c:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 8012060:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012064:	ed91 4a00 	vldr	s8, [r1]
 8012068:	2b0a      	cmp	r3, #10
 801206a:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 801206e:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 8012072:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012076:	d109      	bne.n	801208c <kalman_3gyro.constprop.0+0x2080>
 8012078:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 801207c:	ed91 4a00 	vldr	s8, [r1]
 8012080:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 8012084:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 8012088:	ee77 7a84 	vadd.f32	s15, s15, s8
 801208c:	ee35 5a64 	vsub.f32	s10, s10, s9
 8012090:	ed5f 4ae7 	vldr	s9, [pc, #-924]	; 8011cf8 <kalman_3gyro.constprop.0+0x1cec>
 8012094:	ee25 5a25 	vmul.f32	s10, s10, s11
 8012098:	eeb4 5ae4 	vcmpe.f32	s10, s9
 801209c:	ed1f 4ae9 	vldr	s8, [pc, #-932]	; 8011cfc <kalman_3gyro.constprop.0+0x1cf0>
 80120a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80120a8:	f300 810c 	bgt.w	80122c4 <kalman_3gyro.constprop.0+0x22b8>
 80120ac:	eef0 7ae7 	vabs.f32	s15, s15
 80120b0:	ed1f 5aed 	vldr	s10, [pc, #-948]	; 8011d00 <kalman_3gyro.constprop.0+0x1cf4>
 80120b4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80120b8:	eef4 7ac5 	vcmpe.f32	s15, s10
 80120bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c0:	f300 8100 	bgt.w	80122c4 <kalman_3gyro.constprop.0+0x22b8>
 80120c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80120c6:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 80120ca:	edd1 7a00 	vldr	s15, [r1]
 80120ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80120d0:	ed90 4a00 	vldr	s8, [r0]
 80120d4:	edd1 3a00 	vldr	s7, [r1]
 80120d8:	fe87 5aa3 	vmaxnm.f32	s10, s15, s7
 80120dc:	fec7 4ae3 	vminnm.f32	s9, s15, s7
 80120e0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80120e4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80120e6:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 80120ea:	edd1 3a00 	vldr	s7, [r1]
 80120ee:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 80120f2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80120f6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80120f8:	fe85 5a23 	vmaxnm.f32	s10, s10, s7
 80120fc:	ed91 4a00 	vldr	s8, [r1]
 8012100:	fec4 4ae3 	vminnm.f32	s9, s9, s7
 8012104:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012108:	2b05      	cmp	r3, #5
 801210a:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 801210e:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 8012112:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012116:	d033      	beq.n	8012180 <kalman_3gyro.constprop.0+0x2174>
 8012118:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 801211c:	ed91 4a00 	vldr	s8, [r1]
 8012120:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 8012124:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 8012128:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 801212c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012130:	ed91 4a00 	vldr	s8, [r1]
 8012134:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8012138:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 801213c:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 8012140:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012144:	ed91 4a00 	vldr	s8, [r1]
 8012148:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 801214c:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 8012150:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 8012154:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012158:	ed91 4a00 	vldr	s8, [r1]
 801215c:	2b0a      	cmp	r3, #10
 801215e:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 8012162:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 8012166:	ee77 7a84 	vadd.f32	s15, s15, s8
 801216a:	d109      	bne.n	8012180 <kalman_3gyro.constprop.0+0x2174>
 801216c:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 8012170:	ed91 4a00 	vldr	s8, [r1]
 8012174:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 8012178:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 801217c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012180:	ee35 5a64 	vsub.f32	s10, s10, s9
 8012184:	eddf 4ab3 	vldr	s9, [pc, #716]	; 8012454 <kalman_3gyro.constprop.0+0x2448>
 8012188:	ee25 5a25 	vmul.f32	s10, s10, s11
 801218c:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8012190:	ed9f 4ab1 	vldr	s8, [pc, #708]	; 8012458 <kalman_3gyro.constprop.0+0x244c>
 8012194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012198:	ee67 7a84 	vmul.f32	s15, s15, s8
 801219c:	f300 8092 	bgt.w	80122c4 <kalman_3gyro.constprop.0+0x22b8>
 80121a0:	eef0 7ae7 	vabs.f32	s15, s15
 80121a4:	ed9f 5aad 	vldr	s10, [pc, #692]	; 801245c <kalman_3gyro.constprop.0+0x2450>
 80121a8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80121ac:	eef4 7ac5 	vcmpe.f32	s15, s10
 80121b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b4:	f300 8086 	bgt.w	80122c4 <kalman_3gyro.constprop.0+0x22b8>
 80121b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80121ba:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80121bc:	ed91 4a00 	vldr	s8, [r1]
 80121c0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80121c2:	2b05      	cmp	r3, #5
 80121c4:	edd1 3a00 	vldr	s7, [r1]
 80121c8:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 80121cc:	edd1 4a00 	vldr	s9, [r1]
 80121d0:	fec4 7a23 	vmaxnm.f32	s15, s8, s7
 80121d4:	fe84 5a63 	vminnm.f32	s10, s8, s7
 80121d8:	ee74 3a23 	vadd.f32	s7, s8, s7
 80121dc:	fec4 7aa7 	vmaxnm.f32	s15, s9, s15
 80121e0:	ed95 4a00 	vldr	s8, [r5]
 80121e4:	fe84 5ac5 	vminnm.f32	s10, s9, s10
 80121e8:	ee74 3aa3 	vadd.f32	s7, s9, s7
 80121ec:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80121ee:	fec4 7a27 	vmaxnm.f32	s15, s8, s15
 80121f2:	edd5 4a00 	vldr	s9, [r5]
 80121f6:	fe84 5a45 	vminnm.f32	s10, s8, s10
 80121fa:	ee34 4a23 	vadd.f32	s8, s8, s7
 80121fe:	fec7 7aa4 	vmaxnm.f32	s15, s15, s9
 8012202:	fe84 5ac5 	vminnm.f32	s10, s9, s10
 8012206:	ee74 4a84 	vadd.f32	s9, s9, s8
 801220a:	d033      	beq.n	8012274 <kalman_3gyro.constprop.0+0x2268>
 801220c:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 8012210:	ed95 4a00 	vldr	s8, [r5]
 8012214:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 8012218:	fec7 7a84 	vmaxnm.f32	s15, s15, s8
 801221c:	fe85 5a44 	vminnm.f32	s10, s10, s8
 8012220:	ee74 4a24 	vadd.f32	s9, s8, s9
 8012224:	ed95 4a00 	vldr	s8, [r5]
 8012228:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 801222c:	ee74 4a84 	vadd.f32	s9, s9, s8
 8012230:	fec7 7a84 	vmaxnm.f32	s15, s15, s8
 8012234:	fe85 5a44 	vminnm.f32	s10, s10, s8
 8012238:	ed95 4a00 	vldr	s8, [r5]
 801223c:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 8012240:	fec7 7a84 	vmaxnm.f32	s15, s15, s8
 8012244:	fe85 5a44 	vminnm.f32	s10, s10, s8
 8012248:	ee34 4a84 	vadd.f32	s8, s9, s8
 801224c:	edd5 4a00 	vldr	s9, [r5]
 8012250:	2b0a      	cmp	r3, #10
 8012252:	fec7 7aa4 	vmaxnm.f32	s15, s15, s9
 8012256:	fe85 5a64 	vminnm.f32	s10, s10, s9
 801225a:	ee74 4a24 	vadd.f32	s9, s8, s9
 801225e:	d109      	bne.n	8012274 <kalman_3gyro.constprop.0+0x2268>
 8012260:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 8012264:	ed93 4a00 	vldr	s8, [r3]
 8012268:	fec7 7a84 	vmaxnm.f32	s15, s15, s8
 801226c:	fe85 5a44 	vminnm.f32	s10, s10, s8
 8012270:	ee74 4a84 	vadd.f32	s9, s9, s8
 8012274:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8012278:	ed9f 4a76 	vldr	s8, [pc, #472]	; 8012454 <kalman_3gyro.constprop.0+0x2448>
 801227c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012280:	eef4 7ac4 	vcmpe.f32	s15, s8
 8012284:	ed9f 5a74 	vldr	s10, [pc, #464]	; 8012458 <kalman_3gyro.constprop.0+0x244c>
 8012288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801228c:	ee64 4a85 	vmul.f32	s9, s9, s10
 8012290:	dc18      	bgt.n	80122c4 <kalman_3gyro.constprop.0+0x22b8>
 8012292:	eef0 7ae4 	vabs.f32	s15, s9
 8012296:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801229a:	eddf 7a70 	vldr	s15, [pc, #448]	; 801245c <kalman_3gyro.constprop.0+0x2450>
 801229e:	eef4 5ae7 	vcmpe.f32	s11, s15
 80122a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122a6:	dc0d      	bgt.n	80122c4 <kalman_3gyro.constprop.0+0x22b8>
 80122a8:	f89b 5005 	ldrb.w	r5, [fp, #5]
 80122ac:	2d00      	cmp	r5, #0
 80122ae:	f000 80dd 	beq.w	801246c <kalman_3gyro.constprop.0+0x2460>
 80122b2:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	f002 8432 	beq.w	8014b20 <kalman_3gyro.constprop.0+0x4b14>
 80122bc:	2201      	movs	r2, #1
 80122be:	462b      	mov	r3, r5
 80122c0:	9201      	str	r2, [sp, #4]
 80122c2:	e00f      	b.n	80122e4 <kalman_3gyro.constprop.0+0x22d8>
 80122c4:	2100      	movs	r1, #0
 80122c6:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80122ca:	f8ad 10a6 	strh.w	r1, [sp, #166]	; 0xa6
 80122ce:	f88d 10a8 	strb.w	r1, [sp, #168]	; 0xa8
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	f000 80cb 	beq.w	801246e <kalman_3gyro.constprop.0+0x2462>
 80122d8:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80122dc:	2a01      	cmp	r2, #1
 80122de:	f001 862f 	beq.w	8013f40 <kalman_3gyro.constprop.0+0x3f34>
 80122e2:	9101      	str	r1, [sp, #4]
 80122e4:	2b02      	cmp	r3, #2
 80122e6:	f041 87ed 	bne.w	80142c4 <kalman_3gyro.constprop.0+0x42b8>
 80122ea:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80122ee:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 80122f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122f6:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 80122fa:	eecf 6a07 	vdiv.f32	s13, s30, s14
 80122fe:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 8012302:	eef4 7ac8 	vcmpe.f32	s15, s16
 8012306:	ee8a 6a87 	vdiv.f32	s12, s21, s14
 801230a:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 801230e:	f240 1201 	movw	r2, #257	; 0x101
 8012312:	ee8b 7a07 	vdiv.f32	s14, s22, s14
 8012316:	2301      	movs	r3, #1
 8012318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801231c:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8012320:	ed8d 6a2c 	vstr	s12, [sp, #176]	; 0xb0
 8012324:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8012328:	f8ad 20a6 	strh.w	r2, [sp, #166]	; 0xa6
 801232c:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 8012330:	f2c2 80c4 	blt.w	80144bc <kalman_3gyro.constprop.0+0x44b0>
 8012334:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8012338:	2a00      	cmp	r2, #0
 801233a:	f002 83e1 	beq.w	8014b00 <kalman_3gyro.constprop.0+0x4af4>
 801233e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012342:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8012346:	3301      	adds	r3, #1
 8012348:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 801234c:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 8012350:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012354:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8012358:	f002 84e5 	beq.w	8014d26 <kalman_3gyro.constprop.0+0x4d1a>
 801235c:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8012360:	f002 80fa 	beq.w	8014558 <kalman_3gyro.constprop.0+0x454c>
 8012364:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8012368:	2a00      	cmp	r2, #0
 801236a:	f042 80fa 	bne.w	8014562 <kalman_3gyro.constprop.0+0x4556>
 801236e:	f04f 31ff 	mov.w	r1, #4294967295
 8012372:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012374:	a82e      	add	r0, sp, #184	; 0xb8
 8012376:	4613      	mov	r3, r2
 8012378:	edd2 7a00 	vldr	s15, [r2]
 801237c:	3101      	adds	r1, #1
 801237e:	330c      	adds	r3, #12
 8012380:	3204      	adds	r2, #4
 8012382:	461c      	mov	r4, r3
 8012384:	ed94 7a00 	vldr	s14, [r4]
 8012388:	330c      	adds	r3, #12
 801238a:	4598      	cmp	r8, r3
 801238c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012390:	d1f7      	bne.n	8012382 <kalman_3gyro.constprop.0+0x2376>
 8012392:	2902      	cmp	r1, #2
 8012394:	ece0 7a01 	vstmia	r0!, {s15}
 8012398:	f108 0804 	add.w	r8, r8, #4
 801239c:	d1eb      	bne.n	8012376 <kalman_3gyro.constprop.0+0x236a>
 801239e:	eddf 7a30 	vldr	s15, [pc, #192]	; 8012460 <kalman_3gyro.constprop.0+0x2454>
 80123a2:	ed9d 4a2e 	vldr	s8, [sp, #184]	; 0xb8
 80123a6:	eddd 4a2f 	vldr	s9, [sp, #188]	; 0xbc
 80123aa:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80123ae:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 80123b2:	ee24 4a27 	vmul.f32	s8, s8, s15
 80123b6:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80123ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80123be:	460a      	mov	r2, r1
 80123c0:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80123c2:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 80123c6:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 80123ca:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 80123ce:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 80123d2:	330c      	adds	r3, #12
 80123d4:	4293      	cmp	r3, r2
 80123d6:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 80123da:	d1f8      	bne.n	80123ce <kalman_3gyro.constprop.0+0x23c2>
 80123dc:	1d1a      	adds	r2, r3, #4
 80123de:	4290      	cmp	r0, r2
 80123e0:	ece4 7a01 	vstmia	r4!, {s15}
 80123e4:	d1ef      	bne.n	80123c6 <kalman_3gyro.constprop.0+0x23ba>
 80123e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80123e8:	ed9d 5a2b 	vldr	s10, [sp, #172]	; 0xac
 80123ec:	edd3 7a00 	vldr	s15, [r3]
 80123f0:	eddd 5a2c 	vldr	s11, [sp, #176]	; 0xb0
 80123f4:	ed9d 6a2d 	vldr	s12, [sp, #180]	; 0xb4
 80123f8:	ee97 5a84 	vfnms.f32	s10, s15, s8
 80123fc:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 8012400:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 8012404:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8012408:	ed8d 5a2e 	vstr	s10, [sp, #184]	; 0xb8
 801240c:	edcd 5a2f 	vstr	s11, [sp, #188]	; 0xbc
 8012410:	ed8d 6a30 	vstr	s12, [sp, #192]	; 0xc0
 8012414:	b14b      	cbz	r3, 801242a <kalman_3gyro.constprop.0+0x241e>
 8012416:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 801241a:	ed9d 7a1e 	vldr	s14, [sp, #120]	; 0x78
 801241e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012426:	f102 8556 	bmi.w	8014ed6 <kalman_3gyro.constprop.0+0x4eca>
 801242a:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 801242e:	2a1e      	cmp	r2, #30
 8012430:	f002 84ef 	beq.w	8014e12 <kalman_3gyro.constprop.0+0x4e06>
 8012434:	2aff      	cmp	r2, #255	; 0xff
 8012436:	f102 0301 	add.w	r3, r2, #1
 801243a:	bf08      	it	eq
 801243c:	23ff      	moveq	r3, #255	; 0xff
 801243e:	f04f 0200 	mov.w	r2, #0
 8012442:	bf18      	it	ne
 8012444:	b2db      	uxtbne	r3, r3
 8012446:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 801244a:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801244e:	9b01      	ldr	r3, [sp, #4]
 8012450:	e01f      	b.n	8012492 <kalman_3gyro.constprop.0+0x2486>
 8012452:	bf00      	nop
 8012454:	3be56041 	.word	0x3be56041
 8012458:	3dcccccd 	.word	0x3dcccccd
 801245c:	3e333333 	.word	0x3e333333
 8012460:	3d088889 	.word	0x3d088889
 8012464:	42480000 	.word	0x42480000
 8012468:	00000000 	.word	0x00000000
 801246c:	2301      	movs	r3, #1
 801246e:	2200      	movs	r2, #0
 8012470:	f8db 41bc 	ldr.w	r4, [fp, #444]	; 0x1bc
 8012474:	f8db 01c0 	ldr.w	r0, [fp, #448]	; 0x1c0
 8012478:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 801247c:	f8ad 20a6 	strh.w	r2, [sp, #166]	; 0xa6
 8012480:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8012484:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8012488:	f88b 2001 	strb.w	r2, [fp, #1]
 801248c:	947f      	str	r4, [sp, #508]	; 0x1fc
 801248e:	9080      	str	r0, [sp, #512]	; 0x200
 8012490:	9181      	str	r1, [sp, #516]	; 0x204
 8012492:	ed5f 7a0c 	vldr	s15, [pc, #-48]	; 8012464 <kalman_3gyro.constprop.0+0x2458>
 8012496:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801249e:	f2c0 8774 	blt.w	801338a <kalman_3gyro.constprop.0+0x337e>
 80124a2:	2200      	movs	r2, #0
 80124a4:	f8ad 20a6 	strh.w	r2, [sp, #166]	; 0xa6
 80124a8:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 80124ac:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 80124b0:	2b01      	cmp	r3, #1
 80124b2:	d125      	bne.n	8012500 <kalman_3gyro.constprop.0+0x24f4>
 80124b4:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 80124b8:	ed9d 5a70 	vldr	s10, [sp, #448]	; 0x1c0
 80124bc:	eddd 5a71 	vldr	s11, [sp, #452]	; 0x1c4
 80124c0:	ed9d 6a72 	vldr	s12, [sp, #456]	; 0x1c8
 80124c4:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80124c8:	ed9d 7a41 	vldr	s14, [sp, #260]	; 0x104
 80124cc:	eddd 7a42 	vldr	s15, [sp, #264]	; 0x108
 80124d0:	ee25 5a24 	vmul.f32	s10, s10, s9
 80124d4:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80124d8:	ee26 6a24 	vmul.f32	s12, s12, s9
 80124dc:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80124e0:	ee37 7a07 	vadd.f32	s14, s14, s14
 80124e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80124e8:	ed8d 5a70 	vstr	s10, [sp, #448]	; 0x1c0
 80124ec:	edcd 5a71 	vstr	s11, [sp, #452]	; 0x1c4
 80124f0:	ed8d 6a72 	vstr	s12, [sp, #456]	; 0x1c8
 80124f4:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80124f8:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 80124fc:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 8012500:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 8012504:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 8012508:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 801250c:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 8012510:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 8012514:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 8012518:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 801251c:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 8012520:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 8012524:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 8012528:	eddd 9a40 	vldr	s19, [sp, #256]	; 0x100
 801252c:	ed9d 9a41 	vldr	s18, [sp, #260]	; 0x104
 8012530:	ed9d 0a43 	vldr	s0, [sp, #268]	; 0x10c
 8012534:	eddd 0a44 	vldr	s1, [sp, #272]	; 0x110
 8012538:	ed9d 1a45 	vldr	s2, [sp, #276]	; 0x114
 801253c:	eddd 1a46 	vldr	s3, [sp, #280]	; 0x118
 8012540:	ed9d 2a47 	vldr	s4, [sp, #284]	; 0x11c
 8012544:	eddd 2a48 	vldr	s5, [sp, #288]	; 0x120
 8012548:	eddd 7a6d 	vldr	s15, [sp, #436]	; 0x1b4
 801254c:	eea8 4a08 	vfma.f32	s8, s16, s16
 8012550:	eee0 4a00 	vfma.f32	s9, s0, s0
 8012554:	eea0 5aa0 	vfma.f32	s10, s1, s1
 8012558:	eee1 5a01 	vfma.f32	s11, s2, s2
 801255c:	eea1 6aa1 	vfma.f32	s12, s3, s3
 8012560:	eee2 6a02 	vfma.f32	s13, s4, s4
 8012564:	eea2 7aa2 	vfma.f32	s14, s5, s5
 8012568:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801256c:	eea9 3aa9 	vfma.f32	s6, s19, s19
 8012570:	eee9 3a09 	vfma.f32	s7, s18, s18
 8012574:	edcd 8a73 	vstr	s17, [sp, #460]	; 0x1cc
 8012578:	edcd 8a74 	vstr	s17, [sp, #464]	; 0x1d0
 801257c:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 8012580:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 8012584:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 8012588:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 801258c:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 8012590:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 8012594:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 8012598:	edcd 7a85 	vstr	s15, [sp, #532]	; 0x214
 801259c:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 80125a0:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 80125a4:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 80125a8:	ed9d 4a6e 	vldr	s8, [sp, #440]	; 0x1b8
 80125ac:	eddd 4a6f 	vldr	s9, [sp, #444]	; 0x1bc
 80125b0:	ed9d 5a70 	vldr	s10, [sp, #448]	; 0x1c0
 80125b4:	eddd 5a71 	vldr	s11, [sp, #452]	; 0x1c4
 80125b8:	ed9d 6a72 	vldr	s12, [sp, #456]	; 0x1c8
 80125bc:	eddd 6a76 	vldr	s13, [sp, #472]	; 0x1d8
 80125c0:	ed9d 7a77 	vldr	s14, [sp, #476]	; 0x1dc
 80125c4:	eddd 7a78 	vldr	s15, [sp, #480]	; 0x1e0
 80125c8:	ee68 8aa8 	vmul.f32	s17, s17, s17
 80125cc:	ee24 4a04 	vmul.f32	s8, s8, s8
 80125d0:	ee64 4aa4 	vmul.f32	s9, s9, s9
 80125d4:	ee25 5a05 	vmul.f32	s10, s10, s10
 80125d8:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80125dc:	ee26 6a06 	vmul.f32	s12, s12, s12
 80125e0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80125e4:	ee27 7a07 	vmul.f32	s14, s14, s14
 80125e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80125ec:	ed8d 4a86 	vstr	s8, [sp, #536]	; 0x218
 80125f0:	edcd 8a8b 	vstr	s17, [sp, #556]	; 0x22c
 80125f4:	edcd 8a8c 	vstr	s17, [sp, #560]	; 0x230
 80125f8:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 80125fc:	edcd 4a87 	vstr	s9, [sp, #540]	; 0x21c
 8012600:	ed8d 5a88 	vstr	s10, [sp, #544]	; 0x220
 8012604:	edcd 5a89 	vstr	s11, [sp, #548]	; 0x224
 8012608:	ed8d 6a8a 	vstr	s12, [sp, #552]	; 0x228
 801260c:	edcd 6a8e 	vstr	s13, [sp, #568]	; 0x238
 8012610:	ed8d 7a8f 	vstr	s14, [sp, #572]	; 0x23c
 8012614:	edcd 7a90 	vstr	s15, [sp, #576]	; 0x240
 8012618:	2600      	movs	r6, #0
 801261a:	ed1f 8a6d 	vldr	s16, [pc, #-436]	; 8012468 <kalman_3gyro.constprop.0+0x245c>
 801261e:	ad28      	add	r5, sp, #160	; 0xa0
 8012620:	f50d 64c2 	add.w	r4, sp, #1552	; 0x610
 8012624:	f50b 78ea 	add.w	r8, fp, #468	; 0x1d4
 8012628:	e005      	b.n	8012636 <kalman_3gyro.constprop.0+0x262a>
 801262a:	3601      	adds	r6, #1
 801262c:	2e0c      	cmp	r6, #12
 801262e:	f104 0404 	add.w	r4, r4, #4
 8012632:	f000 84fe 	beq.w	8013032 <kalman_3gyro.constprop.0+0x3026>
 8012636:	f815 3b01 	ldrb.w	r3, [r5], #1
 801263a:	2b00      	cmp	r3, #0
 801263c:	d0f5      	beq.n	801262a <kalman_3gyro.constprop.0+0x261e>
 801263e:	ed89 8a00 	vstr	s16, [r9]
 8012642:	ed89 8a01 	vstr	s16, [r9, #4]
 8012646:	ed89 8a02 	vstr	s16, [r9, #8]
 801264a:	ed89 8a03 	vstr	s16, [r9, #12]
 801264e:	ed89 8a04 	vstr	s16, [r9, #16]
 8012652:	ed89 8a05 	vstr	s16, [r9, #20]
 8012656:	ed89 8a06 	vstr	s16, [r9, #24]
 801265a:	ed89 8a07 	vstr	s16, [r9, #28]
 801265e:	ed89 8a08 	vstr	s16, [r9, #32]
 8012662:	edd4 da00 	vldr	s27, [r4]
 8012666:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 801266a:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 801266e:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 8012672:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 8012676:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 801267a:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 801267e:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 8012682:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 8012686:	464f      	mov	r7, r9
 8012688:	4643      	mov	r3, r8
 801268a:	464a      	mov	r2, r9
 801268c:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 8012690:	ecb3 7a01 	vldmia	r3!, {s14}
 8012694:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801269c:	ecf2 7a01 	vldmia	r2!, {s15}
 80126a0:	d006      	beq.n	80126b0 <kalman_3gyro.constprop.0+0x26a4>
 80126a2:	eef5 da40 	vcmp.f32	s27, #0.0
 80126a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126aa:	bf18      	it	ne
 80126ac:	eeed 7a87 	vfmane.f32	s15, s27, s14
 80126b0:	ed93 7a08 	vldr	s14, [r3, #32]
 80126b4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80126b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126bc:	d006      	beq.n	80126cc <kalman_3gyro.constprop.0+0x26c0>
 80126be:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80126c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126c6:	bf18      	it	ne
 80126c8:	eeee 7a07 	vfmane.f32	s15, s28, s14
 80126cc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80126d0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80126d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126d8:	d006      	beq.n	80126e8 <kalman_3gyro.constprop.0+0x26dc>
 80126da:	eef5 ea40 	vcmp.f32	s29, #0.0
 80126de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126e2:	bf18      	it	ne
 80126e4:	eeee 7a87 	vfmane.f32	s15, s29, s14
 80126e8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80126ec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80126f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126f4:	d006      	beq.n	8012704 <kalman_3gyro.constprop.0+0x26f8>
 80126f6:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80126fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126fe:	bf18      	it	ne
 8012700:	eeef 7a07 	vfmane.f32	s15, s30, s14
 8012704:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8012708:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801270c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012710:	d006      	beq.n	8012720 <kalman_3gyro.constprop.0+0x2714>
 8012712:	eef5 fa40 	vcmp.f32	s31, #0.0
 8012716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801271a:	bf18      	it	ne
 801271c:	eeef 7a87 	vfmane.f32	s15, s31, s14
 8012720:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8012724:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801272c:	d006      	beq.n	801273c <kalman_3gyro.constprop.0+0x2730>
 801272e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012736:	bf18      	it	ne
 8012738:	eee6 7a87 	vfmane.f32	s15, s13, s14
 801273c:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8012740:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012748:	d006      	beq.n	8012758 <kalman_3gyro.constprop.0+0x274c>
 801274a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012752:	bf18      	it	ne
 8012754:	eee6 7a07 	vfmane.f32	s15, s12, s14
 8012758:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 801275c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012764:	d006      	beq.n	8012774 <kalman_3gyro.constprop.0+0x2768>
 8012766:	eef5 5a40 	vcmp.f32	s11, #0.0
 801276a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801276e:	bf18      	it	ne
 8012770:	eee5 7a87 	vfmane.f32	s15, s11, s14
 8012774:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 8012778:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012780:	d006      	beq.n	8012790 <kalman_3gyro.constprop.0+0x2784>
 8012782:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801278a:	bf18      	it	ne
 801278c:	eee5 7a07 	vfmane.f32	s15, s10, s14
 8012790:	428b      	cmp	r3, r1
 8012792:	ed42 7a01 	vstr	s15, [r2, #-4]
 8012796:	f47f af7b 	bne.w	8012690 <kalman_3gyro.constprop.0+0x2684>
 801279a:	eef5 da40 	vcmp.f32	s27, #0.0
 801279e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127a2:	edd9 8a00 	vldr	s17, [r9]
 80127a6:	f040 855a 	bne.w	801325e <kalman_3gyro.constprop.0+0x3252>
 80127aa:	eef0 7a6d 	vmov.f32	s15, s27
 80127ae:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80127b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127b6:	ed99 9a01 	vldr	s18, [r9, #4]
 80127ba:	d006      	beq.n	80127ca <kalman_3gyro.constprop.0+0x27be>
 80127bc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80127c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127c4:	bf18      	it	ne
 80127c6:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 80127ca:	eef5 ea40 	vcmp.f32	s29, #0.0
 80127ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127d2:	edd9 aa02 	vldr	s21, [r9, #8]
 80127d6:	d006      	beq.n	80127e6 <kalman_3gyro.constprop.0+0x27da>
 80127d8:	eef5 aa40 	vcmp.f32	s21, #0.0
 80127dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127e0:	bf18      	it	ne
 80127e2:	eeea 7aae 	vfmane.f32	s15, s21, s29
 80127e6:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80127ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ee:	edd9 ba03 	vldr	s23, [r9, #12]
 80127f2:	d006      	beq.n	8012802 <kalman_3gyro.constprop.0+0x27f6>
 80127f4:	eef5 ba40 	vcmp.f32	s23, #0.0
 80127f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127fc:	bf18      	it	ne
 80127fe:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 8012802:	eef5 fa40 	vcmp.f32	s31, #0.0
 8012806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801280a:	edd9 ca04 	vldr	s25, [r9, #16]
 801280e:	d006      	beq.n	801281e <kalman_3gyro.constprop.0+0x2812>
 8012810:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012818:	bf18      	it	ne
 801281a:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 801281e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012826:	ed99 ca05 	vldr	s24, [r9, #20]
 801282a:	d006      	beq.n	801283a <kalman_3gyro.constprop.0+0x282e>
 801282c:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012834:	bf18      	it	ne
 8012836:	eeec 7a26 	vfmane.f32	s15, s24, s13
 801283a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012842:	ed99 da06 	vldr	s26, [r9, #24]
 8012846:	d006      	beq.n	8012856 <kalman_3gyro.constprop.0+0x284a>
 8012848:	eeb5 da40 	vcmp.f32	s26, #0.0
 801284c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012850:	bf18      	it	ne
 8012852:	eeed 7a06 	vfmane.f32	s15, s26, s12
 8012856:	eef5 5a40 	vcmp.f32	s11, #0.0
 801285a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801285e:	ed99 aa07 	vldr	s20, [r9, #28]
 8012862:	d006      	beq.n	8012872 <kalman_3gyro.constprop.0+0x2866>
 8012864:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801286c:	bf18      	it	ne
 801286e:	eeea 7a25 	vfmane.f32	s15, s20, s11
 8012872:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801287a:	ed99 ba08 	vldr	s22, [r9, #32]
 801287e:	d006      	beq.n	801288e <kalman_3gyro.constprop.0+0x2882>
 8012880:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012888:	bf18      	it	ne
 801288a:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 801288e:	ab85      	add	r3, sp, #532	; 0x214
 8012890:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8012894:	ed93 7a00 	vldr	s14, [r3]
 8012898:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 801289c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80128a0:	eec4 7a87 	vdiv.f32	s15, s9, s14
 80128a4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80128a8:	ee29 9a27 	vmul.f32	s18, s18, s15
 80128ac:	ee6a aaa7 	vmul.f32	s21, s21, s15
 80128b0:	ee6b baa7 	vmul.f32	s23, s23, s15
 80128b4:	ee6c caa7 	vmul.f32	s25, s25, s15
 80128b8:	ee2c ca27 	vmul.f32	s24, s24, s15
 80128bc:	ee2d da27 	vmul.f32	s26, s26, s15
 80128c0:	ee2a aa27 	vmul.f32	s20, s20, s15
 80128c4:	ee2b ba27 	vmul.f32	s22, s22, s15
 80128c8:	2e05      	cmp	r6, #5
 80128ca:	edc9 8a00 	vstr	s17, [r9]
 80128ce:	ed89 9a01 	vstr	s18, [r9, #4]
 80128d2:	edc9 aa02 	vstr	s21, [r9, #8]
 80128d6:	edc9 ba03 	vstr	s23, [r9, #12]
 80128da:	edc9 ca04 	vstr	s25, [r9, #16]
 80128de:	ed89 ca05 	vstr	s24, [r9, #20]
 80128e2:	ed89 da06 	vstr	s26, [r9, #24]
 80128e6:	ed89 aa07 	vstr	s20, [r9, #28]
 80128ea:	ed89 ba08 	vstr	s22, [r9, #32]
 80128ee:	ea4f 0386 	mov.w	r3, r6, lsl #2
 80128f2:	f340 84ae 	ble.w	8013252 <kalman_3gyro.constprop.0+0x3246>
 80128f6:	eef5 da40 	vcmp.f32	s27, #0.0
 80128fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128fe:	f000 8527 	beq.w	8013350 <kalman_3gyro.constprop.0+0x3344>
 8012902:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 8012906:	eef5 7a40 	vcmp.f32	s15, #0.0
 801290a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801290e:	d001      	beq.n	8012914 <kalman_3gyro.constprop.0+0x2908>
 8012910:	ee67 7aad 	vmul.f32	s15, s15, s27
 8012914:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8012918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801291c:	d008      	beq.n	8012930 <kalman_3gyro.constprop.0+0x2924>
 801291e:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 8012922:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801292a:	bf18      	it	ne
 801292c:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 8012930:	eef5 ea40 	vcmp.f32	s29, #0.0
 8012934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012938:	d008      	beq.n	801294c <kalman_3gyro.constprop.0+0x2940>
 801293a:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 801293e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012946:	bf18      	it	ne
 8012948:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 801294c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8012950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012954:	d008      	beq.n	8012968 <kalman_3gyro.constprop.0+0x295c>
 8012956:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 801295a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801295e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012962:	bf18      	it	ne
 8012964:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8012968:	eef5 fa40 	vcmp.f32	s31, #0.0
 801296c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012970:	d008      	beq.n	8012984 <kalman_3gyro.constprop.0+0x2978>
 8012972:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 8012976:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801297e:	bf18      	it	ne
 8012980:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 8012984:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801298c:	d008      	beq.n	80129a0 <kalman_3gyro.constprop.0+0x2994>
 801298e:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 8012992:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801299a:	bf18      	it	ne
 801299c:	eee7 7a26 	vfmane.f32	s15, s14, s13
 80129a0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80129a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a8:	d008      	beq.n	80129bc <kalman_3gyro.constprop.0+0x29b0>
 80129aa:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 80129ae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80129b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129b6:	bf18      	it	ne
 80129b8:	eee7 7a06 	vfmane.f32	s15, s14, s12
 80129bc:	eef5 5a40 	vcmp.f32	s11, #0.0
 80129c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129c4:	d008      	beq.n	80129d8 <kalman_3gyro.constprop.0+0x29cc>
 80129c6:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 80129ca:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80129ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129d2:	bf18      	it	ne
 80129d4:	eee7 7a25 	vfmane.f32	s15, s14, s11
 80129d8:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80129dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e0:	d008      	beq.n	80129f4 <kalman_3gyro.constprop.0+0x29e8>
 80129e2:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 80129e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80129ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ee:	bf18      	it	ne
 80129f0:	eee7 7a05 	vfmane.f32	s15, s14, s10
 80129f4:	aa79      	add	r2, sp, #484	; 0x1e4
 80129f6:	4413      	add	r3, r2
 80129f8:	edd3 9a00 	vldr	s19, [r3]
 80129fc:	ee79 9ae7 	vsub.f32	s19, s19, s15
 8012a00:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8012a04:	2100      	movs	r1, #0
 8012a06:	4650      	mov	r0, sl
 8012a08:	ed8d 5a04 	vstr	s10, [sp, #16]
 8012a0c:	edcd 5a03 	vstr	s11, [sp, #12]
 8012a10:	ed8d 6a02 	vstr	s12, [sp, #8]
 8012a14:	edcd 6a01 	vstr	s13, [sp, #4]
 8012a18:	f007 feef 	bl	801a7fa <memset>
 8012a1c:	4651      	mov	r1, sl
 8012a1e:	4653      	mov	r3, sl
 8012a20:	ed9d 5a04 	vldr	s10, [sp, #16]
 8012a24:	eddd 5a03 	vldr	s11, [sp, #12]
 8012a28:	ed9d 6a02 	vldr	s12, [sp, #8]
 8012a2c:	eddd 6a01 	vldr	s13, [sp, #4]
 8012a30:	f109 0224 	add.w	r2, r9, #36	; 0x24
 8012a34:	ecf7 7a01 	vldmia	r7!, {s15}
 8012a38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a40:	d062      	beq.n	8012b08 <kalman_3gyro.constprop.0+0x2afc>
 8012a42:	eef5 da40 	vcmp.f32	s27, #0.0
 8012a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a4a:	d005      	beq.n	8012a58 <kalman_3gyro.constprop.0+0x2a4c>
 8012a4c:	ed93 7a00 	vldr	s14, [r3]
 8012a50:	eead 7aa7 	vfma.f32	s14, s27, s15
 8012a54:	ed83 7a00 	vstr	s14, [r3]
 8012a58:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8012a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a60:	d005      	beq.n	8012a6e <kalman_3gyro.constprop.0+0x2a62>
 8012a62:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8012a66:	eeae 7a27 	vfma.f32	s14, s28, s15
 8012a6a:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 8012a6e:	eef5 ea40 	vcmp.f32	s29, #0.0
 8012a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a76:	d005      	beq.n	8012a84 <kalman_3gyro.constprop.0+0x2a78>
 8012a78:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8012a7c:	eeae 7aa7 	vfma.f32	s14, s29, s15
 8012a80:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 8012a84:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8012a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a8c:	d005      	beq.n	8012a9a <kalman_3gyro.constprop.0+0x2a8e>
 8012a8e:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8012a92:	eeaf 7a27 	vfma.f32	s14, s30, s15
 8012a96:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 8012a9a:	eef5 fa40 	vcmp.f32	s31, #0.0
 8012a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa2:	d005      	beq.n	8012ab0 <kalman_3gyro.constprop.0+0x2aa4>
 8012aa4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8012aa8:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 8012aac:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 8012ab0:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab8:	d005      	beq.n	8012ac6 <kalman_3gyro.constprop.0+0x2aba>
 8012aba:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8012abe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012ac2:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 8012ac6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ace:	d005      	beq.n	8012adc <kalman_3gyro.constprop.0+0x2ad0>
 8012ad0:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8012ad4:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012ad8:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 8012adc:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ae4:	d005      	beq.n	8012af2 <kalman_3gyro.constprop.0+0x2ae6>
 8012ae6:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 8012aea:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012aee:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 8012af2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012afa:	d005      	beq.n	8012b08 <kalman_3gyro.constprop.0+0x2afc>
 8012afc:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 8012b00:	eea5 7a27 	vfma.f32	s14, s10, s15
 8012b04:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 8012b08:	4297      	cmp	r7, r2
 8012b0a:	f103 0304 	add.w	r3, r3, #4
 8012b0e:	d191      	bne.n	8012a34 <kalman_3gyro.constprop.0+0x2a28>
 8012b10:	f20d 40cc 	addw	r0, sp, #1228	; 0x4cc
 8012b14:	46d4      	mov	ip, sl
 8012b16:	4603      	mov	r3, r0
 8012b18:	2208      	movs	r2, #8
 8012b1a:	2700      	movs	r7, #0
 8012b1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012b20:	e074      	b.n	8012c0c <kalman_3gyro.constprop.0+0x2c00>
 8012b22:	eddc 7a00 	vldr	s15, [ip]
 8012b26:	eef1 7a67 	vneg.f32	s15, s15
 8012b2a:	2f01      	cmp	r7, #1
 8012b2c:	ed83 8a01 	vstr	s16, [r3, #4]
 8012b30:	edcc 7a00 	vstr	s15, [ip]
 8012b34:	f1a2 0e07 	sub.w	lr, r2, #7
 8012b38:	f000 8329 	beq.w	801318e <kalman_3gyro.constprop.0+0x3182>
 8012b3c:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012b40:	edde 7a00 	vldr	s15, [lr]
 8012b44:	eef1 7a67 	vneg.f32	s15, s15
 8012b48:	2f02      	cmp	r7, #2
 8012b4a:	edce 7a00 	vstr	s15, [lr]
 8012b4e:	ed83 8a02 	vstr	s16, [r3, #8]
 8012b52:	f1a2 0e06 	sub.w	lr, r2, #6
 8012b56:	f000 8303 	beq.w	8013160 <kalman_3gyro.constprop.0+0x3154>
 8012b5a:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012b5e:	edde 7a00 	vldr	s15, [lr]
 8012b62:	eef1 7a67 	vneg.f32	s15, s15
 8012b66:	2f03      	cmp	r7, #3
 8012b68:	edce 7a00 	vstr	s15, [lr]
 8012b6c:	ed83 8a03 	vstr	s16, [r3, #12]
 8012b70:	f1a2 0e05 	sub.w	lr, r2, #5
 8012b74:	d170      	bne.n	8012c58 <kalman_3gyro.constprop.0+0x2c4c>
 8012b76:	eddc 7a03 	vldr	s15, [ip, #12]
 8012b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b7e:	edcc 7a03 	vstr	s15, [ip, #12]
 8012b82:	f1a2 0e04 	sub.w	lr, r2, #4
 8012b86:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012b8a:	edde 7a00 	vldr	s15, [lr]
 8012b8e:	eef1 7a67 	vneg.f32	s15, s15
 8012b92:	edce 7a00 	vstr	s15, [lr]
 8012b96:	f1a2 0e03 	sub.w	lr, r2, #3
 8012b9a:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012b9e:	edde 7a00 	vldr	s15, [lr]
 8012ba2:	eef1 7a67 	vneg.f32	s15, s15
 8012ba6:	ed83 8a04 	vstr	s16, [r3, #16]
 8012baa:	ed83 8a05 	vstr	s16, [r3, #20]
 8012bae:	ed83 8a06 	vstr	s16, [r3, #24]
 8012bb2:	edce 7a00 	vstr	s15, [lr]
 8012bb6:	f1a2 0e02 	sub.w	lr, r2, #2
 8012bba:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012bbe:	edde 7a00 	vldr	s15, [lr]
 8012bc2:	eef1 7a67 	vneg.f32	s15, s15
 8012bc6:	2f07      	cmp	r7, #7
 8012bc8:	edce 7a00 	vstr	s15, [lr]
 8012bcc:	ed83 8a07 	vstr	s16, [r3, #28]
 8012bd0:	f102 3eff 	add.w	lr, r2, #4294967295
 8012bd4:	f040 80a2 	bne.w	8012d1c <kalman_3gyro.constprop.0+0x2d10>
 8012bd8:	eddc 7a07 	vldr	s15, [ip, #28]
 8012bdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012be0:	ed83 8a08 	vstr	s16, [r3, #32]
 8012be4:	edcc 7a07 	vstr	s15, [ip, #28]
 8012be8:	eb0a 0e82 	add.w	lr, sl, r2, lsl #2
 8012bec:	edde 7a00 	vldr	s15, [lr]
 8012bf0:	eef1 7a67 	vneg.f32	s15, s15
 8012bf4:	3701      	adds	r7, #1
 8012bf6:	2f09      	cmp	r7, #9
 8012bf8:	edce 7a00 	vstr	s15, [lr]
 8012bfc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8012c00:	f10c 0c24 	add.w	ip, ip, #36	; 0x24
 8012c04:	f102 0209 	add.w	r2, r2, #9
 8012c08:	f000 809f 	beq.w	8012d4a <kalman_3gyro.constprop.0+0x2d3e>
 8012c0c:	ed83 8a00 	vstr	s16, [r3]
 8012c10:	2f00      	cmp	r7, #0
 8012c12:	d186      	bne.n	8012b22 <kalman_3gyro.constprop.0+0x2b16>
 8012c14:	edda 7a00 	vldr	s15, [sl]
 8012c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c1c:	edcc 7a00 	vstr	s15, [ip]
 8012c20:	f1a2 0e07 	sub.w	lr, r2, #7
 8012c24:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012c28:	edde 7a00 	vldr	s15, [lr]
 8012c2c:	eef1 7a67 	vneg.f32	s15, s15
 8012c30:	edce 7a00 	vstr	s15, [lr]
 8012c34:	f1a2 0e06 	sub.w	lr, r2, #6
 8012c38:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012c3c:	edde 7a00 	vldr	s15, [lr]
 8012c40:	eef1 7a67 	vneg.f32	s15, s15
 8012c44:	ed83 8a01 	vstr	s16, [r3, #4]
 8012c48:	ed83 8a02 	vstr	s16, [r3, #8]
 8012c4c:	ed83 8a03 	vstr	s16, [r3, #12]
 8012c50:	edce 7a00 	vstr	s15, [lr]
 8012c54:	f1a2 0e05 	sub.w	lr, r2, #5
 8012c58:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012c5c:	edde 7a00 	vldr	s15, [lr]
 8012c60:	eef1 7a67 	vneg.f32	s15, s15
 8012c64:	2f04      	cmp	r7, #4
 8012c66:	edce 7a00 	vstr	s15, [lr]
 8012c6a:	ed83 8a04 	vstr	s16, [r3, #16]
 8012c6e:	f1a2 0e04 	sub.w	lr, r2, #4
 8012c72:	d031      	beq.n	8012cd8 <kalman_3gyro.constprop.0+0x2ccc>
 8012c74:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012c78:	edde 7a00 	vldr	s15, [lr]
 8012c7c:	eef1 7a67 	vneg.f32	s15, s15
 8012c80:	2f05      	cmp	r7, #5
 8012c82:	edce 7a00 	vstr	s15, [lr]
 8012c86:	ed83 8a05 	vstr	s16, [r3, #20]
 8012c8a:	f1a2 0e03 	sub.w	lr, r2, #3
 8012c8e:	f000 8246 	beq.w	801311e <kalman_3gyro.constprop.0+0x3112>
 8012c92:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012c96:	edde 7a00 	vldr	s15, [lr]
 8012c9a:	eef1 7a67 	vneg.f32	s15, s15
 8012c9e:	2f06      	cmp	r7, #6
 8012ca0:	edce 7a00 	vstr	s15, [lr]
 8012ca4:	ed83 8a06 	vstr	s16, [r3, #24]
 8012ca8:	f1a2 0e02 	sub.w	lr, r2, #2
 8012cac:	d185      	bne.n	8012bba <kalman_3gyro.constprop.0+0x2bae>
 8012cae:	eddc 7a06 	vldr	s15, [ip, #24]
 8012cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012cb6:	edcc 7a06 	vstr	s15, [ip, #24]
 8012cba:	f102 3eff 	add.w	lr, r2, #4294967295
 8012cbe:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012cc2:	edde 7a00 	vldr	s15, [lr]
 8012cc6:	eef1 7a67 	vneg.f32	s15, s15
 8012cca:	ed83 8a07 	vstr	s16, [r3, #28]
 8012cce:	ed83 8a08 	vstr	s16, [r3, #32]
 8012cd2:	edce 7a00 	vstr	s15, [lr]
 8012cd6:	e787      	b.n	8012be8 <kalman_3gyro.constprop.0+0x2bdc>
 8012cd8:	eddc 7a04 	vldr	s15, [ip, #16]
 8012cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012ce0:	edcc 7a04 	vstr	s15, [ip, #16]
 8012ce4:	f1a2 0e03 	sub.w	lr, r2, #3
 8012ce8:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012cec:	edde 7a00 	vldr	s15, [lr]
 8012cf0:	eef1 7a67 	vneg.f32	s15, s15
 8012cf4:	edce 7a00 	vstr	s15, [lr]
 8012cf8:	f1a2 0e02 	sub.w	lr, r2, #2
 8012cfc:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012d00:	edde 7a00 	vldr	s15, [lr]
 8012d04:	eef1 7a67 	vneg.f32	s15, s15
 8012d08:	ed83 8a05 	vstr	s16, [r3, #20]
 8012d0c:	ed83 8a06 	vstr	s16, [r3, #24]
 8012d10:	ed83 8a07 	vstr	s16, [r3, #28]
 8012d14:	edce 7a00 	vstr	s15, [lr]
 8012d18:	f102 3eff 	add.w	lr, r2, #4294967295
 8012d1c:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012d20:	edde 7a00 	vldr	s15, [lr]
 8012d24:	eef1 7a67 	vneg.f32	s15, s15
 8012d28:	2f08      	cmp	r7, #8
 8012d2a:	ed83 8a08 	vstr	s16, [r3, #32]
 8012d2e:	edce 7a00 	vstr	s15, [lr]
 8012d32:	f47f af59 	bne.w	8012be8 <kalman_3gyro.constprop.0+0x2bdc>
 8012d36:	ed9c 7a08 	vldr	s14, [ip, #32]
 8012d3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012d3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012d42:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8012d46:	edc2 7a00 	vstr	s15, [r2]
 8012d4a:	2700      	movs	r7, #0
 8012d4c:	f50b 7ca2 	add.w	ip, fp, #324	; 0x144
 8012d50:	ecb1 3a01 	vldmia	r1!, {s6}
 8012d54:	465a      	mov	r2, fp
 8012d56:	edd1 3a08 	vldr	s7, [r1, #32]
 8012d5a:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 8012d5e:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 8012d62:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 8012d66:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 8012d6a:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 8012d6e:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 8012d72:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 8012d76:	4603      	mov	r3, r0
 8012d78:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8012d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d80:	d00c      	beq.n	8012d9c <kalman_3gyro.constprop.0+0x2d90>
 8012d82:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 8012d86:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d8e:	d005      	beq.n	8012d9c <kalman_3gyro.constprop.0+0x2d90>
 8012d90:	edd3 7a00 	vldr	s15, [r3]
 8012d94:	eee3 7a22 	vfma.f32	s15, s6, s5
 8012d98:	edc3 7a00 	vstr	s15, [r3]
 8012d9c:	eef5 3a40 	vcmp.f32	s7, #0.0
 8012da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012da4:	d00c      	beq.n	8012dc0 <kalman_3gyro.constprop.0+0x2db4>
 8012da6:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 8012daa:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012db2:	d005      	beq.n	8012dc0 <kalman_3gyro.constprop.0+0x2db4>
 8012db4:	edd3 7a00 	vldr	s15, [r3]
 8012db8:	eee3 7aa2 	vfma.f32	s15, s7, s5
 8012dbc:	edc3 7a00 	vstr	s15, [r3]
 8012dc0:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8012dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dc8:	d00c      	beq.n	8012de4 <kalman_3gyro.constprop.0+0x2dd8>
 8012dca:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 8012dce:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dd6:	d005      	beq.n	8012de4 <kalman_3gyro.constprop.0+0x2dd8>
 8012dd8:	edd3 7a00 	vldr	s15, [r3]
 8012ddc:	eee4 7a22 	vfma.f32	s15, s8, s5
 8012de0:	edc3 7a00 	vstr	s15, [r3]
 8012de4:	eef5 4a40 	vcmp.f32	s9, #0.0
 8012de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dec:	d00c      	beq.n	8012e08 <kalman_3gyro.constprop.0+0x2dfc>
 8012dee:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 8012df2:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dfa:	d005      	beq.n	8012e08 <kalman_3gyro.constprop.0+0x2dfc>
 8012dfc:	edd3 7a00 	vldr	s15, [r3]
 8012e00:	eee4 7aa2 	vfma.f32	s15, s9, s5
 8012e04:	edc3 7a00 	vstr	s15, [r3]
 8012e08:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e10:	d00c      	beq.n	8012e2c <kalman_3gyro.constprop.0+0x2e20>
 8012e12:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 8012e16:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e1e:	d005      	beq.n	8012e2c <kalman_3gyro.constprop.0+0x2e20>
 8012e20:	edd3 7a00 	vldr	s15, [r3]
 8012e24:	eee5 7a22 	vfma.f32	s15, s10, s5
 8012e28:	edc3 7a00 	vstr	s15, [r3]
 8012e2c:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e34:	d00c      	beq.n	8012e50 <kalman_3gyro.constprop.0+0x2e44>
 8012e36:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 8012e3a:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e42:	d005      	beq.n	8012e50 <kalman_3gyro.constprop.0+0x2e44>
 8012e44:	edd3 7a00 	vldr	s15, [r3]
 8012e48:	eee5 7aa2 	vfma.f32	s15, s11, s5
 8012e4c:	edc3 7a00 	vstr	s15, [r3]
 8012e50:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e58:	d00c      	beq.n	8012e74 <kalman_3gyro.constprop.0+0x2e68>
 8012e5a:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 8012e5e:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e66:	d005      	beq.n	8012e74 <kalman_3gyro.constprop.0+0x2e68>
 8012e68:	edd3 7a00 	vldr	s15, [r3]
 8012e6c:	eee6 7a22 	vfma.f32	s15, s12, s5
 8012e70:	edc3 7a00 	vstr	s15, [r3]
 8012e74:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e7c:	d00c      	beq.n	8012e98 <kalman_3gyro.constprop.0+0x2e8c>
 8012e7e:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 8012e82:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e8a:	d005      	beq.n	8012e98 <kalman_3gyro.constprop.0+0x2e8c>
 8012e8c:	edd3 7a00 	vldr	s15, [r3]
 8012e90:	eee6 7aa2 	vfma.f32	s15, s13, s5
 8012e94:	edc3 7a00 	vstr	s15, [r3]
 8012e98:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea0:	d00c      	beq.n	8012ebc <kalman_3gyro.constprop.0+0x2eb0>
 8012ea2:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 8012ea6:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eae:	d005      	beq.n	8012ebc <kalman_3gyro.constprop.0+0x2eb0>
 8012eb0:	edd3 7a00 	vldr	s15, [r3]
 8012eb4:	eee7 7a22 	vfma.f32	s15, s14, s5
 8012eb8:	edc3 7a00 	vstr	s15, [r3]
 8012ebc:	3224      	adds	r2, #36	; 0x24
 8012ebe:	4594      	cmp	ip, r2
 8012ec0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8012ec4:	f47f af58 	bne.w	8012d78 <kalman_3gyro.constprop.0+0x2d6c>
 8012ec8:	3701      	adds	r7, #1
 8012eca:	2f09      	cmp	r7, #9
 8012ecc:	f100 0004 	add.w	r0, r0, #4
 8012ed0:	f47f af3e 	bne.w	8012d50 <kalman_3gyro.constprop.0+0x2d44>
 8012ed4:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8012ed8:	4640      	mov	r0, r8
 8012eda:	f20d 41cc 	addw	r1, sp, #1228	; 0x4cc
 8012ede:	f007 fc7f 	bl	801a7e0 <memcpy>
 8012ee2:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eea:	f000 8193 	beq.w	8013214 <kalman_3gyro.constprop.0+0x3208>
 8012eee:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ef6:	f000 818d 	beq.w	8013214 <kalman_3gyro.constprop.0+0x3208>
 8012efa:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f02:	ee69 8aa8 	vmul.f32	s17, s19, s17
 8012f06:	f040 8229 	bne.w	801335c <kalman_3gyro.constprop.0+0x3350>
 8012f0a:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f12:	f000 818e 	beq.w	8013232 <kalman_3gyro.constprop.0+0x3226>
 8012f16:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f1e:	ee29 7aaa 	vmul.f32	s14, s19, s21
 8012f22:	f040 81e2 	bne.w	80132ea <kalman_3gyro.constprop.0+0x32de>
 8012f26:	eef0 ba47 	vmov.f32	s23, s14
 8012f2a:	eef0 aa49 	vmov.f32	s21, s18
 8012f2e:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f36:	f000 814f 	beq.w	80131d8 <kalman_3gyro.constprop.0+0x31cc>
 8012f3a:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f42:	f000 8265 	beq.w	8013410 <kalman_3gyro.constprop.0+0x3404>
 8012f46:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f4e:	eef0 7a48 	vmov.f32	s15, s16
 8012f52:	ee29 7aac 	vmul.f32	s14, s19, s25
 8012f56:	f040 81dc 	bne.w	8013312 <kalman_3gyro.constprop.0+0x3306>
 8012f5a:	eeb0 ca47 	vmov.f32	s24, s14
 8012f5e:	eef0 ca67 	vmov.f32	s25, s15
 8012f62:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f6a:	f000 8190 	beq.w	801328e <kalman_3gyro.constprop.0+0x3282>
 8012f6e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f76:	f000 813c 	beq.w	80131f2 <kalman_3gyro.constprop.0+0x31e6>
 8012f7a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f82:	eef0 7a48 	vmov.f32	s15, s16
 8012f86:	ee29 7a8d 	vmul.f32	s14, s19, s26
 8012f8a:	f040 81d5 	bne.w	8013338 <kalman_3gyro.constprop.0+0x332c>
 8012f8e:	eeb0 aa47 	vmov.f32	s20, s14
 8012f92:	eeb0 da67 	vmov.f32	s26, s15
 8012f96:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f9e:	f000 8136 	beq.w	801320e <kalman_3gyro.constprop.0+0x3202>
 8012fa2:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012faa:	f000 8234 	beq.w	8013416 <kalman_3gyro.constprop.0+0x340a>
 8012fae:	eef0 7a48 	vmov.f32	s15, s16
 8012fb2:	ee2b ba29 	vmul.f32	s22, s22, s19
 8012fb6:	eef0 9a67 	vmov.f32	s19, s15
 8012fba:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 8012fbe:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 8012fc2:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 8012fc6:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 8012fca:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 8012fce:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 8012fd2:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 8012fd6:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 8012fda:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 8012fde:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8012fe2:	ee74 aa2a 	vadd.f32	s21, s8, s21
 8012fe6:	ee74 baab 	vadd.f32	s23, s9, s23
 8012fea:	ee75 ca2c 	vadd.f32	s25, s10, s25
 8012fee:	ee35 ca8c 	vadd.f32	s24, s11, s24
 8012ff2:	ee36 da0d 	vadd.f32	s26, s12, s26
 8012ff6:	ee36 aa8a 	vadd.f32	s20, s13, s20
 8012ffa:	ee77 9a29 	vadd.f32	s19, s14, s19
 8012ffe:	ee37 ba8b 	vadd.f32	s22, s15, s22
 8013002:	3601      	adds	r6, #1
 8013004:	2e0c      	cmp	r6, #12
 8013006:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 801300a:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 801300e:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 8013012:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 8013016:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 801301a:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 801301e:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 8013022:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 8013026:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 801302a:	f104 0404 	add.w	r4, r4, #4
 801302e:	f47f ab02 	bne.w	8012636 <kalman_3gyro.constprop.0+0x262a>
 8013032:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 8013036:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 801303a:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801303e:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 8013042:	eee6 7a06 	vfma.f32	s15, s12, s12
 8013046:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801304a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801304e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8013052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013056:	f100 81cc 	bmi.w	80133f2 <kalman_3gyro.constprop.0+0x33e6>
 801305a:	eeb1 5ae7 	vsqrt.f32	s10, s15
 801305e:	eec5 7a85 	vdiv.f32	s15, s11, s10
 8013062:	ed9f 5aee 	vldr	s10, [pc, #952]	; 801341c <kalman_3gyro.constprop.0+0x3410>
 8013066:	ee67 4a86 	vmul.f32	s9, s15, s12
 801306a:	ee67 5aa6 	vmul.f32	s11, s15, s13
 801306e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013072:	f8dd 382c 	ldr.w	r3, [sp, #2092]	; 0x82c
 8013076:	aa34      	add	r2, sp, #208	; 0xd0
 8013078:	edc3 4a00 	vstr	s9, [r3]
 801307c:	edc3 5a01 	vstr	s11, [r3, #4]
 8013080:	edc3 7a02 	vstr	s15, [r3, #8]
 8013084:	ed83 5a03 	vstr	s10, [r3, #12]
 8013088:	4618      	mov	r0, r3
 801308a:	4611      	mov	r1, r2
 801308c:	ed8d 6a3c 	vstr	s12, [sp, #240]	; 0xf0
 8013090:	edcd 6a3d 	vstr	s13, [sp, #244]	; 0xf4
 8013094:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 8013098:	ed8d 5a3f 	vstr	s10, [sp, #252]	; 0xfc
 801309c:	f7fb feb4 	bl	800ee08 <qmult>
 80130a0:	ed9d 6a35 	vldr	s12, [sp, #212]	; 0xd4
 80130a4:	eddd 5a34 	vldr	s11, [sp, #208]	; 0xd0
 80130a8:	ee66 7a06 	vmul.f32	s15, s12, s12
 80130ac:	eddd 6a36 	vldr	s13, [sp, #216]	; 0xd8
 80130b0:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80130b4:	ed9d 7a37 	vldr	s14, [sp, #220]	; 0xdc
 80130b8:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80130bc:	eee7 7a07 	vfma.f32	s15, s14, s14
 80130c0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80130c4:	eeb1 5ae7 	vsqrt.f32	s10, s15
 80130c8:	eec4 7a85 	vdiv.f32	s15, s9, s10
 80130cc:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80130d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80130d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80130d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80130dc:	f8dd 3828 	ldr.w	r3, [sp, #2088]	; 0x828
 80130e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80130e2:	edc3 5a00 	vstr	s11, [r3]
 80130e6:	ed83 6a01 	vstr	s12, [r3, #4]
 80130ea:	edc3 6a02 	vstr	s13, [r3, #8]
 80130ee:	ed83 7a03 	vstr	s14, [r3, #12]
 80130f2:	ae52      	add	r6, sp, #328	; 0x148
 80130f4:	af5a      	add	r7, sp, #360	; 0x168
 80130f6:	4634      	mov	r4, r6
 80130f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80130fa:	42bc      	cmp	r4, r7
 80130fc:	6028      	str	r0, [r5, #0]
 80130fe:	6069      	str	r1, [r5, #4]
 8013100:	60aa      	str	r2, [r5, #8]
 8013102:	60eb      	str	r3, [r5, #12]
 8013104:	f106 0610 	add.w	r6, r6, #16
 8013108:	f105 0510 	add.w	r5, r5, #16
 801310c:	d1f3      	bne.n	80130f6 <kalman_3gyro.constprop.0+0x30ea>
 801310e:	6830      	ldr	r0, [r6, #0]
 8013110:	6028      	str	r0, [r5, #0]
 8013112:	f20d 7dc4 	addw	sp, sp, #1988	; 0x7c4
 8013116:	ecbd 8b10 	vpop	{d8-d15}
 801311a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801311e:	eddc 7a05 	vldr	s15, [ip, #20]
 8013122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013126:	edcc 7a05 	vstr	s15, [ip, #20]
 801312a:	f1a2 0e02 	sub.w	lr, r2, #2
 801312e:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8013132:	edde 7a00 	vldr	s15, [lr]
 8013136:	eef1 7a67 	vneg.f32	s15, s15
 801313a:	edce 7a00 	vstr	s15, [lr]
 801313e:	f102 3eff 	add.w	lr, r2, #4294967295
 8013142:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8013146:	edde 7a00 	vldr	s15, [lr]
 801314a:	eef1 7a67 	vneg.f32	s15, s15
 801314e:	ed83 8a06 	vstr	s16, [r3, #24]
 8013152:	ed83 8a07 	vstr	s16, [r3, #28]
 8013156:	ed83 8a08 	vstr	s16, [r3, #32]
 801315a:	edce 7a00 	vstr	s15, [lr]
 801315e:	e543      	b.n	8012be8 <kalman_3gyro.constprop.0+0x2bdc>
 8013160:	eddc 7a02 	vldr	s15, [ip, #8]
 8013164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013168:	edcc 7a02 	vstr	s15, [ip, #8]
 801316c:	f1a2 0e05 	sub.w	lr, r2, #5
 8013170:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8013174:	edde 7a00 	vldr	s15, [lr]
 8013178:	eef1 7a67 	vneg.f32	s15, s15
 801317c:	ed83 8a03 	vstr	s16, [r3, #12]
 8013180:	edce 7a00 	vstr	s15, [lr]
 8013184:	ed83 8a04 	vstr	s16, [r3, #16]
 8013188:	f1a2 0e04 	sub.w	lr, r2, #4
 801318c:	e572      	b.n	8012c74 <kalman_3gyro.constprop.0+0x2c68>
 801318e:	eddc 7a01 	vldr	s15, [ip, #4]
 8013192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013196:	edcc 7a01 	vstr	s15, [ip, #4]
 801319a:	f1a2 0e06 	sub.w	lr, r2, #6
 801319e:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 80131a2:	edde 7a00 	vldr	s15, [lr]
 80131a6:	eef1 7a67 	vneg.f32	s15, s15
 80131aa:	ed83 8a02 	vstr	s16, [r3, #8]
 80131ae:	edce 7a00 	vstr	s15, [lr]
 80131b2:	ed83 8a03 	vstr	s16, [r3, #12]
 80131b6:	f1a2 0e05 	sub.w	lr, r2, #5
 80131ba:	e54d      	b.n	8012c58 <kalman_3gyro.constprop.0+0x2c4c>
 80131bc:	eef5 ca40 	vcmp.f32	s25, #0.0
 80131c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131c4:	eeb0 7a48 	vmov.f32	s14, s16
 80131c8:	ee69 7aab 	vmul.f32	s15, s19, s23
 80131cc:	f040 8097 	bne.w	80132fe <kalman_3gyro.constprop.0+0x32f2>
 80131d0:	eef0 ca67 	vmov.f32	s25, s15
 80131d4:	eef0 ba47 	vmov.f32	s23, s14
 80131d8:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80131dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131e0:	f43f aebf 	beq.w	8012f62 <kalman_3gyro.constprop.0+0x2f56>
 80131e4:	eef5 9a40 	vcmp.f32	s19, #0.0
 80131e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ec:	d142      	bne.n	8013274 <kalman_3gyro.constprop.0+0x3268>
 80131ee:	eeb0 ca69 	vmov.f32	s24, s19
 80131f2:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80131f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131fa:	f040 80ba 	bne.w	8013372 <kalman_3gyro.constprop.0+0x3366>
 80131fe:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8013202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013206:	eeb0 da4a 	vmov.f32	s26, s20
 801320a:	f47f aeca 	bne.w	8012fa2 <kalman_3gyro.constprop.0+0x2f96>
 801320e:	eef0 9a4b 	vmov.f32	s19, s22
 8013212:	e6d2      	b.n	8012fba <kalman_3gyro.constprop.0+0x2fae>
 8013214:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8013218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801321c:	d051      	beq.n	80132c2 <kalman_3gyro.constprop.0+0x32b6>
 801321e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8013222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013226:	f040 8097 	bne.w	8013358 <kalman_3gyro.constprop.0+0x334c>
 801322a:	eef0 aa69 	vmov.f32	s21, s19
 801322e:	eef0 8a69 	vmov.f32	s17, s19
 8013232:	eef5 ba40 	vcmp.f32	s23, #0.0
 8013236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801323a:	f43f ae78 	beq.w	8012f2e <kalman_3gyro.constprop.0+0x2f22>
 801323e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8013242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013246:	d1b9      	bne.n	80131bc <kalman_3gyro.constprop.0+0x31b0>
 8013248:	eef0 ca69 	vmov.f32	s25, s19
 801324c:	eef0 ba69 	vmov.f32	s23, s19
 8013250:	e7c2      	b.n	80131d8 <kalman_3gyro.constprop.0+0x31cc>
 8013252:	aa79      	add	r2, sp, #484	; 0x1e4
 8013254:	4413      	add	r3, r2
 8013256:	edd3 9a00 	vldr	s19, [r3]
 801325a:	f7ff bbd1 	b.w	8012a00 <kalman_3gyro.constprop.0+0x29f4>
 801325e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8013262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013266:	bf14      	ite	ne
 8013268:	ee68 7aad 	vmulne.f32	s15, s17, s27
 801326c:	eef0 7a68 	vmoveq.f32	s15, s17
 8013270:	f7ff ba9d 	b.w	80127ae <kalman_3gyro.constprop.0+0x27a2>
 8013274:	eeb5 da40 	vcmp.f32	s26, #0.0
 8013278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801327c:	eeb0 7a48 	vmov.f32	s14, s16
 8013280:	ee69 7a8c 	vmul.f32	s15, s19, s24
 8013284:	d14e      	bne.n	8013324 <kalman_3gyro.constprop.0+0x3318>
 8013286:	eeb0 da67 	vmov.f32	s26, s15
 801328a:	eeb0 ca47 	vmov.f32	s24, s14
 801328e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8013292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013296:	f43f ae7e 	beq.w	8012f96 <kalman_3gyro.constprop.0+0x2f8a>
 801329a:	eef5 9a40 	vcmp.f32	s19, #0.0
 801329e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132a2:	f000 84df 	beq.w	8013c64 <kalman_3gyro.constprop.0+0x3c58>
 80132a6:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80132aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ae:	eeb0 7a48 	vmov.f32	s14, s16
 80132b2:	ee69 7a8a 	vmul.f32	s15, s19, s20
 80132b6:	d148      	bne.n	801334a <kalman_3gyro.constprop.0+0x333e>
 80132b8:	eef0 9a67 	vmov.f32	s19, s15
 80132bc:	eeb0 aa47 	vmov.f32	s20, s14
 80132c0:	e67b      	b.n	8012fba <kalman_3gyro.constprop.0+0x2fae>
 80132c2:	eef5 aa40 	vcmp.f32	s21, #0.0
 80132c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ca:	d05b      	beq.n	8013384 <kalman_3gyro.constprop.0+0x3378>
 80132cc:	eef5 9a40 	vcmp.f32	s19, #0.0
 80132d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d4:	d0a9      	beq.n	801322a <kalman_3gyro.constprop.0+0x321e>
 80132d6:	eef5 ba40 	vcmp.f32	s23, #0.0
 80132da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132de:	eef0 8a49 	vmov.f32	s17, s18
 80132e2:	ee29 7aaa 	vmul.f32	s14, s19, s21
 80132e6:	f43f ae1e 	beq.w	8012f26 <kalman_3gyro.constprop.0+0x2f1a>
 80132ea:	eef5 ca40 	vcmp.f32	s25, #0.0
 80132ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132f2:	eef0 aa49 	vmov.f32	s21, s18
 80132f6:	ee69 7aab 	vmul.f32	s15, s19, s23
 80132fa:	f43f af69 	beq.w	80131d0 <kalman_3gyro.constprop.0+0x31c4>
 80132fe:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8013302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013306:	eef0 ba47 	vmov.f32	s23, s14
 801330a:	ee29 7aac 	vmul.f32	s14, s19, s25
 801330e:	f43f ae24 	beq.w	8012f5a <kalman_3gyro.constprop.0+0x2f4e>
 8013312:	eeb5 da40 	vcmp.f32	s26, #0.0
 8013316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801331a:	eef0 ca67 	vmov.f32	s25, s15
 801331e:	ee69 7a8c 	vmul.f32	s15, s19, s24
 8013322:	d0b0      	beq.n	8013286 <kalman_3gyro.constprop.0+0x327a>
 8013324:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8013328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801332c:	eeb0 ca47 	vmov.f32	s24, s14
 8013330:	ee29 7a8d 	vmul.f32	s14, s19, s26
 8013334:	f43f ae2b 	beq.w	8012f8e <kalman_3gyro.constprop.0+0x2f82>
 8013338:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801333c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013340:	eeb0 da67 	vmov.f32	s26, s15
 8013344:	ee69 7a8a 	vmul.f32	s15, s19, s20
 8013348:	d0b6      	beq.n	80132b8 <kalman_3gyro.constprop.0+0x32ac>
 801334a:	eeb0 aa47 	vmov.f32	s20, s14
 801334e:	e630      	b.n	8012fb2 <kalman_3gyro.constprop.0+0x2fa6>
 8013350:	eef0 7a6d 	vmov.f32	s15, s27
 8013354:	f7ff bade 	b.w	8012914 <kalman_3gyro.constprop.0+0x2908>
 8013358:	eef0 8a48 	vmov.f32	s17, s16
 801335c:	eef5 aa40 	vcmp.f32	s21, #0.0
 8013360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013364:	ee29 9a29 	vmul.f32	s18, s18, s19
 8013368:	f47f add5 	bne.w	8012f16 <kalman_3gyro.constprop.0+0x2f0a>
 801336c:	eef0 aa49 	vmov.f32	s21, s18
 8013370:	e75f      	b.n	8013232 <kalman_3gyro.constprop.0+0x3226>
 8013372:	eef0 9a48 	vmov.f32	s19, s16
 8013376:	eeb0 aa48 	vmov.f32	s20, s16
 801337a:	eeb0 da48 	vmov.f32	s26, s16
 801337e:	ed9f ba27 	vldr	s22, [pc, #156]	; 801341c <kalman_3gyro.constprop.0+0x3410>
 8013382:	e61a      	b.n	8012fba <kalman_3gyro.constprop.0+0x2fae>
 8013384:	eef0 8a6a 	vmov.f32	s17, s21
 8013388:	e753      	b.n	8013232 <kalman_3gyro.constprop.0+0x3226>
 801338a:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 801338e:	2a31      	cmp	r2, #49	; 0x31
 8013390:	f63f a88e 	bhi.w	80124b0 <kalman_3gyro.constprop.0+0x24a4>
 8013394:	2100      	movs	r1, #0
 8013396:	3201      	adds	r2, #1
 8013398:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 801339c:	f8ad 10a6 	strh.w	r1, [sp, #166]	; 0xa6
 80133a0:	f88d 10a8 	strb.w	r1, [sp, #168]	; 0xa8
 80133a4:	f7ff b884 	b.w	80124b0 <kalman_3gyro.constprop.0+0x24a4>
 80133a8:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	f340 8445 	ble.w	8013c3c <kalman_3gyro.constprop.0+0x3c30>
 80133b2:	2200      	movs	r2, #0
 80133b4:	3b01      	subs	r3, #1
 80133b6:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 80133ba:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
 80133be:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
 80133c2:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 80133c6:	f88d 20ab 	strb.w	r2, [sp, #171]	; 0xab
 80133ca:	f7fe bd9f 	b.w	8011f0c <kalman_3gyro.constprop.0+0x1f00>
 80133ce:	f89b 200d 	ldrb.w	r2, [fp, #13]
 80133d2:	f89b 100e 	ldrb.w	r1, [fp, #14]
 80133d6:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
 80133da:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
 80133de:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
 80133e2:	f88d 10a3 	strb.w	r1, [sp, #163]	; 0xa3
 80133e6:	f88d 10a4 	strb.w	r1, [sp, #164]	; 0xa4
 80133ea:	f88d 10a5 	strb.w	r1, [sp, #165]	; 0xa5
 80133ee:	f7fe bd0d 	b.w	8011e0c <kalman_3gyro.constprop.0+0x1e00>
 80133f2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80133f6:	eef0 4a46 	vmov.f32	s9, s12
 80133fa:	eeb1 5ae5 	vsqrt.f32	s10, s11
 80133fe:	eef0 7a47 	vmov.f32	s15, s14
 8013402:	eef0 5a66 	vmov.f32	s11, s13
 8013406:	e634      	b.n	8013072 <kalman_3gyro.constprop.0+0x3066>
 8013408:	eeb1 7a47 	vneg.f32	s14, s14
 801340c:	f7fd bd38 	b.w	8010e80 <kalman_3gyro.constprop.0+0xe74>
 8013410:	eef0 ca69 	vmov.f32	s25, s19
 8013414:	e6e0      	b.n	80131d8 <kalman_3gyro.constprop.0+0x31cc>
 8013416:	eeb0 ba69 	vmov.f32	s22, s19
 801341a:	e5ce      	b.n	8012fba <kalman_3gyro.constprop.0+0x2fae>
 801341c:	00000000 	.word	0x00000000
 8013420:	2000      	movs	r0, #0
 8013422:	49de      	ldr	r1, [pc, #888]	; (801379c <kalman_3gyro.constprop.0+0x3790>)
 8013424:	4bde      	ldr	r3, [pc, #888]	; (80137a0 <kalman_3gyro.constprop.0+0x3794>)
 8013426:	f20b 44b4 	addw	r4, fp, #1204	; 0x4b4
 801342a:	4ade      	ldr	r2, [pc, #888]	; (80137a4 <kalman_3gyro.constprop.0+0x3798>)
 801342c:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 8013430:	6021      	str	r1, [r4, #0]
 8013432:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 8013436:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 801343a:	6002      	str	r2, [r0, #0]
 801343c:	600b      	str	r3, [r1, #0]
 801343e:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 8013442:	9413      	str	r4, [sp, #76]	; 0x4c
 8013444:	9003      	str	r0, [sp, #12]
 8013446:	9110      	str	r1, [sp, #64]	; 0x40
 8013448:	2b00      	cmp	r3, #0
 801344a:	f001 8393 	beq.w	8014b74 <kalman_3gyro.constprop.0+0x4b68>
 801344e:	240c      	movs	r4, #12
 8013450:	f50b 6a97 	add.w	sl, fp, #1208	; 0x4b8
 8013454:	eddf bad4 	vldr	s23, [pc, #848]	; 80137a8 <kalman_3gyro.constprop.0+0x379c>
 8013458:	ed9f bad4 	vldr	s22, [pc, #848]	; 80137ac <kalman_3gyro.constprop.0+0x37a0>
 801345c:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 80137b0 <kalman_3gyro.constprop.0+0x37a4>
 8013460:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8013464:	eddf 9ad3 	vldr	s19, [pc, #844]	; 80137b4 <kalman_3gyro.constprop.0+0x37a8>
 8013468:	eddf aad3 	vldr	s21, [pc, #844]	; 80137b8 <kalman_3gyro.constprop.0+0x37ac>
 801346c:	4655      	mov	r5, sl
 801346e:	fb14 a403 	smlabb	r4, r4, r3, sl
 8013472:	9e08      	ldr	r6, [sp, #32]
 8013474:	e06b      	b.n	801354e <kalman_3gyro.constprop.0+0x3542>
 8013476:	eeb4 7ae9 	vcmpe.f32	s14, s19
 801347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801347e:	f300 815b 	bgt.w	8013738 <kalman_3gyro.constprop.0+0x372c>
 8013482:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013486:	ee17 0a90 	vmov	r0, s15
 801348a:	f7ed f861 	bl	8000550 <__aeabi_f2d>
 801348e:	ec41 0b10 	vmov	d0, r0, r1
 8013492:	f005 fad5 	bl	8018a40 <ceil>
 8013496:	ec51 0b10 	vmov	r0, r1, d0
 801349a:	f7ed fb61 	bl	8000b60 <__aeabi_d2f>
 801349e:	ee07 0a90 	vmov	s15, r0
 80134a2:	edc5 7a00 	vstr	s15, [r5]
 80134a6:	ed96 7a01 	vldr	s14, [r6, #4]
 80134aa:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80134ae:	eef0 6ae7 	vabs.f32	s13, s15
 80134b2:	eef4 6acb 	vcmpe.f32	s13, s22
 80134b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ba:	d51b      	bpl.n	80134f4 <kalman_3gyro.constprop.0+0x34e8>
 80134bc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80134c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134c4:	f280 8121 	bge.w	801370a <kalman_3gyro.constprop.0+0x36fe>
 80134c8:	eeb4 7ae9 	vcmpe.f32	s14, s19
 80134cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134d0:	f300 812f 	bgt.w	8013732 <kalman_3gyro.constprop.0+0x3726>
 80134d4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80134d8:	ee17 0a90 	vmov	r0, s15
 80134dc:	f7ed f838 	bl	8000550 <__aeabi_f2d>
 80134e0:	ec41 0b10 	vmov	d0, r0, r1
 80134e4:	f005 faac 	bl	8018a40 <ceil>
 80134e8:	ec51 0b10 	vmov	r0, r1, d0
 80134ec:	f7ed fb38 	bl	8000b60 <__aeabi_d2f>
 80134f0:	ee07 0a90 	vmov	s15, r0
 80134f4:	edc5 7a01 	vstr	s15, [r5, #4]
 80134f8:	ed96 7a02 	vldr	s14, [r6, #8]
 80134fc:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013500:	eef0 6ae7 	vabs.f32	s13, s15
 8013504:	eef4 6acb 	vcmpe.f32	s13, s22
 8013508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801350c:	d51a      	bpl.n	8013544 <kalman_3gyro.constprop.0+0x3538>
 801350e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013516:	da3b      	bge.n	8013590 <kalman_3gyro.constprop.0+0x3584>
 8013518:	eeb4 7ae9 	vcmpe.f32	s14, s19
 801351c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013520:	f300 8104 	bgt.w	801372c <kalman_3gyro.constprop.0+0x3720>
 8013524:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013528:	ee17 0a90 	vmov	r0, s15
 801352c:	f7ed f810 	bl	8000550 <__aeabi_f2d>
 8013530:	ec41 0b10 	vmov	d0, r0, r1
 8013534:	f005 fa84 	bl	8018a40 <ceil>
 8013538:	ec51 0b10 	vmov	r0, r1, d0
 801353c:	f7ed fb10 	bl	8000b60 <__aeabi_d2f>
 8013540:	ee07 0a90 	vmov	s15, r0
 8013544:	edc5 7a02 	vstr	s15, [r5, #8]
 8013548:	350c      	adds	r5, #12
 801354a:	42ac      	cmp	r4, r5
 801354c:	d035      	beq.n	80135ba <kalman_3gyro.constprop.0+0x35ae>
 801354e:	ed96 7a00 	vldr	s14, [r6]
 8013552:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013556:	eef0 6ae7 	vabs.f32	s13, s15
 801355a:	eef4 6acb 	vcmpe.f32	s13, s22
 801355e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013562:	d59e      	bpl.n	80134a2 <kalman_3gyro.constprop.0+0x3496>
 8013564:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801356c:	db83      	blt.n	8013476 <kalman_3gyro.constprop.0+0x346a>
 801356e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013572:	ee17 0a90 	vmov	r0, s15
 8013576:	f7ec ffeb 	bl	8000550 <__aeabi_f2d>
 801357a:	ec41 0b10 	vmov	d0, r0, r1
 801357e:	f005 fae3 	bl	8018b48 <floor>
 8013582:	ec51 0b10 	vmov	r0, r1, d0
 8013586:	f7ed faeb 	bl	8000b60 <__aeabi_d2f>
 801358a:	ee07 0a90 	vmov	s15, r0
 801358e:	e788      	b.n	80134a2 <kalman_3gyro.constprop.0+0x3496>
 8013590:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013594:	ee17 0a90 	vmov	r0, s15
 8013598:	f7ec ffda 	bl	8000550 <__aeabi_f2d>
 801359c:	ec41 0b10 	vmov	d0, r0, r1
 80135a0:	f005 fad2 	bl	8018b48 <floor>
 80135a4:	ec51 0b10 	vmov	r0, r1, d0
 80135a8:	f7ed fada 	bl	8000b60 <__aeabi_d2f>
 80135ac:	ee07 0a90 	vmov	s15, r0
 80135b0:	350c      	adds	r5, #12
 80135b2:	ed45 7a01 	vstr	s15, [r5, #-4]
 80135b6:	42ac      	cmp	r4, r5
 80135b8:	d1c9      	bne.n	801354e <kalman_3gyro.constprop.0+0x3542>
 80135ba:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 80135be:	f50b 66c5 	add.w	r6, fp, #1576	; 0x628
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	f000 80d0 	beq.w	8013768 <kalman_3gyro.constprop.0+0x375c>
 80135c8:	240c      	movs	r4, #12
 80135ca:	f50b 66c5 	add.w	r6, fp, #1576	; 0x628
 80135ce:	eddf ba7b 	vldr	s23, [pc, #492]	; 80137bc <kalman_3gyro.constprop.0+0x37b0>
 80135d2:	ed9f ba76 	vldr	s22, [pc, #472]	; 80137ac <kalman_3gyro.constprop.0+0x37a0>
 80135d6:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 80137c0 <kalman_3gyro.constprop.0+0x37b4>
 80135da:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80135de:	eddf 9a79 	vldr	s19, [pc, #484]	; 80137c4 <kalman_3gyro.constprop.0+0x37b8>
 80135e2:	eddf aa75 	vldr	s21, [pc, #468]	; 80137b8 <kalman_3gyro.constprop.0+0x37ac>
 80135e6:	4635      	mov	r5, r6
 80135e8:	fb14 6403 	smlabb	r4, r4, r3, r6
 80135ec:	9f08      	ldr	r7, [sp, #32]
 80135ee:	e06b      	b.n	80136c8 <kalman_3gyro.constprop.0+0x36bc>
 80135f0:	eeb4 7ae9 	vcmpe.f32	s14, s19
 80135f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f8:	f300 81b6 	bgt.w	8013968 <kalman_3gyro.constprop.0+0x395c>
 80135fc:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013600:	ee17 0a90 	vmov	r0, s15
 8013604:	f7ec ffa4 	bl	8000550 <__aeabi_f2d>
 8013608:	ec41 0b10 	vmov	d0, r0, r1
 801360c:	f005 fa18 	bl	8018a40 <ceil>
 8013610:	ec51 0b10 	vmov	r0, r1, d0
 8013614:	f7ed faa4 	bl	8000b60 <__aeabi_d2f>
 8013618:	ee07 0a90 	vmov	s15, r0
 801361c:	edc5 7a00 	vstr	s15, [r5]
 8013620:	ed97 7a04 	vldr	s14, [r7, #16]
 8013624:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013628:	eef0 6ae7 	vabs.f32	s13, s15
 801362c:	eef4 6acb 	vcmpe.f32	s13, s22
 8013630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013634:	d51b      	bpl.n	801366e <kalman_3gyro.constprop.0+0x3662>
 8013636:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801363a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801363e:	f280 817c 	bge.w	801393a <kalman_3gyro.constprop.0+0x392e>
 8013642:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8013646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801364a:	f300 818a 	bgt.w	8013962 <kalman_3gyro.constprop.0+0x3956>
 801364e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013652:	ee17 0a90 	vmov	r0, s15
 8013656:	f7ec ff7b 	bl	8000550 <__aeabi_f2d>
 801365a:	ec41 0b10 	vmov	d0, r0, r1
 801365e:	f005 f9ef 	bl	8018a40 <ceil>
 8013662:	ec51 0b10 	vmov	r0, r1, d0
 8013666:	f7ed fa7b 	bl	8000b60 <__aeabi_d2f>
 801366a:	ee07 0a90 	vmov	s15, r0
 801366e:	edc5 7a01 	vstr	s15, [r5, #4]
 8013672:	ed97 7a05 	vldr	s14, [r7, #20]
 8013676:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801367a:	eef0 6ae7 	vabs.f32	s13, s15
 801367e:	eef4 6acb 	vcmpe.f32	s13, s22
 8013682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013686:	d51a      	bpl.n	80136be <kalman_3gyro.constprop.0+0x36b2>
 8013688:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801368c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013690:	da55      	bge.n	801373e <kalman_3gyro.constprop.0+0x3732>
 8013692:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8013696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801369a:	f300 815f 	bgt.w	801395c <kalman_3gyro.constprop.0+0x3950>
 801369e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80136a2:	ee17 0a90 	vmov	r0, s15
 80136a6:	f7ec ff53 	bl	8000550 <__aeabi_f2d>
 80136aa:	ec41 0b10 	vmov	d0, r0, r1
 80136ae:	f005 f9c7 	bl	8018a40 <ceil>
 80136b2:	ec51 0b10 	vmov	r0, r1, d0
 80136b6:	f7ed fa53 	bl	8000b60 <__aeabi_d2f>
 80136ba:	ee07 0a90 	vmov	s15, r0
 80136be:	edc5 7a02 	vstr	s15, [r5, #8]
 80136c2:	350c      	adds	r5, #12
 80136c4:	42ac      	cmp	r4, r5
 80136c6:	d04f      	beq.n	8013768 <kalman_3gyro.constprop.0+0x375c>
 80136c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80136cc:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80136d0:	eef0 6ae7 	vabs.f32	s13, s15
 80136d4:	eef4 6acb 	vcmpe.f32	s13, s22
 80136d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136dc:	d59e      	bpl.n	801361c <kalman_3gyro.constprop.0+0x3610>
 80136de:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80136e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136e6:	db83      	blt.n	80135f0 <kalman_3gyro.constprop.0+0x35e4>
 80136e8:	ee77 7a89 	vadd.f32	s15, s15, s18
 80136ec:	ee17 0a90 	vmov	r0, s15
 80136f0:	f7ec ff2e 	bl	8000550 <__aeabi_f2d>
 80136f4:	ec41 0b10 	vmov	d0, r0, r1
 80136f8:	f005 fa26 	bl	8018b48 <floor>
 80136fc:	ec51 0b10 	vmov	r0, r1, d0
 8013700:	f7ed fa2e 	bl	8000b60 <__aeabi_d2f>
 8013704:	ee07 0a90 	vmov	s15, r0
 8013708:	e788      	b.n	801361c <kalman_3gyro.constprop.0+0x3610>
 801370a:	ee77 7a89 	vadd.f32	s15, s15, s18
 801370e:	ee17 0a90 	vmov	r0, s15
 8013712:	f7ec ff1d 	bl	8000550 <__aeabi_f2d>
 8013716:	ec41 0b10 	vmov	d0, r0, r1
 801371a:	f005 fa15 	bl	8018b48 <floor>
 801371e:	ec51 0b10 	vmov	r0, r1, d0
 8013722:	f7ed fa1d 	bl	8000b60 <__aeabi_d2f>
 8013726:	ee07 0a90 	vmov	s15, r0
 801372a:	e6e3      	b.n	80134f4 <kalman_3gyro.constprop.0+0x34e8>
 801372c:	eef0 7a6a 	vmov.f32	s15, s21
 8013730:	e708      	b.n	8013544 <kalman_3gyro.constprop.0+0x3538>
 8013732:	eef0 7a6a 	vmov.f32	s15, s21
 8013736:	e6dd      	b.n	80134f4 <kalman_3gyro.constprop.0+0x34e8>
 8013738:	eef0 7a6a 	vmov.f32	s15, s21
 801373c:	e6b1      	b.n	80134a2 <kalman_3gyro.constprop.0+0x3496>
 801373e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013742:	ee17 0a90 	vmov	r0, s15
 8013746:	f7ec ff03 	bl	8000550 <__aeabi_f2d>
 801374a:	ec41 0b10 	vmov	d0, r0, r1
 801374e:	f005 f9fb 	bl	8018b48 <floor>
 8013752:	ec51 0b10 	vmov	r0, r1, d0
 8013756:	f7ed fa03 	bl	8000b60 <__aeabi_d2f>
 801375a:	ee07 0a90 	vmov	s15, r0
 801375e:	350c      	adds	r5, #12
 8013760:	ed45 7a01 	vstr	s15, [r5, #-4]
 8013764:	42ac      	cmp	r4, r5
 8013766:	d1af      	bne.n	80136c8 <kalman_3gyro.constprop.0+0x36bc>
 8013768:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 801376c:	2b00      	cmp	r3, #0
 801376e:	f43c ad69 	beq.w	8010244 <kalman_3gyro.constprop.0+0x238>
 8013772:	240c      	movs	r4, #12
 8013774:	f50b 62f3 	add.w	r2, fp, #1944	; 0x798
 8013778:	eddf ba13 	vldr	s23, [pc, #76]	; 80137c8 <kalman_3gyro.constprop.0+0x37bc>
 801377c:	ed9f ba0b 	vldr	s22, [pc, #44]	; 80137ac <kalman_3gyro.constprop.0+0x37a0>
 8013780:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80137cc <kalman_3gyro.constprop.0+0x37c0>
 8013784:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8013788:	eddf 9a11 	vldr	s19, [pc, #68]	; 80137d0 <kalman_3gyro.constprop.0+0x37c4>
 801378c:	eddf aa0a 	vldr	s21, [pc, #40]	; 80137b8 <kalman_3gyro.constprop.0+0x37ac>
 8013790:	4615      	mov	r5, r2
 8013792:	fb14 2403 	smlabb	r4, r4, r3, r2
 8013796:	9f08      	ldr	r7, [sp, #32]
 8013798:	920f      	str	r2, [sp, #60]	; 0x3c
 801379a:	e0ad      	b.n	80138f8 <kalman_3gyro.constprop.0+0x38ec>
 801379c:	3a7001e0 	.word	0x3a7001e0
 80137a0:	3a8c0118 	.word	0x3a8c0118
 80137a4:	3a000100 	.word	0x3a000100
 80137a8:	44888777 	.word	0x44888777
 80137ac:	4b000000 	.word	0x4b000000
 80137b0:	39f001e1 	.word	0x39f001e1
 80137b4:	b9f001e1 	.word	0xb9f001e1
 80137b8:	80000000 	.word	0x80000000
 80137bc:	44fffe00 	.word	0x44fffe00
 80137c0:	39800100 	.word	0x39800100
 80137c4:	b9800100 	.word	0xb9800100
 80137c8:	446a0ccd 	.word	0x446a0ccd
 80137cc:	3a0c0118 	.word	0x3a0c0118
 80137d0:	ba0c0118 	.word	0xba0c0118
 80137d4:	bf666666 	.word	0xbf666666
 80137d8:	3ecccccd 	.word	0x3ecccccd
 80137dc:	3f4ccccd 	.word	0x3f4ccccd
 80137e0:	3ca3d70a 	.word	0x3ca3d70a
 80137e4:	3d072b02 	.word	0x3d072b02
 80137e8:	3cb43958 	.word	0x3cb43958
 80137ec:	3d4ccccd 	.word	0x3d4ccccd
 80137f0:	3cf5c28f 	.word	0x3cf5c28f
 80137f4:	3d75c28f 	.word	0x3d75c28f
 80137f8:	3d23d70a 	.word	0x3d23d70a
 80137fc:	3d8f5c29 	.word	0x3d8f5c29
 8013800:	3dcccccd 	.word	0x3dcccccd
 8013804:	3e4ccccd 	.word	0x3e4ccccd
 8013808:	3e99999a 	.word	0x3e99999a
 801380c:	3f666666 	.word	0x3f666666
 8013810:	3ee66666 	.word	0x3ee66666
 8013814:	3fcccccd 	.word	0x3fcccccd
 8013818:	3fe66666 	.word	0x3fe66666
 801381c:	3f333333 	.word	0x3f333333
 8013820:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8013824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013828:	f300 80c6 	bgt.w	80139b8 <kalman_3gyro.constprop.0+0x39ac>
 801382c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013830:	ee17 0a90 	vmov	r0, s15
 8013834:	f7ec fe8c 	bl	8000550 <__aeabi_f2d>
 8013838:	ec41 0b10 	vmov	d0, r0, r1
 801383c:	f005 f900 	bl	8018a40 <ceil>
 8013840:	ec51 0b10 	vmov	r0, r1, d0
 8013844:	f7ed f98c 	bl	8000b60 <__aeabi_d2f>
 8013848:	ee07 0a90 	vmov	s15, r0
 801384c:	edc5 7a00 	vstr	s15, [r5]
 8013850:	ed97 7a07 	vldr	s14, [r7, #28]
 8013854:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013858:	eef0 6ae7 	vabs.f32	s13, s15
 801385c:	eef4 6acb 	vcmpe.f32	s13, s22
 8013860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013864:	d51b      	bpl.n	801389e <kalman_3gyro.constprop.0+0x3892>
 8013866:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801386a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801386e:	f280 808f 	bge.w	8013990 <kalman_3gyro.constprop.0+0x3984>
 8013872:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8013876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801387a:	f300 809a 	bgt.w	80139b2 <kalman_3gyro.constprop.0+0x39a6>
 801387e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013882:	ee17 0a90 	vmov	r0, s15
 8013886:	f7ec fe63 	bl	8000550 <__aeabi_f2d>
 801388a:	ec41 0b10 	vmov	d0, r0, r1
 801388e:	f005 f8d7 	bl	8018a40 <ceil>
 8013892:	ec51 0b10 	vmov	r0, r1, d0
 8013896:	f7ed f963 	bl	8000b60 <__aeabi_d2f>
 801389a:	ee07 0a90 	vmov	s15, r0
 801389e:	edc5 7a01 	vstr	s15, [r5, #4]
 80138a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80138a6:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80138aa:	eef0 6ae7 	vabs.f32	s13, s15
 80138ae:	eef4 6acb 	vcmpe.f32	s13, s22
 80138b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138b6:	d519      	bpl.n	80138ec <kalman_3gyro.constprop.0+0x38e0>
 80138b8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80138bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138c0:	da55      	bge.n	801396e <kalman_3gyro.constprop.0+0x3962>
 80138c2:	eeb4 7ae9 	vcmpe.f32	s14, s19
 80138c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ca:	dc78      	bgt.n	80139be <kalman_3gyro.constprop.0+0x39b2>
 80138cc:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80138d0:	ee17 0a90 	vmov	r0, s15
 80138d4:	f7ec fe3c 	bl	8000550 <__aeabi_f2d>
 80138d8:	ec41 0b10 	vmov	d0, r0, r1
 80138dc:	f005 f8b0 	bl	8018a40 <ceil>
 80138e0:	ec51 0b10 	vmov	r0, r1, d0
 80138e4:	f7ed f93c 	bl	8000b60 <__aeabi_d2f>
 80138e8:	ee07 0a90 	vmov	s15, r0
 80138ec:	edc5 7a02 	vstr	s15, [r5, #8]
 80138f0:	350c      	adds	r5, #12
 80138f2:	42ac      	cmp	r4, r5
 80138f4:	f43c aca9 	beq.w	801024a <kalman_3gyro.constprop.0+0x23e>
 80138f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80138fc:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013900:	eef0 6ae7 	vabs.f32	s13, s15
 8013904:	eef4 6acb 	vcmpe.f32	s13, s22
 8013908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801390c:	d59e      	bpl.n	801384c <kalman_3gyro.constprop.0+0x3840>
 801390e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013916:	db83      	blt.n	8013820 <kalman_3gyro.constprop.0+0x3814>
 8013918:	ee77 7a89 	vadd.f32	s15, s15, s18
 801391c:	ee17 0a90 	vmov	r0, s15
 8013920:	f7ec fe16 	bl	8000550 <__aeabi_f2d>
 8013924:	ec41 0b10 	vmov	d0, r0, r1
 8013928:	f005 f90e 	bl	8018b48 <floor>
 801392c:	ec51 0b10 	vmov	r0, r1, d0
 8013930:	f7ed f916 	bl	8000b60 <__aeabi_d2f>
 8013934:	ee07 0a90 	vmov	s15, r0
 8013938:	e788      	b.n	801384c <kalman_3gyro.constprop.0+0x3840>
 801393a:	ee77 7a89 	vadd.f32	s15, s15, s18
 801393e:	ee17 0a90 	vmov	r0, s15
 8013942:	f7ec fe05 	bl	8000550 <__aeabi_f2d>
 8013946:	ec41 0b10 	vmov	d0, r0, r1
 801394a:	f005 f8fd 	bl	8018b48 <floor>
 801394e:	ec51 0b10 	vmov	r0, r1, d0
 8013952:	f7ed f905 	bl	8000b60 <__aeabi_d2f>
 8013956:	ee07 0a90 	vmov	s15, r0
 801395a:	e688      	b.n	801366e <kalman_3gyro.constprop.0+0x3662>
 801395c:	eef0 7a6a 	vmov.f32	s15, s21
 8013960:	e6ad      	b.n	80136be <kalman_3gyro.constprop.0+0x36b2>
 8013962:	eef0 7a6a 	vmov.f32	s15, s21
 8013966:	e682      	b.n	801366e <kalman_3gyro.constprop.0+0x3662>
 8013968:	eef0 7a6a 	vmov.f32	s15, s21
 801396c:	e656      	b.n	801361c <kalman_3gyro.constprop.0+0x3610>
 801396e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013972:	ee17 0a90 	vmov	r0, s15
 8013976:	f7ec fdeb 	bl	8000550 <__aeabi_f2d>
 801397a:	ec41 0b10 	vmov	d0, r0, r1
 801397e:	f005 f8e3 	bl	8018b48 <floor>
 8013982:	ec51 0b10 	vmov	r0, r1, d0
 8013986:	f7ed f8eb 	bl	8000b60 <__aeabi_d2f>
 801398a:	ee07 0a90 	vmov	s15, r0
 801398e:	e7ad      	b.n	80138ec <kalman_3gyro.constprop.0+0x38e0>
 8013990:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013994:	ee17 0a90 	vmov	r0, s15
 8013998:	f7ec fdda 	bl	8000550 <__aeabi_f2d>
 801399c:	ec41 0b10 	vmov	d0, r0, r1
 80139a0:	f005 f8d2 	bl	8018b48 <floor>
 80139a4:	ec51 0b10 	vmov	r0, r1, d0
 80139a8:	f7ed f8da 	bl	8000b60 <__aeabi_d2f>
 80139ac:	ee07 0a90 	vmov	s15, r0
 80139b0:	e775      	b.n	801389e <kalman_3gyro.constprop.0+0x3892>
 80139b2:	eef0 7a6a 	vmov.f32	s15, s21
 80139b6:	e772      	b.n	801389e <kalman_3gyro.constprop.0+0x3892>
 80139b8:	eef0 7a6a 	vmov.f32	s15, s21
 80139bc:	e746      	b.n	801384c <kalman_3gyro.constprop.0+0x3840>
 80139be:	eef0 7a6a 	vmov.f32	s15, s21
 80139c2:	e793      	b.n	80138ec <kalman_3gyro.constprop.0+0x38e0>
 80139c4:	2200      	movs	r2, #0
 80139c6:	9921      	ldr	r1, [sp, #132]	; 0x84
 80139c8:	780b      	ldrb	r3, [r1, #0]
 80139ca:	ed91 7a03 	vldr	s14, [r1, #12]
 80139ce:	edd1 6a01 	vldr	s13, [r1, #4]
 80139d2:	edd1 7a02 	vldr	s15, [r1, #8]
 80139d6:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 80139da:	2b00      	cmp	r3, #0
 80139dc:	f040 8148 	bne.w	8013c70 <kalman_3gyro.constprop.0+0x3c64>
 80139e0:	ed5f 7a84 	vldr	s15, [pc, #-528]	; 80137d4 <kalman_3gyro.constprop.0+0x37c8>
 80139e4:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80139e8:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 80139ec:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80139f0:	2100      	movs	r1, #0
 80139f2:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 80139f6:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 80139fa:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 80139fe:	f006 fefc 	bl	801a7fa <memset>
 8013a02:	ed1f 9a8b 	vldr	s18, [pc, #-556]	; 80137d8 <kalman_3gyro.constprop.0+0x37cc>
 8013a06:	eddb 7a02 	vldr	s15, [fp, #8]
 8013a0a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8013a0e:	ed1f 1a8d 	vldr	s2, [pc, #-564]	; 80137dc <kalman_3gyro.constprop.0+0x37d0>
 8013a12:	ed1f 7a8d 	vldr	s14, [pc, #-564]	; 80137e0 <kalman_3gyro.constprop.0+0x37d4>
 8013a16:	ed5f 1a8d 	vldr	s3, [pc, #-564]	; 80137e4 <kalman_3gyro.constprop.0+0x37d8>
 8013a1a:	ed1f 2a8d 	vldr	s4, [pc, #-564]	; 80137e8 <kalman_3gyro.constprop.0+0x37dc>
 8013a1e:	ed1f 5a8d 	vldr	s10, [pc, #-564]	; 80137ec <kalman_3gyro.constprop.0+0x37e0>
 8013a22:	ed5f 2a8d 	vldr	s5, [pc, #-564]	; 80137f0 <kalman_3gyro.constprop.0+0x37e4>
 8013a26:	ed1f 3a8d 	vldr	s6, [pc, #-564]	; 80137f4 <kalman_3gyro.constprop.0+0x37e8>
 8013a2a:	ed5f 3a8d 	vldr	s7, [pc, #-564]	; 80137f8 <kalman_3gyro.constprop.0+0x37ec>
 8013a2e:	ed1f 4a8d 	vldr	s8, [pc, #-564]	; 80137fc <kalman_3gyro.constprop.0+0x37f0>
 8013a32:	ed5f 5a8d 	vldr	s11, [pc, #-564]	; 8013800 <kalman_3gyro.constprop.0+0x37f4>
 8013a36:	ed1f 6a8d 	vldr	s12, [pc, #-564]	; 8013804 <kalman_3gyro.constprop.0+0x37f8>
 8013a3a:	ed5f 6a8d 	vldr	s13, [pc, #-564]	; 8013808 <kalman_3gyro.constprop.0+0x37fc>
 8013a3e:	ed5f 4a8d 	vldr	s9, [pc, #-564]	; 801380c <kalman_3gyro.constprop.0+0x3800>
 8013a42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013a4a:	ee27 5a85 	vmul.f32	s10, s15, s10
 8013a4e:	2500      	movs	r5, #0
 8013a50:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8013a54:	ee27 6a86 	vmul.f32	s12, s15, s12
 8013a58:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8013a5c:	ee27 8a89 	vmul.f32	s16, s15, s18
 8013a60:	ee67 0a80 	vmul.f32	s1, s15, s0
 8013a64:	ee67 1aa1 	vmul.f32	s3, s15, s3
 8013a68:	ee27 2a82 	vmul.f32	s4, s15, s4
 8013a6c:	ee67 2aa2 	vmul.f32	s5, s15, s5
 8013a70:	ee27 3a83 	vmul.f32	s6, s15, s6
 8013a74:	ee67 3aa3 	vmul.f32	s7, s15, s7
 8013a78:	ee27 4a84 	vmul.f32	s8, s15, s8
 8013a7c:	ed1f ea9c 	vldr	s28, [pc, #-624]	; 8013810 <kalman_3gyro.constprop.0+0x3804>
 8013a80:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8013a84:	ee67 9a81 	vmul.f32	s19, s15, s2
 8013a88:	eef6 aa08 	vmov.f32	s21, #104	; 0x3f400000  0.750
 8013a8c:	ed1f ba9f 	vldr	s22, [pc, #-636]	; 8013814 <kalman_3gyro.constprop.0+0x3808>
 8013a90:	ed5f ba9f 	vldr	s23, [pc, #-636]	; 8013818 <kalman_3gyro.constprop.0+0x380c>
 8013a94:	eeb7 ca08 	vmov.f32	s24, #120	; 0x3fc00000  1.5
 8013a98:	eef0 ca04 	vmov.f32	s25, #4	; 0x40200000  2.5
 8013a9c:	eeb0 da08 	vmov.f32	s26, #8	; 0x40400000  3.0
 8013aa0:	ed5f daa2 	vldr	s27, [pc, #-648]	; 801381c <kalman_3gyro.constprop.0+0x3810>
 8013aa4:	4bef      	ldr	r3, [pc, #956]	; (8013e64 <kalman_3gyro.constprop.0+0x3e58>)
 8013aa6:	48f0      	ldr	r0, [pc, #960]	; (8013e68 <kalman_3gyro.constprop.0+0x3e5c>)
 8013aa8:	49f0      	ldr	r1, [pc, #960]	; (8013e6c <kalman_3gyro.constprop.0+0x3e60>)
 8013aaa:	f8df a3f0 	ldr.w	sl, [pc, #1008]	; 8013e9c <kalman_3gyro.constprop.0+0x3e90>
 8013aae:	f8df 93f0 	ldr.w	r9, [pc, #1008]	; 8013ea0 <kalman_3gyro.constprop.0+0x3e94>
 8013ab2:	f8df 83f0 	ldr.w	r8, [pc, #1008]	; 8013ea4 <kalman_3gyro.constprop.0+0x3e98>
 8013ab6:	f8df e3f0 	ldr.w	lr, [pc, #1008]	; 8013ea8 <kalman_3gyro.constprop.0+0x3e9c>
 8013aba:	f8df c3f0 	ldr.w	ip, [pc, #1008]	; 8013eac <kalman_3gyro.constprop.0+0x3ea0>
 8013abe:	4fec      	ldr	r7, [pc, #944]	; (8013e70 <kalman_3gyro.constprop.0+0x3e64>)
 8013ac0:	4eec      	ldr	r6, [pc, #944]	; (8013e74 <kalman_3gyro.constprop.0+0x3e68>)
 8013ac2:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8013ac6:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8013aca:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8013ace:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8013ad2:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8013ad6:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8013ada:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8013ade:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8013ae2:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8013ae6:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 8013aea:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 8013aee:	edcb 1a34 	vstr	s3, [fp, #208]	; 0xd0
 8013af2:	ed8b 2a4e 	vstr	s4, [fp, #312]	; 0x138
 8013af6:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 8013afa:	edcb 2a50 	vstr	s5, [fp, #320]	; 0x140
 8013afe:	ed8b 3a38 	vstr	s6, [fp, #224]	; 0xe0
 8013b02:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 8013b06:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 8013b0a:	ed8b ea35 	vstr	s28, [fp, #212]	; 0xd4
 8013b0e:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 8013b12:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 8013b16:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 8013b1a:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 8013b1e:	f8cb 50c0 	str.w	r5, [fp, #192]	; 0xc0
 8013b22:	f8cb 5128 	str.w	r5, [fp, #296]	; 0x128
 8013b26:	f8cb a13c 	str.w	sl, [fp, #316]	; 0x13c
 8013b2a:	f8cb 00dc 	str.w	r0, [fp, #220]	; 0xdc
 8013b2e:	f8cb 00e4 	str.w	r0, [fp, #228]	; 0xe4
 8013b32:	f8cb 9144 	str.w	r9, [fp, #324]	; 0x144
 8013b36:	f8cb 814c 	str.w	r8, [fp, #332]	; 0x14c
 8013b3a:	f8cb e0ec 	str.w	lr, [fp, #236]	; 0xec
 8013b3e:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 8013b42:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 8013b46:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 8013b4a:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 8013b4e:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 8013b52:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 8013b56:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 8013b5a:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 8013b5e:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 8013b62:	ed8b 9a3d 	vstr	s18, [fp, #244]	; 0xf4
 8013b66:	ed8b 8a42 	vstr	s16, [fp, #264]	; 0x108
 8013b6a:	ed8b 8a5c 	vstr	s16, [fp, #368]	; 0x170
 8013b6e:	ed8b 0a66 	vstr	s0, [fp, #408]	; 0x198
 8013b72:	edcb 0a44 	vstr	s1, [fp, #272]	; 0x110
 8013b76:	edcb 0a5e 	vstr	s1, [fp, #376]	; 0x178
 8013b7a:	ed8b 1a65 	vstr	s2, [fp, #404]	; 0x194
 8013b7e:	edcb 9a46 	vstr	s19, [fp, #280]	; 0x118
 8013b82:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 8013b86:	edcb aa41 	vstr	s21, [fp, #260]	; 0x104
 8013b8a:	ed8b ba5b 	vstr	s22, [fp, #364]	; 0x16c
 8013b8e:	edcb ba5d 	vstr	s23, [fp, #372]	; 0x174
 8013b92:	ed8b ca45 	vstr	s24, [fp, #276]	; 0x114
 8013b96:	edcb ca61 	vstr	s25, [fp, #388]	; 0x184
 8013b9a:	ed8b da63 	vstr	s26, [fp, #396]	; 0x18c
 8013b9e:	edcb da67 	vstr	s27, [fp, #412]	; 0x19c
 8013ba2:	f8cb 1154 	str.w	r1, [fp, #340]	; 0x154
 8013ba6:	f8cb 110c 	str.w	r1, [fp, #268]	; 0x10c
 8013baa:	f8cb c15c 	str.w	ip, [fp, #348]	; 0x15c
 8013bae:	f8cb 70fc 	str.w	r7, [fp, #252]	; 0xfc
 8013bb2:	f8cb 6164 	str.w	r6, [fp, #356]	; 0x164
 8013bb6:	f8cb 217c 	str.w	r2, [fp, #380]	; 0x17c
 8013bba:	f8cb 211c 	str.w	r2, [fp, #284]	; 0x11c
 8013bbe:	f8cb 2124 	str.w	r2, [fp, #292]	; 0x124
 8013bc2:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 8013bc6:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8013bca:	b973      	cbnz	r3, 8013bea <kalman_3gyro.constprop.0+0x3bde>
 8013bcc:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 8013bd0:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 8013bd4:	6811      	ldr	r1, [r2, #0]
 8013bd6:	681a      	ldr	r2, [r3, #0]
 8013bd8:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 8013be2:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 8013be6:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 8013bea:	2300      	movs	r3, #0
 8013bec:	f88b 3001 	strb.w	r3, [fp, #1]
 8013bf0:	f7fc bb16 	b.w	8010220 <kalman_3gyro.constprop.0+0x214>
 8013bf4:	ed9b ca4b 	vldr	s24, [fp, #300]	; 0x12c
 8013bf8:	eddd 5a0d 	vldr	s11, [sp, #52]	; 0x34
 8013bfc:	ed9d 5a01 	vldr	s10, [sp, #4]
 8013c00:	ee65 5a85 	vmul.f32	s11, s11, s10
 8013c04:	ee2a aa0c 	vmul.f32	s20, s20, s24
 8013c08:	edcd 5a0d 	vstr	s11, [sp, #52]	; 0x34
 8013c0c:	f7fd be08 	b.w	8011820 <kalman_3gyro.constprop.0+0x1814>
 8013c10:	eddf 7a99 	vldr	s15, [pc, #612]	; 8013e78 <kalman_3gyro.constprop.0+0x3e6c>
 8013c14:	f7fc bb68 	b.w	80102e8 <kalman_3gyro.constprop.0+0x2dc>
 8013c18:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8013c1c:	f7fd be28 	b.w	8011870 <kalman_3gyro.constprop.0+0x1864>
 8013c20:	ed9f 6a96 	vldr	s12, [pc, #600]	; 8013e7c <kalman_3gyro.constprop.0+0x3e70>
 8013c24:	ed9f 5a96 	vldr	s10, [pc, #600]	; 8013e80 <kalman_3gyro.constprop.0+0x3e74>
 8013c28:	eddf 5a96 	vldr	s11, [pc, #600]	; 8013e84 <kalman_3gyro.constprop.0+0x3e78>
 8013c2c:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8013e88 <kalman_3gyro.constprop.0+0x3e7c>
 8013c30:	ed9f 9a96 	vldr	s18, [pc, #600]	; 8013e8c <kalman_3gyro.constprop.0+0x3e80>
 8013c34:	ee68 8a89 	vmul.f32	s17, s17, s18
 8013c38:	f7fe b86e 	b.w	8011d18 <kalman_3gyro.constprop.0+0x1d0c>
 8013c3c:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 8013c40:	2a00      	cmp	r2, #0
 8013c42:	f340 8159 	ble.w	8013ef8 <kalman_3gyro.constprop.0+0x3eec>
 8013c46:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 8013c4a:	ed9d 7a1d 	vldr	s14, [sp, #116]	; 0x74
 8013c4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c56:	f340 814f 	ble.w	8013ef8 <kalman_3gyro.constprop.0+0x3eec>
 8013c5a:	3a01      	subs	r2, #1
 8013c5c:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 8013c60:	f7fe b954 	b.w	8011f0c <kalman_3gyro.constprop.0+0x1f00>
 8013c64:	eeb0 aa69 	vmov.f32	s20, s19
 8013c68:	eeb0 ba69 	vmov.f32	s22, s19
 8013c6c:	f7ff b9a5 	b.w	8012fba <kalman_3gyro.constprop.0+0x2fae>
 8013c70:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013c74:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8013c78:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013c7c:	eef1 6ae7 	vsqrt.f32	s13, s15
 8013c80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013c84:	e6ae      	b.n	80139e4 <kalman_3gyro.constprop.0+0x39d8>
 8013c86:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
 8013c8a:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
 8013c8e:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
 8013c92:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 8013c96:	f7fe b8d6 	b.w	8011e46 <kalman_3gyro.constprop.0+0x1e3a>
 8013c9a:	eddb 5a49 	vldr	s11, [fp, #292]	; 0x124
 8013c9e:	edcd 5a01 	vstr	s11, [sp, #4]
 8013ca2:	f7fd bb9d 	b.w	80113e0 <kalman_3gyro.constprop.0+0x13d4>
 8013ca6:	ed9b ca63 	vldr	s24, [fp, #396]	; 0x18c
 8013caa:	e7a5      	b.n	8013bf8 <kalman_3gyro.constprop.0+0x3bec>
 8013cac:	ee78 7a67 	vsub.f32	s15, s16, s15
 8013cb0:	ee17 0a90 	vmov	r0, s15
 8013cb4:	f7ec fc4c 	bl	8000550 <__aeabi_f2d>
 8013cb8:	ec41 0b10 	vmov	d0, r0, r1
 8013cbc:	f004 fec0 	bl	8018a40 <ceil>
 8013cc0:	ec51 0b10 	vmov	r0, r1, d0
 8013cc4:	f7ec ff4c 	bl	8000b60 <__aeabi_d2f>
 8013cc8:	ee08 0a10 	vmov	s16, r0
 8013ccc:	f7fc bd47 	b.w	801075e <kalman_3gyro.constprop.0+0x752>
 8013cd0:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8013cd4:	ee17 0a90 	vmov	r0, s15
 8013cd8:	f7ec fc3a 	bl	8000550 <__aeabi_f2d>
 8013cdc:	ec41 0b10 	vmov	d0, r0, r1
 8013ce0:	f004 feae 	bl	8018a40 <ceil>
 8013ce4:	ec51 0b10 	vmov	r0, r1, d0
 8013ce8:	f7ec ff3a 	bl	8000b60 <__aeabi_d2f>
 8013cec:	ee0d 0a90 	vmov	s27, r0
 8013cf0:	f7fc bd58 	b.w	80107a4 <kalman_3gyro.constprop.0+0x798>
 8013cf4:	ee7c 7a67 	vsub.f32	s15, s24, s15
 8013cf8:	ee17 0a90 	vmov	r0, s15
 8013cfc:	f7ec fc28 	bl	8000550 <__aeabi_f2d>
 8013d00:	ec41 0b10 	vmov	d0, r0, r1
 8013d04:	f004 fe9c 	bl	8018a40 <ceil>
 8013d08:	ec51 0b10 	vmov	r0, r1, d0
 8013d0c:	f7ec ff28 	bl	8000b60 <__aeabi_d2f>
 8013d10:	ee0c 0a10 	vmov	s24, r0
 8013d14:	f7fc bdac 	b.w	8010870 <kalman_3gyro.constprop.0+0x864>
 8013d18:	ee7b 7ae7 	vsub.f32	s15, s23, s15
 8013d1c:	ee17 0a90 	vmov	r0, s15
 8013d20:	f7ec fc16 	bl	8000550 <__aeabi_f2d>
 8013d24:	ec41 0b10 	vmov	d0, r0, r1
 8013d28:	f004 fe8a 	bl	8018a40 <ceil>
 8013d2c:	ec51 0b10 	vmov	r0, r1, d0
 8013d30:	f7ec ff16 	bl	8000b60 <__aeabi_d2f>
 8013d34:	ee0b 0a90 	vmov	s23, r0
 8013d38:	f7fc bdbd 	b.w	80108b6 <kalman_3gyro.constprop.0+0x8aa>
 8013d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d40:	f6fd aeb2 	blt.w	8011aa8 <kalman_3gyro.constprop.0+0x1a9c>
 8013d44:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8013e84 <kalman_3gyro.constprop.0+0x3e78>
 8013d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d50:	f140 81fc 	bpl.w	801414c <kalman_3gyro.constprop.0+0x4140>
 8013d54:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8013e90 <kalman_3gyro.constprop.0+0x3e84>
 8013d58:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8013e94 <kalman_3gyro.constprop.0+0x3e88>
 8013d5c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013d60:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 8013e98 <kalman_3gyro.constprop.0+0x3e8c>
 8013d64:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013d68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013d6c:	eea6 7a86 	vfma.f32	s14, s13, s12
 8013d70:	f7fd bea4 	b.w	8011abc <kalman_3gyro.constprop.0+0x1ab0>
 8013d74:	ee7c 7a67 	vsub.f32	s15, s24, s15
 8013d78:	ee17 0a90 	vmov	r0, s15
 8013d7c:	f7ec fbe8 	bl	8000550 <__aeabi_f2d>
 8013d80:	ec41 0b10 	vmov	d0, r0, r1
 8013d84:	f004 fe5c 	bl	8018a40 <ceil>
 8013d88:	ec51 0b10 	vmov	r0, r1, d0
 8013d8c:	f7ec fee8 	bl	8000b60 <__aeabi_d2f>
 8013d90:	ee0c 0a10 	vmov	s24, r0
 8013d94:	f7fc bcc0 	b.w	8010718 <kalman_3gyro.constprop.0+0x70c>
 8013d98:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013d9c:	ee7e 7a46 	vsub.f32	s15, s28, s12
 8013da0:	eeb0 7ae7 	vabs.f32	s14, s15
 8013da4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013da8:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013dac:	fec7 6a26 	vmaxnm.f32	s13, s14, s13
 8013db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013db4:	edcd 6a77 	vstr	s13, [sp, #476]	; 0x1dc
 8013db8:	f77e a879 	ble.w	8011eae <kalman_3gyro.constprop.0+0x1ea2>
 8013dbc:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 8013dc0:	ee67 6a07 	vmul.f32	s13, s14, s14
 8013dc4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dcc:	f77e a86f 	ble.w	8011eae <kalman_3gyro.constprop.0+0x1ea2>
 8013dd0:	ed9d 6a71 	vldr	s12, [sp, #452]	; 0x1c4
 8013dd4:	eddd 6a72 	vldr	s13, [sp, #456]	; 0x1c8
 8013dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013ddc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013de4:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 8013de8:	ed8d 6a71 	vstr	s12, [sp, #452]	; 0x1c4
 8013dec:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 8013df0:	f7fe b85d 	b.w	8011eae <kalman_3gyro.constprop.0+0x1ea2>
 8013df4:	f89d 20a0 	ldrb.w	r2, [sp, #160]	; 0xa0
 8013df8:	2a01      	cmp	r2, #1
 8013dfa:	d002      	beq.n	8013e02 <kalman_3gyro.constprop.0+0x3df6>
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	f47e a83c 	bne.w	8011e7a <kalman_3gyro.constprop.0+0x1e6e>
 8013e02:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 8013e06:	fe87 4a84 	vmaxnm.f32	s8, s15, s8
 8013e0a:	ed8d 4a6d 	vstr	s8, [sp, #436]	; 0x1b4
 8013e0e:	ed8d 4a6e 	vstr	s8, [sp, #440]	; 0x1b8
 8013e12:	ed8d 4a6f 	vstr	s8, [sp, #444]	; 0x1bc
 8013e16:	f7fe b830 	b.w	8011e7a <kalman_3gyro.constprop.0+0x1e6e>
 8013e1a:	ee78 7a67 	vsub.f32	s15, s16, s15
 8013e1e:	ee17 0a90 	vmov	r0, s15
 8013e22:	f7ec fb95 	bl	8000550 <__aeabi_f2d>
 8013e26:	ec41 0b10 	vmov	d0, r0, r1
 8013e2a:	f004 fe09 	bl	8018a40 <ceil>
 8013e2e:	ec51 0b10 	vmov	r0, r1, d0
 8013e32:	f7ec fe95 	bl	8000b60 <__aeabi_d2f>
 8013e36:	ee08 0a10 	vmov	s16, r0
 8013e3a:	f7fc bd5f 	b.w	80108fc <kalman_3gyro.constprop.0+0x8f0>
 8013e3e:	ee7b 7ae7 	vsub.f32	s15, s23, s15
 8013e42:	ee17 0a90 	vmov	r0, s15
 8013e46:	f7ec fb83 	bl	8000550 <__aeabi_f2d>
 8013e4a:	ec41 0b10 	vmov	d0, r0, r1
 8013e4e:	f004 fdf7 	bl	8018a40 <ceil>
 8013e52:	ec51 0b10 	vmov	r0, r1, d0
 8013e56:	f7ec fe83 	bl	8000b60 <__aeabi_d2f>
 8013e5a:	ee0b 0a90 	vmov	s23, r0
 8013e5e:	f7fc bdd5 	b.w	8010a0c <kalman_3gyro.constprop.0+0xa00>
 8013e62:	bf00      	nop
 8013e64:	40a00000 	.word	0x40a00000
 8013e68:	3eb33333 	.word	0x3eb33333
 8013e6c:	3f99999a 	.word	0x3f99999a
 8013e70:	3f19999a 	.word	0x3f19999a
 8013e74:	3fb9999a 	.word	0x3fb9999a
 8013e78:	bf666666 	.word	0xbf666666
 8013e7c:	391d4951 	.word	0x391d4951
 8013e80:	383cbe62 	.word	0x383cbe62
 8013e84:	3c75c28f 	.word	0x3c75c28f
 8013e88:	469c3e00 	.word	0x469c3e00
 8013e8c:	43168000 	.word	0x43168000
 8013e90:	3c23d70a 	.word	0x3c23d70a
 8013e94:	3f19999a 	.word	0x3f19999a
 8013e98:	43480000 	.word	0x43480000
 8013e9c:	3f866666 	.word	0x3f866666
 8013ea0:	3f8ccccd 	.word	0x3f8ccccd
 8013ea4:	3f933333 	.word	0x3f933333
 8013ea8:	3ebd70a4 	.word	0x3ebd70a4
 8013eac:	3fa66666 	.word	0x3fa66666
 8013eb0:	ee78 7a67 	vsub.f32	s15, s16, s15
 8013eb4:	ee17 0a90 	vmov	r0, s15
 8013eb8:	f7ec fb4a 	bl	8000550 <__aeabi_f2d>
 8013ebc:	ec41 0b10 	vmov	d0, r0, r1
 8013ec0:	f004 fdbe 	bl	8018a40 <ceil>
 8013ec4:	ec51 0b10 	vmov	r0, r1, d0
 8013ec8:	f7ec fe4a 	bl	8000b60 <__aeabi_d2f>
 8013ecc:	ee08 0a10 	vmov	s16, r0
 8013ed0:	f7fc bdbf 	b.w	8010a52 <kalman_3gyro.constprop.0+0xa46>
 8013ed4:	ee7c 7a67 	vsub.f32	s15, s24, s15
 8013ed8:	ee17 0a90 	vmov	r0, s15
 8013edc:	f7ec fb38 	bl	8000550 <__aeabi_f2d>
 8013ee0:	ec41 0b10 	vmov	d0, r0, r1
 8013ee4:	f004 fdac 	bl	8018a40 <ceil>
 8013ee8:	ec51 0b10 	vmov	r0, r1, d0
 8013eec:	f7ec fe38 	bl	8000b60 <__aeabi_d2f>
 8013ef0:	ee0c 0a10 	vmov	s24, r0
 8013ef4:	f7fc bd67 	b.w	80109c6 <kalman_3gyro.constprop.0+0x9ba>
 8013ef8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013efc:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 8013f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013f04:	eeb4 7aea 	vcmpe.f32	s14, s21
 8013f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f0c:	f77d affe 	ble.w	8011f0c <kalman_3gyro.constprop.0+0x1f00>
 8013f10:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 8013f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f18:	eef4 7acb 	vcmpe.f32	s15, s22
 8013f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f20:	f77d aff4 	ble.w	8011f0c <kalman_3gyro.constprop.0+0x1f00>
 8013f24:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8013f28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013f2c:	eef4 7acf 	vcmpe.f32	s15, s30
 8013f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f34:	f140 8703 	bpl.w	8014d3e <kalman_3gyro.constprop.0+0x4d32>
 8013f38:	2200      	movs	r2, #0
 8013f3a:	3303      	adds	r3, #3
 8013f3c:	f7ff ba3b 	b.w	80133b6 <kalman_3gyro.constprop.0+0x33aa>
 8013f40:	460b      	mov	r3, r1
 8013f42:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 8013f46:	f8db 01bc 	ldr.w	r0, [fp, #444]	; 0x1bc
 8013f4a:	9280      	str	r2, [sp, #512]	; 0x200
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8013f52:	907f      	str	r0, [sp, #508]	; 0x1fc
 8013f54:	9181      	str	r1, [sp, #516]	; 0x204
 8013f56:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8013f5a:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8013f5e:	f7fe ba98 	b.w	8012492 <kalman_3gyro.constprop.0+0x2486>
 8013f62:	a934      	add	r1, sp, #208	; 0xd0
 8013f64:	a852      	add	r0, sp, #328	; 0x148
 8013f66:	f7fb f86f 	bl	800f048 <b_dcm2q>
 8013f6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8013f6e:	4619      	mov	r1, r3
 8013f70:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 8013f74:	ed8b 9a72 	vstr	s18, [fp, #456]	; 0x1c8
 8013f78:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8013f7c:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8013f80:	f006 fc3b 	bl	801a7fa <memset>
 8013f84:	4bda      	ldr	r3, [pc, #872]	; (80142f0 <kalman_3gyro.constprop.0+0x42e4>)
 8013f86:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8013f8a:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8013f8e:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8013f92:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8013f96:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8013f9a:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8013f9e:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8013fa2:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8013fa6:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8013faa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013fac:	781a      	ldrb	r2, [r3, #0]
 8013fae:	ee07 2a90 	vmov	s15, r2
 8013fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013fb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fbe:	f040 84bf 	bne.w	8014940 <kalman_3gyro.constprop.0+0x4934>
 8013fc2:	eef0 3a49 	vmov.f32	s7, s18
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013fcc:	eddb ea02 	vldr	s29, [fp, #8]
 8013fd0:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	f88b 2000 	strb.w	r2, [fp]
 8013fda:	f7fd bc5c 	b.w	8011896 <kalman_3gyro.constprop.0+0x188a>
 8013fde:	eddb 5a4e 	vldr	s11, [fp, #312]	; 0x138
 8013fe2:	eef4 5ac8 	vcmpe.f32	s11, s16
 8013fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fea:	f340 85c7 	ble.w	8014b7c <kalman_3gyro.constprop.0+0x4b70>
 8013fee:	eddb 3a4d 	vldr	s7, [fp, #308]	; 0x134
 8013ff2:	ed9b 4a4f 	vldr	s8, [fp, #316]	; 0x13c
 8013ff6:	ee38 3a64 	vsub.f32	s6, s16, s9
 8013ffa:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013ffe:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8014002:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014006:	ee84 caa5 	vdiv.f32	s24, s9, s11
 801400a:	ee3c ca23 	vadd.f32	s24, s24, s7
 801400e:	eddb 5a50 	vldr	s11, [fp, #320]	; 0x140
 8014012:	eef4 5ac8 	vcmpe.f32	s11, s16
 8014016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801401a:	f63d aa29 	bhi.w	8011470 <kalman_3gyro.constprop.0+0x1464>
 801401e:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 8014022:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801402a:	f340 849d 	ble.w	8014968 <kalman_3gyro.constprop.0+0x495c>
 801402e:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 8014032:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 8014036:	ee38 3a65 	vsub.f32	s6, s16, s11
 801403a:	ee34 4a63 	vsub.f32	s8, s8, s7
 801403e:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014042:	ee24 4a03 	vmul.f32	s8, s8, s6
 8014046:	ee84 ca25 	vdiv.f32	s24, s8, s11
 801404a:	ee3c ca23 	vadd.f32	s24, s24, s7
 801404e:	eddb 5a54 	vldr	s11, [fp, #336]	; 0x150
 8014052:	eef4 5ac8 	vcmpe.f32	s11, s16
 8014056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801405a:	f63d aa29 	bhi.w	80114b0 <kalman_3gyro.constprop.0+0x14a4>
 801405e:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 8014062:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801406a:	f340 8489 	ble.w	8014980 <kalman_3gyro.constprop.0+0x4974>
 801406e:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 8014072:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 8014076:	ee38 3a65 	vsub.f32	s6, s16, s11
 801407a:	ee34 4a63 	vsub.f32	s8, s8, s7
 801407e:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014082:	ee24 4a03 	vmul.f32	s8, s8, s6
 8014086:	ee84 ca25 	vdiv.f32	s24, s8, s11
 801408a:	ee3c ca23 	vadd.f32	s24, s24, s7
 801408e:	eddb 5a58 	vldr	s11, [fp, #352]	; 0x160
 8014092:	eef4 5ac8 	vcmpe.f32	s11, s16
 8014096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801409a:	f63d aa29 	bhi.w	80114f0 <kalman_3gyro.constprop.0+0x14e4>
 801409e:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 80140a2:	eef4 4ac8 	vcmpe.f32	s9, s16
 80140a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140aa:	f340 8471 	ble.w	8014990 <kalman_3gyro.constprop.0+0x4984>
 80140ae:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 80140b2:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 80140b6:	ee38 3a65 	vsub.f32	s6, s16, s11
 80140ba:	ee34 4a63 	vsub.f32	s8, s8, s7
 80140be:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80140c2:	ee24 4a03 	vmul.f32	s8, s8, s6
 80140c6:	ee84 ca25 	vdiv.f32	s24, s8, s11
 80140ca:	ee3c ca23 	vadd.f32	s24, s24, s7
 80140ce:	eddb 5a5c 	vldr	s11, [fp, #368]	; 0x170
 80140d2:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80140d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140da:	f6fd aa29 	blt.w	8011530 <kalman_3gyro.constprop.0+0x1524>
 80140de:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 80140e2:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80140e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ea:	f57d aa29 	bpl.w	8011540 <kalman_3gyro.constprop.0+0x1534>
 80140ee:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 80140f2:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 80140f6:	ee38 3a65 	vsub.f32	s6, s16, s11
 80140fa:	ee34 4a63 	vsub.f32	s8, s8, s7
 80140fe:	ee74 4ae5 	vsub.f32	s9, s9, s11
 8014102:	ee64 5a03 	vmul.f32	s11, s8, s6
 8014106:	ee85 caa4 	vdiv.f32	s24, s11, s9
 801410a:	ee3c ca23 	vadd.f32	s24, s24, s7
 801410e:	eddb 5a60 	vldr	s11, [fp, #384]	; 0x180
 8014112:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8014116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801411a:	f6ff ad6d 	blt.w	8013bf8 <kalman_3gyro.constprop.0+0x3bec>
 801411e:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8014122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014126:	f57f ad67 	bpl.w	8013bf8 <kalman_3gyro.constprop.0+0x3bec>
 801412a:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 801412e:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 8014132:	ee78 3a65 	vsub.f32	s7, s16, s11
 8014136:	ee74 4ac4 	vsub.f32	s9, s9, s8
 801413a:	ee75 5a65 	vsub.f32	s11, s10, s11
 801413e:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8014142:	ee85 ca25 	vdiv.f32	s24, s10, s11
 8014146:	ee3c ca04 	vadd.f32	s24, s24, s8
 801414a:	e555      	b.n	8013bf8 <kalman_3gyro.constprop.0+0x3bec>
 801414c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80142f4 <kalman_3gyro.constprop.0+0x42e8>
 8014150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014158:	f57d acb8 	bpl.w	8011acc <kalman_3gyro.constprop.0+0x1ac0>
 801415c:	eddf 6a66 	vldr	s13, [pc, #408]	; 80142f8 <kalman_3gyro.constprop.0+0x42ec>
 8014160:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80142fc <kalman_3gyro.constprop.0+0x42f0>
 8014164:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8014168:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8014300 <kalman_3gyro.constprop.0+0x42f4>
 801416c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8014170:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8014304 <kalman_3gyro.constprop.0+0x42f8>
 8014174:	eea6 7a86 	vfma.f32	s14, s13, s12
 8014178:	eddf 6a63 	vldr	s13, [pc, #396]	; 8014308 <kalman_3gyro.constprop.0+0x42fc>
 801417c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014184:	f6fd acb8 	blt.w	8011af8 <kalman_3gyro.constprop.0+0x1aec>
 8014188:	ed9f 7a60 	vldr	s14, [pc, #384]	; 801430c <kalman_3gyro.constprop.0+0x4300>
 801418c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014194:	f57d acb8 	bpl.w	8011b08 <kalman_3gyro.constprop.0+0x1afc>
 8014198:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8014308 <kalman_3gyro.constprop.0+0x42fc>
 801419c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80141a0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80141a4:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 80141a8:	ee66 6a87 	vmul.f32	s13, s13, s14
 80141ac:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80141b0:	eea6 7a86 	vfma.f32	s14, s13, s12
 80141b4:	eddf 6a56 	vldr	s13, [pc, #344]	; 8014310 <kalman_3gyro.constprop.0+0x4304>
 80141b8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80141bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141c0:	f6fd acb8 	blt.w	8011b34 <kalman_3gyro.constprop.0+0x1b28>
 80141c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80141c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80141cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141d0:	f57d acb7 	bpl.w	8011b42 <kalman_3gyro.constprop.0+0x1b36>
 80141d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8014310 <kalman_3gyro.constprop.0+0x4304>
 80141d8:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8014314 <kalman_3gyro.constprop.0+0x4308>
 80141dc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80141e0:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 8014318 <kalman_3gyro.constprop.0+0x430c>
 80141e4:	ee66 6a87 	vmul.f32	s13, s13, s14
 80141e8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801431c <kalman_3gyro.constprop.0+0x4310>
 80141ec:	eea6 7a86 	vfma.f32	s14, s13, s12
 80141f0:	f7fd bcb5 	b.w	8011b5e <kalman_3gyro.constprop.0+0x1b52>
 80141f4:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80142f4 <kalman_3gyro.constprop.0+0x42e8>
 80141f8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80141fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014200:	f57d acef 	bpl.w	8011be2 <kalman_3gyro.constprop.0+0x1bd6>
 8014204:	eddf 4a3c 	vldr	s9, [pc, #240]	; 80142f8 <kalman_3gyro.constprop.0+0x42ec>
 8014208:	eddf 6a45 	vldr	s13, [pc, #276]	; 8014320 <kalman_3gyro.constprop.0+0x4314>
 801420c:	ee77 4ae4 	vsub.f32	s9, s15, s9
 8014210:	ed9f 4a3b 	vldr	s8, [pc, #236]	; 8014300 <kalman_3gyro.constprop.0+0x42f4>
 8014214:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8014218:	eddf 6a42 	vldr	s13, [pc, #264]	; 8014324 <kalman_3gyro.constprop.0+0x4318>
 801421c:	eee4 6a84 	vfma.f32	s13, s9, s8
 8014220:	eeb0 9a66 	vmov.f32	s18, s13
 8014224:	eddf 6a38 	vldr	s13, [pc, #224]	; 8014308 <kalman_3gyro.constprop.0+0x42fc>
 8014228:	eef4 7ae6 	vcmpe.f32	s15, s13
 801422c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014230:	f6fd acef 	blt.w	8011c12 <kalman_3gyro.constprop.0+0x1c06>
 8014234:	eddf 6a35 	vldr	s13, [pc, #212]	; 801430c <kalman_3gyro.constprop.0+0x4300>
 8014238:	eef4 7ae6 	vcmpe.f32	s15, s13
 801423c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014240:	f57d acef 	bpl.w	8011c22 <kalman_3gyro.constprop.0+0x1c16>
 8014244:	eddf 4a30 	vldr	s9, [pc, #192]	; 8014308 <kalman_3gyro.constprop.0+0x42fc>
 8014248:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 801424c:	ee77 4ae4 	vsub.f32	s9, s15, s9
 8014250:	eeb3 4a04 	vmov.f32	s8, #52	; 0x41a00000  20.0
 8014254:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8014258:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 801425c:	eee4 6a84 	vfma.f32	s13, s9, s8
 8014260:	eeb0 9a66 	vmov.f32	s18, s13
 8014264:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8014310 <kalman_3gyro.constprop.0+0x4304>
 8014268:	eef4 7ae6 	vcmpe.f32	s15, s13
 801426c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014270:	f6fd acef 	blt.w	8011c52 <kalman_3gyro.constprop.0+0x1c46>
 8014274:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014278:	eef4 7ae6 	vcmpe.f32	s15, s13
 801427c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014280:	f57d acef 	bpl.w	8011c62 <kalman_3gyro.constprop.0+0x1c56>
 8014284:	eddf 4a22 	vldr	s9, [pc, #136]	; 8014310 <kalman_3gyro.constprop.0+0x4304>
 8014288:	eddf 6a27 	vldr	s13, [pc, #156]	; 8014328 <kalman_3gyro.constprop.0+0x431c>
 801428c:	ee77 4ae4 	vsub.f32	s9, s15, s9
 8014290:	ed9f 4a21 	vldr	s8, [pc, #132]	; 8014318 <kalman_3gyro.constprop.0+0x430c>
 8014294:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8014298:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 801429c:	eee4 6a84 	vfma.f32	s13, s9, s8
 80142a0:	eeb0 9a66 	vmov.f32	s18, s13
 80142a4:	e4c6      	b.n	8013c34 <kalman_3gyro.constprop.0+0x3c28>
 80142a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142aa:	f57d ac7a 	bpl.w	8011ba2 <kalman_3gyro.constprop.0+0x1b96>
 80142ae:	eddf 6a12 	vldr	s13, [pc, #72]	; 80142f8 <kalman_3gyro.constprop.0+0x42ec>
 80142b2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80142b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ba:	da9b      	bge.n	80141f4 <kalman_3gyro.constprop.0+0x41e8>
 80142bc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80142c0:	f7fd bc87 	b.w	8011bd2 <kalman_3gyro.constprop.0+0x1bc6>
 80142c4:	9b01      	ldr	r3, [sp, #4]
 80142c6:	e63c      	b.n	8013f42 <kalman_3gyro.constprop.0+0x3f36>
 80142c8:	eddb 5a32 	vldr	s11, [fp, #200]	; 0xc8
 80142cc:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80142d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142d4:	da2e      	bge.n	8014334 <kalman_3gyro.constprop.0+0x4328>
 80142d6:	eddf 5a15 	vldr	s11, [pc, #84]	; 801432c <kalman_3gyro.constprop.0+0x4320>
 80142da:	edcd 5a01 	vstr	s11, [sp, #4]
 80142de:	eddb 5a34 	vldr	s11, [fp, #208]	; 0xd0
 80142e2:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80142e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ea:	db3d      	blt.n	8014368 <kalman_3gyro.constprop.0+0x435c>
 80142ec:	e366      	b.n	80149bc <kalman_3gyro.constprop.0+0x49b0>
 80142ee:	bf00      	nop
 80142f0:	40a00000 	.word	0x40a00000
 80142f4:	3cf5c28f 	.word	0x3cf5c28f
 80142f8:	3c75c28f 	.word	0x3c75c28f
 80142fc:	3ecccccc 	.word	0x3ecccccc
 8014300:	42855556 	.word	0x42855556
 8014304:	3fcccccd 	.word	0x3fcccccd
 8014308:	3d4ccccd 	.word	0x3d4ccccd
 801430c:	3dcccccd 	.word	0x3dcccccd
 8014310:	3e4ccccd 	.word	0x3e4ccccd
 8014314:	43f00000 	.word	0x43f00000
 8014318:	40555555 	.word	0x40555555
 801431c:	42ee0000 	.word	0x42ee0000
 8014320:	3dccccd0 	.word	0x3dccccd0
 8014324:	3f866666 	.word	0x3f866666
 8014328:	42200000 	.word	0x42200000
 801432c:	00000000 	.word	0x00000000
 8014330:	eef0 5a64 	vmov.f32	s11, s9
 8014334:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 8014338:	eeb4 8ae4 	vcmpe.f32	s16, s9
 801433c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014340:	f140 8336 	bpl.w	80149b0 <kalman_3gyro.constprop.0+0x49a4>
 8014344:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 8014348:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 801434c:	ee38 3a65 	vsub.f32	s6, s16, s11
 8014350:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014354:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014358:	ee64 4a03 	vmul.f32	s9, s8, s6
 801435c:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 8014360:	ee74 5a23 	vadd.f32	s11, s8, s7
 8014364:	edcd 5a01 	vstr	s11, [sp, #4]
 8014368:	eddb 5a36 	vldr	s11, [fp, #216]	; 0xd8
 801436c:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8014370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014374:	f2c0 833c 	blt.w	80149f0 <kalman_3gyro.constprop.0+0x49e4>
 8014378:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 801437c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8014380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014384:	f140 83ed 	bpl.w	8014b62 <kalman_3gyro.constprop.0+0x4b56>
 8014388:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 801438c:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 8014390:	ee38 3a65 	vsub.f32	s6, s16, s11
 8014394:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014398:	ee74 5ae5 	vsub.f32	s11, s9, s11
 801439c:	ee64 4a03 	vmul.f32	s9, s8, s6
 80143a0:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 80143a4:	ee74 5a23 	vadd.f32	s11, s8, s7
 80143a8:	edcd 5a01 	vstr	s11, [sp, #4]
 80143ac:	eddb 5a3a 	vldr	s11, [fp, #232]	; 0xe8
 80143b0:	eef4 5ac8 	vcmpe.f32	s11, s16
 80143b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143b8:	f200 833c 	bhi.w	8014a34 <kalman_3gyro.constprop.0+0x4a28>
 80143bc:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 80143c0:	eef4 4ac8 	vcmpe.f32	s9, s16
 80143c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143c8:	f340 83c5 	ble.w	8014b56 <kalman_3gyro.constprop.0+0x4b4a>
 80143cc:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 80143d0:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 80143d4:	ee38 3a65 	vsub.f32	s6, s16, s11
 80143d8:	ee34 4a63 	vsub.f32	s8, s8, s7
 80143dc:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80143e0:	ee64 4a03 	vmul.f32	s9, s8, s6
 80143e4:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 80143e8:	ee74 5a23 	vadd.f32	s11, s8, s7
 80143ec:	edcd 5a01 	vstr	s11, [sp, #4]
 80143f0:	eddb 5a3e 	vldr	s11, [fp, #248]	; 0xf8
 80143f4:	eef4 5ac8 	vcmpe.f32	s11, s16
 80143f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143fc:	f200 833b 	bhi.w	8014a76 <kalman_3gyro.constprop.0+0x4a6a>
 8014400:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 8014404:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801440c:	f340 839d 	ble.w	8014b4a <kalman_3gyro.constprop.0+0x4b3e>
 8014410:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 8014414:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 8014418:	ee38 3a65 	vsub.f32	s6, s16, s11
 801441c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014420:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014424:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014428:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 801442c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8014430:	edcd 5a01 	vstr	s11, [sp, #4]
 8014434:	eddb 5a42 	vldr	s11, [fp, #264]	; 0x108
 8014438:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801443c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014440:	f2c0 833a 	blt.w	8014ab8 <kalman_3gyro.constprop.0+0x4aac>
 8014444:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8014448:	eeb4 8ae4 	vcmpe.f32	s16, s9
 801444c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014450:	f140 833a 	bpl.w	8014ac8 <kalman_3gyro.constprop.0+0x4abc>
 8014454:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 8014458:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 801445c:	ee38 3a65 	vsub.f32	s6, s16, s11
 8014460:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014464:	ee74 4ae5 	vsub.f32	s9, s9, s11
 8014468:	ee64 5a03 	vmul.f32	s11, s8, s6
 801446c:	ee85 4aa4 	vdiv.f32	s8, s11, s9
 8014470:	ee74 5a23 	vadd.f32	s11, s8, s7
 8014474:	edcd 5a01 	vstr	s11, [sp, #4]
 8014478:	eddb 5a46 	vldr	s11, [fp, #280]	; 0x118
 801447c:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8014480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014484:	f6fc afac 	blt.w	80113e0 <kalman_3gyro.constprop.0+0x13d4>
 8014488:	eeb4 8ac5 	vcmpe.f32	s16, s10
 801448c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014490:	f57c afa6 	bpl.w	80113e0 <kalman_3gyro.constprop.0+0x13d4>
 8014494:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 8014498:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 801449c:	ee78 3a65 	vsub.f32	s7, s16, s11
 80144a0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80144a4:	ee75 5a65 	vsub.f32	s11, s10, s11
 80144a8:	ee24 5aa3 	vmul.f32	s10, s9, s7
 80144ac:	eec5 4a25 	vdiv.f32	s9, s10, s11
 80144b0:	ee74 5a84 	vadd.f32	s11, s9, s8
 80144b4:	edcd 5a01 	vstr	s11, [sp, #4]
 80144b8:	f7fc bf92 	b.w	80113e0 <kalman_3gyro.constprop.0+0x13d4>
 80144bc:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80144c0:	eef4 7acf 	vcmpe.f32	s15, s30
 80144c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144c8:	dd2c      	ble.n	8014524 <kalman_3gyro.constprop.0+0x4518>
 80144ca:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 80144ce:	eef4 7aea 	vcmpe.f32	s15, s21
 80144d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144d6:	dd25      	ble.n	8014524 <kalman_3gyro.constprop.0+0x4518>
 80144d8:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 80144dc:	eef4 7acb 	vcmpe.f32	s15, s22
 80144e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e4:	dd1e      	ble.n	8014524 <kalman_3gyro.constprop.0+0x4518>
 80144e6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80144ea:	eddd 5a1e 	vldr	s11, [sp, #120]	; 0x78
 80144ee:	eef4 5ae7 	vcmpe.f32	s11, s15
 80144f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144f6:	d515      	bpl.n	8014524 <kalman_3gyro.constprop.0+0x4518>
 80144f8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80144fc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014500:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801450c:	d50a      	bpl.n	8014524 <kalman_3gyro.constprop.0+0x4518>
 801450e:	2300      	movs	r3, #0
 8014510:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014514:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8014518:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801451c:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8014520:	f7fd bf22 	b.w	8012368 <kalman_3gyro.constprop.0+0x235c>
 8014524:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 8014528:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801452c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014530:	dd0b      	ble.n	801454a <kalman_3gyro.constprop.0+0x453e>
 8014532:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8014536:	eef4 7ac7 	vcmpe.f32	s15, s14
 801453a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801453e:	f100 8421 	bmi.w	8014d84 <kalman_3gyro.constprop.0+0x4d78>
 8014542:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8014546:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801454a:	2300      	movs	r3, #0
 801454c:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8014550:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8014554:	f7fd bf08 	b.w	8012368 <kalman_3gyro.constprop.0+0x235c>
 8014558:	2301      	movs	r3, #1
 801455a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801455e:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 8014562:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 8014566:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 801456a:	edd2 5a00 	vldr	s11, [r2]
 801456e:	ed93 7a00 	vldr	s14, [r3]
 8014572:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 8014576:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 801457a:	ed92 5a00 	vldr	s10, [r2]
 801457e:	edd3 6a00 	vldr	s13, [r3]
 8014582:	ee25 4aa5 	vmul.f32	s8, s11, s11
 8014586:	ee67 4a07 	vmul.f32	s9, s14, s14
 801458a:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 801458e:	f20b 621c 	addw	r2, fp, #1564	; 0x61c
 8014592:	ed92 6a00 	vldr	s12, [r2]
 8014596:	edd3 7a00 	vldr	s15, [r3]
 801459a:	eea5 4a05 	vfma.f32	s8, s10, s10
 801459e:	eee6 4aa6 	vfma.f32	s9, s13, s13
 80145a2:	eea6 4a06 	vfma.f32	s8, s12, s12
 80145a6:	eee7 4aa7 	vfma.f32	s9, s15, s15
 80145aa:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80145ae:	eef1 2ac4 	vsqrt.f32	s5, s8
 80145b2:	eeb1 3ae4 	vsqrt.f32	s6, s9
 80145b6:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 80145ba:	eec3 4a83 	vdiv.f32	s9, s7, s6
 80145be:	ee25 5a04 	vmul.f32	s10, s10, s8
 80145c2:	ee27 7a24 	vmul.f32	s14, s14, s9
 80145c6:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80145ca:	ee65 5a84 	vmul.f32	s11, s11, s8
 80145ce:	ee26 6a04 	vmul.f32	s12, s12, s8
 80145d2:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80145d6:	ad64      	add	r5, sp, #400	; 0x190
 80145d8:	462f      	mov	r7, r5
 80145da:	aa5b      	add	r2, sp, #364	; 0x16c
 80145dc:	a92b      	add	r1, sp, #172	; 0xac
 80145de:	a831      	add	r0, sp, #196	; 0xc4
 80145e0:	ae5b      	add	r6, sp, #364	; 0x16c
 80145e2:	ed8d 7a32 	vstr	s14, [sp, #200]	; 0xc8
 80145e6:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
 80145ea:	ed8d 5a2b 	vstr	s10, [sp, #172]	; 0xac
 80145ee:	edcd 5a2c 	vstr	s11, [sp, #176]	; 0xb0
 80145f2:	ed8d 6a2d 	vstr	s12, [sp, #180]	; 0xb4
 80145f6:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 80145fa:	f7fa fc85 	bl	800ef08 <getRotationMatrix>
 80145fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014602:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014606:	6836      	ldr	r6, [r6, #0]
 8014608:	f20d 44cc 	addw	r4, sp, #1228	; 0x4cc
 801460c:	602e      	str	r6, [r5, #0]
 801460e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014612:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014616:	eddd 7a64 	vldr	s15, [sp, #400]	; 0x190
 801461a:	ed9d 7a65 	vldr	s14, [sp, #404]	; 0x194
 801461e:	eef0 7ae7 	vabs.f32	s15, s15
 8014622:	eeb0 7ac7 	vabs.f32	s14, s14
 8014626:	eef4 7ac7 	vcmpe.f32	s15, s14
 801462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801462e:	6026      	str	r6, [r4, #0]
 8014630:	f100 81b2 	bmi.w	8014998 <kalman_3gyro.constprop.0+0x498c>
 8014634:	2604      	movs	r6, #4
 8014636:	2300      	movs	r3, #0
 8014638:	2403      	movs	r4, #3
 801463a:	4632      	mov	r2, r6
 801463c:	2006      	movs	r0, #6
 801463e:	2707      	movs	r7, #7
 8014640:	f04f 0c01 	mov.w	ip, #1
 8014644:	9302      	str	r3, [sp, #8]
 8014646:	ed9d 7a66 	vldr	s14, [sp, #408]	; 0x198
 801464a:	eeb0 7ac7 	vabs.f32	s14, s14
 801464e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014656:	f340 8271 	ble.w	8014b3c <kalman_3gyro.constprop.0+0x4b30>
 801465a:	2306      	movs	r3, #6
 801465c:	2604      	movs	r6, #4
 801465e:	2008      	movs	r0, #8
 8014660:	9303      	str	r3, [sp, #12]
 8014662:	2302      	movs	r3, #2
 8014664:	4632      	mov	r2, r6
 8014666:	2707      	movs	r7, #7
 8014668:	2405      	movs	r4, #5
 801466a:	f04f 0e00 	mov.w	lr, #0
 801466e:	f04f 0c01 	mov.w	ip, #1
 8014672:	9007      	str	r0, [sp, #28]
 8014674:	9302      	str	r3, [sp, #8]
 8014676:	ab64      	add	r3, sp, #400	; 0x190
 8014678:	441a      	add	r2, r3
 801467a:	9b07      	ldr	r3, [sp, #28]
 801467c:	a964      	add	r1, sp, #400	; 0x190
 801467e:	440b      	add	r3, r1
 8014680:	edd2 6a00 	vldr	s13, [r2]
 8014684:	ed93 7a00 	vldr	s14, [r3]
 8014688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801468c:	f20d 43cc 	addw	r3, sp, #1228	; 0x4cc
 8014690:	461d      	mov	r5, r3
 8014692:	eb03 028c 	add.w	r2, r3, ip, lsl #2
 8014696:	edc2 7a00 	vstr	s15, [r2]
 801469a:	eb03 018e 	add.w	r1, r3, lr, lsl #2
 801469e:	9b02      	ldr	r3, [sp, #8]
 80146a0:	ed91 7a00 	vldr	s14, [r1]
 80146a4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80146a8:	edd3 7a00 	vldr	s15, [r3]
 80146ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80146b0:	edc1 6a00 	vstr	s13, [r1]
 80146b4:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 80146b8:	eb05 0184 	add.w	r1, r5, r4, lsl #2
 80146bc:	ed92 6a00 	vldr	s12, [r2]
 80146c0:	ed91 7a00 	vldr	s14, [r1]
 80146c4:	edd3 7a00 	vldr	s15, [r3]
 80146c8:	eee6 7a47 	vfms.f32	s15, s12, s14
 80146cc:	edc3 7a00 	vstr	s15, [r3]
 80146d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80146d2:	ed91 7a00 	vldr	s14, [r1]
 80146d6:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80146da:	edd2 7a00 	vldr	s15, [r2]
 80146de:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80146e2:	edc2 7a00 	vstr	s15, [r2]
 80146e6:	eb05 0180 	add.w	r1, r5, r0, lsl #2
 80146ea:	eb05 0287 	add.w	r2, r5, r7, lsl #2
 80146ee:	edd1 5a00 	vldr	s11, [r1]
 80146f2:	ed92 7a00 	vldr	s14, [r2]
 80146f6:	eea6 7a65 	vfms.f32	s14, s12, s11
 80146fa:	ed82 7a00 	vstr	s14, [r2]
 80146fe:	9a03      	ldr	r2, [sp, #12]
 8014700:	ed91 6a00 	vldr	s12, [r1]
 8014704:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8014708:	ed92 7a00 	vldr	s14, [r2]
 801470c:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8014710:	ed82 7a00 	vstr	s14, [r2]
 8014714:	ed93 7a00 	vldr	s14, [r3]
 8014718:	eef0 7ae7 	vabs.f32	s15, s15
 801471c:	eeb0 7ac7 	vabs.f32	s14, s14
 8014720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801472a:	ea4f 0184 	mov.w	r1, r4, lsl #2
 801472e:	9106      	str	r1, [sp, #24]
 8014730:	9c02      	ldr	r4, [sp, #8]
 8014732:	ea4f 0182 	mov.w	r1, r2, lsl #2
 8014736:	ea4f 0280 	mov.w	r2, r0, lsl #2
 801473a:	9207      	str	r2, [sp, #28]
 801473c:	9a03      	ldr	r2, [sp, #12]
 801473e:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8014742:	9403      	str	r4, [sp, #12]
 8014744:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8014748:	ea4f 008c 	mov.w	r0, ip, lsl #2
 801474c:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8014750:	ea4f 0586 	mov.w	r5, r6, lsl #2
 8014754:	ea4f 0487 	mov.w	r4, r7, lsl #2
 8014758:	dd09      	ble.n	801476e <kalman_3gyro.constprop.0+0x4762>
 801475a:	4663      	mov	r3, ip
 801475c:	46f4      	mov	ip, lr
 801475e:	460d      	mov	r5, r1
 8014760:	469e      	mov	lr, r3
 8014762:	4614      	mov	r4, r2
 8014764:	4603      	mov	r3, r0
 8014766:	00b1      	lsls	r1, r6, #2
 8014768:	00ba      	lsls	r2, r7, #2
 801476a:	ea4f 008c 	mov.w	r0, ip, lsl #2
 801476e:	f20d 46cc 	addw	r6, sp, #1228	; 0x4cc
 8014772:	4431      	add	r1, r6
 8014774:	1975      	adds	r5, r6, r5
 8014776:	ed91 7a00 	vldr	s14, [r1]
 801477a:	edd5 7a00 	vldr	s15, [r5]
 801477e:	eec7 2a27 	vdiv.f32	s5, s14, s15
 8014782:	edc1 2a00 	vstr	s5, [r1]
 8014786:	4631      	mov	r1, r6
 8014788:	4432      	add	r2, r6
 801478a:	4421      	add	r1, r4
 801478c:	edd1 7a00 	vldr	s15, [r1]
 8014790:	ed92 2a00 	vldr	s4, [r2]
 8014794:	eea2 2ae7 	vfms.f32	s4, s5, s15
 8014798:	ed82 2a00 	vstr	s4, [r2]
 801479c:	f50d 62f8 	add.w	r2, sp, #1984	; 0x7c0
 80147a0:	4616      	mov	r6, r2
 80147a2:	9105      	str	r1, [sp, #20]
 80147a4:	1811      	adds	r1, r2, r0
 80147a6:	9a03      	ldr	r2, [sp, #12]
 80147a8:	18f7      	adds	r7, r6, r3
 80147aa:	18b2      	adds	r2, r6, r2
 80147ac:	f20d 46cc 	addw	r6, sp, #1228	; 0x4cc
 80147b0:	4430      	add	r0, r6
 80147b2:	ed90 1a00 	vldr	s2, [r0]
 80147b6:	9802      	ldr	r0, [sp, #8]
 80147b8:	f50d 64f8 	add.w	r4, sp, #1984	; 0x7c0
 80147bc:	4433      	add	r3, r6
 80147be:	eb04 0680 	add.w	r6, r4, r0, lsl #2
 80147c2:	f50d 60f8 	add.w	r0, sp, #1984	; 0x7c0
 80147c6:	9504      	str	r5, [sp, #16]
 80147c8:	f5a1 61cf 	sub.w	r1, r1, #1656	; 0x678
 80147cc:	eb00 058c 	add.w	r5, r0, ip, lsl #2
 80147d0:	f50d 6cf8 	add.w	ip, sp, #1984	; 0x7c0
 80147d4:	edd1 4a00 	vldr	s9, [r1]
 80147d8:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 80147dc:	eb0c 018e 	add.w	r1, ip, lr, lsl #2
 80147e0:	ed92 5a00 	vldr	s10, [r2]
 80147e4:	4634      	mov	r4, r6
 80147e6:	4628      	mov	r0, r5
 80147e8:	460a      	mov	r2, r1
 80147ea:	f5a4 64cc 	sub.w	r4, r4, #1632	; 0x660
 80147ee:	f2a5 656c 	subw	r5, r5, #1644	; 0x66c
 80147f2:	f5a0 60cc 	sub.w	r0, r0, #1632	; 0x660
 80147f6:	f2a1 616c 	subw	r1, r1, #1644	; 0x66c
 80147fa:	f5a2 62cc 	sub.w	r2, r2, #1632	; 0x660
 80147fe:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 8014802:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 8014806:	edd3 1a00 	vldr	s3, [r3]
 801480a:	ed94 7a00 	vldr	s14, [r4]
 801480e:	edd6 5a00 	vldr	s11, [r6]
 8014812:	ed95 6a00 	vldr	s12, [r5]
 8014816:	edd0 7a00 	vldr	s15, [r0]
 801481a:	edd1 6a00 	vldr	s13, [r1]
 801481e:	ed92 4a00 	vldr	s8, [r2]
 8014822:	edd7 3a00 	vldr	s7, [r7]
 8014826:	eee1 4a45 	vfms.f32	s9, s2, s10
 801482a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 801482e:	eea1 6a65 	vfms.f32	s12, s2, s11
 8014832:	eee7 7a41 	vfms.f32	s15, s14, s2
 8014836:	eee1 3ac5 	vfms.f32	s7, s3, s10
 801483a:	eee1 6ae5 	vfms.f32	s13, s3, s11
 801483e:	eea7 4a61 	vfms.f32	s8, s14, s3
 8014842:	eee4 3ae2 	vfms.f32	s7, s9, s5
 8014846:	eec3 1a02 	vdiv.f32	s3, s6, s4
 801484a:	eee2 6ac6 	vfms.f32	s13, s5, s12
 801484e:	eea2 4ae7 	vfms.f32	s8, s5, s15
 8014852:	9905      	ldr	r1, [sp, #20]
 8014854:	9d04      	ldr	r5, [sp, #16]
 8014856:	ed91 2a00 	vldr	s4, [r1]
 801485a:	ee61 6aa6 	vmul.f32	s13, s3, s13
 801485e:	ee61 3aa3 	vmul.f32	s7, s3, s7
 8014862:	ee21 4a84 	vmul.f32	s8, s3, s8
 8014866:	ed95 1a00 	vldr	s2, [r5]
 801486a:	9b07      	ldr	r3, [sp, #28]
 801486c:	f20d 41cc 	addw	r1, sp, #1228	; 0x4cc
 8014870:	440b      	add	r3, r1
 8014872:	edd3 2a00 	vldr	s5, [r3]
 8014876:	9b06      	ldr	r3, [sp, #24]
 8014878:	eec3 1a01 	vdiv.f32	s3, s6, s2
 801487c:	440b      	add	r3, r1
 801487e:	461c      	mov	r4, r3
 8014880:	460b      	mov	r3, r1
 8014882:	eea2 6a66 	vfms.f32	s12, s4, s13
 8014886:	eee3 4ac2 	vfms.f32	s9, s7, s4
 801488a:	eee4 7a42 	vfms.f32	s15, s8, s4
 801488e:	9a03      	ldr	r2, [sp, #12]
 8014890:	ed94 2a00 	vldr	s4, [r4]
 8014894:	4413      	add	r3, r2
 8014896:	ee67 7aa1 	vmul.f32	s15, s15, s3
 801489a:	ee64 4aa1 	vmul.f32	s9, s9, s3
 801489e:	ee21 6a86 	vmul.f32	s12, s3, s12
 80148a2:	eee2 5ae6 	vfms.f32	s11, s5, s13
 80148a6:	edd3 1a00 	vldr	s3, [r3]
 80148aa:	eea3 5ae2 	vfms.f32	s10, s7, s5
 80148ae:	eea4 7a62 	vfms.f32	s14, s8, s5
 80148b2:	eea4 5ac2 	vfms.f32	s10, s9, s4
 80148b6:	eec3 2a21 	vdiv.f32	s5, s6, s3
 80148ba:	eea7 7ac2 	vfms.f32	s14, s15, s4
 80148be:	eee2 5a46 	vfms.f32	s11, s4, s12
 80148c2:	ee27 7a22 	vmul.f32	s14, s14, s5
 80148c6:	ee22 5a85 	vmul.f32	s10, s5, s10
 80148ca:	ee62 5aa5 	vmul.f32	s11, s5, s11
 80148ce:	a85b      	add	r0, sp, #364	; 0x16c
 80148d0:	a93c      	add	r1, sp, #240	; 0xf0
 80148d2:	edcd 3a5d 	vstr	s7, [sp, #372]	; 0x174
 80148d6:	edcd 4a5c 	vstr	s9, [sp, #368]	; 0x170
 80148da:	edcd 6a60 	vstr	s13, [sp, #384]	; 0x180
 80148de:	ed8d 7a61 	vstr	s14, [sp, #388]	; 0x184
 80148e2:	edcd 7a62 	vstr	s15, [sp, #392]	; 0x188
 80148e6:	ed8d 5a5b 	vstr	s10, [sp, #364]	; 0x16c
 80148ea:	edcd 5a5e 	vstr	s11, [sp, #376]	; 0x178
 80148ee:	ed8d 6a5f 	vstr	s12, [sp, #380]	; 0x17c
 80148f2:	ed8d 4a63 	vstr	s8, [sp, #396]	; 0x18c
 80148f6:	f7fa fba7 	bl	800f048 <b_dcm2q>
 80148fa:	eddd 6a3d 	vldr	s13, [sp, #244]	; 0xf4
 80148fe:	ed9d 7a3e 	vldr	s14, [sp, #248]	; 0xf8
 8014902:	eddd 7a3c 	vldr	s15, [sp, #240]	; 0xf0
 8014906:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801490a:	ee37 7a07 	vadd.f32	s14, s14, s14
 801490e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014912:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 8014916:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 801491a:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 801491e:	edcd 7a2b 	vstr	s15, [sp, #172]	; 0xac
 8014922:	2b00      	cmp	r3, #0
 8014924:	f43d ad23 	beq.w	801236e <kalman_3gyro.constprop.0+0x2362>
 8014928:	2200      	movs	r2, #0
 801492a:	9b01      	ldr	r3, [sp, #4]
 801492c:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8014930:	f8ad 20a6 	strh.w	r2, [sp, #166]	; 0xa6
 8014934:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8014938:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801493c:	f7fd bda9 	b.w	8012492 <kalman_3gyro.constprop.0+0x2486>
 8014940:	edd3 7a02 	vldr	s15, [r3, #8]
 8014944:	ed93 7a01 	vldr	s14, [r3, #4]
 8014948:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801494c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014950:	ed93 7a03 	vldr	s14, [r3, #12]
 8014954:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014958:	eef1 6ae7 	vsqrt.f32	s13, s15
 801495c:	eec7 3a26 	vdiv.f32	s7, s14, s13
 8014960:	edcb 3a72 	vstr	s7, [fp, #456]	; 0x1c8
 8014964:	f7ff bb2f 	b.w	8013fc6 <kalman_3gyro.constprop.0+0x3fba>
 8014968:	eef0 5a64 	vmov.f32	s11, s9
 801496c:	f7fc bd88 	b.w	8011480 <kalman_3gyro.constprop.0+0x1474>
 8014970:	eef0 5a64 	vmov.f32	s11, s9
 8014974:	f7ff bbb3 	b.w	80140de <kalman_3gyro.constprop.0+0x40d2>
 8014978:	eef0 5a64 	vmov.f32	s11, s9
 801497c:	f7ff bb6f 	b.w	801405e <kalman_3gyro.constprop.0+0x4052>
 8014980:	eef0 5a64 	vmov.f32	s11, s9
 8014984:	f7fc bd9c 	b.w	80114c0 <kalman_3gyro.constprop.0+0x14b4>
 8014988:	eef0 5a64 	vmov.f32	s11, s9
 801498c:	f7ff bb87 	b.w	801409e <kalman_3gyro.constprop.0+0x4092>
 8014990:	eef0 5a64 	vmov.f32	s11, s9
 8014994:	f7fc bdb4 	b.w	8011500 <kalman_3gyro.constprop.0+0x14f4>
 8014998:	2200      	movs	r2, #0
 801499a:	2404      	movs	r4, #4
 801499c:	2301      	movs	r3, #1
 801499e:	eef0 7a47 	vmov.f32	s15, s14
 80149a2:	4694      	mov	ip, r2
 80149a4:	2603      	movs	r6, #3
 80149a6:	2007      	movs	r0, #7
 80149a8:	2706      	movs	r7, #6
 80149aa:	9407      	str	r4, [sp, #28]
 80149ac:	9302      	str	r3, [sp, #8]
 80149ae:	e64a      	b.n	8014646 <kalman_3gyro.constprop.0+0x463a>
 80149b0:	eef0 5a64 	vmov.f32	s11, s9
 80149b4:	eddf 4ae9 	vldr	s9, [pc, #932]	; 8014d5c <kalman_3gyro.constprop.0+0x4d50>
 80149b8:	edcd 4a01 	vstr	s9, [sp, #4]
 80149bc:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 80149c0:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80149c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149c8:	f140 80ce 	bpl.w	8014b68 <kalman_3gyro.constprop.0+0x4b5c>
 80149cc:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 80149d0:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 80149d4:	ee38 3a65 	vsub.f32	s6, s16, s11
 80149d8:	ee34 4a63 	vsub.f32	s8, s8, s7
 80149dc:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80149e0:	ee64 4a03 	vmul.f32	s9, s8, s6
 80149e4:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 80149e8:	ee74 5a23 	vadd.f32	s11, s8, s7
 80149ec:	edcd 5a01 	vstr	s11, [sp, #4]
 80149f0:	eddb 5a38 	vldr	s11, [fp, #224]	; 0xe0
 80149f4:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80149f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149fc:	f6ff acd6 	blt.w	80143ac <kalman_3gyro.constprop.0+0x43a0>
 8014a00:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 8014a04:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8014a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a0c:	f140 80a6 	bpl.w	8014b5c <kalman_3gyro.constprop.0+0x4b50>
 8014a10:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 8014a14:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 8014a18:	ee38 3a65 	vsub.f32	s6, s16, s11
 8014a1c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014a20:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014a24:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014a28:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 8014a2c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8014a30:	edcd 5a01 	vstr	s11, [sp, #4]
 8014a34:	eddb 5a3c 	vldr	s11, [fp, #240]	; 0xf0
 8014a38:	eef4 5ac8 	vcmpe.f32	s11, s16
 8014a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a40:	f63f acd6 	bhi.w	80143f0 <kalman_3gyro.constprop.0+0x43e4>
 8014a44:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 8014a48:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a50:	dd7e      	ble.n	8014b50 <kalman_3gyro.constprop.0+0x4b44>
 8014a52:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 8014a56:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 8014a5a:	ee38 3a65 	vsub.f32	s6, s16, s11
 8014a5e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014a62:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014a66:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014a6a:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 8014a6e:	ee74 5a23 	vadd.f32	s11, s8, s7
 8014a72:	edcd 5a01 	vstr	s11, [sp, #4]
 8014a76:	eddb 5a40 	vldr	s11, [fp, #256]	; 0x100
 8014a7a:	eef4 5ac8 	vcmpe.f32	s11, s16
 8014a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a82:	f63f acd7 	bhi.w	8014434 <kalman_3gyro.constprop.0+0x4428>
 8014a86:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 8014a8a:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a92:	dd6c      	ble.n	8014b6e <kalman_3gyro.constprop.0+0x4b62>
 8014a94:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 8014a98:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 8014a9c:	ee38 3a65 	vsub.f32	s6, s16, s11
 8014aa0:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014aa4:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014aa8:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014aac:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 8014ab0:	ee74 5a23 	vadd.f32	s11, s8, s7
 8014ab4:	edcd 5a01 	vstr	s11, [sp, #4]
 8014ab8:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8014abc:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ac4:	f63f acd8 	bhi.w	8014478 <kalman_3gyro.constprop.0+0x446c>
 8014ac8:	eddb 5a46 	vldr	s11, [fp, #280]	; 0x118
 8014acc:	eef4 5ac8 	vcmpe.f32	s11, s16
 8014ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ad4:	f77f acd8 	ble.w	8014488 <kalman_3gyro.constprop.0+0x447c>
 8014ad8:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8014adc:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 8014ae0:	ee78 3a64 	vsub.f32	s7, s16, s9
 8014ae4:	ee35 5a44 	vsub.f32	s10, s10, s8
 8014ae8:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8014aec:	ee25 5a23 	vmul.f32	s10, s10, s7
 8014af0:	eec5 4a25 	vdiv.f32	s9, s10, s11
 8014af4:	ee74 5a84 	vadd.f32	s11, s9, s8
 8014af8:	edcd 5a01 	vstr	s11, [sp, #4]
 8014afc:	f7fc bc70 	b.w	80113e0 <kalman_3gyro.constprop.0+0x13d4>
 8014b00:	eddf 7a97 	vldr	s15, [pc, #604]	; 8014d60 <kalman_3gyro.constprop.0+0x4d54>
 8014b04:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8014d64 <kalman_3gyro.constprop.0+0x4d58>
 8014b08:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8014b0c:	3301      	adds	r3, #1
 8014b0e:	b29b      	uxth	r3, r3
 8014b10:	2b31      	cmp	r3, #49	; 0x31
 8014b12:	bf98      	it	ls
 8014b14:	eef0 7a47 	vmovls.f32	s15, s14
 8014b18:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8014b1c:	f7fd bc16 	b.w	801234c <kalman_3gyro.constprop.0+0x2340>
 8014b20:	2a0a      	cmp	r2, #10
 8014b22:	d031      	beq.n	8014b88 <kalman_3gyro.constprop.0+0x4b7c>
 8014b24:	2100      	movs	r1, #0
 8014b26:	3201      	adds	r2, #1
 8014b28:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8014b2c:	f8ad 10a6 	strh.w	r1, [sp, #166]	; 0xa6
 8014b30:	f88d 10a8 	strb.w	r1, [sp, #168]	; 0xa8
 8014b34:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 8014b38:	f7fd bcab 	b.w	8012492 <kalman_3gyro.constprop.0+0x2486>
 8014b3c:	2308      	movs	r3, #8
 8014b3e:	9303      	str	r3, [sp, #12]
 8014b40:	2305      	movs	r3, #5
 8014b42:	f04f 0e02 	mov.w	lr, #2
 8014b46:	9309      	str	r3, [sp, #36]	; 0x24
 8014b48:	e595      	b.n	8014676 <kalman_3gyro.constprop.0+0x466a>
 8014b4a:	eef0 5a64 	vmov.f32	s11, s9
 8014b4e:	e79a      	b.n	8014a86 <kalman_3gyro.constprop.0+0x4a7a>
 8014b50:	eef0 5a64 	vmov.f32	s11, s9
 8014b54:	e454      	b.n	8014400 <kalman_3gyro.constprop.0+0x43f4>
 8014b56:	eef0 5a64 	vmov.f32	s11, s9
 8014b5a:	e773      	b.n	8014a44 <kalman_3gyro.constprop.0+0x4a38>
 8014b5c:	eef0 5a64 	vmov.f32	s11, s9
 8014b60:	e42c      	b.n	80143bc <kalman_3gyro.constprop.0+0x43b0>
 8014b62:	eef0 5a64 	vmov.f32	s11, s9
 8014b66:	e74b      	b.n	8014a00 <kalman_3gyro.constprop.0+0x49f4>
 8014b68:	eef0 5a64 	vmov.f32	s11, s9
 8014b6c:	e404      	b.n	8014378 <kalman_3gyro.constprop.0+0x436c>
 8014b6e:	eef0 5a64 	vmov.f32	s11, s9
 8014b72:	e467      	b.n	8014444 <kalman_3gyro.constprop.0+0x4438>
 8014b74:	f50b 6a97 	add.w	sl, fp, #1208	; 0x4b8
 8014b78:	f7fe bd1f 	b.w	80135ba <kalman_3gyro.constprop.0+0x35ae>
 8014b7c:	eef0 4a65 	vmov.f32	s9, s11
 8014b80:	ed9f ca76 	vldr	s24, [pc, #472]	; 8014d5c <kalman_3gyro.constprop.0+0x4d50>
 8014b84:	f7fc bc5c 	b.w	8011440 <kalman_3gyro.constprop.0+0x1434>
 8014b88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014b8a:	f240 1501 	movw	r5, #257	; 0x101
 8014b8e:	edd2 5a00 	vldr	s11, [r2]
 8014b92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014b94:	ed92 3a00 	vldr	s6, [r2]
 8014b98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014b9a:	ee75 5a83 	vadd.f32	s11, s11, s6
 8014b9e:	edd2 4a00 	vldr	s9, [r2]
 8014ba2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014ba4:	ed94 3a00 	vldr	s6, [r4]
 8014ba8:	edd2 3a00 	vldr	s7, [r2]
 8014bac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014bae:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8014bb2:	edd2 7a00 	vldr	s15, [r2]
 8014bb6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8014bb8:	edd0 3a00 	vldr	s7, [r0]
 8014bbc:	ed92 4a00 	vldr	s8, [r2]
 8014bc0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014bc4:	ed91 4a00 	vldr	s8, [r1]
 8014bc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014bca:	ee75 5a83 	vadd.f32	s11, s11, s6
 8014bce:	ed92 3a00 	vldr	s6, [r2]
 8014bd2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014bd4:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8014bd8:	edd2 3a00 	vldr	s7, [r2]
 8014bdc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8014bde:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014be2:	ed92 4a00 	vldr	s8, [r2]
 8014be6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014be8:	ee75 5a83 	vadd.f32	s11, s11, s6
 8014bec:	ed92 3a00 	vldr	s6, [r2]
 8014bf0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8014bf2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8014bf6:	edd2 3a00 	vldr	s7, [r2]
 8014bfa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014bfc:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014c00:	ed92 4a00 	vldr	s8, [r2]
 8014c04:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 8014c08:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8014c0c:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 8014c10:	edd1 3a00 	vldr	s7, [r1]
 8014c14:	ee75 5a83 	vadd.f32	s11, s11, s6
 8014c18:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 8014c1c:	ed90 3a00 	vldr	s6, [r0]
 8014c20:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014c24:	ed92 4a00 	vldr	s8, [r2]
 8014c28:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 8014c2c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8014c30:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 8014c34:	edd1 3a00 	vldr	s7, [r1]
 8014c38:	ee75 5a83 	vadd.f32	s11, s11, s6
 8014c3c:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 8014c40:	ed90 3a00 	vldr	s6, [r0]
 8014c44:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014c48:	ed92 4a00 	vldr	s8, [r2]
 8014c4c:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8014c50:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8014c54:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 8014c58:	edd1 3a00 	vldr	s7, [r1]
 8014c5c:	ee75 5a83 	vadd.f32	s11, s11, s6
 8014c60:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 8014c64:	ed90 3a00 	vldr	s6, [r0]
 8014c68:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014c6c:	ed92 4a00 	vldr	s8, [r2]
 8014c70:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 8014c74:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8014c78:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 8014c7c:	edd0 3a00 	vldr	s7, [r0]
 8014c80:	ee75 5a83 	vadd.f32	s11, s11, s6
 8014c84:	edd4 2a00 	vldr	s5, [r4]
 8014c88:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 8014c8c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014c90:	ed92 4a00 	vldr	s8, [r2]
 8014c94:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 8014c98:	ed91 3a00 	vldr	s6, [r1]
 8014c9c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8014ca0:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 8014ca4:	edd1 3a00 	vldr	s7, [r1]
 8014ca8:	f60b 020c 	addw	r2, fp, #2060	; 0x80c
 8014cac:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8014cb0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014cb4:	ed92 4a00 	vldr	s8, [r2]
 8014cb8:	ee74 4a83 	vadd.f32	s9, s9, s6
 8014cbc:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8014cc0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014cc4:	ee64 4a85 	vmul.f32	s9, s9, s10
 8014cc8:	ee65 5a85 	vmul.f32	s11, s11, s10
 8014ccc:	ee67 7a85 	vmul.f32	s15, s15, s10
 8014cd0:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 8014cd4:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
 8014cd8:	edc0 4a00 	vstr	s9, [r0]
 8014cdc:	f89b 1001 	ldrb.w	r1, [fp, #1]
 8014ce0:	f20d 40cc 	addw	r0, sp, #1228	; 0x4cc
 8014ce4:	edc0 5a00 	vstr	s11, [r0]
 8014ce8:	3201      	adds	r2, #1
 8014cea:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 8014cee:	ed8d 7a7f 	vstr	s14, [sp, #508]	; 0x1fc
 8014cf2:	edcd 6a80 	vstr	s13, [sp, #512]	; 0x200
 8014cf6:	ed8d 6a81 	vstr	s12, [sp, #516]	; 0x204
 8014cfa:	edc0 7a00 	vstr	s15, [r0]
 8014cfe:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 8014d02:	f8ad 50a6 	strh.w	r5, [sp, #166]	; 0xa6
 8014d06:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8014d0a:	2900      	cmp	r1, #0
 8014d0c:	f43d abc1 	beq.w	8012492 <kalman_3gyro.constprop.0+0x2486>
 8014d10:	2200      	movs	r2, #0
 8014d12:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 8014d16:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 8014d1a:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 8014d1e:	f88b 2001 	strb.w	r2, [fp, #1]
 8014d22:	f7fd bbb6 	b.w	8012492 <kalman_3gyro.constprop.0+0x2486>
 8014d26:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014d2a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014d2e:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8014d32:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8014d36:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8014d3a:	f7fd bb15 	b.w	8012368 <kalman_3gyro.constprop.0+0x235c>
 8014d3e:	2a00      	cmp	r2, #0
 8014d40:	f340 8120 	ble.w	8014f84 <kalman_3gyro.constprop.0+0x4f78>
 8014d44:	2300      	movs	r3, #0
 8014d46:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
 8014d4a:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
 8014d4e:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
 8014d52:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 8014d56:	f7fd b8d9 	b.w	8011f0c <kalman_3gyro.constprop.0+0x1f00>
 8014d5a:	bf00      	nop
 8014d5c:	00000000 	.word	0x00000000
 8014d60:	3e4cccce 	.word	0x3e4cccce
 8014d64:	3eaaaaab 	.word	0x3eaaaaab
 8014d68:	3e999998 	.word	0x3e999998
 8014d6c:	3f99999a 	.word	0x3f99999a
 8014d70:	3dccccd0 	.word	0x3dccccd0
 8014d74:	3f8ccccd 	.word	0x3f8ccccd
 8014d78:	3e4ccccd 	.word	0x3e4ccccd
 8014d7c:	3d088889 	.word	0x3d088889
 8014d80:	3d0d3dcb 	.word	0x3d0d3dcb
 8014d84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d90:	d55a      	bpl.n	8014e48 <kalman_3gyro.constprop.0+0x4e3c>
 8014d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014d96:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8014d70 <kalman_3gyro.constprop.0+0x4d64>
 8014d9a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014d9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014da2:	eef0 5a66 	vmov.f32	s11, s13
 8014da6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014daa:	eee7 5a06 	vfma.f32	s11, s14, s12
 8014dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014db2:	eeb0 7a65 	vmov.f32	s14, s11
 8014db6:	db5a      	blt.n	8014e6e <kalman_3gyro.constprop.0+0x4e62>
 8014db8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dc4:	d55a      	bpl.n	8014e7c <kalman_3gyro.constprop.0+0x4e70>
 8014dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014dca:	ed1f 6a19 	vldr	s12, [pc, #-100]	; 8014d68 <kalman_3gyro.constprop.0+0x4d5c>
 8014dce:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8014dd2:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 8014d6c <kalman_3gyro.constprop.0+0x4d60>
 8014dd6:	eea6 7a86 	vfma.f32	s14, s13, s12
 8014dda:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8014dde:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014de6:	db5a      	blt.n	8014e9e <kalman_3gyro.constprop.0+0x4e92>
 8014de8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8014dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014df4:	d55a      	bpl.n	8014eac <kalman_3gyro.constprop.0+0x4ea0>
 8014df6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8014dfa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014dfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014e02:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014e06:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014e0a:	ee68 8a87 	vmul.f32	s17, s17, s14
 8014e0e:	f7ff bb9c 	b.w	801454a <kalman_3gyro.constprop.0+0x453e>
 8014e12:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8014e16:	2b27      	cmp	r3, #39	; 0x27
 8014e18:	d855      	bhi.n	8014ec6 <kalman_3gyro.constprop.0+0x4eba>
 8014e1a:	ed8d 5a7f 	vstr	s10, [sp, #508]	; 0x1fc
 8014e1e:	edcd 5a80 	vstr	s11, [sp, #512]	; 0x200
 8014e22:	ed8d 6a81 	vstr	s12, [sp, #516]	; 0x204
 8014e26:	2201      	movs	r2, #1
 8014e28:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 8014e2c:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8014e30:	4413      	add	r3, r2
 8014e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e36:	bf0c      	ite	eq
 8014e38:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8014e3c:	b29b      	uxthne	r3, r3
 8014e3e:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8014e42:	9b01      	ldr	r3, [sp, #4]
 8014e44:	f7fd bb25 	b.w	8012492 <kalman_3gyro.constprop.0+0x2486>
 8014e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014e4c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e54:	d5b0      	bpl.n	8014db8 <kalman_3gyro.constprop.0+0x4dac>
 8014e56:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8014e5a:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 8014d70 <kalman_3gyro.constprop.0+0x4d64>
 8014e5e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014e62:	ee67 6a26 	vmul.f32	s13, s14, s13
 8014e66:	ed1f 7a3d 	vldr	s14, [pc, #-244]	; 8014d74 <kalman_3gyro.constprop.0+0x4d68>
 8014e6a:	eea6 7a86 	vfma.f32	s14, s13, s12
 8014e6e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014e72:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e7a:	dbae      	blt.n	8014dda <kalman_3gyro.constprop.0+0x4dce>
 8014e7c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8014e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e88:	d5ae      	bpl.n	8014de8 <kalman_3gyro.constprop.0+0x4ddc>
 8014e8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014e8e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014e92:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8014e96:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8014e9a:	eea6 7a86 	vfma.f32	s14, s13, s12
 8014e9e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8014ea2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eaa:	dbae      	blt.n	8014e0a <kalman_3gyro.constprop.0+0x4dfe>
 8014eac:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8014eb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014eb4:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8014d78 <kalman_3gyro.constprop.0+0x4d6c>
 8014eb8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014ebc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8014ec0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014ec4:	e7a1      	b.n	8014e0a <kalman_3gyro.constprop.0+0x4dfe>
 8014ec6:	9b08      	ldr	r3, [sp, #32]
 8014ec8:	6999      	ldr	r1, [r3, #24]
 8014eca:	69da      	ldr	r2, [r3, #28]
 8014ecc:	6a1b      	ldr	r3, [r3, #32]
 8014ece:	917f      	str	r1, [sp, #508]	; 0x1fc
 8014ed0:	9280      	str	r2, [sp, #512]	; 0x200
 8014ed2:	9381      	str	r3, [sp, #516]	; 0x204
 8014ed4:	e7a7      	b.n	8014e26 <kalman_3gyro.constprop.0+0x4e1a>
 8014ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8014eda:	ed1f 4a58 	vldr	s8, [pc, #-352]	; 8014d7c <kalman_3gyro.constprop.0+0x4d70>
 8014ede:	ed5f 4a58 	vldr	s9, [pc, #-352]	; 8014d80 <kalman_3gyro.constprop.0+0x4d74>
 8014ee2:	ac31      	add	r4, sp, #196	; 0xc4
 8014ee4:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 8014ee8:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 8014eec:	eef0 7a66 	vmov.f32	s15, s13
 8014ef0:	461a      	mov	r2, r3
 8014ef2:	3001      	adds	r0, #1
 8014ef4:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 8014ef8:	320c      	adds	r2, #12
 8014efa:	428a      	cmp	r2, r1
 8014efc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014f00:	d1f8      	bne.n	8014ef4 <kalman_3gyro.constprop.0+0x4ee8>
 8014f02:	ee27 7a84 	vmul.f32	s14, s15, s8
 8014f06:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8014f0a:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8014f0e:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 8014f12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014f16:	330c      	adds	r3, #12
 8014f18:	428b      	cmp	r3, r1
 8014f1a:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8014f1e:	d1f6      	bne.n	8014f0e <kalman_3gyro.constprop.0+0x4f02>
 8014f20:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8014f24:	2802      	cmp	r0, #2
 8014f26:	ece4 6a01 	vstmia	r4!, {s13}
 8014f2a:	f103 0104 	add.w	r1, r3, #4
 8014f2e:	d1d9      	bne.n	8014ee4 <kalman_3gyro.constprop.0+0x4ed8>
 8014f30:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 8014f34:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8014f38:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8014f3c:	ee74 7aa6 	vadd.f32	s15, s9, s13
 8014f40:	eeb1 4ae4 	vsqrt.f32	s8, s9
 8014f44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014f48:	eef1 4ae6 	vsqrt.f32	s9, s13
 8014f4c:	eef1 6ac7 	vsqrt.f32	s13, s14
 8014f50:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8014f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f5c:	ed8d 4a31 	vstr	s8, [sp, #196]	; 0xc4
 8014f60:	edcd 4a32 	vstr	s9, [sp, #200]	; 0xc8
 8014f64:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 8014f68:	f57d aa5f 	bpl.w	801242a <kalman_3gyro.constprop.0+0x241e>
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	ed8d 5a7f 	vstr	s10, [sp, #508]	; 0x1fc
 8014f72:	edcd 5a80 	vstr	s11, [sp, #512]	; 0x200
 8014f76:	ed8d 6a81 	vstr	s12, [sp, #516]	; 0x204
 8014f7a:	9b01      	ldr	r3, [sp, #4]
 8014f7c:	f88b 2001 	strb.w	r2, [fp, #1]
 8014f80:	f7fd ba87 	b.w	8012492 <kalman_3gyro.constprop.0+0x2486>
 8014f84:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8014f88:	eddd 6a6d 	vldr	s13, [sp, #436]	; 0x1b4
 8014f8c:	ed9d 7a6e 	vldr	s14, [sp, #440]	; 0x1b8
 8014f90:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 8014f94:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014f98:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014f9c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014fa0:	edcd 6a6d 	vstr	s13, [sp, #436]	; 0x1b4
 8014fa4:	ed8d 7a6e 	vstr	s14, [sp, #440]	; 0x1b8
 8014fa8:	edcd 7a6f 	vstr	s15, [sp, #444]	; 0x1bc
 8014fac:	f7fc bfae 	b.w	8011f0c <kalman_3gyro.constprop.0+0x1f00>

08014fb0 <iNemoEngine_API_Update>:
 8014fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fb4:	ed2d 8b10 	vpush	{d8-d15}
 8014fb8:	4604      	mov	r4, r0
 8014fba:	460d      	mov	r5, r1
 8014fbc:	4617      	mov	r7, r2
 8014fbe:	eef0 8a40 	vmov.f32	s17, s0
 8014fc2:	b0c3      	sub	sp, #268	; 0x10c
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	f000 824e 	beq.w	8015466 <iNemoEngine_API_Update+0x4b6>
 8014fca:	461e      	mov	r6, r3
 8014fcc:	463a      	mov	r2, r7
 8014fce:	46b8      	mov	r8, r7
 8014fd0:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8014fd4:	f10d 0ed4 	add.w	lr, sp, #212	; 0xd4
 8014fd8:	6851      	ldr	r1, [r2, #4]
 8014fda:	6892      	ldr	r2, [r2, #8]
 8014fdc:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
 8014fe0:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
 8014fe4:	6838      	ldr	r0, [r7, #0]
 8014fe6:	6879      	ldr	r1, [r7, #4]
 8014fe8:	68ba      	ldr	r2, [r7, #8]
 8014fea:	f894 7978 	ldrb.w	r7, [r4, #2424]	; 0x978
 8014fee:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8014ff2:	f858 0f18 	ldr.w	r0, [r8, #24]!
 8014ff6:	ab38      	add	r3, sp, #224	; 0xe0
 8014ff8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014ffc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8015000:	c307      	stmia	r3!, {r0, r1, r2}
 8015002:	b12f      	cbz	r7, 8015010 <iNemoEngine_API_Update+0x60>
 8015004:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8015008:	7923      	ldrb	r3, [r4, #4]
 801500a:	429a      	cmp	r2, r3
 801500c:	f080 8291 	bcs.w	8015532 <iNemoEngine_API_Update+0x582>
 8015010:	2300      	movs	r3, #0
 8015012:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 8015016:	f10d 081c 	add.w	r8, sp, #28
 801501a:	4649      	mov	r1, r9
 801501c:	4640      	mov	r0, r8
 801501e:	aa35      	add	r2, sp, #212	; 0xd4
 8015020:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8015024:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 8015028:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 801502c:	f7f9 fc56 	bl	800e8dc <rotVect>
 8015030:	aa38      	add	r2, sp, #224	; 0xe0
 8015032:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8015036:	a80a      	add	r0, sp, #40	; 0x28
 8015038:	f7f9 fc50 	bl	800e8dc <rotVect>
 801503c:	4650      	mov	r0, sl
 801503e:	aa32      	add	r2, sp, #200	; 0xc8
 8015040:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8015044:	f7f9 fc4a 	bl	800e8dc <rotVect>
 8015048:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801504c:	b923      	cbnz	r3, 8015058 <iNemoEngine_API_Update+0xa8>
 801504e:	2200      	movs	r2, #0
 8015050:	4b88      	ldr	r3, [pc, #544]	; (8015274 <iNemoEngine_API_Update+0x2c4>)
 8015052:	920d      	str	r2, [sp, #52]	; 0x34
 8015054:	930e      	str	r3, [sp, #56]	; 0x38
 8015056:	930f      	str	r3, [sp, #60]	; 0x3c
 8015058:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 801505c:	2f09      	cmp	r7, #9
 801505e:	d851      	bhi.n	8015104 <iNemoEngine_API_Update+0x154>
 8015060:	eddd aa08 	vldr	s21, [sp, #32]
 8015064:	ed9d ba07 	vldr	s22, [sp, #28]
 8015068:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 801506c:	ed9d 9a09 	vldr	s18, [sp, #36]	; 0x24
 8015070:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8015074:	eee9 7a09 	vfma.f32	s15, s18, s18
 8015078:	ee17 0a90 	vmov	r0, s15
 801507c:	f7eb fa68 	bl	8000550 <__aeabi_f2d>
 8015080:	ec41 0b10 	vmov	d0, r0, r1
 8015084:	f003 fe90 	bl	8018da8 <sqrt>
 8015088:	ec51 0b10 	vmov	r0, r1, d0
 801508c:	f7eb fd68 	bl	8000b60 <__aeabi_d2f>
 8015090:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8015094:	eddd 9a0e 	vldr	s19, [sp, #56]	; 0x38
 8015098:	ee07 0a90 	vmov	s15, r0
 801509c:	ed9d aa0d 	vldr	s20, [sp, #52]	; 0x34
 80150a0:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 80150a4:	ee29 7aa9 	vmul.f32	s14, s19, s19
 80150a8:	ee2b ba27 	vmul.f32	s22, s22, s15
 80150ac:	eeaa 7a0a 	vfma.f32	s14, s20, s20
 80150b0:	ee6a aaa7 	vmul.f32	s21, s21, s15
 80150b4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80150b8:	ed9d 9a0f 	vldr	s18, [sp, #60]	; 0x3c
 80150bc:	eea9 7a09 	vfma.f32	s14, s18, s18
 80150c0:	ee17 0a10 	vmov	r0, s14
 80150c4:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 80150c8:	ed8d ba07 	vstr	s22, [sp, #28]
 80150cc:	edcd aa08 	vstr	s21, [sp, #32]
 80150d0:	f7eb fa3e 	bl	8000550 <__aeabi_f2d>
 80150d4:	ec41 0b10 	vmov	d0, r0, r1
 80150d8:	f003 fe66 	bl	8018da8 <sqrt>
 80150dc:	ec51 0b10 	vmov	r0, r1, d0
 80150e0:	f7eb fd3e 	bl	8000b60 <__aeabi_d2f>
 80150e4:	ee07 0a90 	vmov	s15, r0
 80150e8:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 80150ec:	ee2a aa27 	vmul.f32	s20, s20, s15
 80150f0:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80150f4:	ee29 9a27 	vmul.f32	s18, s18, s15
 80150f8:	ed8d aa0d 	vstr	s20, [sp, #52]	; 0x34
 80150fc:	edcd 9a0e 	vstr	s19, [sp, #56]	; 0x38
 8015100:	ed8d 9a0f 	vstr	s18, [sp, #60]	; 0x3c
 8015104:	7923      	ldrb	r3, [r4, #4]
 8015106:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 801510a:	429a      	cmp	r2, r3
 801510c:	f080 80d6 	bcs.w	80152bc <iNemoEngine_API_Update+0x30c>
 8015110:	f10d 0898 	add.w	r8, sp, #152	; 0x98
 8015114:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8015118:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 801511c:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8015120:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8015124:	3701      	adds	r7, #1
 8015126:	4649      	mov	r1, r9
 8015128:	4640      	mov	r0, r8
 801512a:	aa35      	add	r2, sp, #212	; 0xd4
 801512c:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8015130:	9302      	str	r3, [sp, #8]
 8015132:	f7f9 fbd3 	bl	800e8dc <rotVect>
 8015136:	9b02      	ldr	r3, [sp, #8]
 8015138:	f8db 1000 	ldr.w	r1, [fp]
 801513c:	6818      	ldr	r0, [r3, #0]
 801513e:	f8da 2000 	ldr.w	r2, [sl]
 8015142:	6833      	ldr	r3, [r6, #0]
 8015144:	60e8      	str	r0, [r5, #12]
 8015146:	6129      	str	r1, [r5, #16]
 8015148:	61ab      	str	r3, [r5, #24]
 801514a:	616a      	str	r2, [r5, #20]
 801514c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8015150:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8015154:	e9cd 3200 	strd	r3, r2, [sp]
 8015158:	4641      	mov	r1, r8
 801515a:	462a      	mov	r2, r5
 801515c:	f105 031c 	add.w	r3, r5, #28
 8015160:	f105 000c 	add.w	r0, r5, #12
 8015164:	f7fa fe82 	bl	800fe6c <output_update>
 8015168:	edd5 8a00 	vldr	s17, [r5]
 801516c:	eeb0 0a68 	vmov.f32	s0, s17
 8015170:	f003 fdae 	bl	8018cd0 <sinf>
 8015174:	edd5 9a01 	vldr	s19, [r5, #4]
 8015178:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8015278 <iNemoEngine_API_Update+0x2c8>
 801517c:	eef0 6ae9 	vabs.f32	s13, s19
 8015180:	ee20 9a00 	vmul.f32	s18, s0, s0
 8015184:	eddf 7a3d 	vldr	s15, [pc, #244]	; 801527c <iNemoEngine_API_Update+0x2cc>
 8015188:	eef4 6ac7 	vcmpe.f32	s13, s14
 801518c:	eee9 7a27 	vfma.f32	s15, s18, s15
 8015190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015194:	eeb0 9a67 	vmov.f32	s18, s15
 8015198:	d567      	bpl.n	801526a <iNemoEngine_API_Update+0x2ba>
 801519a:	eeb0 0a69 	vmov.f32	s0, s19
 801519e:	f003 fdd9 	bl	8018d54 <tanf>
 80151a2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80151a6:	eea0 8a09 	vfma.f32	s16, s0, s18
 80151aa:	eef1 7ac8 	vsqrt.f32	s15, s16
 80151ae:	eddf 6a34 	vldr	s13, [pc, #208]	; 8015280 <iNemoEngine_API_Update+0x2d0>
 80151b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80151b6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8015294 <iNemoEngine_API_Update+0x2e4>
 80151ba:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 80151be:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80151c2:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 80151c6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80151ca:	bbbb      	cbnz	r3, 801523c <iNemoEngine_API_Update+0x28c>
 80151cc:	4c2d      	ldr	r4, [pc, #180]	; (8015284 <iNemoEngine_API_Update+0x2d4>)
 80151ce:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 80151d2:	edd5 0a08 	vldr	s1, [r5, #32]
 80151d6:	ed95 0a07 	vldr	s0, [r5, #28]
 80151da:	6820      	ldr	r0, [r4, #0]
 80151dc:	f7f9 fc50 	bl	800ea80 <findDirection>
 80151e0:	ed95 7a03 	vldr	s14, [r5, #12]
 80151e4:	edd5 6a04 	vldr	s13, [r5, #16]
 80151e8:	ed95 9a05 	vldr	s18, [r5, #20]
 80151ec:	edd5 7a06 	vldr	s15, [r5, #24]
 80151f0:	6020      	str	r0, [r4, #0]
 80151f2:	2805      	cmp	r0, #5
 80151f4:	f200 8365 	bhi.w	80158c2 <iNemoEngine_API_Update+0x912>
 80151f8:	e8df f010 	tbh	[pc, r0, lsl #1]
 80151fc:	0137000a 	.word	0x0137000a
 8015200:	01690006 	.word	0x01690006
 8015204:	000a0006 	.word	0x000a0006
 8015208:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015288 <iNemoEngine_API_Update+0x2d8>
 801520c:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8015210:	eddf 7a29 	vldr	s15, [pc, #164]	; 80152b8 <iNemoEngine_API_Update+0x308>
 8015214:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801521c:	bfa8      	it	ge
 801521e:	ee78 8ae7 	vsubge.f32	s17, s17, s15
 8015222:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8015226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801522a:	f100 8111 	bmi.w	8015450 <iNemoEngine_API_Update+0x4a0>
 801522e:	edc5 8a0d 	vstr	s17, [r5, #52]	; 0x34
 8015232:	b043      	add	sp, #268	; 0x10c
 8015234:	ecbd 8b10 	vpop	{d8-d15}
 8015238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801523c:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8015240:	ed95 9a05 	vldr	s18, [r5, #20]
 8015244:	4c0f      	ldr	r4, [pc, #60]	; (8015284 <iNemoEngine_API_Update+0x2d4>)
 8015246:	eeb1 1a41 	vneg.f32	s2, s2
 801524a:	edd5 0a07 	vldr	s1, [r5, #28]
 801524e:	ed95 0a08 	vldr	s0, [r5, #32]
 8015252:	6820      	ldr	r0, [r4, #0]
 8015254:	f7f9 fc14 	bl	800ea80 <findDirection>
 8015258:	eeb1 9a49 	vneg.f32	s18, s18
 801525c:	ed95 7a04 	vldr	s14, [r5, #16]
 8015260:	edd5 6a03 	vldr	s13, [r5, #12]
 8015264:	edd5 7a06 	vldr	s15, [r5, #24]
 8015268:	e7c2      	b.n	80151f0 <iNemoEngine_API_Update+0x240>
 801526a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801528c <iNemoEngine_API_Update+0x2dc>
 801526e:	eea9 8a27 	vfma.f32	s16, s18, s15
 8015272:	e79a      	b.n	80151aa <iNemoEngine_API_Update+0x1fa>
 8015274:	3f333333 	.word	0x3f333333
 8015278:	3fbc430e 	.word	0x3fbc430e
 801527c:	00000000 	.word	0x00000000
 8015280:	40490fdb 	.word	0x40490fdb
 8015284:	20000138 	.word	0x20000138
 8015288:	43340000 	.word	0x43340000
 801528c:	42c6ab07 	.word	0x42c6ab07
 8015290:	3c03126f 	.word	0x3c03126f
 8015294:	3c8efa35 	.word	0x3c8efa35
 8015298:	3b656042 	.word	0x3b656042
 801529c:	3ed93dd9 	.word	0x3ed93dd9
 80152a0:	3fb50481 	.word	0x3fb50481
 80152a4:	3e4ccccd 	.word	0x3e4ccccd
 80152a8:	42c80000 	.word	0x42c80000
 80152ac:	3a83126f 	.word	0x3a83126f
 80152b0:	3d4ccccd 	.word	0x3d4ccccd
 80152b4:	3f333333 	.word	0x3f333333
 80152b8:	43b40000 	.word	0x43b40000
 80152bc:	ee07 3a90 	vmov	s15, r3
 80152c0:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80152c4:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 80152c8:	f04f 0c00 	mov.w	ip, #0
 80152cc:	2700      	movs	r7, #0
 80152ce:	ed5f 6a10 	vldr	s13, [pc, #-64]	; 8015290 <iNemoEngine_API_Update+0x2e0>
 80152d2:	ee21 1a28 	vmul.f32	s2, s2, s17
 80152d6:	f8a4 c950 	strh.w	ip, [r4, #2384]	; 0x950
 80152da:	f604 1c5c 	addw	ip, r4, #2396	; 0x95c
 80152de:	eddc 5a00 	vldr	s11, [ip]
 80152e2:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 80152e6:	f8cc 7000 	str.w	r7, [ip]
 80152ea:	edd3 4a00 	vldr	s9, [r3]
 80152ee:	601f      	str	r7, [r3, #0]
 80152f0:	f604 1364 	addw	r3, r4, #2404	; 0x964
 80152f4:	ed5f 7a19 	vldr	s15, [pc, #-100]	; 8015294 <iNemoEngine_API_Update+0x2e4>
 80152f8:	ed93 5a00 	vldr	s10, [r3]
 80152fc:	ee86 7a81 	vdiv.f32	s14, s13, s2
 8015300:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8015304:	ee25 5a27 	vmul.f32	s10, s10, s15
 8015308:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801530c:	ed1f 4a1e 	vldr	s8, [pc, #-120]	; 8015298 <iNemoEngine_API_Update+0x2e8>
 8015310:	eef1 7ac7 	vsqrt.f32	s15, s14
 8015314:	ed5f 6a1f 	vldr	s13, [pc, #-124]	; 801529c <iNemoEngine_API_Update+0x2ec>
 8015318:	ed1f 6a1f 	vldr	s12, [pc, #-124]	; 80152a0 <iNemoEngine_API_Update+0x2f0>
 801531c:	ed1f 7a1f 	vldr	s14, [pc, #-124]	; 80152a4 <iNemoEngine_API_Update+0x2f4>
 8015320:	601f      	str	r7, [r3, #0]
 8015322:	7963      	ldrb	r3, [r4, #5]
 8015324:	af29      	add	r7, sp, #164	; 0xa4
 8015326:	f10d 0898 	add.w	r8, sp, #152	; 0x98
 801532a:	2b01      	cmp	r3, #1
 801532c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8015330:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8015334:	eec4 2a27 	vdiv.f32	s5, s8, s15
 8015338:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 801533c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8015340:	edcd 4a2d 	vstr	s9, [sp, #180]	; 0xb4
 8015344:	ed8d 5a2e 	vstr	s10, [sp, #184]	; 0xb8
 8015348:	edcd 5a2c 	vstr	s11, [sp, #176]	; 0xb0
 801534c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8015350:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015354:	f000 812e 	beq.w	80155b4 <iNemoEngine_API_Update+0x604>
 8015358:	2b02      	cmp	r3, #2
 801535a:	f000 8122 	beq.w	80155a2 <iNemoEngine_API_Update+0x5f2>
 801535e:	2b00      	cmp	r3, #0
 8015360:	f000 80ef 	beq.w	8015542 <iNemoEngine_API_Update+0x592>
 8015364:	ed94 5a05 	vldr	s10, [r4, #20]
 8015368:	ed5f 0a31 	vldr	s1, [pc, #-196]	; 80152a8 <iNemoEngine_API_Update+0x2f8>
 801536c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8015370:	ee65 0a20 	vmul.f32	s1, s10, s1
 8015374:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015378:	ed1f 0a34 	vldr	s0, [pc, #-208]	; 80152ac <iNemoEngine_API_Update+0x2fc>
 801537c:	8863      	ldrh	r3, [r4, #2]
 801537e:	1e5a      	subs	r2, r3, #1
 8015380:	2a12      	cmp	r2, #18
 8015382:	f200 80e7 	bhi.w	8015554 <iNemoEngine_API_Update+0x5a4>
 8015386:	3301      	adds	r3, #1
 8015388:	b21a      	sxth	r2, r3
 801538a:	b29b      	uxth	r3, r3
 801538c:	2b03      	cmp	r3, #3
 801538e:	8062      	strh	r2, [r4, #2]
 8015390:	f240 8115 	bls.w	80155be <iNemoEngine_API_Update+0x60e>
 8015394:	ee05 2a90 	vmov	s11, r2
 8015398:	ed1f 5a3b 	vldr	s10, [pc, #-236]	; 80152b0 <iNemoEngine_API_Update+0x300>
 801539c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80153a0:	ee65 5a85 	vmul.f32	s11, s11, s10
 80153a4:	ed94 5a0d 	vldr	s10, [r4, #52]	; 0x34
 80153a8:	ed5f 4a3e 	vldr	s9, [pc, #-248]	; 80152b4 <iNemoEngine_API_Update+0x304>
 80153ac:	ee26 6a05 	vmul.f32	s12, s12, s10
 80153b0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80153b4:	ee82 5aa5 	vdiv.f32	s10, s5, s11
 80153b8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80153bc:	ee27 7a24 	vmul.f32	s14, s14, s9
 80153c0:	ed8d 5a20 	vstr	s10, [sp, #128]	; 0x80
 80153c4:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 80153c8:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80153cc:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
 80153d0:	ed8d 6a24 	vstr	s12, [sp, #144]	; 0x90
 80153d4:	ed8d 7a25 	vstr	s14, [sp, #148]	; 0x94
 80153d8:	aa1c      	add	r2, sp, #112	; 0x70
 80153da:	af18      	add	r7, sp, #96	; 0x60
 80153dc:	e9cd 7200 	strd	r7, r2, [sp]
 80153e0:	4641      	mov	r1, r8
 80153e2:	4620      	mov	r0, r4
 80153e4:	ab14      	add	r3, sp, #80	; 0x50
 80153e6:	aa20      	add	r2, sp, #128	; 0x80
 80153e8:	f7fa fe10 	bl	801000c <kalman_3gyro.constprop.0>
 80153ec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80153ee:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 80153f2:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 80153f6:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 80153fa:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 80153fe:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 8015402:	f8c7 a000 	str.w	sl, [r7]
 8015406:	f604 1744 	addw	r7, r4, #2372	; 0x944
 801540a:	f8c7 e000 	str.w	lr, [r7]
 801540e:	f604 1748 	addw	r7, r4, #2376	; 0x948
 8015412:	f8c7 c000 	str.w	ip, [r7]
 8015416:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 801541a:	6030      	str	r0, [r6, #0]
 801541c:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
 8015420:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015422:	60f3      	str	r3, [r6, #12]
 8015424:	6071      	str	r1, [r6, #4]
 8015426:	60b2      	str	r2, [r6, #8]
 8015428:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 801542c:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8015430:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8015434:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8015438:	ed94 8a75 	vldr	s16, [r4, #468]	; 0x1d4
 801543c:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8015440:	edc3 7a00 	vstr	s15, [r3]
 8015444:	f8cb e000 	str.w	lr, [fp]
 8015448:	f8ca c000 	str.w	ip, [sl]
 801544c:	6030      	str	r0, [r6, #0]
 801544e:	e669      	b.n	8015124 <iNemoEngine_API_Update+0x174>
 8015450:	ed5f 7a67 	vldr	s15, [pc, #-412]	; 80152b8 <iNemoEngine_API_Update+0x308>
 8015454:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8015458:	edc5 8a0d 	vstr	s17, [r5, #52]	; 0x34
 801545c:	b043      	add	sp, #268	; 0x10c
 801545e:	ecbd 8b10 	vpop	{d8-d15}
 8015462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015466:	ae10      	add	r6, sp, #64	; 0x40
 8015468:	e5b0      	b.n	8014fcc <iNemoEngine_API_Update+0x1c>
 801546a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801546e:	eea7 6a07 	vfma.f32	s12, s14, s14
 8015472:	eea6 6ae6 	vfms.f32	s12, s13, s13
 8015476:	ee29 8a27 	vmul.f32	s16, s18, s15
 801547a:	eea9 6a49 	vfms.f32	s12, s18, s18
 801547e:	eea7 8a26 	vfma.f32	s16, s14, s13
 8015482:	ee16 0a10 	vmov	r0, s12
 8015486:	f7eb f863 	bl	8000550 <__aeabi_f2d>
 801548a:	ee78 7a08 	vadd.f32	s15, s16, s16
 801548e:	4602      	mov	r2, r0
 8015490:	460b      	mov	r3, r1
 8015492:	ee17 0a90 	vmov	r0, s15
 8015496:	ec43 2b18 	vmov	d8, r2, r3
 801549a:	f7eb f859 	bl	8000550 <__aeabi_f2d>
 801549e:	eeb0 1a48 	vmov.f32	s2, s16
 80154a2:	eef0 1a68 	vmov.f32	s3, s17
 80154a6:	ec41 0b10 	vmov	d0, r0, r1
 80154aa:	f003 fc7b 	bl	8018da4 <atan2>
 80154ae:	a346      	add	r3, pc, #280	; (adr r3, 80155c8 <iNemoEngine_API_Update+0x618>)
 80154b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b4:	ec51 0b10 	vmov	r0, r1, d0
 80154b8:	f7eb f8a2 	bl	8000600 <__aeabi_dmul>
 80154bc:	2200      	movs	r2, #0
 80154be:	4b44      	ldr	r3, [pc, #272]	; (80155d0 <iNemoEngine_API_Update+0x620>)
 80154c0:	f7ea fee6 	bl	8000290 <__aeabi_dsub>
 80154c4:	f7eb fb4c 	bl	8000b60 <__aeabi_d2f>
 80154c8:	ee08 0a90 	vmov	s17, r0
 80154cc:	e6a0      	b.n	8015210 <iNemoEngine_API_Update+0x260>
 80154ce:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80154d2:	eea7 6a07 	vfma.f32	s12, s14, s14
 80154d6:	eea6 6ae6 	vfms.f32	s12, s13, s13
 80154da:	ee29 8a27 	vmul.f32	s16, s18, s15
 80154de:	eea9 6a49 	vfms.f32	s12, s18, s18
 80154e2:	eea7 8a26 	vfma.f32	s16, s14, s13
 80154e6:	ee16 0a10 	vmov	r0, s12
 80154ea:	f7eb f831 	bl	8000550 <__aeabi_f2d>
 80154ee:	ee78 7a08 	vadd.f32	s15, s16, s16
 80154f2:	4602      	mov	r2, r0
 80154f4:	460b      	mov	r3, r1
 80154f6:	ee17 0a90 	vmov	r0, s15
 80154fa:	ec43 2b18 	vmov	d8, r2, r3
 80154fe:	f7eb f827 	bl	8000550 <__aeabi_f2d>
 8015502:	eeb0 1a48 	vmov.f32	s2, s16
 8015506:	eef0 1a68 	vmov.f32	s3, s17
 801550a:	ec41 0b10 	vmov	d0, r0, r1
 801550e:	f003 fc49 	bl	8018da4 <atan2>
 8015512:	a32d      	add	r3, pc, #180	; (adr r3, 80155c8 <iNemoEngine_API_Update+0x618>)
 8015514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015518:	ec51 0b10 	vmov	r0, r1, d0
 801551c:	f7eb f870 	bl	8000600 <__aeabi_dmul>
 8015520:	2200      	movs	r2, #0
 8015522:	4b2b      	ldr	r3, [pc, #172]	; (80155d0 <iNemoEngine_API_Update+0x620>)
 8015524:	f7ea feb6 	bl	8000294 <__adddf3>
 8015528:	f7eb fb1a 	bl	8000b60 <__aeabi_d2f>
 801552c:	ee08 0a90 	vmov	s17, r0
 8015530:	e66e      	b.n	8015210 <iNemoEngine_API_Update+0x260>
 8015532:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 8015536:	2b00      	cmp	r3, #0
 8015538:	dd5c      	ble.n	80155f4 <iNemoEngine_API_Update+0x644>
 801553a:	3b01      	subs	r3, #1
 801553c:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 8015540:	e566      	b.n	8015010 <iNemoEngine_API_Update+0x60>
 8015542:	8863      	ldrh	r3, [r4, #2]
 8015544:	eddf 0a29 	vldr	s1, [pc, #164]	; 80155ec <iNemoEngine_API_Update+0x63c>
 8015548:	1e5a      	subs	r2, r3, #1
 801554a:	2a12      	cmp	r2, #18
 801554c:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80155d4 <iNemoEngine_API_Update+0x624>
 8015550:	f67f af19 	bls.w	8015386 <iNemoEngine_API_Update+0x3d6>
 8015554:	eddf 5a20 	vldr	s11, [pc, #128]	; 80155d8 <iNemoEngine_API_Update+0x628>
 8015558:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 801555c:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 8015560:	ee34 4a25 	vadd.f32	s8, s8, s11
 8015564:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 8015568:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 801556c:	ed9f 3a1b 	vldr	s6, [pc, #108]	; 80155dc <iNemoEngine_API_Update+0x62c>
 8015570:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8015574:	eec2 3a84 	vdiv.f32	s7, s5, s8
 8015578:	ee65 6a26 	vmul.f32	s13, s10, s13
 801557c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8015580:	ee27 7a03 	vmul.f32	s14, s14, s6
 8015584:	2300      	movs	r3, #0
 8015586:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
 801558a:	edcd 3a20 	vstr	s7, [sp, #128]	; 0x80
 801558e:	edcd 4a21 	vstr	s9, [sp, #132]	; 0x84
 8015592:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8015596:	ed8d 6a24 	vstr	s12, [sp, #144]	; 0x90
 801559a:	ed8d 7a25 	vstr	s14, [sp, #148]	; 0x94
 801559e:	8063      	strh	r3, [r4, #2]
 80155a0:	e71a      	b.n	80153d8 <iNemoEngine_API_Update+0x428>
 80155a2:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 80155a6:	edd4 0a05 	vldr	s1, [r4, #20]
 80155aa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80155ae:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80155e0 <iNemoEngine_API_Update+0x630>
 80155b2:	e6e3      	b.n	801537c <iNemoEngine_API_Update+0x3cc>
 80155b4:	edd4 0a05 	vldr	s1, [r4, #20]
 80155b8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80155e4 <iNemoEngine_API_Update+0x634>
 80155bc:	e6de      	b.n	801537c <iNemoEngine_API_Update+0x3cc>
 80155be:	eddf 5a0a 	vldr	s11, [pc, #40]	; 80155e8 <iNemoEngine_API_Update+0x638>
 80155c2:	e6ef      	b.n	80153a4 <iNemoEngine_API_Update+0x3f4>
 80155c4:	f3af 8000 	nop.w
 80155c8:	20000000 	.word	0x20000000
 80155cc:	404ca5dc 	.word	0x404ca5dc
 80155d0:	40568000 	.word	0x40568000
 80155d4:	3a83126f 	.word	0x3a83126f
 80155d8:	358637bd 	.word	0x358637bd
 80155dc:	3f333333 	.word	0x3f333333
 80155e0:	3727c5ac 	.word	0x3727c5ac
 80155e4:	3ac49ba6 	.word	0x3ac49ba6
 80155e8:	3e4ccccd 	.word	0x3e4ccccd
 80155ec:	3dcccccd 	.word	0x3dcccccd
 80155f0:	00000000 	.word	0x00000000
 80155f4:	f504 6ccb 	add.w	ip, r4, #1624	; 0x658
 80155f8:	ed9c 2a00 	vldr	s4, [ip]
 80155fc:	f204 6c4c 	addw	ip, r4, #1612	; 0x64c
 8015600:	eddc 9a00 	vldr	s19, [ip]
 8015604:	f504 6cc6 	add.w	ip, r4, #1584	; 0x630
 8015608:	ed9c 9a00 	vldr	s18, [ip]
 801560c:	f204 6c3c 	addw	ip, r4, #1596	; 0x63c
 8015610:	ed9c 3a00 	vldr	s6, [ip]
 8015614:	f504 6ccc 	add.w	ip, r4, #1632	; 0x660
 8015618:	ed9c 6a00 	vldr	s12, [ip]
 801561c:	f204 6c54 	addw	ip, r4, #1620	; 0x654
 8015620:	eddc 0a00 	vldr	s1, [ip]
 8015624:	f504 6b9e 	add.w	fp, r4, #1264	; 0x4f0
 8015628:	eddb 7a00 	vldr	s15, [fp]
 801562c:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 8015630:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 8015634:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 8015638:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 801563c:	ed93 fa00 	vldr	s30, [r3]
 8015640:	edd7 fa00 	vldr	s31, [r7]
 8015644:	edd0 6a00 	vldr	s13, [r0]
 8015648:	edd2 ba00 	vldr	s23, [r2]
 801564c:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 8015650:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 8015654:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8015658:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 801565c:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 8015660:	ed92 da00 	vldr	s26, [r2]
 8015664:	ed91 ea00 	vldr	s28, [r1]
 8015668:	ed97 7a00 	vldr	s14, [r7]
 801566c:	edd0 da00 	vldr	s27, [r0]
 8015670:	ed93 5a00 	vldr	s10, [r3]
 8015674:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 8015678:	f204 47dc 	addw	r7, r4, #1244	; 0x4dc
 801567c:	f504 609d 	add.w	r0, r4, #1256	; 0x4e8
 8015680:	f504 6298 	add.w	r2, r4, #1216	; 0x4c0
 8015684:	f204 43cc 	addw	r3, r4, #1228	; 0x4cc
 8015688:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 801568c:	ed91 ba00 	vldr	s22, [r1]
 8015690:	edd7 aa00 	vldr	s21, [r7]
 8015694:	ed90 1a00 	vldr	s2, [r0]
 8015698:	ed92 aa00 	vldr	s20, [r2]
 801569c:	edd3 2a00 	vldr	s5, [r3]
 80156a0:	edcd 0a03 	vstr	s1, [sp, #12]
 80156a4:	f204 41b4 	addw	r1, r4, #1204	; 0x4b4
 80156a8:	eddc 0a00 	vldr	s1, [ip]
 80156ac:	f204 77a4 	addw	r7, r4, #1956	; 0x7a4
 80156b0:	f504 60f9 	add.w	r0, r4, #1992	; 0x7c8
 80156b4:	f504 62f5 	add.w	r2, r4, #1960	; 0x7a8
 80156b8:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 80156bc:	f204 4ae4 	addw	sl, r4, #1252	; 0x4e4
 80156c0:	f204 6924 	addw	r9, r4, #1572	; 0x624
 80156c4:	f504 68c5 	add.w	r8, r4, #1576	; 0x628
 80156c8:	f204 6e34 	addw	lr, r4, #1588	; 0x634
 80156cc:	f504 6cf3 	add.w	ip, r4, #1944	; 0x798
 80156d0:	eef8 4a00 	vmov.f32	s9, #128	; 0xc0000000 -2.0
 80156d4:	edd1 3a00 	vldr	s7, [r1]
 80156d8:	edd8 ca00 	vldr	s25, [r8]
 80156dc:	ed9c ca00 	vldr	s24, [ip]
 80156e0:	edcd 7a02 	vstr	s15, [sp, #8]
 80156e4:	edda 1a00 	vldr	s3, [sl]
 80156e8:	ed99 4a00 	vldr	s8, [r9]
 80156ec:	edde 5a00 	vldr	s11, [lr]
 80156f0:	ed8d 6a04 	vstr	s12, [sp, #16]
 80156f4:	ed97 6a00 	vldr	s12, [r7]
 80156f8:	ed90 0a00 	vldr	s0, [r0]
 80156fc:	edd3 ea00 	vldr	s29, [r3]
 8015700:	edd2 7a00 	vldr	s15, [r2]
 8015704:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
 8015708:	ee9d 5a24 	vfnms.f32	s10, s26, s9
 801570c:	ee9f 7a24 	vfnms.f32	s14, s30, s9
 8015710:	eede 7aa4 	vfnms.f32	s15, s29, s9
 8015714:	eedf 6aa4 	vfnms.f32	s13, s31, s9
 8015718:	edd3 ea00 	vldr	s29, [r3]
 801571c:	f204 71bc 	addw	r1, r4, #1980	; 0x7bc
 8015720:	ed8d 0a05 	vstr	s0, [sp, #20]
 8015724:	f504 62f4 	add.w	r2, r4, #1952	; 0x7a0
 8015728:	ed91 0a00 	vldr	s0, [r1]
 801572c:	f204 73ac 	addw	r3, r4, #1964	; 0x7ac
 8015730:	f204 71cc 	addw	r1, r4, #1996	; 0x7cc
 8015734:	eeb0 fa00 	vmov.f32	s30, #0	; 0x40000000  2.0
 8015738:	ed92 da00 	vldr	s26, [r2]
 801573c:	eedc 5aa4 	vfnms.f32	s11, s25, s9
 8015740:	ee9c 6a24 	vfnms.f32	s12, s24, s9
 8015744:	edd3 ca00 	vldr	s25, [r3]
 8015748:	ed1f ca58 	vldr	s24, [pc, #-352]	; 80155ec <iNemoEngine_API_Update+0x63c>
 801574c:	ee77 7aae 	vadd.f32	s15, s15, s29
 8015750:	ee75 aa2a 	vadd.f32	s21, s10, s21
 8015754:	edd1 ea00 	vldr	s29, [r1]
 8015758:	eeda 2a24 	vfnms.f32	s5, s20, s9
 801575c:	ee99 3a24 	vfnms.f32	s6, s18, s9
 8015760:	ed9d 5a03 	vldr	s10, [sp, #12]
 8015764:	ee76 6a8e 	vadd.f32	s13, s13, s28
 8015768:	ee37 7a2d 	vadd.f32	s14, s14, s27
 801576c:	f204 73c4 	addw	r3, r4, #1988	; 0x7c4
 8015770:	ee63 3a8c 	vmul.f32	s7, s7, s24
 8015774:	ee24 4a0c 	vmul.f32	s8, s8, s24
 8015778:	ee60 0a8c 	vmul.f32	s1, s1, s24
 801577c:	ee75 9aa9 	vadd.f32	s19, s11, s19
 8015780:	ee36 0a00 	vadd.f32	s0, s12, s0
 8015784:	eedd ca24 	vfnms.f32	s25, s26, s9
 8015788:	ee33 3a05 	vadd.f32	s6, s6, s10
 801578c:	edd3 4a00 	vldr	s9, [r3]
 8015790:	ed9d 5a05 	vldr	s10, [sp, #20]
 8015794:	eddd 5a02 	vldr	s11, [sp, #8]
 8015798:	eeeb 6a8f 	vfma.f32	s13, s23, s30
 801579c:	eeab 7a0f 	vfma.f32	s14, s22, s30
 80157a0:	eeee 7a8f 	vfma.f32	s15, s29, s30
 80157a4:	ee72 2aa1 	vadd.f32	s5, s5, s3
 80157a8:	f504 63fa 	add.w	r3, r4, #2000	; 0x7d0
 80157ac:	ed93 6a00 	vldr	s12, [r3]
 80157b0:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80157b4:	ee24 7a07 	vmul.f32	s14, s8, s14
 80157b8:	eee5 2a8f 	vfma.f32	s5, s11, s30
 80157bc:	eee1 aa0f 	vfma.f32	s21, s2, s30
 80157c0:	eddd 5a04 	vldr	s11, [sp, #16]
 80157c4:	eee2 9a0f 	vfma.f32	s19, s4, s30
 80157c8:	eea5 0a0f 	vfma.f32	s0, s10, s30
 80157cc:	ee7c 4aa4 	vadd.f32	s9, s25, s9
 80157d0:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80157d4:	eea5 3a8f 	vfma.f32	s6, s11, s30
 80157d8:	eee6 4a0f 	vfma.f32	s9, s12, s30
 80157dc:	ee6a aaa3 	vmul.f32	s21, s21, s7
 80157e0:	ee24 6a29 	vmul.f32	s12, s8, s19
 80157e4:	ee20 5a80 	vmul.f32	s10, s1, s0
 80157e8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80157ec:	ee27 7a07 	vmul.f32	s14, s14, s14
 80157f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80157f4:	ee63 5aa2 	vmul.f32	s11, s7, s5
 80157f8:	eea6 7a06 	vfma.f32	s14, s12, s12
 80157fc:	eee5 7a05 	vfma.f32	s15, s10, s10
 8015800:	ee24 6a03 	vmul.f32	s12, s8, s6
 8015804:	ee60 4aa4 	vmul.f32	s9, s1, s9
 8015808:	eeea 6aaa 	vfma.f32	s13, s21, s21
 801580c:	eea6 7a06 	vfma.f32	s14, s12, s12
 8015810:	eee5 6aa5 	vfma.f32	s13, s11, s11
 8015814:	eee4 7aa4 	vfma.f32	s15, s9, s9
 8015818:	f9b4 3976 	ldrsh.w	r3, [r4, #2422]	; 0x976
 801581c:	eeb1 6ae6 	vsqrt.f32	s12, s13
 8015820:	eef1 6ac7 	vsqrt.f32	s13, s14
 8015824:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8015828:	ee07 3a90 	vmov	s15, r3
 801582c:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 8015830:	1c5a      	adds	r2, r3, #1
 8015832:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8015836:	ee05 2a10 	vmov	s10, r2
 801583a:	edd7 7a00 	vldr	s15, [r7]
 801583e:	f604 1068 	addw	r0, r4, #2408	; 0x968
 8015842:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 8015846:	edd0 3a00 	vldr	s7, [r0]
 801584a:	ed91 4a00 	vldr	s8, [r1]
 801584e:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8015852:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015856:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 801585a:	eef0 7a46 	vmov.f32	s15, s12
 801585e:	eee5 6aa3 	vfma.f32	s13, s11, s7
 8015862:	ee84 6a85 	vdiv.f32	s12, s9, s10
 8015866:	eea5 7a84 	vfma.f32	s14, s11, s8
 801586a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801586e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015872:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015876:	b213      	sxth	r3, r2
 8015878:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801587c:	edc7 7a00 	vstr	s15, [r7]
 8015880:	edc0 6a00 	vstr	s13, [r0]
 8015884:	ed81 7a00 	vstr	s14, [r1]
 8015888:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 801588c:	f47f abc0 	bne.w	8015010 <iNemoEngine_API_Update+0x60>
 8015890:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015894:	2300      	movs	r3, #0
 8015896:	2200      	movs	r2, #0
 8015898:	ee66 6a86 	vmul.f32	s13, s13, s12
 801589c:	ee27 7a06 	vmul.f32	s14, s14, s12
 80158a0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80158a4:	edc4 6a07 	vstr	s13, [r4, #28]
 80158a8:	ed84 7a08 	vstr	s14, [r4, #32]
 80158ac:	edc4 7a06 	vstr	s15, [r4, #24]
 80158b0:	603b      	str	r3, [r7, #0]
 80158b2:	6003      	str	r3, [r0, #0]
 80158b4:	600b      	str	r3, [r1, #0]
 80158b6:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 80158ba:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 80158be:	f7ff bba7 	b.w	8015010 <iNemoEngine_API_Update+0x60>
 80158c2:	ed5f 8ab5 	vldr	s17, [pc, #-724]	; 80155f0 <iNemoEngine_API_Update+0x640>
 80158c6:	e4b2      	b.n	801522e <iNemoEngine_API_Update+0x27e>

080158c8 <MEMS_getSensorData_I16>:
 80158c8:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80158cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80158d0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80158d4:	68c5      	ldr	r5, [r0, #12]
 80158d6:	f10c 33ff 	add.w	r3, ip, #4294967295
 80158da:	4594      	cmp	ip, r2
 80158dc:	fb04 5313 	mls	r3, r4, r3, r5
 80158e0:	fa1f f982 	uxth.w	r9, r2
 80158e4:	d933      	bls.n	801594e <MEMS_getSensorData_I16+0x86>
 80158e6:	ebac 0802 	sub.w	r8, ip, r2
 80158ea:	f8a1 9004 	strh.w	r9, [r1, #4]
 80158ee:	600b      	str	r3, [r1, #0]
 80158f0:	fa5f f888 	uxtb.w	r8, r8
 80158f4:	f1b9 0f00 	cmp.w	r9, #0
 80158f8:	d001      	beq.n	80158fe <MEMS_getSensorData_I16+0x36>
 80158fa:	46ce      	mov	lr, r9
 80158fc:	e030      	b.n	8015960 <MEMS_getSensorData_I16+0x98>
 80158fe:	ebac 0309 	sub.w	r3, ip, r9
 8015902:	b29b      	uxth	r3, r3
 8015904:	8103      	strh	r3, [r0, #8]
 8015906:	f1b8 0f00 	cmp.w	r8, #0
 801590a:	d01e      	beq.n	801594a <MEMS_getSensorData_I16+0x82>
 801590c:	2400      	movs	r4, #0
 801590e:	6903      	ldr	r3, [r0, #16]
 8015910:	f108 38ff 	add.w	r8, r8, #4294967295
 8015914:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8015918:	f103 000a 	add.w	r0, r3, #10
 801591c:	fa5f f888 	uxtb.w	r8, r8
 8015920:	3202      	adds	r2, #2
 8015922:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 8015926:	3302      	adds	r3, #2
 8015928:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801592c:	3308      	adds	r3, #8
 801592e:	f803 1c0a 	strb.w	r1, [r3, #-10]
 8015932:	6811      	ldr	r1, [r2, #0]
 8015934:	3208      	adds	r2, #8
 8015936:	f843 1c08 	str.w	r1, [r3, #-8]
 801593a:	f932 1c04 	ldrsh.w	r1, [r2, #-4]
 801593e:	f823 1c04 	strh.w	r1, [r3, #-4]
 8015942:	4283      	cmp	r3, r0
 8015944:	f802 4c0a 	strb.w	r4, [r2, #-10]
 8015948:	d1ee      	bne.n	8015928 <MEMS_getSensorData_I16+0x60>
 801594a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801594e:	f8a1 c004 	strh.w	ip, [r1, #4]
 8015952:	600b      	str	r3, [r1, #0]
 8015954:	f1bc 0f00 	cmp.w	ip, #0
 8015958:	d01c      	beq.n	8015994 <MEMS_getSensorData_I16+0xcc>
 801595a:	46e6      	mov	lr, ip
 801595c:	f04f 0800 	mov.w	r8, #0
 8015960:	2300      	movs	r3, #0
 8015962:	688e      	ldr	r6, [r1, #8]
 8015964:	6905      	ldr	r5, [r0, #16]
 8015966:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 801596a:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801596e:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 8015972:	f8d4 7002 	ldr.w	r7, [r4, #2]
 8015976:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 801597a:	f8c1 7002 	str.w	r7, [r1, #2]
 801597e:	3301      	adds	r3, #1
 8015980:	88e7      	ldrh	r7, [r4, #6]
 8015982:	b2dc      	uxtb	r4, r3
 8015984:	4574      	cmp	r4, lr
 8015986:	4623      	mov	r3, r4
 8015988:	80cf      	strh	r7, [r1, #6]
 801598a:	d3ec      	bcc.n	8015966 <MEMS_getSensorData_I16+0x9e>
 801598c:	45cc      	cmp	ip, r9
 801598e:	d8b6      	bhi.n	80158fe <MEMS_getSensorData_I16+0x36>
 8015990:	2300      	movs	r3, #0
 8015992:	e7b7      	b.n	8015904 <MEMS_getSensorData_I16+0x3c>
 8015994:	f8a0 c008 	strh.w	ip, [r0, #8]
 8015998:	e7d7      	b.n	801594a <MEMS_getSensorData_I16+0x82>
 801599a:	bf00      	nop

0801599c <MEMS_SolveLinearEq>:
 801599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159a0:	ed2d 8b0a 	vpush	{d8-d12}
 80159a4:	2400      	movs	r4, #0
 80159a6:	461e      	mov	r6, r3
 80159a8:	2300      	movs	r3, #0
 80159aa:	460d      	mov	r5, r1
 80159ac:	b0a9      	sub	sp, #164	; 0xa4
 80159ae:	6033      	str	r3, [r6, #0]
 80159b0:	4621      	mov	r1, r4
 80159b2:	6014      	str	r4, [r2, #0]
 80159b4:	6054      	str	r4, [r2, #4]
 80159b6:	6094      	str	r4, [r2, #8]
 80159b8:	60d4      	str	r4, [r2, #12]
 80159ba:	4617      	mov	r7, r2
 80159bc:	4680      	mov	r8, r0
 80159be:	2240      	movs	r2, #64	; 0x40
 80159c0:	a808      	add	r0, sp, #32
 80159c2:	eeb0 8a40 	vmov.f32	s16, s0
 80159c6:	e9cd 4400 	strd	r4, r4, [sp]
 80159ca:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80159ce:	f004 ff14 	bl	801a7fa <memset>
 80159d2:	4621      	mov	r1, r4
 80159d4:	2240      	movs	r2, #64	; 0x40
 80159d6:	a818      	add	r0, sp, #96	; 0x60
 80159d8:	f004 ff0f 	bl	801a7fa <memset>
 80159dc:	ed95 3a03 	vldr	s6, [r5, #12]
 80159e0:	eddf 7ae9 	vldr	s15, [pc, #932]	; 8015d88 <MEMS_SolveLinearEq+0x3ec>
 80159e4:	eeb4 3ae7 	vcmpe.f32	s6, s15
 80159e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ec:	d478      	bmi.n	8015ae0 <MEMS_SolveLinearEq+0x144>
 80159ee:	f898 1000 	ldrb.w	r1, [r8]
 80159f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80159f6:	f998 3002 	ldrsb.w	r3, [r8, #2]
 80159fa:	4291      	cmp	r1, r2
 80159fc:	d076      	beq.n	8015aec <MEMS_SolveLinearEq+0x150>
 80159fe:	3301      	adds	r3, #1
 8015a00:	1a58      	subs	r0, r3, r1
 8015a02:	fb90 f3f2 	sdiv	r3, r0, r2
 8015a06:	fb02 0313 	mls	r3, r2, r3, r0
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	bfb8      	it	lt
 8015a0e:	189b      	addlt	r3, r3, r2
 8015a10:	b21b      	sxth	r3, r3
 8015a12:	2900      	cmp	r1, #0
 8015a14:	f000 81d1 	beq.w	8015dba <MEMS_SolveLinearEq+0x41e>
 8015a18:	edd5 3a00 	vldr	s7, [r5]
 8015a1c:	ed95 4a01 	vldr	s8, [r5, #4]
 8015a20:	edd5 4a02 	vldr	s9, [r5, #8]
 8015a24:	eddf 2ad9 	vldr	s5, [pc, #868]	; 8015d8c <MEMS_SolveLinearEq+0x3f0>
 8015a28:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8015a2c:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8015a30:	3901      	subs	r1, #1
 8015a32:	b2c9      	uxtb	r1, r1
 8015a34:	3101      	adds	r1, #1
 8015a36:	4419      	add	r1, r3
 8015a38:	fb93 f4f2 	sdiv	r4, r3, r2
 8015a3c:	fb02 3414 	mls	r4, r2, r4, r3
 8015a40:	b2e4      	uxtb	r4, r4
 8015a42:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 8015a46:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 8015a4a:	ee07 0a10 	vmov	s14, r0
 8015a4e:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8015a52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015a56:	ee06 0a90 	vmov	s13, r0
 8015a5a:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 8015a5e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015a62:	ee27 7a08 	vmul.f32	s14, s14, s16
 8015a66:	ee07 0a90 	vmov	s15, r0
 8015a6a:	ee37 6a44 	vsub.f32	s12, s14, s8
 8015a6e:	ee66 6a88 	vmul.f32	s13, s13, s16
 8015a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a76:	ee36 5ae3 	vsub.f32	s10, s13, s7
 8015a7a:	ee26 6a06 	vmul.f32	s12, s12, s12
 8015a7e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015a82:	eea5 6a05 	vfma.f32	s12, s10, s10
 8015a86:	ee37 5ae4 	vsub.f32	s10, s15, s9
 8015a8a:	eea5 6a05 	vfma.f32	s12, s10, s10
 8015a8e:	eeb4 6ae2 	vcmpe.f32	s12, s5
 8015a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a96:	d531      	bpl.n	8015afc <MEMS_SolveLinearEq+0x160>
 8015a98:	3301      	adds	r3, #1
 8015a9a:	4299      	cmp	r1, r3
 8015a9c:	d1cc      	bne.n	8015a38 <MEMS_SolveLinearEq+0x9c>
 8015a9e:	eef0 7a65 	vmov.f32	s15, s11
 8015aa2:	2101      	movs	r1, #1
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	4608      	mov	r0, r1
 8015aa8:	e006      	b.n	8015ab8 <MEMS_SolveLinearEq+0x11c>
 8015aaa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8015aae:	ac28      	add	r4, sp, #160	; 0xa0
 8015ab0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015ab4:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 8015ab8:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8015abc:	3001      	adds	r0, #1
 8015abe:	ac28      	add	r4, sp, #160	; 0xa0
 8015ac0:	b2c0      	uxtb	r0, r0
 8015ac2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015ac6:	2804      	cmp	r0, #4
 8015ac8:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 8015acc:	4613      	mov	r3, r2
 8015ace:	d1ec      	bne.n	8015aaa <MEMS_SolveLinearEq+0x10e>
 8015ad0:	1c48      	adds	r0, r1, #1
 8015ad2:	b2c0      	uxtb	r0, r0
 8015ad4:	2804      	cmp	r0, #4
 8015ad6:	d07c      	beq.n	8015bd2 <MEMS_SolveLinearEq+0x236>
 8015ad8:	460b      	mov	r3, r1
 8015ada:	460a      	mov	r2, r1
 8015adc:	4601      	mov	r1, r0
 8015ade:	e7e4      	b.n	8015aaa <MEMS_SolveLinearEq+0x10e>
 8015ae0:	2000      	movs	r0, #0
 8015ae2:	b029      	add	sp, #164	; 0xa4
 8015ae4:	ecbd 8b0a 	vpop	{d8-d12}
 8015ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aec:	1c5a      	adds	r2, r3, #1
 8015aee:	fb92 f3f1 	sdiv	r3, r2, r1
 8015af2:	fb01 2313 	mls	r3, r1, r3, r2
 8015af6:	460a      	mov	r2, r1
 8015af8:	b21b      	sxth	r3, r3
 8015afa:	e78a      	b.n	8015a12 <MEMS_SolveLinearEq+0x76>
 8015afc:	eeb1 5ac6 	vsqrt.f32	s10, s12
 8015b00:	ee73 6ae6 	vsub.f32	s13, s7, s13
 8015b04:	ee82 6a05 	vdiv.f32	s12, s4, s10
 8015b08:	ee34 7a47 	vsub.f32	s14, s8, s14
 8015b0c:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8015b10:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015b14:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015b18:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015b1c:	ee33 ca45 	vsub.f32	s24, s6, s10
 8015b20:	ed9d ba00 	vldr	s22, [sp]
 8015b24:	eddd ca03 	vldr	s25, [sp, #12]
 8015b28:	eddd aa08 	vldr	s21, [sp, #32]
 8015b2c:	ed9d aa0a 	vldr	s20, [sp, #40]	; 0x28
 8015b30:	eddd ba0b 	vldr	s23, [sp, #44]	; 0x2c
 8015b34:	eddd 9a01 	vldr	s19, [sp, #4]
 8015b38:	ed9d 9a02 	vldr	s18, [sp, #8]
 8015b3c:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 8015b40:	ed9d 0a0e 	vldr	s0, [sp, #56]	; 0x38
 8015b44:	eddd 0a0f 	vldr	s1, [sp, #60]	; 0x3c
 8015b48:	ed9d 1a12 	vldr	s2, [sp, #72]	; 0x48
 8015b4c:	eddd 1a13 	vldr	s3, [sp, #76]	; 0x4c
 8015b50:	ed9d 6a17 	vldr	s12, [sp, #92]	; 0x5c
 8015b54:	ee35 5a43 	vsub.f32	s10, s10, s6
 8015b58:	eee6 5a87 	vfma.f32	s11, s13, s14
 8015b5c:	eea6 aaa7 	vfma.f32	s20, s13, s15
 8015b60:	eea7 0a27 	vfma.f32	s0, s14, s15
 8015b64:	eeac ba26 	vfma.f32	s22, s24, s13
 8015b68:	eee6 aaa6 	vfma.f32	s21, s13, s13
 8015b6c:	eeec 9a07 	vfma.f32	s19, s24, s14
 8015b70:	eeac 9a27 	vfma.f32	s18, s24, s15
 8015b74:	eee7 8a07 	vfma.f32	s17, s14, s14
 8015b78:	eea7 1aa7 	vfma.f32	s2, s15, s15
 8015b7c:	ee3c 5a85 	vadd.f32	s10, s25, s10
 8015b80:	ee7b 6ae6 	vsub.f32	s13, s23, s13
 8015b84:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8015b88:	ee71 7ae7 	vsub.f32	s15, s3, s15
 8015b8c:	ee36 6a02 	vadd.f32	s12, s12, s4
 8015b90:	3301      	adds	r3, #1
 8015b92:	428b      	cmp	r3, r1
 8015b94:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8015b98:	ed8d ba00 	vstr	s22, [sp]
 8015b9c:	ed8d 5a03 	vstr	s10, [sp, #12]
 8015ba0:	edcd aa08 	vstr	s21, [sp, #32]
 8015ba4:	ed8d aa0a 	vstr	s20, [sp, #40]	; 0x28
 8015ba8:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 8015bac:	edcd 9a01 	vstr	s19, [sp, #4]
 8015bb0:	ed8d 9a02 	vstr	s18, [sp, #8]
 8015bb4:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 8015bb8:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38
 8015bbc:	ed8d 7a0f 	vstr	s14, [sp, #60]	; 0x3c
 8015bc0:	ed8d 1a12 	vstr	s2, [sp, #72]	; 0x48
 8015bc4:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 8015bc8:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 8015bcc:	f47f af34 	bne.w	8015a38 <MEMS_SolveLinearEq+0x9c>
 8015bd0:	e765      	b.n	8015a9e <MEMS_SolveLinearEq+0x102>
 8015bd2:	2240      	movs	r2, #64	; 0x40
 8015bd4:	2100      	movs	r1, #0
 8015bd6:	a818      	add	r0, sp, #96	; 0x60
 8015bd8:	f004 fe0f 	bl	801a7fa <memset>
 8015bdc:	ab08      	add	r3, sp, #32
 8015bde:	4618      	mov	r0, r3
 8015be0:	2100      	movs	r1, #0
 8015be2:	eddf 5a6b 	vldr	s11, [pc, #428]	; 8015d90 <MEMS_SolveLinearEq+0x3f4>
 8015be6:	aa18      	add	r2, sp, #96	; 0x60
 8015be8:	b24c      	sxtb	r4, r1
 8015bea:	2900      	cmp	r1, #0
 8015bec:	f000 80b0 	beq.w	8015d50 <MEMS_SolveLinearEq+0x3b4>
 8015bf0:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8015bf4:	eeb0 7ae7 	vabs.f32	s14, s15
 8015bf8:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8015bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c00:	f53f af6e 	bmi.w	8015ae0 <MEMS_SolveLinearEq+0x144>
 8015c04:	ed93 7a00 	vldr	s14, [r3]
 8015c08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015c0c:	edc2 6a00 	vstr	s13, [r2]
 8015c10:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8015c14:	2c01      	cmp	r4, #1
 8015c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015c1a:	f000 80a6 	beq.w	8015d6a <MEMS_SolveLinearEq+0x3ce>
 8015c1e:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 8015c22:	eeb0 7ac6 	vabs.f32	s14, s12
 8015c26:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8015c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c2e:	f53f af57 	bmi.w	8015ae0 <MEMS_SolveLinearEq+0x144>
 8015c32:	ed93 7a01 	vldr	s14, [r3, #4]
 8015c36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015c3a:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8015c3e:	edc2 7a01 	vstr	s15, [r2, #4]
 8015c42:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8015c46:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 8015c4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015c4e:	2c02      	cmp	r4, #2
 8015c50:	eea6 7a26 	vfma.f32	s14, s12, s13
 8015c54:	f000 80a2 	beq.w	8015d9c <MEMS_SolveLinearEq+0x400>
 8015c58:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8015c5c:	eeb0 6ac5 	vabs.f32	s12, s10
 8015c60:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8015c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c68:	f53f af3a 	bmi.w	8015ae0 <MEMS_SolveLinearEq+0x144>
 8015c6c:	ed93 6a02 	vldr	s12, [r3, #8]
 8015c70:	ee36 7a47 	vsub.f32	s14, s12, s14
 8015c74:	ee87 6a05 	vdiv.f32	s12, s14, s10
 8015c78:	ed82 6a02 	vstr	s12, [r2, #8]
 8015c7c:	ed9d 5a25 	vldr	s10, [sp, #148]	; 0x94
 8015c80:	ed9d 7a24 	vldr	s14, [sp, #144]	; 0x90
 8015c84:	ee67 7a85 	vmul.f32	s15, s15, s10
 8015c88:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015c8c:	eddd 6a26 	vldr	s13, [sp, #152]	; 0x98
 8015c90:	ed90 7a00 	vldr	s14, [r0]
 8015c94:	eee6 7a26 	vfma.f32	s15, s12, s13
 8015c98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ca0:	f77f af1e 	ble.w	8015ae0 <MEMS_SolveLinearEq+0x144>
 8015ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ca8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8015cac:	ed82 7a03 	vstr	s14, [r2, #12]
 8015cb0:	3101      	adds	r1, #1
 8015cb2:	2904      	cmp	r1, #4
 8015cb4:	f103 0310 	add.w	r3, r3, #16
 8015cb8:	f102 0210 	add.w	r2, r2, #16
 8015cbc:	f100 0014 	add.w	r0, r0, #20
 8015cc0:	d192      	bne.n	8015be8 <MEMS_SolveLinearEq+0x24c>
 8015cc2:	466a      	mov	r2, sp
 8015cc4:	4639      	mov	r1, r7
 8015cc6:	a818      	add	r0, sp, #96	; 0x60
 8015cc8:	f7f9 faea 	bl	800f2a0 <llEvaluate.constprop.0>
 8015ccc:	46e8      	mov	r8, sp
 8015cce:	2400      	movs	r4, #0
 8015cd0:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8015cd4:	eeb2 4a04 	vmov.f32	s8, #36	; 0x41200000  10.0
 8015cd8:	4b2e      	ldr	r3, [pc, #184]	; (8015d94 <MEMS_SolveLinearEq+0x3f8>)
 8015cda:	f10d 0910 	add.w	r9, sp, #16
 8015cde:	6033      	str	r3, [r6, #0]
 8015ce0:	f10d 0b0c 	add.w	fp, sp, #12
 8015ce4:	e9cd 4400 	strd	r4, r4, [sp]
 8015ce8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8015cec:	466a      	mov	r2, sp
 8015cee:	a904      	add	r1, sp, #16
 8015cf0:	a818      	add	r0, sp, #96	; 0x60
 8015cf2:	f848 ab04 	str.w	sl, [r8], #4
 8015cf6:	f7f9 fad3 	bl	800f2a0 <llEvaluate.constprop.0>
 8015cfa:	ecf9 7a01 	vldmia	r9!, {s15}
 8015cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d06:	dd1e      	ble.n	8015d46 <MEMS_SolveLinearEq+0x3aa>
 8015d08:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8015d0c:	edd6 7a00 	vldr	s15, [r6]
 8015d10:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8015d14:	45c3      	cmp	fp, r8
 8015d16:	edc6 7a00 	vstr	s15, [r6]
 8015d1a:	d1e3      	bne.n	8015ce4 <MEMS_SolveLinearEq+0x348>
 8015d1c:	edd5 7a03 	vldr	s15, [r5, #12]
 8015d20:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8015d24:	ed97 7a03 	vldr	s14, [r7, #12]
 8015d28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015d2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015d30:	2001      	movs	r0, #1
 8015d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d36:	bf48      	it	mi
 8015d38:	edc7 7a03 	vstrmi	s15, [r7, #12]
 8015d3c:	b029      	add	sp, #164	; 0xa4
 8015d3e:	ecbd 8b0a 	vpop	{d8-d12}
 8015d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d46:	45c3      	cmp	fp, r8
 8015d48:	ed86 4a00 	vstr	s8, [r6]
 8015d4c:	d1ca      	bne.n	8015ce4 <MEMS_SolveLinearEq+0x348>
 8015d4e:	e7e5      	b.n	8015d1c <MEMS_SolveLinearEq+0x380>
 8015d50:	edd0 7a00 	vldr	s15, [r0]
 8015d54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d5c:	f77f aec0 	ble.w	8015ae0 <MEMS_SolveLinearEq+0x144>
 8015d60:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8015d64:	ed82 7a00 	vstr	s14, [r2]
 8015d68:	e7a2      	b.n	8015cb0 <MEMS_SolveLinearEq+0x314>
 8015d6a:	ed90 7a00 	vldr	s14, [r0]
 8015d6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d76:	f77f aeb3 	ble.w	8015ae0 <MEMS_SolveLinearEq+0x144>
 8015d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d7e:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8015d82:	ed82 7a01 	vstr	s14, [r2, #4]
 8015d86:	e793      	b.n	8015cb0 <MEMS_SolveLinearEq+0x314>
 8015d88:	3dcccccd 	.word	0x3dcccccd
 8015d8c:	2b8cbccb 	.word	0x2b8cbccb
 8015d90:	358637bd 	.word	0x358637bd
 8015d94:	3dcccccd 	.word	0x3dcccccd
 8015d98:	00000000 	.word	0x00000000
 8015d9c:	edd0 7a00 	vldr	s15, [r0]
 8015da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015da8:	f77f ae9a 	ble.w	8015ae0 <MEMS_SolveLinearEq+0x144>
 8015dac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015db0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8015db4:	ed82 7a02 	vstr	s14, [r2, #8]
 8015db8:	e77a      	b.n	8015cb0 <MEMS_SolveLinearEq+0x314>
 8015dba:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8015d98 <MEMS_SolveLinearEq+0x3fc>
 8015dbe:	e670      	b.n	8015aa2 <MEMS_SolveLinearEq+0x106>

08015dc0 <MEMS_EIG3>:
 8015dc0:	edd0 6a02 	vldr	s13, [r0, #8]
 8015dc4:	ed90 7a01 	vldr	s14, [r0, #4]
 8015dc8:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8015dcc:	edd0 3a04 	vldr	s7, [r0, #16]
 8015dd0:	eee7 7a07 	vfma.f32	s15, s14, s14
 8015dd4:	ed9f 6a51 	vldr	s12, [pc, #324]	; 8015f1c <MEMS_EIG3+0x15c>
 8015dd8:	eee3 7aa3 	vfma.f32	s15, s7, s7
 8015ddc:	eef4 7ac6 	vcmpe.f32	s15, s12
 8015de0:	b510      	push	{r4, lr}
 8015de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015de6:	ed2d 8b04 	vpush	{d8-d9}
 8015dea:	460c      	mov	r4, r1
 8015dec:	b08a      	sub	sp, #40	; 0x28
 8015dee:	d509      	bpl.n	8015e04 <MEMS_EIG3+0x44>
 8015df0:	6803      	ldr	r3, [r0, #0]
 8015df2:	600b      	str	r3, [r1, #0]
 8015df4:	68c3      	ldr	r3, [r0, #12]
 8015df6:	604b      	str	r3, [r1, #4]
 8015df8:	6943      	ldr	r3, [r0, #20]
 8015dfa:	608b      	str	r3, [r1, #8]
 8015dfc:	b00a      	add	sp, #40	; 0x28
 8015dfe:	ecbd 8b04 	vpop	{d8-d9}
 8015e02:	bd10      	pop	{r4, pc}
 8015e04:	edd0 4a00 	vldr	s9, [r0]
 8015e08:	edd0 5a03 	vldr	s11, [r0, #12]
 8015e0c:	ed90 4a05 	vldr	s8, [r0, #20]
 8015e10:	ee34 8aa5 	vadd.f32	s16, s9, s11
 8015e14:	eddf 9a42 	vldr	s19, [pc, #264]	; 8015f20 <MEMS_EIG3+0x160>
 8015e18:	ee38 8a04 	vadd.f32	s16, s16, s8
 8015e1c:	ee28 8a29 	vmul.f32	s16, s16, s19
 8015e20:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8015e24:	ee74 4ac8 	vsub.f32	s9, s9, s16
 8015e28:	ee25 5aa5 	vmul.f32	s10, s11, s11
 8015e2c:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 8015e30:	eea4 5aa4 	vfma.f32	s10, s9, s9
 8015e34:	eea7 5a83 	vfma.f32	s10, s15, s6
 8015e38:	ee34 4a48 	vsub.f32	s8, s8, s16
 8015e3c:	eef0 7a45 	vmov.f32	s15, s10
 8015e40:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8015f24 <MEMS_EIG3+0x164>
 8015e44:	eee4 7a04 	vfma.f32	s15, s8, s8
 8015e48:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015e4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015e50:	eef1 8ae7 	vsqrt.f32	s17, s15
 8015e54:	ee80 6a28 	vdiv.f32	s12, s0, s17
 8015e58:	ee66 6a26 	vmul.f32	s13, s12, s13
 8015e5c:	ee65 5a86 	vmul.f32	s11, s11, s12
 8015e60:	ee26 7a07 	vmul.f32	s14, s12, s14
 8015e64:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 8015e68:	ee26 6a23 	vmul.f32	s12, s12, s7
 8015e6c:	ee84 5a28 	vdiv.f32	s10, s8, s17
 8015e70:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015e74:	ee26 4a46 	vnmul.f32	s8, s12, s12
 8015e78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015e7c:	eea5 4a85 	vfma.f32	s8, s11, s10
 8015e80:	eec4 3aa8 	vdiv.f32	s7, s9, s17
 8015e84:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8015e88:	eee4 7a23 	vfma.f32	s15, s8, s7
 8015e8c:	eea6 5a26 	vfma.f32	s10, s12, s13
 8015e90:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 8015e94:	eee5 7a07 	vfma.f32	s15, s10, s14
 8015e98:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ea0:	d909      	bls.n	8015eb6 <MEMS_EIG3+0xf6>
 8015ea2:	eef4 7ac3 	vcmpe.f32	s15, s6
 8015ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eaa:	db22      	blt.n	8015ef2 <MEMS_EIG3+0x132>
 8015eac:	eeb0 9a40 	vmov.f32	s18, s0
 8015eb0:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8015f28 <MEMS_EIG3+0x168>
 8015eb4:	e003      	b.n	8015ebe <MEMS_EIG3+0xfe>
 8015eb6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015eba:	ed9f 9a1c 	vldr	s18, [pc, #112]	; 8015f2c <MEMS_EIG3+0x16c>
 8015ebe:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8015ec2:	eef0 6a48 	vmov.f32	s13, s16
 8015ec6:	eeb0 7a48 	vmov.f32	s14, s16
 8015eca:	eee8 6a89 	vfma.f32	s13, s17, s18
 8015ece:	eea8 7a80 	vfma.f32	s14, s17, s0
 8015ed2:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8015ed6:	ee76 7a87 	vadd.f32	s15, s13, s14
 8015eda:	eed8 7a06 	vfnms.f32	s15, s16, s12
 8015ede:	edc4 6a00 	vstr	s13, [r4]
 8015ee2:	ed84 7a02 	vstr	s14, [r4, #8]
 8015ee6:	edc4 7a01 	vstr	s15, [r4, #4]
 8015eea:	b00a      	add	sp, #40	; 0x28
 8015eec:	ecbd 8b04 	vpop	{d8-d9}
 8015ef0:	bd10      	pop	{r4, pc}
 8015ef2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8015ef6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015efa:	f002 ff89 	bl	8018e10 <acosf>
 8015efe:	ee60 9a29 	vmul.f32	s19, s0, s19
 8015f02:	eeb0 0a69 	vmov.f32	s0, s19
 8015f06:	f002 fea3 	bl	8018c50 <cosf>
 8015f0a:	eeb0 9a40 	vmov.f32	s18, s0
 8015f0e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8015f30 <MEMS_EIG3+0x170>
 8015f12:	ee39 0a80 	vadd.f32	s0, s19, s0
 8015f16:	f002 fe9b 	bl	8018c50 <cosf>
 8015f1a:	e7d0      	b.n	8015ebe <MEMS_EIG3+0xfe>
 8015f1c:	358637bd 	.word	0x358637bd
 8015f20:	3eaaaaab 	.word	0x3eaaaaab
 8015f24:	3e2aaaab 	.word	0x3e2aaaab
 8015f28:	bf000001 	.word	0xbf000001
 8015f2c:	3effffff 	.word	0x3effffff
 8015f30:	40060a92 	.word	0x40060a92

08015f34 <MEMS_runMagCal>:
 8015f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f38:	ed2d 8b06 	vpush	{d8-d10}
 8015f3c:	2282      	movs	r2, #130	; 0x82
 8015f3e:	460c      	mov	r4, r1
 8015f40:	4681      	mov	r9, r0
 8015f42:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8015f46:	ab36      	add	r3, sp, #216	; 0xd8
 8015f48:	4608      	mov	r0, r1
 8015f4a:	9103      	str	r1, [sp, #12]
 8015f4c:	a917      	add	r1, sp, #92	; 0x5c
 8015f4e:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8015f52:	9319      	str	r3, [sp, #100]	; 0x64
 8015f54:	f7ff fcb8 	bl	80158c8 <MEMS_getSensorData_I16>
 8015f58:	f8bd c060 	ldrh.w	ip, [sp, #96]	; 0x60
 8015f5c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8015f60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015f62:	f10c 31ff 	add.w	r1, ip, #4294967295
 8015f66:	9105      	str	r1, [sp, #20]
 8015f68:	fb01 2103 	mla	r1, r1, r3, r2
 8015f6c:	9208      	str	r2, [sp, #32]
 8015f6e:	9107      	str	r1, [sp, #28]
 8015f70:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
 8015f74:	f1bc 0f00 	cmp.w	ip, #0
 8015f78:	f000 8407 	beq.w	801678a <MEMS_runMagCal+0x856>
 8015f7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015f80:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015f84:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 8015f88:	fb02 f203 	mul.w	r2, r2, r3
 8015f8c:	31a0      	adds	r1, #160	; 0xa0
 8015f8e:	4291      	cmp	r1, r2
 8015f90:	f080 8401 	bcs.w	8016796 <MEMS_runMagCal+0x862>
 8015f94:	3b00      	subs	r3, #0
 8015f96:	bf18      	it	ne
 8015f98:	2301      	movne	r3, #1
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	e9c9 3301 	strd	r3, r3, [r9, #4]
 8015fa0:	f889 208c 	strb.w	r2, [r9, #140]	; 0x8c
 8015fa4:	f8c9 200c 	str.w	r2, [r9, #12]
 8015fa8:	2300      	movs	r3, #0
 8015faa:	22ff      	movs	r2, #255	; 0xff
 8015fac:	e9c9 3325 	strd	r3, r3, [r9, #148]	; 0x94
 8015fb0:	e9c9 3327 	strd	r3, r3, [r9, #156]	; 0x9c
 8015fb4:	e9c9 3329 	strd	r3, r3, [r9, #164]	; 0xa4
 8015fb8:	f889 208e 	strb.w	r2, [r9, #142]	; 0x8e
 8015fbc:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 8015fc0:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8015fc4:	2f03      	cmp	r7, #3
 8015fc6:	9704      	str	r7, [sp, #16]
 8015fc8:	bf28      	it	cs
 8015fca:	2703      	movcs	r7, #3
 8015fcc:	eddf 7ace 	vldr	s15, [pc, #824]	; 8016308 <MEMS_runMagCal+0x3d4>
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	49ca      	ldr	r1, [pc, #808]	; (80162fc <MEMS_runMagCal+0x3c8>)
 8015fd4:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 8015fd8:	9702      	str	r7, [sp, #8]
 8015fda:	9f03      	ldr	r7, [sp, #12]
 8015fdc:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8015fe0:	4683      	mov	fp, r0
 8015fe2:	4605      	mov	r5, r0
 8015fe4:	4613      	mov	r3, r2
 8015fe6:	4644      	mov	r4, r8
 8015fe8:	468a      	mov	sl, r1
 8015fea:	460e      	mov	r6, r1
 8015fec:	edd7 5a01 	vldr	s11, [r7, #4]
 8015ff0:	f8cd c018 	str.w	ip, [sp, #24]
 8015ff4:	7827      	ldrb	r7, [r4, #0]
 8015ff6:	3301      	adds	r3, #1
 8015ff8:	b29b      	uxth	r3, r3
 8015ffa:	2f00      	cmp	r7, #0
 8015ffc:	d045      	beq.n	801608a <MEMS_runMagCal+0x156>
 8015ffe:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 8016002:	edd9 6a18 	vldr	s13, [r9, #96]	; 0x60
 8016006:	ee07 ea10 	vmov	s14, lr
 801600a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801600e:	f9b4 c002 	ldrsh.w	ip, [r4, #2]
 8016012:	ee37 7a66 	vsub.f32	s14, s14, s13
 8016016:	ee06 ca90 	vmov	s13, ip
 801601a:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 801601e:	edd9 6a17 	vldr	s13, [r9, #92]	; 0x5c
 8016022:	ed99 5a1e 	vldr	s10, [r9, #120]	; 0x78
 8016026:	ee36 6a66 	vsub.f32	s12, s12, s13
 801602a:	edd9 6a1a 	vldr	s13, [r9, #104]	; 0x68
 801602e:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
 8016032:	ee26 6a26 	vmul.f32	s12, s12, s13
 8016036:	ee27 7a05 	vmul.f32	s14, s14, s10
 801603a:	ee06 7a90 	vmov	s13, r7
 801603e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8016042:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016046:	ed99 5a19 	vldr	s10, [r9, #100]	; 0x64
 801604a:	eea6 7a06 	vfma.f32	s14, s12, s12
 801604e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8016052:	ed99 6a22 	vldr	s12, [r9, #136]	; 0x88
 8016056:	ee77 7a27 	vadd.f32	s15, s14, s15
 801605a:	ee26 7a86 	vmul.f32	s14, s13, s12
 801605e:	45f2      	cmp	sl, lr
 8016060:	bfb8      	it	lt
 8016062:	46f2      	movlt	sl, lr
 8016064:	45f3      	cmp	fp, lr
 8016066:	bfa8      	it	ge
 8016068:	46f3      	movge	fp, lr
 801606a:	4566      	cmp	r6, ip
 801606c:	bfb8      	it	lt
 801606e:	4666      	movlt	r6, ip
 8016070:	4565      	cmp	r5, ip
 8016072:	bfa8      	it	ge
 8016074:	4665      	movge	r5, ip
 8016076:	42b9      	cmp	r1, r7
 8016078:	bfb8      	it	lt
 801607a:	4639      	movlt	r1, r7
 801607c:	42b8      	cmp	r0, r7
 801607e:	bfa8      	it	ge
 8016080:	4638      	movge	r0, r7
 8016082:	eee7 7a07 	vfma.f32	s15, s14, s14
 8016086:	3201      	adds	r2, #1
 8016088:	b252      	sxtb	r2, r2
 801608a:	9f02      	ldr	r7, [sp, #8]
 801608c:	3408      	adds	r4, #8
 801608e:	42bb      	cmp	r3, r7
 8016090:	d9b0      	bls.n	8015ff4 <MEMS_runMagCal+0xc0>
 8016092:	f8dd c018 	ldr.w	ip, [sp, #24]
 8016096:	459c      	cmp	ip, r3
 8016098:	f240 8768 	bls.w	8016f6c <MEMS_runMagCal+0x1038>
 801609c:	2400      	movs	r4, #0
 801609e:	9402      	str	r4, [sp, #8]
 80160a0:	9c04      	ldr	r4, [sp, #16]
 80160a2:	1ae4      	subs	r4, r4, r3
 80160a4:	fa13 f484 	uxtah	r4, r3, r4
 80160a8:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80160ac:	f108 0808 	add.w	r8, r8, #8
 80160b0:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 80160b4:	9406      	str	r4, [sp, #24]
 80160b6:	781c      	ldrb	r4, [r3, #0]
 80160b8:	1c57      	adds	r7, r2, #1
 80160ba:	9704      	str	r7, [sp, #16]
 80160bc:	2c00      	cmp	r4, #0
 80160be:	f000 808f 	beq.w	80161e0 <MEMS_runMagCal+0x2ac>
 80160c2:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 80160c6:	f933 7c16 	ldrsh.w	r7, [r3, #-22]
 80160ca:	f933 4c1e 	ldrsh.w	r4, [r3, #-30]
 80160ce:	f933 2c06 	ldrsh.w	r2, [r3, #-6]
 80160d2:	ebac 0404 	sub.w	r4, ip, r4
 80160d6:	1bd2      	subs	r2, r2, r7
 80160d8:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 80160dc:	ee07 2a10 	vmov	s14, r2
 80160e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80160e4:	f9b3 7004 	ldrsh.w	r7, [r3, #4]
 80160e8:	f933 ec14 	ldrsh.w	lr, [r3, #-20]
 80160ec:	f933 4c1c 	ldrsh.w	r4, [r3, #-28]
 80160f0:	f933 2c04 	ldrsh.w	r2, [r3, #-4]
 80160f4:	1b3c      	subs	r4, r7, r4
 80160f6:	eba2 020e 	sub.w	r2, r2, lr
 80160fa:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 80160fe:	ee06 2a90 	vmov	s13, r2
 8016102:	eeb0 7ac7 	vabs.f32	s14, s14
 8016106:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 801610a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801610e:	eeb0 6ac6 	vabs.f32	s12, s12
 8016112:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8016116:	ee06 7a90 	vmov	s13, r7
 801611a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801611e:	ee06 ca10 	vmov	s12, ip
 8016122:	ed99 5a18 	vldr	s10, [r9, #96]	; 0x60
 8016126:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801612a:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 801612e:	f933 ec1a 	ldrsh.w	lr, [r3, #-26]
 8016132:	f933 2c02 	ldrsh.w	r2, [r3, #-2]
 8016136:	f933 8c12 	ldrsh.w	r8, [r3, #-18]
 801613a:	eba4 0e0e 	sub.w	lr, r4, lr
 801613e:	eba2 0208 	sub.w	r2, r2, r8
 8016142:	eb02 024e 	add.w	r2, r2, lr, lsl #1
 8016146:	eef8 4ac6 	vcvt.f32.s32	s9, s12
 801614a:	ee06 2a10 	vmov	s12, r2
 801614e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8016152:	ed99 5a17 	vldr	s10, [r9, #92]	; 0x5c
 8016156:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801615a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801615e:	ed99 4a1e 	vldr	s8, [r9, #120]	; 0x78
 8016162:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8016166:	ed99 5a1a 	vldr	s10, [r9, #104]	; 0x68
 801616a:	eeb0 6ac6 	vabs.f32	s12, s12
 801616e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8016172:	ee66 6a84 	vmul.f32	s13, s13, s8
 8016176:	ee64 4a85 	vmul.f32	s9, s9, s10
 801617a:	ee05 4a10 	vmov	s10, r4
 801617e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8016182:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8016186:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801618a:	ed99 4a19 	vldr	s8, [r9, #100]	; 0x64
 801618e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8016192:	eee4 6aa4 	vfma.f32	s13, s9, s9
 8016196:	ee35 6a44 	vsub.f32	s12, s10, s8
 801619a:	ed99 5a22 	vldr	s10, [r9, #136]	; 0x88
 801619e:	4566      	cmp	r6, ip
 80161a0:	bfb8      	it	lt
 80161a2:	4666      	movlt	r6, ip
 80161a4:	4565      	cmp	r5, ip
 80161a6:	bfa8      	it	ge
 80161a8:	4665      	movge	r5, ip
 80161aa:	45ba      	cmp	sl, r7
 80161ac:	bfb8      	it	lt
 80161ae:	46ba      	movlt	sl, r7
 80161b0:	45bb      	cmp	fp, r7
 80161b2:	bfa8      	it	ge
 80161b4:	46bb      	movge	fp, r7
 80161b6:	42a1      	cmp	r1, r4
 80161b8:	bfb8      	it	lt
 80161ba:	4621      	movlt	r1, r4
 80161bc:	42a0      	cmp	r0, r4
 80161be:	bfa8      	it	ge
 80161c0:	4620      	movge	r0, r4
 80161c2:	ee17 4a10 	vmov	r4, s14
 80161c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80161ca:	ee66 6a05 	vmul.f32	s13, s12, s10
 80161ce:	9a02      	ldr	r2, [sp, #8]
 80161d0:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80161d4:	42a2      	cmp	r2, r4
 80161d6:	bf38      	it	cc
 80161d8:	4622      	movcc	r2, r4
 80161da:	9202      	str	r2, [sp, #8]
 80161dc:	f99d 2010 	ldrsb.w	r2, [sp, #16]
 80161e0:	9c06      	ldr	r4, [sp, #24]
 80161e2:	3308      	adds	r3, #8
 80161e4:	429c      	cmp	r4, r3
 80161e6:	f47f af66 	bne.w	80160b6 <MEMS_runMagCal+0x182>
 80161ea:	2a00      	cmp	r2, #0
 80161ec:	f000 82e0 	beq.w	80167b0 <MEMS_runMagCal+0x87c>
 80161f0:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 80161f4:	f280 82db 	bge.w	80167ae <MEMS_runMagCal+0x87a>
 80161f8:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 80161fc:	f2c0 82d7 	blt.w	80167ae <MEMS_runMagCal+0x87a>
 8016200:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
 8016204:	f280 82d3 	bge.w	80167ae <MEMS_runMagCal+0x87a>
 8016208:	f51b 4f80 	cmn.w	fp, #16384	; 0x4000
 801620c:	f2c0 82cf 	blt.w	80167ae <MEMS_runMagCal+0x87a>
 8016210:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8016214:	f280 82cb 	bge.w	80167ae <MEMS_runMagCal+0x87a>
 8016218:	f510 4f80 	cmn.w	r0, #16384	; 0x4000
 801621c:	f2c0 82c7 	blt.w	80167ae <MEMS_runMagCal+0x87a>
 8016220:	1b75      	subs	r5, r6, r5
 8016222:	ebaa 0b0b 	sub.w	fp, sl, fp
 8016226:	455d      	cmp	r5, fp
 8016228:	462b      	mov	r3, r5
 801622a:	bfb8      	it	lt
 801622c:	465b      	movlt	r3, fp
 801622e:	ee07 2a10 	vmov	s14, r2
 8016232:	1a09      	subs	r1, r1, r0
 8016234:	428b      	cmp	r3, r1
 8016236:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801623a:	bfb8      	it	lt
 801623c:	460b      	movlt	r3, r1
 801623e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016242:	ee87 5aa6 	vdiv.f32	s10, s15, s13
 8016246:	ee87 6a25 	vdiv.f32	s12, s14, s11
 801624a:	ee07 3a90 	vmov	s15, r3
 801624e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8016300 <MEMS_runMagCal+0x3cc>
 8016252:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016256:	ee26 7a07 	vmul.f32	s14, s12, s14
 801625a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801625e:	eef1 7ac5 	vsqrt.f32	s15, s10
 8016262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016266:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801626a:	f100 82a0 	bmi.w	80167ae <MEMS_runMagCal+0x87a>
 801626e:	ed9d 7a02 	vldr	s14, [sp, #8]
 8016272:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8016276:	ed9f 5a23 	vldr	s10, [pc, #140]	; 8016304 <MEMS_runMagCal+0x3d0>
 801627a:	ee67 5a25 	vmul.f32	s11, s14, s11
 801627e:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016286:	f300 8292 	bgt.w	80167ae <MEMS_runMagCal+0x87a>
 801628a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801628e:	ee26 6a07 	vmul.f32	s12, s12, s14
 8016292:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8016296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801629a:	f301 81ce 	bgt.w	801763a <MEMS_runMagCal+0x1706>
 801629e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80162a2:	ee26 7a07 	vmul.f32	s14, s12, s14
 80162a6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80162aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162ae:	f340 8557 	ble.w	8016d60 <MEMS_runMagCal+0xe2c>
 80162b2:	ee07 5a10 	vmov	s14, r5
 80162b6:	ee36 6a06 	vadd.f32	s12, s12, s12
 80162ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80162be:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80162c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162c6:	f340 854b 	ble.w	8016d60 <MEMS_runMagCal+0xe2c>
 80162ca:	ee07 ba10 	vmov	s14, fp
 80162ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80162d2:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80162d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162da:	f140 8541 	bpl.w	8016d60 <MEMS_runMagCal+0xe2c>
 80162de:	ee07 1a10 	vmov	s14, r1
 80162e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80162e6:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80162ea:	2300      	movs	r3, #0
 80162ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162f0:	9304      	str	r3, [sp, #16]
 80162f2:	bf48      	it	mi
 80162f4:	2301      	movmi	r3, #1
 80162f6:	9309      	str	r3, [sp, #36]	; 0x24
 80162f8:	f000 bd35 	b.w	8016d66 <MEMS_runMagCal+0xe32>
 80162fc:	ffff8000 	.word	0xffff8000
 8016300:	43020000 	.word	0x43020000
 8016304:	447a0000 	.word	0x447a0000
 8016308:	00000000 	.word	0x00000000
 801630c:	41f00001 	.word	0x41f00001
 8016310:	400ccccd 	.word	0x400ccccd
 8016314:	3dcccccd 	.word	0x3dcccccd
 8016318:	423c0000 	.word	0x423c0000
 801631c:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8016308 <MEMS_runMagCal+0x3d4>
 8016320:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 801630c <MEMS_runMagCal+0x3d8>
 8016324:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8016328:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801632c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016330:	dc10      	bgt.n	8016354 <MEMS_runMagCal+0x420>
 8016332:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8016310 <MEMS_runMagCal+0x3dc>
 8016336:	eef4 7ac7 	vcmpe.f32	s15, s14
 801633a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801633e:	dc09      	bgt.n	8016354 <MEMS_runMagCal+0x420>
 8016340:	ed96 9a03 	vldr	s18, [r6, #12]
 8016344:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 8016314 <MEMS_runMagCal+0x3e0>
 8016348:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801634c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016350:	f201 850e 	bhi.w	8017d70 <MEMS_runMagCal+0x1e3c>
 8016354:	ed5f 6a10 	vldr	s13, [pc, #-64]	; 8016318 <MEMS_runMagCal+0x3e4>
 8016358:	ed96 6a03 	vldr	s12, [r6, #12]
 801635c:	2300      	movs	r3, #0
 801635e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8016362:	ed96 4a01 	vldr	s8, [r6, #4]
 8016366:	ed96 6a00 	vldr	s12, [r6]
 801636a:	edd6 4a02 	vldr	s9, [r6, #8]
 801636e:	ac2e      	add	r4, sp, #184	; 0xb8
 8016370:	e9c4 3300 	strd	r3, r3, [r4]
 8016374:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8016378:	60a3      	str	r3, [r4, #8]
 801637a:	61a3      	str	r3, [r4, #24]
 801637c:	eeb0 7a66 	vmov.f32	s14, s13
 8016380:	edc6 6a06 	vstr	s13, [r6, #24]
 8016384:	eeb0 5a66 	vmov.f32	s10, s13
 8016388:	eec6 5a08 	vdiv.f32	s11, s12, s16
 801638c:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 8016390:	edcd 7a31 	vstr	s15, [sp, #196]	; 0xc4
 8016394:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8016398:	ee84 6a08 	vdiv.f32	s12, s8, s16
 801639c:	eec4 6a88 	vdiv.f32	s13, s9, s16
 80163a0:	4ade      	ldr	r2, [pc, #888]	; (801671c <MEMS_runMagCal+0x7e8>)
 80163a2:	9211      	str	r2, [sp, #68]	; 0x44
 80163a4:	eec7 4a05 	vdiv.f32	s9, s14, s10
 80163a8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80163ac:	ee72 2ae4 	vsub.f32	s5, s5, s9
 80163b0:	ed9f 5adb 	vldr	s10, [pc, #876]	; 8016720 <MEMS_runMagCal+0x7ec>
 80163b4:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80163b8:	eddf 4ada 	vldr	s9, [pc, #872]	; 8016724 <MEMS_runMagCal+0x7f0>
 80163bc:	eeb0 5ac5 	vabs.f32	s10, s10
 80163c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80163c4:	eeb4 5ae4 	vcmpe.f32	s10, s9
 80163c8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80163cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163d0:	eeb0 7ac7 	vabs.f32	s14, s14
 80163d4:	f101 84c2 	bmi.w	8017d5c <MEMS_runMagCal+0x1e28>
 80163d8:	eddf 7ad3 	vldr	s15, [pc, #844]	; 8016728 <MEMS_runMagCal+0x7f4>
 80163dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80163e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163e4:	f281 8413 	bge.w	8017c0e <MEMS_runMagCal+0x1cda>
 80163e8:	eddf 7ad0 	vldr	s15, [pc, #832]	; 801672c <MEMS_runMagCal+0x7f8>
 80163ec:	eef4 2ae7 	vcmpe.f32	s5, s15
 80163f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163f4:	f101 840b 	bmi.w	8017c0e <MEMS_runMagCal+0x1cda>
 80163f8:	eddd 7a07 	vldr	s15, [sp, #28]
 80163fc:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8016730 <MEMS_runMagCal+0x7fc>
 8016400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016404:	fef8 5a65 	vrinta.f32	s11, s11
 8016408:	ee67 7a87 	vmul.f32	s15, s15, s14
 801640c:	feb8 6a46 	vrinta.f32	s12, s12
 8016410:	fef8 6a66 	vrinta.f32	s13, s13
 8016414:	eefd 5ae5 	vcvt.s32.f32	s11, s11
 8016418:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801641c:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8016420:	fef8 7a67 	vrinta.f32	s15, s15
 8016424:	ee16 5a90 	vmov	r5, s13
 8016428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801642c:	ee15 2a90 	vmov	r2, s11
 8016430:	ee16 0a10 	vmov	r0, s12
 8016434:	f10d 0b4c 	add.w	fp, sp, #76	; 0x4c
 8016438:	af0f      	add	r7, sp, #60	; 0x3c
 801643a:	edc9 7a01 	vstr	s15, [r9, #4]
 801643e:	ab10      	add	r3, sp, #64	; 0x40
 8016440:	9700      	str	r7, [sp, #0]
 8016442:	eeb0 0a48 	vmov.f32	s0, s16
 8016446:	f8ab 2000 	strh.w	r2, [fp]
 801644a:	f8ab 0002 	strh.w	r0, [fp, #2]
 801644e:	f8ab 5004 	strh.w	r5, [fp, #4]
 8016452:	4659      	mov	r1, fp
 8016454:	ee1a 0a90 	vmov	r0, s21
 8016458:	aa2d      	add	r2, sp, #180	; 0xb4
 801645a:	f7f9 f82b 	bl	800f4b4 <getMagStats.constprop.0>
 801645e:	f899 308c 	ldrb.w	r3, [r9, #140]	; 0x8c
 8016462:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8016734 <MEMS_runMagCal+0x800>
 8016466:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801646a:	005b      	lsls	r3, r3, #1
 801646c:	ee07 3a90 	vmov	s15, r3
 8016470:	ee07 0a10 	vmov	s14, r0
 8016474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016478:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801647c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016480:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016488:	f899 508c 	ldrb.w	r5, [r9, #140]	; 0x8c
 801648c:	dc0f      	bgt.n	80164ae <MEMS_runMagCal+0x57a>
 801648e:	ed97 7a00 	vldr	s14, [r7]
 8016492:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801649a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801649e:	bfc9      	itett	gt
 80164a0:	f899 3040 	ldrbgt.w	r3, [r9, #64]	; 0x40
 80164a4:	2301      	movle	r3, #1
 80164a6:	fab3 f383 	clzgt	r3, r3
 80164aa:	095b      	lsrgt	r3, r3, #5
 80164ac:	9304      	str	r3, [sp, #16]
 80164ae:	edd7 4a00 	vldr	s9, [r7]
 80164b2:	ee68 4aa4 	vmul.f32	s9, s17, s9
 80164b6:	ed9f 5aa0 	vldr	s10, [pc, #640]	; 8016738 <MEMS_runMagCal+0x804>
 80164ba:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 80164be:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 80164c2:	eec4 5aa2 	vdiv.f32	s11, s9, s5
 80164c6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80164ca:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 80164ce:	ee66 6a85 	vmul.f32	s13, s13, s10
 80164d2:	ee28 6a86 	vmul.f32	s12, s17, s12
 80164d6:	fef8 5a65 	vrinta.f32	s11, s11
 80164da:	ee27 7a05 	vmul.f32	s14, s14, s10
 80164de:	ee67 7a85 	vmul.f32	s15, s15, s10
 80164e2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80164e6:	feb8 6a46 	vrinta.f32	s12, s12
 80164ea:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 80164ee:	f8db 0000 	ldr.w	r0, [fp]
 80164f2:	ee16 3a90 	vmov	r3, s13
 80164f6:	f1b8 0f01 	cmp.w	r8, #1
 80164fa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80164fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016502:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 8016506:	ee15 ea90 	vmov	lr, s11
 801650a:	bf08      	it	eq
 801650c:	20ff      	moveq	r0, #255	; 0xff
 801650e:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8016512:	b29a      	uxth	r2, r3
 8016514:	ee17 1a90 	vmov	r1, s15
 8016518:	ee17 3a10 	vmov	r3, s14
 801651c:	ee16 aa10 	vmov	sl, s12
 8016520:	f88d e084 	strb.w	lr, [sp, #132]	; 0x84
 8016524:	bf08      	it	eq
 8016526:	f88d 0084 	strbeq.w	r0, [sp, #132]	; 0x84
 801652a:	2000      	movs	r0, #0
 801652c:	f8bb 7004 	ldrh.w	r7, [fp, #4]
 8016530:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8016534:	f8ad 708a 	strh.w	r7, [sp, #138]	; 0x8a
 8016538:	9f04      	ldr	r7, [sp, #16]
 801653a:	b29b      	uxth	r3, r3
 801653c:	b289      	uxth	r1, r1
 801653e:	f88d a085 	strb.w	sl, [sp, #133]	; 0x85
 8016542:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 8016546:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
 801654a:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 801654e:	f8cd c080 	str.w	ip, [sp, #128]	; 0x80
 8016552:	f889 0000 	strb.w	r0, [r9]
 8016556:	2f00      	cmp	r7, #0
 8016558:	f000 8117 	beq.w	801678a <MEMS_runMagCal+0x856>
 801655c:	f899 7040 	ldrb.w	r7, [r9, #64]	; 0x40
 8016560:	f889 0001 	strb.w	r0, [r9, #1]
 8016564:	2f00      	cmp	r7, #0
 8016566:	f041 80db 	bne.w	8017720 <MEMS_runMagCal+0x17ec>
 801656a:	f109 0768 	add.w	r7, r9, #104	; 0x68
 801656e:	ac0e      	add	r4, sp, #56	; 0x38
 8016570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016574:	f8bd 0090 	ldrh.w	r0, [sp, #144]	; 0x90
 8016578:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 801657c:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
 8016580:	fb03 f101 	mul.w	r1, r3, r1
 8016584:	fb03 f202 	mul.w	r2, r3, r2
 8016588:	fb03 f300 	mul.w	r3, r3, r0
 801658c:	ee05 1a90 	vmov	s11, r1
 8016590:	ee05 2a10 	vmov	s10, r2
 8016594:	ee06 3a10 	vmov	s12, r3
 8016598:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
 801659c:	eddf 7a67 	vldr	s15, [pc, #412]	; 801673c <MEMS_runMagCal+0x808>
 80165a0:	ee03 3a90 	vmov	s7, r3
 80165a4:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
 80165a8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80165ac:	ee04 3a10 	vmov	s8, r3
 80165b0:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 80165b4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80165b8:	ee04 3a90 	vmov	s9, r3
 80165bc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80165c0:	f04f 0e01 	mov.w	lr, #1
 80165c4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80165c8:	ee25 5a27 	vmul.f32	s10, s10, s15
 80165cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80165d0:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80165d4:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80165d8:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80165dc:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80165e0:	ae20      	add	r6, sp, #128	; 0x80
 80165e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80165e4:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
 80165e8:	6830      	ldr	r0, [r6, #0]
 80165ea:	edc9 5a1a 	vstr	s11, [r9, #104]	; 0x68
 80165ee:	ed89 5a1e 	vstr	s10, [r9, #120]	; 0x78
 80165f2:	ed89 6a22 	vstr	s12, [r9, #136]	; 0x88
 80165f6:	edc9 3a17 	vstr	s7, [r9, #92]	; 0x5c
 80165fa:	ed89 4a18 	vstr	s8, [r9, #96]	; 0x60
 80165fe:	edc9 4a19 	vstr	s9, [r9, #100]	; 0x64
 8016602:	f8c9 c008 	str.w	ip, [r9, #8]
 8016606:	f8c9 0054 	str.w	r0, [r9, #84]	; 0x54
 801660a:	f8c9 1048 	str.w	r1, [r9, #72]	; 0x48
 801660e:	f8c9 204c 	str.w	r2, [r9, #76]	; 0x4c
 8016612:	f8c9 3050 	str.w	r3, [r9, #80]	; 0x50
 8016616:	f889 e040 	strb.w	lr, [r9, #64]	; 0x40
 801661a:	f889 e059 	strb.w	lr, [r9, #89]	; 0x59
 801661e:	f889 8012 	strb.w	r8, [r9, #18]
 8016622:	2d00      	cmp	r5, #0
 8016624:	f001 82a5 	beq.w	8017b72 <MEMS_runMagCal+0x1c3e>
 8016628:	9b03      	ldr	r3, [sp, #12]
 801662a:	ed9f 3a47 	vldr	s6, [pc, #284]	; 8016748 <MEMS_runMagCal+0x814>
 801662e:	ed93 0a01 	vldr	s0, [r3, #4]
 8016632:	2100      	movs	r1, #0
 8016634:	ee20 3a03 	vmul.f32	s6, s0, s6
 8016638:	f04f 32ff 	mov.w	r2, #4294967295
 801663c:	468c      	mov	ip, r1
 801663e:	f899 0011 	ldrb.w	r0, [r9, #17]
 8016642:	f899 608d 	ldrb.w	r6, [r9, #141]	; 0x8d
 8016646:	fb9c f3f6 	sdiv	r3, ip, r6
 801664a:	fb06 c313 	mls	r3, r6, r3, ip
 801664e:	b2db      	uxtb	r3, r3
 8016650:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8016654:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 8016658:	3101      	adds	r1, #1
 801665a:	ee07 ca90 	vmov	s15, ip
 801665e:	f102 0c01 	add.w	ip, r2, #1
 8016662:	f9b3 20ae 	ldrsh.w	r2, [r3, #174]	; 0xae
 8016666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801666a:	ee06 2a90 	vmov	s13, r2
 801666e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8016672:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8016676:	ee07 3a10 	vmov	s14, r3
 801667a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801667e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016682:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8016686:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801668a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801668e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016692:	ee37 7a64 	vsub.f32	s14, s14, s9
 8016696:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801669a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801669e:	eee7 7a07 	vfma.f32	s15, s14, s14
 80166a2:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80166a6:	ee67 7a03 	vmul.f32	s15, s14, s6
 80166aa:	fb9c f2f0 	sdiv	r2, ip, r0
 80166ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80166b2:	fb00 c212 	mls	r2, r0, r2, ip
 80166b6:	ee17 ca90 	vmov	ip, s15
 80166ba:	b209      	sxth	r1, r1
 80166bc:	b252      	sxtb	r2, r2
 80166be:	eb09 0342 	add.w	r3, r9, r2, lsl #1
 80166c2:	42a9      	cmp	r1, r5
 80166c4:	f8a3 c014 	strh.w	ip, [r3, #20]
 80166c8:	468c      	mov	ip, r1
 80166ca:	dbbc      	blt.n	8016646 <MEMS_runMagCal+0x712>
 80166cc:	f889 2012 	strb.w	r2, [r9, #18]
 80166d0:	4285      	cmp	r5, r0
 80166d2:	bf28      	it	cs
 80166d4:	4605      	movcs	r5, r0
 80166d6:	9400      	str	r4, [sp, #0]
 80166d8:	463a      	mov	r2, r7
 80166da:	ee1a 0a90 	vmov	r0, s21
 80166de:	f889 5010 	strb.w	r5, [r9, #16]
 80166e2:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 80166e6:	ab0d      	add	r3, sp, #52	; 0x34
 80166e8:	f7f8 fee4 	bl	800f4b4 <getMagStats.constprop.0>
 80166ec:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8016740 <MEMS_runMagCal+0x80c>
 80166f0:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80166f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80166f8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80166fc:	eef0 7ae7 	vabs.f32	s15, s15
 8016700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016708:	edd4 6a00 	vldr	s13, [r4]
 801670c:	d524      	bpl.n	8016758 <MEMS_runMagCal+0x824>
 801670e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016716:	f101 8233 	bmi.w	8017b80 <MEMS_runMagCal+0x1c4c>
 801671a:	e01d      	b.n	8016758 <MEMS_runMagCal+0x824>
 801671c:	41f00001 	.word	0x41f00001
 8016720:	3f8ccccd 	.word	0x3f8ccccd
 8016724:	3f266666 	.word	0x3f266666
 8016728:	3eb33333 	.word	0x3eb33333
 801672c:	3f19999a 	.word	0x3f19999a
 8016730:	3a83126f 	.word	0x3a83126f
 8016734:	3c23d70a 	.word	0x3c23d70a
 8016738:	447a0000 	.word	0x447a0000
 801673c:	358637bd 	.word	0x358637bd
 8016740:	423c0000 	.word	0x423c0000
 8016744:	4423d666 	.word	0x4423d666
 8016748:	42c80000 	.word	0x42c80000
 801674c:	427c0000 	.word	0x427c0000
 8016750:	3f666666 	.word	0x3f666666
 8016754:	3eaaaaab 	.word	0x3eaaaaab
 8016758:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801675c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016764:	d507      	bpl.n	8016776 <MEMS_runMagCal+0x842>
 8016766:	eef4 6a47 	vcmp.f32	s13, s14
 801676a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801676e:	9b04      	ldr	r3, [sp, #16]
 8016770:	bf48      	it	mi
 8016772:	2302      	movmi	r3, #2
 8016774:	9304      	str	r3, [sp, #16]
 8016776:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801677a:	9a04      	ldr	r2, [sp, #16]
 801677c:	2bc8      	cmp	r3, #200	; 0xc8
 801677e:	f889 2058 	strb.w	r2, [r9, #88]	; 0x58
 8016782:	d902      	bls.n	801678a <MEMS_runMagCal+0x856>
 8016784:	2302      	movs	r3, #2
 8016786:	f889 3058 	strb.w	r3, [r9, #88]	; 0x58
 801678a:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 801678e:	ecbd 8b06 	vpop	{d8-d10}
 8016792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016796:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
 801679a:	4291      	cmp	r1, r2
 801679c:	f4ff abfa 	bcc.w	8015f94 <MEMS_runMagCal+0x60>
 80167a0:	f899 308c 	ldrb.w	r3, [r9, #140]	; 0x8c
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	f47f ac09 	bne.w	8015fbc <MEMS_runMagCal+0x88>
 80167aa:	f7ff bbfd 	b.w	8015fa8 <MEMS_runMagCal+0x74>
 80167ae:	2202      	movs	r2, #2
 80167b0:	2300      	movs	r3, #0
 80167b2:	9309      	str	r3, [sp, #36]	; 0x24
 80167b4:	9304      	str	r3, [sp, #16]
 80167b6:	ed1f 7a1d 	vldr	s14, [pc, #-116]	; 8016744 <MEMS_runMagCal+0x810>
 80167ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80167be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167c2:	f140 8267 	bpl.w	8016c94 <MEMS_runMagCal+0xd60>
 80167c6:	ed1f 7a20 	vldr	s14, [pc, #-128]	; 8016748 <MEMS_runMagCal+0x814>
 80167ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80167ce:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
 80167d2:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 80167d6:	2b01      	cmp	r3, #1
 80167d8:	d911      	bls.n	80167fe <MEMS_runMagCal+0x8ca>
 80167da:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80167de:	ee17 3a10 	vmov	r3, s14
 80167e2:	b29b      	uxth	r3, r3
 80167e4:	2bc7      	cmp	r3, #199	; 0xc7
 80167e6:	f201 832a 	bhi.w	8017e3e <MEMS_runMagCal+0x1f0a>
 80167ea:	2300      	movs	r3, #0
 80167ec:	21ff      	movs	r1, #255	; 0xff
 80167ee:	f889 3058 	strb.w	r3, [r9, #88]	; 0x58
 80167f2:	f889 308c 	strb.w	r3, [r9, #140]	; 0x8c
 80167f6:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40
 80167fa:	f889 108e 	strb.w	r1, [r9, #142]	; 0x8e
 80167fe:	2a00      	cmp	r2, #0
 8016800:	f040 8254 	bne.w	8016cac <MEMS_runMagCal+0xd78>
 8016804:	f999 0012 	ldrsb.w	r0, [r9, #18]
 8016808:	2800      	cmp	r0, #0
 801680a:	f2c0 83aa 	blt.w	8016f62 <MEMS_runMagCal+0x102e>
 801680e:	f899 1011 	ldrb.w	r1, [r9, #17]
 8016812:	3001      	adds	r0, #1
 8016814:	fbb0 f3f1 	udiv	r3, r0, r1
 8016818:	fb01 0013 	mls	r0, r1, r3, r0
 801681c:	b240      	sxtb	r0, r0
 801681e:	4604      	mov	r4, r0
 8016820:	fef8 7a67 	vrinta.f32	s15, s15
 8016824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016828:	f899 3010 	ldrb.w	r3, [r9, #16]
 801682c:	f889 0012 	strb.w	r0, [r9, #18]
 8016830:	3301      	adds	r3, #1
 8016832:	428b      	cmp	r3, r1
 8016834:	bfa8      	it	ge
 8016836:	460b      	movge	r3, r1
 8016838:	ee17 0a90 	vmov	r0, s15
 801683c:	eb09 0644 	add.w	r6, r9, r4, lsl #1
 8016840:	b2dd      	uxtb	r5, r3
 8016842:	f889 5010 	strb.w	r5, [r9, #16]
 8016846:	82b0      	strh	r0, [r6, #20]
 8016848:	2a00      	cmp	r2, #0
 801684a:	f040 822f 	bne.w	8016cac <MEMS_runMagCal+0xd78>
 801684e:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8016852:	b120      	cbz	r0, 801685e <MEMS_runMagCal+0x92a>
 8016854:	9e07      	ldr	r6, [sp, #28]
 8016856:	f500 6296 	add.w	r2, r0, #1200	; 0x4b0
 801685a:	4296      	cmp	r6, r2
 801685c:	d395      	bcc.n	801678a <MEMS_runMagCal+0x856>
 801685e:	9a04      	ldr	r2, [sp, #16]
 8016860:	2a01      	cmp	r2, #1
 8016862:	d092      	beq.n	801678a <MEMS_runMagCal+0x856>
 8016864:	f899 7058 	ldrb.w	r7, [r9, #88]	; 0x58
 8016868:	1eba      	subs	r2, r7, #2
 801686a:	2a01      	cmp	r2, #1
 801686c:	f240 823a 	bls.w	8016ce4 <MEMS_runMagCal+0xdb0>
 8016870:	9b03      	ldr	r3, [sp, #12]
 8016872:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016876:	ed93 6a01 	vldr	s12, [r3, #4]
 801687a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 801687e:	ee87 5a86 	vdiv.f32	s10, s15, s12
 8016882:	ed5f 7a4e 	vldr	s15, [pc, #-312]	; 801674c <MEMS_runMagCal+0x818>
 8016886:	ee25 0a00 	vmul.f32	s0, s10, s0
 801688a:	ee60 7a27 	vmul.f32	s15, s0, s15
 801688e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016892:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8016896:	9a08      	ldr	r2, [sp, #32]
 8016898:	9b05      	ldr	r3, [sp, #20]
 801689a:	f8d9 6090 	ldr.w	r6, [r9, #144]	; 0x90
 801689e:	fb03 2404 	mla	r4, r3, r4, r2
 80168a2:	ee17 2a90 	vmov	r2, s15
 80168a6:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80168aa:	3310      	adds	r3, #16
 80168ac:	fa1f f882 	uxth.w	r8, r2
 80168b0:	42a3      	cmp	r3, r4
 80168b2:	f109 028c 	add.w	r2, r9, #140	; 0x8c
 80168b6:	ee0a 2a90 	vmov	s21, r2
 80168ba:	f080 8206 	bcs.w	8016cca <MEMS_runMagCal+0xd96>
 80168be:	f242 3328 	movw	r3, #9000	; 0x2328
 80168c2:	f899 008c 	ldrb.w	r0, [r9, #140]	; 0x8c
 80168c6:	429c      	cmp	r4, r3
 80168c8:	f899 508d 	ldrb.w	r5, [r9, #141]	; 0x8d
 80168cc:	bf16      	itet	ne
 80168ce:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 80168d2:	2400      	moveq	r4, #0
 80168d4:	3c28      	subne	r4, #40	; 0x28
 80168d6:	42a8      	cmp	r0, r5
 80168d8:	f999 108e 	ldrsb.w	r1, [r9, #142]	; 0x8e
 80168dc:	f000 86e9 	beq.w	80176b2 <MEMS_runMagCal+0x177e>
 80168e0:	3101      	adds	r1, #1
 80168e2:	1a0a      	subs	r2, r1, r0
 80168e4:	fb92 f1f5 	sdiv	r1, r2, r5
 80168e8:	fb05 2111 	mls	r1, r5, r1, r2
 80168ec:	2900      	cmp	r1, #0
 80168ee:	bfb8      	it	lt
 80168f0:	1949      	addlt	r1, r1, r5
 80168f2:	b209      	sxth	r1, r1
 80168f4:	b358      	cbz	r0, 801694e <MEMS_runMagCal+0xa1a>
 80168f6:	3801      	subs	r0, #1
 80168f8:	b280      	uxth	r0, r0
 80168fa:	3001      	adds	r0, #1
 80168fc:	1b36      	subs	r6, r6, r4
 80168fe:	9f04      	ldr	r7, [sp, #16]
 8016900:	4408      	add	r0, r1
 8016902:	b2b6      	uxth	r6, r6
 8016904:	e002      	b.n	801690c <MEMS_runMagCal+0x9d8>
 8016906:	3101      	adds	r1, #1
 8016908:	4281      	cmp	r1, r0
 801690a:	d01b      	beq.n	8016944 <MEMS_runMagCal+0xa10>
 801690c:	fb91 f3f5 	sdiv	r3, r1, r5
 8016910:	fb05 1313 	mls	r3, r5, r3, r1
 8016914:	b2db      	uxtb	r3, r3
 8016916:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 801691a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 801691e:	4432      	add	r2, r6
 8016920:	b212      	sxth	r2, r2
 8016922:	2a00      	cmp	r2, #0
 8016924:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8016928:	daed      	bge.n	8016906 <MEMS_runMagCal+0x9d2>
 801692a:	f899 308c 	ldrb.w	r3, [r9, #140]	; 0x8c
 801692e:	1e5a      	subs	r2, r3, #1
 8016930:	2b00      	cmp	r3, #0
 8016932:	f000 8314 	beq.w	8016f5e <MEMS_runMagCal+0x102a>
 8016936:	3101      	adds	r1, #1
 8016938:	4281      	cmp	r1, r0
 801693a:	f04f 0701 	mov.w	r7, #1
 801693e:	f889 208c 	strb.w	r2, [r9, #140]	; 0x8c
 8016942:	d1e3      	bne.n	801690c <MEMS_runMagCal+0x9d8>
 8016944:	2f01      	cmp	r7, #1
 8016946:	f001 80cb 	beq.w	8017ae0 <MEMS_runMagCal+0x1bac>
 801694a:	f899 008c 	ldrb.w	r0, [r9, #140]	; 0x8c
 801694e:	f8c9 4090 	str.w	r4, [r9, #144]	; 0x90
 8016952:	2800      	cmp	r0, #0
 8016954:	f000 81bf 	beq.w	8016cd6 <MEMS_runMagCal+0xda2>
 8016958:	f999 308e 	ldrsb.w	r3, [r9, #142]	; 0x8e
 801695c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801695e:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8016962:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8016966:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801696a:	3308      	adds	r3, #8
 801696c:	441c      	add	r4, r3
 801696e:	42a2      	cmp	r2, r4
 8016970:	f200 86a8 	bhi.w	80176c4 <MEMS_runMagCal+0x1790>
 8016974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016976:	b923      	cbnz	r3, 8016982 <MEMS_runMagCal+0xa4e>
 8016978:	f899 308c 	ldrb.w	r3, [r9, #140]	; 0x8c
 801697c:	2b0a      	cmp	r3, #10
 801697e:	f240 81ae 	bls.w	8016cde <MEMS_runMagCal+0xdaa>
 8016982:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8016986:	9302      	str	r3, [sp, #8]
 8016988:	2b00      	cmp	r3, #0
 801698a:	f000 81a8 	beq.w	8016cde <MEMS_runMagCal+0xdaa>
 801698e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8016992:	ed5f 6a91 	vldr	s13, [pc, #-580]	; 8016750 <MEMS_runMagCal+0x81c>
 8016996:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
 801699a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801699e:	ed5f 7a93 	vldr	s15, [pc, #-588]	; 8016754 <MEMS_runMagCal+0x820>
 80169a2:	2100      	movs	r1, #0
 80169a4:	ee65 5aa6 	vmul.f32	s11, s11, s13
 80169a8:	ee60 4a24 	vmul.f32	s9, s0, s9
 80169ac:	ee25 5a07 	vmul.f32	s10, s10, s14
 80169b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80169b4:	468b      	mov	fp, r1
 80169b6:	9b04      	ldr	r3, [sp, #16]
 80169b8:	9308      	str	r3, [sp, #32]
 80169ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80169bc:	f812 303b 	ldrb.w	r3, [r2, fp, lsl #3]
 80169c0:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	f000 80e5 	beq.w	8016b94 <MEMS_runMagCal+0xc60>
 80169ca:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 80169ce:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 80169d2:	ee07 0a90 	vmov	s15, r0
 80169d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80169da:	eef0 7ae7 	vabs.f32	s15, s15
 80169de:	eef4 7ac5 	vcmpe.f32	s15, s10
 80169e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169e6:	f100 8216 	bmi.w	8016e16 <MEMS_runMagCal+0xee2>
 80169ea:	f9b2 5006 	ldrsh.w	r5, [r2, #6]
 80169ee:	f899 608c 	ldrb.w	r6, [r9, #140]	; 0x8c
 80169f2:	2e00      	cmp	r6, #0
 80169f4:	f000 822e 	beq.w	8016e54 <MEMS_runMagCal+0xf20>
 80169f8:	f9b9 33a6 	ldrsh.w	r3, [r9, #934]	; 0x3a6
 80169fc:	f9b9 13a4 	ldrsh.w	r1, [r9, #932]	; 0x3a4
 8016a00:	1b1b      	subs	r3, r3, r4
 8016a02:	fb03 f203 	mul.w	r2, r3, r3
 8016a06:	1a0b      	subs	r3, r1, r0
 8016a08:	fb03 2203 	mla	r2, r3, r3, r2
 8016a0c:	f9b9 33a8 	ldrsh.w	r3, [r9, #936]	; 0x3a8
 8016a10:	1b5b      	subs	r3, r3, r5
 8016a12:	fb03 2303 	mla	r3, r3, r3, r2
 8016a16:	ee07 3a90 	vmov	s15, r3
 8016a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a1e:	eef4 5ae7 	vcmpe.f32	s11, s15
 8016a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a26:	f300 80b5 	bgt.w	8016b94 <MEMS_runMagCal+0xc60>
 8016a2a:	fb90 f3f8 	sdiv	r3, r0, r8
 8016a2e:	fb08 0313 	mls	r3, r8, r3, r0
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	bfb8      	it	lt
 8016a36:	4443      	addlt	r3, r8
 8016a38:	b21b      	sxth	r3, r3
 8016a3a:	ee07 3a90 	vmov	s15, r3
 8016a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a42:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016a46:	fef8 7a67 	vrinta.f32	s15, s15
 8016a4a:	fb94 f3f8 	sdiv	r3, r4, r8
 8016a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016a52:	fb08 4313 	mls	r3, r8, r3, r4
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	bfb8      	it	lt
 8016a5a:	4443      	addlt	r3, r8
 8016a5c:	b21b      	sxth	r3, r3
 8016a5e:	edcd 7a05 	vstr	s15, [sp, #20]
 8016a62:	ee07 3a90 	vmov	s15, r3
 8016a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a6a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016a6e:	fef8 7a67 	vrinta.f32	s15, s15
 8016a72:	fb95 f3f8 	sdiv	r3, r5, r8
 8016a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016a7a:	fb08 5313 	mls	r3, r8, r3, r5
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	bfb8      	it	lt
 8016a82:	4443      	addlt	r3, r8
 8016a84:	b21b      	sxth	r3, r3
 8016a86:	f89d a014 	ldrb.w	sl, [sp, #20]
 8016a8a:	edcd 7a05 	vstr	s15, [sp, #20]
 8016a8e:	ee07 3a90 	vmov	s15, r3
 8016a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a96:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016a9a:	fef8 7a67 	vrinta.f32	s15, s15
 8016a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016aa2:	edcd 7a06 	vstr	s15, [sp, #24]
 8016aa6:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8016aaa:	f1ba 0f1f 	cmp.w	sl, #31
 8016aae:	9205      	str	r2, [sp, #20]
 8016ab0:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8016ab4:	f8d9 3094 	ldr.w	r3, [r9, #148]	; 0x94
 8016ab8:	9206      	str	r2, [sp, #24]
 8016aba:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
 8016abe:	f240 8231 	bls.w	8016f24 <MEMS_runMagCal+0xff0>
 8016ac2:	2101      	movs	r1, #1
 8016ac4:	9f05      	ldr	r7, [sp, #20]
 8016ac6:	f1aa 0220 	sub.w	r2, sl, #32
 8016aca:	fa01 f202 	lsl.w	r2, r1, r2
 8016ace:	2f1f      	cmp	r7, #31
 8016ad0:	ea02 0203 	and.w	r2, r2, r3
 8016ad4:	e9d9 3127 	ldrd	r3, r1, [r9, #156]	; 0x9c
 8016ad8:	f240 822f 	bls.w	8016f3a <MEMS_runMagCal+0x1006>
 8016adc:	f1a7 0120 	sub.w	r1, r7, #32
 8016ae0:	2701      	movs	r7, #1
 8016ae2:	fa07 f101 	lsl.w	r1, r7, r1
 8016ae6:	ea01 0c03 	and.w	ip, r1, r3
 8016aea:	9906      	ldr	r1, [sp, #24]
 8016aec:	e9d9 7329 	ldrd	r7, r3, [r9, #164]	; 0xa4
 8016af0:	291f      	cmp	r1, #31
 8016af2:	f240 822e 	bls.w	8016f52 <MEMS_runMagCal+0x101e>
 8016af6:	f1a1 0720 	sub.w	r7, r1, #32
 8016afa:	2101      	movs	r1, #1
 8016afc:	fa01 f707 	lsl.w	r7, r1, r7
 8016b00:	403b      	ands	r3, r7
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	f040 8131 	bne.w	8016d6a <MEMS_runMagCal+0xe36>
 8016b08:	ea52 030c 	orrs.w	r3, r2, ip
 8016b0c:	f040 8132 	bne.w	8016d74 <MEMS_runMagCal+0xe40>
 8016b10:	f899 308d 	ldrb.w	r3, [r9, #141]	; 0x8d
 8016b14:	461a      	mov	r2, r3
 8016b16:	4694      	mov	ip, r2
 8016b18:	930a      	str	r3, [sp, #40]	; 0x28
 8016b1a:	f999 308e 	ldrsb.w	r3, [r9, #142]	; 0x8e
 8016b1e:	3301      	adds	r3, #1
 8016b20:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016b24:	3601      	adds	r6, #1
 8016b26:	fb92 f3fc 	sdiv	r3, r2, ip
 8016b2a:	4566      	cmp	r6, ip
 8016b2c:	bfa8      	it	ge
 8016b2e:	4666      	movge	r6, ip
 8016b30:	fb0c 2c13 	mls	ip, ip, r3, r2
 8016b34:	b2f6      	uxtb	r6, r6
 8016b36:	fa4f fc8c 	sxtb.w	ip, ip
 8016b3a:	9903      	ldr	r1, [sp, #12]
 8016b3c:	f889 c08e 	strb.w	ip, [r9, #142]	; 0x8e
 8016b40:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
 8016b44:	f889 608c 	strb.w	r6, [r9, #140]	; 0x8c
 8016b48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b4a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8016b4e:	1a9b      	subs	r3, r3, r2
 8016b50:	fb01 330b 	mla	r3, r1, fp, r3
 8016b54:	eb09 0ccc 	add.w	ip, r9, ip, lsl #3
 8016b58:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 8016b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b5e:	f8ac 00ae 	strh.w	r0, [ip, #174]	; 0xae
 8016b62:	429e      	cmp	r6, r3
 8016b64:	f8ac 40b0 	strh.w	r4, [ip, #176]	; 0xb0
 8016b68:	f8ac 50b2 	strh.w	r5, [ip, #178]	; 0xb2
 8016b6c:	f8a9 03a4 	strh.w	r0, [r9, #932]	; 0x3a4
 8016b70:	f8a9 43a6 	strh.w	r4, [r9, #934]	; 0x3a6
 8016b74:	f8a9 53a8 	strh.w	r5, [r9, #936]	; 0x3a8
 8016b78:	f000 8738 	beq.w	80179ec <MEMS_runMagCal+0x1ab8>
 8016b7c:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8016b80:	4651      	mov	r1, sl
 8016b82:	ee1a 0a90 	vmov	r0, s21
 8016b86:	f7f8 f979 	bl	800ee7c <MEMS_setMagIndexToOne>
 8016b8a:	2301      	movs	r3, #1
 8016b8c:	9308      	str	r3, [sp, #32]
 8016b8e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8016b92:	9302      	str	r3, [sp, #8]
 8016b94:	9b02      	ldr	r3, [sp, #8]
 8016b96:	f10b 0b01 	add.w	fp, fp, #1
 8016b9a:	fa0f fb8b 	sxth.w	fp, fp
 8016b9e:	459b      	cmp	fp, r3
 8016ba0:	4659      	mov	r1, fp
 8016ba2:	f6ff af0a 	blt.w	80169ba <MEMS_runMagCal+0xa86>
 8016ba6:	f899 3000 	ldrb.w	r3, [r9]
 8016baa:	9a08      	ldr	r2, [sp, #32]
 8016bac:	431a      	orrs	r2, r3
 8016bae:	b2d3      	uxtb	r3, r2
 8016bb0:	f889 3000 	strb.w	r3, [r9]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	f43f ade8 	beq.w	801678a <MEMS_runMagCal+0x856>
 8016bba:	f899 308c 	ldrb.w	r3, [r9, #140]	; 0x8c
 8016bbe:	2b19      	cmp	r3, #25
 8016bc0:	930a      	str	r3, [sp, #40]	; 0x28
 8016bc2:	f67f ade2 	bls.w	801678a <MEMS_runMagCal+0x856>
 8016bc6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016bca:	930b      	str	r3, [sp, #44]	; 0x2c
 8016bcc:	b123      	cbz	r3, 8016bd8 <MEMS_runMagCal+0xca4>
 8016bce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	f040 8541 	bne.w	801765a <MEMS_runMagCal+0x1726>
 8016bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	f040 870d 	bne.w	80179fa <MEMS_runMagCal+0x1ac6>
 8016be0:	2200      	movs	r2, #0
 8016be2:	f04f 0a01 	mov.w	sl, #1
 8016be6:	f8d9 0094 	ldr.w	r0, [r9, #148]	; 0x94
 8016bea:	9b03      	ldr	r3, [sp, #12]
 8016bec:	9005      	str	r0, [sp, #20]
 8016bee:	f8d9 0098 	ldr.w	r0, [r9, #152]	; 0x98
 8016bf2:	9d04      	ldr	r5, [sp, #16]
 8016bf4:	9006      	str	r0, [sp, #24]
 8016bf6:	f8d9 009c 	ldr.w	r0, [r9, #156]	; 0x9c
 8016bfa:	ed93 8a01 	vldr	s16, [r3, #4]
 8016bfe:	4616      	mov	r6, r2
 8016c00:	4657      	mov	r7, sl
 8016c02:	4629      	mov	r1, r5
 8016c04:	462b      	mov	r3, r5
 8016c06:	e9cd 2220 	strd	r2, r2, [sp, #128]	; 0x80
 8016c0a:	e9cd 2222 	strd	r2, r2, [sp, #136]	; 0x88
 8016c0e:	f8d9 b0a8 	ldr.w	fp, [r9, #168]	; 0xa8
 8016c12:	9008      	str	r0, [sp, #32]
 8016c14:	9224      	str	r2, [sp, #144]	; 0x90
 8016c16:	e014      	b.n	8016c42 <MEMS_runMagCal+0xd0e>
 8016c18:	9a02      	ldr	r2, [sp, #8]
 8016c1a:	f1b8 0f00 	cmp.w	r8, #0
 8016c1e:	bf18      	it	ne
 8016c20:	3501      	addne	r5, #1
 8016c22:	2c00      	cmp	r4, #0
 8016c24:	bf18      	it	ne
 8016c26:	3301      	addne	r3, #1
 8016c28:	2a00      	cmp	r2, #0
 8016c2a:	bf18      	it	ne
 8016c2c:	3101      	addne	r1, #1
 8016c2e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8016c32:	b2ed      	uxtb	r5, r5
 8016c34:	b2db      	uxtb	r3, r3
 8016c36:	b2c9      	uxtb	r1, r1
 8016c38:	f000 81a6 	beq.w	8016f88 <MEMS_runMagCal+0x1054>
 8016c3c:	3601      	adds	r6, #1
 8016c3e:	fa5f fa8e 	uxtb.w	sl, lr
 8016c42:	9805      	ldr	r0, [sp, #20]
 8016c44:	f1a6 0220 	sub.w	r2, r6, #32
 8016c48:	fa07 f202 	lsl.w	r2, r7, r2
 8016c4c:	ea00 0802 	and.w	r8, r0, r2
 8016c50:	9808      	ldr	r0, [sp, #32]
 8016c52:	2e1f      	cmp	r6, #31
 8016c54:	ea02 0400 	and.w	r4, r2, r0
 8016c58:	ea02 020b 	and.w	r2, r2, fp
 8016c5c:	9202      	str	r2, [sp, #8]
 8016c5e:	9a06      	ldr	r2, [sp, #24]
 8016c60:	fa07 f006 	lsl.w	r0, r7, r6
 8016c64:	ea02 0c00 	and.w	ip, r2, r0
 8016c68:	f10a 0e01 	add.w	lr, sl, #1
 8016c6c:	d8d4      	bhi.n	8016c18 <MEMS_runMagCal+0xce4>
 8016c6e:	e9d9 4228 	ldrd	r4, r2, [r9, #160]	; 0xa0
 8016c72:	4004      	ands	r4, r0
 8016c74:	4010      	ands	r0, r2
 8016c76:	f1bc 0f00 	cmp.w	ip, #0
 8016c7a:	bf18      	it	ne
 8016c7c:	3501      	addne	r5, #1
 8016c7e:	2c00      	cmp	r4, #0
 8016c80:	bf0c      	ite	eq
 8016c82:	461c      	moveq	r4, r3
 8016c84:	1c5c      	addne	r4, r3, #1
 8016c86:	2800      	cmp	r0, #0
 8016c88:	bf18      	it	ne
 8016c8a:	3101      	addne	r1, #1
 8016c8c:	b2ed      	uxtb	r5, r5
 8016c8e:	b2e3      	uxtb	r3, r4
 8016c90:	b2c9      	uxtb	r1, r1
 8016c92:	e7d3      	b.n	8016c3c <MEMS_runMagCal+0xd08>
 8016c94:	eddf 7ab7 	vldr	s15, [pc, #732]	; 8016f74 <MEMS_runMagCal+0x1040>
 8016c98:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
 8016c9c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8016ca0:	2b01      	cmp	r3, #1
 8016ca2:	f63f ada2 	bhi.w	80167ea <MEMS_runMagCal+0x8b6>
 8016ca6:	2a00      	cmp	r2, #0
 8016ca8:	f43f adac 	beq.w	8016804 <MEMS_runMagCal+0x8d0>
 8016cac:	2200      	movs	r2, #0
 8016cae:	23ff      	movs	r3, #255	; 0xff
 8016cb0:	9907      	ldr	r1, [sp, #28]
 8016cb2:	f889 208c 	strb.w	r2, [r9, #140]	; 0x8c
 8016cb6:	f8c9 100c 	str.w	r1, [r9, #12]
 8016cba:	f889 308e 	strb.w	r3, [r9, #142]	; 0x8e
 8016cbe:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8016cc2:	ecbd 8b06 	vpop	{d8-d10}
 8016cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cca:	f899 008c 	ldrb.w	r0, [r9, #140]	; 0x8c
 8016cce:	4634      	mov	r4, r6
 8016cd0:	2800      	cmp	r0, #0
 8016cd2:	f47f ae41 	bne.w	8016958 <MEMS_runMagCal+0xa24>
 8016cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	f47f ae52 	bne.w	8016982 <MEMS_runMagCal+0xa4e>
 8016cde:	9b04      	ldr	r3, [sp, #16]
 8016ce0:	9308      	str	r3, [sp, #32]
 8016ce2:	e760      	b.n	8016ba6 <MEMS_runMagCal+0xc72>
 8016ce4:	428d      	cmp	r5, r1
 8016ce6:	f000 8691 	beq.w	8017a0c <MEMS_runMagCal+0x1ad8>
 8016cea:	2f03      	cmp	r7, #3
 8016cec:	f47f adc0 	bne.w	8016870 <MEMS_runMagCal+0x93c>
 8016cf0:	ee07 0a90 	vmov	s15, r0
 8016cf4:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8016f78 <MEMS_runMagCal+0x1044>
 8016cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016cfc:	ed99 7a01 	vldr	s14, [r9, #4]
 8016d00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016d04:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8016d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d10:	f77f adae 	ble.w	8016870 <MEMS_runMagCal+0x93c>
 8016d14:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	f43f ada9 	beq.w	8016870 <MEMS_runMagCal+0x93c>
 8016d1e:	eddd 7a07 	vldr	s15, [sp, #28]
 8016d22:	330a      	adds	r3, #10
 8016d24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016d28:	ee07 3a90 	vmov	s15, r3
 8016d2c:	ee67 6a26 	vmul.f32	s13, s14, s13
 8016d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016d34:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d3c:	f77f ad98 	ble.w	8016870 <MEMS_runMagCal+0x93c>
 8016d40:	f899 3001 	ldrb.w	r3, [r9, #1]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	f47f ad93 	bne.w	8016870 <MEMS_runMagCal+0x93c>
 8016d4a:	f899 3040 	ldrb.w	r3, [r9, #64]	; 0x40
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	f43f ad1b 	beq.w	801678a <MEMS_runMagCal+0x856>
 8016d54:	f899 3048 	ldrb.w	r3, [r9, #72]	; 0x48
 8016d58:	2bff      	cmp	r3, #255	; 0xff
 8016d5a:	f47f ad16 	bne.w	801678a <MEMS_runMagCal+0x856>
 8016d5e:	e587      	b.n	8016870 <MEMS_runMagCal+0x93c>
 8016d60:	2300      	movs	r3, #0
 8016d62:	9309      	str	r3, [sp, #36]	; 0x24
 8016d64:	9304      	str	r3, [sp, #16]
 8016d66:	2200      	movs	r2, #0
 8016d68:	e525      	b.n	80167b6 <MEMS_runMagCal+0x882>
 8016d6a:	b11a      	cbz	r2, 8016d74 <MEMS_runMagCal+0xe40>
 8016d6c:	f1bc 0f00 	cmp.w	ip, #0
 8016d70:	f47f af10 	bne.w	8016b94 <MEMS_runMagCal+0xc60>
 8016d74:	f899 308d 	ldrb.w	r3, [r9, #141]	; 0x8d
 8016d78:	461a      	mov	r2, r3
 8016d7a:	4296      	cmp	r6, r2
 8016d7c:	930a      	str	r3, [sp, #40]	; 0x28
 8016d7e:	f999 308e 	ldrsb.w	r3, [r9, #142]	; 0x8e
 8016d82:	f000 8460 	beq.w	8017646 <MEMS_runMagCal+0x1712>
 8016d86:	3301      	adds	r3, #1
 8016d88:	930b      	str	r3, [sp, #44]	; 0x2c
 8016d8a:	1b9b      	subs	r3, r3, r6
 8016d8c:	4611      	mov	r1, r2
 8016d8e:	fb93 f2f2 	sdiv	r2, r3, r2
 8016d92:	fb01 3212 	mls	r2, r1, r2, r3
 8016d96:	2a00      	cmp	r2, #0
 8016d98:	bfb8      	it	lt
 8016d9a:	460b      	movlt	r3, r1
 8016d9c:	468c      	mov	ip, r1
 8016d9e:	bfb8      	it	lt
 8016da0:	18d2      	addlt	r2, r2, r3
 8016da2:	b212      	sxth	r2, r2
 8016da4:	f106 3eff 	add.w	lr, r6, #4294967295
 8016da8:	fa5f fe8e 	uxtb.w	lr, lr
 8016dac:	f10e 0e01 	add.w	lr, lr, #1
 8016db0:	4496      	add	lr, r2
 8016db2:	e002      	b.n	8016dba <MEMS_runMagCal+0xe86>
 8016db4:	4572      	cmp	r2, lr
 8016db6:	f43f aeb4 	beq.w	8016b22 <MEMS_runMagCal+0xbee>
 8016dba:	fb92 f3fc 	sdiv	r3, r2, ip
 8016dbe:	fb0c 2313 	mls	r3, ip, r3, r2
 8016dc2:	b2db      	uxtb	r3, r3
 8016dc4:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8016dc8:	f9b3 70ae 	ldrsh.w	r7, [r3, #174]	; 0xae
 8016dcc:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 8016dd0:	1bc7      	subs	r7, r0, r7
 8016dd2:	1a61      	subs	r1, r4, r1
 8016dd4:	ee07 7a90 	vmov	s15, r7
 8016dd8:	ee06 1a90 	vmov	s13, r1
 8016ddc:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8016de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016de4:	1aeb      	subs	r3, r5, r3
 8016de6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016dea:	ee07 3a10 	vmov	s14, r3
 8016dee:	eef0 7ae7 	vabs.f32	s15, s15
 8016df2:	eef0 6ae6 	vabs.f32	s13, s13
 8016df6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016dfe:	eeb0 7ac7 	vabs.f32	s14, s14
 8016e02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016e06:	eef4 4ae7 	vcmpe.f32	s9, s15
 8016e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e0e:	f102 0201 	add.w	r2, r2, #1
 8016e12:	ddcf      	ble.n	8016db4 <MEMS_runMagCal+0xe80>
 8016e14:	e6be      	b.n	8016b94 <MEMS_runMagCal+0xc60>
 8016e16:	ee07 4a90 	vmov	s15, r4
 8016e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e1e:	eef0 7ae7 	vabs.f32	s15, s15
 8016e22:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8016e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e2a:	f9b2 5006 	ldrsh.w	r5, [r2, #6]
 8016e2e:	f77f adde 	ble.w	80169ee <MEMS_runMagCal+0xaba>
 8016e32:	ee07 5a90 	vmov	s15, r5
 8016e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e3a:	eef0 7ae7 	vabs.f32	s15, s15
 8016e3e:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8016e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e46:	f73f aea5 	bgt.w	8016b94 <MEMS_runMagCal+0xc60>
 8016e4a:	f899 608c 	ldrb.w	r6, [r9, #140]	; 0x8c
 8016e4e:	2e00      	cmp	r6, #0
 8016e50:	f47f add2 	bne.w	80169f8 <MEMS_runMagCal+0xac4>
 8016e54:	f04f 0301 	mov.w	r3, #1
 8016e58:	fb90 f2f8 	sdiv	r2, r0, r8
 8016e5c:	f889 308c 	strb.w	r3, [r9, #140]	; 0x8c
 8016e60:	9b03      	ldr	r3, [sp, #12]
 8016e62:	f889 608e 	strb.w	r6, [r9, #142]	; 0x8e
 8016e66:	f9b3 7002 	ldrsh.w	r7, [r3, #2]
 8016e6a:	fb08 0212 	mls	r2, r8, r2, r0
 8016e6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e70:	2a00      	cmp	r2, #0
 8016e72:	fb01 3307 	mla	r3, r1, r7, r3
 8016e76:	bfb8      	it	lt
 8016e78:	4442      	addlt	r2, r8
 8016e7a:	f8c9 3090 	str.w	r3, [r9, #144]	; 0x90
 8016e7e:	b213      	sxth	r3, r2
 8016e80:	ee07 3a90 	vmov	s15, r3
 8016e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e88:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016e8c:	fef8 7a67 	vrinta.f32	s15, s15
 8016e90:	fb94 f3f8 	sdiv	r3, r4, r8
 8016e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016e98:	f8a9 40b0 	strh.w	r4, [r9, #176]	; 0xb0
 8016e9c:	f8a9 43a6 	strh.w	r4, [r9, #934]	; 0x3a6
 8016ea0:	fb08 4413 	mls	r4, r8, r3, r4
 8016ea4:	2c00      	cmp	r4, #0
 8016ea6:	bfb8      	it	lt
 8016ea8:	4444      	addlt	r4, r8
 8016eaa:	b224      	sxth	r4, r4
 8016eac:	edcd 7a02 	vstr	s15, [sp, #8]
 8016eb0:	ee07 4a90 	vmov	s15, r4
 8016eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016eb8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016ebc:	fef8 7a67 	vrinta.f32	s15, s15
 8016ec0:	fb95 f3f8 	sdiv	r3, r5, r8
 8016ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016ec8:	f8a9 50b2 	strh.w	r5, [r9, #178]	; 0xb2
 8016ecc:	f8a9 53a8 	strh.w	r5, [r9, #936]	; 0x3a8
 8016ed0:	fb08 5513 	mls	r5, r8, r3, r5
 8016ed4:	2d00      	cmp	r5, #0
 8016ed6:	bfb8      	it	lt
 8016ed8:	4445      	addlt	r5, r8
 8016eda:	b22d      	sxth	r5, r5
 8016edc:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8016ee0:	edcd 7a02 	vstr	s15, [sp, #8]
 8016ee4:	ee07 5a90 	vmov	s15, r5
 8016ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016eec:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016ef0:	fef8 7a67 	vrinta.f32	s15, s15
 8016ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016ef8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8016efc:	edcd 7a02 	vstr	s15, [sp, #8]
 8016f00:	f8a9 00ae 	strh.w	r0, [r9, #174]	; 0xae
 8016f04:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8016f08:	f8a9 03a4 	strh.w	r0, [r9, #932]	; 0x3a4
 8016f0c:	f8a9 60ac 	strh.w	r6, [r9, #172]	; 0xac
 8016f10:	ee1a 0a90 	vmov	r0, s21
 8016f14:	f7f7 ffb2 	bl	800ee7c <MEMS_setMagIndexToOne>
 8016f18:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8016f1c:	9302      	str	r3, [sp, #8]
 8016f1e:	2301      	movs	r3, #1
 8016f20:	9308      	str	r3, [sp, #32]
 8016f22:	e637      	b.n	8016b94 <MEMS_runMagCal+0xc60>
 8016f24:	2301      	movs	r3, #1
 8016f26:	9f05      	ldr	r7, [sp, #20]
 8016f28:	fa03 f30a 	lsl.w	r3, r3, sl
 8016f2c:	2f1f      	cmp	r7, #31
 8016f2e:	ea02 0203 	and.w	r2, r2, r3
 8016f32:	e9d9 3127 	ldrd	r3, r1, [r9, #156]	; 0x9c
 8016f36:	f63f add1 	bhi.w	8016adc <MEMS_runMagCal+0xba8>
 8016f3a:	463b      	mov	r3, r7
 8016f3c:	2701      	movs	r7, #1
 8016f3e:	fa07 f303 	lsl.w	r3, r7, r3
 8016f42:	ea01 0c03 	and.w	ip, r1, r3
 8016f46:	9906      	ldr	r1, [sp, #24]
 8016f48:	e9d9 7329 	ldrd	r7, r3, [r9, #164]	; 0xa4
 8016f4c:	291f      	cmp	r1, #31
 8016f4e:	f63f add2 	bhi.w	8016af6 <MEMS_runMagCal+0xbc2>
 8016f52:	460b      	mov	r3, r1
 8016f54:	2101      	movs	r1, #1
 8016f56:	fa01 f303 	lsl.w	r3, r1, r3
 8016f5a:	403b      	ands	r3, r7
 8016f5c:	e5d1      	b.n	8016b02 <MEMS_runMagCal+0xbce>
 8016f5e:	2701      	movs	r7, #1
 8016f60:	e4d1      	b.n	8016906 <MEMS_runMagCal+0x9d2>
 8016f62:	2400      	movs	r4, #0
 8016f64:	f899 1011 	ldrb.w	r1, [r9, #17]
 8016f68:	4620      	mov	r0, r4
 8016f6a:	e459      	b.n	8016820 <MEMS_runMagCal+0x8ec>
 8016f6c:	2300      	movs	r3, #0
 8016f6e:	9302      	str	r3, [sp, #8]
 8016f70:	f7ff b93b 	b.w	80161ea <MEMS_runMagCal+0x2b6>
 8016f74:	477fff00 	.word	0x477fff00
 8016f78:	3a83126f 	.word	0x3a83126f
 8016f7c:	42340000 	.word	0x42340000
 8016f80:	3faccccd 	.word	0x3faccccd
 8016f84:	00000000 	.word	0x00000000
 8016f88:	2d05      	cmp	r5, #5
 8016f8a:	f240 8351 	bls.w	8017630 <MEMS_runMagCal+0x16fc>
 8016f8e:	2b05      	cmp	r3, #5
 8016f90:	f240 834e 	bls.w	8017630 <MEMS_runMagCal+0x16fc>
 8016f94:	2905      	cmp	r1, #5
 8016f96:	f240 834b 	bls.w	8017630 <MEMS_runMagCal+0x16fc>
 8016f9a:	f999 308e 	ldrsb.w	r3, [r9, #142]	; 0x8e
 8016f9e:	f899 b08d 	ldrb.w	fp, [r9, #141]	; 0x8d
 8016fa2:	9302      	str	r3, [sp, #8]
 8016fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fa6:	455b      	cmp	r3, fp
 8016fa8:	f000 85c4 	beq.w	8017b34 <MEMS_runMagCal+0x1c00>
 8016fac:	461a      	mov	r2, r3
 8016fae:	9b02      	ldr	r3, [sp, #8]
 8016fb0:	46da      	mov	sl, fp
 8016fb2:	3301      	adds	r3, #1
 8016fb4:	9305      	str	r3, [sp, #20]
 8016fb6:	1a9b      	subs	r3, r3, r2
 8016fb8:	fb93 f2fb 	sdiv	r2, r3, fp
 8016fbc:	fb0b 3212 	mls	r2, fp, r2, r3
 8016fc0:	2a00      	cmp	r2, #0
 8016fc2:	bfb8      	it	lt
 8016fc4:	445a      	addlt	r2, fp
 8016fc6:	b212      	sxth	r2, r2
 8016fc8:	eb09 03c2 	add.w	r3, r9, r2, lsl #3
 8016fcc:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 8016fd0:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8016fd4:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 8016fd8:	468e      	mov	lr, r1
 8016fda:	463e      	mov	r6, r7
 8016fdc:	46ac      	mov	ip, r5
 8016fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fe0:	f103 38ff 	add.w	r8, r3, #4294967295
 8016fe4:	fa5f f888 	uxtb.w	r8, r8
 8016fe8:	f108 0801 	add.w	r8, r8, #1
 8016fec:	4490      	add	r8, r2
 8016fee:	fb92 f3fa 	sdiv	r3, r2, sl
 8016ff2:	fb0a 2313 	mls	r3, sl, r3, r2
 8016ff6:	b2db      	uxtb	r3, r3
 8016ff8:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8016ffc:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8017000:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 8017004:	42a1      	cmp	r1, r4
 8017006:	bfb8      	it	lt
 8017008:	4621      	movlt	r1, r4
 801700a:	45a6      	cmp	lr, r4
 801700c:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8017010:	bfa8      	it	ge
 8017012:	46a6      	movge	lr, r4
 8017014:	4285      	cmp	r5, r0
 8017016:	bfb8      	it	lt
 8017018:	4605      	movlt	r5, r0
 801701a:	4584      	cmp	ip, r0
 801701c:	bfa8      	it	ge
 801701e:	4684      	movge	ip, r0
 8017020:	429f      	cmp	r7, r3
 8017022:	bfb8      	it	lt
 8017024:	461f      	movlt	r7, r3
 8017026:	3201      	adds	r2, #1
 8017028:	429e      	cmp	r6, r3
 801702a:	bfa8      	it	ge
 801702c:	461e      	movge	r6, r3
 801702e:	4542      	cmp	r2, r8
 8017030:	d1dd      	bne.n	8016fee <MEMS_runMagCal+0x10ba>
 8017032:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017036:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 8016f7c <MEMS_runMagCal+0x1048>
 801703a:	eec7 8a88 	vdiv.f32	s17, s15, s16
 801703e:	f899 3040 	ldrb.w	r3, [r9, #64]	; 0x40
 8017042:	eba1 010e 	sub.w	r1, r1, lr
 8017046:	eba5 050c 	sub.w	r5, r5, ip
 801704a:	1bbe      	subs	r6, r7, r6
 801704c:	ee28 7a87 	vmul.f32	s14, s17, s14
 8017050:	b209      	sxth	r1, r1
 8017052:	b22d      	sxth	r5, r5
 8017054:	b236      	sxth	r6, r6
 8017056:	2b00      	cmp	r3, #0
 8017058:	f040 8566 	bne.w	8017b28 <MEMS_runMagCal+0x1bf4>
 801705c:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
 8017060:	fab3 f883 	clz	r8, r3
 8017064:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8017068:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801706c:	ee06 1a90 	vmov	s13, r1
 8017070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017074:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017078:	eef4 6ae7 	vcmpe.f32	s13, s15
 801707c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017080:	f300 8535 	bgt.w	8017aee <MEMS_runMagCal+0x1bba>
 8017084:	ee06 5a10 	vmov	s12, r5
 8017088:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801708c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017094:	f100 852b 	bmi.w	8017aee <MEMS_runMagCal+0x1bba>
 8017098:	ee05 6a90 	vmov	s11, r6
 801709c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80170a0:	eef4 7ae5 	vcmpe.f32	s15, s11
 80170a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170a8:	f100 8521 	bmi.w	8017aee <MEMS_runMagCal+0x1bba>
 80170ac:	428d      	cmp	r5, r1
 80170ae:	462a      	mov	r2, r5
 80170b0:	bfb8      	it	lt
 80170b2:	460a      	movlt	r2, r1
 80170b4:	428e      	cmp	r6, r1
 80170b6:	4633      	mov	r3, r6
 80170b8:	bfa8      	it	ge
 80170ba:	460b      	movge	r3, r1
 80170bc:	42b2      	cmp	r2, r6
 80170be:	bfb8      	it	lt
 80170c0:	4632      	movlt	r2, r6
 80170c2:	42ab      	cmp	r3, r5
 80170c4:	bfa8      	it	ge
 80170c6:	462b      	movge	r3, r5
 80170c8:	428a      	cmp	r2, r1
 80170ca:	9202      	str	r2, [sp, #8]
 80170cc:	f340 855c 	ble.w	8017b88 <MEMS_runMagCal+0x1c54>
 80170d0:	4299      	cmp	r1, r3
 80170d2:	bfb8      	it	lt
 80170d4:	4619      	movlt	r1, r3
 80170d6:	42aa      	cmp	r2, r5
 80170d8:	dd02      	ble.n	80170e0 <MEMS_runMagCal+0x11ac>
 80170da:	42ab      	cmp	r3, r5
 80170dc:	bfb8      	it	lt
 80170de:	4629      	movlt	r1, r5
 80170e0:	9a02      	ldr	r2, [sp, #8]
 80170e2:	4296      	cmp	r6, r2
 80170e4:	da02      	bge.n	80170ec <MEMS_runMagCal+0x11b8>
 80170e6:	429e      	cmp	r6, r3
 80170e8:	bfc8      	it	gt
 80170ea:	4631      	movgt	r1, r6
 80170ec:	f1b8 0f00 	cmp.w	r8, #0
 80170f0:	f000 8272 	beq.w	80175d8 <MEMS_runMagCal+0x16a4>
 80170f4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80170f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170fc:	dc0d      	bgt.n	801711a <MEMS_runMagCal+0x11e6>
 80170fe:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8017102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017106:	dc08      	bgt.n	801711a <MEMS_runMagCal+0x11e6>
 8017108:	eeb4 7ae5 	vcmpe.f32	s14, s11
 801710c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017110:	bfcc      	ite	gt
 8017112:	f04f 0801 	movgt.w	r8, #1
 8017116:	f04f 0800 	movle.w	r8, #0
 801711a:	ed5f 7a67 	vldr	s15, [pc, #-412]	; 8016f80 <MEMS_runMagCal+0x104c>
 801711e:	ed9d 5a02 	vldr	s10, [sp, #8]
 8017122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017126:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801712a:	eeb4 5ae7 	vcmpe.f32	s10, s15
 801712e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017132:	f2c0 852c 	blt.w	8017b8e <MEMS_runMagCal+0x1c5a>
 8017136:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 801713a:	ee07 1a90 	vmov	s15, r1
 801713e:	ee27 5a05 	vmul.f32	s10, s14, s10
 8017142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017146:	eef4 7ac5 	vcmpe.f32	s15, s10
 801714a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801714e:	f2c0 851e 	blt.w	8017b8e <MEMS_runMagCal+0x1c5a>
 8017152:	9a02      	ldr	r2, [sp, #8]
 8017154:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8017158:	f280 8519 	bge.w	8017b8e <MEMS_runMagCal+0x1c5a>
 801715c:	ee07 3a90 	vmov	s15, r3
 8017160:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 8017164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017168:	ee67 7a85 	vmul.f32	s15, s15, s10
 801716c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017174:	f140 850b 	bpl.w	8017b8e <MEMS_runMagCal+0x1c5a>
 8017178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801717a:	455b      	cmp	r3, fp
 801717c:	f000 853f 	beq.w	8017bfe <MEMS_runMagCal+0x1cca>
 8017180:	461a      	mov	r2, r3
 8017182:	9b05      	ldr	r3, [sp, #20]
 8017184:	1a9b      	subs	r3, r3, r2
 8017186:	fb93 f7fa 	sdiv	r7, r3, sl
 801718a:	fb0a 3717 	mls	r7, sl, r7, r3
 801718e:	2f00      	cmp	r7, #0
 8017190:	bfb8      	it	lt
 8017192:	445f      	addlt	r7, fp
 8017194:	b23f      	sxth	r7, r7
 8017196:	9b04      	ldr	r3, [sp, #16]
 8017198:	b27f      	sxtb	r7, r7
 801719a:	469c      	mov	ip, r3
 801719c:	f8cd 8018 	str.w	r8, [sp, #24]
 80171a0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80171a4:	9305      	str	r3, [sp, #20]
 80171a6:	f1c7 0e01 	rsb	lr, r7, #1
 80171aa:	463a      	mov	r2, r7
 80171ac:	fb92 f1fa 	sdiv	r1, r2, sl
 80171b0:	3701      	adds	r7, #1
 80171b2:	fb97 f3fa 	sdiv	r3, r7, sl
 80171b6:	fb0a 2111 	mls	r1, sl, r1, r2
 80171ba:	fb0a 7313 	mls	r3, sl, r3, r7
 80171be:	b24a      	sxtb	r2, r1
 80171c0:	2a00      	cmp	r2, #0
 80171c2:	bfbc      	itt	lt
 80171c4:	4459      	addlt	r1, fp
 80171c6:	b24a      	sxtblt	r2, r1
 80171c8:	b25b      	sxtb	r3, r3
 80171ca:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 80171ce:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 80171d2:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 80171d6:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 80171da:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 80171de:	1a45      	subs	r5, r0, r1
 80171e0:	bf48      	it	mi
 80171e2:	1a09      	submi	r1, r1, r0
 80171e4:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 80171e8:	bf4c      	ite	mi
 80171ea:	b20d      	sxthmi	r5, r1
 80171ec:	b22d      	sxthpl	r5, r5
 80171ee:	1a21      	subs	r1, r4, r0
 80171f0:	bf48      	it	mi
 80171f2:	1b01      	submi	r1, r0, r4
 80171f4:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 80171f8:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 80171fc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8017200:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 8017204:	1a26      	subs	r6, r4, r0
 8017206:	eba3 0302 	sub.w	r3, r3, r2
 801720a:	b21b      	sxth	r3, r3
 801720c:	bf48      	it	mi
 801720e:	1b06      	submi	r6, r0, r4
 8017210:	2b00      	cmp	r3, #0
 8017212:	b209      	sxth	r1, r1
 8017214:	b236      	sxth	r6, r6
 8017216:	dd20      	ble.n	801725a <MEMS_runMagCal+0x1326>
 8017218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801721c:	4429      	add	r1, r5
 801721e:	440e      	add	r6, r1
 8017220:	fb02 f606 	mul.w	r6, r2, r6
 8017224:	ee07 6a90 	vmov	s15, r6
 8017228:	ee07 3a10 	vmov	s14, r3
 801722c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017230:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017234:	ee67 7a88 	vmul.f32	s15, s15, s16
 8017238:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801723c:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8017240:	ee17 3a90 	vmov	r3, s15
 8017244:	b21b      	sxth	r3, r3
 8017246:	f10c 0c01 	add.w	ip, ip, #1
 801724a:	2b96      	cmp	r3, #150	; 0x96
 801724c:	fa5f fc8c 	uxtb.w	ip, ip
 8017250:	dd03      	ble.n	801725a <MEMS_runMagCal+0x1326>
 8017252:	9b05      	ldr	r3, [sp, #20]
 8017254:	3301      	adds	r3, #1
 8017256:	b2db      	uxtb	r3, r3
 8017258:	9305      	str	r3, [sp, #20]
 801725a:	eb0e 0307 	add.w	r3, lr, r7
 801725e:	b2db      	uxtb	r3, r3
 8017260:	4598      	cmp	r8, r3
 8017262:	d8a2      	bhi.n	80171aa <MEMS_runMagCal+0x1276>
 8017264:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017268:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801726c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017270:	4563      	cmp	r3, ip
 8017272:	f340 81dd 	ble.w	8017630 <MEMS_runMagCal+0x16fc>
 8017276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017278:	b92b      	cbnz	r3, 8017286 <MEMS_runMagCal+0x1352>
 801727a:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
 801727e:	3b02      	subs	r3, #2
 8017280:	2b01      	cmp	r3, #1
 8017282:	f240 84f6 	bls.w	8017c72 <MEMS_runMagCal+0x1d3e>
 8017286:	ae25      	add	r6, sp, #148	; 0x94
 8017288:	4630      	mov	r0, r6
 801728a:	2220      	movs	r2, #32
 801728c:	2100      	movs	r1, #0
 801728e:	f003 fab4 	bl	801a7fa <memset>
 8017292:	2300      	movs	r3, #0
 8017294:	f899 508c 	ldrb.w	r5, [r9, #140]	; 0x8c
 8017298:	f899 008d 	ldrb.w	r0, [r9, #141]	; 0x8d
 801729c:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
 80172a0:	931f      	str	r3, [sp, #124]	; 0x7c
 80172a2:	f999 308e 	ldrsb.w	r3, [r9, #142]	; 0x8e
 80172a6:	4285      	cmp	r5, r0
 80172a8:	f103 0301 	add.w	r3, r3, #1
 80172ac:	f000 84d9 	beq.w	8017c62 <MEMS_runMagCal+0x1d2e>
 80172b0:	1b5b      	subs	r3, r3, r5
 80172b2:	fb93 f2f0 	sdiv	r2, r3, r0
 80172b6:	fb00 3312 	mls	r3, r0, r2, r3
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	bfb8      	it	lt
 80172be:	181b      	addlt	r3, r3, r0
 80172c0:	b21a      	sxth	r2, r3
 80172c2:	2d00      	cmp	r5, #0
 80172c4:	f000 8524 	beq.w	8017d10 <MEMS_runMagCal+0x1ddc>
 80172c8:	ed5f 5ad2 	vldr	s11, [pc, #-840]	; 8016f84 <MEMS_runMagCal+0x1050>
 80172cc:	4611      	mov	r1, r2
 80172ce:	eeb0 5a65 	vmov.f32	s10, s11
 80172d2:	eef0 4a65 	vmov.f32	s9, s11
 80172d6:	1e6f      	subs	r7, r5, #1
 80172d8:	b2fc      	uxtb	r4, r7
 80172da:	3401      	adds	r4, #1
 80172dc:	4414      	add	r4, r2
 80172de:	fb91 f3f0 	sdiv	r3, r1, r0
 80172e2:	fb00 1313 	mls	r3, r0, r3, r1
 80172e6:	b2db      	uxtb	r3, r3
 80172e8:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 80172ec:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 80172f0:	3101      	adds	r1, #1
 80172f2:	ee06 ca90 	vmov	s13, ip
 80172f6:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 80172fa:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80172fe:	ee07 ca10 	vmov	s14, ip
 8017302:	ee07 3a90 	vmov	s15, r3
 8017306:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801730a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801730e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017312:	42a1      	cmp	r1, r4
 8017314:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8017318:	ee35 5a07 	vadd.f32	s10, s10, s14
 801731c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8017320:	d1dd      	bne.n	80172de <MEMS_runMagCal+0x13aa>
 8017322:	ee07 5a90 	vmov	s15, r5
 8017326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801732a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801732e:	ed9f 6aec 	vldr	s12, [pc, #944]	; 80176e0 <MEMS_runMagCal+0x17ac>
 8017332:	ee87 aa27 	vdiv.f32	s20, s14, s15
 8017336:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 801733a:	ee6a 9a24 	vmul.f32	s19, s20, s9
 801733e:	ee2a 9a05 	vmul.f32	s18, s20, s10
 8017342:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 8017346:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 801734a:	ee2a aa25 	vmul.f32	s20, s20, s11
 801734e:	eeb0 5a46 	vmov.f32	s10, s12
 8017352:	eef0 5a46 	vmov.f32	s11, s12
 8017356:	eef0 4a46 	vmov.f32	s9, s12
 801735a:	eeb0 4a46 	vmov.f32	s8, s12
 801735e:	eef0 3a46 	vmov.f32	s7, s12
 8017362:	b2f9      	uxtb	r1, r7
 8017364:	3101      	adds	r1, #1
 8017366:	4411      	add	r1, r2
 8017368:	fb92 f3f0 	sdiv	r3, r2, r0
 801736c:	fb00 2313 	mls	r3, r0, r3, r2
 8017370:	b2db      	uxtb	r3, r3
 8017372:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8017376:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 801737a:	3201      	adds	r2, #1
 801737c:	ee06 4a90 	vmov	s13, r4
 8017380:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8017384:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8017388:	ee07 4a10 	vmov	s14, r4
 801738c:	ee07 3a90 	vmov	s15, r3
 8017390:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017394:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801739c:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80173a0:	ee37 7a49 	vsub.f32	s14, s14, s18
 80173a4:	ee77 7aca 	vsub.f32	s15, s15, s20
 80173a8:	4291      	cmp	r1, r2
 80173aa:	eee6 3aa6 	vfma.f32	s7, s13, s13
 80173ae:	eea6 4a87 	vfma.f32	s8, s13, s14
 80173b2:	eea7 5a07 	vfma.f32	s10, s14, s14
 80173b6:	eee6 4aa7 	vfma.f32	s9, s13, s15
 80173ba:	eee7 5a27 	vfma.f32	s11, s14, s15
 80173be:	eea7 6aa7 	vfma.f32	s12, s15, s15
 80173c2:	d1d1      	bne.n	8017368 <MEMS_runMagCal+0x1434>
 80173c4:	edc6 3a00 	vstr	s7, [r6]
 80173c8:	ed86 4a01 	vstr	s8, [r6, #4]
 80173cc:	edc6 4a02 	vstr	s9, [r6, #8]
 80173d0:	ed86 5a03 	vstr	s10, [r6, #12]
 80173d4:	edc6 5a04 	vstr	s11, [r6, #16]
 80173d8:	ed86 6a05 	vstr	s12, [r6, #20]
 80173dc:	4630      	mov	r0, r6
 80173de:	a91a      	add	r1, sp, #104	; 0x68
 80173e0:	f7fe fcee 	bl	8015dc0 <MEMS_EIG3>
 80173e4:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
 80173e8:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 80173ec:	eeb0 6ae7 	vabs.f32	s12, s15
 80173f0:	eef0 5ae4 	vabs.f32	s11, s9
 80173f4:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 80173f8:	fe86 7a65 	vminnm.f32	s14, s12, s11
 80173fc:	eef0 6ac5 	vabs.f32	s13, s10
 8017400:	fe86 6a25 	vmaxnm.f32	s12, s12, s11
 8017404:	fe87 7a66 	vminnm.f32	s14, s14, s13
 8017408:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 801740c:	fec6 6a86 	vmaxnm.f32	s13, s13, s12
 8017410:	ee27 6a25 	vmul.f32	s12, s14, s11
 8017414:	eef4 6ac6 	vcmpe.f32	s13, s12
 8017418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801741c:	f300 840e 	bgt.w	8017c3c <MEMS_runMagCal+0x1d08>
 8017420:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8017424:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017428:	eef4 6ac7 	vcmpe.f32	s13, s14
 801742c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017430:	f899 308c 	ldrb.w	r3, [r9, #140]	; 0x8c
 8017434:	dd02      	ble.n	801743c <MEMS_runMagCal+0x1508>
 8017436:	2b22      	cmp	r3, #34	; 0x22
 8017438:	f240 8400 	bls.w	8017c3c <MEMS_runMagCal+0x1d08>
 801743c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8017440:	ee07 3a10 	vmov	s14, r3
 8017444:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017448:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801744c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8017450:	eef1 7ae6 	vsqrt.f32	s15, s13
 8017454:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80176e4 <MEMS_runMagCal+0x17b0>
 8017458:	ee68 7a27 	vmul.f32	s15, s16, s15
 801745c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017464:	f300 83ea 	bgt.w	8017c3c <MEMS_runMagCal+0x1d08>
 8017468:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 801746c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017474:	f100 83e2 	bmi.w	8017c3c <MEMS_runMagCal+0x1d08>
 8017478:	eddf 7a9b 	vldr	s15, [pc, #620]	; 80176e8 <MEMS_runMagCal+0x17b4>
 801747c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8017480:	eddd 7a02 	vldr	s15, [sp, #8]
 8017484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017488:	eef4 7ac7 	vcmpe.f32	s15, s14
 801748c:	2300      	movs	r3, #0
 801748e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017492:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8017496:	932c      	str	r3, [sp, #176]	; 0xb0
 8017498:	d408      	bmi.n	80174ac <MEMS_runMagCal+0x1578>
 801749a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801749e:	ee17 3a10 	vmov	r3, s14
 80174a2:	b21b      	sxth	r3, r3
 80174a4:	ee07 3a90 	vmov	s15, r3
 80174a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80174ac:	eddf 6a96 	vldr	s13, [pc, #600]	; 8017708 <MEMS_runMagCal+0x17d4>
 80174b0:	ee86 7a88 	vdiv.f32	s14, s13, s16
 80174b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80174b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174bc:	dc08      	bgt.n	80174d0 <MEMS_runMagCal+0x159c>
 80174be:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80174c2:	ee17 3a10 	vmov	r3, s14
 80174c6:	b21b      	sxth	r3, r3
 80174c8:	ee07 3a90 	vmov	s15, r3
 80174cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80174d0:	ee27 7a88 	vmul.f32	s14, s15, s16
 80174d4:	eddf 7a85 	vldr	s15, [pc, #532]	; 80176ec <MEMS_runMagCal+0x17b8>
 80174d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80174dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174e0:	f340 8412 	ble.w	8017d08 <MEMS_runMagCal+0x1dd4>
 80174e4:	eddf 7a82 	vldr	s15, [pc, #520]	; 80176f0 <MEMS_runMagCal+0x17bc>
 80174e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80174ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174f0:	f140 840a 	bpl.w	8017d08 <MEMS_runMagCal+0x1dd4>
 80174f4:	ed9f 6a7f 	vldr	s12, [pc, #508]	; 80176f4 <MEMS_runMagCal+0x17c0>
 80174f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80174fc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8017500:	eee7 7a06 	vfma.f32	s15, s14, s12
 8017504:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017508:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8017708 <MEMS_runMagCal+0x17d4>
 801750c:	ee68 4a29 	vmul.f32	s9, s16, s19
 8017510:	ee28 5a09 	vmul.f32	s10, s16, s18
 8017514:	ee68 5a0a 	vmul.f32	s11, s16, s20
 8017518:	ee67 7a87 	vmul.f32	s15, s15, s14
 801751c:	edc6 4a00 	vstr	s9, [r6]
 8017520:	ed86 5a01 	vstr	s10, [r6, #4]
 8017524:	edc6 5a02 	vstr	s11, [r6, #8]
 8017528:	edc6 7a03 	vstr	s15, [r6, #12]
 801752c:	edc6 7a06 	vstr	s15, [r6, #24]
 8017530:	ed9f aa6b 	vldr	s20, [pc, #428]	; 80176e0 <MEMS_runMagCal+0x17ac>
 8017534:	eddf 9a70 	vldr	s19, [pc, #448]	; 80176f8 <MEMS_runMagCal+0x17c4>
 8017538:	ed9f 9a70 	vldr	s18, [pc, #448]	; 80176fc <MEMS_runMagCal+0x17c8>
 801753c:	9c04      	ldr	r4, [sp, #16]
 801753e:	ab11      	add	r3, sp, #68	; 0x44
 8017540:	eeb0 0a48 	vmov.f32	s0, s16
 8017544:	4631      	mov	r1, r6
 8017546:	ee1a 0a90 	vmov	r0, s21
 801754a:	aa2d      	add	r2, sp, #180	; 0xb4
 801754c:	f7fe fa26 	bl	801599c <MEMS_SolveLinearEq>
 8017550:	1c63      	adds	r3, r4, #1
 8017552:	2800      	cmp	r0, #0
 8017554:	f43e aee2 	beq.w	801631c <MEMS_runMagCal+0x3e8>
 8017558:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 801755c:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 8017560:	eeb0 7ac3 	vabs.f32	s14, s6
 8017564:	eef0 6ae3 	vabs.f32	s13, s7
 8017568:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 801756c:	fec7 6a26 	vmaxnm.f32	s13, s14, s13
 8017570:	eeb0 7ac4 	vabs.f32	s14, s8
 8017574:	fec6 6a8a 	vmaxnm.f32	s13, s13, s20
 8017578:	fe87 7a26 	vmaxnm.f32	s14, s14, s13
 801757c:	edd6 4a00 	vldr	s9, [r6]
 8017580:	ed96 5a01 	vldr	s10, [r6, #4]
 8017584:	edd6 5a02 	vldr	s11, [r6, #8]
 8017588:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801758c:	ed96 6a03 	vldr	s12, [r6, #12]
 8017590:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8017594:	ee76 6a27 	vadd.f32	s13, s12, s15
 8017598:	ee74 4a83 	vadd.f32	s9, s9, s6
 801759c:	ee35 5a23 	vadd.f32	s10, s10, s7
 80175a0:	ee75 5a84 	vadd.f32	s11, s11, s8
 80175a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175a8:	edc6 4a00 	vstr	s9, [r6]
 80175ac:	ed86 5a01 	vstr	s10, [r6, #4]
 80175b0:	edc6 5a02 	vstr	s11, [r6, #8]
 80175b4:	edc6 6a03 	vstr	s13, [r6, #12]
 80175b8:	eef0 7ae7 	vabs.f32	s15, s15
 80175bc:	d507      	bpl.n	80175ce <MEMS_runMagCal+0x169a>
 80175be:	eef4 7ac9 	vcmpe.f32	s15, s18
 80175c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175c6:	d502      	bpl.n	80175ce <MEMS_runMagCal+0x169a>
 80175c8:	2c01      	cmp	r4, #1
 80175ca:	f63e aeab 	bhi.w	8016324 <MEMS_runMagCal+0x3f0>
 80175ce:	b2dc      	uxtb	r4, r3
 80175d0:	2c05      	cmp	r4, #5
 80175d2:	d1b4      	bne.n	801753e <MEMS_runMagCal+0x160a>
 80175d4:	f7fe bea6 	b.w	8016324 <MEMS_runMagCal+0x3f0>
 80175d8:	ed99 5a1e 	vldr	s10, [r9, #120]	; 0x78
 80175dc:	edd9 7a1a 	vldr	s15, [r9, #104]	; 0x68
 80175e0:	edd9 4a22 	vldr	s9, [r9, #136]	; 0x88
 80175e4:	ee77 7a85 	vadd.f32	s15, s15, s10
 80175e8:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8017700 <MEMS_runMagCal+0x17cc>
 80175ec:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80175f0:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 80175f4:	ee67 7a85 	vmul.f32	s15, s15, s10
 80175f8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80175fc:	fec7 7ae4 	vminnm.f32	s15, s15, s9
 8017600:	fec7 7a85 	vmaxnm.f32	s15, s15, s10
 8017604:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8017608:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801760c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017610:	dc0e      	bgt.n	8017630 <MEMS_runMagCal+0x16fc>
 8017612:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017616:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801761a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801761e:	dc07      	bgt.n	8017630 <MEMS_runMagCal+0x16fc>
 8017620:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8017624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801762c:	f77f ada4 	ble.w	8017178 <MEMS_runMagCal+0x1244>
 8017630:	2300      	movs	r3, #0
 8017632:	f889 3000 	strb.w	r3, [r9]
 8017636:	f7ff b8a8 	b.w	801678a <MEMS_runMagCal+0x856>
 801763a:	2300      	movs	r3, #0
 801763c:	9309      	str	r3, [sp, #36]	; 0x24
 801763e:	2301      	movs	r3, #1
 8017640:	9304      	str	r3, [sp, #16]
 8017642:	f7ff bb90 	b.w	8016d66 <MEMS_runMagCal+0xe32>
 8017646:	3301      	adds	r3, #1
 8017648:	fb93 f2f6 	sdiv	r2, r3, r6
 801764c:	fb06 3212 	mls	r2, r6, r2, r3
 8017650:	46b4      	mov	ip, r6
 8017652:	930b      	str	r3, [sp, #44]	; 0x2c
 8017654:	b212      	sxth	r2, r2
 8017656:	f7ff bba5 	b.w	8016da4 <MEMS_runMagCal+0xe70>
 801765a:	eddd 7a07 	vldr	s15, [sp, #28]
 801765e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 801770c <MEMS_runMagCal+0x17d8>
 8017662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017666:	ee07 3a10 	vmov	s14, r3
 801766a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801766e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8017672:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8017676:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801767a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801767e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017682:	f63f aaa9 	bhi.w	8016bd8 <MEMS_runMagCal+0xca4>
 8017686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017688:	2b00      	cmp	r3, #0
 801768a:	f43f a87e 	beq.w	801678a <MEMS_runMagCal+0x856>
 801768e:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 8017692:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8017696:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 801769a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801769e:	eef4 7ae6 	vcmpe.f32	s15, s13
 80176a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176a6:	bf4c      	ite	mi
 80176a8:	2301      	movmi	r3, #1
 80176aa:	2300      	movpl	r3, #0
 80176ac:	9309      	str	r3, [sp, #36]	; 0x24
 80176ae:	f7ff ba97 	b.w	8016be0 <MEMS_runMagCal+0xcac>
 80176b2:	1c4a      	adds	r2, r1, #1
 80176b4:	fb92 f1f0 	sdiv	r1, r2, r0
 80176b8:	fb00 2111 	mls	r1, r0, r1, r2
 80176bc:	4605      	mov	r5, r0
 80176be:	b209      	sxth	r1, r1
 80176c0:	f7ff b918 	b.w	80168f4 <MEMS_runMagCal+0x9c0>
 80176c4:	2200      	movs	r2, #0
 80176c6:	23ff      	movs	r3, #255	; 0xff
 80176c8:	4641      	mov	r1, r8
 80176ca:	ee1a 0a90 	vmov	r0, s21
 80176ce:	f889 208c 	strb.w	r2, [r9, #140]	; 0x8c
 80176d2:	f889 308e 	strb.w	r3, [r9, #142]	; 0x8e
 80176d6:	f7f7 fe61 	bl	800f39c <MEMS_updateMagBufferIndex>
 80176da:	f7ff b94b 	b.w	8016974 <MEMS_runMagCal+0xa40>
 80176de:	bf00      	nop
 80176e0:	00000000 	.word	0x00000000
 80176e4:	42960000 	.word	0x42960000
 80176e8:	430d0000 	.word	0x430d0000
 80176ec:	41966667 	.word	0x41966667
 80176f0:	433c0000 	.word	0x433c0000
 80176f4:	3c2e4c41 	.word	0x3c2e4c41
 80176f8:	3e99999a 	.word	0x3e99999a
 80176fc:	3f666666 	.word	0x3f666666
 8017700:	3eaaaaab 	.word	0x3eaaaaab
 8017704:	358637bd 	.word	0x358637bd
 8017708:	423c0000 	.word	0x423c0000
 801770c:	3a83126f 	.word	0x3a83126f
 8017710:	00000000 	.word	0x00000000
 8017714:	4b095440 	.word	0x4b095440
 8017718:	3c23d70a 	.word	0x3c23d70a
 801771c:	481c4000 	.word	0x481c4000
 8017720:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8017724:	fb05 f303 	mul.w	r3, r5, r3
 8017728:	fb05 f202 	mul.w	r2, r5, r2
 801772c:	ee07 3a10 	vmov	s14, r3
 8017730:	fb05 f301 	mul.w	r3, r5, r1
 8017734:	ee06 2a90 	vmov	s13, r2
 8017738:	ee07 3a90 	vmov	s15, r3
 801773c:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 8017704 <MEMS_runMagCal+0x17d0>
 8017740:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017744:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801774c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8017750:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017754:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017758:	9d03      	ldr	r5, [sp, #12]
 801775a:	9600      	str	r6, [sp, #0]
 801775c:	f109 0768 	add.w	r7, r9, #104	; 0x68
 8017760:	e9c4 0000 	strd	r0, r0, [r4]
 8017764:	e9c4 0002 	strd	r0, r0, [r4, #8]
 8017768:	e9c4 0004 	strd	r0, r0, [r4, #16]
 801776c:	61a0      	str	r0, [r4, #24]
 801776e:	463a      	mov	r2, r7
 8017770:	ed95 0a01 	vldr	s0, [r5, #4]
 8017774:	ab0d      	add	r3, sp, #52	; 0x34
 8017776:	f109 014a 	add.w	r1, r9, #74	; 0x4a
 801777a:	ac0e      	add	r4, sp, #56	; 0x38
 801777c:	ee1a 0a90 	vmov	r0, s21
 8017780:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8017784:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8017788:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 801778c:	f7f7 fe92 	bl	800f4b4 <getMagStats.constprop.0>
 8017790:	9400      	str	r4, [sp, #0]
 8017792:	ed95 0a01 	vldr	s0, [r5, #4]
 8017796:	ee1a 0a90 	vmov	r0, s21
 801779a:	aa2d      	add	r2, sp, #180	; 0xb4
 801779c:	ab0d      	add	r3, sp, #52	; 0x34
 801779e:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 80177a2:	f7f7 fe87 	bl	800f4b4 <getMagStats.constprop.0>
 80177a6:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 8017708 <MEMS_runMagCal+0x17d4>
 80177aa:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80177ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80177b2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80177b6:	eef0 7ae7 	vabs.f32	s15, s15
 80177ba:	eef4 7ae6 	vcmpe.f32	s15, s13
 80177be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177c2:	ed94 7a00 	vldr	s14, [r4]
 80177c6:	d505      	bpl.n	80177d4 <MEMS_runMagCal+0x18a0>
 80177c8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80177cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177d0:	f100 81f8 	bmi.w	8017bc4 <MEMS_runMagCal+0x1c90>
 80177d4:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80177d8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80177dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177e0:	f140 81a6 	bpl.w	8017b30 <MEMS_runMagCal+0x1bfc>
 80177e4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80177e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ec:	9b04      	ldr	r3, [sp, #16]
 80177ee:	bfb8      	it	lt
 80177f0:	2302      	movlt	r3, #2
 80177f2:	edd6 6a00 	vldr	s13, [r6]
 80177f6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80177fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80177fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017806:	f57e afc0 	bpl.w	801678a <MEMS_runMagCal+0x856>
 801780a:	f899 2058 	ldrb.w	r2, [r9, #88]	; 0x58
 801780e:	429a      	cmp	r2, r3
 8017810:	f63e afbb 	bhi.w	801678a <MEMS_runMagCal+0x856>
 8017814:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8017818:	ee67 7a27 	vmul.f32	s15, s14, s15
 801781c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8017820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017824:	d40e      	bmi.n	8017844 <MEMS_runMagCal+0x1910>
 8017826:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 801782a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801782e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017832:	f140 80d5 	bpl.w	80179e0 <MEMS_runMagCal+0x1aac>
 8017836:	f899 2048 	ldrb.w	r2, [r9, #72]	; 0x48
 801783a:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801783e:	429a      	cmp	r2, r3
 8017840:	f080 80ce 	bcs.w	80179e0 <MEMS_runMagCal+0x1aac>
 8017844:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 8017848:	f9b9 104c 	ldrsh.w	r1, [r9, #76]	; 0x4c
 801784c:	f9bd c086 	ldrsh.w	ip, [sp, #134]	; 0x86
 8017850:	f9b9 004a 	ldrsh.w	r0, [r9, #74]	; 0x4a
 8017854:	eba1 0e06 	sub.w	lr, r1, r6
 8017858:	eba0 030c 	sub.w	r3, r0, ip
 801785c:	f1be 0f00 	cmp.w	lr, #0
 8017860:	bfb8      	it	lt
 8017862:	f1ce 0e00 	rsblt	lr, lr, #0
 8017866:	2b00      	cmp	r3, #0
 8017868:	bfb8      	it	lt
 801786a:	425b      	neglt	r3, r3
 801786c:	4573      	cmp	r3, lr
 801786e:	bfb8      	it	lt
 8017870:	4673      	movlt	r3, lr
 8017872:	f9bd 508a 	ldrsh.w	r5, [sp, #138]	; 0x8a
 8017876:	f9b9 204e 	ldrsh.w	r2, [r9, #78]	; 0x4e
 801787a:	b21b      	sxth	r3, r3
 801787c:	eba2 0e05 	sub.w	lr, r2, r5
 8017880:	f1be 0f00 	cmp.w	lr, #0
 8017884:	bfb8      	it	lt
 8017886:	f1ce 0e00 	rsblt	lr, lr, #0
 801788a:	4573      	cmp	r3, lr
 801788c:	bfb8      	it	lt
 801788e:	4673      	movlt	r3, lr
 8017890:	b21b      	sxth	r3, r3
 8017892:	ee07 3a90 	vmov	s15, r3
 8017896:	9b03      	ldr	r3, [sp, #12]
 8017898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801789c:	edd3 5a01 	vldr	s11, [r3, #4]
 80178a0:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80178a4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80178a8:	eef4 7ac6 	vcmpe.f32	s15, s12
 80178ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178b0:	f140 8096 	bpl.w	80179e0 <MEMS_runMagCal+0x1aac>
 80178b4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80178b8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80178bc:	ee86 2a87 	vdiv.f32	s4, s13, s14
 80178c0:	ee07 0a90 	vmov	s15, r0
 80178c4:	f8b9 3050 	ldrh.w	r3, [r9, #80]	; 0x50
 80178c8:	ee36 4a42 	vsub.f32	s8, s12, s4
 80178cc:	ee04 3a90 	vmov	s9, r3
 80178d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80178d4:	ee03 ca90 	vmov	s7, ip
 80178d8:	f8b9 3052 	ldrh.w	r3, [r9, #82]	; 0x52
 80178dc:	ee07 1a90 	vmov	s15, r1
 80178e0:	ee05 3a10 	vmov	s10, r3
 80178e4:	f8b9 3054 	ldrh.w	r3, [r9, #84]	; 0x54
 80178e8:	ee66 6a84 	vmul.f32	s13, s13, s8
 80178ec:	ee05 3a90 	vmov	s11, r3
 80178f0:	f899 3048 	ldrb.w	r3, [r9, #72]	; 0x48
 80178f4:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 80178f8:	ee06 3a10 	vmov	s12, r3
 80178fc:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8017900:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8017904:	ee00 3a90 	vmov	s1, r3
 8017908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801790c:	ee64 4a84 	vmul.f32	s9, s9, s8
 8017910:	ee03 6a90 	vmov	s7, r6
 8017914:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8017918:	eee2 6a22 	vfma.f32	s13, s4, s5
 801791c:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 8017920:	ee07 2a90 	vmov	s15, r2
 8017924:	ee01 3a10 	vmov	s2, r3
 8017928:	ee27 7a04 	vmul.f32	s14, s14, s8
 801792c:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 8017930:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8017934:	eee2 4a20 	vfma.f32	s9, s4, s1
 8017938:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801793c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8017940:	ee16 2a90 	vmov	r2, s13
 8017944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017948:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801794c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8017950:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8017954:	ee03 5a90 	vmov	s7, r5
 8017958:	eea2 7a03 	vfma.f32	s14, s4, s6
 801795c:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 8017960:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8017964:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017968:	ee01 3a90 	vmov	s3, r3
 801796c:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8017970:	ee65 5a84 	vmul.f32	s11, s11, s8
 8017974:	ee26 6a04 	vmul.f32	s12, s12, s8
 8017978:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801797c:	ee04 3a10 	vmov	s8, r3
 8017980:	eea2 5a01 	vfma.f32	s10, s4, s2
 8017984:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017988:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 801798c:	ee14 2a90 	vmov	r2, s9
 8017990:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8017994:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8017998:	eee2 7a23 	vfma.f32	s15, s4, s7
 801799c:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 80179a0:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 80179a4:	ee17 2a10 	vmov	r2, s14
 80179a8:	eee2 5a21 	vfma.f32	s11, s4, s3
 80179ac:	eea2 6a04 	vfma.f32	s12, s4, s8
 80179b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80179b4:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 80179b8:	ee15 2a10 	vmov	r2, s10
 80179bc:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 80179c0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80179c4:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 80179c8:	ee17 2a90 	vmov	r2, s15
 80179cc:	ee16 3a10 	vmov	r3, s12
 80179d0:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 80179d4:	ee15 2a90 	vmov	r2, s11
 80179d8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80179dc:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 80179e0:	f8dd c080 	ldr.w	ip, [sp, #128]	; 0x80
 80179e4:	f899 508c 	ldrb.w	r5, [r9, #140]	; 0x8c
 80179e8:	f7fe bdc2 	b.w	8016570 <MEMS_runMagCal+0x63c>
 80179ec:	4641      	mov	r1, r8
 80179ee:	ee1a 0a90 	vmov	r0, s21
 80179f2:	f7f7 fcd3 	bl	800f39c <MEMS_updateMagBufferIndex>
 80179f6:	f7ff b8c1 	b.w	8016b7c <MEMS_runMagCal+0xc48>
 80179fa:	eddd 7a07 	vldr	s15, [sp, #28]
 80179fe:	ed1f 7abd 	vldr	s14, [pc, #-756]	; 801770c <MEMS_runMagCal+0x17d8>
 8017a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017a0a:	e640      	b.n	801768e <MEMS_runMagCal+0x175a>
 8017a0c:	1c62      	adds	r2, r4, #1
 8017a0e:	ed5f 6ac0 	vldr	s13, [pc, #-768]	; 8017710 <MEMS_runMagCal+0x17dc>
 8017a12:	fb92 f5f1 	sdiv	r5, r2, r1
 8017a16:	ac0e      	add	r4, sp, #56	; 0x38
 8017a18:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8017a1c:	fb01 2215 	mls	r2, r1, r5, r2
 8017a20:	fa1f fc81 	uxth.w	ip, r1
 8017a24:	edc4 6a00 	vstr	s13, [r4]
 8017a28:	2900      	cmp	r1, #0
 8017a2a:	f000 80e1 	beq.w	8017bf0 <MEMS_runMagCal+0x1cbc>
 8017a2e:	b292      	uxth	r2, r2
 8017a30:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017a34:	1c56      	adds	r6, r2, #1
 8017a36:	f241 2e5c 	movw	lr, #4700	; 0x125c
 8017a3a:	eeb0 6a66 	vmov.f32	s12, s13
 8017a3e:	4615      	mov	r5, r2
 8017a40:	fa16 fc8c 	uxtah	ip, r6, ip
 8017a44:	e000      	b.n	8017a48 <MEMS_runMagCal+0x1b14>
 8017a46:	3601      	adds	r6, #1
 8017a48:	fbb5 f2f1 	udiv	r2, r5, r1
 8017a4c:	fb01 5212 	mls	r2, r1, r2, r5
 8017a50:	eb09 0242 	add.w	r2, r9, r2, lsl #1
 8017a54:	8a95      	ldrh	r5, [r2, #20]
 8017a56:	ee07 5a90 	vmov	s15, r5
 8017a5a:	4575      	cmp	r5, lr
 8017a5c:	f5a5 5292 	sub.w	r2, r5, #4672	; 0x1240
 8017a60:	f1a2 021c 	sub.w	r2, r2, #28
 8017a64:	bf98      	it	ls
 8017a66:	ebae 0205 	subls.w	r2, lr, r5
 8017a6a:	b292      	uxth	r2, r2
 8017a6c:	fb02 f202 	mul.w	r2, r2, r2
 8017a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017a74:	ee07 2a90 	vmov	s15, r2
 8017a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a7c:	45b4      	cmp	ip, r6
 8017a7e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8017a82:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8017a86:	4635      	mov	r5, r6
 8017a88:	d1dd      	bne.n	8017a46 <MEMS_runMagCal+0x1b12>
 8017a8a:	ee07 3a90 	vmov	s15, r3
 8017a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a92:	ed5f 5ae0 	vldr	s11, [pc, #-896]	; 8017714 <MEMS_runMagCal+0x17e0>
 8017a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017a9a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8017a9e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8017aa2:	ed5f 7ae3 	vldr	s15, [pc, #-908]	; 8017718 <MEMS_runMagCal+0x17e4>
 8017aa6:	eeb1 6ac7 	vsqrt.f32	s12, s14
 8017aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aae:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017ab2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017ab6:	ed84 6a00 	vstr	s12, [r4]
 8017aba:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8017abe:	dd45      	ble.n	8017b4c <MEMS_runMagCal+0x1c18>
 8017ac0:	ed5f 7aea 	vldr	s15, [pc, #-936]	; 801771c <MEMS_runMagCal+0x17e8>
 8017ac4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017ac8:	2302      	movs	r3, #2
 8017aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ace:	f889 3058 	strb.w	r3, [r9, #88]	; 0x58
 8017ad2:	f77e aecd 	ble.w	8016870 <MEMS_runMagCal+0x93c>
 8017ad6:	2301      	movs	r3, #1
 8017ad8:	f889 3001 	strb.w	r3, [r9, #1]
 8017adc:	f7fe bec8 	b.w	8016870 <MEMS_runMagCal+0x93c>
 8017ae0:	4641      	mov	r1, r8
 8017ae2:	ee1a 0a90 	vmov	r0, s21
 8017ae6:	f7f7 fc59 	bl	800f39c <MEMS_updateMagBufferIndex>
 8017aea:	f7fe bf2e 	b.w	801694a <MEMS_runMagCal+0xa16>
 8017aee:	9b02      	ldr	r3, [sp, #8]
 8017af0:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
 8017af4:	eb09 0ac3 	add.w	sl, r9, r3, lsl #3
 8017af8:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 8017afc:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8017b00:	4413      	add	r3, r2
 8017b02:	4299      	cmp	r1, r3
 8017b04:	f4bf ad94 	bcs.w	8017630 <MEMS_runMagCal+0x16fc>
 8017b08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017b0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017b0e:	fb03 f301 	mul.w	r3, r3, r1
 8017b12:	3364      	adds	r3, #100	; 0x64
 8017b14:	4293      	cmp	r3, r2
 8017b16:	bf38      	it	cc
 8017b18:	4613      	movcc	r3, r2
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	f8c9 300c 	str.w	r3, [r9, #12]
 8017b20:	f889 2000 	strb.w	r2, [r9]
 8017b24:	f7fe be31 	b.w	801678a <MEMS_runMagCal+0x856>
 8017b28:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8017b2c:	f7ff ba9c 	b.w	8017068 <MEMS_runMagCal+0x1134>
 8017b30:	9b04      	ldr	r3, [sp, #16]
 8017b32:	e65e      	b.n	80177f2 <MEMS_runMagCal+0x18be>
 8017b34:	4619      	mov	r1, r3
 8017b36:	9b02      	ldr	r3, [sp, #8]
 8017b38:	468a      	mov	sl, r1
 8017b3a:	3301      	adds	r3, #1
 8017b3c:	fb93 f2f1 	sdiv	r2, r3, r1
 8017b40:	fb01 3212 	mls	r2, r1, r2, r3
 8017b44:	9305      	str	r3, [sp, #20]
 8017b46:	b212      	sxth	r2, r2
 8017b48:	f7ff ba3e 	b.w	8016fc8 <MEMS_runMagCal+0x1094>
 8017b4c:	eddf 7abf 	vldr	s15, [pc, #764]	; 8017e4c <MEMS_runMagCal+0x1f18>
 8017b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b58:	d436      	bmi.n	8017bc8 <MEMS_runMagCal+0x1c94>
 8017b5a:	eddf 7abd 	vldr	s15, [pc, #756]	; 8017e50 <MEMS_runMagCal+0x1f1c>
 8017b5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b66:	bfc4      	itt	gt
 8017b68:	2301      	movgt	r3, #1
 8017b6a:	f889 3001 	strbgt.w	r3, [r9, #1]
 8017b6e:	f7ff b8bc 	b.w	8016cea <MEMS_runMagCal+0xdb6>
 8017b72:	9b03      	ldr	r3, [sp, #12]
 8017b74:	f899 0011 	ldrb.w	r0, [r9, #17]
 8017b78:	ed93 0a01 	vldr	s0, [r3, #4]
 8017b7c:	f7fe bda8 	b.w	80166d0 <MEMS_runMagCal+0x79c>
 8017b80:	2303      	movs	r3, #3
 8017b82:	9304      	str	r3, [sp, #16]
 8017b84:	f7fe bdf7 	b.w	8016776 <MEMS_runMagCal+0x842>
 8017b88:	4619      	mov	r1, r3
 8017b8a:	f7ff baa4 	b.w	80170d6 <MEMS_runMagCal+0x11a2>
 8017b8e:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 8017b92:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8017b96:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b9e:	f73f ad47 	bgt.w	8017630 <MEMS_runMagCal+0x16fc>
 8017ba2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017ba6:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8017baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bae:	f73f ad3f 	bgt.w	8017630 <MEMS_runMagCal+0x16fc>
 8017bb2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8017bb6:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8017bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bbe:	f77f aadb 	ble.w	8017178 <MEMS_runMagCal+0x1244>
 8017bc2:	e535      	b.n	8017630 <MEMS_runMagCal+0x16fc>
 8017bc4:	2303      	movs	r3, #3
 8017bc6:	e614      	b.n	80177f2 <MEMS_runMagCal+0x18be>
 8017bc8:	eddf 7aa1 	vldr	s15, [pc, #644]	; 8017e50 <MEMS_runMagCal+0x1f1c>
 8017bcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bd6:	f889 3001 	strb.w	r3, [r9, #1]
 8017bda:	f04f 0203 	mov.w	r2, #3
 8017bde:	bfc8      	it	gt
 8017be0:	2301      	movgt	r3, #1
 8017be2:	f889 2058 	strb.w	r2, [r9, #88]	; 0x58
 8017be6:	bfc8      	it	gt
 8017be8:	f889 3001 	strbgt.w	r3, [r9, #1]
 8017bec:	f7ff b880 	b.w	8016cf0 <MEMS_runMagCal+0xdbc>
 8017bf0:	2303      	movs	r3, #3
 8017bf2:	f889 c001 	strb.w	ip, [r9, #1]
 8017bf6:	f889 3058 	strb.w	r3, [r9, #88]	; 0x58
 8017bfa:	f7ff b879 	b.w	8016cf0 <MEMS_runMagCal+0xdbc>
 8017bfe:	9b05      	ldr	r3, [sp, #20]
 8017c00:	fb93 f7fa 	sdiv	r7, r3, sl
 8017c04:	fb0a 3717 	mls	r7, sl, r7, r3
 8017c08:	b23f      	sxth	r7, r7
 8017c0a:	f7ff bac4 	b.w	8017196 <MEMS_runMagCal+0x1262>
 8017c0e:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8017e54 <MEMS_runMagCal+0x1f20>
 8017c12:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8017c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017c1a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8017c1e:	ee17 2a90 	vmov	r2, s15
 8017c22:	f899 308c 	ldrb.w	r3, [r9, #140]	; 0x8c
 8017c26:	ee87 0a08 	vdiv.f32	s0, s14, s16
 8017c2a:	b291      	uxth	r1, r2
 8017c2c:	b113      	cbz	r3, 8017c34 <MEMS_runMagCal+0x1d00>
 8017c2e:	3b01      	subs	r3, #1
 8017c30:	f889 308c 	strb.w	r3, [r9, #140]	; 0x8c
 8017c34:	ee1a 0a90 	vmov	r0, s21
 8017c38:	f7f7 fbb0 	bl	800f39c <MEMS_updateMagBufferIndex>
 8017c3c:	eddd 7a07 	vldr	s15, [sp, #28]
 8017c40:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8017e58 <MEMS_runMagCal+0x1f24>
 8017c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017c4c:	fef8 7a67 	vrinta.f32	s15, s15
 8017c50:	2300      	movs	r3, #0
 8017c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017c56:	f889 3000 	strb.w	r3, [r9]
 8017c5a:	edc9 7a01 	vstr	s15, [r9, #4]
 8017c5e:	f7fe bd94 	b.w	801678a <MEMS_runMagCal+0x856>
 8017c62:	fb93 f2f5 	sdiv	r2, r3, r5
 8017c66:	fb05 3312 	mls	r3, r5, r2, r3
 8017c6a:	4628      	mov	r0, r5
 8017c6c:	b21a      	sxth	r2, r3
 8017c6e:	f7ff bb28 	b.w	80172c2 <MEMS_runMagCal+0x138e>
 8017c72:	edd9 6a17 	vldr	s13, [r9, #92]	; 0x5c
 8017c76:	ed99 7a18 	vldr	s14, [r9, #96]	; 0x60
 8017c7a:	edd9 7a19 	vldr	s15, [r9, #100]	; 0x64
 8017c7e:	fef8 6a66 	vrinta.f32	s13, s13
 8017c82:	feb8 7a47 	vrinta.f32	s14, s14
 8017c86:	fef8 7a67 	vrinta.f32	s15, s15
 8017c8a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017c92:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8017c96:	ee17 0a10 	vmov	r0, s14
 8017c9a:	ee16 2a90 	vmov	r2, s13
 8017c9e:	ee17 5a90 	vmov	r5, s15
 8017ca2:	f10d 0b4c 	add.w	fp, sp, #76	; 0x4c
 8017ca6:	ac0f      	add	r4, sp, #60	; 0x3c
 8017ca8:	9400      	str	r4, [sp, #0]
 8017caa:	4659      	mov	r1, fp
 8017cac:	f8ab 2000 	strh.w	r2, [fp]
 8017cb0:	f8ab 0002 	strh.w	r0, [fp, #2]
 8017cb4:	eeb0 0a48 	vmov.f32	s0, s16
 8017cb8:	ee1a 0a90 	vmov	r0, s21
 8017cbc:	ab10      	add	r3, sp, #64	; 0x40
 8017cbe:	f109 0268 	add.w	r2, r9, #104	; 0x68
 8017cc2:	f8ab 5004 	strh.w	r5, [fp, #4]
 8017cc6:	f7f7 fbf5 	bl	800f4b4 <getMagStats.constprop.0>
 8017cca:	ed94 7a00 	vldr	s14, [r4]
 8017cce:	eddf 7a63 	vldr	s15, [pc, #396]	; 8017e5c <MEMS_runMagCal+0x1f28>
 8017cd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cda:	d50e      	bpl.n	8017cfa <MEMS_runMagCal+0x1dc6>
 8017cdc:	b968      	cbnz	r0, 8017cfa <MEMS_runMagCal+0x1dc6>
 8017cde:	f899 3040 	ldrb.w	r3, [r9, #64]	; 0x40
 8017ce2:	b32b      	cbz	r3, 8017d30 <MEMS_runMagCal+0x1dfc>
 8017ce4:	f899 3049 	ldrb.w	r3, [r9, #73]	; 0x49
 8017ce8:	ee07 3a90 	vmov	s15, r3
 8017cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017cf0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cf8:	dc1a      	bgt.n	8017d30 <MEMS_runMagCal+0x1dfc>
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	f8cb 3000 	str.w	r3, [fp]
 8017d00:	f8ab 3004 	strh.w	r3, [fp, #4]
 8017d04:	f7ff babf 	b.w	8017286 <MEMS_runMagCal+0x1352>
 8017d08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017d0c:	f7ff bbfc 	b.w	8017508 <MEMS_runMagCal+0x15d4>
 8017d10:	eddf 5a53 	vldr	s11, [pc, #332]	; 8017e60 <MEMS_runMagCal+0x1f2c>
 8017d14:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 8017d18:	ed9d 5a1e 	vldr	s10, [sp, #120]	; 0x78
 8017d1c:	ed9d aa1f 	vldr	s20, [sp, #124]	; 0x7c
 8017d20:	ee65 9aa4 	vmul.f32	s19, s11, s9
 8017d24:	ee25 9a85 	vmul.f32	s18, s11, s10
 8017d28:	ee25 aa8a 	vmul.f32	s20, s11, s20
 8017d2c:	f7ff bb56 	b.w	80173dc <MEMS_runMagCal+0x14a8>
 8017d30:	eddd 7a07 	vldr	s15, [sp, #28]
 8017d34:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8017e58 <MEMS_runMagCal+0x1f24>
 8017d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017d3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017d40:	fef8 7a67 	vrinta.f32	s15, s15
 8017d44:	2203      	movs	r2, #3
 8017d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	edc9 7a01 	vstr	s15, [r9, #4]
 8017d50:	f889 2058 	strb.w	r2, [r9, #88]	; 0x58
 8017d54:	f889 3000 	strb.w	r3, [r9]
 8017d58:	f7fe bd17 	b.w	801678a <MEMS_runMagCal+0x856>
 8017d5c:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8017e64 <MEMS_runMagCal+0x1f30>
 8017d60:	eef4 7ac5 	vcmpe.f32	s15, s10
 8017d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d68:	f77e ab36 	ble.w	80163d8 <MEMS_runMagCal+0x4a4>
 8017d6c:	f7fe bb3c 	b.w	80163e8 <MEMS_runMagCal+0x4b4>
 8017d70:	2224      	movs	r2, #36	; 0x24
 8017d72:	2100      	movs	r1, #0
 8017d74:	a82d      	add	r0, sp, #180	; 0xb4
 8017d76:	f002 fd40 	bl	801a7fa <memset>
 8017d7a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8017e68 <MEMS_runMagCal+0x1f34>
 8017d7e:	4631      	mov	r1, r6
 8017d80:	ee87 7a89 	vdiv.f32	s14, s15, s18
 8017d84:	2300      	movs	r3, #0
 8017d86:	a815      	add	r0, sp, #84	; 0x54
 8017d88:	aa2d      	add	r2, sp, #180	; 0xb4
 8017d8a:	ecf1 7a01 	vldmia	r1!, {s15}
 8017d8e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017d92:	fef8 7a67 	vrinta.f32	s15, s15
 8017d96:	4614      	mov	r4, r2
 8017d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d9c:	ed84 7a00 	vstr	s14, [r4]
 8017da0:	ee17 4a90 	vmov	r4, s15
 8017da4:	3301      	adds	r3, #1
 8017da6:	2b03      	cmp	r3, #3
 8017da8:	f102 0210 	add.w	r2, r2, #16
 8017dac:	f820 4b02 	strh.w	r4, [r0], #2
 8017db0:	d1eb      	bne.n	8017d8a <MEMS_runMagCal+0x1e56>
 8017db2:	ac12      	add	r4, sp, #72	; 0x48
 8017db4:	9400      	str	r4, [sp, #0]
 8017db6:	ab2b      	add	r3, sp, #172	; 0xac
 8017db8:	eeb0 0a48 	vmov.f32	s0, s16
 8017dbc:	ee1a 0a90 	vmov	r0, s21
 8017dc0:	a915      	add	r1, sp, #84	; 0x54
 8017dc2:	aa2d      	add	r2, sp, #180	; 0xb4
 8017dc4:	f7f7 fb76 	bl	800f4b4 <getMagStats.constprop.0>
 8017dc8:	ed96 5a06 	vldr	s10, [r6, #24]
 8017dcc:	ed94 7a00 	vldr	s14, [r4]
 8017dd0:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 8017dd4:	eddf 5a24 	vldr	s11, [pc, #144]	; 8017e68 <MEMS_runMagCal+0x1f34>
 8017dd8:	ed96 6a03 	vldr	s12, [r6, #12]
 8017ddc:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8017de0:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8017de4:	2300      	movs	r3, #0
 8017de6:	ee66 6a87 	vmul.f32	s13, s13, s14
 8017dea:	ed96 6a00 	vldr	s12, [r6]
 8017dee:	ed96 4a01 	vldr	s8, [r6, #4]
 8017df2:	edd6 4a02 	vldr	s9, [r6, #8]
 8017df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dfa:	ac2e      	add	r4, sp, #184	; 0xb8
 8017dfc:	e9c4 3300 	strd	r3, r3, [r4]
 8017e00:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8017e04:	60a3      	str	r3, [r4, #8]
 8017e06:	61a3      	str	r3, [r4, #24]
 8017e08:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8017e0c:	eec6 5a08 	vdiv.f32	s11, s12, s16
 8017e10:	ee37 7a07 	vadd.f32	s14, s14, s14
 8017e14:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 8017e18:	edcd 7a31 	vstr	s15, [sp, #196]	; 0xc4
 8017e1c:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8017e20:	ee84 6a08 	vdiv.f32	s12, s8, s16
 8017e24:	eec4 6a88 	vdiv.f32	s13, s9, s16
 8017e28:	d405      	bmi.n	8017e36 <MEMS_runMagCal+0x1f02>
 8017e2a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8017e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e32:	f57e aab7 	bpl.w	80163a4 <MEMS_runMagCal+0x470>
 8017e36:	eddf 2a0d 	vldr	s5, [pc, #52]	; 8017e6c <MEMS_runMagCal+0x1f38>
 8017e3a:	f7fe bab9 	b.w	80163b0 <MEMS_runMagCal+0x47c>
 8017e3e:	f644 41f4 	movw	r1, #19700	; 0x4cf4
 8017e42:	428b      	cmp	r3, r1
 8017e44:	f67e acdb 	bls.w	80167fe <MEMS_runMagCal+0x8ca>
 8017e48:	f7fe bccf 	b.w	80167ea <MEMS_runMagCal+0x8b6>
 8017e4c:	471c4000 	.word	0x471c4000
 8017e50:	481c4000 	.word	0x481c4000
 8017e54:	433d0000 	.word	0x433d0000
 8017e58:	3a83126f 	.word	0x3a83126f
 8017e5c:	3ff4cccd 	.word	0x3ff4cccd
 8017e60:	7f800000 	.word	0x7f800000
 8017e64:	3ee66666 	.word	0x3ee66666
 8017e68:	423c0000 	.word	0x423c0000
 8017e6c:	00000000 	.word	0x00000000

08017e70 <MotionFX_GetStateSize>:
 8017e70:	f44f 6018 	mov.w	r0, #2432	; 0x980
 8017e74:	4770      	bx	lr
 8017e76:	bf00      	nop

08017e78 <MotionFX_initialize>:
 8017e78:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8017e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e7e:	f24c 2640 	movw	r6, #49728	; 0xc240
 8017e82:	4d3a      	ldr	r5, [pc, #232]	; (8017f6c <MotionFX_initialize+0xf4>)
 8017e84:	493a      	ldr	r1, [pc, #232]	; (8017f70 <MotionFX_initialize+0xf8>)
 8017e86:	682b      	ldr	r3, [r5, #0]
 8017e88:	4604      	mov	r4, r0
 8017e8a:	f023 0301 	bic.w	r3, r3, #1
 8017e8e:	602b      	str	r3, [r5, #0]
 8017e90:	680b      	ldr	r3, [r1, #0]
 8017e92:	b085      	sub	sp, #20
 8017e94:	4013      	ands	r3, r2
 8017e96:	42b3      	cmp	r3, r6
 8017e98:	d014      	beq.n	8017ec4 <MotionFX_initialize+0x4c>
 8017e9a:	f24c 2070 	movw	r0, #49776	; 0xc270
 8017e9e:	680b      	ldr	r3, [r1, #0]
 8017ea0:	4013      	ands	r3, r2
 8017ea2:	4283      	cmp	r3, r0
 8017ea4:	d00e      	beq.n	8017ec4 <MotionFX_initialize+0x4c>
 8017ea6:	4b33      	ldr	r3, [pc, #204]	; (8017f74 <MotionFX_initialize+0xfc>)
 8017ea8:	2201      	movs	r2, #1
 8017eaa:	4619      	mov	r1, r3
 8017eac:	601a      	str	r2, [r3, #0]
 8017eae:	680b      	ldr	r3, [r1, #0]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d1fc      	bne.n	8017eae <MotionFX_initialize+0x36>
 8017eb4:	4b30      	ldr	r3, [pc, #192]	; (8017f78 <MotionFX_initialize+0x100>)
 8017eb6:	4931      	ldr	r1, [pc, #196]	; (8017f7c <MotionFX_initialize+0x104>)
 8017eb8:	4a31      	ldr	r2, [pc, #196]	; (8017f80 <MotionFX_initialize+0x108>)
 8017eba:	6019      	str	r1, [r3, #0]
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	4293      	cmp	r3, r2
 8017ec0:	d020      	beq.n	8017f04 <MotionFX_initialize+0x8c>
 8017ec2:	e7fe      	b.n	8017ec2 <MotionFX_initialize+0x4a>
 8017ec4:	4b2f      	ldr	r3, [pc, #188]	; (8017f84 <MotionFX_initialize+0x10c>)
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d1ec      	bne.n	8017ea6 <MotionFX_initialize+0x2e>
 8017ecc:	4a2e      	ldr	r2, [pc, #184]	; (8017f88 <MotionFX_initialize+0x110>)
 8017ece:	6813      	ldr	r3, [r2, #0]
 8017ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017ed4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8017ed8:	d006      	beq.n	8017ee8 <MotionFX_initialize+0x70>
 8017eda:	f240 4183 	movw	r1, #1155	; 0x483
 8017ede:	6813      	ldr	r3, [r2, #0]
 8017ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017ee4:	428b      	cmp	r3, r1
 8017ee6:	d1de      	bne.n	8017ea6 <MotionFX_initialize+0x2e>
 8017ee8:	4b28      	ldr	r3, [pc, #160]	; (8017f8c <MotionFX_initialize+0x114>)
 8017eea:	2201      	movs	r2, #1
 8017eec:	4619      	mov	r1, r3
 8017eee:	601a      	str	r2, [r3, #0]
 8017ef0:	680b      	ldr	r3, [r1, #0]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d1fc      	bne.n	8017ef0 <MotionFX_initialize+0x78>
 8017ef6:	4b26      	ldr	r3, [pc, #152]	; (8017f90 <MotionFX_initialize+0x118>)
 8017ef8:	4920      	ldr	r1, [pc, #128]	; (8017f7c <MotionFX_initialize+0x104>)
 8017efa:	4a21      	ldr	r2, [pc, #132]	; (8017f80 <MotionFX_initialize+0x108>)
 8017efc:	6019      	str	r1, [r3, #0]
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	4293      	cmp	r3, r2
 8017f02:	d1de      	bne.n	8017ec2 <MotionFX_initialize+0x4a>
 8017f04:	2501      	movs	r5, #1
 8017f06:	4b23      	ldr	r3, [pc, #140]	; (8017f94 <MotionFX_initialize+0x11c>)
 8017f08:	4a23      	ldr	r2, [pc, #140]	; (8017f98 <MotionFX_initialize+0x120>)
 8017f0a:	4620      	mov	r0, r4
 8017f0c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8017f10:	7115      	strb	r5, [r2, #4]
 8017f12:	9303      	str	r3, [sp, #12]
 8017f14:	f7f7 fbae 	bl	800f674 <MFX_emptyAttitude>
 8017f18:	a901      	add	r1, sp, #4
 8017f1a:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8017f1e:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8017f22:	f7f6 fee5 	bl	800ecf0 <updateOrientation>
 8017f26:	a903      	add	r1, sp, #12
 8017f28:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017f2c:	f7f6 fee0 	bl	800ecf0 <updateOrientation>
 8017f30:	a902      	add	r1, sp, #8
 8017f32:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017f36:	f7f6 fedb 	bl	800ecf0 <updateOrientation>
 8017f3a:	4918      	ldr	r1, [pc, #96]	; (8017f9c <MotionFX_initialize+0x124>)
 8017f3c:	4a18      	ldr	r2, [pc, #96]	; (8017fa0 <MotionFX_initialize+0x128>)
 8017f3e:	4b19      	ldr	r3, [pc, #100]	; (8017fa4 <MotionFX_initialize+0x12c>)
 8017f40:	f04f 567f 	mov.w	r6, #1069547520	; 0x3fc00000
 8017f44:	6361      	str	r1, [r4, #52]	; 0x34
 8017f46:	61a2      	str	r2, [r4, #24]
 8017f48:	2100      	movs	r1, #0
 8017f4a:	f44f 7281 	mov.w	r2, #258	; 0x102
 8017f4e:	61e3      	str	r3, [r4, #28]
 8017f50:	f240 1301 	movw	r3, #257	; 0x101
 8017f54:	4f14      	ldr	r7, [pc, #80]	; (8017fa8 <MotionFX_initialize+0x130>)
 8017f56:	4815      	ldr	r0, [pc, #84]	; (8017fac <MotionFX_initialize+0x134>)
 8017f58:	62a7      	str	r7, [r4, #40]	; 0x28
 8017f5a:	62e6      	str	r6, [r4, #44]	; 0x2c
 8017f5c:	6220      	str	r0, [r4, #32]
 8017f5e:	7365      	strb	r5, [r4, #13]
 8017f60:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 8017f64:	80a2      	strh	r2, [r4, #4]
 8017f66:	81e3      	strh	r3, [r4, #14]
 8017f68:	b005      	add	sp, #20
 8017f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f6c:	e0002000 	.word	0xe0002000
 8017f70:	e000ed00 	.word	0xe000ed00
 8017f74:	40023008 	.word	0x40023008
 8017f78:	40023000 	.word	0x40023000
 8017f7c:	f407a5c2 	.word	0xf407a5c2
 8017f80:	b5e8b5cd 	.word	0xb5e8b5cd
 8017f84:	e0042000 	.word	0xe0042000
 8017f88:	5c001000 	.word	0x5c001000
 8017f8c:	58024c08 	.word	0x58024c08
 8017f90:	58024c00 	.word	0x58024c00
 8017f94:	00756e65 	.word	0x00756e65
 8017f98:	20000138 	.word	0x20000138
 8017f9c:	3f2ac083 	.word	0x3f2ac083
 8017fa0:	3a51b717 	.word	0x3a51b717
 8017fa4:	3a378034 	.word	0x3a378034
 8017fa8:	3f666666 	.word	0x3f666666
 8017fac:	3b378034 	.word	0x3b378034

08017fb0 <MotionFX_setKnobs>:
 8017fb0:	4b24      	ldr	r3, [pc, #144]	; (8018044 <MotionFX_setKnobs+0x94>)
 8017fb2:	791b      	ldrb	r3, [r3, #4]
 8017fb4:	b903      	cbnz	r3, 8017fb8 <MotionFX_setKnobs+0x8>
 8017fb6:	4770      	bx	lr
 8017fb8:	2900      	cmp	r1, #0
 8017fba:	d0fc      	beq.n	8017fb6 <MotionFX_setKnobs+0x6>
 8017fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fbe:	4604      	mov	r4, r0
 8017fc0:	684a      	ldr	r2, [r1, #4]
 8017fc2:	6808      	ldr	r0, [r1, #0]
 8017fc4:	688b      	ldr	r3, [r1, #8]
 8017fc6:	62a0      	str	r0, [r4, #40]	; 0x28
 8017fc8:	6363      	str	r3, [r4, #52]	; 0x34
 8017fca:	62e2      	str	r2, [r4, #44]	; 0x2c
 8017fcc:	7b0a      	ldrb	r2, [r1, #12]
 8017fce:	460b      	mov	r3, r1
 8017fd0:	7162      	strb	r2, [r4, #5]
 8017fd2:	6948      	ldr	r0, [r1, #20]
 8017fd4:	690d      	ldr	r5, [r1, #16]
 8017fd6:	698a      	ldr	r2, [r1, #24]
 8017fd8:	61e0      	str	r0, [r4, #28]
 8017fda:	4608      	mov	r0, r1
 8017fdc:	6222      	str	r2, [r4, #32]
 8017fde:	460a      	mov	r2, r1
 8017fe0:	61a5      	str	r5, [r4, #24]
 8017fe2:	7f0d      	ldrb	r5, [r1, #28]
 8017fe4:	b085      	sub	sp, #20
 8017fe6:	7125      	strb	r5, [r4, #4]
 8017fe8:	f891 5029 	ldrb.w	r5, [r1, #41]	; 0x29
 8017fec:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
 8017ff0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8017ff2:	f884 1978 	strb.w	r1, [r4, #2424]	; 0x978
 8017ff6:	f830 6f21 	ldrh.w	r6, [r0, #33]!
 8017ffa:	f833 7f1d 	ldrh.w	r7, [r3, #29]!
 8017ffe:	7885      	ldrb	r5, [r0, #2]
 8018000:	f832 0f25 	ldrh.w	r0, [r2, #37]!
 8018004:	7899      	ldrb	r1, [r3, #2]
 8018006:	f8ad 7004 	strh.w	r7, [sp, #4]
 801800a:	7893      	ldrb	r3, [r2, #2]
 801800c:	f88d 1006 	strb.w	r1, [sp, #6]
 8018010:	f8ad 000c 	strh.w	r0, [sp, #12]
 8018014:	a901      	add	r1, sp, #4
 8018016:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 801801a:	f8ad 6008 	strh.w	r6, [sp, #8]
 801801e:	f88d 500a 	strb.w	r5, [sp, #10]
 8018022:	f88d 300e 	strb.w	r3, [sp, #14]
 8018026:	f7f6 fe63 	bl	800ecf0 <updateOrientation>
 801802a:	a903      	add	r1, sp, #12
 801802c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8018030:	f7f6 fe5e 	bl	800ecf0 <updateOrientation>
 8018034:	a902      	add	r1, sp, #8
 8018036:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801803a:	f7f6 fe59 	bl	800ecf0 <updateOrientation>
 801803e:	b005      	add	sp, #20
 8018040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018042:	bf00      	nop
 8018044:	20000138 	.word	0x20000138

08018048 <MotionFX_getKnobs>:
 8018048:	b538      	push	{r3, r4, r5, lr}
 801804a:	4b1c      	ldr	r3, [pc, #112]	; (80180bc <MotionFX_getKnobs+0x74>)
 801804c:	791b      	ldrb	r3, [r3, #4]
 801804e:	b903      	cbnz	r3, 8018052 <MotionFX_getKnobs+0xa>
 8018050:	bd38      	pop	{r3, r4, r5, pc}
 8018052:	460a      	mov	r2, r1
 8018054:	2900      	cmp	r1, #0
 8018056:	d0fb      	beq.n	8018050 <MotionFX_getKnobs+0x8>
 8018058:	4604      	mov	r4, r0
 801805a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801805c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801805e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018060:	6010      	str	r0, [r2, #0]
 8018062:	6051      	str	r1, [r2, #4]
 8018064:	6093      	str	r3, [r2, #8]
 8018066:	7963      	ldrb	r3, [r4, #5]
 8018068:	f102 011d 	add.w	r1, r2, #29
 801806c:	7313      	strb	r3, [r2, #12]
 801806e:	69e0      	ldr	r0, [r4, #28]
 8018070:	6a23      	ldr	r3, [r4, #32]
 8018072:	69a5      	ldr	r5, [r4, #24]
 8018074:	6150      	str	r0, [r2, #20]
 8018076:	6115      	str	r5, [r2, #16]
 8018078:	6193      	str	r3, [r2, #24]
 801807a:	7923      	ldrb	r3, [r4, #4]
 801807c:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8018080:	7713      	strb	r3, [r2, #28]
 8018082:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018086:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 801808a:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 801808e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8018090:	f7f6 fc86 	bl	800e9a0 <findAxis>
 8018094:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8018098:	f102 0121 	add.w	r1, r2, #33	; 0x21
 801809c:	f7f6 fc80 	bl	800e9a0 <findAxis>
 80180a0:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80180a4:	f102 0125 	add.w	r1, r2, #37	; 0x25
 80180a8:	f7f6 fc7a 	bl	800e9a0 <findAxis>
 80180ac:	2300      	movs	r3, #0
 80180ae:	f882 3020 	strb.w	r3, [r2, #32]
 80180b2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80180b6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80180ba:	bd38      	pop	{r3, r4, r5, pc}
 80180bc:	20000138 	.word	0x20000138

080180c0 <MotionFX_enable_6X>:
 80180c0:	4b0e      	ldr	r3, [pc, #56]	; (80180fc <MotionFX_enable_6X+0x3c>)
 80180c2:	791b      	ldrb	r3, [r3, #4]
 80180c4:	b903      	cbnz	r3, 80180c8 <MotionFX_enable_6X+0x8>
 80180c6:	4770      	bx	lr
 80180c8:	2900      	cmp	r1, #0
 80180ca:	d0fc      	beq.n	80180c6 <MotionFX_enable_6X+0x6>
 80180cc:	b530      	push	{r4, r5, lr}
 80180ce:	4604      	mov	r4, r0
 80180d0:	b099      	sub	sp, #100	; 0x64
 80180d2:	1d05      	adds	r5, r0, #4
 80180d4:	4629      	mov	r1, r5
 80180d6:	225c      	movs	r2, #92	; 0x5c
 80180d8:	a801      	add	r0, sp, #4
 80180da:	f002 fb81 	bl	801a7e0 <memcpy>
 80180de:	4620      	mov	r0, r4
 80180e0:	f7f7 fac8 	bl	800f674 <MFX_emptyAttitude>
 80180e4:	4628      	mov	r0, r5
 80180e6:	225c      	movs	r2, #92	; 0x5c
 80180e8:	a901      	add	r1, sp, #4
 80180ea:	f002 fb79 	bl	801a7e0 <memcpy>
 80180ee:	2300      	movs	r3, #0
 80180f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80180f4:	7363      	strb	r3, [r4, #13]
 80180f6:	b019      	add	sp, #100	; 0x64
 80180f8:	bd30      	pop	{r4, r5, pc}
 80180fa:	bf00      	nop
 80180fc:	20000138 	.word	0x20000138

08018100 <MotionFX_enable_9X>:
 8018100:	4b0e      	ldr	r3, [pc, #56]	; (801813c <MotionFX_enable_9X+0x3c>)
 8018102:	791b      	ldrb	r3, [r3, #4]
 8018104:	b903      	cbnz	r3, 8018108 <MotionFX_enable_9X+0x8>
 8018106:	4770      	bx	lr
 8018108:	2900      	cmp	r1, #0
 801810a:	d0fc      	beq.n	8018106 <MotionFX_enable_9X+0x6>
 801810c:	b530      	push	{r4, r5, lr}
 801810e:	4604      	mov	r4, r0
 8018110:	b099      	sub	sp, #100	; 0x64
 8018112:	1d05      	adds	r5, r0, #4
 8018114:	4629      	mov	r1, r5
 8018116:	225c      	movs	r2, #92	; 0x5c
 8018118:	a801      	add	r0, sp, #4
 801811a:	f002 fb61 	bl	801a7e0 <memcpy>
 801811e:	4620      	mov	r0, r4
 8018120:	f7f7 faa8 	bl	800f674 <MFX_emptyAttitude>
 8018124:	4628      	mov	r0, r5
 8018126:	225c      	movs	r2, #92	; 0x5c
 8018128:	a901      	add	r1, sp, #4
 801812a:	f002 fb59 	bl	801a7e0 <memcpy>
 801812e:	2301      	movs	r3, #1
 8018130:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8018134:	7363      	strb	r3, [r4, #13]
 8018136:	b019      	add	sp, #100	; 0x64
 8018138:	bd30      	pop	{r4, r5, pc}
 801813a:	bf00      	nop
 801813c:	20000138 	.word	0x20000138

08018140 <MotionFX_update>:
 8018140:	b430      	push	{r4, r5}
 8018142:	4d06      	ldr	r5, [pc, #24]	; (801815c <MotionFX_update+0x1c>)
 8018144:	461c      	mov	r4, r3
 8018146:	792d      	ldrb	r5, [r5, #4]
 8018148:	9b02      	ldr	r3, [sp, #8]
 801814a:	b90d      	cbnz	r5, 8018150 <MotionFX_update+0x10>
 801814c:	bc30      	pop	{r4, r5}
 801814e:	4770      	bx	lr
 8018150:	ed94 0a00 	vldr	s0, [r4]
 8018154:	bc30      	pop	{r4, r5}
 8018156:	f7fc bf2b 	b.w	8014fb0 <iNemoEngine_API_Update>
 801815a:	bf00      	nop
 801815c:	20000138 	.word	0x20000138

08018160 <MotionFX_propagate>:
 8018160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018164:	ed2d 8b06 	vpush	{d8-d10}
 8018168:	4da5      	ldr	r5, [pc, #660]	; (8018400 <MotionFX_propagate+0x2a0>)
 801816a:	4604      	mov	r4, r0
 801816c:	7928      	ldrb	r0, [r5, #4]
 801816e:	b0a0      	sub	sp, #128	; 0x80
 8018170:	b920      	cbnz	r0, 801817c <MotionFX_propagate+0x1c>
 8018172:	b020      	add	sp, #128	; 0x80
 8018174:	ecbd 8b06 	vpop	{d8-d10}
 8018178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801817c:	4616      	mov	r6, r2
 801817e:	4696      	mov	lr, r2
 8018180:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8018184:	460d      	mov	r5, r1
 8018186:	6851      	ldr	r1, [r2, #4]
 8018188:	6892      	ldr	r2, [r2, #8]
 801818a:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
 801818e:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8018192:	6830      	ldr	r0, [r6, #0]
 8018194:	6871      	ldr	r1, [r6, #4]
 8018196:	68b2      	ldr	r2, [r6, #8]
 8018198:	edd3 9a00 	vldr	s19, [r3]
 801819c:	ab10      	add	r3, sp, #64	; 0x40
 801819e:	c307      	stmia	r3!, {r0, r1, r2}
 80181a0:	f85e 0f18 	ldr.w	r0, [lr, #24]!
 80181a4:	af16      	add	r7, sp, #88	; 0x58
 80181a6:	f8de 1004 	ldr.w	r1, [lr, #4]
 80181aa:	f8de 2008 	ldr.w	r2, [lr, #8]
 80181ae:	f104 0a3a 	add.w	sl, r4, #58	; 0x3a
 80181b2:	c707      	stmia	r7!, {r0, r1, r2}
 80181b4:	4651      	mov	r1, sl
 80181b6:	aa13      	add	r2, sp, #76	; 0x4c
 80181b8:	a803      	add	r0, sp, #12
 80181ba:	f7f6 fb8f 	bl	800e8dc <rotVect>
 80181be:	aa16      	add	r2, sp, #88	; 0x58
 80181c0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 80181c4:	a806      	add	r0, sp, #24
 80181c6:	f7f6 fb89 	bl	800e8dc <rotVect>
 80181ca:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 80181ce:	2b09      	cmp	r3, #9
 80181d0:	d829      	bhi.n	8018226 <MotionFX_propagate+0xc6>
 80181d2:	eddd 8a04 	vldr	s17, [sp, #16]
 80181d6:	ed9d 9a03 	vldr	s18, [sp, #12]
 80181da:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80181de:	ed9d 8a05 	vldr	s16, [sp, #20]
 80181e2:	eee9 7a09 	vfma.f32	s15, s18, s18
 80181e6:	eee8 7a08 	vfma.f32	s15, s16, s16
 80181ea:	ee17 0a90 	vmov	r0, s15
 80181ee:	f7e8 f9af 	bl	8000550 <__aeabi_f2d>
 80181f2:	ec41 0b10 	vmov	d0, r0, r1
 80181f6:	f000 fdd7 	bl	8018da8 <sqrt>
 80181fa:	ec51 0b10 	vmov	r0, r1, d0
 80181fe:	f7e8 fcaf 	bl	8000b60 <__aeabi_d2f>
 8018202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018206:	ee07 0a90 	vmov	s15, r0
 801820a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801820e:	ee29 9a27 	vmul.f32	s18, s18, s15
 8018212:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8018216:	ee28 8a27 	vmul.f32	s16, s16, s15
 801821a:	ed8d 9a03 	vstr	s18, [sp, #12]
 801821e:	edcd 8a04 	vstr	s17, [sp, #16]
 8018222:	ed8d 8a05 	vstr	s16, [sp, #20]
 8018226:	7923      	ldrb	r3, [r4, #4]
 8018228:	2b00      	cmp	r3, #0
 801822a:	f000 80d3 	beq.w	80183d4 <MotionFX_propagate+0x274>
 801822e:	ee07 3a90 	vmov	s15, r3
 8018232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801823a:	ee87 5a27 	vdiv.f32	s10, s14, s15
 801823e:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 8018242:	edd3 7a00 	vldr	s15, [r3]
 8018246:	ed9d 6a06 	vldr	s12, [sp, #24]
 801824a:	eee5 7a06 	vfma.f32	s15, s10, s12
 801824e:	edc3 7a00 	vstr	s15, [r3]
 8018252:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 8018256:	edd3 7a00 	vldr	s15, [r3]
 801825a:	eddd 6a07 	vldr	s13, [sp, #28]
 801825e:	eee5 7a26 	vfma.f32	s15, s10, s13
 8018262:	edc3 7a00 	vstr	s15, [r3]
 8018266:	f604 1364 	addw	r3, r4, #2404	; 0x964
 801826a:	edd3 5a00 	vldr	s11, [r3]
 801826e:	ed9d 7a08 	vldr	s14, [sp, #32]
 8018272:	eee5 5a07 	vfma.f32	s11, s10, s14
 8018276:	eddf 7a63 	vldr	s15, [pc, #396]	; 8018404 <MotionFX_propagate+0x2a4>
 801827a:	edc3 5a00 	vstr	s11, [r3]
 801827e:	f604 1344 	addw	r3, r4, #2372	; 0x944
 8018282:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8018286:	edd3 8a00 	vldr	s17, [r3]
 801828a:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 801828e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8018292:	ed93 9a00 	vldr	s18, [r3]
 8018296:	ee76 8ae8 	vsub.f32	s17, s13, s17
 801829a:	f604 1348 	addw	r3, r4, #2376	; 0x948
 801829e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80182a2:	ee36 9a49 	vsub.f32	s18, s12, s18
 80182a6:	ed93 8a00 	vldr	s16, [r3]
 80182aa:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80182ae:	ee37 8a48 	vsub.f32	s16, s14, s16
 80182b2:	eee9 7a09 	vfma.f32	s15, s18, s18
 80182b6:	eddf 5a54 	vldr	s11, [pc, #336]	; 8018408 <MotionFX_propagate+0x2a8>
 80182ba:	eee8 7a08 	vfma.f32	s15, s16, s16
 80182be:	eef4 7ae5 	vcmpe.f32	s15, s11
 80182c2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80182c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182ca:	ed8d 6a06 	vstr	s12, [sp, #24]
 80182ce:	edcd 6a07 	vstr	s13, [sp, #28]
 80182d2:	ed8d 7a08 	vstr	s14, [sp, #32]
 80182d6:	ee29 0a80 	vmul.f32	s0, s19, s0
 80182da:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 80182de:	dd7e      	ble.n	80183de <MotionFX_propagate+0x27e>
 80182e0:	eeb1 aae7 	vsqrt.f32	s20, s15
 80182e4:	ee6a 9a00 	vmul.f32	s19, s20, s0
 80182e8:	eeb0 0a69 	vmov.f32	s0, s19
 80182ec:	f000 fcf0 	bl	8018cd0 <sinf>
 80182f0:	eec0 7a0a 	vdiv.f32	s15, s0, s20
 80182f4:	ee29 9a27 	vmul.f32	s18, s18, s15
 80182f8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80182fc:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018300:	eeb0 0a69 	vmov.f32	s0, s19
 8018304:	ed8d 9a09 	vstr	s18, [sp, #36]	; 0x24
 8018308:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 801830c:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8018310:	f000 fc9e 	bl	8018c50 <cosf>
 8018314:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8018318:	f604 1838 	addw	r8, r4, #2360	; 0x938
 801831c:	4632      	mov	r2, r6
 801831e:	4631      	mov	r1, r6
 8018320:	a809      	add	r0, sp, #36	; 0x24
 8018322:	f7f6 fd71 	bl	800ee08 <qmult>
 8018326:	edd8 7a00 	vldr	s15, [r8]
 801832a:	f604 1934 	addw	r9, r4, #2356	; 0x934
 801832e:	ed99 7a00 	vldr	s14, [r9]
 8018332:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018336:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 801833a:	edd7 6a00 	vldr	s13, [r7]
 801833e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8018342:	ed96 7a00 	vldr	s14, [r6]
 8018346:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801834a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801834e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8018352:	eef1 6ae7 	vsqrt.f32	s13, s15
 8018356:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801835a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801835e:	ed86 7a00 	vstr	s14, [r6]
 8018362:	ed99 7a00 	vldr	s14, [r9]
 8018366:	ee27 7a27 	vmul.f32	s14, s14, s15
 801836a:	ed89 7a00 	vstr	s14, [r9]
 801836e:	ed98 7a00 	vldr	s14, [r8]
 8018372:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018376:	ed88 7a00 	vstr	s14, [r8]
 801837a:	ed97 7a00 	vldr	s14, [r7]
 801837e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018382:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 8018386:	4651      	mov	r1, sl
 8018388:	3301      	adds	r3, #1
 801838a:	edc7 7a00 	vstr	s15, [r7]
 801838e:	aa13      	add	r2, sp, #76	; 0x4c
 8018390:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 8018394:	a809      	add	r0, sp, #36	; 0x24
 8018396:	f7f6 faa1 	bl	800e8dc <rotVect>
 801839a:	f8d9 0000 	ldr.w	r0, [r9]
 801839e:	f8d8 1000 	ldr.w	r1, [r8]
 80183a2:	683a      	ldr	r2, [r7, #0]
 80183a4:	6833      	ldr	r3, [r6, #0]
 80183a6:	6128      	str	r0, [r5, #16]
 80183a8:	6169      	str	r1, [r5, #20]
 80183aa:	60eb      	str	r3, [r5, #12]
 80183ac:	61aa      	str	r2, [r5, #24]
 80183ae:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80183b2:	f105 0328 	add.w	r3, r5, #40	; 0x28
 80183b6:	9201      	str	r2, [sp, #4]
 80183b8:	9300      	str	r3, [sp, #0]
 80183ba:	462a      	mov	r2, r5
 80183bc:	a909      	add	r1, sp, #36	; 0x24
 80183be:	f105 031c 	add.w	r3, r5, #28
 80183c2:	f105 000c 	add.w	r0, r5, #12
 80183c6:	f7f7 fd51 	bl	800fe6c <output_update>
 80183ca:	b020      	add	sp, #128	; 0x80
 80183cc:	ecbd 8b06 	vpop	{d8-d10}
 80183d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183d4:	2301      	movs	r3, #1
 80183d6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80183da:	7123      	strb	r3, [r4, #4]
 80183dc:	e72f      	b.n	801823e <MotionFX_propagate+0xde>
 80183de:	ee29 9a00 	vmul.f32	s18, s18, s0
 80183e2:	ee68 8a80 	vmul.f32	s17, s17, s0
 80183e6:	ee28 8a00 	vmul.f32	s16, s16, s0
 80183ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80183ee:	ed8d 9a09 	vstr	s18, [sp, #36]	; 0x24
 80183f2:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 80183f6:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 80183fa:	930c      	str	r3, [sp, #48]	; 0x30
 80183fc:	e78c      	b.n	8018318 <MotionFX_propagate+0x1b8>
 80183fe:	bf00      	nop
 8018400:	20000138 	.word	0x20000138
 8018404:	3c8efa35 	.word	0x3c8efa35
 8018408:	38d1b718 	.word	0x38d1b718

0801840c <MotionFX_MagCal_init>:
 801840c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018410:	4c46      	ldr	r4, [pc, #280]	; (801852c <MotionFX_MagCal_init+0x120>)
 8018412:	7923      	ldrb	r3, [r4, #4]
 8018414:	b90b      	cbnz	r3, 801841a <MotionFX_MagCal_init+0xe>
 8018416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801841a:	1e43      	subs	r3, r0, #1
 801841c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018420:	4605      	mov	r5, r0
 8018422:	d2f8      	bcs.n	8018416 <MotionFX_MagCal_init+0xa>
 8018424:	2900      	cmp	r1, #0
 8018426:	d13a      	bne.n	801849e <MotionFX_MagCal_init+0x92>
 8018428:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 801842c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018430:	22c8      	movs	r2, #200	; 0xc8
 8018432:	1b5b      	subs	r3, r3, r5
 8018434:	ee07 3a90 	vmov	s15, r3
 8018438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801843c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018440:	eef0 7ae7 	vabs.f32	s15, s15
 8018444:	fb92 f2f5 	sdiv	r2, r2, r5
 8018448:	eef4 7ac7 	vcmpe.f32	s15, s14
 801844c:	b2d3      	uxtb	r3, r2
 801844e:	2b0f      	cmp	r3, #15
 8018450:	bf28      	it	cs
 8018452:	230f      	movcs	r3, #15
 8018454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018458:	4a35      	ldr	r2, [pc, #212]	; (8018530 <MotionFX_MagCal_init+0x124>)
 801845a:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 801845e:	6015      	str	r5, [r2, #0]
 8018460:	b22d      	sxth	r5, r5
 8018462:	dc0e      	bgt.n	8018482 <MotionFX_MagCal_init+0x76>
 8018464:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8018534 <MotionFX_MagCal_init+0x128>
 8018468:	edd4 7a03 	vldr	s15, [r4, #12]
 801846c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018470:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8018538 <MotionFX_MagCal_init+0x12c>
 8018474:	eef0 7ae7 	vabs.f32	s15, s15
 8018478:	eef4 7ac7 	vcmpe.f32	s15, s14
 801847c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018480:	dd08      	ble.n	8018494 <MotionFX_MagCal_init+0x88>
 8018482:	2300      	movs	r3, #0
 8018484:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8018488:	492c      	ldr	r1, [pc, #176]	; (801853c <MotionFX_MagCal_init+0x130>)
 801848a:	8165      	strh	r5, [r4, #10]
 801848c:	60e1      	str	r1, [r4, #12]
 801848e:	8223      	strh	r3, [r4, #16]
 8018490:	6163      	str	r3, [r4, #20]
 8018492:	8122      	strh	r2, [r4, #8]
 8018494:	2300      	movs	r3, #0
 8018496:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 801849a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801849e:	2600      	movs	r6, #0
 80184a0:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 80184a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80184a8:	4b25      	ldr	r3, [pc, #148]	; (8018540 <MotionFX_MagCal_init+0x134>)
 80184aa:	4631      	mov	r1, r6
 80184ac:	6122      	str	r2, [r4, #16]
 80184ae:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58
 80184b2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80184b6:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 80184ba:	61a3      	str	r3, [r4, #24]
 80184bc:	6166      	str	r6, [r4, #20]
 80184be:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 80184c2:	6566      	str	r6, [r4, #84]	; 0x54
 80184c4:	83a6      	strh	r6, [r4, #28]
 80184c6:	f002 f998 	bl	801a7fa <memset>
 80184ca:	225f      	movs	r2, #95	; 0x5f
 80184cc:	23ff      	movs	r3, #255	; 0xff
 80184ce:	f44f 7780 	mov.w	r7, #256	; 0x100
 80184d2:	f44f 6c70 	mov.w	ip, #3840	; 0xf00
 80184d6:	f04f 0800 	mov.w	r8, #0
 80184da:	f04f 0900 	mov.w	r9, #0
 80184de:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 80184e2:	4631      	mov	r1, r6
 80184e4:	2230      	movs	r2, #48	; 0x30
 80184e6:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80184ea:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 80184ee:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 80184f2:	e9c4 8908 	strd	r8, r9, [r4, #32]
 80184f6:	62a6      	str	r6, [r4, #40]	; 0x28
 80184f8:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 80184fc:	f8a4 c02c 	strh.w	ip, [r4, #44]	; 0x2c
 8018500:	f002 f97b 	bl	801a7fa <memset>
 8018504:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018508:	f1a5 030a 	sub.w	r3, r5, #10
 801850c:	b29b      	uxth	r3, r3
 801850e:	2b32      	cmp	r3, #50	; 0x32
 8018510:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 8018514:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 8018518:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 801851c:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 8018520:	d884      	bhi.n	801842c <MotionFX_MagCal_init+0x20>
 8018522:	2301      	movs	r3, #1
 8018524:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8018528:	e780      	b.n	801842c <MotionFX_MagCal_init+0x20>
 801852a:	bf00      	nop
 801852c:	20000138 	.word	0x20000138
 8018530:	20000000 	.word	0x20000000
 8018534:	3dcccccd 	.word	0x3dcccccd
 8018538:	3c23d70a 	.word	0x3c23d70a
 801853c:	3dcccccd 	.word	0x3dcccccd
 8018540:	20002540 	.word	0x20002540

08018544 <MotionFX_MagCal_run>:
 8018544:	4a3d      	ldr	r2, [pc, #244]	; (801863c <MotionFX_MagCal_run+0xf8>)
 8018546:	7913      	ldrb	r3, [r2, #4]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d076      	beq.n	801863a <MotionFX_MagCal_run+0xf6>
 801854c:	ed90 7a00 	vldr	s14, [r0]
 8018550:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8018554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018558:	eddf 6a39 	vldr	s13, [pc, #228]	; 8018640 <MotionFX_MagCal_run+0xfc>
 801855c:	bfb4      	ite	lt
 801855e:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8018562:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8018566:	eee7 7a26 	vfma.f32	s15, s14, s13
 801856a:	ed90 7a01 	vldr	s14, [r0, #4]
 801856e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8018572:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801857a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801857c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8018640 <MotionFX_MagCal_run+0xfc>
 8018580:	ee17 4a90 	vmov	r4, s15
 8018584:	bfb4      	ite	lt
 8018586:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 801858a:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 801858e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8018592:	ed90 7a02 	vldr	s14, [r0, #8]
 8018596:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801859a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801859e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185a2:	ee17 5a90 	vmov	r5, s15
 80185a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8018640 <MotionFX_MagCal_run+0xfc>
 80185aa:	bfac      	ite	ge
 80185ac:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 80185b0:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 80185b4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80185b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80185bc:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 80185c0:	4601      	mov	r1, r0
 80185c2:	ee17 0a90 	vmov	r0, s15
 80185c6:	b373      	cbz	r3, 8018626 <MotionFX_MagCal_run+0xe2>
 80185c8:	4e1e      	ldr	r6, [pc, #120]	; (8018644 <MotionFX_MagCal_run+0x100>)
 80185ca:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80185ce:	6837      	ldr	r7, [r6, #0]
 80185d0:	00de      	lsls	r6, r3, #3
 80185d2:	fb17 f703 	smulbb	r7, r7, r3
 80185d6:	f8a1 73d0 	strh.w	r7, [r1, #976]	; 0x3d0
 80185da:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 80185de:	428c      	cmp	r4, r1
 80185e0:	bfa8      	it	ge
 80185e2:	460c      	movge	r4, r1
 80185e4:	4f18      	ldr	r7, [pc, #96]	; (8018648 <MotionFX_MagCal_run+0x104>)
 80185e6:	4288      	cmp	r0, r1
 80185e8:	bfa8      	it	ge
 80185ea:	4608      	movge	r0, r1
 80185ec:	42bc      	cmp	r4, r7
 80185ee:	bfb8      	it	lt
 80185f0:	463c      	movlt	r4, r7
 80185f2:	42bd      	cmp	r5, r7
 80185f4:	db1f      	blt.n	8018636 <MotionFX_MagCal_run+0xf2>
 80185f6:	428d      	cmp	r5, r1
 80185f8:	bfa8      	it	ge
 80185fa:	460d      	movge	r5, r1
 80185fc:	b22d      	sxth	r5, r5
 80185fe:	4912      	ldr	r1, [pc, #72]	; (8018648 <MotionFX_MagCal_run+0x104>)
 8018600:	3301      	adds	r3, #1
 8018602:	4288      	cmp	r0, r1
 8018604:	bfb8      	it	lt
 8018606:	4608      	movlt	r0, r1
 8018608:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 801860c:	b2db      	uxtb	r3, r3
 801860e:	4416      	add	r6, r2
 8018610:	428b      	cmp	r3, r1
 8018612:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 8018616:	f8a6 43d2 	strh.w	r4, [r6, #978]	; 0x3d2
 801861a:	f8a6 53d4 	strh.w	r5, [r6, #980]	; 0x3d4
 801861e:	f8a6 03d6 	strh.w	r0, [r6, #982]	; 0x3d6
 8018622:	d013      	beq.n	801864c <MotionFX_MagCal_run+0x108>
 8018624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018626:	2601      	movs	r6, #1
 8018628:	68c9      	ldr	r1, [r1, #12]
 801862a:	f882 63cc 	strb.w	r6, [r2, #972]	; 0x3cc
 801862e:	f8c2 13c8 	str.w	r1, [r2, #968]	; 0x3c8
 8018632:	461e      	mov	r6, r3
 8018634:	e7d1      	b.n	80185da <MotionFX_MagCal_run+0x96>
 8018636:	460d      	mov	r5, r1
 8018638:	e7e1      	b.n	80185fe <MotionFX_MagCal_run+0xba>
 801863a:	4770      	bx	lr
 801863c:	20000138 	.word	0x20000138
 8018640:	43fa0000 	.word	0x43fa0000
 8018644:	20000000 	.word	0x20000000
 8018648:	ffff8002 	.word	0xffff8002
 801864c:	2000      	movs	r0, #0
 801864e:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 8018652:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 8018656:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 801865a:	2b00      	cmp	r3, #0
 801865c:	f000 8155 	beq.w	801890a <MotionFX_MagCal_run+0x3c6>
 8018660:	e9d2 5005 	ldrd	r5, r0, [r2, #20]
 8018664:	8a54      	ldrh	r4, [r2, #18]
 8018666:	8a13      	ldrh	r3, [r2, #16]
 8018668:	2900      	cmp	r1, #0
 801866a:	f000 814c 	beq.w	8018906 <MotionFX_MagCal_run+0x3c2>
 801866e:	2c00      	cmp	r4, #0
 8018670:	f000 8149 	beq.w	8018906 <MotionFX_MagCal_run+0x3c2>
 8018674:	42a3      	cmp	r3, r4
 8018676:	bf28      	it	cs
 8018678:	4623      	movcs	r3, r4
 801867a:	3301      	adds	r3, #1
 801867c:	b29b      	uxth	r3, r3
 801867e:	42a3      	cmp	r3, r4
 8018680:	bf28      	it	cs
 8018682:	4623      	movcs	r3, r4
 8018684:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 8018688:	f04f 0c01 	mov.w	ip, #1
 801868c:	195f      	adds	r7, r3, r5
 801868e:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 8018692:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 8018696:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 801869a:	f8c7 e002 	str.w	lr, [r7, #2]
 801869e:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 80186a2:	4561      	cmp	r1, ip
 80186a4:	f8a7 e006 	strh.w	lr, [r7, #6]
 80186a8:	f000 8126 	beq.w	80188f8 <MotionFX_MagCal_run+0x3b4>
 80186ac:	4463      	add	r3, ip
 80186ae:	b29b      	uxth	r3, r3
 80186b0:	42a3      	cmp	r3, r4
 80186b2:	bf28      	it	cs
 80186b4:	4623      	movcs	r3, r4
 80186b6:	195f      	adds	r7, r3, r5
 80186b8:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 80186bc:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 80186c0:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 80186c4:	f8c7 e002 	str.w	lr, [r7, #2]
 80186c8:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 80186cc:	2902      	cmp	r1, #2
 80186ce:	f8a7 e006 	strh.w	lr, [r7, #6]
 80186d2:	f000 8111 	beq.w	80188f8 <MotionFX_MagCal_run+0x3b4>
 80186d6:	4463      	add	r3, ip
 80186d8:	b29b      	uxth	r3, r3
 80186da:	42a3      	cmp	r3, r4
 80186dc:	bf28      	it	cs
 80186de:	4623      	movcs	r3, r4
 80186e0:	195f      	adds	r7, r3, r5
 80186e2:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 80186e6:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 80186ea:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 80186ee:	f8c7 e002 	str.w	lr, [r7, #2]
 80186f2:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 80186f6:	2903      	cmp	r1, #3
 80186f8:	f8a7 e006 	strh.w	lr, [r7, #6]
 80186fc:	f000 80fc 	beq.w	80188f8 <MotionFX_MagCal_run+0x3b4>
 8018700:	4463      	add	r3, ip
 8018702:	b29b      	uxth	r3, r3
 8018704:	42a3      	cmp	r3, r4
 8018706:	bf28      	it	cs
 8018708:	4623      	movcs	r3, r4
 801870a:	195f      	adds	r7, r3, r5
 801870c:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 8018710:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 8018714:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 8018718:	f8c7 e002 	str.w	lr, [r7, #2]
 801871c:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 8018720:	2904      	cmp	r1, #4
 8018722:	f8a7 e006 	strh.w	lr, [r7, #6]
 8018726:	f000 80e7 	beq.w	80188f8 <MotionFX_MagCal_run+0x3b4>
 801872a:	4463      	add	r3, ip
 801872c:	b29b      	uxth	r3, r3
 801872e:	42a3      	cmp	r3, r4
 8018730:	bf28      	it	cs
 8018732:	4623      	movcs	r3, r4
 8018734:	195f      	adds	r7, r3, r5
 8018736:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 801873a:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 801873e:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 8018742:	f8c7 e002 	str.w	lr, [r7, #2]
 8018746:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 801874a:	2905      	cmp	r1, #5
 801874c:	f8a7 e006 	strh.w	lr, [r7, #6]
 8018750:	f000 80d2 	beq.w	80188f8 <MotionFX_MagCal_run+0x3b4>
 8018754:	4463      	add	r3, ip
 8018756:	b29b      	uxth	r3, r3
 8018758:	42a3      	cmp	r3, r4
 801875a:	bf28      	it	cs
 801875c:	4623      	movcs	r3, r4
 801875e:	441d      	add	r5, r3
 8018760:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 8018764:	f8d2 73fa 	ldr.w	r7, [r2, #1018]	; 0x3fa
 8018768:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 801876c:	f8c5 7002 	str.w	r7, [r5, #2]
 8018770:	f8b2 73fe 	ldrh.w	r7, [r2, #1022]	; 0x3fe
 8018774:	2906      	cmp	r1, #6
 8018776:	80ef      	strh	r7, [r5, #6]
 8018778:	f000 80be 	beq.w	80188f8 <MotionFX_MagCal_run+0x3b4>
 801877c:	4463      	add	r3, ip
 801877e:	b29b      	uxth	r3, r3
 8018780:	42a3      	cmp	r3, r4
 8018782:	bf28      	it	cs
 8018784:	4623      	movcs	r3, r4
 8018786:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 801878a:	4667      	mov	r7, ip
 801878c:	eb03 0c05 	add.w	ip, r3, r5
 8018790:	f800 703c 	strb.w	r7, [r0, ip, lsl #3]
 8018794:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 8018798:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 801879c:	f8cc e002 	str.w	lr, [ip, #2]
 80187a0:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 80187a4:	2907      	cmp	r1, #7
 80187a6:	f8ac e006 	strh.w	lr, [ip, #6]
 80187aa:	f000 80a5 	beq.w	80188f8 <MotionFX_MagCal_run+0x3b4>
 80187ae:	443b      	add	r3, r7
 80187b0:	b29b      	uxth	r3, r3
 80187b2:	42a3      	cmp	r3, r4
 80187b4:	bf28      	it	cs
 80187b6:	4623      	movcs	r3, r4
 80187b8:	eb03 0c05 	add.w	ip, r3, r5
 80187bc:	f800 703c 	strb.w	r7, [r0, ip, lsl #3]
 80187c0:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 80187c4:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80187c8:	f8cc e002 	str.w	lr, [ip, #2]
 80187cc:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 80187d0:	2908      	cmp	r1, #8
 80187d2:	f8ac e006 	strh.w	lr, [ip, #6]
 80187d6:	f000 808f 	beq.w	80188f8 <MotionFX_MagCal_run+0x3b4>
 80187da:	443b      	add	r3, r7
 80187dc:	b29b      	uxth	r3, r3
 80187de:	42a3      	cmp	r3, r4
 80187e0:	bf28      	it	cs
 80187e2:	4623      	movcs	r3, r4
 80187e4:	eb03 0c05 	add.w	ip, r3, r5
 80187e8:	f800 703c 	strb.w	r7, [r0, ip, lsl #3]
 80187ec:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 80187f0:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80187f4:	f8cc e002 	str.w	lr, [ip, #2]
 80187f8:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 80187fc:	2909      	cmp	r1, #9
 80187fe:	f8ac e006 	strh.w	lr, [ip, #6]
 8018802:	d079      	beq.n	80188f8 <MotionFX_MagCal_run+0x3b4>
 8018804:	443b      	add	r3, r7
 8018806:	b29b      	uxth	r3, r3
 8018808:	42a3      	cmp	r3, r4
 801880a:	bf28      	it	cs
 801880c:	4623      	movcs	r3, r4
 801880e:	eb03 0c05 	add.w	ip, r3, r5
 8018812:	f800 703c 	strb.w	r7, [r0, ip, lsl #3]
 8018816:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 801881a:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 801881e:	f8cc e002 	str.w	lr, [ip, #2]
 8018822:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 8018826:	290a      	cmp	r1, #10
 8018828:	f8ac e006 	strh.w	lr, [ip, #6]
 801882c:	d064      	beq.n	80188f8 <MotionFX_MagCal_run+0x3b4>
 801882e:	443b      	add	r3, r7
 8018830:	b29b      	uxth	r3, r3
 8018832:	42a3      	cmp	r3, r4
 8018834:	bf28      	it	cs
 8018836:	4623      	movcs	r3, r4
 8018838:	eb03 0c05 	add.w	ip, r3, r5
 801883c:	f800 703c 	strb.w	r7, [r0, ip, lsl #3]
 8018840:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 8018844:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8018848:	f8cc e002 	str.w	lr, [ip, #2]
 801884c:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 8018850:	290b      	cmp	r1, #11
 8018852:	f8ac e006 	strh.w	lr, [ip, #6]
 8018856:	d04f      	beq.n	80188f8 <MotionFX_MagCal_run+0x3b4>
 8018858:	443b      	add	r3, r7
 801885a:	b29b      	uxth	r3, r3
 801885c:	42a3      	cmp	r3, r4
 801885e:	bf28      	it	cs
 8018860:	4623      	movcs	r3, r4
 8018862:	eb03 0c05 	add.w	ip, r3, r5
 8018866:	f800 703c 	strb.w	r7, [r0, ip, lsl #3]
 801886a:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 801886e:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8018872:	f8cc e002 	str.w	lr, [ip, #2]
 8018876:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 801887a:	290c      	cmp	r1, #12
 801887c:	f8ac e006 	strh.w	lr, [ip, #6]
 8018880:	d03a      	beq.n	80188f8 <MotionFX_MagCal_run+0x3b4>
 8018882:	443b      	add	r3, r7
 8018884:	b29b      	uxth	r3, r3
 8018886:	42a3      	cmp	r3, r4
 8018888:	bf28      	it	cs
 801888a:	4623      	movcs	r3, r4
 801888c:	eb03 0c05 	add.w	ip, r3, r5
 8018890:	f800 703c 	strb.w	r7, [r0, ip, lsl #3]
 8018894:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 8018898:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 801889c:	f8cc e002 	str.w	lr, [ip, #2]
 80188a0:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 80188a4:	290d      	cmp	r1, #13
 80188a6:	f8ac e006 	strh.w	lr, [ip, #6]
 80188aa:	d025      	beq.n	80188f8 <MotionFX_MagCal_run+0x3b4>
 80188ac:	443b      	add	r3, r7
 80188ae:	b29b      	uxth	r3, r3
 80188b0:	42a3      	cmp	r3, r4
 80188b2:	bf28      	it	cs
 80188b4:	4623      	movcs	r3, r4
 80188b6:	eb03 0c05 	add.w	ip, r3, r5
 80188ba:	f800 703c 	strb.w	r7, [r0, ip, lsl #3]
 80188be:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 80188c2:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80188c6:	f8cc e002 	str.w	lr, [ip, #2]
 80188ca:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 80188ce:	290e      	cmp	r1, #14
 80188d0:	f8ac e006 	strh.w	lr, [ip, #6]
 80188d4:	d010      	beq.n	80188f8 <MotionFX_MagCal_run+0x3b4>
 80188d6:	443b      	add	r3, r7
 80188d8:	b29b      	uxth	r3, r3
 80188da:	42a3      	cmp	r3, r4
 80188dc:	bf28      	it	cs
 80188de:	4623      	movcs	r3, r4
 80188e0:	441d      	add	r5, r3
 80188e2:	f800 7035 	strb.w	r7, [r0, r5, lsl #3]
 80188e6:	f8d2 4442 	ldr.w	r4, [r2, #1090]	; 0x442
 80188ea:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 80188ee:	f8c0 4002 	str.w	r4, [r0, #2]
 80188f2:	f8b2 4446 	ldrh.w	r4, [r2, #1094]	; 0x446
 80188f6:	80c4      	strh	r4, [r0, #6]
 80188f8:	3901      	subs	r1, #1
 80188fa:	b2c9      	uxtb	r1, r1
 80188fc:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8018900:	f8b1 53d0 	ldrh.w	r5, [r1, #976]	; 0x3d0
 8018904:	4435      	add	r5, r6
 8018906:	8213      	strh	r3, [r2, #16]
 8018908:	6155      	str	r5, [r2, #20]
 801890a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 801890e:	2b00      	cmp	r3, #0
 8018910:	f43f ae88 	beq.w	8018624 <MotionFX_MagCal_run+0xe0>
 8018914:	8a11      	ldrh	r1, [r2, #16]
 8018916:	8a53      	ldrh	r3, [r2, #18]
 8018918:	428b      	cmp	r3, r1
 801891a:	d023      	beq.n	8018964 <MotionFX_MagCal_run+0x420>
 801891c:	b349      	cbz	r1, 8018972 <MotionFX_MagCal_run+0x42e>
 801891e:	6953      	ldr	r3, [r2, #20]
 8018920:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 8018924:	3301      	adds	r3, #1
 8018926:	4403      	add	r3, r0
 8018928:	1c58      	adds	r0, r3, #1
 801892a:	d022      	beq.n	8018972 <MotionFX_MagCal_run+0x42e>
 801892c:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 8018930:	3410      	adds	r4, #16
 8018932:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8018934:	42a0      	cmp	r0, r4
 8018936:	bf88      	it	hi
 8018938:	4618      	movhi	r0, r3
 801893a:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 801893e:	bf88      	it	hi
 8018940:	6553      	strhi	r3, [r2, #84]	; 0x54
 8018942:	4420      	add	r0, r4
 8018944:	4283      	cmp	r3, r0
 8018946:	f4ff ae6d 	bcc.w	8018624 <MotionFX_MagCal_run+0xe0>
 801894a:	b131      	cbz	r1, 801895a <MotionFX_MagCal_run+0x416>
 801894c:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 8018950:	6952      	ldr	r2, [r2, #20]
 8018952:	3901      	subs	r1, #1
 8018954:	fb00 2111 	mls	r1, r0, r1, r2
 8018958:	b289      	uxth	r1, r1
 801895a:	1a5b      	subs	r3, r3, r1
 801895c:	b21b      	sxth	r3, r3
 801895e:	42a3      	cmp	r3, r4
 8018960:	f6ff ae60 	blt.w	8018624 <MotionFX_MagCal_run+0xe0>
 8018964:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018968:	4904      	ldr	r1, [pc, #16]	; (801897c <MotionFX_MagCal_run+0x438>)
 801896a:	f101 0014 	add.w	r0, r1, #20
 801896e:	f7fd bae1 	b.w	8015f34 <MEMS_runMagCal>
 8018972:	f242 7410 	movw	r4, #10000	; 0x2710
 8018976:	2300      	movs	r3, #0
 8018978:	e7db      	b.n	8018932 <MotionFX_MagCal_run+0x3ee>
 801897a:	bf00      	nop
 801897c:	20000140 	.word	0x20000140

08018980 <MotionFX_MagCal_getParams>:
 8018980:	b4f0      	push	{r4, r5, r6, r7}
 8018982:	4f1b      	ldr	r7, [pc, #108]	; (80189f0 <MotionFX_MagCal_getParams+0x70>)
 8018984:	b08e      	sub	sp, #56	; 0x38
 8018986:	793b      	ldrb	r3, [r7, #4]
 8018988:	b373      	cbz	r3, 80189e8 <MotionFX_MagCal_getParams+0x68>
 801898a:	f107 0574 	add.w	r5, r7, #116	; 0x74
 801898e:	ac01      	add	r4, sp, #4
 8018990:	4606      	mov	r6, r0
 8018992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801899a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801899c:	ed9d 7a03 	vldr	s14, [sp, #12]
 80189a0:	eddd 6a02 	vldr	s13, [sp, #8]
 80189a4:	eddd 7a04 	vldr	s15, [sp, #16]
 80189a8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80189ac:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80189b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80189b4:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 80189f4 <MotionFX_MagCal_getParams+0x74>
 80189b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80189bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80189c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80189c4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80189c8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80189cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80189d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80189d2:	682b      	ldr	r3, [r5, #0]
 80189d4:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80189d8:	6023      	str	r3, [r4, #0]
 80189da:	edc6 6a00 	vstr	s13, [r6]
 80189de:	7332      	strb	r2, [r6, #12]
 80189e0:	ed86 7a01 	vstr	s14, [r6, #4]
 80189e4:	edc6 7a02 	vstr	s15, [r6, #8]
 80189e8:	b00e      	add	sp, #56	; 0x38
 80189ea:	bcf0      	pop	{r4, r5, r6, r7}
 80189ec:	4770      	bx	lr
 80189ee:	bf00      	nop
 80189f0:	20000138 	.word	0x20000138
 80189f4:	3b03126f 	.word	0x3b03126f

080189f8 <MotionFX_GetLibVersion>:
 80189f8:	b4f0      	push	{r4, r5, r6, r7}
 80189fa:	4b0f      	ldr	r3, [pc, #60]	; (8018a38 <MotionFX_GetLibVersion+0x40>)
 80189fc:	b08a      	sub	sp, #40	; 0x28
 80189fe:	791f      	ldrb	r7, [r3, #4]
 8018a00:	b1b7      	cbz	r7, 8018a30 <MotionFX_GetLibVersion+0x38>
 8018a02:	4604      	mov	r4, r0
 8018a04:	2712      	movs	r7, #18
 8018a06:	4e0d      	ldr	r6, [pc, #52]	; (8018a3c <MotionFX_GetLibVersion+0x44>)
 8018a08:	ad01      	add	r5, sp, #4
 8018a0a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8018a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018a0e:	6833      	ldr	r3, [r6, #0]
 8018a10:	ae01      	add	r6, sp, #4
 8018a12:	f825 3b02 	strh.w	r3, [r5], #2
 8018a16:	0c1b      	lsrs	r3, r3, #16
 8018a18:	702b      	strb	r3, [r5, #0]
 8018a1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8018a1c:	f8b6 c000 	ldrh.w	ip, [r6]
 8018a20:	78b5      	ldrb	r5, [r6, #2]
 8018a22:	6020      	str	r0, [r4, #0]
 8018a24:	6061      	str	r1, [r4, #4]
 8018a26:	60a2      	str	r2, [r4, #8]
 8018a28:	60e3      	str	r3, [r4, #12]
 8018a2a:	f8a4 c010 	strh.w	ip, [r4, #16]
 8018a2e:	74a5      	strb	r5, [r4, #18]
 8018a30:	4638      	mov	r0, r7
 8018a32:	b00a      	add	sp, #40	; 0x28
 8018a34:	bcf0      	pop	{r4, r5, r6, r7}
 8018a36:	4770      	bx	lr
 8018a38:	20000138 	.word	0x20000138
 8018a3c:	0801b144 	.word	0x0801b144

08018a40 <ceil>:
 8018a40:	ec51 0b10 	vmov	r0, r1, d0
 8018a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a48:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8018a4c:	460c      	mov	r4, r1
 8018a4e:	ee10 5a10 	vmov	r5, s0
 8018a52:	ee10 8a10 	vmov	r8, s0
 8018a56:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018a5a:	2e13      	cmp	r6, #19
 8018a5c:	dc31      	bgt.n	8018ac2 <ceil+0x82>
 8018a5e:	2e00      	cmp	r6, #0
 8018a60:	da12      	bge.n	8018a88 <ceil+0x48>
 8018a62:	a335      	add	r3, pc, #212	; (adr r3, 8018b38 <ceil+0xf8>)
 8018a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a68:	f7e7 fc14 	bl	8000294 <__adddf3>
 8018a6c:	2200      	movs	r2, #0
 8018a6e:	2300      	movs	r3, #0
 8018a70:	f7e8 f856 	bl	8000b20 <__aeabi_dcmpgt>
 8018a74:	b128      	cbz	r0, 8018a82 <ceil+0x42>
 8018a76:	2c00      	cmp	r4, #0
 8018a78:	db56      	blt.n	8018b28 <ceil+0xe8>
 8018a7a:	432c      	orrs	r4, r5
 8018a7c:	d058      	beq.n	8018b30 <ceil+0xf0>
 8018a7e:	2500      	movs	r5, #0
 8018a80:	4c2f      	ldr	r4, [pc, #188]	; (8018b40 <ceil+0x100>)
 8018a82:	4621      	mov	r1, r4
 8018a84:	4628      	mov	r0, r5
 8018a86:	e026      	b.n	8018ad6 <ceil+0x96>
 8018a88:	4f2e      	ldr	r7, [pc, #184]	; (8018b44 <ceil+0x104>)
 8018a8a:	4137      	asrs	r7, r6
 8018a8c:	ea01 0307 	and.w	r3, r1, r7
 8018a90:	4303      	orrs	r3, r0
 8018a92:	d020      	beq.n	8018ad6 <ceil+0x96>
 8018a94:	a328      	add	r3, pc, #160	; (adr r3, 8018b38 <ceil+0xf8>)
 8018a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a9a:	f7e7 fbfb 	bl	8000294 <__adddf3>
 8018a9e:	2200      	movs	r2, #0
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	f7e8 f83d 	bl	8000b20 <__aeabi_dcmpgt>
 8018aa6:	2800      	cmp	r0, #0
 8018aa8:	d0eb      	beq.n	8018a82 <ceil+0x42>
 8018aaa:	2c00      	cmp	r4, #0
 8018aac:	f04f 0500 	mov.w	r5, #0
 8018ab0:	bfc2      	ittt	gt
 8018ab2:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8018ab6:	fa43 f606 	asrgt.w	r6, r3, r6
 8018aba:	19a4      	addgt	r4, r4, r6
 8018abc:	ea24 0407 	bic.w	r4, r4, r7
 8018ac0:	e7df      	b.n	8018a82 <ceil+0x42>
 8018ac2:	2e33      	cmp	r6, #51	; 0x33
 8018ac4:	dd0b      	ble.n	8018ade <ceil+0x9e>
 8018ac6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018aca:	d104      	bne.n	8018ad6 <ceil+0x96>
 8018acc:	ee10 2a10 	vmov	r2, s0
 8018ad0:	460b      	mov	r3, r1
 8018ad2:	f7e7 fbdf 	bl	8000294 <__adddf3>
 8018ad6:	ec41 0b10 	vmov	d0, r0, r1
 8018ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ade:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8018ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8018ae6:	fa23 f707 	lsr.w	r7, r3, r7
 8018aea:	4207      	tst	r7, r0
 8018aec:	d0f3      	beq.n	8018ad6 <ceil+0x96>
 8018aee:	a312      	add	r3, pc, #72	; (adr r3, 8018b38 <ceil+0xf8>)
 8018af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018af4:	f7e7 fbce 	bl	8000294 <__adddf3>
 8018af8:	2200      	movs	r2, #0
 8018afa:	2300      	movs	r3, #0
 8018afc:	f7e8 f810 	bl	8000b20 <__aeabi_dcmpgt>
 8018b00:	2800      	cmp	r0, #0
 8018b02:	d0be      	beq.n	8018a82 <ceil+0x42>
 8018b04:	2c00      	cmp	r4, #0
 8018b06:	dd02      	ble.n	8018b0e <ceil+0xce>
 8018b08:	2e14      	cmp	r6, #20
 8018b0a:	d103      	bne.n	8018b14 <ceil+0xd4>
 8018b0c:	3401      	adds	r4, #1
 8018b0e:	ea25 0507 	bic.w	r5, r5, r7
 8018b12:	e7b6      	b.n	8018a82 <ceil+0x42>
 8018b14:	2301      	movs	r3, #1
 8018b16:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018b1a:	fa03 f606 	lsl.w	r6, r3, r6
 8018b1e:	4435      	add	r5, r6
 8018b20:	4545      	cmp	r5, r8
 8018b22:	bf38      	it	cc
 8018b24:	18e4      	addcc	r4, r4, r3
 8018b26:	e7f2      	b.n	8018b0e <ceil+0xce>
 8018b28:	2500      	movs	r5, #0
 8018b2a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8018b2e:	e7a8      	b.n	8018a82 <ceil+0x42>
 8018b30:	4625      	mov	r5, r4
 8018b32:	e7a6      	b.n	8018a82 <ceil+0x42>
 8018b34:	f3af 8000 	nop.w
 8018b38:	8800759c 	.word	0x8800759c
 8018b3c:	7e37e43c 	.word	0x7e37e43c
 8018b40:	3ff00000 	.word	0x3ff00000
 8018b44:	000fffff 	.word	0x000fffff

08018b48 <floor>:
 8018b48:	ec51 0b10 	vmov	r0, r1, d0
 8018b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8018b54:	460c      	mov	r4, r1
 8018b56:	ee10 5a10 	vmov	r5, s0
 8018b5a:	ee10 8a10 	vmov	r8, s0
 8018b5e:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018b62:	2e13      	cmp	r6, #19
 8018b64:	dc33      	bgt.n	8018bce <floor+0x86>
 8018b66:	2e00      	cmp	r6, #0
 8018b68:	da14      	bge.n	8018b94 <floor+0x4c>
 8018b6a:	a335      	add	r3, pc, #212	; (adr r3, 8018c40 <floor+0xf8>)
 8018b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b70:	f7e7 fb90 	bl	8000294 <__adddf3>
 8018b74:	2200      	movs	r2, #0
 8018b76:	2300      	movs	r3, #0
 8018b78:	f7e7 ffd2 	bl	8000b20 <__aeabi_dcmpgt>
 8018b7c:	b138      	cbz	r0, 8018b8e <floor+0x46>
 8018b7e:	2c00      	cmp	r4, #0
 8018b80:	da58      	bge.n	8018c34 <floor+0xec>
 8018b82:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8018b86:	431d      	orrs	r5, r3
 8018b88:	d001      	beq.n	8018b8e <floor+0x46>
 8018b8a:	2500      	movs	r5, #0
 8018b8c:	4c2e      	ldr	r4, [pc, #184]	; (8018c48 <floor+0x100>)
 8018b8e:	4621      	mov	r1, r4
 8018b90:	4628      	mov	r0, r5
 8018b92:	e026      	b.n	8018be2 <floor+0x9a>
 8018b94:	4f2d      	ldr	r7, [pc, #180]	; (8018c4c <floor+0x104>)
 8018b96:	4137      	asrs	r7, r6
 8018b98:	ea01 0307 	and.w	r3, r1, r7
 8018b9c:	4303      	orrs	r3, r0
 8018b9e:	d020      	beq.n	8018be2 <floor+0x9a>
 8018ba0:	a327      	add	r3, pc, #156	; (adr r3, 8018c40 <floor+0xf8>)
 8018ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ba6:	f7e7 fb75 	bl	8000294 <__adddf3>
 8018baa:	2200      	movs	r2, #0
 8018bac:	2300      	movs	r3, #0
 8018bae:	f7e7 ffb7 	bl	8000b20 <__aeabi_dcmpgt>
 8018bb2:	2800      	cmp	r0, #0
 8018bb4:	d0eb      	beq.n	8018b8e <floor+0x46>
 8018bb6:	2c00      	cmp	r4, #0
 8018bb8:	f04f 0500 	mov.w	r5, #0
 8018bbc:	bfbe      	ittt	lt
 8018bbe:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8018bc2:	fa43 f606 	asrlt.w	r6, r3, r6
 8018bc6:	19a4      	addlt	r4, r4, r6
 8018bc8:	ea24 0407 	bic.w	r4, r4, r7
 8018bcc:	e7df      	b.n	8018b8e <floor+0x46>
 8018bce:	2e33      	cmp	r6, #51	; 0x33
 8018bd0:	dd0b      	ble.n	8018bea <floor+0xa2>
 8018bd2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018bd6:	d104      	bne.n	8018be2 <floor+0x9a>
 8018bd8:	ee10 2a10 	vmov	r2, s0
 8018bdc:	460b      	mov	r3, r1
 8018bde:	f7e7 fb59 	bl	8000294 <__adddf3>
 8018be2:	ec41 0b10 	vmov	d0, r0, r1
 8018be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bea:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8018bee:	f04f 33ff 	mov.w	r3, #4294967295
 8018bf2:	fa23 f707 	lsr.w	r7, r3, r7
 8018bf6:	4207      	tst	r7, r0
 8018bf8:	d0f3      	beq.n	8018be2 <floor+0x9a>
 8018bfa:	a311      	add	r3, pc, #68	; (adr r3, 8018c40 <floor+0xf8>)
 8018bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c00:	f7e7 fb48 	bl	8000294 <__adddf3>
 8018c04:	2200      	movs	r2, #0
 8018c06:	2300      	movs	r3, #0
 8018c08:	f7e7 ff8a 	bl	8000b20 <__aeabi_dcmpgt>
 8018c0c:	2800      	cmp	r0, #0
 8018c0e:	d0be      	beq.n	8018b8e <floor+0x46>
 8018c10:	2c00      	cmp	r4, #0
 8018c12:	da02      	bge.n	8018c1a <floor+0xd2>
 8018c14:	2e14      	cmp	r6, #20
 8018c16:	d103      	bne.n	8018c20 <floor+0xd8>
 8018c18:	3401      	adds	r4, #1
 8018c1a:	ea25 0507 	bic.w	r5, r5, r7
 8018c1e:	e7b6      	b.n	8018b8e <floor+0x46>
 8018c20:	2301      	movs	r3, #1
 8018c22:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018c26:	fa03 f606 	lsl.w	r6, r3, r6
 8018c2a:	4435      	add	r5, r6
 8018c2c:	4545      	cmp	r5, r8
 8018c2e:	bf38      	it	cc
 8018c30:	18e4      	addcc	r4, r4, r3
 8018c32:	e7f2      	b.n	8018c1a <floor+0xd2>
 8018c34:	2500      	movs	r5, #0
 8018c36:	462c      	mov	r4, r5
 8018c38:	e7a9      	b.n	8018b8e <floor+0x46>
 8018c3a:	bf00      	nop
 8018c3c:	f3af 8000 	nop.w
 8018c40:	8800759c 	.word	0x8800759c
 8018c44:	7e37e43c 	.word	0x7e37e43c
 8018c48:	bff00000 	.word	0xbff00000
 8018c4c:	000fffff 	.word	0x000fffff

08018c50 <cosf>:
 8018c50:	ee10 3a10 	vmov	r3, s0
 8018c54:	b507      	push	{r0, r1, r2, lr}
 8018c56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018c5a:	4a1b      	ldr	r2, [pc, #108]	; (8018cc8 <cosf+0x78>)
 8018c5c:	4293      	cmp	r3, r2
 8018c5e:	dc04      	bgt.n	8018c6a <cosf+0x1a>
 8018c60:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8018ccc <cosf+0x7c>
 8018c64:	f000 fe7c 	bl	8019960 <__kernel_cosf>
 8018c68:	e004      	b.n	8018c74 <cosf+0x24>
 8018c6a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018c6e:	db04      	blt.n	8018c7a <cosf+0x2a>
 8018c70:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018c74:	b003      	add	sp, #12
 8018c76:	f85d fb04 	ldr.w	pc, [sp], #4
 8018c7a:	4668      	mov	r0, sp
 8018c7c:	f000 fd30 	bl	80196e0 <__ieee754_rem_pio2f>
 8018c80:	f000 0003 	and.w	r0, r0, #3
 8018c84:	2801      	cmp	r0, #1
 8018c86:	d007      	beq.n	8018c98 <cosf+0x48>
 8018c88:	2802      	cmp	r0, #2
 8018c8a:	d00e      	beq.n	8018caa <cosf+0x5a>
 8018c8c:	b9a0      	cbnz	r0, 8018cb8 <cosf+0x68>
 8018c8e:	eddd 0a01 	vldr	s1, [sp, #4]
 8018c92:	ed9d 0a00 	vldr	s0, [sp]
 8018c96:	e7e5      	b.n	8018c64 <cosf+0x14>
 8018c98:	eddd 0a01 	vldr	s1, [sp, #4]
 8018c9c:	ed9d 0a00 	vldr	s0, [sp]
 8018ca0:	f001 f94a 	bl	8019f38 <__kernel_sinf>
 8018ca4:	eeb1 0a40 	vneg.f32	s0, s0
 8018ca8:	e7e4      	b.n	8018c74 <cosf+0x24>
 8018caa:	eddd 0a01 	vldr	s1, [sp, #4]
 8018cae:	ed9d 0a00 	vldr	s0, [sp]
 8018cb2:	f000 fe55 	bl	8019960 <__kernel_cosf>
 8018cb6:	e7f5      	b.n	8018ca4 <cosf+0x54>
 8018cb8:	2001      	movs	r0, #1
 8018cba:	eddd 0a01 	vldr	s1, [sp, #4]
 8018cbe:	ed9d 0a00 	vldr	s0, [sp]
 8018cc2:	f001 f939 	bl	8019f38 <__kernel_sinf>
 8018cc6:	e7d5      	b.n	8018c74 <cosf+0x24>
 8018cc8:	3f490fd8 	.word	0x3f490fd8
 8018ccc:	00000000 	.word	0x00000000

08018cd0 <sinf>:
 8018cd0:	ee10 3a10 	vmov	r3, s0
 8018cd4:	b507      	push	{r0, r1, r2, lr}
 8018cd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018cda:	4a1c      	ldr	r2, [pc, #112]	; (8018d4c <sinf+0x7c>)
 8018cdc:	4293      	cmp	r3, r2
 8018cde:	dc05      	bgt.n	8018cec <sinf+0x1c>
 8018ce0:	2000      	movs	r0, #0
 8018ce2:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8018d50 <sinf+0x80>
 8018ce6:	f001 f927 	bl	8019f38 <__kernel_sinf>
 8018cea:	e004      	b.n	8018cf6 <sinf+0x26>
 8018cec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018cf0:	db04      	blt.n	8018cfc <sinf+0x2c>
 8018cf2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018cf6:	b003      	add	sp, #12
 8018cf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8018cfc:	4668      	mov	r0, sp
 8018cfe:	f000 fcef 	bl	80196e0 <__ieee754_rem_pio2f>
 8018d02:	f000 0003 	and.w	r0, r0, #3
 8018d06:	2801      	cmp	r0, #1
 8018d08:	d008      	beq.n	8018d1c <sinf+0x4c>
 8018d0a:	2802      	cmp	r0, #2
 8018d0c:	d00d      	beq.n	8018d2a <sinf+0x5a>
 8018d0e:	b9b0      	cbnz	r0, 8018d3e <sinf+0x6e>
 8018d10:	2001      	movs	r0, #1
 8018d12:	eddd 0a01 	vldr	s1, [sp, #4]
 8018d16:	ed9d 0a00 	vldr	s0, [sp]
 8018d1a:	e7e4      	b.n	8018ce6 <sinf+0x16>
 8018d1c:	eddd 0a01 	vldr	s1, [sp, #4]
 8018d20:	ed9d 0a00 	vldr	s0, [sp]
 8018d24:	f000 fe1c 	bl	8019960 <__kernel_cosf>
 8018d28:	e7e5      	b.n	8018cf6 <sinf+0x26>
 8018d2a:	2001      	movs	r0, #1
 8018d2c:	eddd 0a01 	vldr	s1, [sp, #4]
 8018d30:	ed9d 0a00 	vldr	s0, [sp]
 8018d34:	f001 f900 	bl	8019f38 <__kernel_sinf>
 8018d38:	eeb1 0a40 	vneg.f32	s0, s0
 8018d3c:	e7db      	b.n	8018cf6 <sinf+0x26>
 8018d3e:	eddd 0a01 	vldr	s1, [sp, #4]
 8018d42:	ed9d 0a00 	vldr	s0, [sp]
 8018d46:	f000 fe0b 	bl	8019960 <__kernel_cosf>
 8018d4a:	e7f5      	b.n	8018d38 <sinf+0x68>
 8018d4c:	3f490fd8 	.word	0x3f490fd8
 8018d50:	00000000 	.word	0x00000000

08018d54 <tanf>:
 8018d54:	ee10 3a10 	vmov	r3, s0
 8018d58:	b507      	push	{r0, r1, r2, lr}
 8018d5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018d5e:	4a0f      	ldr	r2, [pc, #60]	; (8018d9c <tanf+0x48>)
 8018d60:	4293      	cmp	r3, r2
 8018d62:	dc05      	bgt.n	8018d70 <tanf+0x1c>
 8018d64:	2001      	movs	r0, #1
 8018d66:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8018da0 <tanf+0x4c>
 8018d6a:	f001 f92d 	bl	8019fc8 <__kernel_tanf>
 8018d6e:	e004      	b.n	8018d7a <tanf+0x26>
 8018d70:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018d74:	db04      	blt.n	8018d80 <tanf+0x2c>
 8018d76:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018d7a:	b003      	add	sp, #12
 8018d7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018d80:	4668      	mov	r0, sp
 8018d82:	f000 fcad 	bl	80196e0 <__ieee754_rem_pio2f>
 8018d86:	eddd 0a01 	vldr	s1, [sp, #4]
 8018d8a:	0040      	lsls	r0, r0, #1
 8018d8c:	ed9d 0a00 	vldr	s0, [sp]
 8018d90:	f000 0002 	and.w	r0, r0, #2
 8018d94:	f1c0 0001 	rsb	r0, r0, #1
 8018d98:	e7e7      	b.n	8018d6a <tanf+0x16>
 8018d9a:	bf00      	nop
 8018d9c:	3f490fda 	.word	0x3f490fda
 8018da0:	00000000 	.word	0x00000000

08018da4 <atan2>:
 8018da4:	f000 b89c 	b.w	8018ee0 <__ieee754_atan2>

08018da8 <sqrt>:
 8018da8:	b538      	push	{r3, r4, r5, lr}
 8018daa:	ed2d 8b02 	vpush	{d8}
 8018dae:	ec55 4b10 	vmov	r4, r5, d0
 8018db2:	f000 f95f 	bl	8019074 <__ieee754_sqrt>
 8018db6:	4b15      	ldr	r3, [pc, #84]	; (8018e0c <sqrt+0x64>)
 8018db8:	eeb0 8a40 	vmov.f32	s16, s0
 8018dbc:	eef0 8a60 	vmov.f32	s17, s1
 8018dc0:	f993 3000 	ldrsb.w	r3, [r3]
 8018dc4:	3301      	adds	r3, #1
 8018dc6:	d019      	beq.n	8018dfc <sqrt+0x54>
 8018dc8:	4622      	mov	r2, r4
 8018dca:	462b      	mov	r3, r5
 8018dcc:	4620      	mov	r0, r4
 8018dce:	4629      	mov	r1, r5
 8018dd0:	f7e7 feb0 	bl	8000b34 <__aeabi_dcmpun>
 8018dd4:	b990      	cbnz	r0, 8018dfc <sqrt+0x54>
 8018dd6:	2200      	movs	r2, #0
 8018dd8:	2300      	movs	r3, #0
 8018dda:	4620      	mov	r0, r4
 8018ddc:	4629      	mov	r1, r5
 8018dde:	f7e7 fe81 	bl	8000ae4 <__aeabi_dcmplt>
 8018de2:	b158      	cbz	r0, 8018dfc <sqrt+0x54>
 8018de4:	f001 fcd2 	bl	801a78c <__errno>
 8018de8:	2321      	movs	r3, #33	; 0x21
 8018dea:	2200      	movs	r2, #0
 8018dec:	6003      	str	r3, [r0, #0]
 8018dee:	2300      	movs	r3, #0
 8018df0:	4610      	mov	r0, r2
 8018df2:	4619      	mov	r1, r3
 8018df4:	f7e7 fd2e 	bl	8000854 <__aeabi_ddiv>
 8018df8:	ec41 0b18 	vmov	d8, r0, r1
 8018dfc:	eeb0 0a48 	vmov.f32	s0, s16
 8018e00:	eef0 0a68 	vmov.f32	s1, s17
 8018e04:	ecbd 8b02 	vpop	{d8}
 8018e08:	bd38      	pop	{r3, r4, r5, pc}
 8018e0a:	bf00      	nop
 8018e0c:	200000ad 	.word	0x200000ad

08018e10 <acosf>:
 8018e10:	b508      	push	{r3, lr}
 8018e12:	ed2d 8b02 	vpush	{d8}
 8018e16:	eeb0 8a40 	vmov.f32	s16, s0
 8018e1a:	f000 f9e3 	bl	80191e4 <__ieee754_acosf>
 8018e1e:	4b13      	ldr	r3, [pc, #76]	; (8018e6c <acosf+0x5c>)
 8018e20:	eef0 8a40 	vmov.f32	s17, s0
 8018e24:	f993 3000 	ldrsb.w	r3, [r3]
 8018e28:	3301      	adds	r3, #1
 8018e2a:	d01a      	beq.n	8018e62 <acosf+0x52>
 8018e2c:	eeb4 8a48 	vcmp.f32	s16, s16
 8018e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e34:	d615      	bvs.n	8018e62 <acosf+0x52>
 8018e36:	eeb0 0a48 	vmov.f32	s0, s16
 8018e3a:	f001 fc27 	bl	801a68c <fabsf>
 8018e3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018e42:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e4a:	dd0a      	ble.n	8018e62 <acosf+0x52>
 8018e4c:	f001 fc9e 	bl	801a78c <__errno>
 8018e50:	2321      	movs	r3, #33	; 0x21
 8018e52:	ecbd 8b02 	vpop	{d8}
 8018e56:	6003      	str	r3, [r0, #0]
 8018e58:	4805      	ldr	r0, [pc, #20]	; (8018e70 <acosf+0x60>)
 8018e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018e5e:	f001 bc1f 	b.w	801a6a0 <nanf>
 8018e62:	eeb0 0a68 	vmov.f32	s0, s17
 8018e66:	ecbd 8b02 	vpop	{d8}
 8018e6a:	bd08      	pop	{r3, pc}
 8018e6c:	200000ad 	.word	0x200000ad
 8018e70:	0801b76d 	.word	0x0801b76d

08018e74 <asinf>:
 8018e74:	b508      	push	{r3, lr}
 8018e76:	ed2d 8b02 	vpush	{d8}
 8018e7a:	eeb0 8a40 	vmov.f32	s16, s0
 8018e7e:	f000 faab 	bl	80193d8 <__ieee754_asinf>
 8018e82:	4b13      	ldr	r3, [pc, #76]	; (8018ed0 <asinf+0x5c>)
 8018e84:	eef0 8a40 	vmov.f32	s17, s0
 8018e88:	f993 3000 	ldrsb.w	r3, [r3]
 8018e8c:	3301      	adds	r3, #1
 8018e8e:	d01a      	beq.n	8018ec6 <asinf+0x52>
 8018e90:	eeb4 8a48 	vcmp.f32	s16, s16
 8018e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e98:	d615      	bvs.n	8018ec6 <asinf+0x52>
 8018e9a:	eeb0 0a48 	vmov.f32	s0, s16
 8018e9e:	f001 fbf5 	bl	801a68c <fabsf>
 8018ea2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018ea6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eae:	dd0a      	ble.n	8018ec6 <asinf+0x52>
 8018eb0:	f001 fc6c 	bl	801a78c <__errno>
 8018eb4:	2321      	movs	r3, #33	; 0x21
 8018eb6:	ecbd 8b02 	vpop	{d8}
 8018eba:	6003      	str	r3, [r0, #0]
 8018ebc:	4805      	ldr	r0, [pc, #20]	; (8018ed4 <asinf+0x60>)
 8018ebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018ec2:	f001 bbed 	b.w	801a6a0 <nanf>
 8018ec6:	eeb0 0a68 	vmov.f32	s0, s17
 8018eca:	ecbd 8b02 	vpop	{d8}
 8018ece:	bd08      	pop	{r3, pc}
 8018ed0:	200000ad 	.word	0x200000ad
 8018ed4:	0801b76d 	.word	0x0801b76d

08018ed8 <atan2f>:
 8018ed8:	f000 bb64 	b.w	80195a4 <__ieee754_atan2f>
 8018edc:	0000      	movs	r0, r0
	...

08018ee0 <__ieee754_atan2>:
 8018ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ee4:	ec57 6b11 	vmov	r6, r7, d1
 8018ee8:	4273      	negs	r3, r6
 8018eea:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8018eee:	f8df e180 	ldr.w	lr, [pc, #384]	; 8019070 <__ieee754_atan2+0x190>
 8018ef2:	ee11 8a10 	vmov	r8, s2
 8018ef6:	4333      	orrs	r3, r6
 8018ef8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8018efc:	4573      	cmp	r3, lr
 8018efe:	ec51 0b10 	vmov	r0, r1, d0
 8018f02:	d80a      	bhi.n	8018f1a <__ieee754_atan2+0x3a>
 8018f04:	4244      	negs	r4, r0
 8018f06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018f0a:	468c      	mov	ip, r1
 8018f0c:	ee10 9a10 	vmov	r9, s0
 8018f10:	4304      	orrs	r4, r0
 8018f12:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8018f16:	4574      	cmp	r4, lr
 8018f18:	d907      	bls.n	8018f2a <__ieee754_atan2+0x4a>
 8018f1a:	4632      	mov	r2, r6
 8018f1c:	463b      	mov	r3, r7
 8018f1e:	f7e7 f9b9 	bl	8000294 <__adddf3>
 8018f22:	ec41 0b10 	vmov	d0, r0, r1
 8018f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f2a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8018f2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018f32:	4334      	orrs	r4, r6
 8018f34:	d103      	bne.n	8018f3e <__ieee754_atan2+0x5e>
 8018f36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f3a:	f001 b929 	b.w	801a190 <atan>
 8018f3e:	17bc      	asrs	r4, r7, #30
 8018f40:	ea53 0909 	orrs.w	r9, r3, r9
 8018f44:	f004 0402 	and.w	r4, r4, #2
 8018f48:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8018f4c:	d107      	bne.n	8018f5e <__ieee754_atan2+0x7e>
 8018f4e:	2c02      	cmp	r4, #2
 8018f50:	d060      	beq.n	8019014 <__ieee754_atan2+0x134>
 8018f52:	2c03      	cmp	r4, #3
 8018f54:	d1e5      	bne.n	8018f22 <__ieee754_atan2+0x42>
 8018f56:	a142      	add	r1, pc, #264	; (adr r1, 8019060 <__ieee754_atan2+0x180>)
 8018f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f5c:	e7e1      	b.n	8018f22 <__ieee754_atan2+0x42>
 8018f5e:	ea52 0808 	orrs.w	r8, r2, r8
 8018f62:	d106      	bne.n	8018f72 <__ieee754_atan2+0x92>
 8018f64:	f1bc 0f00 	cmp.w	ip, #0
 8018f68:	da5f      	bge.n	801902a <__ieee754_atan2+0x14a>
 8018f6a:	a13f      	add	r1, pc, #252	; (adr r1, 8019068 <__ieee754_atan2+0x188>)
 8018f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f70:	e7d7      	b.n	8018f22 <__ieee754_atan2+0x42>
 8018f72:	4572      	cmp	r2, lr
 8018f74:	d10f      	bne.n	8018f96 <__ieee754_atan2+0xb6>
 8018f76:	4293      	cmp	r3, r2
 8018f78:	f104 34ff 	add.w	r4, r4, #4294967295
 8018f7c:	d107      	bne.n	8018f8e <__ieee754_atan2+0xae>
 8018f7e:	2c02      	cmp	r4, #2
 8018f80:	d84c      	bhi.n	801901c <__ieee754_atan2+0x13c>
 8018f82:	4b35      	ldr	r3, [pc, #212]	; (8019058 <__ieee754_atan2+0x178>)
 8018f84:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8018f88:	e9d4 0100 	ldrd	r0, r1, [r4]
 8018f8c:	e7c9      	b.n	8018f22 <__ieee754_atan2+0x42>
 8018f8e:	2c02      	cmp	r4, #2
 8018f90:	d848      	bhi.n	8019024 <__ieee754_atan2+0x144>
 8018f92:	4b32      	ldr	r3, [pc, #200]	; (801905c <__ieee754_atan2+0x17c>)
 8018f94:	e7f6      	b.n	8018f84 <__ieee754_atan2+0xa4>
 8018f96:	4573      	cmp	r3, lr
 8018f98:	d0e4      	beq.n	8018f64 <__ieee754_atan2+0x84>
 8018f9a:	1a9b      	subs	r3, r3, r2
 8018f9c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8018fa0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018fa4:	da1e      	bge.n	8018fe4 <__ieee754_atan2+0x104>
 8018fa6:	2f00      	cmp	r7, #0
 8018fa8:	da01      	bge.n	8018fae <__ieee754_atan2+0xce>
 8018faa:	323c      	adds	r2, #60	; 0x3c
 8018fac:	db1e      	blt.n	8018fec <__ieee754_atan2+0x10c>
 8018fae:	4632      	mov	r2, r6
 8018fb0:	463b      	mov	r3, r7
 8018fb2:	f7e7 fc4f 	bl	8000854 <__aeabi_ddiv>
 8018fb6:	ec41 0b10 	vmov	d0, r0, r1
 8018fba:	f001 fa89 	bl	801a4d0 <fabs>
 8018fbe:	f001 f8e7 	bl	801a190 <atan>
 8018fc2:	ec51 0b10 	vmov	r0, r1, d0
 8018fc6:	2c01      	cmp	r4, #1
 8018fc8:	d013      	beq.n	8018ff2 <__ieee754_atan2+0x112>
 8018fca:	2c02      	cmp	r4, #2
 8018fcc:	d015      	beq.n	8018ffa <__ieee754_atan2+0x11a>
 8018fce:	2c00      	cmp	r4, #0
 8018fd0:	d0a7      	beq.n	8018f22 <__ieee754_atan2+0x42>
 8018fd2:	a319      	add	r3, pc, #100	; (adr r3, 8019038 <__ieee754_atan2+0x158>)
 8018fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fd8:	f7e7 f95a 	bl	8000290 <__aeabi_dsub>
 8018fdc:	a318      	add	r3, pc, #96	; (adr r3, 8019040 <__ieee754_atan2+0x160>)
 8018fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fe2:	e014      	b.n	801900e <__ieee754_atan2+0x12e>
 8018fe4:	a118      	add	r1, pc, #96	; (adr r1, 8019048 <__ieee754_atan2+0x168>)
 8018fe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018fea:	e7ec      	b.n	8018fc6 <__ieee754_atan2+0xe6>
 8018fec:	2000      	movs	r0, #0
 8018fee:	2100      	movs	r1, #0
 8018ff0:	e7e9      	b.n	8018fc6 <__ieee754_atan2+0xe6>
 8018ff2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018ff6:	4619      	mov	r1, r3
 8018ff8:	e793      	b.n	8018f22 <__ieee754_atan2+0x42>
 8018ffa:	a30f      	add	r3, pc, #60	; (adr r3, 8019038 <__ieee754_atan2+0x158>)
 8018ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019000:	f7e7 f946 	bl	8000290 <__aeabi_dsub>
 8019004:	4602      	mov	r2, r0
 8019006:	460b      	mov	r3, r1
 8019008:	a10d      	add	r1, pc, #52	; (adr r1, 8019040 <__ieee754_atan2+0x160>)
 801900a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801900e:	f7e7 f93f 	bl	8000290 <__aeabi_dsub>
 8019012:	e786      	b.n	8018f22 <__ieee754_atan2+0x42>
 8019014:	a10a      	add	r1, pc, #40	; (adr r1, 8019040 <__ieee754_atan2+0x160>)
 8019016:	e9d1 0100 	ldrd	r0, r1, [r1]
 801901a:	e782      	b.n	8018f22 <__ieee754_atan2+0x42>
 801901c:	a10c      	add	r1, pc, #48	; (adr r1, 8019050 <__ieee754_atan2+0x170>)
 801901e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019022:	e77e      	b.n	8018f22 <__ieee754_atan2+0x42>
 8019024:	2000      	movs	r0, #0
 8019026:	2100      	movs	r1, #0
 8019028:	e77b      	b.n	8018f22 <__ieee754_atan2+0x42>
 801902a:	a107      	add	r1, pc, #28	; (adr r1, 8019048 <__ieee754_atan2+0x168>)
 801902c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019030:	e777      	b.n	8018f22 <__ieee754_atan2+0x42>
 8019032:	bf00      	nop
 8019034:	f3af 8000 	nop.w
 8019038:	33145c07 	.word	0x33145c07
 801903c:	3ca1a626 	.word	0x3ca1a626
 8019040:	54442d18 	.word	0x54442d18
 8019044:	400921fb 	.word	0x400921fb
 8019048:	54442d18 	.word	0x54442d18
 801904c:	3ff921fb 	.word	0x3ff921fb
 8019050:	54442d18 	.word	0x54442d18
 8019054:	3fe921fb 	.word	0x3fe921fb
 8019058:	0801b2f0 	.word	0x0801b2f0
 801905c:	0801b308 	.word	0x0801b308
 8019060:	54442d18 	.word	0x54442d18
 8019064:	c00921fb 	.word	0xc00921fb
 8019068:	54442d18 	.word	0x54442d18
 801906c:	bff921fb 	.word	0xbff921fb
 8019070:	7ff00000 	.word	0x7ff00000

08019074 <__ieee754_sqrt>:
 8019074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019078:	4e59      	ldr	r6, [pc, #356]	; (80191e0 <__ieee754_sqrt+0x16c>)
 801907a:	ee10 0a10 	vmov	r0, s0
 801907e:	ee10 3a10 	vmov	r3, s0
 8019082:	ec55 4b10 	vmov	r4, r5, d0
 8019086:	43ae      	bics	r6, r5
 8019088:	4629      	mov	r1, r5
 801908a:	462a      	mov	r2, r5
 801908c:	d110      	bne.n	80190b0 <__ieee754_sqrt+0x3c>
 801908e:	ee10 2a10 	vmov	r2, s0
 8019092:	462b      	mov	r3, r5
 8019094:	f7e7 fab4 	bl	8000600 <__aeabi_dmul>
 8019098:	4602      	mov	r2, r0
 801909a:	460b      	mov	r3, r1
 801909c:	4620      	mov	r0, r4
 801909e:	4629      	mov	r1, r5
 80190a0:	f7e7 f8f8 	bl	8000294 <__adddf3>
 80190a4:	4604      	mov	r4, r0
 80190a6:	460d      	mov	r5, r1
 80190a8:	ec45 4b10 	vmov	d0, r4, r5
 80190ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190b0:	2d00      	cmp	r5, #0
 80190b2:	dc10      	bgt.n	80190d6 <__ieee754_sqrt+0x62>
 80190b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80190b8:	4330      	orrs	r0, r6
 80190ba:	d0f5      	beq.n	80190a8 <__ieee754_sqrt+0x34>
 80190bc:	b15d      	cbz	r5, 80190d6 <__ieee754_sqrt+0x62>
 80190be:	ee10 2a10 	vmov	r2, s0
 80190c2:	462b      	mov	r3, r5
 80190c4:	ee10 0a10 	vmov	r0, s0
 80190c8:	f7e7 f8e2 	bl	8000290 <__aeabi_dsub>
 80190cc:	4602      	mov	r2, r0
 80190ce:	460b      	mov	r3, r1
 80190d0:	f7e7 fbc0 	bl	8000854 <__aeabi_ddiv>
 80190d4:	e7e6      	b.n	80190a4 <__ieee754_sqrt+0x30>
 80190d6:	1509      	asrs	r1, r1, #20
 80190d8:	d07a      	beq.n	80191d0 <__ieee754_sqrt+0x15c>
 80190da:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80190de:	07ce      	lsls	r6, r1, #31
 80190e0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80190e4:	f04f 0e16 	mov.w	lr, #22
 80190e8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80190ec:	bf5c      	itt	pl
 80190ee:	0fda      	lsrpl	r2, r3, #31
 80190f0:	005b      	lslpl	r3, r3, #1
 80190f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80190f6:	bf58      	it	pl
 80190f8:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80190fc:	0fda      	lsrs	r2, r3, #31
 80190fe:	106d      	asrs	r5, r5, #1
 8019100:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019104:	2000      	movs	r0, #0
 8019106:	005b      	lsls	r3, r3, #1
 8019108:	4684      	mov	ip, r0
 801910a:	eb0c 0401 	add.w	r4, ip, r1
 801910e:	4294      	cmp	r4, r2
 8019110:	bfde      	ittt	le
 8019112:	1b12      	suble	r2, r2, r4
 8019114:	eb04 0c01 	addle.w	ip, r4, r1
 8019118:	1840      	addle	r0, r0, r1
 801911a:	f1be 0e01 	subs.w	lr, lr, #1
 801911e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019122:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019126:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801912a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801912e:	d1ec      	bne.n	801910a <__ieee754_sqrt+0x96>
 8019130:	4671      	mov	r1, lr
 8019132:	2720      	movs	r7, #32
 8019134:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019138:	4562      	cmp	r2, ip
 801913a:	eb04 060e 	add.w	r6, r4, lr
 801913e:	dc02      	bgt.n	8019146 <__ieee754_sqrt+0xd2>
 8019140:	d114      	bne.n	801916c <__ieee754_sqrt+0xf8>
 8019142:	429e      	cmp	r6, r3
 8019144:	d812      	bhi.n	801916c <__ieee754_sqrt+0xf8>
 8019146:	2e00      	cmp	r6, #0
 8019148:	eb06 0e04 	add.w	lr, r6, r4
 801914c:	da45      	bge.n	80191da <__ieee754_sqrt+0x166>
 801914e:	f1be 0f00 	cmp.w	lr, #0
 8019152:	db42      	blt.n	80191da <__ieee754_sqrt+0x166>
 8019154:	f10c 0801 	add.w	r8, ip, #1
 8019158:	eba2 020c 	sub.w	r2, r2, ip
 801915c:	429e      	cmp	r6, r3
 801915e:	4421      	add	r1, r4
 8019160:	eba3 0306 	sub.w	r3, r3, r6
 8019164:	bf88      	it	hi
 8019166:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801916a:	46c4      	mov	ip, r8
 801916c:	0052      	lsls	r2, r2, #1
 801916e:	3f01      	subs	r7, #1
 8019170:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8019174:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8019178:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801917c:	d1dc      	bne.n	8019138 <__ieee754_sqrt+0xc4>
 801917e:	4313      	orrs	r3, r2
 8019180:	d006      	beq.n	8019190 <__ieee754_sqrt+0x11c>
 8019182:	1c4c      	adds	r4, r1, #1
 8019184:	bf13      	iteet	ne
 8019186:	3101      	addne	r1, #1
 8019188:	3001      	addeq	r0, #1
 801918a:	4639      	moveq	r1, r7
 801918c:	f021 0101 	bicne.w	r1, r1, #1
 8019190:	1043      	asrs	r3, r0, #1
 8019192:	07c2      	lsls	r2, r0, #31
 8019194:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019198:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801919c:	bf48      	it	mi
 801919e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80191a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80191a6:	460c      	mov	r4, r1
 80191a8:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80191ac:	463d      	mov	r5, r7
 80191ae:	e77b      	b.n	80190a8 <__ieee754_sqrt+0x34>
 80191b0:	0ada      	lsrs	r2, r3, #11
 80191b2:	3815      	subs	r0, #21
 80191b4:	055b      	lsls	r3, r3, #21
 80191b6:	2a00      	cmp	r2, #0
 80191b8:	d0fa      	beq.n	80191b0 <__ieee754_sqrt+0x13c>
 80191ba:	02d7      	lsls	r7, r2, #11
 80191bc:	d50a      	bpl.n	80191d4 <__ieee754_sqrt+0x160>
 80191be:	f1c1 0420 	rsb	r4, r1, #32
 80191c2:	1e4d      	subs	r5, r1, #1
 80191c4:	fa23 f404 	lsr.w	r4, r3, r4
 80191c8:	408b      	lsls	r3, r1
 80191ca:	1b41      	subs	r1, r0, r5
 80191cc:	4322      	orrs	r2, r4
 80191ce:	e784      	b.n	80190da <__ieee754_sqrt+0x66>
 80191d0:	4608      	mov	r0, r1
 80191d2:	e7f0      	b.n	80191b6 <__ieee754_sqrt+0x142>
 80191d4:	0052      	lsls	r2, r2, #1
 80191d6:	3101      	adds	r1, #1
 80191d8:	e7ef      	b.n	80191ba <__ieee754_sqrt+0x146>
 80191da:	46e0      	mov	r8, ip
 80191dc:	e7bc      	b.n	8019158 <__ieee754_sqrt+0xe4>
 80191de:	bf00      	nop
 80191e0:	7ff00000 	.word	0x7ff00000

080191e4 <__ieee754_acosf>:
 80191e4:	b508      	push	{r3, lr}
 80191e6:	ee10 3a10 	vmov	r3, s0
 80191ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80191ee:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80191f2:	ed2d 8b0c 	vpush	{d8-d13}
 80191f6:	d109      	bne.n	801920c <__ieee754_acosf+0x28>
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8019394 <__ieee754_acosf+0x1b0>
 80191fe:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8019398 <__ieee754_acosf+0x1b4>
 8019202:	fe30 0a08 	vselgt.f32	s0, s0, s16
 8019206:	ecbd 8b0c 	vpop	{d8-d13}
 801920a:	bd08      	pop	{r3, pc}
 801920c:	dd04      	ble.n	8019218 <__ieee754_acosf+0x34>
 801920e:	ee30 8a40 	vsub.f32	s16, s0, s0
 8019212:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8019216:	e7f6      	b.n	8019206 <__ieee754_acosf+0x22>
 8019218:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801921c:	da3e      	bge.n	801929c <__ieee754_acosf+0xb8>
 801921e:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8019222:	f340 80b3 	ble.w	801938c <__ieee754_acosf+0x1a8>
 8019226:	ee60 7a00 	vmul.f32	s15, s0, s0
 801922a:	eddf 6a5c 	vldr	s13, [pc, #368]	; 801939c <__ieee754_acosf+0x1b8>
 801922e:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80193a0 <__ieee754_acosf+0x1bc>
 8019232:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 80193a4 <__ieee754_acosf+0x1c0>
 8019236:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801923a:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80193a8 <__ieee754_acosf+0x1c4>
 801923e:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 80193ac <__ieee754_acosf+0x1c8>
 8019242:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019246:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80193b0 <__ieee754_acosf+0x1cc>
 801924a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801924e:	eddf 6a59 	vldr	s13, [pc, #356]	; 80193b4 <__ieee754_acosf+0x1d0>
 8019252:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019256:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80193b8 <__ieee754_acosf+0x1d4>
 801925a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801925e:	eddf 6a57 	vldr	s13, [pc, #348]	; 80193bc <__ieee754_acosf+0x1d8>
 8019262:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8019266:	eddf 6a56 	vldr	s13, [pc, #344]	; 80193c0 <__ieee754_acosf+0x1dc>
 801926a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801926e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019272:	ed9f 6a54 	vldr	s12, [pc, #336]	; 80193c4 <__ieee754_acosf+0x1e0>
 8019276:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801927a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801927e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019282:	eef0 7a66 	vmov.f32	s15, s13
 8019286:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801928a:	eddf 7a4f 	vldr	s15, [pc, #316]	; 80193c8 <__ieee754_acosf+0x1e4>
 801928e:	eea0 8a66 	vfms.f32	s16, s0, s13
 8019292:	ee30 0a48 	vsub.f32	s0, s0, s16
 8019296:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801929a:	e7b4      	b.n	8019206 <__ieee754_acosf+0x22>
 801929c:	2b00      	cmp	r3, #0
 801929e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80192a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80192a6:	eddf da3d 	vldr	s27, [pc, #244]	; 801939c <__ieee754_acosf+0x1b8>
 80192aa:	eddf ca3d 	vldr	s25, [pc, #244]	; 80193a0 <__ieee754_acosf+0x1bc>
 80192ae:	ed9f ca3e 	vldr	s24, [pc, #248]	; 80193a8 <__ieee754_acosf+0x1c4>
 80192b2:	eddf ba3f 	vldr	s23, [pc, #252]	; 80193b0 <__ieee754_acosf+0x1cc>
 80192b6:	ed9f ba3f 	vldr	s22, [pc, #252]	; 80193b4 <__ieee754_acosf+0x1d0>
 80192ba:	eddf 8a3f 	vldr	s17, [pc, #252]	; 80193b8 <__ieee754_acosf+0x1d4>
 80192be:	ed9f da3f 	vldr	s26, [pc, #252]	; 80193bc <__ieee754_acosf+0x1d8>
 80192c2:	eddf aa38 	vldr	s21, [pc, #224]	; 80193a4 <__ieee754_acosf+0x1c0>
 80192c6:	ed9f aa3e 	vldr	s20, [pc, #248]	; 80193c0 <__ieee754_acosf+0x1dc>
 80192ca:	eddf 9a3e 	vldr	s19, [pc, #248]	; 80193c4 <__ieee754_acosf+0x1e0>
 80192ce:	da28      	bge.n	8019322 <__ieee754_acosf+0x13e>
 80192d0:	ee30 0a09 	vadd.f32	s0, s0, s18
 80192d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80192d8:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80192dc:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80192e0:	eeac ca80 	vfma.f32	s24, s25, s0
 80192e4:	eeaa aa80 	vfma.f32	s20, s21, s0
 80192e8:	eeec ba00 	vfma.f32	s23, s24, s0
 80192ec:	eeea 9a00 	vfma.f32	s19, s20, s0
 80192f0:	eeab ba80 	vfma.f32	s22, s23, s0
 80192f4:	eea9 9a80 	vfma.f32	s18, s19, s0
 80192f8:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80192fc:	ee68 8a80 	vmul.f32	s17, s17, s0
 8019300:	f000 fb2a 	bl	8019958 <__ieee754_sqrtf>
 8019304:	eddf 7a31 	vldr	s15, [pc, #196]	; 80193cc <__ieee754_acosf+0x1e8>
 8019308:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801930c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019310:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8019314:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019318:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80193d0 <__ieee754_acosf+0x1ec>
 801931c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019320:	e771      	b.n	8019206 <__ieee754_acosf+0x22>
 8019322:	ee39 8a40 	vsub.f32	s16, s18, s0
 8019326:	ee28 8a27 	vmul.f32	s16, s16, s15
 801932a:	eeb0 0a48 	vmov.f32	s0, s16
 801932e:	f000 fb13 	bl	8019958 <__ieee754_sqrtf>
 8019332:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8019336:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801933a:	ee10 3a10 	vmov	r3, s0
 801933e:	eeb0 6a48 	vmov.f32	s12, s16
 8019342:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019346:	f023 030f 	bic.w	r3, r3, #15
 801934a:	eeac ca88 	vfma.f32	s24, s25, s16
 801934e:	eeaa aa88 	vfma.f32	s20, s21, s16
 8019352:	ee07 3a90 	vmov	s15, r3
 8019356:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801935a:	ee70 6a27 	vadd.f32	s13, s0, s15
 801935e:	eeec ba08 	vfma.f32	s23, s24, s16
 8019362:	eeea 9a08 	vfma.f32	s19, s20, s16
 8019366:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801936a:	eeab ba88 	vfma.f32	s22, s23, s16
 801936e:	eea9 9a88 	vfma.f32	s18, s19, s16
 8019372:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8019376:	ee68 8a88 	vmul.f32	s17, s17, s16
 801937a:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801937e:	eea0 7a26 	vfma.f32	s14, s0, s13
 8019382:	ee37 0a87 	vadd.f32	s0, s15, s14
 8019386:	ee30 0a00 	vadd.f32	s0, s0, s0
 801938a:	e73c      	b.n	8019206 <__ieee754_acosf+0x22>
 801938c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80193d4 <__ieee754_acosf+0x1f0>
 8019390:	e739      	b.n	8019206 <__ieee754_acosf+0x22>
 8019392:	bf00      	nop
 8019394:	00000000 	.word	0x00000000
 8019398:	40490fdb 	.word	0x40490fdb
 801939c:	3811ef08 	.word	0x3811ef08
 80193a0:	3a4f7f04 	.word	0x3a4f7f04
 80193a4:	bf303361 	.word	0xbf303361
 80193a8:	bd241146 	.word	0xbd241146
 80193ac:	33a22168 	.word	0x33a22168
 80193b0:	3e4e0aa8 	.word	0x3e4e0aa8
 80193b4:	bea6b090 	.word	0xbea6b090
 80193b8:	3e2aaaab 	.word	0x3e2aaaab
 80193bc:	3d9dc62e 	.word	0x3d9dc62e
 80193c0:	4001572d 	.word	0x4001572d
 80193c4:	c019d139 	.word	0xc019d139
 80193c8:	3fc90fda 	.word	0x3fc90fda
 80193cc:	b3a22168 	.word	0xb3a22168
 80193d0:	40490fda 	.word	0x40490fda
 80193d4:	3fc90fdb 	.word	0x3fc90fdb

080193d8 <__ieee754_asinf>:
 80193d8:	b538      	push	{r3, r4, r5, lr}
 80193da:	ee10 5a10 	vmov	r5, s0
 80193de:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80193e2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80193e6:	ed2d 8b04 	vpush	{d8-d9}
 80193ea:	d10c      	bne.n	8019406 <__ieee754_asinf+0x2e>
 80193ec:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8019564 <__ieee754_asinf+0x18c>
 80193f0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8019568 <__ieee754_asinf+0x190>
 80193f4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80193f8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80193fc:	eeb0 0a67 	vmov.f32	s0, s15
 8019400:	ecbd 8b04 	vpop	{d8-d9}
 8019404:	bd38      	pop	{r3, r4, r5, pc}
 8019406:	dd04      	ble.n	8019412 <__ieee754_asinf+0x3a>
 8019408:	ee70 7a40 	vsub.f32	s15, s0, s0
 801940c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8019410:	e7f6      	b.n	8019400 <__ieee754_asinf+0x28>
 8019412:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8019416:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801941a:	da0b      	bge.n	8019434 <__ieee754_asinf+0x5c>
 801941c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8019420:	da52      	bge.n	80194c8 <__ieee754_asinf+0xf0>
 8019422:	eddf 7a52 	vldr	s15, [pc, #328]	; 801956c <__ieee754_asinf+0x194>
 8019426:	ee70 7a27 	vadd.f32	s15, s0, s15
 801942a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801942e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019432:	dce5      	bgt.n	8019400 <__ieee754_asinf+0x28>
 8019434:	f001 f92a 	bl	801a68c <fabsf>
 8019438:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801943c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8019440:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8019570 <__ieee754_asinf+0x198>
 8019444:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8019574 <__ieee754_asinf+0x19c>
 8019448:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8019578 <__ieee754_asinf+0x1a0>
 801944c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8019450:	eea8 7a27 	vfma.f32	s14, s16, s15
 8019454:	eddf 7a49 	vldr	s15, [pc, #292]	; 801957c <__ieee754_asinf+0x1a4>
 8019458:	eeb0 0a48 	vmov.f32	s0, s16
 801945c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019460:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8019580 <__ieee754_asinf+0x1a8>
 8019464:	eea7 7a88 	vfma.f32	s14, s15, s16
 8019468:	eddf 7a46 	vldr	s15, [pc, #280]	; 8019584 <__ieee754_asinf+0x1ac>
 801946c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019470:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8019588 <__ieee754_asinf+0x1b0>
 8019474:	eea7 9a88 	vfma.f32	s18, s15, s16
 8019478:	eddf 7a44 	vldr	s15, [pc, #272]	; 801958c <__ieee754_asinf+0x1b4>
 801947c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8019480:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8019590 <__ieee754_asinf+0x1b8>
 8019484:	ee29 9a08 	vmul.f32	s18, s18, s16
 8019488:	eea7 7a88 	vfma.f32	s14, s15, s16
 801948c:	eddf 7a41 	vldr	s15, [pc, #260]	; 8019594 <__ieee754_asinf+0x1bc>
 8019490:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019494:	eee7 8a88 	vfma.f32	s17, s15, s16
 8019498:	f000 fa5e 	bl	8019958 <__ieee754_sqrtf>
 801949c:	4b3e      	ldr	r3, [pc, #248]	; (8019598 <__ieee754_asinf+0x1c0>)
 801949e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80194a2:	429c      	cmp	r4, r3
 80194a4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80194a8:	dd3d      	ble.n	8019526 <__ieee754_asinf+0x14e>
 80194aa:	eddf 7a3c 	vldr	s15, [pc, #240]	; 801959c <__ieee754_asinf+0x1c4>
 80194ae:	eea0 0a06 	vfma.f32	s0, s0, s12
 80194b2:	eee0 7a26 	vfma.f32	s15, s0, s13
 80194b6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8019568 <__ieee754_asinf+0x190>
 80194ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80194be:	2d00      	cmp	r5, #0
 80194c0:	bfd8      	it	le
 80194c2:	eeb1 0a40 	vnegle.f32	s0, s0
 80194c6:	e79b      	b.n	8019400 <__ieee754_asinf+0x28>
 80194c8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80194cc:	eddf 6a28 	vldr	s13, [pc, #160]	; 8019570 <__ieee754_asinf+0x198>
 80194d0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8019574 <__ieee754_asinf+0x19c>
 80194d4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8019588 <__ieee754_asinf+0x1b0>
 80194d8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80194dc:	eddf 6a27 	vldr	s13, [pc, #156]	; 801957c <__ieee754_asinf+0x1a4>
 80194e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80194e4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8019580 <__ieee754_asinf+0x1a8>
 80194e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80194ec:	eddf 6a25 	vldr	s13, [pc, #148]	; 8019584 <__ieee754_asinf+0x1ac>
 80194f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80194f4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8019578 <__ieee754_asinf+0x1a0>
 80194f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80194fc:	eddf 6a23 	vldr	s13, [pc, #140]	; 801958c <__ieee754_asinf+0x1b4>
 8019500:	eee7 6a86 	vfma.f32	s13, s15, s12
 8019504:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8019590 <__ieee754_asinf+0x1b8>
 8019508:	ee27 7a27 	vmul.f32	s14, s14, s15
 801950c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8019510:	eddf 6a20 	vldr	s13, [pc, #128]	; 8019594 <__ieee754_asinf+0x1bc>
 8019514:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019518:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801951c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8019520:	eea0 0a27 	vfma.f32	s0, s0, s15
 8019524:	e76c      	b.n	8019400 <__ieee754_asinf+0x28>
 8019526:	ee10 3a10 	vmov	r3, s0
 801952a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801952e:	f023 030f 	bic.w	r3, r3, #15
 8019532:	ee07 3a10 	vmov	s14, r3
 8019536:	eea7 8a47 	vfms.f32	s16, s14, s14
 801953a:	ee70 7a07 	vadd.f32	s15, s0, s14
 801953e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019542:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8019546:	eddf 7a07 	vldr	s15, [pc, #28]	; 8019564 <__ieee754_asinf+0x18c>
 801954a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801954e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8019552:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80195a0 <__ieee754_asinf+0x1c8>
 8019556:	eeb0 6a40 	vmov.f32	s12, s0
 801955a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801955e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019562:	e7aa      	b.n	80194ba <__ieee754_asinf+0xe2>
 8019564:	b33bbd2e 	.word	0xb33bbd2e
 8019568:	3fc90fdb 	.word	0x3fc90fdb
 801956c:	7149f2ca 	.word	0x7149f2ca
 8019570:	3811ef08 	.word	0x3811ef08
 8019574:	3a4f7f04 	.word	0x3a4f7f04
 8019578:	3e2aaaab 	.word	0x3e2aaaab
 801957c:	bd241146 	.word	0xbd241146
 8019580:	3e4e0aa8 	.word	0x3e4e0aa8
 8019584:	bea6b090 	.word	0xbea6b090
 8019588:	3d9dc62e 	.word	0x3d9dc62e
 801958c:	bf303361 	.word	0xbf303361
 8019590:	4001572d 	.word	0x4001572d
 8019594:	c019d139 	.word	0xc019d139
 8019598:	3f799999 	.word	0x3f799999
 801959c:	333bbd2e 	.word	0x333bbd2e
 80195a0:	3f490fdb 	.word	0x3f490fdb

080195a4 <__ieee754_atan2f>:
 80195a4:	ee10 2a90 	vmov	r2, s1
 80195a8:	eef0 7a40 	vmov.f32	s15, s0
 80195ac:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80195b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80195b4:	b510      	push	{r4, lr}
 80195b6:	dc06      	bgt.n	80195c6 <__ieee754_atan2f+0x22>
 80195b8:	ee10 0a10 	vmov	r0, s0
 80195bc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80195c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80195c4:	dd04      	ble.n	80195d0 <__ieee754_atan2f+0x2c>
 80195c6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80195ca:	eeb0 0a67 	vmov.f32	s0, s15
 80195ce:	bd10      	pop	{r4, pc}
 80195d0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80195d4:	d103      	bne.n	80195de <__ieee754_atan2f+0x3a>
 80195d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195da:	f000 bf83 	b.w	801a4e4 <atanf>
 80195de:	1794      	asrs	r4, r2, #30
 80195e0:	f004 0402 	and.w	r4, r4, #2
 80195e4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80195e8:	b93b      	cbnz	r3, 80195fa <__ieee754_atan2f+0x56>
 80195ea:	2c02      	cmp	r4, #2
 80195ec:	d05c      	beq.n	80196a8 <__ieee754_atan2f+0x104>
 80195ee:	2c03      	cmp	r4, #3
 80195f0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80196bc <__ieee754_atan2f+0x118>
 80195f4:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80195f8:	e7e7      	b.n	80195ca <__ieee754_atan2f+0x26>
 80195fa:	b939      	cbnz	r1, 801960c <__ieee754_atan2f+0x68>
 80195fc:	2800      	cmp	r0, #0
 80195fe:	eddf 7a30 	vldr	s15, [pc, #192]	; 80196c0 <__ieee754_atan2f+0x11c>
 8019602:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80196c4 <__ieee754_atan2f+0x120>
 8019606:	fe67 7a80 	vselge.f32	s15, s15, s0
 801960a:	e7de      	b.n	80195ca <__ieee754_atan2f+0x26>
 801960c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019610:	d110      	bne.n	8019634 <__ieee754_atan2f+0x90>
 8019612:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019616:	f104 34ff 	add.w	r4, r4, #4294967295
 801961a:	d107      	bne.n	801962c <__ieee754_atan2f+0x88>
 801961c:	2c02      	cmp	r4, #2
 801961e:	d846      	bhi.n	80196ae <__ieee754_atan2f+0x10a>
 8019620:	4b29      	ldr	r3, [pc, #164]	; (80196c8 <__ieee754_atan2f+0x124>)
 8019622:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019626:	edd4 7a00 	vldr	s15, [r4]
 801962a:	e7ce      	b.n	80195ca <__ieee754_atan2f+0x26>
 801962c:	2c02      	cmp	r4, #2
 801962e:	d841      	bhi.n	80196b4 <__ieee754_atan2f+0x110>
 8019630:	4b26      	ldr	r3, [pc, #152]	; (80196cc <__ieee754_atan2f+0x128>)
 8019632:	e7f6      	b.n	8019622 <__ieee754_atan2f+0x7e>
 8019634:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019638:	d0e0      	beq.n	80195fc <__ieee754_atan2f+0x58>
 801963a:	1a5b      	subs	r3, r3, r1
 801963c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8019640:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8019644:	da1a      	bge.n	801967c <__ieee754_atan2f+0xd8>
 8019646:	2a00      	cmp	r2, #0
 8019648:	da01      	bge.n	801964e <__ieee754_atan2f+0xaa>
 801964a:	313c      	adds	r1, #60	; 0x3c
 801964c:	db19      	blt.n	8019682 <__ieee754_atan2f+0xde>
 801964e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8019652:	f001 f81b 	bl	801a68c <fabsf>
 8019656:	f000 ff45 	bl	801a4e4 <atanf>
 801965a:	eef0 7a40 	vmov.f32	s15, s0
 801965e:	2c01      	cmp	r4, #1
 8019660:	d012      	beq.n	8019688 <__ieee754_atan2f+0xe4>
 8019662:	2c02      	cmp	r4, #2
 8019664:	d017      	beq.n	8019696 <__ieee754_atan2f+0xf2>
 8019666:	2c00      	cmp	r4, #0
 8019668:	d0af      	beq.n	80195ca <__ieee754_atan2f+0x26>
 801966a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80196d0 <__ieee754_atan2f+0x12c>
 801966e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019672:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80196d4 <__ieee754_atan2f+0x130>
 8019676:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801967a:	e7a6      	b.n	80195ca <__ieee754_atan2f+0x26>
 801967c:	eddf 7a10 	vldr	s15, [pc, #64]	; 80196c0 <__ieee754_atan2f+0x11c>
 8019680:	e7ed      	b.n	801965e <__ieee754_atan2f+0xba>
 8019682:	eddf 7a15 	vldr	s15, [pc, #84]	; 80196d8 <__ieee754_atan2f+0x134>
 8019686:	e7ea      	b.n	801965e <__ieee754_atan2f+0xba>
 8019688:	ee17 3a90 	vmov	r3, s15
 801968c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019690:	ee07 3a90 	vmov	s15, r3
 8019694:	e799      	b.n	80195ca <__ieee754_atan2f+0x26>
 8019696:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80196d0 <__ieee754_atan2f+0x12c>
 801969a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801969e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80196d4 <__ieee754_atan2f+0x130>
 80196a2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80196a6:	e790      	b.n	80195ca <__ieee754_atan2f+0x26>
 80196a8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80196d4 <__ieee754_atan2f+0x130>
 80196ac:	e78d      	b.n	80195ca <__ieee754_atan2f+0x26>
 80196ae:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80196dc <__ieee754_atan2f+0x138>
 80196b2:	e78a      	b.n	80195ca <__ieee754_atan2f+0x26>
 80196b4:	eddf 7a08 	vldr	s15, [pc, #32]	; 80196d8 <__ieee754_atan2f+0x134>
 80196b8:	e787      	b.n	80195ca <__ieee754_atan2f+0x26>
 80196ba:	bf00      	nop
 80196bc:	c0490fdb 	.word	0xc0490fdb
 80196c0:	3fc90fdb 	.word	0x3fc90fdb
 80196c4:	bfc90fdb 	.word	0xbfc90fdb
 80196c8:	0801b320 	.word	0x0801b320
 80196cc:	0801b32c 	.word	0x0801b32c
 80196d0:	33bbbd2e 	.word	0x33bbbd2e
 80196d4:	40490fdb 	.word	0x40490fdb
 80196d8:	00000000 	.word	0x00000000
 80196dc:	3f490fdb 	.word	0x3f490fdb

080196e0 <__ieee754_rem_pio2f>:
 80196e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196e2:	ee10 6a10 	vmov	r6, s0
 80196e6:	4b8e      	ldr	r3, [pc, #568]	; (8019920 <__ieee754_rem_pio2f+0x240>)
 80196e8:	eef0 7a40 	vmov.f32	s15, s0
 80196ec:	b087      	sub	sp, #28
 80196ee:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80196f2:	4604      	mov	r4, r0
 80196f4:	429d      	cmp	r5, r3
 80196f6:	dc05      	bgt.n	8019704 <__ieee754_rem_pio2f+0x24>
 80196f8:	2300      	movs	r3, #0
 80196fa:	ed80 0a00 	vstr	s0, [r0]
 80196fe:	6043      	str	r3, [r0, #4]
 8019700:	2000      	movs	r0, #0
 8019702:	e01a      	b.n	801973a <__ieee754_rem_pio2f+0x5a>
 8019704:	4b87      	ldr	r3, [pc, #540]	; (8019924 <__ieee754_rem_pio2f+0x244>)
 8019706:	429d      	cmp	r5, r3
 8019708:	dc46      	bgt.n	8019798 <__ieee754_rem_pio2f+0xb8>
 801970a:	2e00      	cmp	r6, #0
 801970c:	f025 050f 	bic.w	r5, r5, #15
 8019710:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8019928 <__ieee754_rem_pio2f+0x248>
 8019714:	4b85      	ldr	r3, [pc, #532]	; (801992c <__ieee754_rem_pio2f+0x24c>)
 8019716:	dd1f      	ble.n	8019758 <__ieee754_rem_pio2f+0x78>
 8019718:	429d      	cmp	r5, r3
 801971a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801971e:	d00e      	beq.n	801973e <__ieee754_rem_pio2f+0x5e>
 8019720:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8019930 <__ieee754_rem_pio2f+0x250>
 8019724:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019728:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801972c:	ed80 0a00 	vstr	s0, [r0]
 8019730:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019734:	2001      	movs	r0, #1
 8019736:	edc4 7a01 	vstr	s15, [r4, #4]
 801973a:	b007      	add	sp, #28
 801973c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801973e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8019934 <__ieee754_rem_pio2f+0x254>
 8019742:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8019938 <__ieee754_rem_pio2f+0x258>
 8019746:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801974a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801974e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019752:	edc0 6a00 	vstr	s13, [r0]
 8019756:	e7eb      	b.n	8019730 <__ieee754_rem_pio2f+0x50>
 8019758:	429d      	cmp	r5, r3
 801975a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801975e:	d00e      	beq.n	801977e <__ieee754_rem_pio2f+0x9e>
 8019760:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8019930 <__ieee754_rem_pio2f+0x250>
 8019764:	ee37 0a87 	vadd.f32	s0, s15, s14
 8019768:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801976c:	ed80 0a00 	vstr	s0, [r0]
 8019770:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019774:	f04f 30ff 	mov.w	r0, #4294967295
 8019778:	edc4 7a01 	vstr	s15, [r4, #4]
 801977c:	e7dd      	b.n	801973a <__ieee754_rem_pio2f+0x5a>
 801977e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8019934 <__ieee754_rem_pio2f+0x254>
 8019782:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8019938 <__ieee754_rem_pio2f+0x258>
 8019786:	ee77 7a80 	vadd.f32	s15, s15, s0
 801978a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801978e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019792:	edc0 6a00 	vstr	s13, [r0]
 8019796:	e7eb      	b.n	8019770 <__ieee754_rem_pio2f+0x90>
 8019798:	4b68      	ldr	r3, [pc, #416]	; (801993c <__ieee754_rem_pio2f+0x25c>)
 801979a:	429d      	cmp	r5, r3
 801979c:	dc72      	bgt.n	8019884 <__ieee754_rem_pio2f+0x1a4>
 801979e:	f000 ff75 	bl	801a68c <fabsf>
 80197a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80197a6:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8019940 <__ieee754_rem_pio2f+0x260>
 80197aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80197ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80197b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80197b6:	ee17 0a90 	vmov	r0, s15
 80197ba:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019928 <__ieee754_rem_pio2f+0x248>
 80197be:	281f      	cmp	r0, #31
 80197c0:	eea7 0a67 	vfms.f32	s0, s14, s15
 80197c4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8019930 <__ieee754_rem_pio2f+0x250>
 80197c8:	eeb1 6a47 	vneg.f32	s12, s14
 80197cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80197d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80197d4:	ee16 2a90 	vmov	r2, s13
 80197d8:	dc1c      	bgt.n	8019814 <__ieee754_rem_pio2f+0x134>
 80197da:	1e47      	subs	r7, r0, #1
 80197dc:	4959      	ldr	r1, [pc, #356]	; (8019944 <__ieee754_rem_pio2f+0x264>)
 80197de:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80197e2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80197e6:	428b      	cmp	r3, r1
 80197e8:	d014      	beq.n	8019814 <__ieee754_rem_pio2f+0x134>
 80197ea:	6022      	str	r2, [r4, #0]
 80197ec:	ed94 7a00 	vldr	s14, [r4]
 80197f0:	2e00      	cmp	r6, #0
 80197f2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80197f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80197fa:	ed84 0a01 	vstr	s0, [r4, #4]
 80197fe:	da9c      	bge.n	801973a <__ieee754_rem_pio2f+0x5a>
 8019800:	eeb1 7a47 	vneg.f32	s14, s14
 8019804:	eeb1 0a40 	vneg.f32	s0, s0
 8019808:	ed84 7a00 	vstr	s14, [r4]
 801980c:	ed84 0a01 	vstr	s0, [r4, #4]
 8019810:	4240      	negs	r0, r0
 8019812:	e792      	b.n	801973a <__ieee754_rem_pio2f+0x5a>
 8019814:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019818:	15eb      	asrs	r3, r5, #23
 801981a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801981e:	2d08      	cmp	r5, #8
 8019820:	dde3      	ble.n	80197ea <__ieee754_rem_pio2f+0x10a>
 8019822:	eef0 6a40 	vmov.f32	s13, s0
 8019826:	eddf 7a43 	vldr	s15, [pc, #268]	; 8019934 <__ieee754_rem_pio2f+0x254>
 801982a:	eee6 6a27 	vfma.f32	s13, s12, s15
 801982e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8019832:	eea6 0a27 	vfma.f32	s0, s12, s15
 8019836:	eddf 7a40 	vldr	s15, [pc, #256]	; 8019938 <__ieee754_rem_pio2f+0x258>
 801983a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801983e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8019842:	eef0 7a40 	vmov.f32	s15, s0
 8019846:	ee15 2a90 	vmov	r2, s11
 801984a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801984e:	1a5b      	subs	r3, r3, r1
 8019850:	2b19      	cmp	r3, #25
 8019852:	dc04      	bgt.n	801985e <__ieee754_rem_pio2f+0x17e>
 8019854:	eeb0 0a66 	vmov.f32	s0, s13
 8019858:	edc4 5a00 	vstr	s11, [r4]
 801985c:	e7c6      	b.n	80197ec <__ieee754_rem_pio2f+0x10c>
 801985e:	eeb0 0a66 	vmov.f32	s0, s13
 8019862:	eddf 5a39 	vldr	s11, [pc, #228]	; 8019948 <__ieee754_rem_pio2f+0x268>
 8019866:	eea6 0a25 	vfma.f32	s0, s12, s11
 801986a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801986e:	eddf 6a37 	vldr	s13, [pc, #220]	; 801994c <__ieee754_rem_pio2f+0x26c>
 8019872:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019876:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801987a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801987e:	ed84 7a00 	vstr	s14, [r4]
 8019882:	e7b3      	b.n	80197ec <__ieee754_rem_pio2f+0x10c>
 8019884:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8019888:	db06      	blt.n	8019898 <__ieee754_rem_pio2f+0x1b8>
 801988a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801988e:	edc0 7a01 	vstr	s15, [r0, #4]
 8019892:	edc0 7a00 	vstr	s15, [r0]
 8019896:	e733      	b.n	8019700 <__ieee754_rem_pio2f+0x20>
 8019898:	15ea      	asrs	r2, r5, #23
 801989a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8019950 <__ieee754_rem_pio2f+0x270>
 801989e:	3a86      	subs	r2, #134	; 0x86
 80198a0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80198a4:	ee07 3a90 	vmov	s15, r3
 80198a8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80198ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80198b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80198b4:	ed8d 7a03 	vstr	s14, [sp, #12]
 80198b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80198bc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80198c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80198c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80198c8:	ed8d 7a04 	vstr	s14, [sp, #16]
 80198cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80198d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80198d4:	edcd 7a05 	vstr	s15, [sp, #20]
 80198d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198dc:	d11e      	bne.n	801991c <__ieee754_rem_pio2f+0x23c>
 80198de:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80198e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198e6:	bf14      	ite	ne
 80198e8:	2302      	movne	r3, #2
 80198ea:	2301      	moveq	r3, #1
 80198ec:	4919      	ldr	r1, [pc, #100]	; (8019954 <__ieee754_rem_pio2f+0x274>)
 80198ee:	a803      	add	r0, sp, #12
 80198f0:	9101      	str	r1, [sp, #4]
 80198f2:	2102      	movs	r1, #2
 80198f4:	9100      	str	r1, [sp, #0]
 80198f6:	4621      	mov	r1, r4
 80198f8:	f000 f892 	bl	8019a20 <__kernel_rem_pio2f>
 80198fc:	2e00      	cmp	r6, #0
 80198fe:	f6bf af1c 	bge.w	801973a <__ieee754_rem_pio2f+0x5a>
 8019902:	edd4 7a00 	vldr	s15, [r4]
 8019906:	eef1 7a67 	vneg.f32	s15, s15
 801990a:	edc4 7a00 	vstr	s15, [r4]
 801990e:	edd4 7a01 	vldr	s15, [r4, #4]
 8019912:	eef1 7a67 	vneg.f32	s15, s15
 8019916:	edc4 7a01 	vstr	s15, [r4, #4]
 801991a:	e779      	b.n	8019810 <__ieee754_rem_pio2f+0x130>
 801991c:	2303      	movs	r3, #3
 801991e:	e7e5      	b.n	80198ec <__ieee754_rem_pio2f+0x20c>
 8019920:	3f490fd8 	.word	0x3f490fd8
 8019924:	4016cbe3 	.word	0x4016cbe3
 8019928:	3fc90f80 	.word	0x3fc90f80
 801992c:	3fc90fd0 	.word	0x3fc90fd0
 8019930:	37354443 	.word	0x37354443
 8019934:	37354400 	.word	0x37354400
 8019938:	2e85a308 	.word	0x2e85a308
 801993c:	43490f80 	.word	0x43490f80
 8019940:	3f22f984 	.word	0x3f22f984
 8019944:	0801b338 	.word	0x0801b338
 8019948:	2e85a300 	.word	0x2e85a300
 801994c:	248d3132 	.word	0x248d3132
 8019950:	43800000 	.word	0x43800000
 8019954:	0801b3b8 	.word	0x0801b3b8

08019958 <__ieee754_sqrtf>:
 8019958:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801995c:	4770      	bx	lr
	...

08019960 <__kernel_cosf>:
 8019960:	ee10 3a10 	vmov	r3, s0
 8019964:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8019968:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801996c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8019970:	da05      	bge.n	801997e <__kernel_cosf+0x1e>
 8019972:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019976:	ee17 2a90 	vmov	r2, s15
 801997a:	2a00      	cmp	r2, #0
 801997c:	d03d      	beq.n	80199fa <__kernel_cosf+0x9a>
 801997e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8019982:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8019a00 <__kernel_cosf+0xa0>
 8019986:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8019a04 <__kernel_cosf+0xa4>
 801998a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8019a08 <__kernel_cosf+0xa8>
 801998e:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019992:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8019a0c <__kernel_cosf+0xac>
 8019996:	4a1e      	ldr	r2, [pc, #120]	; (8019a10 <__kernel_cosf+0xb0>)
 8019998:	4293      	cmp	r3, r2
 801999a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801999e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8019a14 <__kernel_cosf+0xb4>
 80199a2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80199a6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8019a18 <__kernel_cosf+0xb8>
 80199aa:	eee7 7a25 	vfma.f32	s15, s14, s11
 80199ae:	eeb0 7a66 	vmov.f32	s14, s13
 80199b2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80199b6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80199ba:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80199be:	ee67 6a25 	vmul.f32	s13, s14, s11
 80199c2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80199c6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80199ca:	dc04      	bgt.n	80199d6 <__kernel_cosf+0x76>
 80199cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80199d0:	ee36 0a47 	vsub.f32	s0, s12, s14
 80199d4:	4770      	bx	lr
 80199d6:	4a11      	ldr	r2, [pc, #68]	; (8019a1c <__kernel_cosf+0xbc>)
 80199d8:	4293      	cmp	r3, r2
 80199da:	bfd6      	itet	le
 80199dc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80199e0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80199e4:	ee06 3a90 	vmovle	s13, r3
 80199e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80199ec:	ee36 0a66 	vsub.f32	s0, s12, s13
 80199f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80199f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80199f8:	4770      	bx	lr
 80199fa:	eeb0 0a46 	vmov.f32	s0, s12
 80199fe:	4770      	bx	lr
 8019a00:	ad47d74e 	.word	0xad47d74e
 8019a04:	310f74f6 	.word	0x310f74f6
 8019a08:	3d2aaaab 	.word	0x3d2aaaab
 8019a0c:	b493f27c 	.word	0xb493f27c
 8019a10:	3e999999 	.word	0x3e999999
 8019a14:	37d00d01 	.word	0x37d00d01
 8019a18:	bab60b61 	.word	0xbab60b61
 8019a1c:	3f480000 	.word	0x3f480000

08019a20 <__kernel_rem_pio2f>:
 8019a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a24:	ed2d 8b04 	vpush	{d8-d9}
 8019a28:	b0d7      	sub	sp, #348	; 0x15c
 8019a2a:	4616      	mov	r6, r2
 8019a2c:	4698      	mov	r8, r3
 8019a2e:	4bbd      	ldr	r3, [pc, #756]	; (8019d24 <__kernel_rem_pio2f+0x304>)
 8019a30:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019a32:	460d      	mov	r5, r1
 8019a34:	f108 39ff 	add.w	r9, r8, #4294967295
 8019a38:	9001      	str	r0, [sp, #4]
 8019a3a:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8019a3e:	1d33      	adds	r3, r6, #4
 8019a40:	db29      	blt.n	8019a96 <__kernel_rem_pio2f+0x76>
 8019a42:	1ef1      	subs	r1, r6, #3
 8019a44:	bf48      	it	mi
 8019a46:	1d31      	addmi	r1, r6, #4
 8019a48:	10c9      	asrs	r1, r1, #3
 8019a4a:	1c4c      	adds	r4, r1, #1
 8019a4c:	eba1 0009 	sub.w	r0, r1, r9
 8019a50:	eb07 0c09 	add.w	ip, r7, r9
 8019a54:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8019a58:	00e3      	lsls	r3, r4, #3
 8019a5a:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8019d34 <__kernel_rem_pio2f+0x314>
 8019a5e:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8019a62:	9302      	str	r3, [sp, #8]
 8019a64:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8019a66:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8019a6a:	2300      	movs	r3, #0
 8019a6c:	4563      	cmp	r3, ip
 8019a6e:	dd14      	ble.n	8019a9a <__kernel_rem_pio2f+0x7a>
 8019a70:	ab1a      	add	r3, sp, #104	; 0x68
 8019a72:	46cc      	mov	ip, r9
 8019a74:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8019a78:	f1c8 0b01 	rsb	fp, r8, #1
 8019a7c:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8019a80:	eb0b 020c 	add.w	r2, fp, ip
 8019a84:	4297      	cmp	r7, r2
 8019a86:	db29      	blt.n	8019adc <__kernel_rem_pio2f+0xbc>
 8019a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	eddf 7aa9 	vldr	s15, [pc, #676]	; 8019d34 <__kernel_rem_pio2f+0x314>
 8019a92:	2200      	movs	r2, #0
 8019a94:	e018      	b.n	8019ac8 <__kernel_rem_pio2f+0xa8>
 8019a96:	2100      	movs	r1, #0
 8019a98:	e7d7      	b.n	8019a4a <__kernel_rem_pio2f+0x2a>
 8019a9a:	42d8      	cmn	r0, r3
 8019a9c:	bf54      	ite	pl
 8019a9e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8019aa2:	eef0 7a47 	vmovmi.f32	s15, s14
 8019aa6:	f103 0301 	add.w	r3, r3, #1
 8019aaa:	bf5c      	itt	pl
 8019aac:	ee07 2a90 	vmovpl	s15, r2
 8019ab0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8019ab4:	ecea 7a01 	vstmia	sl!, {s15}
 8019ab8:	e7d8      	b.n	8019a6c <__kernel_rem_pio2f+0x4c>
 8019aba:	ecfe 6a01 	vldmia	lr!, {s13}
 8019abe:	3201      	adds	r2, #1
 8019ac0:	ed90 7a00 	vldr	s14, [r0]
 8019ac4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019ac8:	454a      	cmp	r2, r9
 8019aca:	f1a0 0004 	sub.w	r0, r0, #4
 8019ace:	ddf4      	ble.n	8019aba <__kernel_rem_pio2f+0x9a>
 8019ad0:	3304      	adds	r3, #4
 8019ad2:	f10c 0c01 	add.w	ip, ip, #1
 8019ad6:	ecea 7a01 	vstmia	sl!, {s15}
 8019ada:	e7d1      	b.n	8019a80 <__kernel_rem_pio2f+0x60>
 8019adc:	ab06      	add	r3, sp, #24
 8019ade:	46ba      	mov	sl, r7
 8019ae0:	eddf 8a93 	vldr	s17, [pc, #588]	; 8019d30 <__kernel_rem_pio2f+0x310>
 8019ae4:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8019ae8:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8019d2c <__kernel_rem_pio2f+0x30c>
 8019aec:	9304      	str	r3, [sp, #16]
 8019aee:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8019af0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019af4:	9303      	str	r3, [sp, #12]
 8019af6:	ab56      	add	r3, sp, #344	; 0x158
 8019af8:	4652      	mov	r2, sl
 8019afa:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8019afe:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8019b02:	ab06      	add	r3, sp, #24
 8019b04:	4618      	mov	r0, r3
 8019b06:	2a00      	cmp	r2, #0
 8019b08:	dc51      	bgt.n	8019bae <__kernel_rem_pio2f+0x18e>
 8019b0a:	4620      	mov	r0, r4
 8019b0c:	9305      	str	r3, [sp, #20]
 8019b0e:	f000 fdcd 	bl	801a6ac <scalbnf>
 8019b12:	eeb0 8a40 	vmov.f32	s16, s0
 8019b16:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8019b1a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019b1e:	f000 fdbc 	bl	801a69a <floorf>
 8019b22:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8019b26:	2c00      	cmp	r4, #0
 8019b28:	9b05      	ldr	r3, [sp, #20]
 8019b2a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8019b2e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8019b32:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8019b36:	edcd 7a00 	vstr	s15, [sp]
 8019b3a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019b3e:	dd4b      	ble.n	8019bd8 <__kernel_rem_pio2f+0x1b8>
 8019b40:	f10a 3cff 	add.w	ip, sl, #4294967295
 8019b44:	aa06      	add	r2, sp, #24
 8019b46:	f1c4 0e08 	rsb	lr, r4, #8
 8019b4a:	ee17 1a90 	vmov	r1, s15
 8019b4e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019b52:	fa42 f00e 	asr.w	r0, r2, lr
 8019b56:	4401      	add	r1, r0
 8019b58:	fa00 f00e 	lsl.w	r0, r0, lr
 8019b5c:	1a12      	subs	r2, r2, r0
 8019b5e:	f1c4 0007 	rsb	r0, r4, #7
 8019b62:	9100      	str	r1, [sp, #0]
 8019b64:	a906      	add	r1, sp, #24
 8019b66:	fa42 fb00 	asr.w	fp, r2, r0
 8019b6a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8019b6e:	f1bb 0f00 	cmp.w	fp, #0
 8019b72:	dd43      	ble.n	8019bfc <__kernel_rem_pio2f+0x1dc>
 8019b74:	9a00      	ldr	r2, [sp, #0]
 8019b76:	f04f 0e00 	mov.w	lr, #0
 8019b7a:	3201      	adds	r2, #1
 8019b7c:	4670      	mov	r0, lr
 8019b7e:	9200      	str	r2, [sp, #0]
 8019b80:	45f2      	cmp	sl, lr
 8019b82:	dc6c      	bgt.n	8019c5e <__kernel_rem_pio2f+0x23e>
 8019b84:	2c00      	cmp	r4, #0
 8019b86:	dd04      	ble.n	8019b92 <__kernel_rem_pio2f+0x172>
 8019b88:	2c01      	cmp	r4, #1
 8019b8a:	d079      	beq.n	8019c80 <__kernel_rem_pio2f+0x260>
 8019b8c:	2c02      	cmp	r4, #2
 8019b8e:	f000 8082 	beq.w	8019c96 <__kernel_rem_pio2f+0x276>
 8019b92:	f1bb 0f02 	cmp.w	fp, #2
 8019b96:	d131      	bne.n	8019bfc <__kernel_rem_pio2f+0x1dc>
 8019b98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019b9c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019ba0:	b360      	cbz	r0, 8019bfc <__kernel_rem_pio2f+0x1dc>
 8019ba2:	4620      	mov	r0, r4
 8019ba4:	f000 fd82 	bl	801a6ac <scalbnf>
 8019ba8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019bac:	e026      	b.n	8019bfc <__kernel_rem_pio2f+0x1dc>
 8019bae:	ee60 7a28 	vmul.f32	s15, s0, s17
 8019bb2:	3a01      	subs	r2, #1
 8019bb4:	a942      	add	r1, sp, #264	; 0x108
 8019bb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019bba:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8019bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019bc2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8019bc6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019bca:	eca0 0a01 	vstmia	r0!, {s0}
 8019bce:	ed9c 0a00 	vldr	s0, [ip]
 8019bd2:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019bd6:	e796      	b.n	8019b06 <__kernel_rem_pio2f+0xe6>
 8019bd8:	d107      	bne.n	8019bea <__kernel_rem_pio2f+0x1ca>
 8019bda:	f10a 32ff 	add.w	r2, sl, #4294967295
 8019bde:	a906      	add	r1, sp, #24
 8019be0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8019be4:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8019be8:	e7c1      	b.n	8019b6e <__kernel_rem_pio2f+0x14e>
 8019bea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019bee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bf6:	da2f      	bge.n	8019c58 <__kernel_rem_pio2f+0x238>
 8019bf8:	f04f 0b00 	mov.w	fp, #0
 8019bfc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c04:	f040 8098 	bne.w	8019d38 <__kernel_rem_pio2f+0x318>
 8019c08:	f10a 33ff 	add.w	r3, sl, #4294967295
 8019c0c:	2200      	movs	r2, #0
 8019c0e:	469c      	mov	ip, r3
 8019c10:	45bc      	cmp	ip, r7
 8019c12:	da48      	bge.n	8019ca6 <__kernel_rem_pio2f+0x286>
 8019c14:	2a00      	cmp	r2, #0
 8019c16:	d05f      	beq.n	8019cd8 <__kernel_rem_pio2f+0x2b8>
 8019c18:	aa06      	add	r2, sp, #24
 8019c1a:	3c08      	subs	r4, #8
 8019c1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8019c20:	2900      	cmp	r1, #0
 8019c22:	d07d      	beq.n	8019d20 <__kernel_rem_pio2f+0x300>
 8019c24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019c28:	4620      	mov	r0, r4
 8019c2a:	9301      	str	r3, [sp, #4]
 8019c2c:	f000 fd3e 	bl	801a6ac <scalbnf>
 8019c30:	9b01      	ldr	r3, [sp, #4]
 8019c32:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8019d30 <__kernel_rem_pio2f+0x310>
 8019c36:	4619      	mov	r1, r3
 8019c38:	2900      	cmp	r1, #0
 8019c3a:	f280 80af 	bge.w	8019d9c <__kernel_rem_pio2f+0x37c>
 8019c3e:	4618      	mov	r0, r3
 8019c40:	2400      	movs	r4, #0
 8019c42:	2800      	cmp	r0, #0
 8019c44:	f2c0 80d0 	blt.w	8019de8 <__kernel_rem_pio2f+0x3c8>
 8019c48:	a942      	add	r1, sp, #264	; 0x108
 8019c4a:	4a37      	ldr	r2, [pc, #220]	; (8019d28 <__kernel_rem_pio2f+0x308>)
 8019c4c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8019d34 <__kernel_rem_pio2f+0x314>
 8019c50:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8019c54:	2100      	movs	r1, #0
 8019c56:	e0bb      	b.n	8019dd0 <__kernel_rem_pio2f+0x3b0>
 8019c58:	f04f 0b02 	mov.w	fp, #2
 8019c5c:	e78a      	b.n	8019b74 <__kernel_rem_pio2f+0x154>
 8019c5e:	681a      	ldr	r2, [r3, #0]
 8019c60:	b948      	cbnz	r0, 8019c76 <__kernel_rem_pio2f+0x256>
 8019c62:	b11a      	cbz	r2, 8019c6c <__kernel_rem_pio2f+0x24c>
 8019c64:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8019c68:	601a      	str	r2, [r3, #0]
 8019c6a:	2201      	movs	r2, #1
 8019c6c:	f10e 0e01 	add.w	lr, lr, #1
 8019c70:	3304      	adds	r3, #4
 8019c72:	4610      	mov	r0, r2
 8019c74:	e784      	b.n	8019b80 <__kernel_rem_pio2f+0x160>
 8019c76:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8019c7a:	601a      	str	r2, [r3, #0]
 8019c7c:	4602      	mov	r2, r0
 8019c7e:	e7f5      	b.n	8019c6c <__kernel_rem_pio2f+0x24c>
 8019c80:	f10a 3cff 	add.w	ip, sl, #4294967295
 8019c84:	ab06      	add	r3, sp, #24
 8019c86:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019c8e:	aa06      	add	r2, sp, #24
 8019c90:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8019c94:	e77d      	b.n	8019b92 <__kernel_rem_pio2f+0x172>
 8019c96:	f10a 3cff 	add.w	ip, sl, #4294967295
 8019c9a:	ab06      	add	r3, sp, #24
 8019c9c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019ca4:	e7f3      	b.n	8019c8e <__kernel_rem_pio2f+0x26e>
 8019ca6:	a906      	add	r1, sp, #24
 8019ca8:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8019cac:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019cb0:	4302      	orrs	r2, r0
 8019cb2:	e7ad      	b.n	8019c10 <__kernel_rem_pio2f+0x1f0>
 8019cb4:	3001      	adds	r0, #1
 8019cb6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019cba:	2a00      	cmp	r2, #0
 8019cbc:	d0fa      	beq.n	8019cb4 <__kernel_rem_pio2f+0x294>
 8019cbe:	a91a      	add	r1, sp, #104	; 0x68
 8019cc0:	eb0a 0208 	add.w	r2, sl, r8
 8019cc4:	f10a 0301 	add.w	r3, sl, #1
 8019cc8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8019ccc:	eb0a 0100 	add.w	r1, sl, r0
 8019cd0:	4299      	cmp	r1, r3
 8019cd2:	da04      	bge.n	8019cde <__kernel_rem_pio2f+0x2be>
 8019cd4:	468a      	mov	sl, r1
 8019cd6:	e70e      	b.n	8019af6 <__kernel_rem_pio2f+0xd6>
 8019cd8:	9b04      	ldr	r3, [sp, #16]
 8019cda:	2001      	movs	r0, #1
 8019cdc:	e7eb      	b.n	8019cb6 <__kernel_rem_pio2f+0x296>
 8019cde:	9803      	ldr	r0, [sp, #12]
 8019ce0:	f8dd c004 	ldr.w	ip, [sp, #4]
 8019ce4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8019ce8:	ee07 0a90 	vmov	s15, r0
 8019cec:	9000      	str	r0, [sp, #0]
 8019cee:	2000      	movs	r0, #0
 8019cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019cf4:	ece2 7a01 	vstmia	r2!, {s15}
 8019cf8:	4696      	mov	lr, r2
 8019cfa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8019d34 <__kernel_rem_pio2f+0x314>
 8019cfe:	4548      	cmp	r0, r9
 8019d00:	dd06      	ble.n	8019d10 <__kernel_rem_pio2f+0x2f0>
 8019d02:	a842      	add	r0, sp, #264	; 0x108
 8019d04:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8019d08:	3301      	adds	r3, #1
 8019d0a:	edc0 7a00 	vstr	s15, [r0]
 8019d0e:	e7df      	b.n	8019cd0 <__kernel_rem_pio2f+0x2b0>
 8019d10:	ecfc 6a01 	vldmia	ip!, {s13}
 8019d14:	3001      	adds	r0, #1
 8019d16:	ed3e 7a01 	vldmdb	lr!, {s14}
 8019d1a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019d1e:	e7ee      	b.n	8019cfe <__kernel_rem_pio2f+0x2de>
 8019d20:	3b01      	subs	r3, #1
 8019d22:	e779      	b.n	8019c18 <__kernel_rem_pio2f+0x1f8>
 8019d24:	0801b6fc 	.word	0x0801b6fc
 8019d28:	0801b6d0 	.word	0x0801b6d0
 8019d2c:	43800000 	.word	0x43800000
 8019d30:	3b800000 	.word	0x3b800000
 8019d34:	00000000 	.word	0x00000000
 8019d38:	9b02      	ldr	r3, [sp, #8]
 8019d3a:	eeb0 0a48 	vmov.f32	s0, s16
 8019d3e:	1b98      	subs	r0, r3, r6
 8019d40:	f000 fcb4 	bl	801a6ac <scalbnf>
 8019d44:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8019d2c <__kernel_rem_pio2f+0x30c>
 8019d48:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8019d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d50:	db1b      	blt.n	8019d8a <__kernel_rem_pio2f+0x36a>
 8019d52:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8019d30 <__kernel_rem_pio2f+0x310>
 8019d56:	aa06      	add	r2, sp, #24
 8019d58:	a906      	add	r1, sp, #24
 8019d5a:	3408      	adds	r4, #8
 8019d5c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d68:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d70:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019d74:	ee10 3a10 	vmov	r3, s0
 8019d78:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8019d7c:	f10a 0301 	add.w	r3, sl, #1
 8019d80:	ee17 2a90 	vmov	r2, s15
 8019d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8019d88:	e74c      	b.n	8019c24 <__kernel_rem_pio2f+0x204>
 8019d8a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019d8e:	aa06      	add	r2, sp, #24
 8019d90:	ee10 3a10 	vmov	r3, s0
 8019d94:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8019d98:	4653      	mov	r3, sl
 8019d9a:	e743      	b.n	8019c24 <__kernel_rem_pio2f+0x204>
 8019d9c:	aa42      	add	r2, sp, #264	; 0x108
 8019d9e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8019da2:	aa06      	add	r2, sp, #24
 8019da4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8019da8:	3901      	subs	r1, #1
 8019daa:	ee07 2a90 	vmov	s15, r2
 8019dae:	9201      	str	r2, [sp, #4]
 8019db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019db4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019db8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019dbc:	edc0 7a00 	vstr	s15, [r0]
 8019dc0:	e73a      	b.n	8019c38 <__kernel_rem_pio2f+0x218>
 8019dc2:	ecf2 6a01 	vldmia	r2!, {s13}
 8019dc6:	3101      	adds	r1, #1
 8019dc8:	ecb6 7a01 	vldmia	r6!, {s14}
 8019dcc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019dd0:	42b9      	cmp	r1, r7
 8019dd2:	dc01      	bgt.n	8019dd8 <__kernel_rem_pio2f+0x3b8>
 8019dd4:	428c      	cmp	r4, r1
 8019dd6:	daf4      	bge.n	8019dc2 <__kernel_rem_pio2f+0x3a2>
 8019dd8:	aa56      	add	r2, sp, #344	; 0x158
 8019dda:	3801      	subs	r0, #1
 8019ddc:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8019de0:	3401      	adds	r4, #1
 8019de2:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8019de6:	e72c      	b.n	8019c42 <__kernel_rem_pio2f+0x222>
 8019de8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019dea:	2a02      	cmp	r2, #2
 8019dec:	dc0a      	bgt.n	8019e04 <__kernel_rem_pio2f+0x3e4>
 8019dee:	2a00      	cmp	r2, #0
 8019df0:	dc61      	bgt.n	8019eb6 <__kernel_rem_pio2f+0x496>
 8019df2:	d03c      	beq.n	8019e6e <__kernel_rem_pio2f+0x44e>
 8019df4:	9b00      	ldr	r3, [sp, #0]
 8019df6:	f003 0007 	and.w	r0, r3, #7
 8019dfa:	b057      	add	sp, #348	; 0x15c
 8019dfc:	ecbd 8b04 	vpop	{d8-d9}
 8019e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e04:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019e06:	2a03      	cmp	r2, #3
 8019e08:	d1f4      	bne.n	8019df4 <__kernel_rem_pio2f+0x3d4>
 8019e0a:	aa2e      	add	r2, sp, #184	; 0xb8
 8019e0c:	461c      	mov	r4, r3
 8019e0e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8019e12:	4608      	mov	r0, r1
 8019e14:	2c00      	cmp	r4, #0
 8019e16:	f1a0 0004 	sub.w	r0, r0, #4
 8019e1a:	dc59      	bgt.n	8019ed0 <__kernel_rem_pio2f+0x4b0>
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	2801      	cmp	r0, #1
 8019e20:	f1a1 0104 	sub.w	r1, r1, #4
 8019e24:	dc64      	bgt.n	8019ef0 <__kernel_rem_pio2f+0x4d0>
 8019e26:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8019d34 <__kernel_rem_pio2f+0x314>
 8019e2a:	2b01      	cmp	r3, #1
 8019e2c:	dc70      	bgt.n	8019f10 <__kernel_rem_pio2f+0x4f0>
 8019e2e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8019e32:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8019e36:	f1bb 0f00 	cmp.w	fp, #0
 8019e3a:	d172      	bne.n	8019f22 <__kernel_rem_pio2f+0x502>
 8019e3c:	edc5 6a00 	vstr	s13, [r5]
 8019e40:	ed85 7a01 	vstr	s14, [r5, #4]
 8019e44:	edc5 7a02 	vstr	s15, [r5, #8]
 8019e48:	e7d4      	b.n	8019df4 <__kernel_rem_pio2f+0x3d4>
 8019e4a:	aa2e      	add	r2, sp, #184	; 0xb8
 8019e4c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8019e50:	3b01      	subs	r3, #1
 8019e52:	ed91 7a00 	vldr	s14, [r1]
 8019e56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	daf5      	bge.n	8019e4a <__kernel_rem_pio2f+0x42a>
 8019e5e:	f1bb 0f00 	cmp.w	fp, #0
 8019e62:	d001      	beq.n	8019e68 <__kernel_rem_pio2f+0x448>
 8019e64:	eef1 7a67 	vneg.f32	s15, s15
 8019e68:	edc5 7a00 	vstr	s15, [r5]
 8019e6c:	e7c2      	b.n	8019df4 <__kernel_rem_pio2f+0x3d4>
 8019e6e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8019d34 <__kernel_rem_pio2f+0x314>
 8019e72:	e7f2      	b.n	8019e5a <__kernel_rem_pio2f+0x43a>
 8019e74:	aa2e      	add	r2, sp, #184	; 0xb8
 8019e76:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8019e7a:	3901      	subs	r1, #1
 8019e7c:	edd0 7a00 	vldr	s15, [r0]
 8019e80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019e84:	2900      	cmp	r1, #0
 8019e86:	daf5      	bge.n	8019e74 <__kernel_rem_pio2f+0x454>
 8019e88:	f1bb 0f00 	cmp.w	fp, #0
 8019e8c:	d017      	beq.n	8019ebe <__kernel_rem_pio2f+0x49e>
 8019e8e:	eef1 7a47 	vneg.f32	s15, s14
 8019e92:	edc5 7a00 	vstr	s15, [r5]
 8019e96:	a82f      	add	r0, sp, #188	; 0xbc
 8019e98:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8019e9c:	2101      	movs	r1, #1
 8019e9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019ea2:	428b      	cmp	r3, r1
 8019ea4:	da0e      	bge.n	8019ec4 <__kernel_rem_pio2f+0x4a4>
 8019ea6:	f1bb 0f00 	cmp.w	fp, #0
 8019eaa:	d001      	beq.n	8019eb0 <__kernel_rem_pio2f+0x490>
 8019eac:	eef1 7a67 	vneg.f32	s15, s15
 8019eb0:	edc5 7a01 	vstr	s15, [r5, #4]
 8019eb4:	e79e      	b.n	8019df4 <__kernel_rem_pio2f+0x3d4>
 8019eb6:	4619      	mov	r1, r3
 8019eb8:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8019d34 <__kernel_rem_pio2f+0x314>
 8019ebc:	e7e2      	b.n	8019e84 <__kernel_rem_pio2f+0x464>
 8019ebe:	eef0 7a47 	vmov.f32	s15, s14
 8019ec2:	e7e6      	b.n	8019e92 <__kernel_rem_pio2f+0x472>
 8019ec4:	ecb0 7a01 	vldmia	r0!, {s14}
 8019ec8:	3101      	adds	r1, #1
 8019eca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019ece:	e7e8      	b.n	8019ea2 <__kernel_rem_pio2f+0x482>
 8019ed0:	edd0 7a00 	vldr	s15, [r0]
 8019ed4:	3c01      	subs	r4, #1
 8019ed6:	edd0 6a01 	vldr	s13, [r0, #4]
 8019eda:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019ede:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019ee2:	ed80 7a00 	vstr	s14, [r0]
 8019ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019eea:	edc0 7a01 	vstr	s15, [r0, #4]
 8019eee:	e791      	b.n	8019e14 <__kernel_rem_pio2f+0x3f4>
 8019ef0:	edd1 7a00 	vldr	s15, [r1]
 8019ef4:	3801      	subs	r0, #1
 8019ef6:	edd1 6a01 	vldr	s13, [r1, #4]
 8019efa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019efe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019f02:	ed81 7a00 	vstr	s14, [r1]
 8019f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019f0a:	edc1 7a01 	vstr	s15, [r1, #4]
 8019f0e:	e786      	b.n	8019e1e <__kernel_rem_pio2f+0x3fe>
 8019f10:	aa2e      	add	r2, sp, #184	; 0xb8
 8019f12:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8019f16:	3b01      	subs	r3, #1
 8019f18:	ed91 7a00 	vldr	s14, [r1]
 8019f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f20:	e783      	b.n	8019e2a <__kernel_rem_pio2f+0x40a>
 8019f22:	eef1 6a66 	vneg.f32	s13, s13
 8019f26:	eeb1 7a47 	vneg.f32	s14, s14
 8019f2a:	eef1 7a67 	vneg.f32	s15, s15
 8019f2e:	edc5 6a00 	vstr	s13, [r5]
 8019f32:	ed85 7a01 	vstr	s14, [r5, #4]
 8019f36:	e785      	b.n	8019e44 <__kernel_rem_pio2f+0x424>

08019f38 <__kernel_sinf>:
 8019f38:	ee10 3a10 	vmov	r3, s0
 8019f3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019f40:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8019f44:	da04      	bge.n	8019f50 <__kernel_sinf+0x18>
 8019f46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019f4a:	ee17 3a90 	vmov	r3, s15
 8019f4e:	b35b      	cbz	r3, 8019fa8 <__kernel_sinf+0x70>
 8019f50:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019f54:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019fac <__kernel_sinf+0x74>
 8019f58:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8019fb0 <__kernel_sinf+0x78>
 8019f5c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019f60:	eddf 7a14 	vldr	s15, [pc, #80]	; 8019fb4 <__kernel_sinf+0x7c>
 8019f64:	ee60 6a07 	vmul.f32	s13, s0, s14
 8019f68:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019f6c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8019fb8 <__kernel_sinf+0x80>
 8019f70:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019f74:	eddf 7a11 	vldr	s15, [pc, #68]	; 8019fbc <__kernel_sinf+0x84>
 8019f78:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019f7c:	b930      	cbnz	r0, 8019f8c <__kernel_sinf+0x54>
 8019f7e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8019fc0 <__kernel_sinf+0x88>
 8019f82:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019f86:	eea6 0a26 	vfma.f32	s0, s12, s13
 8019f8a:	4770      	bx	lr
 8019f8c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8019f90:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8019f94:	eee0 7a86 	vfma.f32	s15, s1, s12
 8019f98:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8019f9c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8019fc4 <__kernel_sinf+0x8c>
 8019fa0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8019fa4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8019fa8:	4770      	bx	lr
 8019faa:	bf00      	nop
 8019fac:	2f2ec9d3 	.word	0x2f2ec9d3
 8019fb0:	b2d72f34 	.word	0xb2d72f34
 8019fb4:	3638ef1b 	.word	0x3638ef1b
 8019fb8:	b9500d01 	.word	0xb9500d01
 8019fbc:	3c088889 	.word	0x3c088889
 8019fc0:	be2aaaab 	.word	0xbe2aaaab
 8019fc4:	3e2aaaab 	.word	0x3e2aaaab

08019fc8 <__kernel_tanf>:
 8019fc8:	b508      	push	{r3, lr}
 8019fca:	ee10 3a10 	vmov	r3, s0
 8019fce:	eef0 7a40 	vmov.f32	s15, s0
 8019fd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019fd6:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8019fda:	da17      	bge.n	801a00c <__kernel_tanf+0x44>
 8019fdc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8019fe0:	ee17 1a10 	vmov	r1, s14
 8019fe4:	bb41      	cbnz	r1, 801a038 <__kernel_tanf+0x70>
 8019fe6:	1c43      	adds	r3, r0, #1
 8019fe8:	4313      	orrs	r3, r2
 8019fea:	d108      	bne.n	8019ffe <__kernel_tanf+0x36>
 8019fec:	f000 fb4e 	bl	801a68c <fabsf>
 8019ff0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019ff4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8019ffc:	bd08      	pop	{r3, pc}
 8019ffe:	2801      	cmp	r0, #1
 801a000:	d0fa      	beq.n	8019ff8 <__kernel_tanf+0x30>
 801a002:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801a006:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a00a:	e7f5      	b.n	8019ff8 <__kernel_tanf+0x30>
 801a00c:	494d      	ldr	r1, [pc, #308]	; (801a144 <__kernel_tanf+0x17c>)
 801a00e:	428a      	cmp	r2, r1
 801a010:	db12      	blt.n	801a038 <__kernel_tanf+0x70>
 801a012:	2b00      	cmp	r3, #0
 801a014:	bfb8      	it	lt
 801a016:	eef1 7a40 	vneglt.f32	s15, s0
 801a01a:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 801a148 <__kernel_tanf+0x180>
 801a01e:	bfb8      	it	lt
 801a020:	eef1 0a60 	vneglt.f32	s1, s1
 801a024:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a028:	ed9f 0a48 	vldr	s0, [pc, #288]	; 801a14c <__kernel_tanf+0x184>
 801a02c:	ee70 0a60 	vsub.f32	s1, s0, s1
 801a030:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801a034:	eddf 0a46 	vldr	s1, [pc, #280]	; 801a150 <__kernel_tanf+0x188>
 801a038:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801a03c:	eddf 5a45 	vldr	s11, [pc, #276]	; 801a154 <__kernel_tanf+0x18c>
 801a040:	ed9f 6a45 	vldr	s12, [pc, #276]	; 801a158 <__kernel_tanf+0x190>
 801a044:	ed9f 5a45 	vldr	s10, [pc, #276]	; 801a15c <__kernel_tanf+0x194>
 801a048:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801a04c:	493d      	ldr	r1, [pc, #244]	; (801a144 <__kernel_tanf+0x17c>)
 801a04e:	428a      	cmp	r2, r1
 801a050:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a054:	eddf 5a42 	vldr	s11, [pc, #264]	; 801a160 <__kernel_tanf+0x198>
 801a058:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a05c:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801a164 <__kernel_tanf+0x19c>
 801a060:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a064:	eddf 5a40 	vldr	s11, [pc, #256]	; 801a168 <__kernel_tanf+0x1a0>
 801a068:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a06c:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 801a16c <__kernel_tanf+0x1a4>
 801a070:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a074:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801a170 <__kernel_tanf+0x1a8>
 801a078:	eee7 5a05 	vfma.f32	s11, s14, s10
 801a07c:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801a174 <__kernel_tanf+0x1ac>
 801a080:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a084:	eddf 5a3c 	vldr	s11, [pc, #240]	; 801a178 <__kernel_tanf+0x1b0>
 801a088:	eee5 5a07 	vfma.f32	s11, s10, s14
 801a08c:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 801a17c <__kernel_tanf+0x1b4>
 801a090:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a094:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801a180 <__kernel_tanf+0x1b8>
 801a098:	eee5 5a07 	vfma.f32	s11, s10, s14
 801a09c:	eeb0 7a65 	vmov.f32	s14, s11
 801a0a0:	ee67 5aa6 	vmul.f32	s11, s15, s13
 801a0a4:	eea7 6a26 	vfma.f32	s12, s14, s13
 801a0a8:	eeb0 7a46 	vmov.f32	s14, s12
 801a0ac:	eeb0 6a60 	vmov.f32	s12, s1
 801a0b0:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a0b4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801a184 <__kernel_tanf+0x1bc>
 801a0b8:	eee6 0a26 	vfma.f32	s1, s12, s13
 801a0bc:	eee5 0a87 	vfma.f32	s1, s11, s14
 801a0c0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801a0c4:	db1d      	blt.n	801a102 <__kernel_tanf+0x13a>
 801a0c6:	ee06 0a90 	vmov	s13, r0
 801a0ca:	ee27 6a07 	vmul.f32	s12, s14, s14
 801a0ce:	179b      	asrs	r3, r3, #30
 801a0d0:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801a0d4:	f003 0302 	and.w	r3, r3, #2
 801a0d8:	ee37 7a00 	vadd.f32	s14, s14, s0
 801a0dc:	f1c3 0301 	rsb	r3, r3, #1
 801a0e0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801a0e4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801a0e8:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801a0ec:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a0f0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a0f4:	ee07 3a90 	vmov	s15, r3
 801a0f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a0fc:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a100:	e77a      	b.n	8019ff8 <__kernel_tanf+0x30>
 801a102:	2801      	cmp	r0, #1
 801a104:	d01b      	beq.n	801a13e <__kernel_tanf+0x176>
 801a106:	4b20      	ldr	r3, [pc, #128]	; (801a188 <__kernel_tanf+0x1c0>)
 801a108:	ee17 2a10 	vmov	r2, s14
 801a10c:	401a      	ands	r2, r3
 801a10e:	ee06 2a10 	vmov	s12, r2
 801a112:	ee76 7a67 	vsub.f32	s15, s12, s15
 801a116:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801a11a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801a11e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801a122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a126:	ee16 2a90 	vmov	r2, s13
 801a12a:	4013      	ands	r3, r2
 801a12c:	ee07 3a90 	vmov	s15, r3
 801a130:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a134:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801a138:	eee7 7a26 	vfma.f32	s15, s14, s13
 801a13c:	e75c      	b.n	8019ff8 <__kernel_tanf+0x30>
 801a13e:	eef0 7a47 	vmov.f32	s15, s14
 801a142:	e759      	b.n	8019ff8 <__kernel_tanf+0x30>
 801a144:	3f2ca140 	.word	0x3f2ca140
 801a148:	3f490fda 	.word	0x3f490fda
 801a14c:	33222168 	.word	0x33222168
 801a150:	00000000 	.word	0x00000000
 801a154:	b79bae5f 	.word	0xb79bae5f
 801a158:	38a3f445 	.word	0x38a3f445
 801a15c:	37d95384 	.word	0x37d95384
 801a160:	3a1a26c8 	.word	0x3a1a26c8
 801a164:	3b6b6916 	.word	0x3b6b6916
 801a168:	3cb327a4 	.word	0x3cb327a4
 801a16c:	3e088889 	.word	0x3e088889
 801a170:	3895c07a 	.word	0x3895c07a
 801a174:	398137b9 	.word	0x398137b9
 801a178:	3abede48 	.word	0x3abede48
 801a17c:	3c11371f 	.word	0x3c11371f
 801a180:	3d5d0dd1 	.word	0x3d5d0dd1
 801a184:	3eaaaaab 	.word	0x3eaaaaab
 801a188:	fffff000 	.word	0xfffff000
 801a18c:	00000000 	.word	0x00000000

0801a190 <atan>:
 801a190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a194:	ec55 4b10 	vmov	r4, r5, d0
 801a198:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a19c:	4bc2      	ldr	r3, [pc, #776]	; (801a4a8 <atan+0x318>)
 801a19e:	46ab      	mov	fp, r5
 801a1a0:	429e      	cmp	r6, r3
 801a1a2:	dd18      	ble.n	801a1d6 <atan+0x46>
 801a1a4:	4bc1      	ldr	r3, [pc, #772]	; (801a4ac <atan+0x31c>)
 801a1a6:	429e      	cmp	r6, r3
 801a1a8:	dc01      	bgt.n	801a1ae <atan+0x1e>
 801a1aa:	d109      	bne.n	801a1c0 <atan+0x30>
 801a1ac:	b144      	cbz	r4, 801a1c0 <atan+0x30>
 801a1ae:	4622      	mov	r2, r4
 801a1b0:	462b      	mov	r3, r5
 801a1b2:	4620      	mov	r0, r4
 801a1b4:	4629      	mov	r1, r5
 801a1b6:	f7e6 f86d 	bl	8000294 <__adddf3>
 801a1ba:	4604      	mov	r4, r0
 801a1bc:	460d      	mov	r5, r1
 801a1be:	e006      	b.n	801a1ce <atan+0x3e>
 801a1c0:	f1bb 0f00 	cmp.w	fp, #0
 801a1c4:	f300 8131 	bgt.w	801a42a <atan+0x29a>
 801a1c8:	a59b      	add	r5, pc, #620	; (adr r5, 801a438 <atan+0x2a8>)
 801a1ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a1ce:	ec45 4b10 	vmov	d0, r4, r5
 801a1d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1d6:	4bb6      	ldr	r3, [pc, #728]	; (801a4b0 <atan+0x320>)
 801a1d8:	429e      	cmp	r6, r3
 801a1da:	dc14      	bgt.n	801a206 <atan+0x76>
 801a1dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801a1e0:	429e      	cmp	r6, r3
 801a1e2:	dc0d      	bgt.n	801a200 <atan+0x70>
 801a1e4:	ee10 0a10 	vmov	r0, s0
 801a1e8:	4629      	mov	r1, r5
 801a1ea:	a395      	add	r3, pc, #596	; (adr r3, 801a440 <atan+0x2b0>)
 801a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1f0:	f7e6 f850 	bl	8000294 <__adddf3>
 801a1f4:	2200      	movs	r2, #0
 801a1f6:	4baf      	ldr	r3, [pc, #700]	; (801a4b4 <atan+0x324>)
 801a1f8:	f7e6 fc92 	bl	8000b20 <__aeabi_dcmpgt>
 801a1fc:	2800      	cmp	r0, #0
 801a1fe:	d1e6      	bne.n	801a1ce <atan+0x3e>
 801a200:	f04f 3aff 	mov.w	sl, #4294967295
 801a204:	e02b      	b.n	801a25e <atan+0xce>
 801a206:	f000 f963 	bl	801a4d0 <fabs>
 801a20a:	4bab      	ldr	r3, [pc, #684]	; (801a4b8 <atan+0x328>)
 801a20c:	429e      	cmp	r6, r3
 801a20e:	ec55 4b10 	vmov	r4, r5, d0
 801a212:	f300 80bf 	bgt.w	801a394 <atan+0x204>
 801a216:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801a21a:	429e      	cmp	r6, r3
 801a21c:	f300 80a0 	bgt.w	801a360 <atan+0x1d0>
 801a220:	ee10 2a10 	vmov	r2, s0
 801a224:	ee10 0a10 	vmov	r0, s0
 801a228:	462b      	mov	r3, r5
 801a22a:	4629      	mov	r1, r5
 801a22c:	f7e6 f832 	bl	8000294 <__adddf3>
 801a230:	2200      	movs	r2, #0
 801a232:	4ba0      	ldr	r3, [pc, #640]	; (801a4b4 <atan+0x324>)
 801a234:	f04f 0a00 	mov.w	sl, #0
 801a238:	f7e6 f82a 	bl	8000290 <__aeabi_dsub>
 801a23c:	4606      	mov	r6, r0
 801a23e:	460f      	mov	r7, r1
 801a240:	2200      	movs	r2, #0
 801a242:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a246:	4620      	mov	r0, r4
 801a248:	4629      	mov	r1, r5
 801a24a:	f7e6 f823 	bl	8000294 <__adddf3>
 801a24e:	4602      	mov	r2, r0
 801a250:	460b      	mov	r3, r1
 801a252:	4630      	mov	r0, r6
 801a254:	4639      	mov	r1, r7
 801a256:	f7e6 fafd 	bl	8000854 <__aeabi_ddiv>
 801a25a:	4604      	mov	r4, r0
 801a25c:	460d      	mov	r5, r1
 801a25e:	4622      	mov	r2, r4
 801a260:	462b      	mov	r3, r5
 801a262:	4620      	mov	r0, r4
 801a264:	4629      	mov	r1, r5
 801a266:	f7e6 f9cb 	bl	8000600 <__aeabi_dmul>
 801a26a:	4602      	mov	r2, r0
 801a26c:	460b      	mov	r3, r1
 801a26e:	4680      	mov	r8, r0
 801a270:	4689      	mov	r9, r1
 801a272:	f7e6 f9c5 	bl	8000600 <__aeabi_dmul>
 801a276:	4606      	mov	r6, r0
 801a278:	460f      	mov	r7, r1
 801a27a:	a373      	add	r3, pc, #460	; (adr r3, 801a448 <atan+0x2b8>)
 801a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a280:	f7e6 f9be 	bl	8000600 <__aeabi_dmul>
 801a284:	a372      	add	r3, pc, #456	; (adr r3, 801a450 <atan+0x2c0>)
 801a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a28a:	f7e6 f803 	bl	8000294 <__adddf3>
 801a28e:	4632      	mov	r2, r6
 801a290:	463b      	mov	r3, r7
 801a292:	f7e6 f9b5 	bl	8000600 <__aeabi_dmul>
 801a296:	a370      	add	r3, pc, #448	; (adr r3, 801a458 <atan+0x2c8>)
 801a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a29c:	f7e5 fffa 	bl	8000294 <__adddf3>
 801a2a0:	4632      	mov	r2, r6
 801a2a2:	463b      	mov	r3, r7
 801a2a4:	f7e6 f9ac 	bl	8000600 <__aeabi_dmul>
 801a2a8:	a36d      	add	r3, pc, #436	; (adr r3, 801a460 <atan+0x2d0>)
 801a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ae:	f7e5 fff1 	bl	8000294 <__adddf3>
 801a2b2:	4632      	mov	r2, r6
 801a2b4:	463b      	mov	r3, r7
 801a2b6:	f7e6 f9a3 	bl	8000600 <__aeabi_dmul>
 801a2ba:	a36b      	add	r3, pc, #428	; (adr r3, 801a468 <atan+0x2d8>)
 801a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2c0:	f7e5 ffe8 	bl	8000294 <__adddf3>
 801a2c4:	4632      	mov	r2, r6
 801a2c6:	463b      	mov	r3, r7
 801a2c8:	f7e6 f99a 	bl	8000600 <__aeabi_dmul>
 801a2cc:	a368      	add	r3, pc, #416	; (adr r3, 801a470 <atan+0x2e0>)
 801a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2d2:	f7e5 ffdf 	bl	8000294 <__adddf3>
 801a2d6:	4642      	mov	r2, r8
 801a2d8:	464b      	mov	r3, r9
 801a2da:	f7e6 f991 	bl	8000600 <__aeabi_dmul>
 801a2de:	4680      	mov	r8, r0
 801a2e0:	4689      	mov	r9, r1
 801a2e2:	4630      	mov	r0, r6
 801a2e4:	4639      	mov	r1, r7
 801a2e6:	a364      	add	r3, pc, #400	; (adr r3, 801a478 <atan+0x2e8>)
 801a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ec:	f7e6 f988 	bl	8000600 <__aeabi_dmul>
 801a2f0:	a363      	add	r3, pc, #396	; (adr r3, 801a480 <atan+0x2f0>)
 801a2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2f6:	f7e5 ffcb 	bl	8000290 <__aeabi_dsub>
 801a2fa:	4632      	mov	r2, r6
 801a2fc:	463b      	mov	r3, r7
 801a2fe:	f7e6 f97f 	bl	8000600 <__aeabi_dmul>
 801a302:	a361      	add	r3, pc, #388	; (adr r3, 801a488 <atan+0x2f8>)
 801a304:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a308:	f7e5 ffc2 	bl	8000290 <__aeabi_dsub>
 801a30c:	4632      	mov	r2, r6
 801a30e:	463b      	mov	r3, r7
 801a310:	f7e6 f976 	bl	8000600 <__aeabi_dmul>
 801a314:	a35e      	add	r3, pc, #376	; (adr r3, 801a490 <atan+0x300>)
 801a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a31a:	f7e5 ffb9 	bl	8000290 <__aeabi_dsub>
 801a31e:	4632      	mov	r2, r6
 801a320:	463b      	mov	r3, r7
 801a322:	f7e6 f96d 	bl	8000600 <__aeabi_dmul>
 801a326:	a35c      	add	r3, pc, #368	; (adr r3, 801a498 <atan+0x308>)
 801a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a32c:	f7e5 ffb0 	bl	8000290 <__aeabi_dsub>
 801a330:	4632      	mov	r2, r6
 801a332:	463b      	mov	r3, r7
 801a334:	f7e6 f964 	bl	8000600 <__aeabi_dmul>
 801a338:	4602      	mov	r2, r0
 801a33a:	460b      	mov	r3, r1
 801a33c:	4640      	mov	r0, r8
 801a33e:	4649      	mov	r1, r9
 801a340:	f7e5 ffa8 	bl	8000294 <__adddf3>
 801a344:	4622      	mov	r2, r4
 801a346:	462b      	mov	r3, r5
 801a348:	f7e6 f95a 	bl	8000600 <__aeabi_dmul>
 801a34c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801a350:	4602      	mov	r2, r0
 801a352:	460b      	mov	r3, r1
 801a354:	d14b      	bne.n	801a3ee <atan+0x25e>
 801a356:	4620      	mov	r0, r4
 801a358:	4629      	mov	r1, r5
 801a35a:	f7e5 ff99 	bl	8000290 <__aeabi_dsub>
 801a35e:	e72c      	b.n	801a1ba <atan+0x2a>
 801a360:	ee10 0a10 	vmov	r0, s0
 801a364:	2200      	movs	r2, #0
 801a366:	4b53      	ldr	r3, [pc, #332]	; (801a4b4 <atan+0x324>)
 801a368:	4629      	mov	r1, r5
 801a36a:	f7e5 ff91 	bl	8000290 <__aeabi_dsub>
 801a36e:	4606      	mov	r6, r0
 801a370:	460f      	mov	r7, r1
 801a372:	2200      	movs	r2, #0
 801a374:	4b4f      	ldr	r3, [pc, #316]	; (801a4b4 <atan+0x324>)
 801a376:	4620      	mov	r0, r4
 801a378:	4629      	mov	r1, r5
 801a37a:	f04f 0a01 	mov.w	sl, #1
 801a37e:	f7e5 ff89 	bl	8000294 <__adddf3>
 801a382:	4602      	mov	r2, r0
 801a384:	460b      	mov	r3, r1
 801a386:	4630      	mov	r0, r6
 801a388:	4639      	mov	r1, r7
 801a38a:	f7e6 fa63 	bl	8000854 <__aeabi_ddiv>
 801a38e:	4604      	mov	r4, r0
 801a390:	460d      	mov	r5, r1
 801a392:	e764      	b.n	801a25e <atan+0xce>
 801a394:	4b49      	ldr	r3, [pc, #292]	; (801a4bc <atan+0x32c>)
 801a396:	429e      	cmp	r6, r3
 801a398:	da1d      	bge.n	801a3d6 <atan+0x246>
 801a39a:	ee10 0a10 	vmov	r0, s0
 801a39e:	2200      	movs	r2, #0
 801a3a0:	4b47      	ldr	r3, [pc, #284]	; (801a4c0 <atan+0x330>)
 801a3a2:	4629      	mov	r1, r5
 801a3a4:	f7e5 ff74 	bl	8000290 <__aeabi_dsub>
 801a3a8:	2200      	movs	r2, #0
 801a3aa:	4606      	mov	r6, r0
 801a3ac:	460f      	mov	r7, r1
 801a3ae:	4b44      	ldr	r3, [pc, #272]	; (801a4c0 <atan+0x330>)
 801a3b0:	4620      	mov	r0, r4
 801a3b2:	4629      	mov	r1, r5
 801a3b4:	f04f 0a02 	mov.w	sl, #2
 801a3b8:	f7e6 f922 	bl	8000600 <__aeabi_dmul>
 801a3bc:	2200      	movs	r2, #0
 801a3be:	4b3d      	ldr	r3, [pc, #244]	; (801a4b4 <atan+0x324>)
 801a3c0:	f7e5 ff68 	bl	8000294 <__adddf3>
 801a3c4:	4602      	mov	r2, r0
 801a3c6:	460b      	mov	r3, r1
 801a3c8:	4630      	mov	r0, r6
 801a3ca:	4639      	mov	r1, r7
 801a3cc:	f7e6 fa42 	bl	8000854 <__aeabi_ddiv>
 801a3d0:	4604      	mov	r4, r0
 801a3d2:	460d      	mov	r5, r1
 801a3d4:	e743      	b.n	801a25e <atan+0xce>
 801a3d6:	462b      	mov	r3, r5
 801a3d8:	ee10 2a10 	vmov	r2, s0
 801a3dc:	2000      	movs	r0, #0
 801a3de:	4939      	ldr	r1, [pc, #228]	; (801a4c4 <atan+0x334>)
 801a3e0:	f7e6 fa38 	bl	8000854 <__aeabi_ddiv>
 801a3e4:	f04f 0a03 	mov.w	sl, #3
 801a3e8:	4604      	mov	r4, r0
 801a3ea:	460d      	mov	r5, r1
 801a3ec:	e737      	b.n	801a25e <atan+0xce>
 801a3ee:	4b36      	ldr	r3, [pc, #216]	; (801a4c8 <atan+0x338>)
 801a3f0:	4e36      	ldr	r6, [pc, #216]	; (801a4cc <atan+0x33c>)
 801a3f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a3f6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801a3fa:	e9da 2300 	ldrd	r2, r3, [sl]
 801a3fe:	f7e5 ff47 	bl	8000290 <__aeabi_dsub>
 801a402:	4622      	mov	r2, r4
 801a404:	462b      	mov	r3, r5
 801a406:	f7e5 ff43 	bl	8000290 <__aeabi_dsub>
 801a40a:	4602      	mov	r2, r0
 801a40c:	460b      	mov	r3, r1
 801a40e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a412:	f7e5 ff3d 	bl	8000290 <__aeabi_dsub>
 801a416:	f1bb 0f00 	cmp.w	fp, #0
 801a41a:	4604      	mov	r4, r0
 801a41c:	460d      	mov	r5, r1
 801a41e:	f6bf aed6 	bge.w	801a1ce <atan+0x3e>
 801a422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a426:	461d      	mov	r5, r3
 801a428:	e6d1      	b.n	801a1ce <atan+0x3e>
 801a42a:	a51d      	add	r5, pc, #116	; (adr r5, 801a4a0 <atan+0x310>)
 801a42c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a430:	e6cd      	b.n	801a1ce <atan+0x3e>
 801a432:	bf00      	nop
 801a434:	f3af 8000 	nop.w
 801a438:	54442d18 	.word	0x54442d18
 801a43c:	bff921fb 	.word	0xbff921fb
 801a440:	8800759c 	.word	0x8800759c
 801a444:	7e37e43c 	.word	0x7e37e43c
 801a448:	e322da11 	.word	0xe322da11
 801a44c:	3f90ad3a 	.word	0x3f90ad3a
 801a450:	24760deb 	.word	0x24760deb
 801a454:	3fa97b4b 	.word	0x3fa97b4b
 801a458:	a0d03d51 	.word	0xa0d03d51
 801a45c:	3fb10d66 	.word	0x3fb10d66
 801a460:	c54c206e 	.word	0xc54c206e
 801a464:	3fb745cd 	.word	0x3fb745cd
 801a468:	920083ff 	.word	0x920083ff
 801a46c:	3fc24924 	.word	0x3fc24924
 801a470:	5555550d 	.word	0x5555550d
 801a474:	3fd55555 	.word	0x3fd55555
 801a478:	2c6a6c2f 	.word	0x2c6a6c2f
 801a47c:	bfa2b444 	.word	0xbfa2b444
 801a480:	52defd9a 	.word	0x52defd9a
 801a484:	3fadde2d 	.word	0x3fadde2d
 801a488:	af749a6d 	.word	0xaf749a6d
 801a48c:	3fb3b0f2 	.word	0x3fb3b0f2
 801a490:	fe231671 	.word	0xfe231671
 801a494:	3fbc71c6 	.word	0x3fbc71c6
 801a498:	9998ebc4 	.word	0x9998ebc4
 801a49c:	3fc99999 	.word	0x3fc99999
 801a4a0:	54442d18 	.word	0x54442d18
 801a4a4:	3ff921fb 	.word	0x3ff921fb
 801a4a8:	440fffff 	.word	0x440fffff
 801a4ac:	7ff00000 	.word	0x7ff00000
 801a4b0:	3fdbffff 	.word	0x3fdbffff
 801a4b4:	3ff00000 	.word	0x3ff00000
 801a4b8:	3ff2ffff 	.word	0x3ff2ffff
 801a4bc:	40038000 	.word	0x40038000
 801a4c0:	3ff80000 	.word	0x3ff80000
 801a4c4:	bff00000 	.word	0xbff00000
 801a4c8:	0801b728 	.word	0x0801b728
 801a4cc:	0801b708 	.word	0x0801b708

0801a4d0 <fabs>:
 801a4d0:	ec51 0b10 	vmov	r0, r1, d0
 801a4d4:	ee10 2a10 	vmov	r2, s0
 801a4d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a4dc:	ec43 2b10 	vmov	d0, r2, r3
 801a4e0:	4770      	bx	lr
	...

0801a4e4 <atanf>:
 801a4e4:	b538      	push	{r3, r4, r5, lr}
 801a4e6:	ee10 5a10 	vmov	r5, s0
 801a4ea:	eef0 7a40 	vmov.f32	s15, s0
 801a4ee:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801a4f2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801a4f6:	db0f      	blt.n	801a518 <atanf+0x34>
 801a4f8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801a4fc:	dd04      	ble.n	801a508 <atanf+0x24>
 801a4fe:	ee70 7a00 	vadd.f32	s15, s0, s0
 801a502:	eeb0 0a67 	vmov.f32	s0, s15
 801a506:	bd38      	pop	{r3, r4, r5, pc}
 801a508:	2d00      	cmp	r5, #0
 801a50a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801a640 <atanf+0x15c>
 801a50e:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801a644 <atanf+0x160>
 801a512:	fe77 7a80 	vselgt.f32	s15, s15, s0
 801a516:	e7f4      	b.n	801a502 <atanf+0x1e>
 801a518:	4b4b      	ldr	r3, [pc, #300]	; (801a648 <atanf+0x164>)
 801a51a:	429c      	cmp	r4, r3
 801a51c:	dc10      	bgt.n	801a540 <atanf+0x5c>
 801a51e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801a522:	da0a      	bge.n	801a53a <atanf+0x56>
 801a524:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801a64c <atanf+0x168>
 801a528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a52c:	ee30 7a07 	vadd.f32	s14, s0, s14
 801a530:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801a534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a538:	dce3      	bgt.n	801a502 <atanf+0x1e>
 801a53a:	f04f 33ff 	mov.w	r3, #4294967295
 801a53e:	e013      	b.n	801a568 <atanf+0x84>
 801a540:	f000 f8a4 	bl	801a68c <fabsf>
 801a544:	4b42      	ldr	r3, [pc, #264]	; (801a650 <atanf+0x16c>)
 801a546:	429c      	cmp	r4, r3
 801a548:	dc4f      	bgt.n	801a5ea <atanf+0x106>
 801a54a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801a54e:	429c      	cmp	r4, r3
 801a550:	dc41      	bgt.n	801a5d6 <atanf+0xf2>
 801a552:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801a556:	2300      	movs	r3, #0
 801a558:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801a55c:	eea0 7a27 	vfma.f32	s14, s0, s15
 801a560:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a564:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a568:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801a654 <atanf+0x170>
 801a56c:	1c5a      	adds	r2, r3, #1
 801a56e:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 801a658 <atanf+0x174>
 801a572:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801a65c <atanf+0x178>
 801a576:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 801a660 <atanf+0x17c>
 801a57a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801a57e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801a582:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a586:	eddf 5a37 	vldr	s11, [pc, #220]	; 801a664 <atanf+0x180>
 801a58a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a58e:	ed9f 6a36 	vldr	s12, [pc, #216]	; 801a668 <atanf+0x184>
 801a592:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a596:	eddf 5a35 	vldr	s11, [pc, #212]	; 801a66c <atanf+0x188>
 801a59a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a59e:	ed9f 6a34 	vldr	s12, [pc, #208]	; 801a670 <atanf+0x18c>
 801a5a2:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a5a6:	eddf 5a33 	vldr	s11, [pc, #204]	; 801a674 <atanf+0x190>
 801a5aa:	eee7 5a05 	vfma.f32	s11, s14, s10
 801a5ae:	ed9f 5a32 	vldr	s10, [pc, #200]	; 801a678 <atanf+0x194>
 801a5b2:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a5b6:	eddf 5a31 	vldr	s11, [pc, #196]	; 801a67c <atanf+0x198>
 801a5ba:	eee5 5a07 	vfma.f32	s11, s10, s14
 801a5be:	eea5 0a87 	vfma.f32	s0, s11, s14
 801a5c2:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a5c6:	eea6 0a26 	vfma.f32	s0, s12, s13
 801a5ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a5ce:	d121      	bne.n	801a614 <atanf+0x130>
 801a5d0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a5d4:	e795      	b.n	801a502 <atanf+0x1e>
 801a5d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a5da:	2301      	movs	r3, #1
 801a5dc:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a5e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a5e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a5e8:	e7be      	b.n	801a568 <atanf+0x84>
 801a5ea:	4b25      	ldr	r3, [pc, #148]	; (801a680 <atanf+0x19c>)
 801a5ec:	429c      	cmp	r4, r3
 801a5ee:	dc0b      	bgt.n	801a608 <atanf+0x124>
 801a5f0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801a5f4:	2302      	movs	r3, #2
 801a5f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a5fa:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a5fe:	eea0 7a27 	vfma.f32	s14, s0, s15
 801a602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a606:	e7af      	b.n	801a568 <atanf+0x84>
 801a608:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801a60c:	2303      	movs	r3, #3
 801a60e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a612:	e7a9      	b.n	801a568 <atanf+0x84>
 801a614:	4a1b      	ldr	r2, [pc, #108]	; (801a684 <atanf+0x1a0>)
 801a616:	2d00      	cmp	r5, #0
 801a618:	491b      	ldr	r1, [pc, #108]	; (801a688 <atanf+0x1a4>)
 801a61a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801a61e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a622:	ed93 7a00 	vldr	s14, [r3]
 801a626:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a62a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a62e:	ed92 0a00 	vldr	s0, [r2]
 801a632:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a636:	bfb8      	it	lt
 801a638:	eef1 7a67 	vneglt.f32	s15, s15
 801a63c:	e761      	b.n	801a502 <atanf+0x1e>
 801a63e:	bf00      	nop
 801a640:	3fc90fdb 	.word	0x3fc90fdb
 801a644:	bfc90fdb 	.word	0xbfc90fdb
 801a648:	3edfffff 	.word	0x3edfffff
 801a64c:	7149f2ca 	.word	0x7149f2ca
 801a650:	3f97ffff 	.word	0x3f97ffff
 801a654:	3c8569d7 	.word	0x3c8569d7
 801a658:	3d4bda59 	.word	0x3d4bda59
 801a65c:	bd15a221 	.word	0xbd15a221
 801a660:	be4ccccd 	.word	0xbe4ccccd
 801a664:	3d886b35 	.word	0x3d886b35
 801a668:	3dba2e6e 	.word	0x3dba2e6e
 801a66c:	3e124925 	.word	0x3e124925
 801a670:	3eaaaaab 	.word	0x3eaaaaab
 801a674:	bd6ef16b 	.word	0xbd6ef16b
 801a678:	bd9d8795 	.word	0xbd9d8795
 801a67c:	bde38e38 	.word	0xbde38e38
 801a680:	401bffff 	.word	0x401bffff
 801a684:	0801b748 	.word	0x0801b748
 801a688:	0801b758 	.word	0x0801b758

0801a68c <fabsf>:
 801a68c:	ee10 3a10 	vmov	r3, s0
 801a690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a694:	ee00 3a10 	vmov	s0, r3
 801a698:	4770      	bx	lr

0801a69a <floorf>:
 801a69a:	febb 0a40 	vrintm.f32	s0, s0
 801a69e:	4770      	bx	lr

0801a6a0 <nanf>:
 801a6a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a6a8 <nanf+0x8>
 801a6a4:	4770      	bx	lr
 801a6a6:	bf00      	nop
 801a6a8:	7fc00000 	.word	0x7fc00000

0801a6ac <scalbnf>:
 801a6ac:	ee10 3a10 	vmov	r3, s0
 801a6b0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801a6b4:	d024      	beq.n	801a700 <scalbnf+0x54>
 801a6b6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a6ba:	d302      	bcc.n	801a6c2 <scalbnf+0x16>
 801a6bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a6c0:	4770      	bx	lr
 801a6c2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801a6c6:	d121      	bne.n	801a70c <scalbnf+0x60>
 801a6c8:	4b29      	ldr	r3, [pc, #164]	; (801a770 <scalbnf+0xc4>)
 801a6ca:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801a774 <scalbnf+0xc8>
 801a6ce:	4298      	cmp	r0, r3
 801a6d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a6d4:	db15      	blt.n	801a702 <scalbnf+0x56>
 801a6d6:	ee10 3a10 	vmov	r3, s0
 801a6da:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a6de:	3a19      	subs	r2, #25
 801a6e0:	4402      	add	r2, r0
 801a6e2:	2afe      	cmp	r2, #254	; 0xfe
 801a6e4:	dd14      	ble.n	801a710 <scalbnf+0x64>
 801a6e6:	ee10 3a10 	vmov	r3, s0
 801a6ea:	eddf 7a23 	vldr	s15, [pc, #140]	; 801a778 <scalbnf+0xcc>
 801a6ee:	eddf 6a23 	vldr	s13, [pc, #140]	; 801a77c <scalbnf+0xd0>
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	eeb0 7a67 	vmov.f32	s14, s15
 801a6f8:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801a6fc:	ee27 0a27 	vmul.f32	s0, s14, s15
 801a700:	4770      	bx	lr
 801a702:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a780 <scalbnf+0xd4>
 801a706:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a70a:	4770      	bx	lr
 801a70c:	0dd2      	lsrs	r2, r2, #23
 801a70e:	e7e7      	b.n	801a6e0 <scalbnf+0x34>
 801a710:	2a00      	cmp	r2, #0
 801a712:	dd06      	ble.n	801a722 <scalbnf+0x76>
 801a714:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a718:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a71c:	ee00 3a10 	vmov	s0, r3
 801a720:	4770      	bx	lr
 801a722:	f112 0f16 	cmn.w	r2, #22
 801a726:	da19      	bge.n	801a75c <scalbnf+0xb0>
 801a728:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a72c:	4298      	cmp	r0, r3
 801a72e:	ee10 3a10 	vmov	r3, s0
 801a732:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a736:	dd09      	ble.n	801a74c <scalbnf+0xa0>
 801a738:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 801a778 <scalbnf+0xcc>
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 801a77c <scalbnf+0xd0>
 801a742:	eef0 7a40 	vmov.f32	s15, s0
 801a746:	fe00 0a07 	vseleq.f32	s0, s0, s14
 801a74a:	e7dc      	b.n	801a706 <scalbnf+0x5a>
 801a74c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801a780 <scalbnf+0xd4>
 801a750:	2b00      	cmp	r3, #0
 801a752:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801a784 <scalbnf+0xd8>
 801a756:	eef0 7a40 	vmov.f32	s15, s0
 801a75a:	e7f4      	b.n	801a746 <scalbnf+0x9a>
 801a75c:	3219      	adds	r2, #25
 801a75e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a762:	eddf 7a09 	vldr	s15, [pc, #36]	; 801a788 <scalbnf+0xdc>
 801a766:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a76a:	ee07 3a10 	vmov	s14, r3
 801a76e:	e7c5      	b.n	801a6fc <scalbnf+0x50>
 801a770:	ffff3cb0 	.word	0xffff3cb0
 801a774:	4c000000 	.word	0x4c000000
 801a778:	7149f2ca 	.word	0x7149f2ca
 801a77c:	f149f2ca 	.word	0xf149f2ca
 801a780:	0da24260 	.word	0x0da24260
 801a784:	8da24260 	.word	0x8da24260
 801a788:	33000000 	.word	0x33000000

0801a78c <__errno>:
 801a78c:	4b01      	ldr	r3, [pc, #4]	; (801a794 <__errno+0x8>)
 801a78e:	6818      	ldr	r0, [r3, #0]
 801a790:	4770      	bx	lr
 801a792:	bf00      	nop
 801a794:	200000b0 	.word	0x200000b0

0801a798 <__libc_init_array>:
 801a798:	b570      	push	{r4, r5, r6, lr}
 801a79a:	4d0d      	ldr	r5, [pc, #52]	; (801a7d0 <__libc_init_array+0x38>)
 801a79c:	2600      	movs	r6, #0
 801a79e:	4c0d      	ldr	r4, [pc, #52]	; (801a7d4 <__libc_init_array+0x3c>)
 801a7a0:	1b64      	subs	r4, r4, r5
 801a7a2:	10a4      	asrs	r4, r4, #2
 801a7a4:	42a6      	cmp	r6, r4
 801a7a6:	d109      	bne.n	801a7bc <__libc_init_array+0x24>
 801a7a8:	4d0b      	ldr	r5, [pc, #44]	; (801a7d8 <__libc_init_array+0x40>)
 801a7aa:	2600      	movs	r6, #0
 801a7ac:	4c0b      	ldr	r4, [pc, #44]	; (801a7dc <__libc_init_array+0x44>)
 801a7ae:	f000 fc71 	bl	801b094 <_init>
 801a7b2:	1b64      	subs	r4, r4, r5
 801a7b4:	10a4      	asrs	r4, r4, #2
 801a7b6:	42a6      	cmp	r6, r4
 801a7b8:	d105      	bne.n	801a7c6 <__libc_init_array+0x2e>
 801a7ba:	bd70      	pop	{r4, r5, r6, pc}
 801a7bc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a7c0:	3601      	adds	r6, #1
 801a7c2:	4798      	blx	r3
 801a7c4:	e7ee      	b.n	801a7a4 <__libc_init_array+0xc>
 801a7c6:	f855 3b04 	ldr.w	r3, [r5], #4
 801a7ca:	3601      	adds	r6, #1
 801a7cc:	4798      	blx	r3
 801a7ce:	e7f2      	b.n	801a7b6 <__libc_init_array+0x1e>
 801a7d0:	0801b7a4 	.word	0x0801b7a4
 801a7d4:	0801b7a4 	.word	0x0801b7a4
 801a7d8:	0801b7a4 	.word	0x0801b7a4
 801a7dc:	0801b7a8 	.word	0x0801b7a8

0801a7e0 <memcpy>:
 801a7e0:	440a      	add	r2, r1
 801a7e2:	1e43      	subs	r3, r0, #1
 801a7e4:	4291      	cmp	r1, r2
 801a7e6:	d100      	bne.n	801a7ea <memcpy+0xa>
 801a7e8:	4770      	bx	lr
 801a7ea:	b510      	push	{r4, lr}
 801a7ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a7f0:	4291      	cmp	r1, r2
 801a7f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a7f6:	d1f9      	bne.n	801a7ec <memcpy+0xc>
 801a7f8:	bd10      	pop	{r4, pc}

0801a7fa <memset>:
 801a7fa:	4402      	add	r2, r0
 801a7fc:	4603      	mov	r3, r0
 801a7fe:	4293      	cmp	r3, r2
 801a800:	d100      	bne.n	801a804 <memset+0xa>
 801a802:	4770      	bx	lr
 801a804:	f803 1b01 	strb.w	r1, [r3], #1
 801a808:	e7f9      	b.n	801a7fe <memset+0x4>
	...

0801a80c <sniprintf>:
 801a80c:	b40c      	push	{r2, r3}
 801a80e:	4b18      	ldr	r3, [pc, #96]	; (801a870 <sniprintf+0x64>)
 801a810:	b530      	push	{r4, r5, lr}
 801a812:	1e0c      	subs	r4, r1, #0
 801a814:	b09d      	sub	sp, #116	; 0x74
 801a816:	681d      	ldr	r5, [r3, #0]
 801a818:	da08      	bge.n	801a82c <sniprintf+0x20>
 801a81a:	238b      	movs	r3, #139	; 0x8b
 801a81c:	f04f 30ff 	mov.w	r0, #4294967295
 801a820:	602b      	str	r3, [r5, #0]
 801a822:	b01d      	add	sp, #116	; 0x74
 801a824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a828:	b002      	add	sp, #8
 801a82a:	4770      	bx	lr
 801a82c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a830:	9002      	str	r0, [sp, #8]
 801a832:	9006      	str	r0, [sp, #24]
 801a834:	a902      	add	r1, sp, #8
 801a836:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a83a:	bf14      	ite	ne
 801a83c:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a840:	4623      	moveq	r3, r4
 801a842:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a844:	4628      	mov	r0, r5
 801a846:	9304      	str	r3, [sp, #16]
 801a848:	9307      	str	r3, [sp, #28]
 801a84a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a84e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a852:	ab21      	add	r3, sp, #132	; 0x84
 801a854:	9301      	str	r3, [sp, #4]
 801a856:	f000 f869 	bl	801a92c <_svfiprintf_r>
 801a85a:	1c43      	adds	r3, r0, #1
 801a85c:	bfbc      	itt	lt
 801a85e:	238b      	movlt	r3, #139	; 0x8b
 801a860:	602b      	strlt	r3, [r5, #0]
 801a862:	2c00      	cmp	r4, #0
 801a864:	d0dd      	beq.n	801a822 <sniprintf+0x16>
 801a866:	9b02      	ldr	r3, [sp, #8]
 801a868:	2200      	movs	r2, #0
 801a86a:	701a      	strb	r2, [r3, #0]
 801a86c:	e7d9      	b.n	801a822 <sniprintf+0x16>
 801a86e:	bf00      	nop
 801a870:	200000b0 	.word	0x200000b0

0801a874 <__ssputs_r>:
 801a874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a878:	688e      	ldr	r6, [r1, #8]
 801a87a:	4682      	mov	sl, r0
 801a87c:	460c      	mov	r4, r1
 801a87e:	4690      	mov	r8, r2
 801a880:	429e      	cmp	r6, r3
 801a882:	461f      	mov	r7, r3
 801a884:	d838      	bhi.n	801a8f8 <__ssputs_r+0x84>
 801a886:	898a      	ldrh	r2, [r1, #12]
 801a888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a88c:	d032      	beq.n	801a8f4 <__ssputs_r+0x80>
 801a88e:	6825      	ldr	r5, [r4, #0]
 801a890:	3301      	adds	r3, #1
 801a892:	6909      	ldr	r1, [r1, #16]
 801a894:	eba5 0901 	sub.w	r9, r5, r1
 801a898:	6965      	ldr	r5, [r4, #20]
 801a89a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a89e:	444b      	add	r3, r9
 801a8a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a8a4:	106d      	asrs	r5, r5, #1
 801a8a6:	429d      	cmp	r5, r3
 801a8a8:	bf38      	it	cc
 801a8aa:	461d      	movcc	r5, r3
 801a8ac:	0553      	lsls	r3, r2, #21
 801a8ae:	d531      	bpl.n	801a914 <__ssputs_r+0xa0>
 801a8b0:	4629      	mov	r1, r5
 801a8b2:	f000 fb49 	bl	801af48 <_malloc_r>
 801a8b6:	4606      	mov	r6, r0
 801a8b8:	b950      	cbnz	r0, 801a8d0 <__ssputs_r+0x5c>
 801a8ba:	230c      	movs	r3, #12
 801a8bc:	f04f 30ff 	mov.w	r0, #4294967295
 801a8c0:	f8ca 3000 	str.w	r3, [sl]
 801a8c4:	89a3      	ldrh	r3, [r4, #12]
 801a8c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a8ca:	81a3      	strh	r3, [r4, #12]
 801a8cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8d0:	464a      	mov	r2, r9
 801a8d2:	6921      	ldr	r1, [r4, #16]
 801a8d4:	f7ff ff84 	bl	801a7e0 <memcpy>
 801a8d8:	89a3      	ldrh	r3, [r4, #12]
 801a8da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a8de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a8e2:	81a3      	strh	r3, [r4, #12]
 801a8e4:	6126      	str	r6, [r4, #16]
 801a8e6:	444e      	add	r6, r9
 801a8e8:	6165      	str	r5, [r4, #20]
 801a8ea:	eba5 0509 	sub.w	r5, r5, r9
 801a8ee:	6026      	str	r6, [r4, #0]
 801a8f0:	463e      	mov	r6, r7
 801a8f2:	60a5      	str	r5, [r4, #8]
 801a8f4:	42be      	cmp	r6, r7
 801a8f6:	d900      	bls.n	801a8fa <__ssputs_r+0x86>
 801a8f8:	463e      	mov	r6, r7
 801a8fa:	4632      	mov	r2, r6
 801a8fc:	4641      	mov	r1, r8
 801a8fe:	6820      	ldr	r0, [r4, #0]
 801a900:	f000 fab8 	bl	801ae74 <memmove>
 801a904:	68a3      	ldr	r3, [r4, #8]
 801a906:	6822      	ldr	r2, [r4, #0]
 801a908:	2000      	movs	r0, #0
 801a90a:	1b9b      	subs	r3, r3, r6
 801a90c:	4432      	add	r2, r6
 801a90e:	60a3      	str	r3, [r4, #8]
 801a910:	6022      	str	r2, [r4, #0]
 801a912:	e7db      	b.n	801a8cc <__ssputs_r+0x58>
 801a914:	462a      	mov	r2, r5
 801a916:	f000 fb71 	bl	801affc <_realloc_r>
 801a91a:	4606      	mov	r6, r0
 801a91c:	2800      	cmp	r0, #0
 801a91e:	d1e1      	bne.n	801a8e4 <__ssputs_r+0x70>
 801a920:	6921      	ldr	r1, [r4, #16]
 801a922:	4650      	mov	r0, sl
 801a924:	f000 fac0 	bl	801aea8 <_free_r>
 801a928:	e7c7      	b.n	801a8ba <__ssputs_r+0x46>
	...

0801a92c <_svfiprintf_r>:
 801a92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a930:	4698      	mov	r8, r3
 801a932:	898b      	ldrh	r3, [r1, #12]
 801a934:	b09d      	sub	sp, #116	; 0x74
 801a936:	4607      	mov	r7, r0
 801a938:	061b      	lsls	r3, r3, #24
 801a93a:	460d      	mov	r5, r1
 801a93c:	4614      	mov	r4, r2
 801a93e:	d50e      	bpl.n	801a95e <_svfiprintf_r+0x32>
 801a940:	690b      	ldr	r3, [r1, #16]
 801a942:	b963      	cbnz	r3, 801a95e <_svfiprintf_r+0x32>
 801a944:	2140      	movs	r1, #64	; 0x40
 801a946:	f000 faff 	bl	801af48 <_malloc_r>
 801a94a:	6028      	str	r0, [r5, #0]
 801a94c:	6128      	str	r0, [r5, #16]
 801a94e:	b920      	cbnz	r0, 801a95a <_svfiprintf_r+0x2e>
 801a950:	230c      	movs	r3, #12
 801a952:	603b      	str	r3, [r7, #0]
 801a954:	f04f 30ff 	mov.w	r0, #4294967295
 801a958:	e0d1      	b.n	801aafe <_svfiprintf_r+0x1d2>
 801a95a:	2340      	movs	r3, #64	; 0x40
 801a95c:	616b      	str	r3, [r5, #20]
 801a95e:	2300      	movs	r3, #0
 801a960:	f8cd 800c 	str.w	r8, [sp, #12]
 801a964:	f04f 0901 	mov.w	r9, #1
 801a968:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 801ab18 <_svfiprintf_r+0x1ec>
 801a96c:	9309      	str	r3, [sp, #36]	; 0x24
 801a96e:	2320      	movs	r3, #32
 801a970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a974:	2330      	movs	r3, #48	; 0x30
 801a976:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a97a:	4623      	mov	r3, r4
 801a97c:	469a      	mov	sl, r3
 801a97e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a982:	b10a      	cbz	r2, 801a988 <_svfiprintf_r+0x5c>
 801a984:	2a25      	cmp	r2, #37	; 0x25
 801a986:	d1f9      	bne.n	801a97c <_svfiprintf_r+0x50>
 801a988:	ebba 0b04 	subs.w	fp, sl, r4
 801a98c:	d00b      	beq.n	801a9a6 <_svfiprintf_r+0x7a>
 801a98e:	465b      	mov	r3, fp
 801a990:	4622      	mov	r2, r4
 801a992:	4629      	mov	r1, r5
 801a994:	4638      	mov	r0, r7
 801a996:	f7ff ff6d 	bl	801a874 <__ssputs_r>
 801a99a:	3001      	adds	r0, #1
 801a99c:	f000 80aa 	beq.w	801aaf4 <_svfiprintf_r+0x1c8>
 801a9a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a9a2:	445a      	add	r2, fp
 801a9a4:	9209      	str	r2, [sp, #36]	; 0x24
 801a9a6:	f89a 3000 	ldrb.w	r3, [sl]
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	f000 80a2 	beq.w	801aaf4 <_svfiprintf_r+0x1c8>
 801a9b0:	2300      	movs	r3, #0
 801a9b2:	f04f 32ff 	mov.w	r2, #4294967295
 801a9b6:	f10a 0a01 	add.w	sl, sl, #1
 801a9ba:	9304      	str	r3, [sp, #16]
 801a9bc:	9307      	str	r3, [sp, #28]
 801a9be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a9c2:	931a      	str	r3, [sp, #104]	; 0x68
 801a9c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a9c8:	4654      	mov	r4, sl
 801a9ca:	2205      	movs	r2, #5
 801a9cc:	4852      	ldr	r0, [pc, #328]	; (801ab18 <_svfiprintf_r+0x1ec>)
 801a9ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9d2:	f000 fa41 	bl	801ae58 <memchr>
 801a9d6:	9a04      	ldr	r2, [sp, #16]
 801a9d8:	b9d8      	cbnz	r0, 801aa12 <_svfiprintf_r+0xe6>
 801a9da:	06d0      	lsls	r0, r2, #27
 801a9dc:	bf44      	itt	mi
 801a9de:	2320      	movmi	r3, #32
 801a9e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9e4:	0711      	lsls	r1, r2, #28
 801a9e6:	bf44      	itt	mi
 801a9e8:	232b      	movmi	r3, #43	; 0x2b
 801a9ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9ee:	f89a 3000 	ldrb.w	r3, [sl]
 801a9f2:	2b2a      	cmp	r3, #42	; 0x2a
 801a9f4:	d015      	beq.n	801aa22 <_svfiprintf_r+0xf6>
 801a9f6:	9a07      	ldr	r2, [sp, #28]
 801a9f8:	4654      	mov	r4, sl
 801a9fa:	2000      	movs	r0, #0
 801a9fc:	f04f 0c0a 	mov.w	ip, #10
 801aa00:	4621      	mov	r1, r4
 801aa02:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aa06:	3b30      	subs	r3, #48	; 0x30
 801aa08:	2b09      	cmp	r3, #9
 801aa0a:	d94e      	bls.n	801aaaa <_svfiprintf_r+0x17e>
 801aa0c:	b1b0      	cbz	r0, 801aa3c <_svfiprintf_r+0x110>
 801aa0e:	9207      	str	r2, [sp, #28]
 801aa10:	e014      	b.n	801aa3c <_svfiprintf_r+0x110>
 801aa12:	eba0 0308 	sub.w	r3, r0, r8
 801aa16:	46a2      	mov	sl, r4
 801aa18:	fa09 f303 	lsl.w	r3, r9, r3
 801aa1c:	4313      	orrs	r3, r2
 801aa1e:	9304      	str	r3, [sp, #16]
 801aa20:	e7d2      	b.n	801a9c8 <_svfiprintf_r+0x9c>
 801aa22:	9b03      	ldr	r3, [sp, #12]
 801aa24:	1d19      	adds	r1, r3, #4
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	9103      	str	r1, [sp, #12]
 801aa2c:	bfbb      	ittet	lt
 801aa2e:	425b      	neglt	r3, r3
 801aa30:	f042 0202 	orrlt.w	r2, r2, #2
 801aa34:	9307      	strge	r3, [sp, #28]
 801aa36:	9307      	strlt	r3, [sp, #28]
 801aa38:	bfb8      	it	lt
 801aa3a:	9204      	strlt	r2, [sp, #16]
 801aa3c:	7823      	ldrb	r3, [r4, #0]
 801aa3e:	2b2e      	cmp	r3, #46	; 0x2e
 801aa40:	d10c      	bne.n	801aa5c <_svfiprintf_r+0x130>
 801aa42:	7863      	ldrb	r3, [r4, #1]
 801aa44:	2b2a      	cmp	r3, #42	; 0x2a
 801aa46:	d135      	bne.n	801aab4 <_svfiprintf_r+0x188>
 801aa48:	9b03      	ldr	r3, [sp, #12]
 801aa4a:	3402      	adds	r4, #2
 801aa4c:	1d1a      	adds	r2, r3, #4
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	9203      	str	r2, [sp, #12]
 801aa54:	bfb8      	it	lt
 801aa56:	f04f 33ff 	movlt.w	r3, #4294967295
 801aa5a:	9305      	str	r3, [sp, #20]
 801aa5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ab28 <_svfiprintf_r+0x1fc>
 801aa60:	2203      	movs	r2, #3
 801aa62:	7821      	ldrb	r1, [r4, #0]
 801aa64:	4650      	mov	r0, sl
 801aa66:	f000 f9f7 	bl	801ae58 <memchr>
 801aa6a:	b140      	cbz	r0, 801aa7e <_svfiprintf_r+0x152>
 801aa6c:	2340      	movs	r3, #64	; 0x40
 801aa6e:	eba0 000a 	sub.w	r0, r0, sl
 801aa72:	3401      	adds	r4, #1
 801aa74:	fa03 f000 	lsl.w	r0, r3, r0
 801aa78:	9b04      	ldr	r3, [sp, #16]
 801aa7a:	4303      	orrs	r3, r0
 801aa7c:	9304      	str	r3, [sp, #16]
 801aa7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa82:	2206      	movs	r2, #6
 801aa84:	4825      	ldr	r0, [pc, #148]	; (801ab1c <_svfiprintf_r+0x1f0>)
 801aa86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aa8a:	f000 f9e5 	bl	801ae58 <memchr>
 801aa8e:	2800      	cmp	r0, #0
 801aa90:	d038      	beq.n	801ab04 <_svfiprintf_r+0x1d8>
 801aa92:	4b23      	ldr	r3, [pc, #140]	; (801ab20 <_svfiprintf_r+0x1f4>)
 801aa94:	bb1b      	cbnz	r3, 801aade <_svfiprintf_r+0x1b2>
 801aa96:	9b03      	ldr	r3, [sp, #12]
 801aa98:	3307      	adds	r3, #7
 801aa9a:	f023 0307 	bic.w	r3, r3, #7
 801aa9e:	3308      	adds	r3, #8
 801aaa0:	9303      	str	r3, [sp, #12]
 801aaa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aaa4:	4433      	add	r3, r6
 801aaa6:	9309      	str	r3, [sp, #36]	; 0x24
 801aaa8:	e767      	b.n	801a97a <_svfiprintf_r+0x4e>
 801aaaa:	fb0c 3202 	mla	r2, ip, r2, r3
 801aaae:	460c      	mov	r4, r1
 801aab0:	2001      	movs	r0, #1
 801aab2:	e7a5      	b.n	801aa00 <_svfiprintf_r+0xd4>
 801aab4:	2300      	movs	r3, #0
 801aab6:	3401      	adds	r4, #1
 801aab8:	f04f 0c0a 	mov.w	ip, #10
 801aabc:	4619      	mov	r1, r3
 801aabe:	9305      	str	r3, [sp, #20]
 801aac0:	4620      	mov	r0, r4
 801aac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aac6:	3a30      	subs	r2, #48	; 0x30
 801aac8:	2a09      	cmp	r2, #9
 801aaca:	d903      	bls.n	801aad4 <_svfiprintf_r+0x1a8>
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d0c5      	beq.n	801aa5c <_svfiprintf_r+0x130>
 801aad0:	9105      	str	r1, [sp, #20]
 801aad2:	e7c3      	b.n	801aa5c <_svfiprintf_r+0x130>
 801aad4:	fb0c 2101 	mla	r1, ip, r1, r2
 801aad8:	4604      	mov	r4, r0
 801aada:	2301      	movs	r3, #1
 801aadc:	e7f0      	b.n	801aac0 <_svfiprintf_r+0x194>
 801aade:	ab03      	add	r3, sp, #12
 801aae0:	462a      	mov	r2, r5
 801aae2:	a904      	add	r1, sp, #16
 801aae4:	4638      	mov	r0, r7
 801aae6:	9300      	str	r3, [sp, #0]
 801aae8:	4b0e      	ldr	r3, [pc, #56]	; (801ab24 <_svfiprintf_r+0x1f8>)
 801aaea:	e000      	b.n	801aaee <_svfiprintf_r+0x1c2>
 801aaec:	bf00      	nop
 801aaee:	1c42      	adds	r2, r0, #1
 801aaf0:	4606      	mov	r6, r0
 801aaf2:	d1d6      	bne.n	801aaa2 <_svfiprintf_r+0x176>
 801aaf4:	89ab      	ldrh	r3, [r5, #12]
 801aaf6:	065b      	lsls	r3, r3, #25
 801aaf8:	f53f af2c 	bmi.w	801a954 <_svfiprintf_r+0x28>
 801aafc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aafe:	b01d      	add	sp, #116	; 0x74
 801ab00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab04:	ab03      	add	r3, sp, #12
 801ab06:	462a      	mov	r2, r5
 801ab08:	a904      	add	r1, sp, #16
 801ab0a:	4638      	mov	r0, r7
 801ab0c:	9300      	str	r3, [sp, #0]
 801ab0e:	4b05      	ldr	r3, [pc, #20]	; (801ab24 <_svfiprintf_r+0x1f8>)
 801ab10:	f000 f87c 	bl	801ac0c <_printf_i>
 801ab14:	e7eb      	b.n	801aaee <_svfiprintf_r+0x1c2>
 801ab16:	bf00      	nop
 801ab18:	0801b768 	.word	0x0801b768
 801ab1c:	0801b772 	.word	0x0801b772
 801ab20:	00000000 	.word	0x00000000
 801ab24:	0801a875 	.word	0x0801a875
 801ab28:	0801b76e 	.word	0x0801b76e

0801ab2c <_printf_common>:
 801ab2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab30:	4616      	mov	r6, r2
 801ab32:	4699      	mov	r9, r3
 801ab34:	688a      	ldr	r2, [r1, #8]
 801ab36:	4607      	mov	r7, r0
 801ab38:	690b      	ldr	r3, [r1, #16]
 801ab3a:	460c      	mov	r4, r1
 801ab3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ab40:	4293      	cmp	r3, r2
 801ab42:	bfb8      	it	lt
 801ab44:	4613      	movlt	r3, r2
 801ab46:	6033      	str	r3, [r6, #0]
 801ab48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ab4c:	b10a      	cbz	r2, 801ab52 <_printf_common+0x26>
 801ab4e:	3301      	adds	r3, #1
 801ab50:	6033      	str	r3, [r6, #0]
 801ab52:	6823      	ldr	r3, [r4, #0]
 801ab54:	0699      	lsls	r1, r3, #26
 801ab56:	bf42      	ittt	mi
 801ab58:	6833      	ldrmi	r3, [r6, #0]
 801ab5a:	3302      	addmi	r3, #2
 801ab5c:	6033      	strmi	r3, [r6, #0]
 801ab5e:	6825      	ldr	r5, [r4, #0]
 801ab60:	f015 0506 	ands.w	r5, r5, #6
 801ab64:	d106      	bne.n	801ab74 <_printf_common+0x48>
 801ab66:	f104 0a19 	add.w	sl, r4, #25
 801ab6a:	68e3      	ldr	r3, [r4, #12]
 801ab6c:	6832      	ldr	r2, [r6, #0]
 801ab6e:	1a9b      	subs	r3, r3, r2
 801ab70:	42ab      	cmp	r3, r5
 801ab72:	dc29      	bgt.n	801abc8 <_printf_common+0x9c>
 801ab74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ab78:	1e13      	subs	r3, r2, #0
 801ab7a:	6822      	ldr	r2, [r4, #0]
 801ab7c:	bf18      	it	ne
 801ab7e:	2301      	movne	r3, #1
 801ab80:	0692      	lsls	r2, r2, #26
 801ab82:	d42e      	bmi.n	801abe2 <_printf_common+0xb6>
 801ab84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ab88:	4649      	mov	r1, r9
 801ab8a:	4638      	mov	r0, r7
 801ab8c:	47c0      	blx	r8
 801ab8e:	3001      	adds	r0, #1
 801ab90:	d021      	beq.n	801abd6 <_printf_common+0xaa>
 801ab92:	6823      	ldr	r3, [r4, #0]
 801ab94:	341a      	adds	r4, #26
 801ab96:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 801ab9a:	f003 0306 	and.w	r3, r3, #6
 801ab9e:	6832      	ldr	r2, [r6, #0]
 801aba0:	2600      	movs	r6, #0
 801aba2:	2b04      	cmp	r3, #4
 801aba4:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801aba8:	bf08      	it	eq
 801abaa:	1aad      	subeq	r5, r5, r2
 801abac:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801abb0:	bf14      	ite	ne
 801abb2:	2500      	movne	r5, #0
 801abb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801abb8:	4293      	cmp	r3, r2
 801abba:	bfc4      	itt	gt
 801abbc:	1a9b      	subgt	r3, r3, r2
 801abbe:	18ed      	addgt	r5, r5, r3
 801abc0:	42b5      	cmp	r5, r6
 801abc2:	d11a      	bne.n	801abfa <_printf_common+0xce>
 801abc4:	2000      	movs	r0, #0
 801abc6:	e008      	b.n	801abda <_printf_common+0xae>
 801abc8:	2301      	movs	r3, #1
 801abca:	4652      	mov	r2, sl
 801abcc:	4649      	mov	r1, r9
 801abce:	4638      	mov	r0, r7
 801abd0:	47c0      	blx	r8
 801abd2:	3001      	adds	r0, #1
 801abd4:	d103      	bne.n	801abde <_printf_common+0xb2>
 801abd6:	f04f 30ff 	mov.w	r0, #4294967295
 801abda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abde:	3501      	adds	r5, #1
 801abe0:	e7c3      	b.n	801ab6a <_printf_common+0x3e>
 801abe2:	18e1      	adds	r1, r4, r3
 801abe4:	1c5a      	adds	r2, r3, #1
 801abe6:	2030      	movs	r0, #48	; 0x30
 801abe8:	3302      	adds	r3, #2
 801abea:	4422      	add	r2, r4
 801abec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801abf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801abf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801abf8:	e7c4      	b.n	801ab84 <_printf_common+0x58>
 801abfa:	2301      	movs	r3, #1
 801abfc:	4622      	mov	r2, r4
 801abfe:	4649      	mov	r1, r9
 801ac00:	4638      	mov	r0, r7
 801ac02:	47c0      	blx	r8
 801ac04:	3001      	adds	r0, #1
 801ac06:	d0e6      	beq.n	801abd6 <_printf_common+0xaa>
 801ac08:	3601      	adds	r6, #1
 801ac0a:	e7d9      	b.n	801abc0 <_printf_common+0x94>

0801ac0c <_printf_i>:
 801ac0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ac10:	460c      	mov	r4, r1
 801ac12:	4691      	mov	r9, r2
 801ac14:	4680      	mov	r8, r0
 801ac16:	469a      	mov	sl, r3
 801ac18:	7e27      	ldrb	r7, [r4, #24]
 801ac1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ac1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ac20:	2f78      	cmp	r7, #120	; 0x78
 801ac22:	d807      	bhi.n	801ac34 <_printf_i+0x28>
 801ac24:	2f62      	cmp	r7, #98	; 0x62
 801ac26:	d80a      	bhi.n	801ac3e <_printf_i+0x32>
 801ac28:	2f00      	cmp	r7, #0
 801ac2a:	f000 80d8 	beq.w	801adde <_printf_i+0x1d2>
 801ac2e:	2f58      	cmp	r7, #88	; 0x58
 801ac30:	f000 80a3 	beq.w	801ad7a <_printf_i+0x16e>
 801ac34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ac38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ac3c:	e03a      	b.n	801acb4 <_printf_i+0xa8>
 801ac3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ac42:	2b15      	cmp	r3, #21
 801ac44:	d8f6      	bhi.n	801ac34 <_printf_i+0x28>
 801ac46:	a001      	add	r0, pc, #4	; (adr r0, 801ac4c <_printf_i+0x40>)
 801ac48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801ac4c:	0801aca5 	.word	0x0801aca5
 801ac50:	0801acb9 	.word	0x0801acb9
 801ac54:	0801ac35 	.word	0x0801ac35
 801ac58:	0801ac35 	.word	0x0801ac35
 801ac5c:	0801ac35 	.word	0x0801ac35
 801ac60:	0801ac35 	.word	0x0801ac35
 801ac64:	0801acb9 	.word	0x0801acb9
 801ac68:	0801ac35 	.word	0x0801ac35
 801ac6c:	0801ac35 	.word	0x0801ac35
 801ac70:	0801ac35 	.word	0x0801ac35
 801ac74:	0801ac35 	.word	0x0801ac35
 801ac78:	0801adc5 	.word	0x0801adc5
 801ac7c:	0801ace9 	.word	0x0801ace9
 801ac80:	0801ada7 	.word	0x0801ada7
 801ac84:	0801ac35 	.word	0x0801ac35
 801ac88:	0801ac35 	.word	0x0801ac35
 801ac8c:	0801ade7 	.word	0x0801ade7
 801ac90:	0801ac35 	.word	0x0801ac35
 801ac94:	0801ace9 	.word	0x0801ace9
 801ac98:	0801ac35 	.word	0x0801ac35
 801ac9c:	0801ac35 	.word	0x0801ac35
 801aca0:	0801adaf 	.word	0x0801adaf
 801aca4:	680b      	ldr	r3, [r1, #0]
 801aca6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801acaa:	1d1a      	adds	r2, r3, #4
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	600a      	str	r2, [r1, #0]
 801acb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801acb4:	2301      	movs	r3, #1
 801acb6:	e0a3      	b.n	801ae00 <_printf_i+0x1f4>
 801acb8:	6825      	ldr	r5, [r4, #0]
 801acba:	6808      	ldr	r0, [r1, #0]
 801acbc:	062e      	lsls	r6, r5, #24
 801acbe:	f100 0304 	add.w	r3, r0, #4
 801acc2:	d50a      	bpl.n	801acda <_printf_i+0xce>
 801acc4:	6805      	ldr	r5, [r0, #0]
 801acc6:	600b      	str	r3, [r1, #0]
 801acc8:	2d00      	cmp	r5, #0
 801acca:	da03      	bge.n	801acd4 <_printf_i+0xc8>
 801accc:	232d      	movs	r3, #45	; 0x2d
 801acce:	426d      	negs	r5, r5
 801acd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801acd4:	485e      	ldr	r0, [pc, #376]	; (801ae50 <_printf_i+0x244>)
 801acd6:	230a      	movs	r3, #10
 801acd8:	e019      	b.n	801ad0e <_printf_i+0x102>
 801acda:	f015 0f40 	tst.w	r5, #64	; 0x40
 801acde:	6805      	ldr	r5, [r0, #0]
 801ace0:	600b      	str	r3, [r1, #0]
 801ace2:	bf18      	it	ne
 801ace4:	b22d      	sxthne	r5, r5
 801ace6:	e7ef      	b.n	801acc8 <_printf_i+0xbc>
 801ace8:	680b      	ldr	r3, [r1, #0]
 801acea:	6825      	ldr	r5, [r4, #0]
 801acec:	1d18      	adds	r0, r3, #4
 801acee:	6008      	str	r0, [r1, #0]
 801acf0:	0628      	lsls	r0, r5, #24
 801acf2:	d501      	bpl.n	801acf8 <_printf_i+0xec>
 801acf4:	681d      	ldr	r5, [r3, #0]
 801acf6:	e002      	b.n	801acfe <_printf_i+0xf2>
 801acf8:	0669      	lsls	r1, r5, #25
 801acfa:	d5fb      	bpl.n	801acf4 <_printf_i+0xe8>
 801acfc:	881d      	ldrh	r5, [r3, #0]
 801acfe:	2f6f      	cmp	r7, #111	; 0x6f
 801ad00:	4853      	ldr	r0, [pc, #332]	; (801ae50 <_printf_i+0x244>)
 801ad02:	bf0c      	ite	eq
 801ad04:	2308      	moveq	r3, #8
 801ad06:	230a      	movne	r3, #10
 801ad08:	2100      	movs	r1, #0
 801ad0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ad0e:	6866      	ldr	r6, [r4, #4]
 801ad10:	2e00      	cmp	r6, #0
 801ad12:	60a6      	str	r6, [r4, #8]
 801ad14:	bfa2      	ittt	ge
 801ad16:	6821      	ldrge	r1, [r4, #0]
 801ad18:	f021 0104 	bicge.w	r1, r1, #4
 801ad1c:	6021      	strge	r1, [r4, #0]
 801ad1e:	b90d      	cbnz	r5, 801ad24 <_printf_i+0x118>
 801ad20:	2e00      	cmp	r6, #0
 801ad22:	d04d      	beq.n	801adc0 <_printf_i+0x1b4>
 801ad24:	4616      	mov	r6, r2
 801ad26:	fbb5 f1f3 	udiv	r1, r5, r3
 801ad2a:	fb03 5711 	mls	r7, r3, r1, r5
 801ad2e:	5dc7      	ldrb	r7, [r0, r7]
 801ad30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ad34:	462f      	mov	r7, r5
 801ad36:	460d      	mov	r5, r1
 801ad38:	42bb      	cmp	r3, r7
 801ad3a:	d9f4      	bls.n	801ad26 <_printf_i+0x11a>
 801ad3c:	2b08      	cmp	r3, #8
 801ad3e:	d10b      	bne.n	801ad58 <_printf_i+0x14c>
 801ad40:	6823      	ldr	r3, [r4, #0]
 801ad42:	07df      	lsls	r7, r3, #31
 801ad44:	d508      	bpl.n	801ad58 <_printf_i+0x14c>
 801ad46:	6923      	ldr	r3, [r4, #16]
 801ad48:	6861      	ldr	r1, [r4, #4]
 801ad4a:	4299      	cmp	r1, r3
 801ad4c:	bfde      	ittt	le
 801ad4e:	2330      	movle	r3, #48	; 0x30
 801ad50:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ad54:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ad58:	1b92      	subs	r2, r2, r6
 801ad5a:	6122      	str	r2, [r4, #16]
 801ad5c:	464b      	mov	r3, r9
 801ad5e:	aa03      	add	r2, sp, #12
 801ad60:	4621      	mov	r1, r4
 801ad62:	4640      	mov	r0, r8
 801ad64:	f8cd a000 	str.w	sl, [sp]
 801ad68:	f7ff fee0 	bl	801ab2c <_printf_common>
 801ad6c:	3001      	adds	r0, #1
 801ad6e:	d14c      	bne.n	801ae0a <_printf_i+0x1fe>
 801ad70:	f04f 30ff 	mov.w	r0, #4294967295
 801ad74:	b004      	add	sp, #16
 801ad76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad7a:	4835      	ldr	r0, [pc, #212]	; (801ae50 <_printf_i+0x244>)
 801ad7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ad80:	6823      	ldr	r3, [r4, #0]
 801ad82:	680e      	ldr	r6, [r1, #0]
 801ad84:	061f      	lsls	r7, r3, #24
 801ad86:	f856 5b04 	ldr.w	r5, [r6], #4
 801ad8a:	600e      	str	r6, [r1, #0]
 801ad8c:	d514      	bpl.n	801adb8 <_printf_i+0x1ac>
 801ad8e:	07d9      	lsls	r1, r3, #31
 801ad90:	bf44      	itt	mi
 801ad92:	f043 0320 	orrmi.w	r3, r3, #32
 801ad96:	6023      	strmi	r3, [r4, #0]
 801ad98:	b91d      	cbnz	r5, 801ada2 <_printf_i+0x196>
 801ad9a:	6823      	ldr	r3, [r4, #0]
 801ad9c:	f023 0320 	bic.w	r3, r3, #32
 801ada0:	6023      	str	r3, [r4, #0]
 801ada2:	2310      	movs	r3, #16
 801ada4:	e7b0      	b.n	801ad08 <_printf_i+0xfc>
 801ada6:	6823      	ldr	r3, [r4, #0]
 801ada8:	f043 0320 	orr.w	r3, r3, #32
 801adac:	6023      	str	r3, [r4, #0]
 801adae:	2378      	movs	r3, #120	; 0x78
 801adb0:	4828      	ldr	r0, [pc, #160]	; (801ae54 <_printf_i+0x248>)
 801adb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801adb6:	e7e3      	b.n	801ad80 <_printf_i+0x174>
 801adb8:	065e      	lsls	r6, r3, #25
 801adba:	bf48      	it	mi
 801adbc:	b2ad      	uxthmi	r5, r5
 801adbe:	e7e6      	b.n	801ad8e <_printf_i+0x182>
 801adc0:	4616      	mov	r6, r2
 801adc2:	e7bb      	b.n	801ad3c <_printf_i+0x130>
 801adc4:	680b      	ldr	r3, [r1, #0]
 801adc6:	6826      	ldr	r6, [r4, #0]
 801adc8:	1d1d      	adds	r5, r3, #4
 801adca:	6960      	ldr	r0, [r4, #20]
 801adcc:	600d      	str	r5, [r1, #0]
 801adce:	0635      	lsls	r5, r6, #24
 801add0:	681b      	ldr	r3, [r3, #0]
 801add2:	d501      	bpl.n	801add8 <_printf_i+0x1cc>
 801add4:	6018      	str	r0, [r3, #0]
 801add6:	e002      	b.n	801adde <_printf_i+0x1d2>
 801add8:	0671      	lsls	r1, r6, #25
 801adda:	d5fb      	bpl.n	801add4 <_printf_i+0x1c8>
 801addc:	8018      	strh	r0, [r3, #0]
 801adde:	2300      	movs	r3, #0
 801ade0:	4616      	mov	r6, r2
 801ade2:	6123      	str	r3, [r4, #16]
 801ade4:	e7ba      	b.n	801ad5c <_printf_i+0x150>
 801ade6:	680b      	ldr	r3, [r1, #0]
 801ade8:	1d1a      	adds	r2, r3, #4
 801adea:	600a      	str	r2, [r1, #0]
 801adec:	2100      	movs	r1, #0
 801adee:	681e      	ldr	r6, [r3, #0]
 801adf0:	6862      	ldr	r2, [r4, #4]
 801adf2:	4630      	mov	r0, r6
 801adf4:	f000 f830 	bl	801ae58 <memchr>
 801adf8:	b108      	cbz	r0, 801adfe <_printf_i+0x1f2>
 801adfa:	1b80      	subs	r0, r0, r6
 801adfc:	6060      	str	r0, [r4, #4]
 801adfe:	6863      	ldr	r3, [r4, #4]
 801ae00:	6123      	str	r3, [r4, #16]
 801ae02:	2300      	movs	r3, #0
 801ae04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ae08:	e7a8      	b.n	801ad5c <_printf_i+0x150>
 801ae0a:	6923      	ldr	r3, [r4, #16]
 801ae0c:	4632      	mov	r2, r6
 801ae0e:	4649      	mov	r1, r9
 801ae10:	4640      	mov	r0, r8
 801ae12:	47d0      	blx	sl
 801ae14:	3001      	adds	r0, #1
 801ae16:	d0ab      	beq.n	801ad70 <_printf_i+0x164>
 801ae18:	6823      	ldr	r3, [r4, #0]
 801ae1a:	079b      	lsls	r3, r3, #30
 801ae1c:	d413      	bmi.n	801ae46 <_printf_i+0x23a>
 801ae1e:	68e0      	ldr	r0, [r4, #12]
 801ae20:	9b03      	ldr	r3, [sp, #12]
 801ae22:	4298      	cmp	r0, r3
 801ae24:	bfb8      	it	lt
 801ae26:	4618      	movlt	r0, r3
 801ae28:	e7a4      	b.n	801ad74 <_printf_i+0x168>
 801ae2a:	2301      	movs	r3, #1
 801ae2c:	4632      	mov	r2, r6
 801ae2e:	4649      	mov	r1, r9
 801ae30:	4640      	mov	r0, r8
 801ae32:	47d0      	blx	sl
 801ae34:	3001      	adds	r0, #1
 801ae36:	d09b      	beq.n	801ad70 <_printf_i+0x164>
 801ae38:	3501      	adds	r5, #1
 801ae3a:	68e3      	ldr	r3, [r4, #12]
 801ae3c:	9903      	ldr	r1, [sp, #12]
 801ae3e:	1a5b      	subs	r3, r3, r1
 801ae40:	42ab      	cmp	r3, r5
 801ae42:	dcf2      	bgt.n	801ae2a <_printf_i+0x21e>
 801ae44:	e7eb      	b.n	801ae1e <_printf_i+0x212>
 801ae46:	2500      	movs	r5, #0
 801ae48:	f104 0619 	add.w	r6, r4, #25
 801ae4c:	e7f5      	b.n	801ae3a <_printf_i+0x22e>
 801ae4e:	bf00      	nop
 801ae50:	0801b779 	.word	0x0801b779
 801ae54:	0801b78a 	.word	0x0801b78a

0801ae58 <memchr>:
 801ae58:	b2c9      	uxtb	r1, r1
 801ae5a:	4402      	add	r2, r0
 801ae5c:	b510      	push	{r4, lr}
 801ae5e:	4290      	cmp	r0, r2
 801ae60:	4603      	mov	r3, r0
 801ae62:	d101      	bne.n	801ae68 <memchr+0x10>
 801ae64:	2300      	movs	r3, #0
 801ae66:	e003      	b.n	801ae70 <memchr+0x18>
 801ae68:	781c      	ldrb	r4, [r3, #0]
 801ae6a:	3001      	adds	r0, #1
 801ae6c:	428c      	cmp	r4, r1
 801ae6e:	d1f6      	bne.n	801ae5e <memchr+0x6>
 801ae70:	4618      	mov	r0, r3
 801ae72:	bd10      	pop	{r4, pc}

0801ae74 <memmove>:
 801ae74:	4288      	cmp	r0, r1
 801ae76:	b510      	push	{r4, lr}
 801ae78:	eb01 0402 	add.w	r4, r1, r2
 801ae7c:	d902      	bls.n	801ae84 <memmove+0x10>
 801ae7e:	4284      	cmp	r4, r0
 801ae80:	4623      	mov	r3, r4
 801ae82:	d807      	bhi.n	801ae94 <memmove+0x20>
 801ae84:	1e43      	subs	r3, r0, #1
 801ae86:	42a1      	cmp	r1, r4
 801ae88:	d008      	beq.n	801ae9c <memmove+0x28>
 801ae8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ae8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ae92:	e7f8      	b.n	801ae86 <memmove+0x12>
 801ae94:	4402      	add	r2, r0
 801ae96:	4601      	mov	r1, r0
 801ae98:	428a      	cmp	r2, r1
 801ae9a:	d100      	bne.n	801ae9e <memmove+0x2a>
 801ae9c:	bd10      	pop	{r4, pc}
 801ae9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801aea2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801aea6:	e7f7      	b.n	801ae98 <memmove+0x24>

0801aea8 <_free_r>:
 801aea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aeaa:	2900      	cmp	r1, #0
 801aeac:	d047      	beq.n	801af3e <_free_r+0x96>
 801aeae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aeb2:	1f0c      	subs	r4, r1, #4
 801aeb4:	9001      	str	r0, [sp, #4]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	bfb8      	it	lt
 801aeba:	18e4      	addlt	r4, r4, r3
 801aebc:	f000 f8d4 	bl	801b068 <__malloc_lock>
 801aec0:	4a20      	ldr	r2, [pc, #128]	; (801af44 <_free_r+0x9c>)
 801aec2:	9801      	ldr	r0, [sp, #4]
 801aec4:	6813      	ldr	r3, [r2, #0]
 801aec6:	4615      	mov	r5, r2
 801aec8:	b933      	cbnz	r3, 801aed8 <_free_r+0x30>
 801aeca:	6063      	str	r3, [r4, #4]
 801aecc:	6014      	str	r4, [r2, #0]
 801aece:	b003      	add	sp, #12
 801aed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aed4:	f000 b8ce 	b.w	801b074 <__malloc_unlock>
 801aed8:	42a3      	cmp	r3, r4
 801aeda:	d90b      	bls.n	801aef4 <_free_r+0x4c>
 801aedc:	6821      	ldr	r1, [r4, #0]
 801aede:	1862      	adds	r2, r4, r1
 801aee0:	4293      	cmp	r3, r2
 801aee2:	bf02      	ittt	eq
 801aee4:	681a      	ldreq	r2, [r3, #0]
 801aee6:	685b      	ldreq	r3, [r3, #4]
 801aee8:	1852      	addeq	r2, r2, r1
 801aeea:	6063      	str	r3, [r4, #4]
 801aeec:	bf08      	it	eq
 801aeee:	6022      	streq	r2, [r4, #0]
 801aef0:	602c      	str	r4, [r5, #0]
 801aef2:	e7ec      	b.n	801aece <_free_r+0x26>
 801aef4:	461a      	mov	r2, r3
 801aef6:	685b      	ldr	r3, [r3, #4]
 801aef8:	b10b      	cbz	r3, 801aefe <_free_r+0x56>
 801aefa:	42a3      	cmp	r3, r4
 801aefc:	d9fa      	bls.n	801aef4 <_free_r+0x4c>
 801aefe:	6811      	ldr	r1, [r2, #0]
 801af00:	1855      	adds	r5, r2, r1
 801af02:	42a5      	cmp	r5, r4
 801af04:	d10b      	bne.n	801af1e <_free_r+0x76>
 801af06:	6824      	ldr	r4, [r4, #0]
 801af08:	4421      	add	r1, r4
 801af0a:	1854      	adds	r4, r2, r1
 801af0c:	6011      	str	r1, [r2, #0]
 801af0e:	42a3      	cmp	r3, r4
 801af10:	d1dd      	bne.n	801aece <_free_r+0x26>
 801af12:	681c      	ldr	r4, [r3, #0]
 801af14:	685b      	ldr	r3, [r3, #4]
 801af16:	4421      	add	r1, r4
 801af18:	6053      	str	r3, [r2, #4]
 801af1a:	6011      	str	r1, [r2, #0]
 801af1c:	e7d7      	b.n	801aece <_free_r+0x26>
 801af1e:	d902      	bls.n	801af26 <_free_r+0x7e>
 801af20:	230c      	movs	r3, #12
 801af22:	6003      	str	r3, [r0, #0]
 801af24:	e7d3      	b.n	801aece <_free_r+0x26>
 801af26:	6825      	ldr	r5, [r4, #0]
 801af28:	1961      	adds	r1, r4, r5
 801af2a:	428b      	cmp	r3, r1
 801af2c:	bf02      	ittt	eq
 801af2e:	6819      	ldreq	r1, [r3, #0]
 801af30:	685b      	ldreq	r3, [r3, #4]
 801af32:	1949      	addeq	r1, r1, r5
 801af34:	6063      	str	r3, [r4, #4]
 801af36:	bf08      	it	eq
 801af38:	6021      	streq	r1, [r4, #0]
 801af3a:	6054      	str	r4, [r2, #4]
 801af3c:	e7c7      	b.n	801aece <_free_r+0x26>
 801af3e:	b003      	add	sp, #12
 801af40:	bd30      	pop	{r4, r5, pc}
 801af42:	bf00      	nop
 801af44:	20001e38 	.word	0x20001e38

0801af48 <_malloc_r>:
 801af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af4a:	1ccd      	adds	r5, r1, #3
 801af4c:	4606      	mov	r6, r0
 801af4e:	f025 0503 	bic.w	r5, r5, #3
 801af52:	3508      	adds	r5, #8
 801af54:	2d0c      	cmp	r5, #12
 801af56:	bf38      	it	cc
 801af58:	250c      	movcc	r5, #12
 801af5a:	2d00      	cmp	r5, #0
 801af5c:	db01      	blt.n	801af62 <_malloc_r+0x1a>
 801af5e:	42a9      	cmp	r1, r5
 801af60:	d903      	bls.n	801af6a <_malloc_r+0x22>
 801af62:	230c      	movs	r3, #12
 801af64:	6033      	str	r3, [r6, #0]
 801af66:	2000      	movs	r0, #0
 801af68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af6a:	f000 f87d 	bl	801b068 <__malloc_lock>
 801af6e:	4921      	ldr	r1, [pc, #132]	; (801aff4 <_malloc_r+0xac>)
 801af70:	680a      	ldr	r2, [r1, #0]
 801af72:	4614      	mov	r4, r2
 801af74:	b99c      	cbnz	r4, 801af9e <_malloc_r+0x56>
 801af76:	4f20      	ldr	r7, [pc, #128]	; (801aff8 <_malloc_r+0xb0>)
 801af78:	683b      	ldr	r3, [r7, #0]
 801af7a:	b923      	cbnz	r3, 801af86 <_malloc_r+0x3e>
 801af7c:	4621      	mov	r1, r4
 801af7e:	4630      	mov	r0, r6
 801af80:	f000 f862 	bl	801b048 <_sbrk_r>
 801af84:	6038      	str	r0, [r7, #0]
 801af86:	4629      	mov	r1, r5
 801af88:	4630      	mov	r0, r6
 801af8a:	f000 f85d 	bl	801b048 <_sbrk_r>
 801af8e:	1c43      	adds	r3, r0, #1
 801af90:	d123      	bne.n	801afda <_malloc_r+0x92>
 801af92:	230c      	movs	r3, #12
 801af94:	4630      	mov	r0, r6
 801af96:	6033      	str	r3, [r6, #0]
 801af98:	f000 f86c 	bl	801b074 <__malloc_unlock>
 801af9c:	e7e3      	b.n	801af66 <_malloc_r+0x1e>
 801af9e:	6823      	ldr	r3, [r4, #0]
 801afa0:	1b5b      	subs	r3, r3, r5
 801afa2:	d417      	bmi.n	801afd4 <_malloc_r+0x8c>
 801afa4:	2b0b      	cmp	r3, #11
 801afa6:	d903      	bls.n	801afb0 <_malloc_r+0x68>
 801afa8:	6023      	str	r3, [r4, #0]
 801afaa:	441c      	add	r4, r3
 801afac:	6025      	str	r5, [r4, #0]
 801afae:	e004      	b.n	801afba <_malloc_r+0x72>
 801afb0:	6863      	ldr	r3, [r4, #4]
 801afb2:	42a2      	cmp	r2, r4
 801afb4:	bf0c      	ite	eq
 801afb6:	600b      	streq	r3, [r1, #0]
 801afb8:	6053      	strne	r3, [r2, #4]
 801afba:	4630      	mov	r0, r6
 801afbc:	f000 f85a 	bl	801b074 <__malloc_unlock>
 801afc0:	f104 000b 	add.w	r0, r4, #11
 801afc4:	1d23      	adds	r3, r4, #4
 801afc6:	f020 0007 	bic.w	r0, r0, #7
 801afca:	1ac2      	subs	r2, r0, r3
 801afcc:	d0cc      	beq.n	801af68 <_malloc_r+0x20>
 801afce:	1a1b      	subs	r3, r3, r0
 801afd0:	50a3      	str	r3, [r4, r2]
 801afd2:	e7c9      	b.n	801af68 <_malloc_r+0x20>
 801afd4:	4622      	mov	r2, r4
 801afd6:	6864      	ldr	r4, [r4, #4]
 801afd8:	e7cc      	b.n	801af74 <_malloc_r+0x2c>
 801afda:	1cc4      	adds	r4, r0, #3
 801afdc:	f024 0403 	bic.w	r4, r4, #3
 801afe0:	42a0      	cmp	r0, r4
 801afe2:	d0e3      	beq.n	801afac <_malloc_r+0x64>
 801afe4:	1a21      	subs	r1, r4, r0
 801afe6:	4630      	mov	r0, r6
 801afe8:	f000 f82e 	bl	801b048 <_sbrk_r>
 801afec:	3001      	adds	r0, #1
 801afee:	d1dd      	bne.n	801afac <_malloc_r+0x64>
 801aff0:	e7cf      	b.n	801af92 <_malloc_r+0x4a>
 801aff2:	bf00      	nop
 801aff4:	20001e38 	.word	0x20001e38
 801aff8:	20001e3c 	.word	0x20001e3c

0801affc <_realloc_r>:
 801affc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801affe:	4607      	mov	r7, r0
 801b000:	4614      	mov	r4, r2
 801b002:	460e      	mov	r6, r1
 801b004:	b921      	cbnz	r1, 801b010 <_realloc_r+0x14>
 801b006:	4611      	mov	r1, r2
 801b008:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b00c:	f7ff bf9c 	b.w	801af48 <_malloc_r>
 801b010:	b922      	cbnz	r2, 801b01c <_realloc_r+0x20>
 801b012:	4625      	mov	r5, r4
 801b014:	f7ff ff48 	bl	801aea8 <_free_r>
 801b018:	4628      	mov	r0, r5
 801b01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b01c:	f000 f830 	bl	801b080 <_malloc_usable_size_r>
 801b020:	42a0      	cmp	r0, r4
 801b022:	d20f      	bcs.n	801b044 <_realloc_r+0x48>
 801b024:	4621      	mov	r1, r4
 801b026:	4638      	mov	r0, r7
 801b028:	f7ff ff8e 	bl	801af48 <_malloc_r>
 801b02c:	4605      	mov	r5, r0
 801b02e:	2800      	cmp	r0, #0
 801b030:	d0f2      	beq.n	801b018 <_realloc_r+0x1c>
 801b032:	4631      	mov	r1, r6
 801b034:	4622      	mov	r2, r4
 801b036:	f7ff fbd3 	bl	801a7e0 <memcpy>
 801b03a:	4631      	mov	r1, r6
 801b03c:	4638      	mov	r0, r7
 801b03e:	f7ff ff33 	bl	801aea8 <_free_r>
 801b042:	e7e9      	b.n	801b018 <_realloc_r+0x1c>
 801b044:	4635      	mov	r5, r6
 801b046:	e7e7      	b.n	801b018 <_realloc_r+0x1c>

0801b048 <_sbrk_r>:
 801b048:	b538      	push	{r3, r4, r5, lr}
 801b04a:	2300      	movs	r3, #0
 801b04c:	4d05      	ldr	r5, [pc, #20]	; (801b064 <_sbrk_r+0x1c>)
 801b04e:	4604      	mov	r4, r0
 801b050:	4608      	mov	r0, r1
 801b052:	602b      	str	r3, [r5, #0]
 801b054:	f7e7 fb7a 	bl	800274c <_sbrk>
 801b058:	1c43      	adds	r3, r0, #1
 801b05a:	d102      	bne.n	801b062 <_sbrk_r+0x1a>
 801b05c:	682b      	ldr	r3, [r5, #0]
 801b05e:	b103      	cbz	r3, 801b062 <_sbrk_r+0x1a>
 801b060:	6023      	str	r3, [r4, #0]
 801b062:	bd38      	pop	{r3, r4, r5, pc}
 801b064:	20002964 	.word	0x20002964

0801b068 <__malloc_lock>:
 801b068:	4801      	ldr	r0, [pc, #4]	; (801b070 <__malloc_lock+0x8>)
 801b06a:	f000 b811 	b.w	801b090 <__retarget_lock_acquire_recursive>
 801b06e:	bf00      	nop
 801b070:	2000296c 	.word	0x2000296c

0801b074 <__malloc_unlock>:
 801b074:	4801      	ldr	r0, [pc, #4]	; (801b07c <__malloc_unlock+0x8>)
 801b076:	f000 b80c 	b.w	801b092 <__retarget_lock_release_recursive>
 801b07a:	bf00      	nop
 801b07c:	2000296c 	.word	0x2000296c

0801b080 <_malloc_usable_size_r>:
 801b080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b084:	1f18      	subs	r0, r3, #4
 801b086:	2b00      	cmp	r3, #0
 801b088:	bfbc      	itt	lt
 801b08a:	580b      	ldrlt	r3, [r1, r0]
 801b08c:	18c0      	addlt	r0, r0, r3
 801b08e:	4770      	bx	lr

0801b090 <__retarget_lock_acquire_recursive>:
 801b090:	4770      	bx	lr

0801b092 <__retarget_lock_release_recursive>:
 801b092:	4770      	bx	lr

0801b094 <_init>:
 801b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b096:	bf00      	nop
 801b098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b09a:	bc08      	pop	{r3}
 801b09c:	469e      	mov	lr, r3
 801b09e:	4770      	bx	lr

0801b0a0 <_fini>:
 801b0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0a2:	bf00      	nop
 801b0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b0a6:	bc08      	pop	{r3}
 801b0a8:	469e      	mov	lr, r3
 801b0aa:	4770      	bx	lr
